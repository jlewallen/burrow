<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1224"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="661" width="0.1634%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.0000%" y="645" width="0.1634%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="629" width="0.1634%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0817%" y="613" width="0.0817%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3317%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.1634%" y="645" width="0.1634%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.4134%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2451%" y="629" width="0.0817%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.4951%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4085%" y="613" width="0.0817%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="1"/><text x="0.6585%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5719%" y="565" width="0.0817%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="1"/><text x="0.8219%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.7353%" y="549" width="0.1634%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="2"/><text x="0.9853%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="0.5719%" y="581" width="0.4902%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="6"/><text x="0.8219%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.6536%" y="565" width="0.4085%" height="15" fill="rgb(250,228,42)" fg:x="8" fg:w="5"/><text x="0.9036%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.8987%" y="549" width="0.1634%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="2"/><text x="1.1487%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.9804%" y="533" width="0.0817%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="1"/><text x="1.2304%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.9804%" y="517" width="0.0817%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="1"/><text x="1.2304%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9804%" y="501" width="0.0817%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="1"/><text x="1.2304%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1438%" y="517" width="0.0817%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="1"/><text x="1.3938%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1438%" y="501" width="0.0817%" height="15" fill="rgb(225,20,46)" fg:x="14" fg:w="1"/><text x="1.3938%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.1438%" y="533" width="0.1634%" height="15" fill="rgb(210,31,41)" fg:x="14" fg:w="2"/><text x="1.3938%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2255%" y="517" width="0.0817%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="1"/><text x="1.4755%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.2255%" y="501" width="0.0817%" height="15" fill="rgb(226,26,5)" fg:x="15" fg:w="1"/><text x="1.4755%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3072%" y="533" width="0.0817%" height="15" fill="rgb(249,33,26)" fg:x="16" fg:w="1"/><text x="1.5572%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3072%" y="517" width="0.0817%" height="15" fill="rgb(235,183,28)" fg:x="16" fg:w="1"/><text x="1.5572%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="1.0621%" y="581" width="0.5719%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="7"/><text x="1.3121%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="1.1438%" y="565" width="0.4902%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="6"/><text x="1.3938%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="1.1438%" y="549" width="0.4902%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="6"/><text x="1.3938%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="1.3889%" y="533" width="0.2451%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="3"/><text x="1.6389%" y="543.50"></text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="1.3889%" y="517" width="0.2451%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="3"/><text x="1.6389%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (19 samples, 1.55%)</title><rect x="0.1634%" y="661" width="1.5523%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="19"/><text x="0.4134%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (17 samples, 1.39%)</title><rect x="0.3268%" y="645" width="1.3889%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="17"/><text x="0.5768%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.31%)</title><rect x="0.4085%" y="629" width="1.3072%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="16"/><text x="0.6585%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (15 samples, 1.23%)</title><rect x="0.4902%" y="613" width="1.2255%" height="15" fill="rgb(209,103,24)" fg:x="6" fg:w="15"/><text x="0.7402%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.14%)</title><rect x="0.5719%" y="597" width="1.1438%" height="15" fill="rgb(229,88,8)" fg:x="7" fg:w="14"/><text x="0.8219%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6340%" y="581" width="0.0817%" height="15" fill="rgb(213,181,19)" fg:x="20" fg:w="1"/><text x="1.8840%" y="591.50"></text></g><g><title>anyhow::error::&lt;impl anyhow::Error&gt;::construct (1 samples, 0.08%)</title><rect x="1.8791%" y="565" width="0.0817%" height="15" fill="rgb(254,191,54)" fg:x="23" fg:w="1"/><text x="2.1291%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.8791%" y="549" width="0.0817%" height="15" fill="rgb(241,83,37)" fg:x="23" fg:w="1"/><text x="2.1291%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;libloading::error::Error&gt; (2 samples, 0.16%)</title><rect x="1.9608%" y="549" width="0.1634%" height="15" fill="rgb(233,36,39)" fg:x="24" fg:w="2"/><text x="2.2108%" y="559.50"></text></g><g><title>_IO_default_uflow (1 samples, 0.08%)</title><rect x="2.2059%" y="517" width="0.0817%" height="15" fill="rgb(226,3,54)" fg:x="27" fg:w="1"/><text x="2.4559%" y="527.50"></text></g><g><title>dlerror (3 samples, 0.25%)</title><rect x="2.1242%" y="549" width="0.2451%" height="15" fill="rgb(245,192,40)" fg:x="26" fg:w="3"/><text x="2.3742%" y="559.50"></text></g><g><title>__asprintf (3 samples, 0.25%)</title><rect x="2.1242%" y="533" width="0.2451%" height="15" fill="rgb(238,167,29)" fg:x="26" fg:w="3"/><text x="2.3742%" y="543.50"></text></g><g><title>_IO_setb (1 samples, 0.08%)</title><rect x="2.2876%" y="517" width="0.0817%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="2.5376%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.4510%" y="533" width="0.1634%" height="15" fill="rgb(231,60,39)" fg:x="30" fg:w="2"/><text x="2.7010%" y="543.50"></text></g><g><title>dlopen (14 samples, 1.14%)</title><rect x="2.3693%" y="549" width="1.1438%" height="15" fill="rgb(208,69,12)" fg:x="29" fg:w="14"/><text x="2.6193%" y="559.50"></text></g><g><title>_dl_catch_error (11 samples, 0.90%)</title><rect x="2.6144%" y="533" width="0.8987%" height="15" fill="rgb(235,93,37)" fg:x="32" fg:w="11"/><text x="2.8644%" y="543.50"></text></g><g><title>_dl_catch_exception (11 samples, 0.90%)</title><rect x="2.6144%" y="517" width="0.8987%" height="15" fill="rgb(213,116,39)" fg:x="32" fg:w="11"/><text x="2.8644%" y="527.50"></text></g><g><title>_dl_catch_exception (11 samples, 0.90%)</title><rect x="2.6144%" y="501" width="0.8987%" height="15" fill="rgb(222,207,29)" fg:x="32" fg:w="11"/><text x="2.8644%" y="511.50"></text></g><g><title>_dl_catch_exception (11 samples, 0.90%)</title><rect x="2.6144%" y="485" width="0.8987%" height="15" fill="rgb(206,96,30)" fg:x="32" fg:w="11"/><text x="2.8644%" y="495.50"></text></g><g><title>libloading::safe::Library::new (20 samples, 1.63%)</title><rect x="1.9608%" y="565" width="1.6340%" height="15" fill="rgb(218,138,4)" fg:x="24" fg:w="20"/><text x="2.2108%" y="575.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="3.5131%" y="549" width="0.0817%" height="15" fill="rgb(250,191,14)" fg:x="43" fg:w="1"/><text x="3.7631%" y="559.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="3.5131%" y="533" width="0.0817%" height="15" fill="rgb(239,60,40)" fg:x="43" fg:w="1"/><text x="3.7631%" y="543.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="3.5131%" y="517" width="0.0817%" height="15" fill="rgb(206,27,48)" fg:x="43" fg:w="1"/><text x="3.7631%" y="527.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.08%)</title><rect x="3.5131%" y="501" width="0.0817%" height="15" fill="rgb(225,35,8)" fg:x="43" fg:w="1"/><text x="3.7631%" y="511.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (23 samples, 1.88%)</title><rect x="1.7974%" y="581" width="1.8791%" height="15" fill="rgb(250,213,24)" fg:x="22" fg:w="23"/><text x="2.0474%" y="591.50">&lt;..</text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="3.5948%" y="565" width="0.0817%" height="15" fill="rgb(247,123,22)" fg:x="44" fg:w="1"/><text x="3.8448%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="3.5948%" y="549" width="0.0817%" height="15" fill="rgb(231,138,38)" fg:x="44" fg:w="1"/><text x="3.8448%" y="559.50"></text></g><g><title>engine::session::Session::initialize (24 samples, 1.96%)</title><rect x="1.7974%" y="613" width="1.9608%" height="15" fill="rgb(231,145,46)" fg:x="22" fg:w="24"/><text x="2.0474%" y="623.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::initialize (24 samples, 1.96%)</title><rect x="1.7974%" y="597" width="1.9608%" height="15" fill="rgb(251,118,11)" fg:x="22" fg:w="24"/><text x="2.0474%" y="607.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="3.6765%" y="581" width="0.0817%" height="15" fill="rgb(217,147,25)" fg:x="45" fg:w="1"/><text x="3.9265%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="3.6765%" y="565" width="0.0817%" height="15" fill="rgb(247,81,37)" fg:x="45" fg:w="1"/><text x="3.9265%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (27 samples, 2.21%)</title><rect x="1.7157%" y="661" width="2.2059%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="27"/><text x="1.9657%" y="671.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (27 samples, 2.21%)</title><rect x="1.7157%" y="645" width="2.2059%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="27"/><text x="1.9657%" y="655.50">e..</text></g><g><title>engine::session::Session::new (27 samples, 2.21%)</title><rect x="1.7157%" y="629" width="2.2059%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="27"/><text x="1.9657%" y="639.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="3.7582%" y="613" width="0.1634%" height="15" fill="rgb(221,10,30)" fg:x="46" fg:w="2"/><text x="4.0082%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.7582%" y="597" width="0.1634%" height="15" fill="rgb(210,229,1)" fg:x="46" fg:w="2"/><text x="4.0082%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0033%" y="613" width="0.0817%" height="15" fill="rgb(222,148,37)" fg:x="49" fg:w="1"/><text x="4.2533%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="4.0033%" y="645" width="0.1634%" height="15" fill="rgb(234,67,33)" fg:x="49" fg:w="2"/><text x="4.2533%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="4.0033%" y="629" width="0.1634%" height="15" fill="rgb(247,98,35)" fg:x="49" fg:w="2"/><text x="4.2533%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.0850%" y="613" width="0.0817%" height="15" fill="rgb(247,138,52)" fg:x="50" fg:w="1"/><text x="4.3350%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="4.1667%" y="645" width="0.0817%" height="15" fill="rgb(213,79,30)" fg:x="51" fg:w="1"/><text x="4.4167%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.1667%" y="629" width="0.0817%" height="15" fill="rgb(246,177,23)" fg:x="51" fg:w="1"/><text x="4.4167%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.2484%" y="629" width="0.1634%" height="15" fill="rgb(230,62,27)" fg:x="52" fg:w="2"/><text x="4.4984%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="4.2484%" y="613" width="0.1634%" height="15" fill="rgb(216,154,8)" fg:x="52" fg:w="2"/><text x="4.4984%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.3301%" y="597" width="0.0817%" height="15" fill="rgb(244,35,45)" fg:x="53" fg:w="1"/><text x="4.5801%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.3301%" y="581" width="0.0817%" height="15" fill="rgb(251,115,12)" fg:x="53" fg:w="1"/><text x="4.5801%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.4118%" y="517" width="0.0817%" height="15" fill="rgb(240,54,50)" fg:x="54" fg:w="1"/><text x="4.6618%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4118%" y="501" width="0.0817%" height="15" fill="rgb(233,84,52)" fg:x="54" fg:w="1"/><text x="4.6618%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4118%" y="485" width="0.0817%" height="15" fill="rgb(207,117,47)" fg:x="54" fg:w="1"/><text x="4.6618%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4118%" y="469" width="0.0817%" height="15" fill="rgb(249,43,39)" fg:x="54" fg:w="1"/><text x="4.6618%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.4118%" y="453" width="0.0817%" height="15" fill="rgb(209,38,44)" fg:x="54" fg:w="1"/><text x="4.6618%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.4118%" y="437" width="0.0817%" height="15" fill="rgb(236,212,23)" fg:x="54" fg:w="1"/><text x="4.6618%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.4118%" y="421" width="0.0817%" height="15" fill="rgb(242,79,21)" fg:x="54" fg:w="1"/><text x="4.6618%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.4118%" y="533" width="0.1634%" height="15" fill="rgb(211,96,35)" fg:x="54" fg:w="2"/><text x="4.6618%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4935%" y="517" width="0.0817%" height="15" fill="rgb(253,215,40)" fg:x="55" fg:w="1"/><text x="4.7435%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4935%" y="501" width="0.0817%" height="15" fill="rgb(211,81,21)" fg:x="55" fg:w="1"/><text x="4.7435%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="4.4935%" y="485" width="0.0817%" height="15" fill="rgb(208,190,38)" fg:x="55" fg:w="1"/><text x="4.7435%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.6569%" y="517" width="0.0817%" height="15" fill="rgb(235,213,38)" fg:x="57" fg:w="1"/><text x="4.9069%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.6569%" y="501" width="0.0817%" height="15" fill="rgb(237,122,38)" fg:x="57" fg:w="1"/><text x="4.9069%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.6569%" y="485" width="0.0817%" height="15" fill="rgb(244,218,35)" fg:x="57" fg:w="1"/><text x="4.9069%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="4.7386%" y="469" width="0.1634%" height="15" fill="rgb(240,68,47)" fg:x="58" fg:w="2"/><text x="4.9886%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="4.7386%" y="501" width="0.3268%" height="15" fill="rgb(210,16,53)" fg:x="58" fg:w="4"/><text x="4.9886%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="4.7386%" y="485" width="0.3268%" height="15" fill="rgb(235,124,12)" fg:x="58" fg:w="4"/><text x="4.9886%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="4.9020%" y="469" width="0.1634%" height="15" fill="rgb(224,169,11)" fg:x="60" fg:w="2"/><text x="5.1520%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9837%" y="453" width="0.0817%" height="15" fill="rgb(250,166,2)" fg:x="61" fg:w="1"/><text x="5.2337%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9837%" y="437" width="0.0817%" height="15" fill="rgb(242,216,29)" fg:x="61" fg:w="1"/><text x="5.2337%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.9837%" y="421" width="0.0817%" height="15" fill="rgb(230,116,27)" fg:x="61" fg:w="1"/><text x="5.2337%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0654%" y="501" width="0.0817%" height="15" fill="rgb(228,99,48)" fg:x="62" fg:w="1"/><text x="5.3154%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.0654%" y="485" width="0.0817%" height="15" fill="rgb(253,11,6)" fg:x="62" fg:w="1"/><text x="5.3154%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.1471%" y="485" width="0.1634%" height="15" fill="rgb(247,143,39)" fg:x="63" fg:w="2"/><text x="5.3971%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="4.7386%" y="517" width="0.6536%" height="15" fill="rgb(236,97,10)" fg:x="58" fg:w="8"/><text x="4.9886%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="5.1471%" y="501" width="0.2451%" height="15" fill="rgb(233,208,19)" fg:x="63" fg:w="3"/><text x="5.3971%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3105%" y="485" width="0.0817%" height="15" fill="rgb(216,164,2)" fg:x="65" fg:w="1"/><text x="5.5605%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.3105%" y="469" width="0.0817%" height="15" fill="rgb(220,129,5)" fg:x="65" fg:w="1"/><text x="5.5605%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3105%" y="453" width="0.0817%" height="15" fill="rgb(242,17,10)" fg:x="65" fg:w="1"/><text x="5.5605%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3105%" y="437" width="0.0817%" height="15" fill="rgb(242,107,0)" fg:x="65" fg:w="1"/><text x="5.5605%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3105%" y="421" width="0.0817%" height="15" fill="rgb(251,28,31)" fg:x="65" fg:w="1"/><text x="5.5605%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.90%)</title><rect x="4.5752%" y="533" width="0.8987%" height="15" fill="rgb(233,223,10)" fg:x="56" fg:w="11"/><text x="4.8252%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3922%" y="517" width="0.0817%" height="15" fill="rgb(215,21,27)" fg:x="66" fg:w="1"/><text x="5.6422%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3922%" y="501" width="0.0817%" height="15" fill="rgb(232,23,21)" fg:x="66" fg:w="1"/><text x="5.6422%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3922%" y="485" width="0.0817%" height="15" fill="rgb(244,5,23)" fg:x="66" fg:w="1"/><text x="5.6422%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (14 samples, 1.14%)</title><rect x="4.4118%" y="549" width="1.1438%" height="15" fill="rgb(226,81,46)" fg:x="54" fg:w="14"/><text x="4.6618%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.4739%" y="533" width="0.0817%" height="15" fill="rgb(247,70,30)" fg:x="67" fg:w="1"/><text x="5.7239%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.4739%" y="517" width="0.0817%" height="15" fill="rgb(212,68,19)" fg:x="67" fg:w="1"/><text x="5.7239%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.4739%" y="501" width="0.0817%" height="15" fill="rgb(240,187,13)" fg:x="67" fg:w="1"/><text x="5.7239%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.4739%" y="485" width="0.0817%" height="15" fill="rgb(223,113,26)" fg:x="67" fg:w="1"/><text x="5.7239%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.4739%" y="469" width="0.0817%" height="15" fill="rgb(206,192,2)" fg:x="67" fg:w="1"/><text x="5.7239%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4739%" y="453" width="0.0817%" height="15" fill="rgb(241,108,4)" fg:x="67" fg:w="1"/><text x="5.7239%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5556%" y="517" width="0.0817%" height="15" fill="rgb(247,173,49)" fg:x="68" fg:w="1"/><text x="5.8056%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6373%" y="501" width="0.0817%" height="15" fill="rgb(224,114,35)" fg:x="69" fg:w="1"/><text x="5.8873%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.7190%" y="501" width="0.0817%" height="15" fill="rgb(245,159,27)" fg:x="70" fg:w="1"/><text x="5.9690%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8007%" y="485" width="0.0817%" height="15" fill="rgb(245,172,44)" fg:x="71" fg:w="1"/><text x="6.0507%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.9641%" y="469" width="0.0817%" height="15" fill="rgb(236,23,11)" fg:x="73" fg:w="1"/><text x="6.2141%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9641%" y="453" width="0.0817%" height="15" fill="rgb(205,117,38)" fg:x="73" fg:w="1"/><text x="6.2141%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.0458%" y="469" width="0.0817%" height="15" fill="rgb(237,72,25)" fg:x="74" fg:w="1"/><text x="6.2958%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0458%" y="453" width="0.0817%" height="15" fill="rgb(244,70,9)" fg:x="74" fg:w="1"/><text x="6.2958%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0458%" y="437" width="0.0817%" height="15" fill="rgb(217,125,39)" fg:x="74" fg:w="1"/><text x="6.2958%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.65%)</title><rect x="5.5556%" y="549" width="0.6536%" height="15" fill="rgb(235,36,10)" fg:x="68" fg:w="8"/><text x="5.8056%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (8 samples, 0.65%)</title><rect x="5.5556%" y="533" width="0.6536%" height="15" fill="rgb(251,123,47)" fg:x="68" fg:w="8"/><text x="5.8056%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="5.6373%" y="517" width="0.5719%" height="15" fill="rgb(221,13,13)" fg:x="69" fg:w="7"/><text x="5.8873%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="5.8007%" y="501" width="0.4085%" height="15" fill="rgb(238,131,9)" fg:x="71" fg:w="5"/><text x="6.0507%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="5.8824%" y="485" width="0.3268%" height="15" fill="rgb(211,50,8)" fg:x="72" fg:w="4"/><text x="6.1324%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.1275%" y="469" width="0.0817%" height="15" fill="rgb(245,182,24)" fg:x="75" fg:w="1"/><text x="6.3775%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.1275%" y="453" width="0.0817%" height="15" fill="rgb(242,14,37)" fg:x="75" fg:w="1"/><text x="6.3775%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2092%" y="501" width="0.0817%" height="15" fill="rgb(246,228,12)" fg:x="76" fg:w="1"/><text x="6.4592%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="6.2908%" y="501" width="0.0817%" height="15" fill="rgb(213,55,15)" fg:x="77" fg:w="1"/><text x="6.5408%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.2908%" y="485" width="0.0817%" height="15" fill="rgb(209,9,3)" fg:x="77" fg:w="1"/><text x="6.5408%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2908%" y="469" width="0.0817%" height="15" fill="rgb(230,59,30)" fg:x="77" fg:w="1"/><text x="6.5408%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2908%" y="453" width="0.0817%" height="15" fill="rgb(209,121,21)" fg:x="77" fg:w="1"/><text x="6.5408%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2908%" y="437" width="0.0817%" height="15" fill="rgb(220,109,13)" fg:x="77" fg:w="1"/><text x="6.5408%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="6.5359%" y="469" width="0.0817%" height="15" fill="rgb(232,18,1)" fg:x="80" fg:w="1"/><text x="6.7859%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.6176%" y="469" width="0.0817%" height="15" fill="rgb(215,41,42)" fg:x="81" fg:w="1"/><text x="6.8676%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.6993%" y="453" width="0.1634%" height="15" fill="rgb(224,123,36)" fg:x="82" fg:w="2"/><text x="6.9493%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="6.6993%" y="437" width="0.1634%" height="15" fill="rgb(240,125,3)" fg:x="82" fg:w="2"/><text x="6.9493%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7810%" y="421" width="0.0817%" height="15" fill="rgb(205,98,50)" fg:x="83" fg:w="1"/><text x="7.0310%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.8627%" y="453" width="0.0817%" height="15" fill="rgb(205,185,37)" fg:x="84" fg:w="1"/><text x="7.1127%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="6.8627%" y="437" width="0.0817%" height="15" fill="rgb(238,207,15)" fg:x="84" fg:w="1"/><text x="7.1127%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="6.6993%" y="469" width="0.4902%" height="15" fill="rgb(213,199,42)" fg:x="82" fg:w="6"/><text x="6.9493%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="6.9444%" y="453" width="0.2451%" height="15" fill="rgb(235,201,11)" fg:x="85" fg:w="3"/><text x="7.1944%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.1078%" y="437" width="0.0817%" height="15" fill="rgb(207,46,11)" fg:x="87" fg:w="1"/><text x="7.3578%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1078%" y="421" width="0.0817%" height="15" fill="rgb(241,35,35)" fg:x="87" fg:w="1"/><text x="7.3578%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="7.1078%" y="405" width="0.0817%" height="15" fill="rgb(243,32,47)" fg:x="87" fg:w="1"/><text x="7.3578%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1078%" y="389" width="0.0817%" height="15" fill="rgb(247,202,23)" fg:x="87" fg:w="1"/><text x="7.3578%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1078%" y="373" width="0.0817%" height="15" fill="rgb(219,102,11)" fg:x="87" fg:w="1"/><text x="7.3578%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.82%)</title><rect x="6.4542%" y="485" width="0.8170%" height="15" fill="rgb(243,110,44)" fg:x="79" fg:w="10"/><text x="6.7042%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.1895%" y="469" width="0.0817%" height="15" fill="rgb(222,74,54)" fg:x="88" fg:w="1"/><text x="7.4395%" y="479.50"></text></g><g><title>engine::session::Session::flush (38 samples, 3.10%)</title><rect x="4.2484%" y="645" width="3.1046%" height="15" fill="rgb(216,99,12)" fg:x="52" fg:w="38"/><text x="4.4984%" y="655.50">eng..</text></g><g><title>engine::session::state::State::close (36 samples, 2.94%)</title><rect x="4.4118%" y="629" width="2.9412%" height="15" fill="rgb(226,22,26)" fg:x="54" fg:w="36"/><text x="4.6618%" y="639.50">en..</text></g><g><title>engine::session::state::State::flush_entities (36 samples, 2.94%)</title><rect x="4.4118%" y="613" width="2.9412%" height="15" fill="rgb(217,163,10)" fg:x="54" fg:w="36"/><text x="4.6618%" y="623.50">en..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.94%)</title><rect x="4.4118%" y="597" width="2.9412%" height="15" fill="rgb(213,25,53)" fg:x="54" fg:w="36"/><text x="4.6618%" y="607.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.94%)</title><rect x="4.4118%" y="581" width="2.9412%" height="15" fill="rgb(252,105,26)" fg:x="54" fg:w="36"/><text x="4.6618%" y="591.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.94%)</title><rect x="4.4118%" y="565" width="2.9412%" height="15" fill="rgb(220,39,43)" fg:x="54" fg:w="36"/><text x="4.6618%" y="575.50">en..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.14%)</title><rect x="6.2092%" y="549" width="1.1438%" height="15" fill="rgb(229,68,48)" fg:x="76" fg:w="14"/><text x="6.4592%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.14%)</title><rect x="6.2092%" y="533" width="1.1438%" height="15" fill="rgb(252,8,32)" fg:x="76" fg:w="14"/><text x="6.4592%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (14 samples, 1.14%)</title><rect x="6.2092%" y="517" width="1.1438%" height="15" fill="rgb(223,20,43)" fg:x="76" fg:w="14"/><text x="6.4592%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (12 samples, 0.98%)</title><rect x="6.3725%" y="501" width="0.9804%" height="15" fill="rgb(229,81,49)" fg:x="78" fg:w="12"/><text x="6.6225%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2712%" y="485" width="0.0817%" height="15" fill="rgb(236,28,36)" fg:x="89" fg:w="1"/><text x="7.5212%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2712%" y="469" width="0.0817%" height="15" fill="rgb(249,185,26)" fg:x="89" fg:w="1"/><text x="7.5212%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2712%" y="453" width="0.0817%" height="15" fill="rgb(249,174,33)" fg:x="89" fg:w="1"/><text x="7.5212%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.3529%" y="613" width="0.0817%" height="15" fill="rgb(233,201,37)" fg:x="90" fg:w="1"/><text x="7.6029%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3529%" y="597" width="0.0817%" height="15" fill="rgb(221,78,26)" fg:x="90" fg:w="1"/><text x="7.6029%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.3529%" y="581" width="0.0817%" height="15" fill="rgb(250,127,30)" fg:x="90" fg:w="1"/><text x="7.6029%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3529%" y="565" width="0.0817%" height="15" fill="rgb(230,49,44)" fg:x="90" fg:w="1"/><text x="7.6029%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3529%" y="549" width="0.0817%" height="15" fill="rgb(229,67,23)" fg:x="90" fg:w="1"/><text x="7.6029%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3529%" y="533" width="0.0817%" height="15" fill="rgb(249,83,47)" fg:x="90" fg:w="1"/><text x="7.6029%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3529%" y="517" width="0.0817%" height="15" fill="rgb(215,43,3)" fg:x="90" fg:w="1"/><text x="7.6029%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.3529%" y="501" width="0.0817%" height="15" fill="rgb(238,154,13)" fg:x="90" fg:w="1"/><text x="7.6029%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.3529%" y="485" width="0.0817%" height="15" fill="rgb(219,56,2)" fg:x="90" fg:w="1"/><text x="7.6029%" y="495.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="7.4346%" y="613" width="0.1634%" height="15" fill="rgb(233,0,4)" fg:x="91" fg:w="2"/><text x="7.6846%" y="623.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="7.4346%" y="597" width="0.1634%" height="15" fill="rgb(235,30,7)" fg:x="91" fg:w="2"/><text x="7.6846%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="7.4346%" y="581" width="0.1634%" height="15" fill="rgb(250,79,13)" fg:x="91" fg:w="2"/><text x="7.6846%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.4346%" y="565" width="0.1634%" height="15" fill="rgb(211,146,34)" fg:x="91" fg:w="2"/><text x="7.6846%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5163%" y="549" width="0.0817%" height="15" fill="rgb(228,22,38)" fg:x="92" fg:w="1"/><text x="7.7663%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5163%" y="533" width="0.0817%" height="15" fill="rgb(235,168,5)" fg:x="92" fg:w="1"/><text x="7.7663%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="7.5163%" y="517" width="0.0817%" height="15" fill="rgb(221,155,16)" fg:x="92" fg:w="1"/><text x="7.7663%" y="527.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="7.5163%" y="501" width="0.0817%" height="15" fill="rgb(215,215,53)" fg:x="92" fg:w="1"/><text x="7.7663%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="7.5980%" y="613" width="0.0817%" height="15" fill="rgb(223,4,10)" fg:x="93" fg:w="1"/><text x="7.8480%" y="623.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="7.5980%" y="597" width="0.0817%" height="15" fill="rgb(234,103,6)" fg:x="93" fg:w="1"/><text x="7.8480%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="7.7614%" y="597" width="0.0817%" height="15" fill="rgb(227,97,0)" fg:x="95" fg:w="1"/><text x="8.0114%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="7.7614%" y="581" width="0.0817%" height="15" fill="rgb(234,150,53)" fg:x="95" fg:w="1"/><text x="8.0114%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.7614%" y="565" width="0.0817%" height="15" fill="rgb(228,201,54)" fg:x="95" fg:w="1"/><text x="8.0114%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7614%" y="549" width="0.0817%" height="15" fill="rgb(222,22,37)" fg:x="95" fg:w="1"/><text x="8.0114%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.7614%" y="533" width="0.0817%" height="15" fill="rgb(237,53,32)" fg:x="95" fg:w="1"/><text x="8.0114%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.7614%" y="517" width="0.0817%" height="15" fill="rgb(233,25,53)" fg:x="95" fg:w="1"/><text x="8.0114%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.7614%" y="501" width="0.0817%" height="15" fill="rgb(210,40,34)" fg:x="95" fg:w="1"/><text x="8.0114%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="7.7614%" y="485" width="0.0817%" height="15" fill="rgb(241,220,44)" fg:x="95" fg:w="1"/><text x="8.0114%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.57%)</title><rect x="7.3529%" y="629" width="0.5719%" height="15" fill="rgb(235,28,35)" fg:x="90" fg:w="7"/><text x="7.6029%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.25%)</title><rect x="7.6797%" y="613" width="0.2451%" height="15" fill="rgb(210,56,17)" fg:x="94" fg:w="3"/><text x="7.9297%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8431%" y="597" width="0.0817%" height="15" fill="rgb(224,130,29)" fg:x="96" fg:w="1"/><text x="8.0931%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8431%" y="581" width="0.0817%" height="15" fill="rgb(235,212,8)" fg:x="96" fg:w="1"/><text x="8.0931%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.8431%" y="565" width="0.0817%" height="15" fill="rgb(223,33,50)" fg:x="96" fg:w="1"/><text x="8.0931%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.8431%" y="549" width="0.0817%" height="15" fill="rgb(219,149,13)" fg:x="96" fg:w="1"/><text x="8.0931%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8431%" y="533" width="0.0817%" height="15" fill="rgb(250,156,29)" fg:x="96" fg:w="1"/><text x="8.0931%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="7.9248%" y="629" width="0.2451%" height="15" fill="rgb(216,193,19)" fg:x="97" fg:w="3"/><text x="8.1748%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0882%" y="613" width="0.0817%" height="15" fill="rgb(216,135,14)" fg:x="99" fg:w="1"/><text x="8.3382%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0882%" y="597" width="0.0817%" height="15" fill="rgb(241,47,5)" fg:x="99" fg:w="1"/><text x="8.3382%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0882%" y="581" width="0.0817%" height="15" fill="rgb(233,42,35)" fg:x="99" fg:w="1"/><text x="8.3382%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.90%)</title><rect x="7.3529%" y="645" width="0.8987%" height="15" fill="rgb(231,13,6)" fg:x="90" fg:w="11"/><text x="7.6029%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.1699%" y="629" width="0.0817%" height="15" fill="rgb(207,181,40)" fg:x="100" fg:w="1"/><text x="8.4199%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.1699%" y="613" width="0.0817%" height="15" fill="rgb(254,173,49)" fg:x="100" fg:w="1"/><text x="8.4199%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.1699%" y="597" width="0.0817%" height="15" fill="rgb(221,1,38)" fg:x="100" fg:w="1"/><text x="8.4199%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1699%" y="581" width="0.0817%" height="15" fill="rgb(206,124,46)" fg:x="100" fg:w="1"/><text x="8.4199%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1699%" y="565" width="0.0817%" height="15" fill="rgb(249,21,11)" fg:x="100" fg:w="1"/><text x="8.4199%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1699%" y="549" width="0.0817%" height="15" fill="rgb(222,201,40)" fg:x="100" fg:w="1"/><text x="8.4199%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1699%" y="533" width="0.0817%" height="15" fill="rgb(235,61,29)" fg:x="100" fg:w="1"/><text x="8.4199%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="8.2516%" y="613" width="0.1634%" height="15" fill="rgb(219,207,3)" fg:x="101" fg:w="2"/><text x="8.5016%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4150%" y="613" width="0.0817%" height="15" fill="rgb(222,56,46)" fg:x="103" fg:w="1"/><text x="8.6650%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.33%)</title><rect x="8.2516%" y="645" width="0.3268%" height="15" fill="rgb(239,76,54)" fg:x="101" fg:w="4"/><text x="8.5016%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (4 samples, 0.33%)</title><rect x="8.2516%" y="629" width="0.3268%" height="15" fill="rgb(231,124,27)" fg:x="101" fg:w="4"/><text x="8.5016%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.4967%" y="613" width="0.0817%" height="15" fill="rgb(249,195,6)" fg:x="104" fg:w="1"/><text x="8.7467%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="8.4967%" y="597" width="0.0817%" height="15" fill="rgb(237,174,47)" fg:x="104" fg:w="1"/><text x="8.7467%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.4967%" y="581" width="0.0817%" height="15" fill="rgb(206,201,31)" fg:x="104" fg:w="1"/><text x="8.7467%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.4967%" y="565" width="0.0817%" height="15" fill="rgb(231,57,52)" fg:x="104" fg:w="1"/><text x="8.7467%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.5784%" y="581" width="0.0817%" height="15" fill="rgb(248,177,22)" fg:x="105" fg:w="1"/><text x="8.8284%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.5784%" y="565" width="0.0817%" height="15" fill="rgb(215,211,37)" fg:x="105" fg:w="1"/><text x="8.8284%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.5784%" y="549" width="0.0817%" height="15" fill="rgb(241,128,51)" fg:x="105" fg:w="1"/><text x="8.8284%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.5784%" y="533" width="0.0817%" height="15" fill="rgb(227,165,31)" fg:x="105" fg:w="1"/><text x="8.8284%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5784%" y="517" width="0.0817%" height="15" fill="rgb(228,167,24)" fg:x="105" fg:w="1"/><text x="8.8284%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.5784%" y="501" width="0.0817%" height="15" fill="rgb(228,143,12)" fg:x="105" fg:w="1"/><text x="8.8284%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.5784%" y="485" width="0.0817%" height="15" fill="rgb(249,149,8)" fg:x="105" fg:w="1"/><text x="8.8284%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.5784%" y="469" width="0.0817%" height="15" fill="rgb(243,35,44)" fg:x="105" fg:w="1"/><text x="8.8284%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="8.5784%" y="613" width="0.1634%" height="15" fill="rgb(246,89,9)" fg:x="105" fg:w="2"/><text x="8.8284%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="8.5784%" y="597" width="0.1634%" height="15" fill="rgb(233,213,13)" fg:x="105" fg:w="2"/><text x="8.8284%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.6601%" y="581" width="0.0817%" height="15" fill="rgb(233,141,41)" fg:x="106" fg:w="1"/><text x="8.9101%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.6601%" y="565" width="0.0817%" height="15" fill="rgb(239,167,4)" fg:x="106" fg:w="1"/><text x="8.9101%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.6601%" y="549" width="0.0817%" height="15" fill="rgb(209,217,16)" fg:x="106" fg:w="1"/><text x="8.9101%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.6601%" y="533" width="0.0817%" height="15" fill="rgb(219,88,35)" fg:x="106" fg:w="1"/><text x="8.9101%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6601%" y="517" width="0.0817%" height="15" fill="rgb(220,193,23)" fg:x="106" fg:w="1"/><text x="8.9101%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.6601%" y="501" width="0.0817%" height="15" fill="rgb(230,90,52)" fg:x="106" fg:w="1"/><text x="8.9101%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6601%" y="485" width="0.0817%" height="15" fill="rgb(252,106,19)" fg:x="106" fg:w="1"/><text x="8.9101%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.6601%" y="469" width="0.0817%" height="15" fill="rgb(206,74,20)" fg:x="106" fg:w="1"/><text x="8.9101%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.6601%" y="453" width="0.0817%" height="15" fill="rgb(230,138,44)" fg:x="106" fg:w="1"/><text x="8.9101%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.6601%" y="437" width="0.0817%" height="15" fill="rgb(235,182,43)" fg:x="106" fg:w="1"/><text x="8.9101%" y="447.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.7418%" y="613" width="0.0817%" height="15" fill="rgb(242,16,51)" fg:x="107" fg:w="1"/><text x="8.9918%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7418%" y="597" width="0.0817%" height="15" fill="rgb(248,9,4)" fg:x="107" fg:w="1"/><text x="8.9918%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7418%" y="581" width="0.0817%" height="15" fill="rgb(210,31,22)" fg:x="107" fg:w="1"/><text x="8.9918%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.7418%" y="565" width="0.0817%" height="15" fill="rgb(239,54,39)" fg:x="107" fg:w="1"/><text x="8.9918%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7418%" y="549" width="0.0817%" height="15" fill="rgb(230,99,41)" fg:x="107" fg:w="1"/><text x="8.9918%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7418%" y="533" width="0.0817%" height="15" fill="rgb(253,106,12)" fg:x="107" fg:w="1"/><text x="8.9918%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7418%" y="517" width="0.0817%" height="15" fill="rgb(213,46,41)" fg:x="107" fg:w="1"/><text x="8.9918%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7418%" y="501" width="0.0817%" height="15" fill="rgb(215,133,35)" fg:x="107" fg:w="1"/><text x="8.9918%" y="511.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.33%)</title><rect x="8.5784%" y="645" width="0.3268%" height="15" fill="rgb(213,28,5)" fg:x="105" fg:w="4"/><text x="8.8284%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="8.5784%" y="629" width="0.3268%" height="15" fill="rgb(215,77,49)" fg:x="105" fg:w="4"/><text x="8.8284%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="8.8235%" y="613" width="0.0817%" height="15" fill="rgb(248,100,22)" fg:x="108" fg:w="1"/><text x="9.0735%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.8235%" y="597" width="0.0817%" height="15" fill="rgb(208,67,9)" fg:x="108" fg:w="1"/><text x="9.0735%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.8235%" y="581" width="0.0817%" height="15" fill="rgb(219,133,21)" fg:x="108" fg:w="1"/><text x="9.0735%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.8235%" y="565" width="0.0817%" height="15" fill="rgb(246,46,29)" fg:x="108" fg:w="1"/><text x="9.0735%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.8235%" y="549" width="0.0817%" height="15" fill="rgb(246,185,52)" fg:x="108" fg:w="1"/><text x="9.0735%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.8235%" y="533" width="0.0817%" height="15" fill="rgb(252,136,11)" fg:x="108" fg:w="1"/><text x="9.0735%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8235%" y="517" width="0.0817%" height="15" fill="rgb(219,138,53)" fg:x="108" fg:w="1"/><text x="9.0735%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8235%" y="501" width="0.0817%" height="15" fill="rgb(211,51,23)" fg:x="108" fg:w="1"/><text x="9.0735%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8235%" y="485" width="0.0817%" height="15" fill="rgb(247,221,28)" fg:x="108" fg:w="1"/><text x="9.0735%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8235%" y="469" width="0.0817%" height="15" fill="rgb(251,222,45)" fg:x="108" fg:w="1"/><text x="9.0735%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.8235%" y="453" width="0.0817%" height="15" fill="rgb(217,162,53)" fg:x="108" fg:w="1"/><text x="9.0735%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.8235%" y="437" width="0.0817%" height="15" fill="rgb(229,93,14)" fg:x="108" fg:w="1"/><text x="9.0735%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.8235%" y="421" width="0.0817%" height="15" fill="rgb(209,67,49)" fg:x="108" fg:w="1"/><text x="9.0735%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.8235%" y="405" width="0.0817%" height="15" fill="rgb(213,87,29)" fg:x="108" fg:w="1"/><text x="9.0735%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8235%" y="389" width="0.0817%" height="15" fill="rgb(205,151,52)" fg:x="108" fg:w="1"/><text x="9.0735%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.8235%" y="373" width="0.0817%" height="15" fill="rgb(253,215,39)" fg:x="108" fg:w="1"/><text x="9.0735%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.8235%" y="357" width="0.0817%" height="15" fill="rgb(221,220,41)" fg:x="108" fg:w="1"/><text x="9.0735%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.8235%" y="341" width="0.0817%" height="15" fill="rgb(218,133,21)" fg:x="108" fg:w="1"/><text x="9.0735%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.8235%" y="325" width="0.0817%" height="15" fill="rgb(221,193,43)" fg:x="108" fg:w="1"/><text x="9.0735%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.8235%" y="309" width="0.0817%" height="15" fill="rgb(240,128,52)" fg:x="108" fg:w="1"/><text x="9.0735%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8235%" y="293" width="0.0817%" height="15" fill="rgb(253,114,12)" fg:x="108" fg:w="1"/><text x="9.0735%" y="303.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::into_entity (1 samples, 0.08%)</title><rect x="8.9052%" y="645" width="0.0817%" height="15" fill="rgb(215,223,47)" fg:x="109" fg:w="1"/><text x="9.1552%" y="655.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="8.9869%" y="629" width="0.0817%" height="15" fill="rgb(248,225,23)" fg:x="110" fg:w="1"/><text x="9.2369%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="8.9869%" y="613" width="0.0817%" height="15" fill="rgb(250,108,0)" fg:x="110" fg:w="1"/><text x="9.2369%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="8.9869%" y="597" width="0.0817%" height="15" fill="rgb(228,208,7)" fg:x="110" fg:w="1"/><text x="9.2369%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="8.9869%" y="581" width="0.0817%" height="15" fill="rgb(244,45,10)" fg:x="110" fg:w="1"/><text x="9.2369%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="8.9869%" y="565" width="0.0817%" height="15" fill="rgb(207,125,25)" fg:x="110" fg:w="1"/><text x="9.2369%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.9869%" y="549" width="0.0817%" height="15" fill="rgb(210,195,18)" fg:x="110" fg:w="1"/><text x="9.2369%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9869%" y="533" width="0.0817%" height="15" fill="rgb(249,80,12)" fg:x="110" fg:w="1"/><text x="9.2369%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.9869%" y="517" width="0.0817%" height="15" fill="rgb(221,65,9)" fg:x="110" fg:w="1"/><text x="9.2369%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9869%" y="501" width="0.0817%" height="15" fill="rgb(235,49,36)" fg:x="110" fg:w="1"/><text x="9.2369%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9869%" y="485" width="0.0817%" height="15" fill="rgb(225,32,20)" fg:x="110" fg:w="1"/><text x="9.2369%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.9869%" y="469" width="0.0817%" height="15" fill="rgb(215,141,46)" fg:x="110" fg:w="1"/><text x="9.2369%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9869%" y="453" width="0.0817%" height="15" fill="rgb(250,160,47)" fg:x="110" fg:w="1"/><text x="9.2369%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.1503%" y="597" width="0.0817%" height="15" fill="rgb(216,222,40)" fg:x="112" fg:w="1"/><text x="9.4003%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.1503%" y="581" width="0.0817%" height="15" fill="rgb(234,217,39)" fg:x="112" fg:w="1"/><text x="9.4003%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.1503%" y="565" width="0.0817%" height="15" fill="rgb(207,178,40)" fg:x="112" fg:w="1"/><text x="9.4003%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.1503%" y="549" width="0.0817%" height="15" fill="rgb(221,136,13)" fg:x="112" fg:w="1"/><text x="9.4003%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.1503%" y="533" width="0.0817%" height="15" fill="rgb(249,199,10)" fg:x="112" fg:w="1"/><text x="9.4003%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.1503%" y="517" width="0.0817%" height="15" fill="rgb(249,222,13)" fg:x="112" fg:w="1"/><text x="9.4003%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.1503%" y="501" width="0.0817%" height="15" fill="rgb(244,185,38)" fg:x="112" fg:w="1"/><text x="9.4003%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.1503%" y="485" width="0.0817%" height="15" fill="rgb(236,202,9)" fg:x="112" fg:w="1"/><text x="9.4003%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.1503%" y="469" width="0.0817%" height="15" fill="rgb(250,229,37)" fg:x="112" fg:w="1"/><text x="9.4003%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.1503%" y="453" width="0.0817%" height="15" fill="rgb(206,174,23)" fg:x="112" fg:w="1"/><text x="9.4003%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.1503%" y="437" width="0.0817%" height="15" fill="rgb(211,33,43)" fg:x="112" fg:w="1"/><text x="9.4003%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.1503%" y="421" width="0.0817%" height="15" fill="rgb(245,58,50)" fg:x="112" fg:w="1"/><text x="9.4003%" y="431.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (3 samples, 0.25%)</title><rect x="9.0686%" y="613" width="0.2451%" height="15" fill="rgb(244,68,36)" fg:x="111" fg:w="3"/><text x="9.3186%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2320%" y="597" width="0.0817%" height="15" fill="rgb(232,229,15)" fg:x="113" fg:w="1"/><text x="9.4820%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2320%" y="581" width="0.0817%" height="15" fill="rgb(254,30,23)" fg:x="113" fg:w="1"/><text x="9.4820%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.2320%" y="565" width="0.0817%" height="15" fill="rgb(235,160,14)" fg:x="113" fg:w="1"/><text x="9.4820%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2320%" y="549" width="0.0817%" height="15" fill="rgb(212,155,44)" fg:x="113" fg:w="1"/><text x="9.4820%" y="559.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="9.3137%" y="597" width="0.0817%" height="15" fill="rgb(226,2,50)" fg:x="114" fg:w="1"/><text x="9.5637%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.5588%" y="501" width="0.0817%" height="15" fill="rgb(234,177,6)" fg:x="117" fg:w="1"/><text x="9.8088%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.6405%" y="501" width="0.0817%" height="15" fill="rgb(217,24,9)" fg:x="118" fg:w="1"/><text x="9.8905%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.6405%" y="485" width="0.0817%" height="15" fill="rgb(220,13,46)" fg:x="118" fg:w="1"/><text x="9.8905%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6405%" y="469" width="0.0817%" height="15" fill="rgb(239,221,27)" fg:x="118" fg:w="1"/><text x="9.8905%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6405%" y="453" width="0.0817%" height="15" fill="rgb(222,198,25)" fg:x="118" fg:w="1"/><text x="9.8905%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.6405%" y="437" width="0.0817%" height="15" fill="rgb(211,99,13)" fg:x="118" fg:w="1"/><text x="9.8905%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="9.7222%" y="485" width="0.2451%" height="15" fill="rgb(232,111,31)" fg:x="119" fg:w="3"/><text x="9.9722%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8856%" y="469" width="0.0817%" height="15" fill="rgb(245,82,37)" fg:x="121" fg:w="1"/><text x="10.1356%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.8856%" y="453" width="0.0817%" height="15" fill="rgb(227,149,46)" fg:x="121" fg:w="1"/><text x="10.1356%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8856%" y="437" width="0.0817%" height="15" fill="rgb(218,36,50)" fg:x="121" fg:w="1"/><text x="10.1356%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.8856%" y="421" width="0.0817%" height="15" fill="rgb(226,80,48)" fg:x="121" fg:w="1"/><text x="10.1356%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8856%" y="405" width="0.0817%" height="15" fill="rgb(238,224,15)" fg:x="121" fg:w="1"/><text x="10.1356%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.8856%" y="389" width="0.0817%" height="15" fill="rgb(241,136,10)" fg:x="121" fg:w="1"/><text x="10.1356%" y="399.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="10.1307%" y="453" width="0.0817%" height="15" fill="rgb(208,32,45)" fg:x="124" fg:w="1"/><text x="10.3807%" y="463.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="10.1307%" y="437" width="0.0817%" height="15" fill="rgb(207,135,9)" fg:x="124" fg:w="1"/><text x="10.3807%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.2124%" y="453" width="0.0817%" height="15" fill="rgb(206,86,44)" fg:x="125" fg:w="1"/><text x="10.4624%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2124%" y="437" width="0.0817%" height="15" fill="rgb(245,177,15)" fg:x="125" fg:w="1"/><text x="10.4624%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.2124%" y="421" width="0.0817%" height="15" fill="rgb(206,64,50)" fg:x="125" fg:w="1"/><text x="10.4624%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2124%" y="405" width="0.0817%" height="15" fill="rgb(234,36,40)" fg:x="125" fg:w="1"/><text x="10.4624%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.2941%" y="453" width="0.1634%" height="15" fill="rgb(213,64,8)" fg:x="126" fg:w="2"/><text x="10.5441%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.2941%" y="437" width="0.1634%" height="15" fill="rgb(210,75,36)" fg:x="126" fg:w="2"/><text x="10.5441%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.2941%" y="421" width="0.1634%" height="15" fill="rgb(229,88,21)" fg:x="126" fg:w="2"/><text x="10.5441%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3758%" y="405" width="0.0817%" height="15" fill="rgb(252,204,47)" fg:x="127" fg:w="1"/><text x="10.6258%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.65%)</title><rect x="9.9673%" y="485" width="0.6536%" height="15" fill="rgb(208,77,27)" fg:x="122" fg:w="8"/><text x="10.2173%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="10.1307%" y="469" width="0.4902%" height="15" fill="rgb(221,76,26)" fg:x="124" fg:w="6"/><text x="10.3807%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.4575%" y="453" width="0.1634%" height="15" fill="rgb(225,139,18)" fg:x="128" fg:w="2"/><text x="10.7075%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5392%" y="437" width="0.0817%" height="15" fill="rgb(230,137,11)" fg:x="129" fg:w="1"/><text x="10.7892%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5392%" y="421" width="0.0817%" height="15" fill="rgb(212,28,1)" fg:x="129" fg:w="1"/><text x="10.7892%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (16 samples, 1.31%)</title><rect x="9.4771%" y="517" width="1.3072%" height="15" fill="rgb(248,164,17)" fg:x="116" fg:w="16"/><text x="9.7271%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="9.7222%" y="501" width="1.0621%" height="15" fill="rgb(222,171,42)" fg:x="119" fg:w="13"/><text x="9.9722%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.6209%" y="485" width="0.1634%" height="15" fill="rgb(243,84,45)" fg:x="130" fg:w="2"/><text x="10.8709%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.7026%" y="469" width="0.0817%" height="15" fill="rgb(252,49,23)" fg:x="131" fg:w="1"/><text x="10.9526%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.7026%" y="453" width="0.0817%" height="15" fill="rgb(215,19,7)" fg:x="131" fg:w="1"/><text x="10.9526%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.7026%" y="437" width="0.0817%" height="15" fill="rgb(238,81,41)" fg:x="131" fg:w="1"/><text x="10.9526%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.7026%" y="421" width="0.0817%" height="15" fill="rgb(210,199,37)" fg:x="131" fg:w="1"/><text x="10.9526%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="10.7026%" y="405" width="0.0817%" height="15" fill="rgb(244,192,49)" fg:x="131" fg:w="1"/><text x="10.9526%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.0294%" y="453" width="0.0817%" height="15" fill="rgb(226,211,11)" fg:x="135" fg:w="1"/><text x="11.2794%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.1928%" y="437" width="0.0817%" height="15" fill="rgb(236,162,54)" fg:x="137" fg:w="1"/><text x="11.4428%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="10.7843%" y="517" width="0.5719%" height="15" fill="rgb(220,229,9)" fg:x="132" fg:w="7"/><text x="11.0343%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="10.7843%" y="501" width="0.5719%" height="15" fill="rgb(250,87,22)" fg:x="132" fg:w="7"/><text x="11.0343%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="10.8660%" y="485" width="0.4902%" height="15" fill="rgb(239,43,17)" fg:x="133" fg:w="6"/><text x="11.1160%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="10.8660%" y="469" width="0.4902%" height="15" fill="rgb(231,177,25)" fg:x="133" fg:w="6"/><text x="11.1160%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="11.1111%" y="453" width="0.2451%" height="15" fill="rgb(219,179,1)" fg:x="136" fg:w="3"/><text x="11.3611%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="11.2745%" y="437" width="0.0817%" height="15" fill="rgb(238,219,53)" fg:x="138" fg:w="1"/><text x="11.5245%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="11.3562%" y="501" width="0.0817%" height="15" fill="rgb(232,167,36)" fg:x="139" fg:w="1"/><text x="11.6062%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3562%" y="485" width="0.0817%" height="15" fill="rgb(244,19,51)" fg:x="139" fg:w="1"/><text x="11.6062%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.4379%" y="469" width="0.1634%" height="15" fill="rgb(224,6,22)" fg:x="140" fg:w="2"/><text x="11.6879%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6013%" y="469" width="0.0817%" height="15" fill="rgb(224,145,5)" fg:x="142" fg:w="1"/><text x="11.8513%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.6013%" y="453" width="0.0817%" height="15" fill="rgb(234,130,49)" fg:x="142" fg:w="1"/><text x="11.8513%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6013%" y="437" width="0.0817%" height="15" fill="rgb(254,6,2)" fg:x="142" fg:w="1"/><text x="11.8513%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="11.6830%" y="437" width="0.0817%" height="15" fill="rgb(208,96,46)" fg:x="143" fg:w="1"/><text x="11.9330%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8464%" y="421" width="0.0817%" height="15" fill="rgb(239,3,39)" fg:x="145" fg:w="1"/><text x="12.0964%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0098%" y="357" width="0.1634%" height="15" fill="rgb(233,210,1)" fg:x="147" fg:w="2"/><text x="12.2598%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.0098%" y="341" width="0.1634%" height="15" fill="rgb(244,137,37)" fg:x="147" fg:w="2"/><text x="12.2598%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="12.0098%" y="325" width="0.1634%" height="15" fill="rgb(240,136,2)" fg:x="147" fg:w="2"/><text x="12.2598%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="11.7647%" y="437" width="0.4902%" height="15" fill="rgb(239,18,37)" fg:x="144" fg:w="6"/><text x="12.0147%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="11.9281%" y="421" width="0.3268%" height="15" fill="rgb(218,185,22)" fg:x="146" fg:w="4"/><text x="12.1781%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="11.9281%" y="405" width="0.3268%" height="15" fill="rgb(225,218,4)" fg:x="146" fg:w="4"/><text x="12.1781%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="11.9281%" y="389" width="0.3268%" height="15" fill="rgb(230,182,32)" fg:x="146" fg:w="4"/><text x="12.1781%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="11.9281%" y="373" width="0.3268%" height="15" fill="rgb(242,56,43)" fg:x="146" fg:w="4"/><text x="12.1781%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.1732%" y="357" width="0.0817%" height="15" fill="rgb(233,99,24)" fg:x="149" fg:w="1"/><text x="12.4232%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1732%" y="341" width="0.0817%" height="15" fill="rgb(234,209,42)" fg:x="149" fg:w="1"/><text x="12.4232%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.65%)</title><rect x="11.6830%" y="453" width="0.6536%" height="15" fill="rgb(227,7,12)" fg:x="143" fg:w="8"/><text x="11.9330%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.2549%" y="437" width="0.0817%" height="15" fill="rgb(245,203,43)" fg:x="150" fg:w="1"/><text x="12.5049%" y="447.50"></text></g><g><title>engine::session::Session::flush (41 samples, 3.35%)</title><rect x="9.0686%" y="629" width="3.3497%" height="15" fill="rgb(238,205,33)" fg:x="111" fg:w="41"/><text x="9.3186%" y="639.50">eng..</text></g><g><title>engine::session::Session::save_changes (38 samples, 3.10%)</title><rect x="9.3137%" y="613" width="3.1046%" height="15" fill="rgb(231,56,7)" fg:x="114" fg:w="38"/><text x="9.5637%" y="623.50">eng..</text></g><g><title>engine::session::state::State::close (37 samples, 3.02%)</title><rect x="9.3954%" y="597" width="3.0229%" height="15" fill="rgb(244,186,29)" fg:x="115" fg:w="37"/><text x="9.6454%" y="607.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (37 samples, 3.02%)</title><rect x="9.3954%" y="581" width="3.0229%" height="15" fill="rgb(234,111,31)" fg:x="115" fg:w="37"/><text x="9.6454%" y="591.50">eng..</text></g><g><title>core::iter::adapters::try_process (37 samples, 3.02%)</title><rect x="9.3954%" y="565" width="3.0229%" height="15" fill="rgb(241,149,10)" fg:x="115" fg:w="37"/><text x="9.6454%" y="575.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.94%)</title><rect x="9.4771%" y="549" width="2.9412%" height="15" fill="rgb(249,206,44)" fg:x="116" fg:w="36"/><text x="9.7271%" y="559.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (36 samples, 2.94%)</title><rect x="9.4771%" y="533" width="2.9412%" height="15" fill="rgb(251,153,30)" fg:x="116" fg:w="36"/><text x="9.7271%" y="543.50">en..</text></g><g><title>kernel::model::any_entity_changes (13 samples, 1.06%)</title><rect x="11.3562%" y="517" width="1.0621%" height="15" fill="rgb(239,152,38)" fg:x="139" fg:w="13"/><text x="11.6062%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.98%)</title><rect x="11.4379%" y="501" width="0.9804%" height="15" fill="rgb(249,139,47)" fg:x="140" fg:w="12"/><text x="11.6879%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.98%)</title><rect x="11.4379%" y="485" width="0.9804%" height="15" fill="rgb(244,64,35)" fg:x="140" fg:w="12"/><text x="11.6879%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.74%)</title><rect x="11.6830%" y="469" width="0.7353%" height="15" fill="rgb(216,46,15)" fg:x="143" fg:w="9"/><text x="11.9330%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3366%" y="453" width="0.0817%" height="15" fill="rgb(250,74,19)" fg:x="151" fg:w="1"/><text x="12.5866%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="12.4183%" y="613" width="0.0817%" height="15" fill="rgb(249,42,33)" fg:x="152" fg:w="1"/><text x="12.6683%" y="623.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="12.4183%" y="597" width="0.0817%" height="15" fill="rgb(242,149,17)" fg:x="152" fg:w="1"/><text x="12.6683%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="12.4183%" y="581" width="0.0817%" height="15" fill="rgb(244,29,21)" fg:x="152" fg:w="1"/><text x="12.6683%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="12.4183%" y="565" width="0.0817%" height="15" fill="rgb(220,130,37)" fg:x="152" fg:w="1"/><text x="12.6683%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.4183%" y="549" width="0.0817%" height="15" fill="rgb(211,67,2)" fg:x="152" fg:w="1"/><text x="12.6683%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.4183%" y="533" width="0.0817%" height="15" fill="rgb(235,68,52)" fg:x="152" fg:w="1"/><text x="12.6683%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.4183%" y="517" width="0.0817%" height="15" fill="rgb(246,142,3)" fg:x="152" fg:w="1"/><text x="12.6683%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="12.4183%" y="501" width="0.0817%" height="15" fill="rgb(241,25,7)" fg:x="152" fg:w="1"/><text x="12.6683%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="12.4183%" y="485" width="0.0817%" height="15" fill="rgb(242,119,39)" fg:x="152" fg:w="1"/><text x="12.6683%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="12.4183%" y="469" width="0.0817%" height="15" fill="rgb(241,98,45)" fg:x="152" fg:w="1"/><text x="12.6683%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="12.4183%" y="453" width="0.0817%" height="15" fill="rgb(254,28,30)" fg:x="152" fg:w="1"/><text x="12.6683%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="12.5000%" y="597" width="0.0817%" height="15" fill="rgb(241,142,54)" fg:x="153" fg:w="1"/><text x="12.7500%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="12.5000%" y="581" width="0.0817%" height="15" fill="rgb(222,85,15)" fg:x="153" fg:w="1"/><text x="12.7500%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.25%)</title><rect x="12.4183%" y="629" width="0.2451%" height="15" fill="rgb(210,85,47)" fg:x="152" fg:w="3"/><text x="12.6683%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="12.5000%" y="613" width="0.1634%" height="15" fill="rgb(224,206,25)" fg:x="153" fg:w="2"/><text x="12.7500%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="12.5817%" y="597" width="0.0817%" height="15" fill="rgb(243,201,19)" fg:x="154" fg:w="1"/><text x="12.8317%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5817%" y="581" width="0.0817%" height="15" fill="rgb(236,59,4)" fg:x="154" fg:w="1"/><text x="12.8317%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5817%" y="565" width="0.0817%" height="15" fill="rgb(254,179,45)" fg:x="154" fg:w="1"/><text x="12.8317%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="12.5817%" y="549" width="0.0817%" height="15" fill="rgb(226,14,10)" fg:x="154" fg:w="1"/><text x="12.8317%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="12.6634%" y="549" width="0.0817%" height="15" fill="rgb(244,27,41)" fg:x="155" fg:w="1"/><text x="12.9134%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="12.7451%" y="517" width="0.1634%" height="15" fill="rgb(235,35,32)" fg:x="156" fg:w="2"/><text x="12.9951%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="12.7451%" y="549" width="0.2451%" height="15" fill="rgb(218,68,31)" fg:x="156" fg:w="3"/><text x="12.9951%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="12.7451%" y="533" width="0.2451%" height="15" fill="rgb(207,120,37)" fg:x="156" fg:w="3"/><text x="12.9951%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.9085%" y="517" width="0.0817%" height="15" fill="rgb(227,98,0)" fg:x="158" fg:w="1"/><text x="13.1585%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.9085%" y="501" width="0.0817%" height="15" fill="rgb(207,7,3)" fg:x="158" fg:w="1"/><text x="13.1585%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.41%)</title><rect x="12.6634%" y="597" width="0.4085%" height="15" fill="rgb(206,98,19)" fg:x="155" fg:w="5"/><text x="12.9134%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (5 samples, 0.41%)</title><rect x="12.6634%" y="581" width="0.4085%" height="15" fill="rgb(217,5,26)" fg:x="155" fg:w="5"/><text x="12.9134%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (5 samples, 0.41%)</title><rect x="12.6634%" y="565" width="0.4085%" height="15" fill="rgb(235,190,38)" fg:x="155" fg:w="5"/><text x="12.9134%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9902%" y="549" width="0.0817%" height="15" fill="rgb(247,86,24)" fg:x="159" fg:w="1"/><text x="13.2402%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9902%" y="533" width="0.0817%" height="15" fill="rgb(205,101,16)" fg:x="159" fg:w="1"/><text x="13.2402%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0719%" y="469" width="0.0817%" height="15" fill="rgb(246,168,33)" fg:x="160" fg:w="1"/><text x="13.3219%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="13.0719%" y="581" width="0.1634%" height="15" fill="rgb(231,114,1)" fg:x="160" fg:w="2"/><text x="13.3219%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="13.0719%" y="565" width="0.1634%" height="15" fill="rgb(207,184,53)" fg:x="160" fg:w="2"/><text x="13.3219%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="13.0719%" y="549" width="0.1634%" height="15" fill="rgb(224,95,51)" fg:x="160" fg:w="2"/><text x="13.3219%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="13.0719%" y="533" width="0.1634%" height="15" fill="rgb(212,188,45)" fg:x="160" fg:w="2"/><text x="13.3219%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.0719%" y="517" width="0.1634%" height="15" fill="rgb(223,154,38)" fg:x="160" fg:w="2"/><text x="13.3219%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="13.0719%" y="501" width="0.1634%" height="15" fill="rgb(251,22,52)" fg:x="160" fg:w="2"/><text x="13.3219%" y="511.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="13.0719%" y="485" width="0.1634%" height="15" fill="rgb(229,209,22)" fg:x="160" fg:w="2"/><text x="13.3219%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1536%" y="469" width="0.0817%" height="15" fill="rgb(234,138,34)" fg:x="161" fg:w="1"/><text x="13.4036%" y="479.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="13.2353%" y="581" width="0.0817%" height="15" fill="rgb(212,95,11)" fg:x="162" fg:w="1"/><text x="13.4853%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.3170%" y="549" width="0.1634%" height="15" fill="rgb(240,179,47)" fg:x="163" fg:w="2"/><text x="13.5670%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3987%" y="533" width="0.0817%" height="15" fill="rgb(240,163,11)" fg:x="164" fg:w="1"/><text x="13.6487%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.3987%" y="517" width="0.0817%" height="15" fill="rgb(236,37,12)" fg:x="164" fg:w="1"/><text x="13.6487%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.4804%" y="549" width="0.0817%" height="15" fill="rgb(232,164,16)" fg:x="165" fg:w="1"/><text x="13.7304%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.4804%" y="533" width="0.0817%" height="15" fill="rgb(244,205,15)" fg:x="165" fg:w="1"/><text x="13.7304%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4804%" y="517" width="0.0817%" height="15" fill="rgb(223,117,47)" fg:x="165" fg:w="1"/><text x="13.7304%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="13.6438%" y="453" width="0.0817%" height="15" fill="rgb(244,107,35)" fg:x="167" fg:w="1"/><text x="13.8938%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (14 samples, 1.14%)</title><rect x="12.6634%" y="613" width="1.1438%" height="15" fill="rgb(205,140,8)" fg:x="155" fg:w="14"/><text x="12.9134%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.74%)</title><rect x="13.0719%" y="597" width="0.7353%" height="15" fill="rgb(228,84,46)" fg:x="160" fg:w="9"/><text x="13.3219%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="13.3170%" y="581" width="0.4902%" height="15" fill="rgb(254,188,9)" fg:x="163" fg:w="6"/><text x="13.5670%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="13.3170%" y="565" width="0.4902%" height="15" fill="rgb(206,112,54)" fg:x="163" fg:w="6"/><text x="13.5670%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="13.5621%" y="549" width="0.2451%" height="15" fill="rgb(216,84,49)" fg:x="166" fg:w="3"/><text x="13.8121%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="13.6438%" y="533" width="0.1634%" height="15" fill="rgb(214,194,35)" fg:x="167" fg:w="2"/><text x="13.8938%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="13.6438%" y="517" width="0.1634%" height="15" fill="rgb(249,28,3)" fg:x="167" fg:w="2"/><text x="13.8938%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.6438%" y="501" width="0.1634%" height="15" fill="rgb(222,56,52)" fg:x="167" fg:w="2"/><text x="13.8938%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="13.6438%" y="485" width="0.1634%" height="15" fill="rgb(245,217,50)" fg:x="167" fg:w="2"/><text x="13.8938%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.6438%" y="469" width="0.1634%" height="15" fill="rgb(213,201,24)" fg:x="167" fg:w="2"/><text x="13.8938%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.7255%" y="453" width="0.0817%" height="15" fill="rgb(248,116,28)" fg:x="168" fg:w="1"/><text x="13.9755%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.7255%" y="437" width="0.0817%" height="15" fill="rgb(219,72,43)" fg:x="168" fg:w="1"/><text x="13.9755%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.7255%" y="421" width="0.0817%" height="15" fill="rgb(209,138,14)" fg:x="168" fg:w="1"/><text x="13.9755%" y="431.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.8889%" y="597" width="0.0817%" height="15" fill="rgb(222,18,33)" fg:x="170" fg:w="1"/><text x="14.1389%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.8889%" y="581" width="0.0817%" height="15" fill="rgb(213,199,7)" fg:x="170" fg:w="1"/><text x="14.1389%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.9706%" y="565" width="0.0817%" height="15" fill="rgb(250,110,10)" fg:x="171" fg:w="1"/><text x="14.2206%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (18 samples, 1.47%)</title><rect x="12.6634%" y="629" width="1.4706%" height="15" fill="rgb(248,123,6)" fg:x="155" fg:w="18"/><text x="12.9134%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.33%)</title><rect x="13.8072%" y="613" width="0.3268%" height="15" fill="rgb(206,91,31)" fg:x="169" fg:w="4"/><text x="14.0572%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="13.9706%" y="597" width="0.1634%" height="15" fill="rgb(211,154,13)" fg:x="171" fg:w="2"/><text x="14.2206%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="13.9706%" y="581" width="0.1634%" height="15" fill="rgb(225,148,7)" fg:x="171" fg:w="2"/><text x="14.2206%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.0523%" y="565" width="0.0817%" height="15" fill="rgb(220,160,43)" fg:x="172" fg:w="1"/><text x="14.3023%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0523%" y="549" width="0.0817%" height="15" fill="rgb(213,52,39)" fg:x="172" fg:w="1"/><text x="14.3023%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.0523%" y="533" width="0.0817%" height="15" fill="rgb(243,137,7)" fg:x="172" fg:w="1"/><text x="14.3023%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0523%" y="517" width="0.0817%" height="15" fill="rgb(230,79,13)" fg:x="172" fg:w="1"/><text x="14.3023%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.0523%" y="501" width="0.0817%" height="15" fill="rgb(247,105,23)" fg:x="172" fg:w="1"/><text x="14.3023%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.0523%" y="485" width="0.0817%" height="15" fill="rgb(223,179,41)" fg:x="172" fg:w="1"/><text x="14.3023%" y="495.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2157%" y="581" width="0.0817%" height="15" fill="rgb(218,9,34)" fg:x="174" fg:w="1"/><text x="14.4657%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.25%)</title><rect x="14.1340%" y="629" width="0.2451%" height="15" fill="rgb(222,106,8)" fg:x="173" fg:w="3"/><text x="14.3840%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.25%)</title><rect x="14.1340%" y="613" width="0.2451%" height="15" fill="rgb(211,220,0)" fg:x="173" fg:w="3"/><text x="14.3840%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.2157%" y="597" width="0.1634%" height="15" fill="rgb(229,52,16)" fg:x="174" fg:w="2"/><text x="14.4657%" y="607.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2974%" y="581" width="0.0817%" height="15" fill="rgb(212,155,18)" fg:x="175" fg:w="1"/><text x="14.5474%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.2974%" y="565" width="0.0817%" height="15" fill="rgb(242,21,14)" fg:x="175" fg:w="1"/><text x="14.5474%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.2974%" y="549" width="0.0817%" height="15" fill="rgb(222,19,48)" fg:x="175" fg:w="1"/><text x="14.5474%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.2974%" y="533" width="0.0817%" height="15" fill="rgb(232,45,27)" fg:x="175" fg:w="1"/><text x="14.5474%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.2974%" y="517" width="0.0817%" height="15" fill="rgb(249,103,42)" fg:x="175" fg:w="1"/><text x="14.5474%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.4608%" y="597" width="0.0817%" height="15" fill="rgb(246,81,33)" fg:x="177" fg:w="1"/><text x="14.7108%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.4608%" y="581" width="0.0817%" height="15" fill="rgb(252,33,42)" fg:x="177" fg:w="1"/><text x="14.7108%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.4608%" y="565" width="0.0817%" height="15" fill="rgb(209,212,41)" fg:x="177" fg:w="1"/><text x="14.7108%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.4608%" y="549" width="0.0817%" height="15" fill="rgb(207,154,6)" fg:x="177" fg:w="1"/><text x="14.7108%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.4608%" y="533" width="0.0817%" height="15" fill="rgb(223,64,47)" fg:x="177" fg:w="1"/><text x="14.7108%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.4608%" y="517" width="0.0817%" height="15" fill="rgb(211,161,38)" fg:x="177" fg:w="1"/><text x="14.7108%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.4608%" y="501" width="0.0817%" height="15" fill="rgb(219,138,40)" fg:x="177" fg:w="1"/><text x="14.7108%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.4608%" y="485" width="0.0817%" height="15" fill="rgb(241,228,46)" fg:x="177" fg:w="1"/><text x="14.7108%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.4608%" y="469" width="0.0817%" height="15" fill="rgb(223,209,38)" fg:x="177" fg:w="1"/><text x="14.7108%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.4608%" y="453" width="0.0817%" height="15" fill="rgb(236,164,45)" fg:x="177" fg:w="1"/><text x="14.7108%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.4608%" y="437" width="0.0817%" height="15" fill="rgb(231,15,5)" fg:x="177" fg:w="1"/><text x="14.7108%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.4608%" y="421" width="0.0817%" height="15" fill="rgb(252,35,15)" fg:x="177" fg:w="1"/><text x="14.7108%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.4608%" y="405" width="0.0817%" height="15" fill="rgb(248,181,18)" fg:x="177" fg:w="1"/><text x="14.7108%" y="415.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="14.3791%" y="613" width="0.2451%" height="15" fill="rgb(233,39,42)" fg:x="176" fg:w="3"/><text x="14.6291%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.5425%" y="597" width="0.0817%" height="15" fill="rgb(238,110,33)" fg:x="178" fg:w="1"/><text x="14.7925%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.5425%" y="581" width="0.0817%" height="15" fill="rgb(233,195,10)" fg:x="178" fg:w="1"/><text x="14.7925%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="14.6242%" y="565" width="0.0817%" height="15" fill="rgb(254,105,3)" fg:x="179" fg:w="1"/><text x="14.8742%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.41%)</title><rect x="14.3791%" y="629" width="0.4085%" height="15" fill="rgb(221,225,9)" fg:x="176" fg:w="5"/><text x="14.6291%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.6242%" y="613" width="0.1634%" height="15" fill="rgb(224,227,45)" fg:x="179" fg:w="2"/><text x="14.8742%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="14.6242%" y="597" width="0.1634%" height="15" fill="rgb(229,198,43)" fg:x="179" fg:w="2"/><text x="14.8742%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.6242%" y="581" width="0.1634%" height="15" fill="rgb(206,209,35)" fg:x="179" fg:w="2"/><text x="14.8742%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.7059%" y="565" width="0.0817%" height="15" fill="rgb(245,195,53)" fg:x="180" fg:w="1"/><text x="14.9559%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.7059%" y="549" width="0.0817%" height="15" fill="rgb(240,92,26)" fg:x="180" fg:w="1"/><text x="14.9559%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.7059%" y="533" width="0.0817%" height="15" fill="rgb(207,40,23)" fg:x="180" fg:w="1"/><text x="14.9559%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.7876%" y="613" width="0.0817%" height="15" fill="rgb(223,111,35)" fg:x="181" fg:w="1"/><text x="15.0376%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.7876%" y="597" width="0.0817%" height="15" fill="rgb(229,147,28)" fg:x="181" fg:w="1"/><text x="15.0376%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.7876%" y="581" width="0.0817%" height="15" fill="rgb(211,29,28)" fg:x="181" fg:w="1"/><text x="15.0376%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.7876%" y="565" width="0.0817%" height="15" fill="rgb(228,72,33)" fg:x="181" fg:w="1"/><text x="15.0376%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="14.7876%" y="549" width="0.0817%" height="15" fill="rgb(205,214,31)" fg:x="181" fg:w="1"/><text x="15.0376%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.7876%" y="533" width="0.0817%" height="15" fill="rgb(224,111,15)" fg:x="181" fg:w="1"/><text x="15.0376%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7876%" y="517" width="0.0817%" height="15" fill="rgb(253,21,26)" fg:x="181" fg:w="1"/><text x="15.0376%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.7876%" y="501" width="0.0817%" height="15" fill="rgb(245,139,43)" fg:x="181" fg:w="1"/><text x="15.0376%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.7876%" y="485" width="0.0817%" height="15" fill="rgb(252,170,7)" fg:x="181" fg:w="1"/><text x="15.0376%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (73 samples, 5.96%)</title><rect x="8.9869%" y="645" width="5.9641%" height="15" fill="rgb(231,118,14)" fg:x="110" fg:w="73"/><text x="9.2369%" y="655.50">plugins_..</text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="14.7876%" y="629" width="0.1634%" height="15" fill="rgb(238,83,0)" fg:x="181" fg:w="2"/><text x="15.0376%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="14.8693%" y="613" width="0.0817%" height="15" fill="rgb(221,39,39)" fg:x="182" fg:w="1"/><text x="15.1193%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.8693%" y="597" width="0.0817%" height="15" fill="rgb(222,119,46)" fg:x="182" fg:w="1"/><text x="15.1193%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.8693%" y="581" width="0.0817%" height="15" fill="rgb(222,165,49)" fg:x="182" fg:w="1"/><text x="15.1193%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8693%" y="565" width="0.0817%" height="15" fill="rgb(219,113,52)" fg:x="182" fg:w="1"/><text x="15.1193%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.9510%" y="613" width="0.0817%" height="15" fill="rgb(214,7,15)" fg:x="183" fg:w="1"/><text x="15.2010%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.9510%" y="597" width="0.0817%" height="15" fill="rgb(235,32,4)" fg:x="183" fg:w="1"/><text x="15.2010%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.9510%" y="581" width="0.0817%" height="15" fill="rgb(238,90,54)" fg:x="183" fg:w="1"/><text x="15.2010%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.9510%" y="565" width="0.0817%" height="15" fill="rgb(213,208,19)" fg:x="183" fg:w="1"/><text x="15.2010%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.9510%" y="549" width="0.0817%" height="15" fill="rgb(233,156,4)" fg:x="183" fg:w="1"/><text x="15.2010%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9510%" y="533" width="0.0817%" height="15" fill="rgb(207,194,5)" fg:x="183" fg:w="1"/><text x="15.2010%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="15.0327%" y="613" width="0.0817%" height="15" fill="rgb(206,111,30)" fg:x="184" fg:w="1"/><text x="15.2827%" y="623.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="15.0327%" y="597" width="0.0817%" height="15" fill="rgb(243,70,54)" fg:x="184" fg:w="1"/><text x="15.2827%" y="607.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="15.0327%" y="581" width="0.0817%" height="15" fill="rgb(242,28,8)" fg:x="184" fg:w="1"/><text x="15.2827%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="15.1144%" y="613" width="0.0817%" height="15" fill="rgb(219,106,18)" fg:x="185" fg:w="1"/><text x="15.3644%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.1144%" y="597" width="0.0817%" height="15" fill="rgb(244,222,10)" fg:x="185" fg:w="1"/><text x="15.3644%" y="607.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="15.1961%" y="613" width="0.0817%" height="15" fill="rgb(236,179,52)" fg:x="186" fg:w="1"/><text x="15.4461%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="15.1961%" y="597" width="0.0817%" height="15" fill="rgb(213,23,39)" fg:x="186" fg:w="1"/><text x="15.4461%" y="607.50"></text></g><g><title>kernel::model::builder::EntityBuilder::new (1 samples, 0.08%)</title><rect x="15.1961%" y="581" width="0.0817%" height="15" fill="rgb(238,48,10)" fg:x="186" fg:w="1"/><text x="15.4461%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="15.2778%" y="581" width="0.0817%" height="15" fill="rgb(251,196,23)" fg:x="187" fg:w="1"/><text x="15.5278%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.2778%" y="565" width="0.0817%" height="15" fill="rgb(250,152,24)" fg:x="187" fg:w="1"/><text x="15.5278%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="15.2778%" y="549" width="0.0817%" height="15" fill="rgb(209,150,17)" fg:x="187" fg:w="1"/><text x="15.5278%" y="559.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="15.3595%" y="565" width="0.0817%" height="15" fill="rgb(234,202,34)" fg:x="188" fg:w="1"/><text x="15.6095%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="15.3595%" y="549" width="0.0817%" height="15" fill="rgb(253,148,53)" fg:x="188" fg:w="1"/><text x="15.6095%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.3595%" y="533" width="0.0817%" height="15" fill="rgb(218,129,16)" fg:x="188" fg:w="1"/><text x="15.6095%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.3595%" y="517" width="0.0817%" height="15" fill="rgb(216,85,19)" fg:x="188" fg:w="1"/><text x="15.6095%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3595%" y="501" width="0.0817%" height="15" fill="rgb(235,228,7)" fg:x="188" fg:w="1"/><text x="15.6095%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.3595%" y="485" width="0.0817%" height="15" fill="rgb(245,175,0)" fg:x="188" fg:w="1"/><text x="15.6095%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3595%" y="469" width="0.0817%" height="15" fill="rgb(208,168,36)" fg:x="188" fg:w="1"/><text x="15.6095%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3595%" y="453" width="0.0817%" height="15" fill="rgb(246,171,24)" fg:x="188" fg:w="1"/><text x="15.6095%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.3595%" y="437" width="0.0817%" height="15" fill="rgb(215,142,24)" fg:x="188" fg:w="1"/><text x="15.6095%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.3595%" y="421" width="0.0817%" height="15" fill="rgb(250,187,7)" fg:x="188" fg:w="1"/><text x="15.6095%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.3595%" y="405" width="0.0817%" height="15" fill="rgb(228,66,33)" fg:x="188" fg:w="1"/><text x="15.6095%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3595%" y="389" width="0.0817%" height="15" fill="rgb(234,215,21)" fg:x="188" fg:w="1"/><text x="15.6095%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3595%" y="373" width="0.0817%" height="15" fill="rgb(222,191,20)" fg:x="188" fg:w="1"/><text x="15.6095%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.3595%" y="357" width="0.0817%" height="15" fill="rgb(245,79,54)" fg:x="188" fg:w="1"/><text x="15.6095%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.3595%" y="341" width="0.0817%" height="15" fill="rgb(240,10,37)" fg:x="188" fg:w="1"/><text x="15.6095%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.3595%" y="325" width="0.0817%" height="15" fill="rgb(214,192,32)" fg:x="188" fg:w="1"/><text x="15.6095%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.3595%" y="309" width="0.0817%" height="15" fill="rgb(209,36,54)" fg:x="188" fg:w="1"/><text x="15.6095%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3595%" y="293" width="0.0817%" height="15" fill="rgb(220,10,11)" fg:x="188" fg:w="1"/><text x="15.6095%" y="303.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="15.4412%" y="565" width="0.0817%" height="15" fill="rgb(221,106,17)" fg:x="189" fg:w="1"/><text x="15.6912%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.4412%" y="549" width="0.0817%" height="15" fill="rgb(251,142,44)" fg:x="189" fg:w="1"/><text x="15.6912%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.4412%" y="533" width="0.0817%" height="15" fill="rgb(238,13,15)" fg:x="189" fg:w="1"/><text x="15.6912%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.4412%" y="517" width="0.0817%" height="15" fill="rgb(208,107,27)" fg:x="189" fg:w="1"/><text x="15.6912%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5229%" y="533" width="0.0817%" height="15" fill="rgb(205,136,37)" fg:x="190" fg:w="1"/><text x="15.7729%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="15.3595%" y="581" width="0.3268%" height="15" fill="rgb(250,205,27)" fg:x="188" fg:w="4"/><text x="15.6095%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.5229%" y="565" width="0.1634%" height="15" fill="rgb(210,80,43)" fg:x="190" fg:w="2"/><text x="15.7729%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.5229%" y="549" width="0.1634%" height="15" fill="rgb(247,160,36)" fg:x="190" fg:w="2"/><text x="15.7729%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.6046%" y="533" width="0.0817%" height="15" fill="rgb(234,13,49)" fg:x="191" fg:w="1"/><text x="15.8546%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.6046%" y="517" width="0.0817%" height="15" fill="rgb(234,122,0)" fg:x="191" fg:w="1"/><text x="15.8546%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6046%" y="501" width="0.0817%" height="15" fill="rgb(207,146,38)" fg:x="191" fg:w="1"/><text x="15.8546%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.6046%" y="485" width="0.0817%" height="15" fill="rgb(207,177,25)" fg:x="191" fg:w="1"/><text x="15.8546%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.6046%" y="469" width="0.0817%" height="15" fill="rgb(211,178,42)" fg:x="191" fg:w="1"/><text x="15.8546%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.49%)</title><rect x="15.2778%" y="597" width="0.4902%" height="15" fill="rgb(230,69,54)" fg:x="187" fg:w="6"/><text x="15.5278%" y="607.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="15.6863%" y="581" width="0.0817%" height="15" fill="rgb(214,135,41)" fg:x="192" fg:w="1"/><text x="15.9363%" y="591.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="15.6863%" y="565" width="0.0817%" height="15" fill="rgb(237,67,25)" fg:x="192" fg:w="1"/><text x="15.9363%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (11 samples, 0.90%)</title><rect x="14.9510%" y="645" width="0.8987%" height="15" fill="rgb(222,189,50)" fg:x="183" fg:w="11"/><text x="15.2010%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (11 samples, 0.90%)</title><rect x="14.9510%" y="629" width="0.8987%" height="15" fill="rgb(245,148,34)" fg:x="183" fg:w="11"/><text x="15.2010%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (7 samples, 0.57%)</title><rect x="15.2778%" y="613" width="0.5719%" height="15" fill="rgb(222,29,6)" fg:x="187" fg:w="7"/><text x="15.5278%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.7680%" y="597" width="0.0817%" height="15" fill="rgb(221,189,43)" fg:x="193" fg:w="1"/><text x="16.0180%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.7680%" y="581" width="0.0817%" height="15" fill="rgb(207,36,27)" fg:x="193" fg:w="1"/><text x="16.0180%" y="591.50"></text></g><g><title>&lt;core::array::iter::IntoIter&lt;T,_&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.9314%" y="581" width="0.0817%" height="15" fill="rgb(217,90,24)" fg:x="195" fg:w="1"/><text x="16.1814%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (2 samples, 0.16%)</title><rect x="15.9314%" y="597" width="0.1634%" height="15" fill="rgb(224,66,35)" fg:x="195" fg:w="2"/><text x="16.1814%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.0131%" y="581" width="0.0817%" height="15" fill="rgb(221,13,50)" fg:x="196" fg:w="1"/><text x="16.2631%" y="591.50"></text></g><g><title>plugins_core::build::Build::new_world (4 samples, 0.33%)</title><rect x="15.8497%" y="629" width="0.3268%" height="15" fill="rgb(236,68,49)" fg:x="194" fg:w="4"/><text x="16.0997%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (4 samples, 0.33%)</title><rect x="15.8497%" y="613" width="0.3268%" height="15" fill="rgb(229,146,28)" fg:x="194" fg:w="4"/><text x="16.0997%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.0948%" y="597" width="0.0817%" height="15" fill="rgb(225,31,38)" fg:x="197" fg:w="1"/><text x="16.3448%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.0948%" y="581" width="0.0817%" height="15" fill="rgb(250,208,3)" fg:x="197" fg:w="1"/><text x="16.3448%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="16.0948%" y="565" width="0.0817%" height="15" fill="rgb(246,54,23)" fg:x="197" fg:w="1"/><text x="16.3448%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.1765%" y="597" width="0.0817%" height="15" fill="rgb(243,76,11)" fg:x="198" fg:w="1"/><text x="16.4265%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.1765%" y="581" width="0.0817%" height="15" fill="rgb(245,21,50)" fg:x="198" fg:w="1"/><text x="16.4265%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1765%" y="565" width="0.0817%" height="15" fill="rgb(228,9,43)" fg:x="198" fg:w="1"/><text x="16.4265%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.2582%" y="549" width="0.0817%" height="15" fill="rgb(208,100,47)" fg:x="199" fg:w="1"/><text x="16.5082%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.2582%" y="533" width="0.0817%" height="15" fill="rgb(232,26,8)" fg:x="199" fg:w="1"/><text x="16.5082%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.2582%" y="517" width="0.0817%" height="15" fill="rgb(216,166,38)" fg:x="199" fg:w="1"/><text x="16.5082%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2582%" y="501" width="0.0817%" height="15" fill="rgb(251,202,51)" fg:x="199" fg:w="1"/><text x="16.5082%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.2582%" y="485" width="0.0817%" height="15" fill="rgb(254,216,34)" fg:x="199" fg:w="1"/><text x="16.5082%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2582%" y="469" width="0.0817%" height="15" fill="rgb(251,32,27)" fg:x="199" fg:w="1"/><text x="16.5082%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.2582%" y="453" width="0.0817%" height="15" fill="rgb(208,127,28)" fg:x="199" fg:w="1"/><text x="16.5082%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.2582%" y="437" width="0.0817%" height="15" fill="rgb(224,137,22)" fg:x="199" fg:w="1"/><text x="16.5082%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.2582%" y="421" width="0.0817%" height="15" fill="rgb(254,70,32)" fg:x="199" fg:w="1"/><text x="16.5082%" y="431.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="16.2582%" y="581" width="0.1634%" height="15" fill="rgb(229,75,37)" fg:x="199" fg:w="2"/><text x="16.5082%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="16.2582%" y="565" width="0.1634%" height="15" fill="rgb(252,64,23)" fg:x="199" fg:w="2"/><text x="16.5082%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="16.3399%" y="549" width="0.0817%" height="15" fill="rgb(232,162,48)" fg:x="200" fg:w="1"/><text x="16.5899%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.3399%" y="533" width="0.0817%" height="15" fill="rgb(246,160,12)" fg:x="200" fg:w="1"/><text x="16.5899%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3399%" y="517" width="0.0817%" height="15" fill="rgb(247,166,0)" fg:x="200" fg:w="1"/><text x="16.5899%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.3399%" y="501" width="0.0817%" height="15" fill="rgb(249,219,21)" fg:x="200" fg:w="1"/><text x="16.5899%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.3399%" y="485" width="0.0817%" height="15" fill="rgb(205,209,3)" fg:x="200" fg:w="1"/><text x="16.5899%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.3399%" y="469" width="0.0817%" height="15" fill="rgb(243,44,1)" fg:x="200" fg:w="1"/><text x="16.5899%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3399%" y="453" width="0.0817%" height="15" fill="rgb(206,159,16)" fg:x="200" fg:w="1"/><text x="16.5899%" y="463.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="16.4216%" y="581" width="0.1634%" height="15" fill="rgb(244,77,30)" fg:x="201" fg:w="2"/><text x="16.6716%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.4216%" y="565" width="0.1634%" height="15" fill="rgb(218,69,12)" fg:x="201" fg:w="2"/><text x="16.6716%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.4216%" y="549" width="0.1634%" height="15" fill="rgb(212,87,7)" fg:x="201" fg:w="2"/><text x="16.6716%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="16.4216%" y="533" width="0.1634%" height="15" fill="rgb(245,114,25)" fg:x="201" fg:w="2"/><text x="16.6716%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5850%" y="549" width="0.0817%" height="15" fill="rgb(210,61,42)" fg:x="203" fg:w="1"/><text x="16.8350%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.65%)</title><rect x="16.1765%" y="613" width="0.6536%" height="15" fill="rgb(211,52,33)" fg:x="198" fg:w="8"/><text x="16.4265%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="16.2582%" y="597" width="0.5719%" height="15" fill="rgb(234,58,33)" fg:x="199" fg:w="7"/><text x="16.5082%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="16.5850%" y="581" width="0.2451%" height="15" fill="rgb(220,115,36)" fg:x="203" fg:w="3"/><text x="16.8350%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="16.5850%" y="565" width="0.2451%" height="15" fill="rgb(243,153,54)" fg:x="203" fg:w="3"/><text x="16.8350%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="16.6667%" y="549" width="0.1634%" height="15" fill="rgb(251,47,18)" fg:x="204" fg:w="2"/><text x="16.9167%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="16.6667%" y="533" width="0.1634%" height="15" fill="rgb(242,102,42)" fg:x="204" fg:w="2"/><text x="16.9167%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.6667%" y="517" width="0.1634%" height="15" fill="rgb(234,31,38)" fg:x="204" fg:w="2"/><text x="16.9167%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="16.6667%" y="501" width="0.1634%" height="15" fill="rgb(221,117,51)" fg:x="204" fg:w="2"/><text x="16.9167%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="16.6667%" y="485" width="0.1634%" height="15" fill="rgb(212,20,18)" fg:x="204" fg:w="2"/><text x="16.9167%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7484%" y="469" width="0.0817%" height="15" fill="rgb(245,133,36)" fg:x="205" fg:w="1"/><text x="16.9984%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="16.7484%" y="453" width="0.0817%" height="15" fill="rgb(212,6,19)" fg:x="205" fg:w="1"/><text x="16.9984%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.7484%" y="437" width="0.0817%" height="15" fill="rgb(218,1,36)" fg:x="205" fg:w="1"/><text x="16.9984%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8301%" y="613" width="0.0817%" height="15" fill="rgb(246,84,54)" fg:x="206" fg:w="1"/><text x="17.0801%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8301%" y="597" width="0.0817%" height="15" fill="rgb(242,110,6)" fg:x="206" fg:w="1"/><text x="17.0801%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8301%" y="581" width="0.0817%" height="15" fill="rgb(214,47,5)" fg:x="206" fg:w="1"/><text x="17.0801%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8301%" y="565" width="0.0817%" height="15" fill="rgb(218,159,25)" fg:x="206" fg:w="1"/><text x="17.0801%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8301%" y="549" width="0.0817%" height="15" fill="rgb(215,211,28)" fg:x="206" fg:w="1"/><text x="17.0801%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8301%" y="533" width="0.0817%" height="15" fill="rgb(238,59,32)" fg:x="206" fg:w="1"/><text x="17.0801%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8301%" y="517" width="0.0817%" height="15" fill="rgb(226,82,3)" fg:x="206" fg:w="1"/><text x="17.0801%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8301%" y="501" width="0.0817%" height="15" fill="rgb(240,164,32)" fg:x="206" fg:w="1"/><text x="17.0801%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.8301%" y="485" width="0.0817%" height="15" fill="rgb(232,46,7)" fg:x="206" fg:w="1"/><text x="17.0801%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.8301%" y="469" width="0.0817%" height="15" fill="rgb(229,129,53)" fg:x="206" fg:w="1"/><text x="17.0801%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.8301%" y="453" width="0.0817%" height="15" fill="rgb(234,188,29)" fg:x="206" fg:w="1"/><text x="17.0801%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.8301%" y="437" width="0.0817%" height="15" fill="rgb(246,141,4)" fg:x="206" fg:w="1"/><text x="17.0801%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8301%" y="421" width="0.0817%" height="15" fill="rgb(229,23,39)" fg:x="206" fg:w="1"/><text x="17.0801%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.9118%" y="565" width="0.0817%" height="15" fill="rgb(206,12,3)" fg:x="207" fg:w="1"/><text x="17.1618%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9118%" y="549" width="0.0817%" height="15" fill="rgb(252,226,20)" fg:x="207" fg:w="1"/><text x="17.1618%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (161 samples, 13.15%)</title><rect x="3.9216%" y="661" width="13.1536%" height="15" fill="rgb(216,123,35)" fg:x="48" fg:w="161"/><text x="4.1716%" y="671.50">&lt;tests::HoldingKeyIn..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (15 samples, 1.23%)</title><rect x="15.8497%" y="645" width="1.2255%" height="15" fill="rgb(212,68,40)" fg:x="194" fg:w="15"/><text x="16.0997%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.90%)</title><rect x="16.1765%" y="629" width="0.8987%" height="15" fill="rgb(254,125,32)" fg:x="198" fg:w="11"/><text x="16.4265%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.9118%" y="613" width="0.1634%" height="15" fill="rgb(253,97,22)" fg:x="207" fg:w="2"/><text x="17.1618%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.9118%" y="597" width="0.1634%" height="15" fill="rgb(241,101,14)" fg:x="207" fg:w="2"/><text x="17.1618%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.9118%" y="581" width="0.1634%" height="15" fill="rgb(238,103,29)" fg:x="207" fg:w="2"/><text x="17.1618%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.9935%" y="565" width="0.0817%" height="15" fill="rgb(233,195,47)" fg:x="208" fg:w="1"/><text x="17.2435%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9935%" y="549" width="0.0817%" height="15" fill="rgb(246,218,30)" fg:x="208" fg:w="1"/><text x="17.2435%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.9935%" y="533" width="0.0817%" height="15" fill="rgb(219,145,47)" fg:x="208" fg:w="1"/><text x="17.2435%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9935%" y="517" width="0.0817%" height="15" fill="rgb(243,12,26)" fg:x="208" fg:w="1"/><text x="17.2435%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9935%" y="501" width="0.0817%" height="15" fill="rgb(214,87,16)" fg:x="208" fg:w="1"/><text x="17.2435%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.9935%" y="485" width="0.0817%" height="15" fill="rgb(208,99,42)" fg:x="208" fg:w="1"/><text x="17.2435%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="17.0752%" y="661" width="0.1634%" height="15" fill="rgb(253,99,2)" fg:x="209" fg:w="2"/><text x="17.3252%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.1569%" y="645" width="0.0817%" height="15" fill="rgb(220,168,23)" fg:x="210" fg:w="1"/><text x="17.4069%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="17.1569%" y="629" width="0.0817%" height="15" fill="rgb(242,38,24)" fg:x="210" fg:w="1"/><text x="17.4069%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.1569%" y="613" width="0.0817%" height="15" fill="rgb(225,182,9)" fg:x="210" fg:w="1"/><text x="17.4069%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.1569%" y="597" width="0.0817%" height="15" fill="rgb(243,178,37)" fg:x="210" fg:w="1"/><text x="17.4069%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="17.3203%" y="533" width="0.0817%" height="15" fill="rgb(232,139,19)" fg:x="212" fg:w="1"/><text x="17.5703%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.3203%" y="517" width="0.0817%" height="15" fill="rgb(225,201,24)" fg:x="212" fg:w="1"/><text x="17.5703%" y="527.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="17.3203%" y="501" width="0.0817%" height="15" fill="rgb(221,47,46)" fg:x="212" fg:w="1"/><text x="17.5703%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.3203%" y="485" width="0.0817%" height="15" fill="rgb(249,23,13)" fg:x="212" fg:w="1"/><text x="17.5703%" y="495.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="17.3203%" y="469" width="0.0817%" height="15" fill="rgb(219,9,5)" fg:x="212" fg:w="1"/><text x="17.5703%" y="479.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="17.3203%" y="453" width="0.0817%" height="15" fill="rgb(254,171,16)" fg:x="212" fg:w="1"/><text x="17.5703%" y="463.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="17.3203%" y="437" width="0.0817%" height="15" fill="rgb(230,171,20)" fg:x="212" fg:w="1"/><text x="17.5703%" y="447.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="17.3203%" y="421" width="0.0817%" height="15" fill="rgb(210,71,41)" fg:x="212" fg:w="1"/><text x="17.5703%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="17.3203%" y="405" width="0.0817%" height="15" fill="rgb(206,173,20)" fg:x="212" fg:w="1"/><text x="17.5703%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="17.3203%" y="389" width="0.0817%" height="15" fill="rgb(233,88,34)" fg:x="212" fg:w="1"/><text x="17.5703%" y="399.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="17.3203%" y="373" width="0.0817%" height="15" fill="rgb(223,209,46)" fg:x="212" fg:w="1"/><text x="17.5703%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="17.3203%" y="357" width="0.0817%" height="15" fill="rgb(250,43,18)" fg:x="212" fg:w="1"/><text x="17.5703%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="17.3203%" y="341" width="0.0817%" height="15" fill="rgb(208,13,10)" fg:x="212" fg:w="1"/><text x="17.5703%" y="351.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="17.3203%" y="325" width="0.0817%" height="15" fill="rgb(212,200,36)" fg:x="212" fg:w="1"/><text x="17.5703%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="17.3203%" y="645" width="0.1634%" height="15" fill="rgb(225,90,30)" fg:x="212" fg:w="2"/><text x="17.5703%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="17.3203%" y="629" width="0.1634%" height="15" fill="rgb(236,182,39)" fg:x="212" fg:w="2"/><text x="17.5703%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="17.3203%" y="613" width="0.1634%" height="15" fill="rgb(212,144,35)" fg:x="212" fg:w="2"/><text x="17.5703%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="17.3203%" y="597" width="0.1634%" height="15" fill="rgb(228,63,44)" fg:x="212" fg:w="2"/><text x="17.5703%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="17.3203%" y="581" width="0.1634%" height="15" fill="rgb(228,109,6)" fg:x="212" fg:w="2"/><text x="17.5703%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="17.3203%" y="565" width="0.1634%" height="15" fill="rgb(238,117,24)" fg:x="212" fg:w="2"/><text x="17.5703%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="17.3203%" y="549" width="0.1634%" height="15" fill="rgb(242,26,26)" fg:x="212" fg:w="2"/><text x="17.5703%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.4020%" y="533" width="0.0817%" height="15" fill="rgb(221,92,48)" fg:x="213" fg:w="1"/><text x="17.6520%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.4020%" y="517" width="0.0817%" height="15" fill="rgb(209,209,32)" fg:x="213" fg:w="1"/><text x="17.6520%" y="527.50"></text></g><g><title>engine::session::should_force_rollback (3 samples, 0.25%)</title><rect x="17.4837%" y="645" width="0.2451%" height="15" fill="rgb(221,70,22)" fg:x="214" fg:w="3"/><text x="17.7337%" y="655.50"></text></g><g><title>std::env::_var (3 samples, 0.25%)</title><rect x="17.4837%" y="629" width="0.2451%" height="15" fill="rgb(248,145,5)" fg:x="214" fg:w="3"/><text x="17.7337%" y="639.50"></text></g><g><title>std::env::var_os (3 samples, 0.25%)</title><rect x="17.4837%" y="613" width="0.2451%" height="15" fill="rgb(226,116,26)" fg:x="214" fg:w="3"/><text x="17.7337%" y="623.50"></text></g><g><title>std::env::_var_os (3 samples, 0.25%)</title><rect x="17.4837%" y="597" width="0.2451%" height="15" fill="rgb(244,5,17)" fg:x="214" fg:w="3"/><text x="17.7337%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (3 samples, 0.25%)</title><rect x="17.4837%" y="581" width="0.2451%" height="15" fill="rgb(252,159,33)" fg:x="214" fg:w="3"/><text x="17.7337%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.25%)</title><rect x="17.4837%" y="565" width="0.2451%" height="15" fill="rgb(206,71,0)" fg:x="214" fg:w="3"/><text x="17.7337%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (3 samples, 0.25%)</title><rect x="17.4837%" y="549" width="0.2451%" height="15" fill="rgb(233,118,54)" fg:x="214" fg:w="3"/><text x="17.7337%" y="559.50"></text></g><g><title>getenv (3 samples, 0.25%)</title><rect x="17.4837%" y="533" width="0.2451%" height="15" fill="rgb(234,83,48)" fg:x="214" fg:w="3"/><text x="17.7337%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="17.8105%" y="581" width="0.1634%" height="15" fill="rgb(228,3,54)" fg:x="218" fg:w="2"/><text x="18.0605%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.8105%" y="565" width="0.1634%" height="15" fill="rgb(226,155,13)" fg:x="218" fg:w="2"/><text x="18.0605%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.8105%" y="549" width="0.1634%" height="15" fill="rgb(241,28,37)" fg:x="218" fg:w="2"/><text x="18.0605%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="17.8105%" y="533" width="0.1634%" height="15" fill="rgb(233,93,10)" fg:x="218" fg:w="2"/><text x="18.0605%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="17.8105%" y="517" width="0.1634%" height="15" fill="rgb(225,113,19)" fg:x="218" fg:w="2"/><text x="18.0605%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="17.8105%" y="501" width="0.1634%" height="15" fill="rgb(241,2,18)" fg:x="218" fg:w="2"/><text x="18.0605%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="17.8105%" y="485" width="0.1634%" height="15" fill="rgb(228,207,21)" fg:x="218" fg:w="2"/><text x="18.0605%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="17.8105%" y="469" width="0.1634%" height="15" fill="rgb(213,211,35)" fg:x="218" fg:w="2"/><text x="18.0605%" y="479.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="17.8105%" y="613" width="0.2451%" height="15" fill="rgb(209,83,10)" fg:x="218" fg:w="3"/><text x="18.0605%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.25%)</title><rect x="17.8105%" y="597" width="0.2451%" height="15" fill="rgb(209,164,1)" fg:x="218" fg:w="3"/><text x="18.0605%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="17.9739%" y="581" width="0.0817%" height="15" fill="rgb(213,184,43)" fg:x="220" fg:w="1"/><text x="18.2239%" y="591.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="17.9739%" y="565" width="0.0817%" height="15" fill="rgb(231,61,34)" fg:x="220" fg:w="1"/><text x="18.2239%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="18.1373%" y="549" width="0.0817%" height="15" fill="rgb(235,75,3)" fg:x="222" fg:w="1"/><text x="18.3873%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="18.2190%" y="533" width="0.1634%" height="15" fill="rgb(220,106,47)" fg:x="223" fg:w="2"/><text x="18.4690%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.2190%" y="517" width="0.1634%" height="15" fill="rgb(210,196,33)" fg:x="223" fg:w="2"/><text x="18.4690%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.2190%" y="501" width="0.1634%" height="15" fill="rgb(229,154,42)" fg:x="223" fg:w="2"/><text x="18.4690%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.3007%" y="485" width="0.0817%" height="15" fill="rgb(228,114,26)" fg:x="224" fg:w="1"/><text x="18.5507%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.3007%" y="469" width="0.0817%" height="15" fill="rgb(208,144,1)" fg:x="224" fg:w="1"/><text x="18.5507%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.3007%" y="453" width="0.0817%" height="15" fill="rgb(239,112,37)" fg:x="224" fg:w="1"/><text x="18.5507%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.33%)</title><rect x="18.2190%" y="549" width="0.3268%" height="15" fill="rgb(210,96,50)" fg:x="223" fg:w="4"/><text x="18.4690%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="18.3824%" y="533" width="0.1634%" height="15" fill="rgb(222,178,2)" fg:x="225" fg:w="2"/><text x="18.6324%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.3824%" y="517" width="0.1634%" height="15" fill="rgb(226,74,18)" fg:x="225" fg:w="2"/><text x="18.6324%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.4641%" y="501" width="0.0817%" height="15" fill="rgb(225,67,54)" fg:x="226" fg:w="1"/><text x="18.7141%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.5458%" y="533" width="0.0817%" height="15" fill="rgb(251,92,32)" fg:x="227" fg:w="1"/><text x="18.7958%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="18.6275%" y="533" width="0.2451%" height="15" fill="rgb(228,149,22)" fg:x="228" fg:w="3"/><text x="18.8775%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="18.6275%" y="517" width="0.2451%" height="15" fill="rgb(243,54,13)" fg:x="228" fg:w="3"/><text x="18.8775%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="18.7092%" y="501" width="0.1634%" height="15" fill="rgb(243,180,28)" fg:x="229" fg:w="2"/><text x="18.9592%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="18.7092%" y="485" width="0.1634%" height="15" fill="rgb(208,167,24)" fg:x="229" fg:w="2"/><text x="18.9592%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.8725%" y="517" width="0.0817%" height="15" fill="rgb(245,73,45)" fg:x="231" fg:w="1"/><text x="19.1225%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.8725%" y="501" width="0.0817%" height="15" fill="rgb(237,203,48)" fg:x="231" fg:w="1"/><text x="19.1225%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="18.9542%" y="517" width="0.3268%" height="15" fill="rgb(211,197,16)" fg:x="232" fg:w="4"/><text x="19.2042%" y="527.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="19.0359%" y="501" width="0.2451%" height="15" fill="rgb(243,99,51)" fg:x="233" fg:w="3"/><text x="19.2859%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.1993%" y="485" width="0.0817%" height="15" fill="rgb(215,123,29)" fg:x="235" fg:w="1"/><text x="19.4493%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1993%" y="469" width="0.0817%" height="15" fill="rgb(239,186,37)" fg:x="235" fg:w="1"/><text x="19.4493%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.3627%" y="501" width="0.0817%" height="15" fill="rgb(252,136,39)" fg:x="237" fg:w="1"/><text x="19.6127%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.5261%" y="485" width="0.0817%" height="15" fill="rgb(223,213,32)" fg:x="239" fg:w="1"/><text x="19.7761%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.5261%" y="469" width="0.0817%" height="15" fill="rgb(233,115,5)" fg:x="239" fg:w="1"/><text x="19.7761%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.5261%" y="453" width="0.0817%" height="15" fill="rgb(207,226,44)" fg:x="239" fg:w="1"/><text x="19.7761%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.5261%" y="437" width="0.0817%" height="15" fill="rgb(208,126,0)" fg:x="239" fg:w="1"/><text x="19.7761%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.5261%" y="421" width="0.0817%" height="15" fill="rgb(244,66,21)" fg:x="239" fg:w="1"/><text x="19.7761%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.5261%" y="405" width="0.0817%" height="15" fill="rgb(222,97,12)" fg:x="239" fg:w="1"/><text x="19.7761%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.5261%" y="389" width="0.0817%" height="15" fill="rgb(219,213,19)" fg:x="239" fg:w="1"/><text x="19.7761%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="19.4444%" y="501" width="0.2451%" height="15" fill="rgb(252,169,30)" fg:x="238" fg:w="3"/><text x="19.6944%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.6078%" y="485" width="0.0817%" height="15" fill="rgb(206,32,51)" fg:x="240" fg:w="1"/><text x="19.8578%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="19.2810%" y="517" width="0.5719%" height="15" fill="rgb(250,172,42)" fg:x="236" fg:w="7"/><text x="19.5310%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="19.6895%" y="501" width="0.1634%" height="15" fill="rgb(209,34,43)" fg:x="241" fg:w="2"/><text x="19.9395%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="18.8725%" y="533" width="1.0621%" height="15" fill="rgb(223,11,35)" fg:x="231" fg:w="13"/><text x="19.1225%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.8529%" y="517" width="0.0817%" height="15" fill="rgb(251,219,26)" fg:x="243" fg:w="1"/><text x="20.1029%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.8529%" y="501" width="0.0817%" height="15" fill="rgb(231,119,3)" fg:x="243" fg:w="1"/><text x="20.1029%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.8529%" y="485" width="0.0817%" height="15" fill="rgb(216,97,11)" fg:x="243" fg:w="1"/><text x="20.1029%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.47%)</title><rect x="18.5458%" y="549" width="1.4706%" height="15" fill="rgb(223,59,9)" fg:x="227" fg:w="18"/><text x="18.7958%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.9346%" y="533" width="0.0817%" height="15" fill="rgb(233,93,31)" fg:x="244" fg:w="1"/><text x="20.1846%" y="543.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (26 samples, 2.12%)</title><rect x="18.0556%" y="565" width="2.1242%" height="15" fill="rgb(239,81,33)" fg:x="221" fg:w="26"/><text x="18.3056%" y="575.50">&lt;..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.0163%" y="549" width="0.1634%" height="15" fill="rgb(213,120,34)" fg:x="245" fg:w="2"/><text x="20.2663%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.0980%" y="533" width="0.0817%" height="15" fill="rgb(243,49,53)" fg:x="246" fg:w="1"/><text x="20.3480%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.0980%" y="517" width="0.0817%" height="15" fill="rgb(247,216,33)" fg:x="246" fg:w="1"/><text x="20.3480%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.0980%" y="501" width="0.0817%" height="15" fill="rgb(226,26,14)" fg:x="246" fg:w="1"/><text x="20.3480%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.0980%" y="485" width="0.0817%" height="15" fill="rgb(215,49,53)" fg:x="246" fg:w="1"/><text x="20.3480%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0980%" y="469" width="0.0817%" height="15" fill="rgb(245,162,40)" fg:x="246" fg:w="1"/><text x="20.3480%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.2614%" y="517" width="0.0817%" height="15" fill="rgb(229,68,17)" fg:x="248" fg:w="1"/><text x="20.5114%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.4248%" y="501" width="0.0817%" height="15" fill="rgb(213,182,10)" fg:x="250" fg:w="1"/><text x="20.6748%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.5065%" y="501" width="0.0817%" height="15" fill="rgb(245,125,30)" fg:x="251" fg:w="1"/><text x="20.7565%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5065%" y="485" width="0.0817%" height="15" fill="rgb(232,202,2)" fg:x="251" fg:w="1"/><text x="20.7565%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5882%" y="485" width="0.0817%" height="15" fill="rgb(237,140,51)" fg:x="252" fg:w="1"/><text x="20.8382%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="20.1797%" y="565" width="0.5719%" height="15" fill="rgb(236,157,25)" fg:x="247" fg:w="7"/><text x="20.4297%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.57%)</title><rect x="20.1797%" y="549" width="0.5719%" height="15" fill="rgb(219,209,0)" fg:x="247" fg:w="7"/><text x="20.4297%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.57%)</title><rect x="20.1797%" y="533" width="0.5719%" height="15" fill="rgb(240,116,54)" fg:x="247" fg:w="7"/><text x="20.4297%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="20.3431%" y="517" width="0.4085%" height="15" fill="rgb(216,10,36)" fg:x="249" fg:w="5"/><text x="20.5931%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.5882%" y="501" width="0.1634%" height="15" fill="rgb(222,72,44)" fg:x="252" fg:w="2"/><text x="20.8382%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="20.6699%" y="485" width="0.0817%" height="15" fill="rgb(232,159,9)" fg:x="253" fg:w="1"/><text x="20.9199%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.6699%" y="469" width="0.0817%" height="15" fill="rgb(210,39,32)" fg:x="253" fg:w="1"/><text x="20.9199%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.6699%" y="453" width="0.0817%" height="15" fill="rgb(216,194,45)" fg:x="253" fg:w="1"/><text x="20.9199%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="20.7516%" y="533" width="0.0817%" height="15" fill="rgb(218,18,35)" fg:x="254" fg:w="1"/><text x="21.0016%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.8333%" y="501" width="0.0817%" height="15" fill="rgb(207,83,51)" fg:x="255" fg:w="1"/><text x="21.0833%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8333%" y="485" width="0.0817%" height="15" fill="rgb(225,63,43)" fg:x="255" fg:w="1"/><text x="21.0833%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.9150%" y="485" width="0.0817%" height="15" fill="rgb(207,57,36)" fg:x="256" fg:w="1"/><text x="21.1650%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.9967%" y="469" width="0.0817%" height="15" fill="rgb(216,99,33)" fg:x="257" fg:w="1"/><text x="21.2467%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="20.8333%" y="533" width="0.3268%" height="15" fill="rgb(225,42,16)" fg:x="255" fg:w="4"/><text x="21.0833%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.33%)</title><rect x="20.8333%" y="517" width="0.3268%" height="15" fill="rgb(220,201,45)" fg:x="255" fg:w="4"/><text x="21.0833%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="20.9150%" y="501" width="0.2451%" height="15" fill="rgb(225,33,4)" fg:x="256" fg:w="3"/><text x="21.1650%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.9967%" y="485" width="0.1634%" height="15" fill="rgb(224,33,50)" fg:x="257" fg:w="2"/><text x="21.2467%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="21.0784%" y="469" width="0.0817%" height="15" fill="rgb(246,198,51)" fg:x="258" fg:w="1"/><text x="21.3284%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.0784%" y="453" width="0.0817%" height="15" fill="rgb(205,22,4)" fg:x="258" fg:w="1"/><text x="21.3284%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.0784%" y="437" width="0.0817%" height="15" fill="rgb(206,3,8)" fg:x="258" fg:w="1"/><text x="21.3284%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="21.2418%" y="469" width="0.0817%" height="15" fill="rgb(251,23,15)" fg:x="260" fg:w="1"/><text x="21.4918%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.2418%" y="453" width="0.0817%" height="15" fill="rgb(252,88,28)" fg:x="260" fg:w="1"/><text x="21.4918%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="21.2418%" y="485" width="0.1634%" height="15" fill="rgb(212,127,14)" fg:x="260" fg:w="2"/><text x="21.4918%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.3235%" y="469" width="0.0817%" height="15" fill="rgb(247,145,37)" fg:x="261" fg:w="1"/><text x="21.5735%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="21.3235%" y="453" width="0.0817%" height="15" fill="rgb(209,117,53)" fg:x="261" fg:w="1"/><text x="21.5735%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.3235%" y="437" width="0.0817%" height="15" fill="rgb(212,90,42)" fg:x="261" fg:w="1"/><text x="21.5735%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.25%)</title><rect x="21.2418%" y="517" width="0.2451%" height="15" fill="rgb(218,164,37)" fg:x="260" fg:w="3"/><text x="21.4918%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.25%)</title><rect x="21.2418%" y="501" width="0.2451%" height="15" fill="rgb(246,65,34)" fg:x="260" fg:w="3"/><text x="21.4918%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="21.4052%" y="485" width="0.0817%" height="15" fill="rgb(231,100,33)" fg:x="262" fg:w="1"/><text x="21.6552%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4869%" y="517" width="0.0817%" height="15" fill="rgb(228,126,14)" fg:x="263" fg:w="1"/><text x="21.7369%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.90%)</title><rect x="20.7516%" y="549" width="0.8987%" height="15" fill="rgb(215,173,21)" fg:x="254" fg:w="11"/><text x="21.0016%" y="559.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.49%)</title><rect x="21.1601%" y="533" width="0.4902%" height="15" fill="rgb(210,6,40)" fg:x="259" fg:w="6"/><text x="21.4101%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="21.5686%" y="517" width="0.0817%" height="15" fill="rgb(212,48,18)" fg:x="264" fg:w="1"/><text x="21.8186%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.5686%" y="501" width="0.0817%" height="15" fill="rgb(230,214,11)" fg:x="264" fg:w="1"/><text x="21.8186%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="21.8137%" y="517" width="0.0817%" height="15" fill="rgb(254,105,39)" fg:x="267" fg:w="1"/><text x="22.0637%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="21.8137%" y="501" width="0.0817%" height="15" fill="rgb(245,158,5)" fg:x="267" fg:w="1"/><text x="22.0637%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="21.8954%" y="517" width="0.4085%" height="15" fill="rgb(249,208,11)" fg:x="268" fg:w="5"/><text x="22.1454%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.2222%" y="501" width="0.0817%" height="15" fill="rgb(210,39,28)" fg:x="272" fg:w="1"/><text x="22.4722%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="22.3039%" y="517" width="0.0817%" height="15" fill="rgb(211,56,53)" fg:x="273" fg:w="1"/><text x="22.5539%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="22.3039%" y="501" width="0.0817%" height="15" fill="rgb(226,201,30)" fg:x="273" fg:w="1"/><text x="22.5539%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.5490%" y="469" width="0.1634%" height="15" fill="rgb(239,101,34)" fg:x="276" fg:w="2"/><text x="22.7990%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="22.5490%" y="453" width="0.1634%" height="15" fill="rgb(226,209,5)" fg:x="276" fg:w="2"/><text x="22.7990%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="22.5490%" y="437" width="0.1634%" height="15" fill="rgb(250,105,47)" fg:x="276" fg:w="2"/><text x="22.7990%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.7941%" y="389" width="0.0817%" height="15" fill="rgb(230,72,3)" fg:x="279" fg:w="1"/><text x="23.0441%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="22.7941%" y="373" width="0.0817%" height="15" fill="rgb(232,218,39)" fg:x="279" fg:w="1"/><text x="23.0441%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="22.7941%" y="357" width="0.0817%" height="15" fill="rgb(248,166,6)" fg:x="279" fg:w="1"/><text x="23.0441%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="22.7941%" y="405" width="0.2451%" height="15" fill="rgb(247,89,20)" fg:x="279" fg:w="3"/><text x="23.0441%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="22.8758%" y="389" width="0.1634%" height="15" fill="rgb(248,130,54)" fg:x="280" fg:w="2"/><text x="23.1258%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (5 samples, 0.41%)</title><rect x="22.7124%" y="469" width="0.4085%" height="15" fill="rgb(234,196,4)" fg:x="278" fg:w="5"/><text x="22.9624%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="22.7124%" y="453" width="0.4085%" height="15" fill="rgb(250,143,31)" fg:x="278" fg:w="5"/><text x="22.9624%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="22.7941%" y="437" width="0.3268%" height="15" fill="rgb(211,110,34)" fg:x="279" fg:w="4"/><text x="23.0441%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="22.7941%" y="421" width="0.3268%" height="15" fill="rgb(215,124,48)" fg:x="279" fg:w="4"/><text x="23.0441%" y="431.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="23.0392%" y="405" width="0.0817%" height="15" fill="rgb(216,46,13)" fg:x="282" fg:w="1"/><text x="23.2892%" y="415.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="23.0392%" y="389" width="0.0817%" height="15" fill="rgb(205,184,25)" fg:x="282" fg:w="1"/><text x="23.2892%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="23.2026%" y="453" width="0.1634%" height="15" fill="rgb(228,1,10)" fg:x="284" fg:w="2"/><text x="23.4526%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.98%)</title><rect x="22.5490%" y="485" width="0.9804%" height="15" fill="rgb(213,116,27)" fg:x="276" fg:w="12"/><text x="22.7990%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="23.1209%" y="469" width="0.4085%" height="15" fill="rgb(241,95,50)" fg:x="283" fg:w="5"/><text x="23.3709%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.3660%" y="453" width="0.1634%" height="15" fill="rgb(238,48,32)" fg:x="286" fg:w="2"/><text x="23.6160%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3660%" y="437" width="0.1634%" height="15" fill="rgb(235,113,49)" fg:x="286" fg:w="2"/><text x="23.6160%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="23.3660%" y="421" width="0.1634%" height="15" fill="rgb(205,127,43)" fg:x="286" fg:w="2"/><text x="23.6160%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="23.3660%" y="405" width="0.1634%" height="15" fill="rgb(250,162,2)" fg:x="286" fg:w="2"/><text x="23.6160%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.4477%" y="389" width="0.0817%" height="15" fill="rgb(220,13,41)" fg:x="287" fg:w="1"/><text x="23.6977%" y="399.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (24 samples, 1.96%)</title><rect x="21.6503%" y="549" width="1.9608%" height="15" fill="rgb(249,221,25)" fg:x="265" fg:w="24"/><text x="21.9003%" y="559.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (24 samples, 1.96%)</title><rect x="21.6503%" y="533" width="1.9608%" height="15" fill="rgb(215,208,19)" fg:x="265" fg:w="24"/><text x="21.9003%" y="543.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.23%)</title><rect x="22.3856%" y="517" width="1.2255%" height="15" fill="rgb(236,175,2)" fg:x="274" fg:w="15"/><text x="22.6356%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.06%)</title><rect x="22.5490%" y="501" width="1.0621%" height="15" fill="rgb(241,52,2)" fg:x="276" fg:w="13"/><text x="22.7990%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="23.5294%" y="485" width="0.0817%" height="15" fill="rgb(248,140,14)" fg:x="288" fg:w="1"/><text x="23.7794%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.5294%" y="469" width="0.0817%" height="15" fill="rgb(253,22,42)" fg:x="288" fg:w="1"/><text x="23.7794%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="23.6928%" y="325" width="0.0817%" height="15" fill="rgb(234,61,47)" fg:x="290" fg:w="1"/><text x="23.9428%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="23.6928%" y="309" width="0.0817%" height="15" fill="rgb(208,226,15)" fg:x="290" fg:w="1"/><text x="23.9428%" y="319.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="23.6928%" y="293" width="0.0817%" height="15" fill="rgb(217,221,4)" fg:x="290" fg:w="1"/><text x="23.9428%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="23.6928%" y="357" width="0.1634%" height="15" fill="rgb(212,174,34)" fg:x="290" fg:w="2"/><text x="23.9428%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="23.6928%" y="341" width="0.1634%" height="15" fill="rgb(253,83,4)" fg:x="290" fg:w="2"/><text x="23.9428%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.7745%" y="325" width="0.0817%" height="15" fill="rgb(250,195,49)" fg:x="291" fg:w="1"/><text x="24.0245%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="23.6928%" y="405" width="0.2451%" height="15" fill="rgb(241,192,25)" fg:x="290" fg:w="3"/><text x="23.9428%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="23.6928%" y="389" width="0.2451%" height="15" fill="rgb(208,124,10)" fg:x="290" fg:w="3"/><text x="23.9428%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="23.6928%" y="373" width="0.2451%" height="15" fill="rgb(222,33,0)" fg:x="290" fg:w="3"/><text x="23.9428%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8562%" y="357" width="0.0817%" height="15" fill="rgb(234,209,28)" fg:x="292" fg:w="1"/><text x="24.1062%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="23.9379%" y="357" width="0.0817%" height="15" fill="rgb(224,11,23)" fg:x="293" fg:w="1"/><text x="24.1879%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="23.9379%" y="341" width="0.0817%" height="15" fill="rgb(232,99,1)" fg:x="293" fg:w="1"/><text x="24.1879%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="23.9379%" y="373" width="0.3268%" height="15" fill="rgb(237,95,45)" fg:x="293" fg:w="4"/><text x="24.1879%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.25%)</title><rect x="24.0196%" y="357" width="0.2451%" height="15" fill="rgb(208,109,11)" fg:x="294" fg:w="3"/><text x="24.2696%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.1013%" y="341" width="0.1634%" height="15" fill="rgb(216,190,48)" fg:x="295" fg:w="2"/><text x="24.3513%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="23.9379%" y="389" width="0.4085%" height="15" fill="rgb(251,171,36)" fg:x="293" fg:w="5"/><text x="24.1879%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.2647%" y="373" width="0.0817%" height="15" fill="rgb(230,62,22)" fg:x="297" fg:w="1"/><text x="24.5147%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="23.6928%" y="421" width="0.8170%" height="15" fill="rgb(225,114,35)" fg:x="290" fg:w="10"/><text x="23.9428%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="23.9379%" y="405" width="0.5719%" height="15" fill="rgb(215,118,42)" fg:x="293" fg:w="7"/><text x="24.1879%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="24.3464%" y="389" width="0.1634%" height="15" fill="rgb(243,119,21)" fg:x="298" fg:w="2"/><text x="24.5964%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4281%" y="373" width="0.0817%" height="15" fill="rgb(252,177,53)" fg:x="299" fg:w="1"/><text x="24.6781%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.90%)</title><rect x="23.6928%" y="453" width="0.8987%" height="15" fill="rgb(237,209,29)" fg:x="290" fg:w="11"/><text x="23.9428%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.90%)</title><rect x="23.6928%" y="437" width="0.8987%" height="15" fill="rgb(212,65,23)" fg:x="290" fg:w="11"/><text x="23.9428%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.5098%" y="421" width="0.0817%" height="15" fill="rgb(230,222,46)" fg:x="300" fg:w="1"/><text x="24.7598%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="24.6732%" y="437" width="0.1634%" height="15" fill="rgb(215,135,32)" fg:x="302" fg:w="2"/><text x="24.9232%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.47%)</title><rect x="23.6111%" y="485" width="1.4706%" height="15" fill="rgb(246,101,22)" fg:x="289" fg:w="18"/><text x="23.8611%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (18 samples, 1.47%)</title><rect x="23.6111%" y="469" width="1.4706%" height="15" fill="rgb(206,107,13)" fg:x="289" fg:w="18"/><text x="23.8611%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (6 samples, 0.49%)</title><rect x="24.5915%" y="453" width="0.4902%" height="15" fill="rgb(250,100,44)" fg:x="301" fg:w="6"/><text x="24.8415%" y="463.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="24.8366%" y="437" width="0.2451%" height="15" fill="rgb(231,147,38)" fg:x="304" fg:w="3"/><text x="25.0866%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.0817%" y="485" width="0.0817%" height="15" fill="rgb(229,8,40)" fg:x="307" fg:w="1"/><text x="25.3317%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0817%" y="469" width="0.0817%" height="15" fill="rgb(221,135,30)" fg:x="307" fg:w="1"/><text x="25.3317%" y="479.50"></text></g><g><title>engine::session::state::State::close (92 samples, 7.52%)</title><rect x="17.7288%" y="645" width="7.5163%" height="15" fill="rgb(249,193,18)" fg:x="217" fg:w="92"/><text x="17.9788%" y="655.50">engine::se..</text></g><g><title>engine::session::state::State::flush_entities (91 samples, 7.43%)</title><rect x="17.8105%" y="629" width="7.4346%" height="15" fill="rgb(209,133,39)" fg:x="218" fg:w="91"/><text x="18.0605%" y="639.50">engine::se..</text></g><g><title>core::iter::adapters::try_process (88 samples, 7.19%)</title><rect x="18.0556%" y="613" width="7.1895%" height="15" fill="rgb(232,100,14)" fg:x="221" fg:w="88"/><text x="18.3056%" y="623.50">core::iter..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (88 samples, 7.19%)</title><rect x="18.0556%" y="597" width="7.1895%" height="15" fill="rgb(224,185,1)" fg:x="221" fg:w="88"/><text x="18.3056%" y="607.50">&lt;alloc::ve..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (88 samples, 7.19%)</title><rect x="18.0556%" y="581" width="7.1895%" height="15" fill="rgb(223,139,8)" fg:x="221" fg:w="88"/><text x="18.3056%" y="591.50">engine::se..</text></g><g><title>kernel::model::any_entity_changes (55 samples, 4.49%)</title><rect x="20.7516%" y="565" width="4.4935%" height="15" fill="rgb(232,213,38)" fg:x="254" fg:w="55"/><text x="21.0016%" y="575.50">kerne..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (20 samples, 1.63%)</title><rect x="23.6111%" y="549" width="1.6340%" height="15" fill="rgb(207,94,22)" fg:x="289" fg:w="20"/><text x="23.8611%" y="559.50"></text></g><g><title>serde_json::de::from_trait (20 samples, 1.63%)</title><rect x="23.6111%" y="533" width="1.6340%" height="15" fill="rgb(219,183,54)" fg:x="289" fg:w="20"/><text x="23.8611%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (20 samples, 1.63%)</title><rect x="23.6111%" y="517" width="1.6340%" height="15" fill="rgb(216,185,54)" fg:x="289" fg:w="20"/><text x="23.8611%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (20 samples, 1.63%)</title><rect x="23.6111%" y="501" width="1.6340%" height="15" fill="rgb(254,217,39)" fg:x="289" fg:w="20"/><text x="23.8611%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.1634%" y="485" width="0.0817%" height="15" fill="rgb(240,178,23)" fg:x="308" fg:w="1"/><text x="25.4134%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="25.1634%" y="469" width="0.0817%" height="15" fill="rgb(218,11,47)" fg:x="308" fg:w="1"/><text x="25.4134%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.1634%" y="453" width="0.0817%" height="15" fill="rgb(218,51,51)" fg:x="308" fg:w="1"/><text x="25.4134%" y="463.50"></text></g><g><title>engine::session::Session::close (99 samples, 8.09%)</title><rect x="17.2386%" y="661" width="8.0882%" height="15" fill="rgb(238,126,27)" fg:x="211" fg:w="99"/><text x="17.4886%" y="671.50">engine::ses..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="25.2451%" y="645" width="0.0817%" height="15" fill="rgb(249,202,22)" fg:x="309" fg:w="1"/><text x="25.4951%" y="655.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="25.2451%" y="629" width="0.0817%" height="15" fill="rgb(254,195,49)" fg:x="309" fg:w="1"/><text x="25.4951%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="25.2451%" y="613" width="0.0817%" height="15" fill="rgb(208,123,14)" fg:x="309" fg:w="1"/><text x="25.4951%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="25.2451%" y="597" width="0.0817%" height="15" fill="rgb(224,200,8)" fg:x="309" fg:w="1"/><text x="25.4951%" y="607.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="25.2451%" y="581" width="0.0817%" height="15" fill="rgb(217,61,36)" fg:x="309" fg:w="1"/><text x="25.4951%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="25.4085%" y="533" width="0.3268%" height="15" fill="rgb(206,35,45)" fg:x="311" fg:w="4"/><text x="25.6585%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.5719%" y="517" width="0.1634%" height="15" fill="rgb(217,65,33)" fg:x="313" fg:w="2"/><text x="25.8219%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.5719%" y="501" width="0.1634%" height="15" fill="rgb(222,158,48)" fg:x="313" fg:w="2"/><text x="25.8219%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="25.5719%" y="485" width="0.1634%" height="15" fill="rgb(254,2,54)" fg:x="313" fg:w="2"/><text x="25.8219%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="25.5719%" y="469" width="0.1634%" height="15" fill="rgb(250,143,38)" fg:x="313" fg:w="2"/><text x="25.8219%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.6536%" y="453" width="0.0817%" height="15" fill="rgb(248,25,0)" fg:x="314" fg:w="1"/><text x="25.9036%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7353%" y="469" width="0.0817%" height="15" fill="rgb(206,152,27)" fg:x="315" fg:w="1"/><text x="25.9853%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7353%" y="453" width="0.0817%" height="15" fill="rgb(240,77,30)" fg:x="315" fg:w="1"/><text x="25.9853%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7353%" y="437" width="0.0817%" height="15" fill="rgb(231,5,3)" fg:x="315" fg:w="1"/><text x="25.9853%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7353%" y="421" width="0.0817%" height="15" fill="rgb(207,226,32)" fg:x="315" fg:w="1"/><text x="25.9853%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.7353%" y="405" width="0.0817%" height="15" fill="rgb(222,207,47)" fg:x="315" fg:w="1"/><text x="25.9853%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7353%" y="389" width="0.0817%" height="15" fill="rgb(229,115,45)" fg:x="315" fg:w="1"/><text x="25.9853%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.7353%" y="373" width="0.0817%" height="15" fill="rgb(224,191,6)" fg:x="315" fg:w="1"/><text x="25.9853%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.7353%" y="357" width="0.0817%" height="15" fill="rgb(230,227,24)" fg:x="315" fg:w="1"/><text x="25.9853%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.7353%" y="341" width="0.0817%" height="15" fill="rgb(228,80,19)" fg:x="315" fg:w="1"/><text x="25.9853%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.7353%" y="325" width="0.0817%" height="15" fill="rgb(247,229,0)" fg:x="315" fg:w="1"/><text x="25.9853%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.7353%" y="309" width="0.0817%" height="15" fill="rgb(237,194,15)" fg:x="315" fg:w="1"/><text x="25.9853%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.7353%" y="293" width="0.0817%" height="15" fill="rgb(219,203,20)" fg:x="315" fg:w="1"/><text x="25.9853%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.7353%" y="277" width="0.0817%" height="15" fill="rgb(234,128,8)" fg:x="315" fg:w="1"/><text x="25.9853%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.7353%" y="261" width="0.0817%" height="15" fill="rgb(248,202,8)" fg:x="315" fg:w="1"/><text x="25.9853%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.7353%" y="245" width="0.0817%" height="15" fill="rgb(206,104,37)" fg:x="315" fg:w="1"/><text x="25.9853%" y="255.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.7353%" y="229" width="0.0817%" height="15" fill="rgb(223,8,27)" fg:x="315" fg:w="1"/><text x="25.9853%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.7353%" y="213" width="0.0817%" height="15" fill="rgb(216,217,28)" fg:x="315" fg:w="1"/><text x="25.9853%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="25.8170%" y="469" width="0.0817%" height="15" fill="rgb(249,199,1)" fg:x="316" fg:w="1"/><text x="26.0670%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="25.8170%" y="453" width="0.0817%" height="15" fill="rgb(240,85,17)" fg:x="316" fg:w="1"/><text x="26.0670%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="25.8170%" y="437" width="0.0817%" height="15" fill="rgb(206,108,45)" fg:x="316" fg:w="1"/><text x="26.0670%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.8170%" y="421" width="0.0817%" height="15" fill="rgb(245,210,41)" fg:x="316" fg:w="1"/><text x="26.0670%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.8170%" y="405" width="0.0817%" height="15" fill="rgb(206,13,37)" fg:x="316" fg:w="1"/><text x="26.0670%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="25.8170%" y="389" width="0.0817%" height="15" fill="rgb(250,61,18)" fg:x="316" fg:w="1"/><text x="26.0670%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.8170%" y="373" width="0.0817%" height="15" fill="rgb(235,172,48)" fg:x="316" fg:w="1"/><text x="26.0670%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="25.8170%" y="357" width="0.0817%" height="15" fill="rgb(249,201,17)" fg:x="316" fg:w="1"/><text x="26.0670%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="25.8170%" y="341" width="0.0817%" height="15" fill="rgb(219,208,6)" fg:x="316" fg:w="1"/><text x="26.0670%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="25.8170%" y="325" width="0.0817%" height="15" fill="rgb(248,31,23)" fg:x="316" fg:w="1"/><text x="26.0670%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="25.8170%" y="309" width="0.0817%" height="15" fill="rgb(245,15,42)" fg:x="316" fg:w="1"/><text x="26.0670%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.8170%" y="293" width="0.0817%" height="15" fill="rgb(222,217,39)" fg:x="316" fg:w="1"/><text x="26.0670%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="25.8170%" y="277" width="0.0817%" height="15" fill="rgb(210,219,27)" fg:x="316" fg:w="1"/><text x="26.0670%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="25.8170%" y="261" width="0.0817%" height="15" fill="rgb(252,166,36)" fg:x="316" fg:w="1"/><text x="26.0670%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="25.8170%" y="245" width="0.0817%" height="15" fill="rgb(245,132,34)" fg:x="316" fg:w="1"/><text x="26.0670%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="25.8170%" y="229" width="0.0817%" height="15" fill="rgb(236,54,3)" fg:x="316" fg:w="1"/><text x="26.0670%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="25.8170%" y="213" width="0.0817%" height="15" fill="rgb(241,173,43)" fg:x="316" fg:w="1"/><text x="26.0670%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="25.8170%" y="197" width="0.0817%" height="15" fill="rgb(215,190,9)" fg:x="316" fg:w="1"/><text x="26.0670%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="25.8170%" y="181" width="0.0817%" height="15" fill="rgb(242,101,16)" fg:x="316" fg:w="1"/><text x="26.0670%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.8987%" y="341" width="0.0817%" height="15" fill="rgb(223,190,21)" fg:x="317" fg:w="1"/><text x="26.1487%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.8987%" y="325" width="0.0817%" height="15" fill="rgb(215,228,25)" fg:x="317" fg:w="1"/><text x="26.1487%" y="335.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.8987%" y="309" width="0.0817%" height="15" fill="rgb(225,36,22)" fg:x="317" fg:w="1"/><text x="26.1487%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.8987%" y="293" width="0.0817%" height="15" fill="rgb(251,106,46)" fg:x="317" fg:w="1"/><text x="26.1487%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="25.8987%" y="277" width="0.0817%" height="15" fill="rgb(208,90,1)" fg:x="317" fg:w="1"/><text x="26.1487%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.8987%" y="261" width="0.0817%" height="15" fill="rgb(243,10,4)" fg:x="317" fg:w="1"/><text x="26.1487%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.8987%" y="245" width="0.0817%" height="15" fill="rgb(212,137,27)" fg:x="317" fg:w="1"/><text x="26.1487%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8987%" y="229" width="0.0817%" height="15" fill="rgb(231,220,49)" fg:x="317" fg:w="1"/><text x="26.1487%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.8987%" y="373" width="0.1634%" height="15" fill="rgb(237,96,20)" fg:x="317" fg:w="2"/><text x="26.1487%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="25.8987%" y="357" width="0.1634%" height="15" fill="rgb(239,229,30)" fg:x="317" fg:w="2"/><text x="26.1487%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="25.9804%" y="341" width="0.0817%" height="15" fill="rgb(219,65,33)" fg:x="318" fg:w="1"/><text x="26.2304%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.9804%" y="325" width="0.0817%" height="15" fill="rgb(243,134,7)" fg:x="318" fg:w="1"/><text x="26.2304%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="25.9804%" y="309" width="0.0817%" height="15" fill="rgb(216,177,54)" fg:x="318" fg:w="1"/><text x="26.2304%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="26.0621%" y="373" width="0.0817%" height="15" fill="rgb(211,160,20)" fg:x="319" fg:w="1"/><text x="26.3121%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="26.0621%" y="357" width="0.0817%" height="15" fill="rgb(239,85,39)" fg:x="319" fg:w="1"/><text x="26.3121%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="26.2255%" y="325" width="0.0817%" height="15" fill="rgb(232,125,22)" fg:x="321" fg:w="1"/><text x="26.4755%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="26.2255%" y="309" width="0.0817%" height="15" fill="rgb(244,57,34)" fg:x="321" fg:w="1"/><text x="26.4755%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.2255%" y="293" width="0.0817%" height="15" fill="rgb(214,203,32)" fg:x="321" fg:w="1"/><text x="26.4755%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.2255%" y="277" width="0.0817%" height="15" fill="rgb(207,58,43)" fg:x="321" fg:w="1"/><text x="26.4755%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="26.2255%" y="261" width="0.0817%" height="15" fill="rgb(215,193,15)" fg:x="321" fg:w="1"/><text x="26.4755%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.2255%" y="245" width="0.0817%" height="15" fill="rgb(232,15,44)" fg:x="321" fg:w="1"/><text x="26.4755%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.2255%" y="229" width="0.0817%" height="15" fill="rgb(212,3,48)" fg:x="321" fg:w="1"/><text x="26.4755%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="26.2255%" y="213" width="0.0817%" height="15" fill="rgb(218,128,7)" fg:x="321" fg:w="1"/><text x="26.4755%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.2255%" y="197" width="0.0817%" height="15" fill="rgb(226,216,39)" fg:x="321" fg:w="1"/><text x="26.4755%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.2255%" y="181" width="0.0817%" height="15" fill="rgb(243,47,51)" fg:x="321" fg:w="1"/><text x="26.4755%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.2255%" y="165" width="0.0817%" height="15" fill="rgb(241,183,40)" fg:x="321" fg:w="1"/><text x="26.4755%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="26.2255%" y="341" width="0.1634%" height="15" fill="rgb(231,217,32)" fg:x="321" fg:w="2"/><text x="26.4755%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.3072%" y="325" width="0.0817%" height="15" fill="rgb(229,61,38)" fg:x="322" fg:w="1"/><text x="26.5572%" y="335.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="26.3072%" y="309" width="0.0817%" height="15" fill="rgb(225,210,5)" fg:x="322" fg:w="1"/><text x="26.5572%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.57%)</title><rect x="25.8987%" y="469" width="0.5719%" height="15" fill="rgb(231,79,45)" fg:x="317" fg:w="7"/><text x="26.1487%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="25.8987%" y="453" width="0.5719%" height="15" fill="rgb(224,100,7)" fg:x="317" fg:w="7"/><text x="26.1487%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="25.8987%" y="437" width="0.5719%" height="15" fill="rgb(241,198,18)" fg:x="317" fg:w="7"/><text x="26.1487%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.57%)</title><rect x="25.8987%" y="421" width="0.5719%" height="15" fill="rgb(252,97,53)" fg:x="317" fg:w="7"/><text x="26.1487%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="25.8987%" y="405" width="0.5719%" height="15" fill="rgb(220,88,7)" fg:x="317" fg:w="7"/><text x="26.1487%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.57%)</title><rect x="25.8987%" y="389" width="0.5719%" height="15" fill="rgb(213,176,14)" fg:x="317" fg:w="7"/><text x="26.1487%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="26.1438%" y="373" width="0.3268%" height="15" fill="rgb(246,73,7)" fg:x="320" fg:w="4"/><text x="26.3938%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="26.1438%" y="357" width="0.3268%" height="15" fill="rgb(245,64,36)" fg:x="320" fg:w="4"/><text x="26.3938%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.3889%" y="341" width="0.0817%" height="15" fill="rgb(245,80,10)" fg:x="323" fg:w="1"/><text x="26.6389%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.4706%" y="341" width="0.0817%" height="15" fill="rgb(232,107,50)" fg:x="324" fg:w="1"/><text x="26.7206%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.4706%" y="325" width="0.0817%" height="15" fill="rgb(253,3,0)" fg:x="324" fg:w="1"/><text x="26.7206%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="26.4706%" y="309" width="0.0817%" height="15" fill="rgb(212,99,53)" fg:x="324" fg:w="1"/><text x="26.7206%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="26.4706%" y="293" width="0.0817%" height="15" fill="rgb(249,111,54)" fg:x="324" fg:w="1"/><text x="26.7206%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.5523%" y="341" width="0.0817%" height="15" fill="rgb(249,55,30)" fg:x="325" fg:w="1"/><text x="26.8023%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.5523%" y="325" width="0.0817%" height="15" fill="rgb(237,47,42)" fg:x="325" fg:w="1"/><text x="26.8023%" y="335.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (16 samples, 1.31%)</title><rect x="25.4085%" y="565" width="1.3072%" height="15" fill="rgb(211,20,18)" fg:x="311" fg:w="16"/><text x="25.6585%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (16 samples, 1.31%)</title><rect x="25.4085%" y="549" width="1.3072%" height="15" fill="rgb(231,203,46)" fg:x="311" fg:w="16"/><text x="25.6585%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.98%)</title><rect x="25.7353%" y="533" width="0.9804%" height="15" fill="rgb(237,142,3)" fg:x="315" fg:w="12"/><text x="25.9853%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.98%)</title><rect x="25.7353%" y="517" width="0.9804%" height="15" fill="rgb(241,107,1)" fg:x="315" fg:w="12"/><text x="25.9853%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.98%)</title><rect x="25.7353%" y="501" width="0.9804%" height="15" fill="rgb(229,83,13)" fg:x="315" fg:w="12"/><text x="25.9853%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (12 samples, 0.98%)</title><rect x="25.7353%" y="485" width="0.9804%" height="15" fill="rgb(241,91,40)" fg:x="315" fg:w="12"/><text x="25.9853%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="26.4706%" y="469" width="0.2451%" height="15" fill="rgb(225,3,45)" fg:x="324" fg:w="3"/><text x="26.7206%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="26.4706%" y="453" width="0.2451%" height="15" fill="rgb(244,223,14)" fg:x="324" fg:w="3"/><text x="26.7206%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="26.4706%" y="437" width="0.2451%" height="15" fill="rgb(224,124,37)" fg:x="324" fg:w="3"/><text x="26.7206%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="26.4706%" y="421" width="0.2451%" height="15" fill="rgb(251,171,30)" fg:x="324" fg:w="3"/><text x="26.7206%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="26.4706%" y="405" width="0.2451%" height="15" fill="rgb(236,46,54)" fg:x="324" fg:w="3"/><text x="26.7206%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="26.4706%" y="389" width="0.2451%" height="15" fill="rgb(245,213,5)" fg:x="324" fg:w="3"/><text x="26.7206%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="26.4706%" y="373" width="0.2451%" height="15" fill="rgb(230,144,27)" fg:x="324" fg:w="3"/><text x="26.7206%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="26.4706%" y="357" width="0.2451%" height="15" fill="rgb(220,86,6)" fg:x="324" fg:w="3"/><text x="26.7206%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.6340%" y="341" width="0.0817%" height="15" fill="rgb(240,20,13)" fg:x="326" fg:w="1"/><text x="26.8840%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.6340%" y="325" width="0.0817%" height="15" fill="rgb(217,89,34)" fg:x="326" fg:w="1"/><text x="26.8840%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.6340%" y="309" width="0.0817%" height="15" fill="rgb(229,13,5)" fg:x="326" fg:w="1"/><text x="26.8840%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8791%" y="325" width="0.0817%" height="15" fill="rgb(244,67,35)" fg:x="329" fg:w="1"/><text x="27.1291%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.9608%" y="293" width="0.0817%" height="15" fill="rgb(221,40,2)" fg:x="330" fg:w="1"/><text x="27.2108%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.33%)</title><rect x="26.7974%" y="357" width="0.3268%" height="15" fill="rgb(237,157,21)" fg:x="328" fg:w="4"/><text x="27.0474%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="26.7974%" y="341" width="0.3268%" height="15" fill="rgb(222,94,11)" fg:x="328" fg:w="4"/><text x="27.0474%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.9608%" y="325" width="0.1634%" height="15" fill="rgb(249,113,6)" fg:x="330" fg:w="2"/><text x="27.2108%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="26.9608%" y="309" width="0.1634%" height="15" fill="rgb(238,137,36)" fg:x="330" fg:w="2"/><text x="27.2108%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.0425%" y="293" width="0.0817%" height="15" fill="rgb(210,102,26)" fg:x="331" fg:w="1"/><text x="27.2925%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="27.1242%" y="325" width="0.0817%" height="15" fill="rgb(218,30,30)" fg:x="332" fg:w="1"/><text x="27.3742%" y="335.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (6 samples, 0.49%)</title><rect x="26.7974%" y="405" width="0.4902%" height="15" fill="rgb(214,67,26)" fg:x="328" fg:w="6"/><text x="27.0474%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (6 samples, 0.49%)</title><rect x="26.7974%" y="389" width="0.4902%" height="15" fill="rgb(251,9,53)" fg:x="328" fg:w="6"/><text x="27.0474%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="26.7974%" y="373" width="0.4902%" height="15" fill="rgb(228,204,25)" fg:x="328" fg:w="6"/><text x="27.0474%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="27.1242%" y="357" width="0.1634%" height="15" fill="rgb(207,153,8)" fg:x="332" fg:w="2"/><text x="27.3742%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="27.1242%" y="341" width="0.1634%" height="15" fill="rgb(242,9,16)" fg:x="332" fg:w="2"/><text x="27.3742%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="27.2059%" y="325" width="0.0817%" height="15" fill="rgb(217,211,10)" fg:x="333" fg:w="1"/><text x="27.4559%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.2059%" y="309" width="0.0817%" height="15" fill="rgb(219,228,52)" fg:x="333" fg:w="1"/><text x="27.4559%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.2059%" y="293" width="0.0817%" height="15" fill="rgb(231,92,29)" fg:x="333" fg:w="1"/><text x="27.4559%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="27.2059%" y="277" width="0.0817%" height="15" fill="rgb(232,8,23)" fg:x="333" fg:w="1"/><text x="27.4559%" y="287.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (7 samples, 0.57%)</title><rect x="26.7974%" y="421" width="0.5719%" height="15" fill="rgb(216,211,34)" fg:x="328" fg:w="7"/><text x="27.0474%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="27.2876%" y="405" width="0.0817%" height="15" fill="rgb(236,151,0)" fg:x="334" fg:w="1"/><text x="27.5376%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="27.2876%" y="389" width="0.0817%" height="15" fill="rgb(209,168,3)" fg:x="334" fg:w="1"/><text x="27.5376%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.2876%" y="373" width="0.0817%" height="15" fill="rgb(208,129,28)" fg:x="334" fg:w="1"/><text x="27.5376%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="27.7778%" y="389" width="0.0817%" height="15" fill="rgb(229,78,22)" fg:x="340" fg:w="1"/><text x="28.0278%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.7778%" y="373" width="0.0817%" height="15" fill="rgb(228,187,13)" fg:x="340" fg:w="1"/><text x="28.0278%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.7778%" y="357" width="0.0817%" height="15" fill="rgb(240,119,24)" fg:x="340" fg:w="1"/><text x="28.0278%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.7778%" y="341" width="0.0817%" height="15" fill="rgb(209,194,42)" fg:x="340" fg:w="1"/><text x="28.0278%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.7778%" y="325" width="0.0817%" height="15" fill="rgb(247,200,46)" fg:x="340" fg:w="1"/><text x="28.0278%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="27.7778%" y="309" width="0.0817%" height="15" fill="rgb(218,76,16)" fg:x="340" fg:w="1"/><text x="28.0278%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="27.7778%" y="293" width="0.0817%" height="15" fill="rgb(225,21,48)" fg:x="340" fg:w="1"/><text x="28.0278%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="27.7778%" y="277" width="0.0817%" height="15" fill="rgb(239,223,50)" fg:x="340" fg:w="1"/><text x="28.0278%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="27.8595%" y="389" width="0.0817%" height="15" fill="rgb(244,45,21)" fg:x="341" fg:w="1"/><text x="28.1095%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="27.8595%" y="373" width="0.0817%" height="15" fill="rgb(232,33,43)" fg:x="341" fg:w="1"/><text x="28.1095%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="27.8595%" y="357" width="0.0817%" height="15" fill="rgb(209,8,3)" fg:x="341" fg:w="1"/><text x="28.1095%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="27.8595%" y="341" width="0.0817%" height="15" fill="rgb(214,25,53)" fg:x="341" fg:w="1"/><text x="28.1095%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="27.8595%" y="325" width="0.0817%" height="15" fill="rgb(254,186,54)" fg:x="341" fg:w="1"/><text x="28.1095%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.8595%" y="309" width="0.0817%" height="15" fill="rgb(208,174,49)" fg:x="341" fg:w="1"/><text x="28.1095%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.8595%" y="293" width="0.0817%" height="15" fill="rgb(233,191,51)" fg:x="341" fg:w="1"/><text x="28.1095%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.0229%" y="373" width="0.0817%" height="15" fill="rgb(222,134,10)" fg:x="343" fg:w="1"/><text x="28.2729%" y="383.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="28.1046%" y="373" width="0.0817%" height="15" fill="rgb(230,226,20)" fg:x="344" fg:w="1"/><text x="28.3546%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="28.1046%" y="357" width="0.0817%" height="15" fill="rgb(251,111,25)" fg:x="344" fg:w="1"/><text x="28.3546%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="28.1046%" y="341" width="0.0817%" height="15" fill="rgb(224,40,46)" fg:x="344" fg:w="1"/><text x="28.3546%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.1863%" y="341" width="0.1634%" height="15" fill="rgb(236,108,47)" fg:x="345" fg:w="2"/><text x="28.4363%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.1863%" y="325" width="0.1634%" height="15" fill="rgb(234,93,0)" fg:x="345" fg:w="2"/><text x="28.4363%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="28.1863%" y="309" width="0.1634%" height="15" fill="rgb(224,213,32)" fg:x="345" fg:w="2"/><text x="28.4363%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.1863%" y="293" width="0.1634%" height="15" fill="rgb(251,11,48)" fg:x="345" fg:w="2"/><text x="28.4363%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="28.1863%" y="277" width="0.1634%" height="15" fill="rgb(236,173,5)" fg:x="345" fg:w="2"/><text x="28.4363%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="28.1863%" y="261" width="0.1634%" height="15" fill="rgb(230,95,12)" fg:x="345" fg:w="2"/><text x="28.4363%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="28.1863%" y="245" width="0.1634%" height="15" fill="rgb(232,209,1)" fg:x="345" fg:w="2"/><text x="28.4363%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="28.1863%" y="229" width="0.1634%" height="15" fill="rgb(232,6,1)" fg:x="345" fg:w="2"/><text x="28.4363%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.1863%" y="213" width="0.1634%" height="15" fill="rgb(210,224,50)" fg:x="345" fg:w="2"/><text x="28.4363%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="28.1863%" y="197" width="0.1634%" height="15" fill="rgb(228,127,35)" fg:x="345" fg:w="2"/><text x="28.4363%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="28.1863%" y="181" width="0.1634%" height="15" fill="rgb(245,102,45)" fg:x="345" fg:w="2"/><text x="28.4363%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="28.1863%" y="165" width="0.1634%" height="15" fill="rgb(214,1,49)" fg:x="345" fg:w="2"/><text x="28.4363%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="28.1863%" y="149" width="0.1634%" height="15" fill="rgb(226,163,40)" fg:x="345" fg:w="2"/><text x="28.4363%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="28.1863%" y="133" width="0.1634%" height="15" fill="rgb(239,212,28)" fg:x="345" fg:w="2"/><text x="28.4363%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="28.1863%" y="117" width="0.1634%" height="15" fill="rgb(220,20,13)" fg:x="345" fg:w="2"/><text x="28.4363%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (7 samples, 0.57%)</title><rect x="27.9412%" y="389" width="0.5719%" height="15" fill="rgb(210,164,35)" fg:x="342" fg:w="7"/><text x="28.1912%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="28.1863%" y="373" width="0.3268%" height="15" fill="rgb(248,109,41)" fg:x="345" fg:w="4"/><text x="28.4363%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="28.1863%" y="357" width="0.3268%" height="15" fill="rgb(238,23,50)" fg:x="345" fg:w="4"/><text x="28.4363%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="28.3497%" y="341" width="0.1634%" height="15" fill="rgb(211,48,49)" fg:x="347" fg:w="2"/><text x="28.5997%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="28.3497%" y="325" width="0.1634%" height="15" fill="rgb(223,36,21)" fg:x="347" fg:w="2"/><text x="28.5997%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="28.4314%" y="309" width="0.0817%" height="15" fill="rgb(207,123,46)" fg:x="348" fg:w="1"/><text x="28.6814%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.4314%" y="293" width="0.0817%" height="15" fill="rgb(240,218,32)" fg:x="348" fg:w="1"/><text x="28.6814%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="28.4314%" y="277" width="0.0817%" height="15" fill="rgb(252,5,43)" fg:x="348" fg:w="1"/><text x="28.6814%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="28.4314%" y="261" width="0.0817%" height="15" fill="rgb(252,84,19)" fg:x="348" fg:w="1"/><text x="28.6814%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.5948%" y="373" width="0.0817%" height="15" fill="rgb(243,152,39)" fg:x="350" fg:w="1"/><text x="28.8448%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="28.6765%" y="341" width="0.2451%" height="15" fill="rgb(234,160,15)" fg:x="351" fg:w="3"/><text x="28.9265%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="28.6765%" y="325" width="0.2451%" height="15" fill="rgb(237,34,20)" fg:x="351" fg:w="3"/><text x="28.9265%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="28.8399%" y="309" width="0.0817%" height="15" fill="rgb(229,97,13)" fg:x="353" fg:w="1"/><text x="29.0899%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.0850%" y="277" width="0.0817%" height="15" fill="rgb(234,71,50)" fg:x="356" fg:w="1"/><text x="29.3350%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.0850%" y="261" width="0.0817%" height="15" fill="rgb(253,155,4)" fg:x="356" fg:w="1"/><text x="29.3350%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.1667%" y="277" width="0.0817%" height="15" fill="rgb(222,185,37)" fg:x="357" fg:w="1"/><text x="29.4167%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="29.1667%" y="261" width="0.0817%" height="15" fill="rgb(251,177,13)" fg:x="357" fg:w="1"/><text x="29.4167%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (10 samples, 0.82%)</title><rect x="28.5131%" y="389" width="0.8170%" height="15" fill="rgb(250,179,40)" fg:x="349" fg:w="10"/><text x="28.7631%" y="399.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="28.6765%" y="373" width="0.6536%" height="15" fill="rgb(242,44,2)" fg:x="351" fg:w="8"/><text x="28.9265%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.65%)</title><rect x="28.6765%" y="357" width="0.6536%" height="15" fill="rgb(216,177,13)" fg:x="351" fg:w="8"/><text x="28.9265%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (5 samples, 0.41%)</title><rect x="28.9216%" y="341" width="0.4085%" height="15" fill="rgb(216,106,43)" fg:x="354" fg:w="5"/><text x="29.1716%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="28.9216%" y="325" width="0.4085%" height="15" fill="rgb(216,183,2)" fg:x="354" fg:w="5"/><text x="29.1716%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.33%)</title><rect x="29.0033%" y="309" width="0.3268%" height="15" fill="rgb(249,75,3)" fg:x="355" fg:w="4"/><text x="29.2533%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="29.0033%" y="293" width="0.3268%" height="15" fill="rgb(219,67,39)" fg:x="355" fg:w="4"/><text x="29.2533%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="29.2484%" y="277" width="0.0817%" height="15" fill="rgb(253,228,2)" fg:x="358" fg:w="1"/><text x="29.4984%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.2484%" y="261" width="0.0817%" height="15" fill="rgb(235,138,27)" fg:x="358" fg:w="1"/><text x="29.4984%" y="271.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="29.3301%" y="357" width="0.0817%" height="15" fill="rgb(236,97,51)" fg:x="359" fg:w="1"/><text x="29.5801%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4935%" y="309" width="0.0817%" height="15" fill="rgb(240,80,30)" fg:x="361" fg:w="1"/><text x="29.7435%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.4935%" y="293" width="0.0817%" height="15" fill="rgb(230,178,19)" fg:x="361" fg:w="1"/><text x="29.7435%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4935%" y="277" width="0.0817%" height="15" fill="rgb(210,190,27)" fg:x="361" fg:w="1"/><text x="29.7435%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.4935%" y="261" width="0.0817%" height="15" fill="rgb(222,107,31)" fg:x="361" fg:w="1"/><text x="29.7435%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.4935%" y="245" width="0.0817%" height="15" fill="rgb(216,127,34)" fg:x="361" fg:w="1"/><text x="29.7435%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.4935%" y="229" width="0.0817%" height="15" fill="rgb(234,116,52)" fg:x="361" fg:w="1"/><text x="29.7435%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.4935%" y="213" width="0.0817%" height="15" fill="rgb(222,124,15)" fg:x="361" fg:w="1"/><text x="29.7435%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.4935%" y="197" width="0.0817%" height="15" fill="rgb(231,179,28)" fg:x="361" fg:w="1"/><text x="29.7435%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.4935%" y="181" width="0.0817%" height="15" fill="rgb(226,93,45)" fg:x="361" fg:w="1"/><text x="29.7435%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.4935%" y="165" width="0.0817%" height="15" fill="rgb(215,8,51)" fg:x="361" fg:w="1"/><text x="29.7435%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.4935%" y="149" width="0.0817%" height="15" fill="rgb(223,106,5)" fg:x="361" fg:w="1"/><text x="29.7435%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.4935%" y="133" width="0.0817%" height="15" fill="rgb(250,191,5)" fg:x="361" fg:w="1"/><text x="29.7435%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.4935%" y="117" width="0.0817%" height="15" fill="rgb(242,132,44)" fg:x="361" fg:w="1"/><text x="29.7435%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.4935%" y="325" width="0.1634%" height="15" fill="rgb(251,152,29)" fg:x="361" fg:w="2"/><text x="29.7435%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5752%" y="309" width="0.0817%" height="15" fill="rgb(218,179,5)" fg:x="362" fg:w="1"/><text x="29.8252%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.8203%" y="261" width="0.1634%" height="15" fill="rgb(227,67,19)" fg:x="365" fg:w="2"/><text x="30.0703%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="29.9020%" y="245" width="0.0817%" height="15" fill="rgb(233,119,31)" fg:x="366" fg:w="1"/><text x="30.1520%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.9837%" y="261" width="0.0817%" height="15" fill="rgb(241,120,22)" fg:x="367" fg:w="1"/><text x="30.2337%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::gid (11 samples, 0.90%)</title><rect x="29.3301%" y="389" width="0.8987%" height="15" fill="rgb(224,102,30)" fg:x="359" fg:w="11"/><text x="29.5801%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (11 samples, 0.90%)</title><rect x="29.3301%" y="373" width="0.8987%" height="15" fill="rgb(210,164,37)" fg:x="359" fg:w="11"/><text x="29.5801%" y="383.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.82%)</title><rect x="29.4118%" y="357" width="0.8170%" height="15" fill="rgb(226,191,16)" fg:x="360" fg:w="10"/><text x="29.6618%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (10 samples, 0.82%)</title><rect x="29.4118%" y="341" width="0.8170%" height="15" fill="rgb(214,40,45)" fg:x="360" fg:w="10"/><text x="29.6618%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (7 samples, 0.57%)</title><rect x="29.6569%" y="325" width="0.5719%" height="15" fill="rgb(244,29,26)" fg:x="363" fg:w="7"/><text x="29.9069%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="29.6569%" y="309" width="0.5719%" height="15" fill="rgb(216,16,5)" fg:x="363" fg:w="7"/><text x="29.9069%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (6 samples, 0.49%)</title><rect x="29.7386%" y="293" width="0.4902%" height="15" fill="rgb(249,76,35)" fg:x="364" fg:w="6"/><text x="29.9886%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="29.7386%" y="277" width="0.4902%" height="15" fill="rgb(207,11,44)" fg:x="364" fg:w="6"/><text x="29.9886%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="30.0654%" y="261" width="0.1634%" height="15" fill="rgb(228,190,49)" fg:x="368" fg:w="2"/><text x="30.3154%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.0654%" y="245" width="0.1634%" height="15" fill="rgb(214,173,12)" fg:x="368" fg:w="2"/><text x="30.3154%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="30.3105%" y="309" width="0.0817%" height="15" fill="rgb(218,26,35)" fg:x="371" fg:w="1"/><text x="30.5605%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.5556%" y="213" width="0.0817%" height="15" fill="rgb(220,200,19)" fg:x="374" fg:w="1"/><text x="30.8056%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="30.5556%" y="229" width="0.1634%" height="15" fill="rgb(239,95,49)" fg:x="374" fg:w="2"/><text x="30.8056%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="30.6373%" y="213" width="0.0817%" height="15" fill="rgb(235,85,53)" fg:x="375" fg:w="1"/><text x="30.8873%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="30.3922%" y="309" width="0.4902%" height="15" fill="rgb(233,133,31)" fg:x="372" fg:w="6"/><text x="30.6422%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="30.4739%" y="293" width="0.4085%" height="15" fill="rgb(218,25,20)" fg:x="373" fg:w="5"/><text x="30.7239%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.41%)</title><rect x="30.4739%" y="277" width="0.4085%" height="15" fill="rgb(252,210,38)" fg:x="373" fg:w="5"/><text x="30.7239%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.41%)</title><rect x="30.4739%" y="261" width="0.4085%" height="15" fill="rgb(242,134,21)" fg:x="373" fg:w="5"/><text x="30.7239%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="30.4739%" y="245" width="0.4085%" height="15" fill="rgb(213,28,48)" fg:x="373" fg:w="5"/><text x="30.7239%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="30.7190%" y="229" width="0.1634%" height="15" fill="rgb(250,196,2)" fg:x="376" fg:w="2"/><text x="30.9690%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="30.8007%" y="213" width="0.0817%" height="15" fill="rgb(227,5,17)" fg:x="377" fg:w="1"/><text x="31.0507%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;str&gt;&gt; (1 samples, 0.08%)</title><rect x="30.8824%" y="309" width="0.0817%" height="15" fill="rgb(221,226,24)" fg:x="378" fg:w="1"/><text x="31.1324%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.0458%" y="261" width="0.0817%" height="15" fill="rgb(211,5,48)" fg:x="380" fg:w="1"/><text x="31.2958%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.0458%" y="245" width="0.0817%" height="15" fill="rgb(219,150,6)" fg:x="380" fg:w="1"/><text x="31.2958%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.25%)</title><rect x="30.9641%" y="309" width="0.2451%" height="15" fill="rgb(251,46,16)" fg:x="379" fg:w="3"/><text x="31.2141%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="31.0458%" y="293" width="0.1634%" height="15" fill="rgb(220,204,40)" fg:x="380" fg:w="2"/><text x="31.2958%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="31.0458%" y="277" width="0.1634%" height="15" fill="rgb(211,85,2)" fg:x="380" fg:w="2"/><text x="31.2958%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="31.1275%" y="261" width="0.0817%" height="15" fill="rgb(229,17,7)" fg:x="381" fg:w="1"/><text x="31.3775%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="31.1275%" y="245" width="0.0817%" height="15" fill="rgb(239,72,28)" fg:x="381" fg:w="1"/><text x="31.3775%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1275%" y="229" width="0.0817%" height="15" fill="rgb(230,47,54)" fg:x="381" fg:w="1"/><text x="31.3775%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="31.2908%" y="261" width="0.0817%" height="15" fill="rgb(214,50,8)" fg:x="383" fg:w="1"/><text x="31.5408%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.2908%" y="245" width="0.0817%" height="15" fill="rgb(216,198,43)" fg:x="383" fg:w="1"/><text x="31.5408%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.2908%" y="229" width="0.0817%" height="15" fill="rgb(234,20,35)" fg:x="383" fg:w="1"/><text x="31.5408%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.5359%" y="245" width="0.0817%" height="15" fill="rgb(254,45,19)" fg:x="386" fg:w="1"/><text x="31.7859%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.06%)</title><rect x="31.6176%" y="245" width="1.0621%" height="15" fill="rgb(219,14,44)" fg:x="387" fg:w="13"/><text x="31.8676%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.06%)</title><rect x="31.6176%" y="229" width="1.0621%" height="15" fill="rgb(217,220,26)" fg:x="387" fg:w="13"/><text x="31.8676%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5980%" y="213" width="0.0817%" height="15" fill="rgb(213,158,28)" fg:x="399" fg:w="1"/><text x="32.8480%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::error::BuildError&gt; (1 samples, 0.08%)</title><rect x="32.6797%" y="245" width="0.0817%" height="15" fill="rgb(252,51,52)" fg:x="400" fg:w="1"/><text x="32.9297%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="33.2516%" y="181" width="0.1634%" height="15" fill="rgb(246,89,16)" fg:x="407" fg:w="2"/><text x="33.5016%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="33.3333%" y="165" width="0.0817%" height="15" fill="rgb(216,158,49)" fg:x="408" fg:w="1"/><text x="33.5833%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.3333%" y="149" width="0.0817%" height="15" fill="rgb(236,107,19)" fg:x="408" fg:w="1"/><text x="33.5833%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.3333%" y="133" width="0.0817%" height="15" fill="rgb(228,185,30)" fg:x="408" fg:w="1"/><text x="33.5833%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3333%" y="117" width="0.0817%" height="15" fill="rgb(246,134,8)" fg:x="408" fg:w="1"/><text x="33.5833%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="33.4150%" y="181" width="0.1634%" height="15" fill="rgb(214,143,50)" fg:x="409" fg:w="2"/><text x="33.6650%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="33.4150%" y="165" width="0.1634%" height="15" fill="rgb(228,75,8)" fg:x="409" fg:w="2"/><text x="33.6650%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="33.4967%" y="149" width="0.0817%" height="15" fill="rgb(207,175,4)" fg:x="410" fg:w="1"/><text x="33.7467%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (62 samples, 5.07%)</title><rect x="33.5784%" y="181" width="5.0654%" height="15" fill="rgb(205,108,24)" fg:x="411" fg:w="62"/><text x="33.8284%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (62 samples, 5.07%)</title><rect x="33.5784%" y="165" width="5.0654%" height="15" fill="rgb(244,120,49)" fg:x="411" fg:w="62"/><text x="33.8284%" y="175.50">regex_..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (62 samples, 5.07%)</title><rect x="33.5784%" y="149" width="5.0654%" height="15" fill="rgb(223,47,38)" fg:x="411" fg:w="62"/><text x="33.8284%" y="159.50">alloc:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="38.6438%" y="181" width="0.1634%" height="15" fill="rgb(229,179,11)" fg:x="473" fg:w="2"/><text x="38.8938%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (74 samples, 6.05%)</title><rect x="32.8431%" y="229" width="6.0458%" height="15" fill="rgb(231,122,1)" fg:x="402" fg:w="74"/><text x="33.0931%" y="239.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.96%)</title><rect x="32.9248%" y="213" width="5.9641%" height="15" fill="rgb(245,119,9)" fg:x="403" fg:w="73"/><text x="33.1748%" y="223.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.96%)</title><rect x="32.9248%" y="197" width="5.9641%" height="15" fill="rgb(241,163,25)" fg:x="403" fg:w="73"/><text x="33.1748%" y="207.50">regex_au..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="38.8072%" y="181" width="0.0817%" height="15" fill="rgb(217,214,3)" fg:x="475" fg:w="1"/><text x="39.0572%" y="191.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="39.0523%" y="213" width="0.0817%" height="15" fill="rgb(240,86,28)" fg:x="478" fg:w="1"/><text x="39.3023%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.1340%" y="213" width="0.0817%" height="15" fill="rgb(215,47,9)" fg:x="479" fg:w="1"/><text x="39.3840%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2157%" y="213" width="0.0817%" height="15" fill="rgb(252,25,45)" fg:x="480" fg:w="1"/><text x="39.4657%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="39.2974%" y="213" width="0.0817%" height="15" fill="rgb(251,164,9)" fg:x="481" fg:w="1"/><text x="39.5474%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2974%" y="197" width="0.0817%" height="15" fill="rgb(233,194,0)" fg:x="481" fg:w="1"/><text x="39.5474%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.7059%" y="197" width="0.0817%" height="15" fill="rgb(249,111,24)" fg:x="486" fg:w="1"/><text x="39.9559%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.49%)</title><rect x="39.3791%" y="213" width="0.4902%" height="15" fill="rgb(250,223,3)" fg:x="482" fg:w="6"/><text x="39.6291%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.7876%" y="197" width="0.0817%" height="15" fill="rgb(236,178,37)" fg:x="487" fg:w="1"/><text x="40.0376%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.7876%" y="181" width="0.0817%" height="15" fill="rgb(241,158,50)" fg:x="487" fg:w="1"/><text x="40.0376%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.7876%" y="165" width="0.0817%" height="15" fill="rgb(213,121,41)" fg:x="487" fg:w="1"/><text x="40.0376%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (14 samples, 1.14%)</title><rect x="38.8889%" y="229" width="1.1438%" height="15" fill="rgb(240,92,3)" fg:x="476" fg:w="14"/><text x="39.1389%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="39.8693%" y="213" width="0.1634%" height="15" fill="rgb(205,123,3)" fg:x="488" fg:w="2"/><text x="40.1193%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="40.0327%" y="229" width="0.1634%" height="15" fill="rgb(205,97,47)" fg:x="490" fg:w="2"/><text x="40.2827%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="40.0327%" y="213" width="0.1634%" height="15" fill="rgb(247,152,14)" fg:x="490" fg:w="2"/><text x="40.2827%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (109 samples, 8.91%)</title><rect x="31.3725%" y="261" width="8.9052%" height="15" fill="rgb(248,195,53)" fg:x="384" fg:w="109"/><text x="31.6225%" y="271.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (92 samples, 7.52%)</title><rect x="32.7614%" y="245" width="7.5163%" height="15" fill="rgb(226,201,16)" fg:x="401" fg:w="92"/><text x="33.0114%" y="255.50">regex_auto..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="40.1961%" y="229" width="0.0817%" height="15" fill="rgb(205,98,0)" fg:x="492" fg:w="1"/><text x="40.4461%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="40.1961%" y="213" width="0.0817%" height="15" fill="rgb(214,191,48)" fg:x="492" fg:w="1"/><text x="40.4461%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="40.2778%" y="229" width="0.0817%" height="15" fill="rgb(237,112,39)" fg:x="493" fg:w="1"/><text x="40.5278%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="40.2778%" y="213" width="0.0817%" height="15" fill="rgb(247,203,27)" fg:x="493" fg:w="1"/><text x="40.5278%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.2778%" y="197" width="0.0817%" height="15" fill="rgb(235,124,28)" fg:x="493" fg:w="1"/><text x="40.5278%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.2778%" y="181" width="0.0817%" height="15" fill="rgb(208,207,46)" fg:x="493" fg:w="1"/><text x="40.5278%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2778%" y="165" width="0.0817%" height="15" fill="rgb(234,176,4)" fg:x="493" fg:w="1"/><text x="40.5278%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="40.3595%" y="213" width="0.0817%" height="15" fill="rgb(230,133,28)" fg:x="494" fg:w="1"/><text x="40.6095%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="40.2778%" y="261" width="0.2451%" height="15" fill="rgb(211,137,40)" fg:x="493" fg:w="3"/><text x="40.5278%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="40.2778%" y="245" width="0.2451%" height="15" fill="rgb(254,35,13)" fg:x="493" fg:w="3"/><text x="40.5278%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="40.3595%" y="229" width="0.1634%" height="15" fill="rgb(225,49,51)" fg:x="494" fg:w="2"/><text x="40.6095%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.4412%" y="213" width="0.0817%" height="15" fill="rgb(251,10,15)" fg:x="495" fg:w="1"/><text x="40.6912%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="40.6046%" y="213" width="0.0817%" height="15" fill="rgb(228,207,15)" fg:x="497" fg:w="1"/><text x="40.8546%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="40.5229%" y="229" width="0.2451%" height="15" fill="rgb(241,99,19)" fg:x="496" fg:w="3"/><text x="40.7729%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="40.6863%" y="213" width="0.0817%" height="15" fill="rgb(207,104,49)" fg:x="498" fg:w="1"/><text x="40.9363%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (119 samples, 9.72%)</title><rect x="31.2092%" y="309" width="9.7222%" height="15" fill="rgb(234,99,18)" fg:x="382" fg:w="119"/><text x="31.4592%" y="319.50">regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (119 samples, 9.72%)</title><rect x="31.2092%" y="293" width="9.7222%" height="15" fill="rgb(213,191,49)" fg:x="382" fg:w="119"/><text x="31.4592%" y="303.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::build (119 samples, 9.72%)</title><rect x="31.2092%" y="277" width="9.7222%" height="15" fill="rgb(210,226,19)" fg:x="382" fg:w="119"/><text x="31.4592%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="40.5229%" y="261" width="0.4085%" height="15" fill="rgb(229,97,18)" fg:x="496" fg:w="5"/><text x="40.7729%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="40.5229%" y="245" width="0.4085%" height="15" fill="rgb(211,167,15)" fg:x="496" fg:w="5"/><text x="40.7729%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="40.7680%" y="229" width="0.1634%" height="15" fill="rgb(210,169,34)" fg:x="499" fg:w="2"/><text x="41.0180%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="41.0131%" y="261" width="0.2451%" height="15" fill="rgb(241,121,31)" fg:x="502" fg:w="3"/><text x="41.2631%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="41.0131%" y="245" width="0.2451%" height="15" fill="rgb(232,40,11)" fg:x="502" fg:w="3"/><text x="41.2631%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.1765%" y="229" width="0.0817%" height="15" fill="rgb(205,86,26)" fg:x="504" fg:w="1"/><text x="41.4265%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (135 samples, 11.03%)</title><rect x="30.3105%" y="325" width="11.0294%" height="15" fill="rgb(231,126,28)" fg:x="371" fg:w="135"/><text x="30.5605%" y="335.50">indefinite::help..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="40.9314%" y="309" width="0.4085%" height="15" fill="rgb(219,221,18)" fg:x="501" fg:w="5"/><text x="41.1814%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="40.9314%" y="293" width="0.4085%" height="15" fill="rgb(211,40,0)" fg:x="501" fg:w="5"/><text x="41.1814%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="40.9314%" y="277" width="0.4085%" height="15" fill="rgb(239,85,43)" fg:x="501" fg:w="5"/><text x="41.1814%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="41.2582%" y="261" width="0.0817%" height="15" fill="rgb(231,55,21)" fg:x="505" fg:w="1"/><text x="41.5082%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="41.3399%" y="277" width="0.1634%" height="15" fill="rgb(225,184,43)" fg:x="506" fg:w="2"/><text x="41.5899%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="41.3399%" y="261" width="0.1634%" height="15" fill="rgb(251,158,41)" fg:x="506" fg:w="2"/><text x="41.5899%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::OnePass&gt; (2 samples, 0.16%)</title><rect x="41.3399%" y="245" width="0.1634%" height="15" fill="rgb(234,159,37)" fg:x="506" fg:w="2"/><text x="41.5899%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="41.5033%" y="261" width="0.0817%" height="15" fill="rgb(216,204,22)" fg:x="508" fg:w="1"/><text x="41.7533%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.5033%" y="245" width="0.0817%" height="15" fill="rgb(214,17,3)" fg:x="508" fg:w="1"/><text x="41.7533%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="41.3399%" y="309" width="0.3268%" height="15" fill="rgb(212,111,17)" fg:x="506" fg:w="4"/><text x="41.5899%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="41.3399%" y="293" width="0.3268%" height="15" fill="rgb(221,157,24)" fg:x="506" fg:w="4"/><text x="41.5899%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="41.5033%" y="277" width="0.1634%" height="15" fill="rgb(252,16,13)" fg:x="508" fg:w="2"/><text x="41.7533%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="41.5850%" y="261" width="0.0817%" height="15" fill="rgb(221,62,2)" fg:x="509" fg:w="1"/><text x="41.8350%" y="271.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="41.5850%" y="245" width="0.0817%" height="15" fill="rgb(247,87,22)" fg:x="509" fg:w="1"/><text x="41.8350%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.5850%" y="229" width="0.0817%" height="15" fill="rgb(215,73,9)" fg:x="509" fg:w="1"/><text x="41.8350%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="41.6667%" y="293" width="0.1634%" height="15" fill="rgb(207,175,33)" fg:x="510" fg:w="2"/><text x="41.9167%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="41.6667%" y="277" width="0.1634%" height="15" fill="rgb(243,129,54)" fg:x="510" fg:w="2"/><text x="41.9167%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="42.4020%" y="213" width="0.0817%" height="15" fill="rgb(227,119,45)" fg:x="519" fg:w="1"/><text x="42.6520%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="42.4020%" y="197" width="0.0817%" height="15" fill="rgb(205,109,36)" fg:x="519" fg:w="1"/><text x="42.6520%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="42.4837%" y="213" width="0.0817%" height="15" fill="rgb(205,6,39)" fg:x="520" fg:w="1"/><text x="42.7337%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.82%)</title><rect x="41.8301%" y="245" width="0.8170%" height="15" fill="rgb(221,32,16)" fg:x="512" fg:w="10"/><text x="42.0801%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.82%)</title><rect x="41.8301%" y="229" width="0.8170%" height="15" fill="rgb(228,144,50)" fg:x="512" fg:w="10"/><text x="42.0801%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="42.5654%" y="213" width="0.0817%" height="15" fill="rgb(229,201,53)" fg:x="521" fg:w="1"/><text x="42.8154%" y="223.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.06%)</title><rect x="41.6667%" y="309" width="1.0621%" height="15" fill="rgb(249,153,27)" fg:x="510" fg:w="13"/><text x="41.9167%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.90%)</title><rect x="41.8301%" y="293" width="0.8987%" height="15" fill="rgb(227,106,25)" fg:x="512" fg:w="11"/><text x="42.0801%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.90%)</title><rect x="41.8301%" y="277" width="0.8987%" height="15" fill="rgb(230,65,29)" fg:x="512" fg:w="11"/><text x="42.0801%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.90%)</title><rect x="41.8301%" y="261" width="0.8987%" height="15" fill="rgb(221,57,46)" fg:x="512" fg:w="11"/><text x="42.0801%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="42.6471%" y="245" width="0.0817%" height="15" fill="rgb(229,161,17)" fg:x="522" fg:w="1"/><text x="42.8971%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="42.6471%" y="229" width="0.0817%" height="15" fill="rgb(222,213,11)" fg:x="522" fg:w="1"/><text x="42.8971%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.6471%" y="213" width="0.0817%" height="15" fill="rgb(235,35,13)" fg:x="522" fg:w="1"/><text x="42.8971%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="42.8922%" y="229" width="0.0817%" height="15" fill="rgb(233,158,34)" fg:x="525" fg:w="1"/><text x="43.1422%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="42.8922%" y="213" width="0.0817%" height="15" fill="rgb(215,151,48)" fg:x="525" fg:w="1"/><text x="43.1422%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.8922%" y="197" width="0.0817%" height="15" fill="rgb(229,84,14)" fg:x="525" fg:w="1"/><text x="43.1422%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="42.8922%" y="181" width="0.0817%" height="15" fill="rgb(229,68,14)" fg:x="525" fg:w="1"/><text x="43.1422%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="42.7288%" y="245" width="0.3268%" height="15" fill="rgb(243,106,26)" fg:x="523" fg:w="4"/><text x="42.9788%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="42.9739%" y="229" width="0.0817%" height="15" fill="rgb(206,45,38)" fg:x="526" fg:w="1"/><text x="43.2239%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="42.7288%" y="261" width="0.4085%" height="15" fill="rgb(226,6,15)" fg:x="523" fg:w="5"/><text x="42.9788%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="43.0556%" y="245" width="0.0817%" height="15" fill="rgb(232,22,54)" fg:x="527" fg:w="1"/><text x="43.3056%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="43.1373%" y="261" width="0.3268%" height="15" fill="rgb(229,222,32)" fg:x="528" fg:w="4"/><text x="43.3873%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="43.2190%" y="245" width="0.2451%" height="15" fill="rgb(228,62,29)" fg:x="529" fg:w="3"/><text x="43.4690%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.25%)</title><rect x="43.2190%" y="229" width="0.2451%" height="15" fill="rgb(251,103,34)" fg:x="529" fg:w="3"/><text x="43.4690%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="43.2190%" y="213" width="0.2451%" height="15" fill="rgb(233,12,30)" fg:x="529" fg:w="3"/><text x="43.4690%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="43.2190%" y="197" width="0.2451%" height="15" fill="rgb(238,52,0)" fg:x="529" fg:w="3"/><text x="43.4690%" y="207.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="43.2190%" y="181" width="0.2451%" height="15" fill="rgb(223,98,5)" fg:x="529" fg:w="3"/><text x="43.4690%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.4641%" y="229" width="0.1634%" height="15" fill="rgb(228,75,37)" fg:x="532" fg:w="2"/><text x="43.7141%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.12%)</title><rect x="43.4641%" y="245" width="2.1242%" height="15" fill="rgb(205,115,49)" fg:x="532" fg:w="26"/><text x="43.7141%" y="255.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (24 samples, 1.96%)</title><rect x="43.6275%" y="229" width="1.9608%" height="15" fill="rgb(250,154,43)" fg:x="534" fg:w="24"/><text x="43.8775%" y="239.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.5065%" y="213" width="0.0817%" height="15" fill="rgb(226,43,29)" fg:x="557" fg:w="1"/><text x="45.7565%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.25%)</title><rect x="45.5882%" y="245" width="0.2451%" height="15" fill="rgb(249,228,39)" fg:x="558" fg:w="3"/><text x="45.8382%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="45.6699%" y="229" width="0.1634%" height="15" fill="rgb(216,79,43)" fg:x="559" fg:w="2"/><text x="45.9199%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (6 samples, 0.49%)</title><rect x="46.0784%" y="213" width="0.4902%" height="15" fill="rgb(228,95,12)" fg:x="564" fg:w="6"/><text x="46.3284%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="46.4052%" y="197" width="0.1634%" height="15" fill="rgb(249,221,15)" fg:x="568" fg:w="2"/><text x="46.6552%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.98%)</title><rect x="45.8333%" y="245" width="0.9804%" height="15" fill="rgb(233,34,13)" fg:x="561" fg:w="12"/><text x="46.0833%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (11 samples, 0.90%)</title><rect x="45.9150%" y="229" width="0.8987%" height="15" fill="rgb(214,103,39)" fg:x="562" fg:w="11"/><text x="46.1650%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.25%)</title><rect x="46.5686%" y="213" width="0.2451%" height="15" fill="rgb(251,126,39)" fg:x="570" fg:w="3"/><text x="46.8186%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (3 samples, 0.25%)</title><rect x="46.5686%" y="197" width="0.2451%" height="15" fill="rgb(214,216,36)" fg:x="570" fg:w="3"/><text x="46.8186%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.25%)</title><rect x="46.5686%" y="181" width="0.2451%" height="15" fill="rgb(220,221,8)" fg:x="570" fg:w="3"/><text x="46.8186%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="46.8954%" y="181" width="0.1634%" height="15" fill="rgb(240,216,3)" fg:x="574" fg:w="2"/><text x="47.1454%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="47.0588%" y="165" width="0.0817%" height="15" fill="rgb(232,218,17)" fg:x="576" fg:w="1"/><text x="47.3088%" y="175.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="47.9575%" y="133" width="0.0817%" height="15" fill="rgb(229,163,45)" fg:x="587" fg:w="1"/><text x="48.2075%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.0392%" y="133" width="0.0817%" height="15" fill="rgb(231,110,42)" fg:x="588" fg:w="1"/><text x="48.2892%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="48.1209%" y="133" width="0.1634%" height="15" fill="rgb(208,170,48)" fg:x="589" fg:w="2"/><text x="48.3709%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.2026%" y="117" width="0.0817%" height="15" fill="rgb(239,116,25)" fg:x="590" fg:w="1"/><text x="48.4526%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.2026%" y="101" width="0.0817%" height="15" fill="rgb(219,200,50)" fg:x="590" fg:w="1"/><text x="48.4526%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.2026%" y="85" width="0.0817%" height="15" fill="rgb(245,200,0)" fg:x="590" fg:w="1"/><text x="48.4526%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="48.2843%" y="133" width="0.1634%" height="15" fill="rgb(245,119,33)" fg:x="591" fg:w="2"/><text x="48.5343%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="48.3660%" y="117" width="0.0817%" height="15" fill="rgb(231,125,12)" fg:x="592" fg:w="1"/><text x="48.6160%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3660%" y="101" width="0.0817%" height="15" fill="rgb(216,96,41)" fg:x="592" fg:w="1"/><text x="48.6160%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.3660%" y="85" width="0.0817%" height="15" fill="rgb(248,43,45)" fg:x="592" fg:w="1"/><text x="48.6160%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="48.9379%" y="101" width="0.3268%" height="15" fill="rgb(217,222,7)" fg:x="599" fg:w="4"/><text x="49.1879%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="48.9379%" y="85" width="0.3268%" height="15" fill="rgb(233,28,6)" fg:x="599" fg:w="4"/><text x="49.1879%" y="95.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="48.9379%" y="69" width="0.3268%" height="15" fill="rgb(231,218,15)" fg:x="599" fg:w="4"/><text x="49.1879%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.5098%" y="85" width="0.0817%" height="15" fill="rgb(226,171,48)" fg:x="606" fg:w="1"/><text x="49.7598%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.23%)</title><rect x="48.4477%" y="133" width="1.2255%" height="15" fill="rgb(235,201,9)" fg:x="593" fg:w="15"/><text x="48.6977%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.90%)</title><rect x="48.7745%" y="117" width="0.8987%" height="15" fill="rgb(217,80,15)" fg:x="597" fg:w="11"/><text x="49.0245%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="49.2647%" y="101" width="0.4085%" height="15" fill="rgb(219,152,8)" fg:x="603" fg:w="5"/><text x="49.5147%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="49.5915%" y="85" width="0.0817%" height="15" fill="rgb(243,107,38)" fg:x="607" fg:w="1"/><text x="49.8415%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.5915%" y="69" width="0.0817%" height="15" fill="rgb(231,17,5)" fg:x="607" fg:w="1"/><text x="49.8415%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.5915%" y="53" width="0.0817%" height="15" fill="rgb(209,25,54)" fg:x="607" fg:w="1"/><text x="49.8415%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.5915%" y="37" width="0.0817%" height="15" fill="rgb(219,0,2)" fg:x="607" fg:w="1"/><text x="49.8415%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (69 samples, 5.64%)</title><rect x="49.6732%" y="133" width="5.6373%" height="15" fill="rgb(246,9,5)" fg:x="608" fg:w="69"/><text x="49.9232%" y="143.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (69 samples, 5.64%)</title><rect x="49.6732%" y="117" width="5.6373%" height="15" fill="rgb(226,159,4)" fg:x="608" fg:w="69"/><text x="49.9232%" y="127.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (69 samples, 5.64%)</title><rect x="49.6732%" y="101" width="5.6373%" height="15" fill="rgb(219,175,34)" fg:x="608" fg:w="69"/><text x="49.9232%" y="111.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="55.3105%" y="133" width="0.0817%" height="15" fill="rgb(236,10,46)" fg:x="677" fg:w="1"/><text x="55.5605%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (109 samples, 8.91%)</title><rect x="46.8954%" y="229" width="8.9052%" height="15" fill="rgb(240,211,16)" fg:x="574" fg:w="109"/><text x="47.1454%" y="239.50">&lt;core::iter::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (109 samples, 8.91%)</title><rect x="46.8954%" y="213" width="8.9052%" height="15" fill="rgb(205,3,43)" fg:x="574" fg:w="109"/><text x="47.1454%" y="223.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (109 samples, 8.91%)</title><rect x="46.8954%" y="197" width="8.9052%" height="15" fill="rgb(245,7,22)" fg:x="574" fg:w="109"/><text x="47.1454%" y="207.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (107 samples, 8.74%)</title><rect x="47.0588%" y="181" width="8.7418%" height="15" fill="rgb(239,132,32)" fg:x="576" fg:w="107"/><text x="47.3088%" y="191.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (106 samples, 8.66%)</title><rect x="47.1405%" y="165" width="8.6601%" height="15" fill="rgb(228,202,34)" fg:x="577" fg:w="106"/><text x="47.3905%" y="175.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (106 samples, 8.66%)</title><rect x="47.1405%" y="149" width="8.6601%" height="15" fill="rgb(254,200,22)" fg:x="577" fg:w="106"/><text x="47.3905%" y="159.50">regex_automa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.41%)</title><rect x="55.3922%" y="133" width="0.4085%" height="15" fill="rgb(219,10,39)" fg:x="678" fg:w="5"/><text x="55.6422%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="55.5556%" y="117" width="0.2451%" height="15" fill="rgb(226,210,39)" fg:x="680" fg:w="3"/><text x="55.8056%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.6373%" y="101" width="0.1634%" height="15" fill="rgb(208,219,16)" fg:x="681" fg:w="2"/><text x="55.8873%" y="111.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.6373%" y="85" width="0.1634%" height="15" fill="rgb(216,158,51)" fg:x="681" fg:w="2"/><text x="55.8873%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.2092%" y="213" width="0.0817%" height="15" fill="rgb(233,14,44)" fg:x="688" fg:w="1"/><text x="56.4592%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.2908%" y="213" width="0.0817%" height="15" fill="rgb(237,97,39)" fg:x="689" fg:w="1"/><text x="56.5408%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (10 samples, 0.82%)</title><rect x="56.3725%" y="213" width="0.8170%" height="15" fill="rgb(218,198,43)" fg:x="690" fg:w="10"/><text x="56.6225%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="56.8627%" y="197" width="0.3268%" height="15" fill="rgb(231,104,20)" fg:x="696" fg:w="4"/><text x="57.1127%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="56.8627%" y="181" width="0.3268%" height="15" fill="rgb(254,36,13)" fg:x="696" fg:w="4"/><text x="57.1127%" y="191.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="56.8627%" y="165" width="0.3268%" height="15" fill="rgb(248,14,50)" fg:x="696" fg:w="4"/><text x="57.1127%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="57.1895%" y="213" width="0.2451%" height="15" fill="rgb(217,107,29)" fg:x="700" fg:w="3"/><text x="57.4395%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="57.3529%" y="197" width="0.0817%" height="15" fill="rgb(251,169,33)" fg:x="702" fg:w="1"/><text x="57.6029%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3529%" y="181" width="0.0817%" height="15" fill="rgb(217,108,32)" fg:x="702" fg:w="1"/><text x="57.6029%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3529%" y="165" width="0.0817%" height="15" fill="rgb(219,66,42)" fg:x="702" fg:w="1"/><text x="57.6029%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="57.4346%" y="213" width="0.1634%" height="15" fill="rgb(206,180,7)" fg:x="703" fg:w="2"/><text x="57.6846%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (175 samples, 14.30%)</title><rect x="43.4641%" y="261" width="14.2974%" height="15" fill="rgb(208,226,31)" fg:x="532" fg:w="175"/><text x="43.7141%" y="271.50">regex_automata::meta::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (134 samples, 10.95%)</title><rect x="46.8137%" y="245" width="10.9477%" height="15" fill="rgb(218,26,49)" fg:x="573" fg:w="134"/><text x="47.0637%" y="255.50">regex_automata::..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.96%)</title><rect x="55.8007%" y="229" width="1.9608%" height="15" fill="rgb(233,197,48)" fg:x="683" fg:w="24"/><text x="56.0507%" y="239.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="57.5980%" y="213" width="0.1634%" height="15" fill="rgb(252,181,51)" fg:x="705" fg:w="2"/><text x="57.8480%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="57.6797%" y="197" width="0.0817%" height="15" fill="rgb(253,90,19)" fg:x="706" fg:w="1"/><text x="57.9297%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="57.9248%" y="229" width="0.0817%" height="15" fill="rgb(215,171,30)" fg:x="709" fg:w="1"/><text x="58.1748%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="58.0065%" y="229" width="0.0817%" height="15" fill="rgb(214,222,9)" fg:x="710" fg:w="1"/><text x="58.2565%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="58.0065%" y="213" width="0.0817%" height="15" fill="rgb(223,3,22)" fg:x="710" fg:w="1"/><text x="58.2565%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="57.7614%" y="261" width="0.5719%" height="15" fill="rgb(225,196,46)" fg:x="707" fg:w="7"/><text x="58.0114%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="57.7614%" y="245" width="0.5719%" height="15" fill="rgb(209,110,37)" fg:x="707" fg:w="7"/><text x="58.0114%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.25%)</title><rect x="58.0882%" y="229" width="0.2451%" height="15" fill="rgb(249,89,12)" fg:x="711" fg:w="3"/><text x="58.3382%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="58.2516%" y="213" width="0.0817%" height="15" fill="rgb(226,27,33)" fg:x="713" fg:w="1"/><text x="58.5016%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.25%)</title><rect x="58.3333%" y="213" width="0.2451%" height="15" fill="rgb(213,82,22)" fg:x="714" fg:w="3"/><text x="58.5833%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.25%)</title><rect x="58.3333%" y="197" width="0.2451%" height="15" fill="rgb(248,140,0)" fg:x="714" fg:w="3"/><text x="58.5833%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="58.3333%" y="229" width="0.3268%" height="15" fill="rgb(228,106,3)" fg:x="714" fg:w="4"/><text x="58.5833%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="58.5784%" y="213" width="0.0817%" height="15" fill="rgb(209,23,37)" fg:x="717" fg:w="1"/><text x="58.8284%" y="223.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="58.6601%" y="213" width="0.0817%" height="15" fill="rgb(241,93,50)" fg:x="718" fg:w="1"/><text x="58.9101%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.6601%" y="197" width="0.0817%" height="15" fill="rgb(253,46,43)" fg:x="718" fg:w="1"/><text x="58.9101%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="58.6601%" y="229" width="0.1634%" height="15" fill="rgb(226,206,43)" fg:x="718" fg:w="2"/><text x="58.9101%" y="239.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="58.7418%" y="213" width="0.0817%" height="15" fill="rgb(217,54,7)" fg:x="719" fg:w="1"/><text x="58.9918%" y="223.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="58.7418%" y="197" width="0.0817%" height="15" fill="rgb(223,5,52)" fg:x="719" fg:w="1"/><text x="58.9918%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="58.8235%" y="213" width="0.0817%" height="15" fill="rgb(206,52,46)" fg:x="720" fg:w="1"/><text x="59.0735%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (199 samples, 16.26%)</title><rect x="42.7288%" y="277" width="16.2582%" height="15" fill="rgb(253,136,11)" fg:x="523" fg:w="199"/><text x="42.9788%" y="287.50">regex_automata::meta::reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.65%)</title><rect x="58.3333%" y="261" width="0.6536%" height="15" fill="rgb(208,106,33)" fg:x="714" fg:w="8"/><text x="58.5833%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.65%)</title><rect x="58.3333%" y="245" width="0.6536%" height="15" fill="rgb(206,54,4)" fg:x="714" fg:w="8"/><text x="58.5833%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="58.8235%" y="229" width="0.1634%" height="15" fill="rgb(213,3,15)" fg:x="720" fg:w="2"/><text x="59.0735%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="58.9052%" y="213" width="0.0817%" height="15" fill="rgb(252,211,39)" fg:x="721" fg:w="1"/><text x="59.1552%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.9052%" y="197" width="0.0817%" height="15" fill="rgb(223,6,36)" fg:x="721" fg:w="1"/><text x="59.1552%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.9052%" y="181" width="0.0817%" height="15" fill="rgb(252,169,45)" fg:x="721" fg:w="1"/><text x="59.1552%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="58.9052%" y="165" width="0.0817%" height="15" fill="rgb(212,48,26)" fg:x="721" fg:w="1"/><text x="59.1552%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (217 samples, 17.73%)</title><rect x="41.3399%" y="325" width="17.7288%" height="15" fill="rgb(251,102,48)" fg:x="506" fg:w="217"/><text x="41.5899%" y="335.50">indefinite::rules::number::N..</text></g><g><title>regex::regex::string::Regex::new (200 samples, 16.34%)</title><rect x="42.7288%" y="309" width="16.3399%" height="15" fill="rgb(243,208,16)" fg:x="523" fg:w="200"/><text x="42.9788%" y="319.50">regex::regex::string::Reg..</text></g><g><title>regex::builders::Builder::build_one_string (200 samples, 16.34%)</title><rect x="42.7288%" y="293" width="16.3399%" height="15" fill="rgb(219,96,24)" fg:x="523" fg:w="200"/><text x="42.9788%" y="303.50">regex::builders::Builder:..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="58.9869%" y="277" width="0.0817%" height="15" fill="rgb(219,33,29)" fg:x="722" fg:w="1"/><text x="59.2369%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.0686%" y="309" width="0.0817%" height="15" fill="rgb(223,176,5)" fg:x="723" fg:w="1"/><text x="59.3186%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="59.1503%" y="261" width="0.1634%" height="15" fill="rgb(228,140,14)" fg:x="724" fg:w="2"/><text x="59.4003%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="59.2320%" y="245" width="0.0817%" height="15" fill="rgb(217,179,31)" fg:x="725" fg:w="1"/><text x="59.4820%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (7 samples, 0.57%)</title><rect x="59.1503%" y="293" width="0.5719%" height="15" fill="rgb(230,9,30)" fg:x="724" fg:w="7"/><text x="59.4003%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (7 samples, 0.57%)</title><rect x="59.1503%" y="277" width="0.5719%" height="15" fill="rgb(230,136,20)" fg:x="724" fg:w="7"/><text x="59.4003%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (5 samples, 0.41%)</title><rect x="59.3137%" y="261" width="0.4085%" height="15" fill="rgb(215,210,22)" fg:x="726" fg:w="5"/><text x="59.5637%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="59.6405%" y="245" width="0.0817%" height="15" fill="rgb(218,43,5)" fg:x="730" fg:w="1"/><text x="59.8905%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.6405%" y="229" width="0.0817%" height="15" fill="rgb(216,11,5)" fg:x="730" fg:w="1"/><text x="59.8905%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6405%" y="213" width="0.0817%" height="15" fill="rgb(209,82,29)" fg:x="730" fg:w="1"/><text x="59.8905%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.6405%" y="197" width="0.0817%" height="15" fill="rgb(244,115,12)" fg:x="730" fg:w="1"/><text x="59.8905%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="59.7222%" y="293" width="0.0817%" height="15" fill="rgb(222,82,18)" fg:x="731" fg:w="1"/><text x="59.9722%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="59.7222%" y="277" width="0.0817%" height="15" fill="rgb(249,227,8)" fg:x="731" fg:w="1"/><text x="59.9722%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="59.7222%" y="261" width="0.0817%" height="15" fill="rgb(253,141,45)" fg:x="731" fg:w="1"/><text x="59.9722%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="59.7222%" y="245" width="0.0817%" height="15" fill="rgb(234,184,4)" fg:x="731" fg:w="1"/><text x="59.9722%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.7222%" y="229" width="0.0817%" height="15" fill="rgb(218,194,23)" fg:x="731" fg:w="1"/><text x="59.9722%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="59.9673%" y="245" width="0.0817%" height="15" fill="rgb(235,66,41)" fg:x="734" fg:w="1"/><text x="60.2173%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.9673%" y="229" width="0.0817%" height="15" fill="rgb(245,217,1)" fg:x="734" fg:w="1"/><text x="60.2173%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.9673%" y="213" width="0.0817%" height="15" fill="rgb(229,91,1)" fg:x="734" fg:w="1"/><text x="60.2173%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="59.9673%" y="197" width="0.0817%" height="15" fill="rgb(207,101,30)" fg:x="734" fg:w="1"/><text x="60.2173%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9673%" y="181" width="0.0817%" height="15" fill="rgb(223,82,49)" fg:x="734" fg:w="1"/><text x="60.2173%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.9673%" y="165" width="0.0817%" height="15" fill="rgb(218,167,17)" fg:x="734" fg:w="1"/><text x="60.2173%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.0490%" y="213" width="0.0817%" height="15" fill="rgb(208,103,14)" fg:x="735" fg:w="1"/><text x="60.2990%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="60.0490%" y="229" width="0.1634%" height="15" fill="rgb(238,20,8)" fg:x="735" fg:w="2"/><text x="60.2990%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="60.1307%" y="213" width="0.0817%" height="15" fill="rgb(218,80,54)" fg:x="736" fg:w="1"/><text x="60.3807%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="60.2124%" y="229" width="0.1634%" height="15" fill="rgb(240,144,17)" fg:x="737" fg:w="2"/><text x="60.4624%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="60.2941%" y="213" width="0.0817%" height="15" fill="rgb(245,27,50)" fg:x="738" fg:w="1"/><text x="60.5441%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (1 samples, 0.08%)</title><rect x="60.3758%" y="229" width="0.0817%" height="15" fill="rgb(251,51,7)" fg:x="739" fg:w="1"/><text x="60.6258%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="60.4575%" y="213" width="0.0817%" height="15" fill="rgb(245,217,29)" fg:x="740" fg:w="1"/><text x="60.7075%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="60.4575%" y="197" width="0.0817%" height="15" fill="rgb(221,176,29)" fg:x="740" fg:w="1"/><text x="60.7075%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="60.4575%" y="181" width="0.0817%" height="15" fill="rgb(212,180,24)" fg:x="740" fg:w="1"/><text x="60.7075%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="60.4575%" y="165" width="0.0817%" height="15" fill="rgb(254,24,2)" fg:x="740" fg:w="1"/><text x="60.7075%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="60.4575%" y="149" width="0.0817%" height="15" fill="rgb(230,100,2)" fg:x="740" fg:w="1"/><text x="60.7075%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.4575%" y="133" width="0.0817%" height="15" fill="rgb(219,142,25)" fg:x="740" fg:w="1"/><text x="60.7075%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.4575%" y="117" width="0.0817%" height="15" fill="rgb(240,73,43)" fg:x="740" fg:w="1"/><text x="60.7075%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.4575%" y="101" width="0.0817%" height="15" fill="rgb(214,114,15)" fg:x="740" fg:w="1"/><text x="60.7075%" y="111.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="60.5392%" y="197" width="0.1634%" height="15" fill="rgb(207,130,4)" fg:x="741" fg:w="2"/><text x="60.7892%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7026%" y="197" width="0.0817%" height="15" fill="rgb(221,25,40)" fg:x="743" fg:w="1"/><text x="60.9526%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.7026%" y="181" width="0.0817%" height="15" fill="rgb(241,184,7)" fg:x="743" fg:w="1"/><text x="60.9526%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7026%" y="165" width="0.0817%" height="15" fill="rgb(235,159,4)" fg:x="743" fg:w="1"/><text x="60.9526%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7843%" y="165" width="0.0817%" height="15" fill="rgb(214,87,48)" fg:x="744" fg:w="1"/><text x="61.0343%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.90%)</title><rect x="60.0490%" y="245" width="0.8987%" height="15" fill="rgb(246,198,24)" fg:x="735" fg:w="11"/><text x="60.2990%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.49%)</title><rect x="60.4575%" y="229" width="0.4902%" height="15" fill="rgb(209,66,40)" fg:x="740" fg:w="6"/><text x="60.7075%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="60.5392%" y="213" width="0.4085%" height="15" fill="rgb(233,147,39)" fg:x="741" fg:w="5"/><text x="60.7892%" y="223.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="60.7843%" y="197" width="0.1634%" height="15" fill="rgb(231,145,52)" fg:x="744" fg:w="2"/><text x="61.0343%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="60.7843%" y="181" width="0.1634%" height="15" fill="rgb(206,20,26)" fg:x="744" fg:w="2"/><text x="61.0343%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.8660%" y="165" width="0.0817%" height="15" fill="rgb(238,220,4)" fg:x="745" fg:w="1"/><text x="61.1160%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.8660%" y="149" width="0.0817%" height="15" fill="rgb(252,195,42)" fg:x="745" fg:w="1"/><text x="61.1160%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="61.1111%" y="197" width="0.0817%" height="15" fill="rgb(209,10,6)" fg:x="748" fg:w="1"/><text x="61.3611%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="61.1111%" y="181" width="0.0817%" height="15" fill="rgb(229,3,52)" fg:x="748" fg:w="1"/><text x="61.3611%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="60.9477%" y="245" width="0.3268%" height="15" fill="rgb(253,49,37)" fg:x="746" fg:w="4"/><text x="61.1977%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="61.0294%" y="229" width="0.2451%" height="15" fill="rgb(240,103,49)" fg:x="747" fg:w="3"/><text x="61.2794%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="61.0294%" y="213" width="0.2451%" height="15" fill="rgb(250,182,30)" fg:x="747" fg:w="3"/><text x="61.2794%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="61.1928%" y="197" width="0.0817%" height="15" fill="rgb(248,8,30)" fg:x="749" fg:w="1"/><text x="61.4428%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.2745%" y="197" width="0.0817%" height="15" fill="rgb(237,120,30)" fg:x="750" fg:w="1"/><text x="61.5245%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2745%" y="181" width="0.0817%" height="15" fill="rgb(221,146,34)" fg:x="750" fg:w="1"/><text x="61.5245%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.2745%" y="165" width="0.0817%" height="15" fill="rgb(242,55,13)" fg:x="750" fg:w="1"/><text x="61.5245%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="61.2745%" y="213" width="0.2451%" height="15" fill="rgb(242,112,31)" fg:x="750" fg:w="3"/><text x="61.5245%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="61.3562%" y="197" width="0.1634%" height="15" fill="rgb(249,192,27)" fg:x="751" fg:w="2"/><text x="61.6062%" y="207.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.80%)</title><rect x="59.8039%" y="261" width="1.7974%" height="15" fill="rgb(208,204,44)" fg:x="732" fg:w="22"/><text x="60.0539%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="61.2745%" y="245" width="0.3268%" height="15" fill="rgb(208,93,54)" fg:x="750" fg:w="4"/><text x="61.5245%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="61.2745%" y="229" width="0.3268%" height="15" fill="rgb(242,1,31)" fg:x="750" fg:w="4"/><text x="61.5245%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="61.5196%" y="213" width="0.0817%" height="15" fill="rgb(241,83,25)" fg:x="753" fg:w="1"/><text x="61.7696%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="61.6013%" y="261" width="0.0817%" height="15" fill="rgb(205,169,50)" fg:x="754" fg:w="1"/><text x="61.8513%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (24 samples, 1.96%)</title><rect x="59.8039%" y="293" width="1.9608%" height="15" fill="rgb(239,186,37)" fg:x="732" fg:w="24"/><text x="60.0539%" y="303.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (24 samples, 1.96%)</title><rect x="59.8039%" y="277" width="1.9608%" height="15" fill="rgb(205,221,10)" fg:x="732" fg:w="24"/><text x="60.0539%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="61.6830%" y="261" width="0.0817%" height="15" fill="rgb(218,196,15)" fg:x="755" fg:w="1"/><text x="61.9330%" y="271.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="61.6830%" y="245" width="0.0817%" height="15" fill="rgb(218,196,35)" fg:x="755" fg:w="1"/><text x="61.9330%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="61.8464%" y="213" width="0.2451%" height="15" fill="rgb(233,63,24)" fg:x="757" fg:w="3"/><text x="62.0964%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="61.8464%" y="197" width="0.2451%" height="15" fill="rgb(225,8,4)" fg:x="757" fg:w="3"/><text x="62.0964%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="61.9281%" y="181" width="0.1634%" height="15" fill="rgb(234,105,35)" fg:x="758" fg:w="2"/><text x="62.1781%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="61.7647%" y="229" width="0.5719%" height="15" fill="rgb(236,21,32)" fg:x="756" fg:w="7"/><text x="62.0147%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.25%)</title><rect x="62.0915%" y="213" width="0.2451%" height="15" fill="rgb(228,109,6)" fg:x="760" fg:w="3"/><text x="62.3415%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.74%)</title><rect x="61.7647%" y="245" width="0.7353%" height="15" fill="rgb(229,215,31)" fg:x="756" fg:w="9"/><text x="62.0147%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="62.3366%" y="229" width="0.1634%" height="15" fill="rgb(221,52,54)" fg:x="763" fg:w="2"/><text x="62.5866%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.4183%" y="213" width="0.0817%" height="15" fill="rgb(252,129,43)" fg:x="764" fg:w="1"/><text x="62.6683%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4183%" y="197" width="0.0817%" height="15" fill="rgb(248,183,27)" fg:x="764" fg:w="1"/><text x="62.6683%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.4183%" y="181" width="0.0817%" height="15" fill="rgb(250,0,22)" fg:x="764" fg:w="1"/><text x="62.6683%" y="191.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (429 samples, 35.05%)</title><rect x="27.5327%" y="405" width="35.0490%" height="15" fill="rgb(213,166,10)" fg:x="337" fg:w="429"/><text x="27.7827%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mode..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (396 samples, 32.35%)</title><rect x="30.2288%" y="389" width="32.3529%" height="15" fill="rgb(207,163,36)" fg:x="370" fg:w="396"/><text x="30.4788%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (395 samples, 32.27%)</title><rect x="30.3105%" y="373" width="32.2712%" height="15" fill="rgb(208,122,22)" fg:x="371" fg:w="395"/><text x="30.5605%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (395 samples, 32.27%)</title><rect x="30.3105%" y="357" width="32.2712%" height="15" fill="rgb(207,104,49)" fg:x="371" fg:w="395"/><text x="30.5605%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (395 samples, 32.27%)</title><rect x="30.3105%" y="341" width="32.2712%" height="15" fill="rgb(248,211,50)" fg:x="371" fg:w="395"/><text x="30.5605%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (43 samples, 3.51%)</title><rect x="59.0686%" y="325" width="3.5131%" height="15" fill="rgb(217,13,45)" fg:x="723" fg:w="43"/><text x="59.3186%" y="335.50">ind..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (42 samples, 3.43%)</title><rect x="59.1503%" y="309" width="3.4314%" height="15" fill="rgb(211,216,49)" fg:x="724" fg:w="42"/><text x="59.4003%" y="319.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.82%)</title><rect x="61.7647%" y="293" width="0.8170%" height="15" fill="rgb(221,58,53)" fg:x="756" fg:w="10"/><text x="62.0147%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.82%)</title><rect x="61.7647%" y="277" width="0.8170%" height="15" fill="rgb(220,112,41)" fg:x="756" fg:w="10"/><text x="62.0147%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.82%)</title><rect x="61.7647%" y="261" width="0.8170%" height="15" fill="rgb(236,38,28)" fg:x="756" fg:w="10"/><text x="62.0147%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="62.5000%" y="245" width="0.0817%" height="15" fill="rgb(227,195,22)" fg:x="765" fg:w="1"/><text x="62.7500%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="62.5000%" y="229" width="0.0817%" height="15" fill="rgb(214,55,33)" fg:x="765" fg:w="1"/><text x="62.7500%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.5000%" y="213" width="0.0817%" height="15" fill="rgb(248,80,13)" fg:x="765" fg:w="1"/><text x="62.7500%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.5000%" y="197" width="0.0817%" height="15" fill="rgb(238,52,6)" fg:x="765" fg:w="1"/><text x="62.7500%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.5000%" y="181" width="0.0817%" height="15" fill="rgb(224,198,47)" fg:x="765" fg:w="1"/><text x="62.7500%" y="191.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="62.8268%" y="309" width="0.1634%" height="15" fill="rgb(233,171,20)" fg:x="769" fg:w="2"/><text x="63.0768%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="62.8268%" y="293" width="0.1634%" height="15" fill="rgb(241,30,25)" fg:x="769" fg:w="2"/><text x="63.0768%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="62.8268%" y="277" width="0.1634%" height="15" fill="rgb(207,171,38)" fg:x="769" fg:w="2"/><text x="63.0768%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (4 samples, 0.33%)</title><rect x="62.7451%" y="357" width="0.3268%" height="15" fill="rgb(234,70,1)" fg:x="768" fg:w="4"/><text x="62.9951%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (4 samples, 0.33%)</title><rect x="62.7451%" y="341" width="0.3268%" height="15" fill="rgb(232,178,18)" fg:x="768" fg:w="4"/><text x="62.9951%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 0.33%)</title><rect x="62.7451%" y="325" width="0.3268%" height="15" fill="rgb(241,78,40)" fg:x="768" fg:w="4"/><text x="62.9951%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.9902%" y="309" width="0.0817%" height="15" fill="rgb(222,35,25)" fg:x="771" fg:w="1"/><text x="63.2402%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.9902%" y="293" width="0.0817%" height="15" fill="rgb(207,92,16)" fg:x="771" fg:w="1"/><text x="63.2402%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="62.5817%" y="405" width="0.5719%" height="15" fill="rgb(216,59,51)" fg:x="766" fg:w="7"/><text x="62.8317%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="62.5817%" y="389" width="0.5719%" height="15" fill="rgb(213,80,28)" fg:x="766" fg:w="7"/><text x="62.8317%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="62.6634%" y="373" width="0.4902%" height="15" fill="rgb(220,93,7)" fg:x="767" fg:w="6"/><text x="62.9134%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.0719%" y="357" width="0.0817%" height="15" fill="rgb(225,24,44)" fg:x="772" fg:w="1"/><text x="63.3219%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0719%" y="341" width="0.0817%" height="15" fill="rgb(243,74,40)" fg:x="772" fg:w="1"/><text x="63.3219%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="63.0719%" y="325" width="0.0817%" height="15" fill="rgb(228,39,7)" fg:x="772" fg:w="1"/><text x="63.3219%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="63.0719%" y="309" width="0.0817%" height="15" fill="rgb(227,79,8)" fg:x="772" fg:w="1"/><text x="63.3219%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1536%" y="341" width="0.0817%" height="15" fill="rgb(236,58,11)" fg:x="773" fg:w="1"/><text x="63.4036%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1536%" y="325" width="0.0817%" height="15" fill="rgb(249,63,35)" fg:x="773" fg:w="1"/><text x="63.4036%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1536%" y="309" width="0.0817%" height="15" fill="rgb(252,114,16)" fg:x="773" fg:w="1"/><text x="63.4036%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.1536%" y="293" width="0.0817%" height="15" fill="rgb(254,151,24)" fg:x="773" fg:w="1"/><text x="63.4036%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.1536%" y="277" width="0.0817%" height="15" fill="rgb(253,54,39)" fg:x="773" fg:w="1"/><text x="63.4036%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.1536%" y="261" width="0.0817%" height="15" fill="rgb(243,25,45)" fg:x="773" fg:w="1"/><text x="63.4036%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.1536%" y="245" width="0.0817%" height="15" fill="rgb(234,134,9)" fg:x="773" fg:w="1"/><text x="63.4036%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.1536%" y="229" width="0.0817%" height="15" fill="rgb(227,166,31)" fg:x="773" fg:w="1"/><text x="63.4036%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.1536%" y="213" width="0.0817%" height="15" fill="rgb(245,143,41)" fg:x="773" fg:w="1"/><text x="63.4036%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.1536%" y="197" width="0.0817%" height="15" fill="rgb(238,181,32)" fg:x="773" fg:w="1"/><text x="63.4036%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.1536%" y="181" width="0.0817%" height="15" fill="rgb(224,113,18)" fg:x="773" fg:w="1"/><text x="63.4036%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.1536%" y="165" width="0.0817%" height="15" fill="rgb(240,229,28)" fg:x="773" fg:w="1"/><text x="63.4036%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.1536%" y="149" width="0.0817%" height="15" fill="rgb(250,185,3)" fg:x="773" fg:w="1"/><text x="63.4036%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.1536%" y="133" width="0.0817%" height="15" fill="rgb(212,59,25)" fg:x="773" fg:w="1"/><text x="63.4036%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.1536%" y="117" width="0.0817%" height="15" fill="rgb(221,87,20)" fg:x="773" fg:w="1"/><text x="63.4036%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.1536%" y="101" width="0.0817%" height="15" fill="rgb(213,74,28)" fg:x="773" fg:w="1"/><text x="63.4036%" y="111.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="63.1536%" y="85" width="0.0817%" height="15" fill="rgb(224,132,34)" fg:x="773" fg:w="1"/><text x="63.4036%" y="95.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="63.2353%" y="341" width="0.1634%" height="15" fill="rgb(222,101,24)" fg:x="774" fg:w="2"/><text x="63.4853%" y="351.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="63.2353%" y="325" width="0.1634%" height="15" fill="rgb(254,142,4)" fg:x="774" fg:w="2"/><text x="63.4853%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="63.2353%" y="309" width="0.1634%" height="15" fill="rgb(230,229,49)" fg:x="774" fg:w="2"/><text x="63.4853%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.3170%" y="293" width="0.0817%" height="15" fill="rgb(238,70,47)" fg:x="775" fg:w="1"/><text x="63.5670%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.3170%" y="277" width="0.0817%" height="15" fill="rgb(231,160,17)" fg:x="775" fg:w="1"/><text x="63.5670%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.3170%" y="261" width="0.0817%" height="15" fill="rgb(218,68,53)" fg:x="775" fg:w="1"/><text x="63.5670%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.3170%" y="245" width="0.0817%" height="15" fill="rgb(236,111,10)" fg:x="775" fg:w="1"/><text x="63.5670%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.3170%" y="229" width="0.0817%" height="15" fill="rgb(224,34,41)" fg:x="775" fg:w="1"/><text x="63.5670%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.3170%" y="213" width="0.0817%" height="15" fill="rgb(241,118,19)" fg:x="775" fg:w="1"/><text x="63.5670%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.3170%" y="197" width="0.0817%" height="15" fill="rgb(238,129,25)" fg:x="775" fg:w="1"/><text x="63.5670%" y="207.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.3170%" y="181" width="0.0817%" height="15" fill="rgb(238,22,31)" fg:x="775" fg:w="1"/><text x="63.5670%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.3170%" y="165" width="0.0817%" height="15" fill="rgb(222,174,48)" fg:x="775" fg:w="1"/><text x="63.5670%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.3987%" y="261" width="0.0817%" height="15" fill="rgb(206,152,40)" fg:x="776" fg:w="1"/><text x="63.6487%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.4804%" y="213" width="0.0817%" height="15" fill="rgb(218,99,54)" fg:x="777" fg:w="1"/><text x="63.7304%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.4804%" y="197" width="0.0817%" height="15" fill="rgb(220,174,26)" fg:x="777" fg:w="1"/><text x="63.7304%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.4804%" y="181" width="0.0817%" height="15" fill="rgb(245,116,9)" fg:x="777" fg:w="1"/><text x="63.7304%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.4804%" y="165" width="0.0817%" height="15" fill="rgb(209,72,35)" fg:x="777" fg:w="1"/><text x="63.7304%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.4804%" y="149" width="0.0817%" height="15" fill="rgb(226,126,21)" fg:x="777" fg:w="1"/><text x="63.7304%" y="159.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.4804%" y="133" width="0.0817%" height="15" fill="rgb(227,192,1)" fg:x="777" fg:w="1"/><text x="63.7304%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.4804%" y="117" width="0.0817%" height="15" fill="rgb(237,180,29)" fg:x="777" fg:w="1"/><text x="63.7304%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.4804%" y="101" width="0.0817%" height="15" fill="rgb(230,197,35)" fg:x="777" fg:w="1"/><text x="63.7304%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="63.4804%" y="245" width="0.1634%" height="15" fill="rgb(246,193,31)" fg:x="777" fg:w="2"/><text x="63.7304%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.4804%" y="229" width="0.1634%" height="15" fill="rgb(241,36,4)" fg:x="777" fg:w="2"/><text x="63.7304%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="63.5621%" y="213" width="0.0817%" height="15" fill="rgb(241,130,17)" fg:x="778" fg:w="1"/><text x="63.8121%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="63.5621%" y="197" width="0.0817%" height="15" fill="rgb(206,137,32)" fg:x="778" fg:w="1"/><text x="63.8121%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="63.6438%" y="245" width="0.1634%" height="15" fill="rgb(237,228,51)" fg:x="779" fg:w="2"/><text x="63.8938%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="63.6438%" y="229" width="0.1634%" height="15" fill="rgb(243,6,42)" fg:x="779" fg:w="2"/><text x="63.8938%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="63.6438%" y="213" width="0.1634%" height="15" fill="rgb(251,74,28)" fg:x="779" fg:w="2"/><text x="63.8938%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="63.7255%" y="197" width="0.0817%" height="15" fill="rgb(218,20,49)" fg:x="780" fg:w="1"/><text x="63.9755%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7255%" y="181" width="0.0817%" height="15" fill="rgb(238,28,14)" fg:x="780" fg:w="1"/><text x="63.9755%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="63.8072%" y="213" width="0.0817%" height="15" fill="rgb(229,40,46)" fg:x="781" fg:w="1"/><text x="64.0572%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (7 samples, 0.57%)</title><rect x="63.3987%" y="341" width="0.5719%" height="15" fill="rgb(244,195,20)" fg:x="776" fg:w="7"/><text x="63.6487%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (7 samples, 0.57%)</title><rect x="63.3987%" y="325" width="0.5719%" height="15" fill="rgb(253,56,35)" fg:x="776" fg:w="7"/><text x="63.6487%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="63.3987%" y="309" width="0.5719%" height="15" fill="rgb(210,149,44)" fg:x="776" fg:w="7"/><text x="63.6487%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (7 samples, 0.57%)</title><rect x="63.3987%" y="293" width="0.5719%" height="15" fill="rgb(240,135,12)" fg:x="776" fg:w="7"/><text x="63.6487%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (7 samples, 0.57%)</title><rect x="63.3987%" y="277" width="0.5719%" height="15" fill="rgb(251,24,50)" fg:x="776" fg:w="7"/><text x="63.6487%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.49%)</title><rect x="63.4804%" y="261" width="0.4902%" height="15" fill="rgb(243,200,47)" fg:x="777" fg:w="6"/><text x="63.7304%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.8072%" y="245" width="0.1634%" height="15" fill="rgb(224,166,26)" fg:x="781" fg:w="2"/><text x="64.0572%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="63.8072%" y="229" width="0.1634%" height="15" fill="rgb(233,0,47)" fg:x="781" fg:w="2"/><text x="64.0572%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.8889%" y="213" width="0.0817%" height="15" fill="rgb(253,80,5)" fg:x="782" fg:w="1"/><text x="64.1389%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8889%" y="197" width="0.0817%" height="15" fill="rgb(214,133,25)" fg:x="782" fg:w="1"/><text x="64.1389%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8889%" y="181" width="0.0817%" height="15" fill="rgb(209,27,14)" fg:x="782" fg:w="1"/><text x="64.1389%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="63.8889%" y="165" width="0.0817%" height="15" fill="rgb(219,102,51)" fg:x="782" fg:w="1"/><text x="64.1389%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.8889%" y="149" width="0.0817%" height="15" fill="rgb(237,18,16)" fg:x="782" fg:w="1"/><text x="64.1389%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="63.8889%" y="133" width="0.0817%" height="15" fill="rgb(241,85,17)" fg:x="782" fg:w="1"/><text x="64.1389%" y="143.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="63.9706%" y="277" width="0.3268%" height="15" fill="rgb(236,90,42)" fg:x="783" fg:w="4"/><text x="64.2206%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="63.9706%" y="261" width="0.3268%" height="15" fill="rgb(249,57,21)" fg:x="783" fg:w="4"/><text x="64.2206%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="63.9706%" y="245" width="0.3268%" height="15" fill="rgb(243,12,36)" fg:x="783" fg:w="4"/><text x="64.2206%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="64.0523%" y="229" width="0.2451%" height="15" fill="rgb(253,128,47)" fg:x="784" fg:w="3"/><text x="64.3023%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2157%" y="213" width="0.0817%" height="15" fill="rgb(207,33,20)" fg:x="786" fg:w="1"/><text x="64.4657%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2157%" y="197" width="0.0817%" height="15" fill="rgb(233,215,35)" fg:x="786" fg:w="1"/><text x="64.4657%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2157%" y="181" width="0.0817%" height="15" fill="rgb(249,188,52)" fg:x="786" fg:w="1"/><text x="64.4657%" y="191.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.23%)</title><rect x="63.1536%" y="357" width="1.2255%" height="15" fill="rgb(225,12,32)" fg:x="773" fg:w="15"/><text x="63.4036%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="63.9706%" y="341" width="0.4085%" height="15" fill="rgb(247,98,14)" fg:x="783" fg:w="5"/><text x="64.2206%" y="351.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="63.9706%" y="325" width="0.4085%" height="15" fill="rgb(247,219,48)" fg:x="783" fg:w="5"/><text x="64.2206%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="63.9706%" y="309" width="0.4085%" height="15" fill="rgb(253,60,48)" fg:x="783" fg:w="5"/><text x="64.2206%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="63.9706%" y="293" width="0.4085%" height="15" fill="rgb(245,15,52)" fg:x="783" fg:w="5"/><text x="64.2206%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2974%" y="277" width="0.0817%" height="15" fill="rgb(220,133,28)" fg:x="787" fg:w="1"/><text x="64.5474%" y="287.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (16 samples, 1.31%)</title><rect x="63.1536%" y="405" width="1.3072%" height="15" fill="rgb(217,180,4)" fg:x="773" fg:w="16"/><text x="63.4036%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (16 samples, 1.31%)</title><rect x="63.1536%" y="389" width="1.3072%" height="15" fill="rgb(251,24,1)" fg:x="773" fg:w="16"/><text x="63.4036%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.31%)</title><rect x="63.1536%" y="373" width="1.3072%" height="15" fill="rgb(212,185,49)" fg:x="773" fg:w="16"/><text x="63.4036%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="64.3791%" y="357" width="0.0817%" height="15" fill="rgb(215,175,22)" fg:x="788" fg:w="1"/><text x="64.6291%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (479 samples, 39.13%)</title><rect x="25.4085%" y="629" width="39.1340%" height="15" fill="rgb(250,205,14)" fg:x="311" fg:w="479"/><text x="25.6585%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (479 samples, 39.13%)</title><rect x="25.4085%" y="613" width="39.1340%" height="15" fill="rgb(225,211,22)" fg:x="311" fg:w="479"/><text x="25.6585%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (479 samples, 39.13%)</title><rect x="25.4085%" y="597" width="39.1340%" height="15" fill="rgb(251,179,42)" fg:x="311" fg:w="479"/><text x="25.6585%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (479 samples, 39.13%)</title><rect x="25.4085%" y="581" width="39.1340%" height="15" fill="rgb(208,216,51)" fg:x="311" fg:w="479"/><text x="25.6585%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugin..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (463 samples, 37.83%)</title><rect x="26.7157%" y="565" width="37.8268%" height="15" fill="rgb(235,36,11)" fg:x="327" fg:w="463"/><text x="26.9657%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (463 samples, 37.83%)</title><rect x="26.7157%" y="549" width="37.8268%" height="15" fill="rgb(213,189,28)" fg:x="327" fg:w="463"/><text x="26.9657%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (463 samples, 37.83%)</title><rect x="26.7157%" y="533" width="37.8268%" height="15" fill="rgb(227,203,42)" fg:x="327" fg:w="463"/><text x="26.9657%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (462 samples, 37.75%)</title><rect x="26.7974%" y="517" width="37.7451%" height="15" fill="rgb(244,72,36)" fg:x="328" fg:w="462"/><text x="27.0474%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (462 samples, 37.75%)</title><rect x="26.7974%" y="501" width="37.7451%" height="15" fill="rgb(213,53,17)" fg:x="328" fg:w="462"/><text x="27.0474%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (462 samples, 37.75%)</title><rect x="26.7974%" y="485" width="37.7451%" height="15" fill="rgb(207,167,3)" fg:x="328" fg:w="462"/><text x="27.0474%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (462 samples, 37.75%)</title><rect x="26.7974%" y="469" width="37.7451%" height="15" fill="rgb(216,98,30)" fg:x="328" fg:w="462"/><text x="27.0474%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (462 samples, 37.75%)</title><rect x="26.7974%" y="453" width="37.7451%" height="15" fill="rgb(236,123,15)" fg:x="328" fg:w="462"/><text x="27.0474%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (462 samples, 37.75%)</title><rect x="26.7974%" y="437" width="37.7451%" height="15" fill="rgb(248,81,50)" fg:x="328" fg:w="462"/><text x="27.0474%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (455 samples, 37.17%)</title><rect x="27.3693%" y="421" width="37.1732%" height="15" fill="rgb(214,120,4)" fg:x="335" fg:w="455"/><text x="27.6193%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="64.4608%" y="405" width="0.0817%" height="15" fill="rgb(208,179,34)" fg:x="789" fg:w="1"/><text x="64.7108%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.4608%" y="389" width="0.0817%" height="15" fill="rgb(227,140,7)" fg:x="789" fg:w="1"/><text x="64.7108%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="64.5425%" y="629" width="0.0817%" height="15" fill="rgb(214,22,6)" fg:x="790" fg:w="1"/><text x="64.7925%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6242%" y="581" width="0.0817%" height="15" fill="rgb(207,137,27)" fg:x="791" fg:w="1"/><text x="64.8742%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6242%" y="565" width="0.0817%" height="15" fill="rgb(210,8,46)" fg:x="791" fg:w="1"/><text x="64.8742%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.6242%" y="549" width="0.0817%" height="15" fill="rgb(240,16,54)" fg:x="791" fg:w="1"/><text x="64.8742%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.6242%" y="533" width="0.0817%" height="15" fill="rgb(211,209,29)" fg:x="791" fg:w="1"/><text x="64.8742%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.6242%" y="517" width="0.0817%" height="15" fill="rgb(226,228,24)" fg:x="791" fg:w="1"/><text x="64.8742%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="64.6242%" y="501" width="0.0817%" height="15" fill="rgb(222,84,9)" fg:x="791" fg:w="1"/><text x="64.8742%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="64.6242%" y="485" width="0.0817%" height="15" fill="rgb(234,203,30)" fg:x="791" fg:w="1"/><text x="64.8742%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="64.6242%" y="469" width="0.0817%" height="15" fill="rgb(238,109,14)" fg:x="791" fg:w="1"/><text x="64.8742%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="64.6242%" y="453" width="0.0817%" height="15" fill="rgb(233,206,34)" fg:x="791" fg:w="1"/><text x="64.8742%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="64.6242%" y="437" width="0.0817%" height="15" fill="rgb(220,167,47)" fg:x="791" fg:w="1"/><text x="64.8742%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7876%" y="437" width="0.0817%" height="15" fill="rgb(238,105,10)" fg:x="793" fg:w="1"/><text x="65.0376%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.7876%" y="421" width="0.0817%" height="15" fill="rgb(213,227,17)" fg:x="793" fg:w="1"/><text x="65.0376%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.8693%" y="405" width="0.0817%" height="15" fill="rgb(217,132,38)" fg:x="794" fg:w="1"/><text x="65.1193%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="64.8693%" y="421" width="0.1634%" height="15" fill="rgb(242,146,4)" fg:x="794" fg:w="2"/><text x="65.1193%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="64.9510%" y="405" width="0.0817%" height="15" fill="rgb(212,61,9)" fg:x="795" fg:w="1"/><text x="65.2010%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.9510%" y="389" width="0.0817%" height="15" fill="rgb(247,126,22)" fg:x="795" fg:w="1"/><text x="65.2010%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.9510%" y="373" width="0.0817%" height="15" fill="rgb(220,196,2)" fg:x="795" fg:w="1"/><text x="65.2010%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="64.8693%" y="437" width="0.2451%" height="15" fill="rgb(208,46,4)" fg:x="794" fg:w="3"/><text x="65.1193%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;core::iter::adapters::flatten::FlatMap&lt;serde_json::map::Iter,core::option::Option&lt;alloc::vec::Vec&lt;kernel::model::entity_ref::EntityRef&gt;&gt;,kernel::model::entity_ref::find_entity_refs::{{closure}}&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="65.0327%" y="421" width="0.0817%" height="15" fill="rgb(252,104,46)" fg:x="796" fg:w="1"/><text x="65.2827%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.1144%" y="389" width="0.0817%" height="15" fill="rgb(237,152,48)" fg:x="797" fg:w="1"/><text x="65.3644%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.1144%" y="373" width="0.0817%" height="15" fill="rgb(221,59,37)" fg:x="797" fg:w="1"/><text x="65.3644%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.1144%" y="357" width="0.0817%" height="15" fill="rgb(209,202,51)" fg:x="797" fg:w="1"/><text x="65.3644%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.57%)</title><rect x="64.7059%" y="533" width="0.5719%" height="15" fill="rgb(228,81,30)" fg:x="792" fg:w="7"/><text x="64.9559%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.57%)</title><rect x="64.7059%" y="517" width="0.5719%" height="15" fill="rgb(227,42,39)" fg:x="792" fg:w="7"/><text x="64.9559%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="64.7876%" y="501" width="0.4902%" height="15" fill="rgb(221,26,2)" fg:x="793" fg:w="6"/><text x="65.0376%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="64.7876%" y="485" width="0.4902%" height="15" fill="rgb(254,61,31)" fg:x="793" fg:w="6"/><text x="65.0376%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="64.7876%" y="469" width="0.4902%" height="15" fill="rgb(222,173,38)" fg:x="793" fg:w="6"/><text x="65.0376%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (6 samples, 0.49%)</title><rect x="64.7876%" y="453" width="0.4902%" height="15" fill="rgb(218,50,12)" fg:x="793" fg:w="6"/><text x="65.0376%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.1144%" y="437" width="0.1634%" height="15" fill="rgb(223,88,40)" fg:x="797" fg:w="2"/><text x="65.3644%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.1144%" y="421" width="0.1634%" height="15" fill="rgb(237,54,19)" fg:x="797" fg:w="2"/><text x="65.3644%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="65.1144%" y="405" width="0.1634%" height="15" fill="rgb(251,129,25)" fg:x="797" fg:w="2"/><text x="65.3644%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="65.1961%" y="389" width="0.0817%" height="15" fill="rgb(238,97,19)" fg:x="798" fg:w="1"/><text x="65.4461%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="65.1961%" y="373" width="0.0817%" height="15" fill="rgb(240,169,18)" fg:x="798" fg:w="1"/><text x="65.4461%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="65.1961%" y="357" width="0.0817%" height="15" fill="rgb(230,187,49)" fg:x="798" fg:w="1"/><text x="65.4461%" y="367.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="65.1961%" y="341" width="0.0817%" height="15" fill="rgb(209,44,26)" fg:x="798" fg:w="1"/><text x="65.4461%" y="351.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.08%)</title><rect x="65.1961%" y="325" width="0.0817%" height="15" fill="rgb(244,0,6)" fg:x="798" fg:w="1"/><text x="65.4461%" y="335.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.08%)</title><rect x="65.1961%" y="309" width="0.0817%" height="15" fill="rgb(248,18,21)" fg:x="798" fg:w="1"/><text x="65.4461%" y="319.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.08%)</title><rect x="65.1961%" y="293" width="0.0817%" height="15" fill="rgb(245,180,19)" fg:x="798" fg:w="1"/><text x="65.4461%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="64.7059%" y="581" width="0.6536%" height="15" fill="rgb(252,118,36)" fg:x="792" fg:w="8"/><text x="64.9559%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="64.7059%" y="565" width="0.6536%" height="15" fill="rgb(210,224,19)" fg:x="792" fg:w="8"/><text x="64.9559%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="64.7059%" y="549" width="0.6536%" height="15" fill="rgb(218,30,24)" fg:x="792" fg:w="8"/><text x="64.9559%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.2778%" y="533" width="0.0817%" height="15" fill="rgb(219,75,50)" fg:x="799" fg:w="1"/><text x="65.5278%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.2778%" y="517" width="0.0817%" height="15" fill="rgb(234,72,50)" fg:x="799" fg:w="1"/><text x="65.5278%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (10 samples, 0.82%)</title><rect x="64.6242%" y="613" width="0.8170%" height="15" fill="rgb(219,100,48)" fg:x="791" fg:w="10"/><text x="64.8742%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (10 samples, 0.82%)</title><rect x="64.6242%" y="597" width="0.8170%" height="15" fill="rgb(253,5,41)" fg:x="791" fg:w="10"/><text x="64.8742%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.3595%" y="581" width="0.0817%" height="15" fill="rgb(247,181,11)" fg:x="800" fg:w="1"/><text x="65.6095%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.3595%" y="565" width="0.0817%" height="15" fill="rgb(222,223,25)" fg:x="800" fg:w="1"/><text x="65.6095%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.3595%" y="549" width="0.0817%" height="15" fill="rgb(214,198,28)" fg:x="800" fg:w="1"/><text x="65.6095%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="65.3595%" y="533" width="0.0817%" height="15" fill="rgb(230,46,43)" fg:x="800" fg:w="1"/><text x="65.6095%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.3595%" y="517" width="0.0817%" height="15" fill="rgb(233,65,53)" fg:x="800" fg:w="1"/><text x="65.6095%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3595%" y="501" width="0.0817%" height="15" fill="rgb(221,121,27)" fg:x="800" fg:w="1"/><text x="65.6095%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4412%" y="597" width="0.0817%" height="15" fill="rgb(247,70,47)" fg:x="801" fg:w="1"/><text x="65.6912%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4412%" y="581" width="0.0817%" height="15" fill="rgb(228,85,35)" fg:x="801" fg:w="1"/><text x="65.6912%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4412%" y="565" width="0.0817%" height="15" fill="rgb(209,50,18)" fg:x="801" fg:w="1"/><text x="65.6912%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.4412%" y="549" width="0.0817%" height="15" fill="rgb(250,19,35)" fg:x="801" fg:w="1"/><text x="65.6912%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.4412%" y="533" width="0.0817%" height="15" fill="rgb(253,107,29)" fg:x="801" fg:w="1"/><text x="65.6912%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.4412%" y="517" width="0.0817%" height="15" fill="rgb(252,179,29)" fg:x="801" fg:w="1"/><text x="65.6912%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.4412%" y="501" width="0.0817%" height="15" fill="rgb(238,194,6)" fg:x="801" fg:w="1"/><text x="65.6912%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.4412%" y="485" width="0.0817%" height="15" fill="rgb(238,164,29)" fg:x="801" fg:w="1"/><text x="65.6912%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.4412%" y="469" width="0.0817%" height="15" fill="rgb(224,25,9)" fg:x="801" fg:w="1"/><text x="65.6912%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.4412%" y="453" width="0.0817%" height="15" fill="rgb(244,153,23)" fg:x="801" fg:w="1"/><text x="65.6912%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.4412%" y="437" width="0.0817%" height="15" fill="rgb(212,203,14)" fg:x="801" fg:w="1"/><text x="65.6912%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.4412%" y="421" width="0.0817%" height="15" fill="rgb(220,164,20)" fg:x="801" fg:w="1"/><text x="65.6912%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.4412%" y="405" width="0.0817%" height="15" fill="rgb(222,203,48)" fg:x="801" fg:w="1"/><text x="65.6912%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.4412%" y="389" width="0.0817%" height="15" fill="rgb(215,159,22)" fg:x="801" fg:w="1"/><text x="65.6912%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.4412%" y="373" width="0.0817%" height="15" fill="rgb(216,183,47)" fg:x="801" fg:w="1"/><text x="65.6912%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4412%" y="357" width="0.0817%" height="15" fill="rgb(229,195,25)" fg:x="801" fg:w="1"/><text x="65.6912%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="65.5229%" y="597" width="0.0817%" height="15" fill="rgb(224,132,51)" fg:x="802" fg:w="1"/><text x="65.7729%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.5229%" y="581" width="0.0817%" height="15" fill="rgb(240,63,7)" fg:x="802" fg:w="1"/><text x="65.7729%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5229%" y="565" width="0.0817%" height="15" fill="rgb(249,182,41)" fg:x="802" fg:w="1"/><text x="65.7729%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="65.5229%" y="549" width="0.0817%" height="15" fill="rgb(243,47,26)" fg:x="802" fg:w="1"/><text x="65.7729%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.5229%" y="533" width="0.0817%" height="15" fill="rgb(233,48,2)" fg:x="802" fg:w="1"/><text x="65.7729%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.5229%" y="517" width="0.0817%" height="15" fill="rgb(244,165,34)" fg:x="802" fg:w="1"/><text x="65.7729%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.5229%" y="501" width="0.0817%" height="15" fill="rgb(207,89,7)" fg:x="802" fg:w="1"/><text x="65.7729%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.5229%" y="485" width="0.0817%" height="15" fill="rgb(244,117,36)" fg:x="802" fg:w="1"/><text x="65.7729%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="65.5229%" y="469" width="0.0817%" height="15" fill="rgb(226,144,34)" fg:x="802" fg:w="1"/><text x="65.7729%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.5229%" y="453" width="0.0817%" height="15" fill="rgb(213,23,19)" fg:x="802" fg:w="1"/><text x="65.7729%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.5229%" y="437" width="0.0817%" height="15" fill="rgb(217,75,12)" fg:x="802" fg:w="1"/><text x="65.7729%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.5229%" y="421" width="0.0817%" height="15" fill="rgb(224,159,17)" fg:x="802" fg:w="1"/><text x="65.7729%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="65.6046%" y="485" width="0.0817%" height="15" fill="rgb(217,118,1)" fg:x="803" fg:w="1"/><text x="65.8546%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.7680%" y="453" width="0.0817%" height="15" fill="rgb(232,180,48)" fg:x="805" fg:w="1"/><text x="66.0180%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.7680%" y="437" width="0.0817%" height="15" fill="rgb(230,27,33)" fg:x="805" fg:w="1"/><text x="66.0180%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.7680%" y="421" width="0.0817%" height="15" fill="rgb(205,31,21)" fg:x="805" fg:w="1"/><text x="66.0180%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="65.7680%" y="405" width="0.0817%" height="15" fill="rgb(253,59,4)" fg:x="805" fg:w="1"/><text x="66.0180%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="65.6046%" y="501" width="0.3268%" height="15" fill="rgb(224,201,9)" fg:x="803" fg:w="4"/><text x="65.8546%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="65.6863%" y="485" width="0.2451%" height="15" fill="rgb(229,206,30)" fg:x="804" fg:w="3"/><text x="65.9363%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="65.7680%" y="469" width="0.1634%" height="15" fill="rgb(212,67,47)" fg:x="805" fg:w="2"/><text x="66.0180%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.8497%" y="453" width="0.0817%" height="15" fill="rgb(211,96,50)" fg:x="806" fg:w="1"/><text x="66.0997%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="65.8497%" y="437" width="0.0817%" height="15" fill="rgb(252,114,18)" fg:x="806" fg:w="1"/><text x="66.0997%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (17 samples, 1.39%)</title><rect x="64.6242%" y="629" width="1.3889%" height="15" fill="rgb(223,58,37)" fg:x="791" fg:w="17"/><text x="64.8742%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="65.4412%" y="613" width="0.5719%" height="15" fill="rgb(237,70,4)" fg:x="801" fg:w="7"/><text x="65.6912%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="65.6046%" y="597" width="0.4085%" height="15" fill="rgb(244,85,46)" fg:x="803" fg:w="5"/><text x="65.8546%" y="607.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="65.6046%" y="581" width="0.4085%" height="15" fill="rgb(223,39,52)" fg:x="803" fg:w="5"/><text x="65.8546%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="65.6046%" y="565" width="0.4085%" height="15" fill="rgb(218,200,14)" fg:x="803" fg:w="5"/><text x="65.8546%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="65.6046%" y="549" width="0.4085%" height="15" fill="rgb(208,171,16)" fg:x="803" fg:w="5"/><text x="65.8546%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="65.6046%" y="533" width="0.4085%" height="15" fill="rgb(234,200,18)" fg:x="803" fg:w="5"/><text x="65.8546%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="65.6046%" y="517" width="0.4085%" height="15" fill="rgb(228,45,11)" fg:x="803" fg:w="5"/><text x="65.8546%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.9314%" y="501" width="0.0817%" height="15" fill="rgb(237,182,11)" fg:x="807" fg:w="1"/><text x="66.1814%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.9314%" y="485" width="0.0817%" height="15" fill="rgb(241,175,49)" fg:x="807" fg:w="1"/><text x="66.1814%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1765%" y="581" width="0.1634%" height="15" fill="rgb(247,38,35)" fg:x="810" fg:w="2"/><text x="66.4265%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.1765%" y="565" width="0.1634%" height="15" fill="rgb(228,39,49)" fg:x="810" fg:w="2"/><text x="66.4265%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2582%" y="549" width="0.0817%" height="15" fill="rgb(226,101,26)" fg:x="811" fg:w="1"/><text x="66.5082%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.2582%" y="533" width="0.0817%" height="15" fill="rgb(206,141,19)" fg:x="811" fg:w="1"/><text x="66.5082%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2582%" y="517" width="0.0817%" height="15" fill="rgb(211,200,13)" fg:x="811" fg:w="1"/><text x="66.5082%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.2582%" y="501" width="0.0817%" height="15" fill="rgb(241,121,6)" fg:x="811" fg:w="1"/><text x="66.5082%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.2582%" y="485" width="0.0817%" height="15" fill="rgb(234,221,29)" fg:x="811" fg:w="1"/><text x="66.5082%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.2582%" y="469" width="0.0817%" height="15" fill="rgb(229,136,5)" fg:x="811" fg:w="1"/><text x="66.5082%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.2582%" y="453" width="0.0817%" height="15" fill="rgb(238,36,11)" fg:x="811" fg:w="1"/><text x="66.5082%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="66.2582%" y="437" width="0.0817%" height="15" fill="rgb(251,55,41)" fg:x="811" fg:w="1"/><text x="66.5082%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="66.2582%" y="421" width="0.0817%" height="15" fill="rgb(242,34,40)" fg:x="811" fg:w="1"/><text x="66.5082%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="66.3399%" y="565" width="0.0817%" height="15" fill="rgb(215,42,17)" fg:x="812" fg:w="1"/><text x="66.5899%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3399%" y="549" width="0.0817%" height="15" fill="rgb(207,44,46)" fg:x="812" fg:w="1"/><text x="66.5899%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4216%" y="533" width="0.0817%" height="15" fill="rgb(211,206,28)" fg:x="813" fg:w="1"/><text x="66.6716%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4216%" y="517" width="0.0817%" height="15" fill="rgb(237,167,16)" fg:x="813" fg:w="1"/><text x="66.6716%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4216%" y="501" width="0.0817%" height="15" fill="rgb(233,66,6)" fg:x="813" fg:w="1"/><text x="66.6716%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4216%" y="485" width="0.0817%" height="15" fill="rgb(246,123,29)" fg:x="813" fg:w="1"/><text x="66.6716%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4216%" y="469" width="0.0817%" height="15" fill="rgb(209,62,40)" fg:x="813" fg:w="1"/><text x="66.6716%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.4216%" y="453" width="0.0817%" height="15" fill="rgb(218,4,25)" fg:x="813" fg:w="1"/><text x="66.6716%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.4216%" y="437" width="0.0817%" height="15" fill="rgb(253,91,49)" fg:x="813" fg:w="1"/><text x="66.6716%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.4216%" y="421" width="0.0817%" height="15" fill="rgb(228,155,29)" fg:x="813" fg:w="1"/><text x="66.6716%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4216%" y="405" width="0.0817%" height="15" fill="rgb(243,57,37)" fg:x="813" fg:w="1"/><text x="66.6716%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4216%" y="389" width="0.0817%" height="15" fill="rgb(244,167,17)" fg:x="813" fg:w="1"/><text x="66.6716%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.4216%" y="373" width="0.0817%" height="15" fill="rgb(207,181,38)" fg:x="813" fg:w="1"/><text x="66.6716%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.4216%" y="357" width="0.0817%" height="15" fill="rgb(211,8,23)" fg:x="813" fg:w="1"/><text x="66.6716%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.4216%" y="341" width="0.0817%" height="15" fill="rgb(235,11,44)" fg:x="813" fg:w="1"/><text x="66.6716%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.4216%" y="325" width="0.0817%" height="15" fill="rgb(248,18,52)" fg:x="813" fg:w="1"/><text x="66.6716%" y="335.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="66.4216%" y="309" width="0.0817%" height="15" fill="rgb(208,4,7)" fg:x="813" fg:w="1"/><text x="66.6716%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="66.4216%" y="293" width="0.0817%" height="15" fill="rgb(240,17,39)" fg:x="813" fg:w="1"/><text x="66.6716%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="66.3399%" y="581" width="0.2451%" height="15" fill="rgb(207,170,3)" fg:x="812" fg:w="3"/><text x="66.5899%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="66.4216%" y="565" width="0.1634%" height="15" fill="rgb(236,100,52)" fg:x="813" fg:w="2"/><text x="66.6716%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="66.4216%" y="549" width="0.1634%" height="15" fill="rgb(246,78,51)" fg:x="813" fg:w="2"/><text x="66.6716%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.5033%" y="533" width="0.0817%" height="15" fill="rgb(211,17,15)" fg:x="814" fg:w="1"/><text x="66.7533%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5033%" y="517" width="0.0817%" height="15" fill="rgb(209,59,46)" fg:x="814" fg:w="1"/><text x="66.7533%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.5033%" y="501" width="0.0817%" height="15" fill="rgb(210,92,25)" fg:x="814" fg:w="1"/><text x="66.7533%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.5033%" y="485" width="0.0817%" height="15" fill="rgb(238,174,52)" fg:x="814" fg:w="1"/><text x="66.7533%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="66.5850%" y="581" width="0.0817%" height="15" fill="rgb(230,73,7)" fg:x="815" fg:w="1"/><text x="66.8350%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5850%" y="565" width="0.0817%" height="15" fill="rgb(243,124,40)" fg:x="815" fg:w="1"/><text x="66.8350%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5850%" y="549" width="0.0817%" height="15" fill="rgb(244,170,11)" fg:x="815" fg:w="1"/><text x="66.8350%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.5850%" y="533" width="0.0817%" height="15" fill="rgb(207,114,54)" fg:x="815" fg:w="1"/><text x="66.8350%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="66.6667%" y="485" width="0.0817%" height="15" fill="rgb(205,42,20)" fg:x="816" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.6667%" y="469" width="0.0817%" height="15" fill="rgb(230,30,28)" fg:x="816" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="66.6667%" y="453" width="0.0817%" height="15" fill="rgb(205,73,54)" fg:x="816" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.25%)</title><rect x="66.6667%" y="581" width="0.2451%" height="15" fill="rgb(254,227,23)" fg:x="816" fg:w="3"/><text x="66.9167%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="66.6667%" y="565" width="0.2451%" height="15" fill="rgb(228,202,34)" fg:x="816" fg:w="3"/><text x="66.9167%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="66.6667%" y="549" width="0.2451%" height="15" fill="rgb(222,225,37)" fg:x="816" fg:w="3"/><text x="66.9167%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="66.6667%" y="533" width="0.2451%" height="15" fill="rgb(221,14,54)" fg:x="816" fg:w="3"/><text x="66.9167%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="66.6667%" y="517" width="0.2451%" height="15" fill="rgb(254,102,2)" fg:x="816" fg:w="3"/><text x="66.9167%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.25%)</title><rect x="66.6667%" y="501" width="0.2451%" height="15" fill="rgb(232,104,17)" fg:x="816" fg:w="3"/><text x="66.9167%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="66.7484%" y="485" width="0.1634%" height="15" fill="rgb(250,220,14)" fg:x="817" fg:w="2"/><text x="66.9984%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8301%" y="469" width="0.0817%" height="15" fill="rgb(241,158,9)" fg:x="818" fg:w="1"/><text x="67.0801%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.8301%" y="453" width="0.0817%" height="15" fill="rgb(246,9,43)" fg:x="818" fg:w="1"/><text x="67.0801%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8301%" y="437" width="0.0817%" height="15" fill="rgb(206,73,33)" fg:x="818" fg:w="1"/><text x="67.0801%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8301%" y="421" width="0.0817%" height="15" fill="rgb(222,79,8)" fg:x="818" fg:w="1"/><text x="67.0801%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.8301%" y="405" width="0.0817%" height="15" fill="rgb(234,8,54)" fg:x="818" fg:w="1"/><text x="67.0801%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8301%" y="389" width="0.0817%" height="15" fill="rgb(209,134,38)" fg:x="818" fg:w="1"/><text x="67.0801%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8301%" y="373" width="0.0817%" height="15" fill="rgb(230,127,29)" fg:x="818" fg:w="1"/><text x="67.0801%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.8301%" y="357" width="0.0817%" height="15" fill="rgb(242,44,41)" fg:x="818" fg:w="1"/><text x="67.0801%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9118%" y="485" width="0.0817%" height="15" fill="rgb(222,56,43)" fg:x="819" fg:w="1"/><text x="67.1618%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9118%" y="469" width="0.0817%" height="15" fill="rgb(238,39,47)" fg:x="819" fg:w="1"/><text x="67.1618%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9118%" y="453" width="0.0817%" height="15" fill="rgb(226,79,43)" fg:x="819" fg:w="1"/><text x="67.1618%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9118%" y="437" width="0.0817%" height="15" fill="rgb(242,105,53)" fg:x="819" fg:w="1"/><text x="67.1618%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9118%" y="421" width="0.0817%" height="15" fill="rgb(251,132,46)" fg:x="819" fg:w="1"/><text x="67.1618%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.9118%" y="405" width="0.0817%" height="15" fill="rgb(231,77,14)" fg:x="819" fg:w="1"/><text x="67.1618%" y="415.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (511 samples, 41.75%)</title><rect x="25.3268%" y="661" width="41.7484%" height="15" fill="rgb(240,135,9)" fg:x="310" fg:w="511"/><text x="25.5768%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (511 samples, 41.75%)</title><rect x="25.3268%" y="645" width="41.7484%" height="15" fill="rgb(248,109,14)" fg:x="310" fg:w="511"/><text x="25.5768%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (13 samples, 1.06%)</title><rect x="66.0131%" y="629" width="1.0621%" height="15" fill="rgb(227,146,52)" fg:x="808" fg:w="13"/><text x="66.2631%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.06%)</title><rect x="66.0131%" y="613" width="1.0621%" height="15" fill="rgb(232,54,3)" fg:x="808" fg:w="13"/><text x="66.2631%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.06%)</title><rect x="66.0131%" y="597" width="1.0621%" height="15" fill="rgb(229,201,43)" fg:x="808" fg:w="13"/><text x="66.2631%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="66.9118%" y="581" width="0.1634%" height="15" fill="rgb(252,161,33)" fg:x="819" fg:w="2"/><text x="67.1618%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="66.9118%" y="565" width="0.1634%" height="15" fill="rgb(226,146,40)" fg:x="819" fg:w="2"/><text x="67.1618%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.9118%" y="549" width="0.1634%" height="15" fill="rgb(219,47,25)" fg:x="819" fg:w="2"/><text x="67.1618%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9118%" y="533" width="0.1634%" height="15" fill="rgb(250,135,13)" fg:x="819" fg:w="2"/><text x="67.1618%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.9118%" y="517" width="0.1634%" height="15" fill="rgb(219,229,18)" fg:x="819" fg:w="2"/><text x="67.1618%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9118%" y="501" width="0.1634%" height="15" fill="rgb(217,152,27)" fg:x="819" fg:w="2"/><text x="67.1618%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="66.9935%" y="485" width="0.0817%" height="15" fill="rgb(225,71,47)" fg:x="820" fg:w="1"/><text x="67.2435%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="66.9935%" y="469" width="0.0817%" height="15" fill="rgb(220,139,14)" fg:x="820" fg:w="1"/><text x="67.2435%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (822 samples, 67.16%)</title><rect x="0.0000%" y="709" width="67.1569%" height="15" fill="rgb(247,54,32)" fg:x="0" fg:w="822"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (822 samples, 67.16%)</title><rect x="0.0000%" y="693" width="67.1569%" height="15" fill="rgb(252,131,39)" fg:x="0" fg:w="822"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (822 samples, 67.16%)</title><rect x="0.0000%" y="677" width="67.1569%" height="15" fill="rgb(210,108,39)" fg:x="0" fg:w="822"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="67.0752%" y="661" width="0.0817%" height="15" fill="rgb(205,23,29)" fg:x="821" fg:w="1"/><text x="67.3252%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.0752%" y="645" width="0.0817%" height="15" fill="rgb(246,139,46)" fg:x="821" fg:w="1"/><text x="67.3252%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.0752%" y="629" width="0.0817%" height="15" fill="rgb(250,81,26)" fg:x="821" fg:w="1"/><text x="67.3252%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.0752%" y="613" width="0.0817%" height="15" fill="rgb(214,104,7)" fg:x="821" fg:w="1"/><text x="67.3252%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.1569%" y="629" width="0.0817%" height="15" fill="rgb(233,189,8)" fg:x="822" fg:w="1"/><text x="67.4069%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.1569%" y="661" width="0.1634%" height="15" fill="rgb(228,141,17)" fg:x="822" fg:w="2"/><text x="67.4069%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.1569%" y="645" width="0.1634%" height="15" fill="rgb(247,157,1)" fg:x="822" fg:w="2"/><text x="67.4069%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.2386%" y="629" width="0.0817%" height="15" fill="rgb(249,225,5)" fg:x="823" fg:w="1"/><text x="67.4886%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.3203%" y="645" width="0.1634%" height="15" fill="rgb(242,55,13)" fg:x="824" fg:w="2"/><text x="67.5703%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.5654%" y="517" width="0.0817%" height="15" fill="rgb(230,49,50)" fg:x="827" fg:w="1"/><text x="67.8154%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5654%" y="501" width="0.0817%" height="15" fill="rgb(241,111,38)" fg:x="827" fg:w="1"/><text x="67.8154%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6471%" y="517" width="0.0817%" height="15" fill="rgb(252,155,4)" fg:x="828" fg:w="1"/><text x="67.8971%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7288%" y="501" width="0.0817%" height="15" fill="rgb(212,69,32)" fg:x="829" fg:w="1"/><text x="67.9788%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="67.4837%" y="581" width="0.4085%" height="15" fill="rgb(243,107,47)" fg:x="826" fg:w="5"/><text x="67.7337%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="67.4837%" y="565" width="0.4085%" height="15" fill="rgb(247,130,12)" fg:x="826" fg:w="5"/><text x="67.7337%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="67.4837%" y="549" width="0.4085%" height="15" fill="rgb(233,74,16)" fg:x="826" fg:w="5"/><text x="67.7337%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="67.4837%" y="533" width="0.4085%" height="15" fill="rgb(208,58,18)" fg:x="826" fg:w="5"/><text x="67.7337%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="67.7288%" y="517" width="0.1634%" height="15" fill="rgb(242,225,1)" fg:x="829" fg:w="2"/><text x="67.9788%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.8105%" y="501" width="0.0817%" height="15" fill="rgb(249,39,40)" fg:x="830" fg:w="1"/><text x="68.0605%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="67.8922%" y="549" width="0.1634%" height="15" fill="rgb(207,72,44)" fg:x="831" fg:w="2"/><text x="68.1422%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.8922%" y="533" width="0.1634%" height="15" fill="rgb(215,193,12)" fg:x="831" fg:w="2"/><text x="68.1422%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0556%" y="533" width="0.0817%" height="15" fill="rgb(248,41,39)" fg:x="833" fg:w="1"/><text x="68.3056%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1373%" y="533" width="0.0817%" height="15" fill="rgb(253,85,4)" fg:x="834" fg:w="1"/><text x="68.3873%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1373%" y="517" width="0.0817%" height="15" fill="rgb(243,70,31)" fg:x="834" fg:w="1"/><text x="68.3873%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="67.8922%" y="565" width="0.4902%" height="15" fill="rgb(253,195,26)" fg:x="831" fg:w="6"/><text x="68.1422%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="68.0556%" y="549" width="0.3268%" height="15" fill="rgb(243,42,11)" fg:x="833" fg:w="4"/><text x="68.3056%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.2190%" y="533" width="0.1634%" height="15" fill="rgb(239,66,17)" fg:x="835" fg:w="2"/><text x="68.4690%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3007%" y="517" width="0.0817%" height="15" fill="rgb(217,132,21)" fg:x="836" fg:w="1"/><text x="68.5507%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.57%)</title><rect x="67.8922%" y="581" width="0.5719%" height="15" fill="rgb(252,202,21)" fg:x="831" fg:w="7"/><text x="68.1422%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.3824%" y="565" width="0.0817%" height="15" fill="rgb(233,98,36)" fg:x="837" fg:w="1"/><text x="68.6324%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.23%)</title><rect x="67.3203%" y="661" width="1.2255%" height="15" fill="rgb(216,153,54)" fg:x="824" fg:w="15"/><text x="67.5703%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (13 samples, 1.06%)</title><rect x="67.4837%" y="645" width="1.0621%" height="15" fill="rgb(250,99,7)" fg:x="826" fg:w="13"/><text x="67.7337%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.06%)</title><rect x="67.4837%" y="629" width="1.0621%" height="15" fill="rgb(207,56,50)" fg:x="826" fg:w="13"/><text x="67.7337%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (13 samples, 1.06%)</title><rect x="67.4837%" y="613" width="1.0621%" height="15" fill="rgb(244,61,34)" fg:x="826" fg:w="13"/><text x="67.7337%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.06%)</title><rect x="67.4837%" y="597" width="1.0621%" height="15" fill="rgb(241,50,38)" fg:x="826" fg:w="13"/><text x="67.7337%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.4641%" y="581" width="0.0817%" height="15" fill="rgb(212,166,30)" fg:x="838" fg:w="1"/><text x="68.7141%" y="591.50"></text></g><g><title>&lt;engine::storage::InMemoryStorageFactory as engine::storage::StorageFactory&gt;::create_storage (1 samples, 0.08%)</title><rect x="68.5458%" y="629" width="0.0817%" height="15" fill="rgb(249,127,32)" fg:x="839" fg:w="1"/><text x="68.7958%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.5458%" y="613" width="0.0817%" height="15" fill="rgb(209,103,0)" fg:x="839" fg:w="1"/><text x="68.7958%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7092%" y="565" width="0.0817%" height="15" fill="rgb(238,209,51)" fg:x="841" fg:w="1"/><text x="68.9592%" y="575.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="68.7908%" y="549" width="0.1634%" height="15" fill="rgb(237,56,23)" fg:x="842" fg:w="2"/><text x="69.0408%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="68.8725%" y="533" width="0.0817%" height="15" fill="rgb(215,153,46)" fg:x="843" fg:w="1"/><text x="69.1225%" y="543.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.33%)</title><rect x="68.7092%" y="581" width="0.3268%" height="15" fill="rgb(224,49,31)" fg:x="841" fg:w="4"/><text x="68.9592%" y="591.50"></text></g><g><title>libloading::safe::Library::new (3 samples, 0.25%)</title><rect x="68.7908%" y="565" width="0.2451%" height="15" fill="rgb(250,18,42)" fg:x="842" fg:w="3"/><text x="69.0408%" y="575.50"></text></g><g><title>dlopen (1 samples, 0.08%)</title><rect x="68.9542%" y="549" width="0.0817%" height="15" fill="rgb(215,176,39)" fg:x="844" fg:w="1"/><text x="69.2042%" y="559.50"></text></g><g><title>_dl_catch_error (1 samples, 0.08%)</title><rect x="68.9542%" y="533" width="0.0817%" height="15" fill="rgb(223,77,29)" fg:x="844" fg:w="1"/><text x="69.2042%" y="543.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.9542%" y="517" width="0.0817%" height="15" fill="rgb(234,94,52)" fg:x="844" fg:w="1"/><text x="69.2042%" y="527.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.08%)</title><rect x="68.9542%" y="501" width="0.0817%" height="15" fill="rgb(220,154,50)" fg:x="844" fg:w="1"/><text x="69.2042%" y="511.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="68.6275%" y="597" width="0.5719%" height="15" fill="rgb(212,11,10)" fg:x="840" fg:w="7"/><text x="68.8775%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="69.0359%" y="581" width="0.1634%" height="15" fill="rgb(205,166,19)" fg:x="845" fg:w="2"/><text x="69.2859%" y="591.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="69.0359%" y="565" width="0.1634%" height="15" fill="rgb(244,198,16)" fg:x="845" fg:w="2"/><text x="69.2859%" y="575.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.74%)</title><rect x="68.5458%" y="661" width="0.7353%" height="15" fill="rgb(219,69,12)" fg:x="839" fg:w="9"/><text x="68.7958%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.74%)</title><rect x="68.5458%" y="645" width="0.7353%" height="15" fill="rgb(245,30,7)" fg:x="839" fg:w="9"/><text x="68.7958%" y="655.50"></text></g><g><title>engine::session::Session::new (8 samples, 0.65%)</title><rect x="68.6275%" y="629" width="0.6536%" height="15" fill="rgb(218,221,48)" fg:x="840" fg:w="8"/><text x="68.8775%" y="639.50"></text></g><g><title>engine::session::Session::initialize (8 samples, 0.65%)</title><rect x="68.6275%" y="613" width="0.6536%" height="15" fill="rgb(216,66,15)" fg:x="840" fg:w="8"/><text x="68.8775%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="69.1993%" y="597" width="0.0817%" height="15" fill="rgb(226,122,50)" fg:x="847" fg:w="1"/><text x="69.4493%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="69.1993%" y="581" width="0.0817%" height="15" fill="rgb(239,156,16)" fg:x="847" fg:w="1"/><text x="69.4493%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.2810%" y="645" width="0.0817%" height="15" fill="rgb(224,27,38)" fg:x="848" fg:w="1"/><text x="69.5310%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="69.2810%" y="629" width="0.0817%" height="15" fill="rgb(224,39,27)" fg:x="848" fg:w="1"/><text x="69.5310%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="69.3627%" y="629" width="0.0817%" height="15" fill="rgb(215,92,29)" fg:x="849" fg:w="1"/><text x="69.6127%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="69.4444%" y="533" width="0.1634%" height="15" fill="rgb(207,159,16)" fg:x="850" fg:w="2"/><text x="69.6944%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="69.4444%" y="517" width="0.1634%" height="15" fill="rgb(238,163,47)" fg:x="850" fg:w="2"/><text x="69.6944%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="69.4444%" y="501" width="0.1634%" height="15" fill="rgb(219,91,49)" fg:x="850" fg:w="2"/><text x="69.6944%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="69.5261%" y="485" width="0.0817%" height="15" fill="rgb(227,167,31)" fg:x="851" fg:w="1"/><text x="69.7761%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="69.5261%" y="469" width="0.0817%" height="15" fill="rgb(234,80,54)" fg:x="851" fg:w="1"/><text x="69.7761%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="69.6895%" y="517" width="0.0817%" height="15" fill="rgb(212,114,2)" fg:x="853" fg:w="1"/><text x="69.9395%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.7712%" y="501" width="0.0817%" height="15" fill="rgb(234,50,24)" fg:x="854" fg:w="1"/><text x="70.0212%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.7712%" y="485" width="0.0817%" height="15" fill="rgb(221,68,8)" fg:x="854" fg:w="1"/><text x="70.0212%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="69.8529%" y="485" width="0.0817%" height="15" fill="rgb(254,180,31)" fg:x="855" fg:w="1"/><text x="70.1029%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="69.8529%" y="469" width="0.0817%" height="15" fill="rgb(247,130,50)" fg:x="855" fg:w="1"/><text x="70.1029%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="70.0163%" y="469" width="0.0817%" height="15" fill="rgb(211,109,4)" fg:x="857" fg:w="1"/><text x="70.2663%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.0163%" y="453" width="0.0817%" height="15" fill="rgb(238,50,21)" fg:x="857" fg:w="1"/><text x="70.2663%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.0163%" y="437" width="0.0817%" height="15" fill="rgb(225,57,45)" fg:x="857" fg:w="1"/><text x="70.2663%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="70.0163%" y="421" width="0.0817%" height="15" fill="rgb(209,196,50)" fg:x="857" fg:w="1"/><text x="70.2663%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.0163%" y="405" width="0.0817%" height="15" fill="rgb(242,140,13)" fg:x="857" fg:w="1"/><text x="70.2663%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.0163%" y="389" width="0.0817%" height="15" fill="rgb(217,111,7)" fg:x="857" fg:w="1"/><text x="70.2663%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.0163%" y="373" width="0.0817%" height="15" fill="rgb(253,193,51)" fg:x="857" fg:w="1"/><text x="70.2663%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="69.9346%" y="485" width="0.3268%" height="15" fill="rgb(252,70,29)" fg:x="856" fg:w="4"/><text x="70.1846%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="70.0980%" y="469" width="0.1634%" height="15" fill="rgb(232,127,12)" fg:x="858" fg:w="2"/><text x="70.3480%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="70.0980%" y="453" width="0.1634%" height="15" fill="rgb(211,180,21)" fg:x="858" fg:w="2"/><text x="70.3480%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.74%)</title><rect x="69.6078%" y="533" width="0.7353%" height="15" fill="rgb(229,72,13)" fg:x="852" fg:w="9"/><text x="69.8578%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="69.7712%" y="517" width="0.5719%" height="15" fill="rgb(240,211,49)" fg:x="854" fg:w="7"/><text x="70.0212%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="69.8529%" y="501" width="0.4902%" height="15" fill="rgb(219,149,40)" fg:x="855" fg:w="6"/><text x="70.1029%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.2614%" y="485" width="0.0817%" height="15" fill="rgb(210,127,46)" fg:x="860" fg:w="1"/><text x="70.5114%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.2614%" y="469" width="0.0817%" height="15" fill="rgb(220,106,7)" fg:x="860" fg:w="1"/><text x="70.5114%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.98%)</title><rect x="69.4444%" y="549" width="0.9804%" height="15" fill="rgb(249,31,22)" fg:x="850" fg:w="12"/><text x="69.6944%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.3431%" y="533" width="0.0817%" height="15" fill="rgb(253,1,49)" fg:x="861" fg:w="1"/><text x="70.5931%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.4248%" y="501" width="0.0817%" height="15" fill="rgb(227,144,33)" fg:x="862" fg:w="1"/><text x="70.6748%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.4248%" y="485" width="0.0817%" height="15" fill="rgb(249,163,44)" fg:x="862" fg:w="1"/><text x="70.6748%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.4248%" y="549" width="0.1634%" height="15" fill="rgb(234,15,39)" fg:x="862" fg:w="2"/><text x="70.6748%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.4248%" y="533" width="0.1634%" height="15" fill="rgb(207,66,16)" fg:x="862" fg:w="2"/><text x="70.6748%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.4248%" y="517" width="0.1634%" height="15" fill="rgb(233,112,24)" fg:x="862" fg:w="2"/><text x="70.6748%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.5065%" y="501" width="0.0817%" height="15" fill="rgb(230,90,22)" fg:x="863" fg:w="1"/><text x="70.7565%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="70.7516%" y="469" width="0.1634%" height="15" fill="rgb(229,61,13)" fg:x="866" fg:w="2"/><text x="71.0016%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="70.8333%" y="453" width="0.0817%" height="15" fill="rgb(225,57,24)" fg:x="867" fg:w="1"/><text x="71.0833%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8333%" y="437" width="0.0817%" height="15" fill="rgb(208,169,48)" fg:x="867" fg:w="1"/><text x="71.0833%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="70.8333%" y="421" width="0.0817%" height="15" fill="rgb(244,218,51)" fg:x="867" fg:w="1"/><text x="71.0833%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="70.8333%" y="405" width="0.0817%" height="15" fill="rgb(214,148,10)" fg:x="867" fg:w="1"/><text x="71.0833%" y="415.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.63%)</title><rect x="69.3627%" y="645" width="1.6340%" height="15" fill="rgb(225,174,27)" fg:x="849" fg:w="20"/><text x="69.6127%" y="655.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.55%)</title><rect x="69.4444%" y="629" width="1.5523%" height="15" fill="rgb(230,96,26)" fg:x="850" fg:w="19"/><text x="69.6944%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.55%)</title><rect x="69.4444%" y="613" width="1.5523%" height="15" fill="rgb(232,10,30)" fg:x="850" fg:w="19"/><text x="69.6944%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.55%)</title><rect x="69.4444%" y="597" width="1.5523%" height="15" fill="rgb(222,8,50)" fg:x="850" fg:w="19"/><text x="69.6944%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.55%)</title><rect x="69.4444%" y="581" width="1.5523%" height="15" fill="rgb(213,81,27)" fg:x="850" fg:w="19"/><text x="69.6944%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.55%)</title><rect x="69.4444%" y="565" width="1.5523%" height="15" fill="rgb(245,50,10)" fg:x="850" fg:w="19"/><text x="69.6944%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="70.5882%" y="549" width="0.4085%" height="15" fill="rgb(216,100,18)" fg:x="864" fg:w="5"/><text x="70.8382%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="70.5882%" y="533" width="0.4085%" height="15" fill="rgb(236,147,54)" fg:x="864" fg:w="5"/><text x="70.8382%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="70.5882%" y="517" width="0.4085%" height="15" fill="rgb(205,143,26)" fg:x="864" fg:w="5"/><text x="70.8382%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="70.6699%" y="501" width="0.3268%" height="15" fill="rgb(236,26,9)" fg:x="865" fg:w="4"/><text x="70.9199%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="70.6699%" y="485" width="0.3268%" height="15" fill="rgb(221,165,53)" fg:x="865" fg:w="4"/><text x="70.9199%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="70.9150%" y="469" width="0.0817%" height="15" fill="rgb(214,110,17)" fg:x="868" fg:w="1"/><text x="71.1650%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9150%" y="453" width="0.0817%" height="15" fill="rgb(237,197,12)" fg:x="868" fg:w="1"/><text x="71.1650%" y="463.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="70.9967%" y="613" width="0.0817%" height="15" fill="rgb(205,84,17)" fg:x="869" fg:w="1"/><text x="71.2467%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9967%" y="597" width="0.0817%" height="15" fill="rgb(237,18,45)" fg:x="869" fg:w="1"/><text x="71.2467%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9967%" y="581" width="0.0817%" height="15" fill="rgb(221,87,14)" fg:x="869" fg:w="1"/><text x="71.2467%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.9967%" y="565" width="0.0817%" height="15" fill="rgb(238,186,15)" fg:x="869" fg:w="1"/><text x="71.2467%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9967%" y="549" width="0.0817%" height="15" fill="rgb(208,115,11)" fg:x="869" fg:w="1"/><text x="71.2467%" y="559.50"></text></g><g><title>plugins_core::build::Build::named (2 samples, 0.16%)</title><rect x="70.9967%" y="645" width="0.1634%" height="15" fill="rgb(254,175,0)" fg:x="869" fg:w="2"/><text x="71.2467%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="70.9967%" y="629" width="0.1634%" height="15" fill="rgb(227,24,42)" fg:x="869" fg:w="2"/><text x="71.2467%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="71.0784%" y="613" width="0.0817%" height="15" fill="rgb(223,211,37)" fg:x="870" fg:w="1"/><text x="71.3284%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.0784%" y="597" width="0.0817%" height="15" fill="rgb(235,49,27)" fg:x="870" fg:w="1"/><text x="71.3284%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="71.0784%" y="581" width="0.0817%" height="15" fill="rgb(254,97,51)" fg:x="870" fg:w="1"/><text x="71.3284%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.1601%" y="613" width="0.0817%" height="15" fill="rgb(249,51,40)" fg:x="871" fg:w="1"/><text x="71.4101%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.1601%" y="597" width="0.0817%" height="15" fill="rgb(210,128,45)" fg:x="871" fg:w="1"/><text x="71.4101%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.1601%" y="581" width="0.0817%" height="15" fill="rgb(224,137,50)" fg:x="871" fg:w="1"/><text x="71.4101%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.1601%" y="565" width="0.0817%" height="15" fill="rgb(242,15,9)" fg:x="871" fg:w="1"/><text x="71.4101%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1601%" y="549" width="0.0817%" height="15" fill="rgb(233,187,41)" fg:x="871" fg:w="1"/><text x="71.4101%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.1601%" y="629" width="0.1634%" height="15" fill="rgb(227,2,29)" fg:x="871" fg:w="2"/><text x="71.4101%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="71.2418%" y="613" width="0.0817%" height="15" fill="rgb(222,70,3)" fg:x="872" fg:w="1"/><text x="71.4918%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2418%" y="597" width="0.0817%" height="15" fill="rgb(213,11,42)" fg:x="872" fg:w="1"/><text x="71.4918%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.2418%" y="581" width="0.0817%" height="15" fill="rgb(225,150,9)" fg:x="872" fg:w="1"/><text x="71.4918%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2418%" y="565" width="0.0817%" height="15" fill="rgb(230,162,45)" fg:x="872" fg:w="1"/><text x="71.4918%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3235%" y="581" width="0.0817%" height="15" fill="rgb(222,14,52)" fg:x="873" fg:w="1"/><text x="71.5735%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3235%" y="565" width="0.0817%" height="15" fill="rgb(254,198,14)" fg:x="873" fg:w="1"/><text x="71.5735%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.3235%" y="549" width="0.0817%" height="15" fill="rgb(220,217,30)" fg:x="873" fg:w="1"/><text x="71.5735%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3235%" y="533" width="0.0817%" height="15" fill="rgb(215,146,41)" fg:x="873" fg:w="1"/><text x="71.5735%" y="543.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="71.1601%" y="645" width="0.3268%" height="15" fill="rgb(217,27,36)" fg:x="871" fg:w="4"/><text x="71.4101%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.3235%" y="629" width="0.1634%" height="15" fill="rgb(219,218,39)" fg:x="873" fg:w="2"/><text x="71.5735%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="71.3235%" y="613" width="0.1634%" height="15" fill="rgb(219,4,42)" fg:x="873" fg:w="2"/><text x="71.5735%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="71.3235%" y="597" width="0.1634%" height="15" fill="rgb(249,119,36)" fg:x="873" fg:w="2"/><text x="71.5735%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4052%" y="581" width="0.0817%" height="15" fill="rgb(209,23,33)" fg:x="874" fg:w="1"/><text x="71.6552%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4052%" y="565" width="0.0817%" height="15" fill="rgb(211,10,0)" fg:x="874" fg:w="1"/><text x="71.6552%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4052%" y="549" width="0.0817%" height="15" fill="rgb(208,99,37)" fg:x="874" fg:w="1"/><text x="71.6552%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4052%" y="533" width="0.0817%" height="15" fill="rgb(213,132,31)" fg:x="874" fg:w="1"/><text x="71.6552%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.4052%" y="517" width="0.0817%" height="15" fill="rgb(243,129,40)" fg:x="874" fg:w="1"/><text x="71.6552%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.4052%" y="501" width="0.0817%" height="15" fill="rgb(210,66,33)" fg:x="874" fg:w="1"/><text x="71.6552%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.4052%" y="485" width="0.0817%" height="15" fill="rgb(209,189,4)" fg:x="874" fg:w="1"/><text x="71.6552%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4052%" y="469" width="0.0817%" height="15" fill="rgb(214,107,37)" fg:x="874" fg:w="1"/><text x="71.6552%" y="479.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="71.4869%" y="645" width="0.1634%" height="15" fill="rgb(245,88,54)" fg:x="875" fg:w="2"/><text x="71.7369%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="71.5686%" y="629" width="0.0817%" height="15" fill="rgb(205,146,20)" fg:x="876" fg:w="1"/><text x="71.8186%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="71.5686%" y="613" width="0.0817%" height="15" fill="rgb(220,161,25)" fg:x="876" fg:w="1"/><text x="71.8186%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5686%" y="597" width="0.0817%" height="15" fill="rgb(215,152,15)" fg:x="876" fg:w="1"/><text x="71.8186%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.5686%" y="581" width="0.0817%" height="15" fill="rgb(233,192,44)" fg:x="876" fg:w="1"/><text x="71.8186%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="71.5686%" y="565" width="0.0817%" height="15" fill="rgb(240,170,46)" fg:x="876" fg:w="1"/><text x="71.8186%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="71.6503%" y="597" width="0.0817%" height="15" fill="rgb(207,104,33)" fg:x="877" fg:w="1"/><text x="71.9003%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="71.6503%" y="581" width="0.0817%" height="15" fill="rgb(219,21,39)" fg:x="877" fg:w="1"/><text x="71.9003%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="71.6503%" y="613" width="0.1634%" height="15" fill="rgb(214,133,29)" fg:x="877" fg:w="2"/><text x="71.9003%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="71.7320%" y="597" width="0.0817%" height="15" fill="rgb(226,93,6)" fg:x="878" fg:w="1"/><text x="71.9820%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.7320%" y="581" width="0.0817%" height="15" fill="rgb(252,222,34)" fg:x="878" fg:w="1"/><text x="71.9820%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.7320%" y="565" width="0.0817%" height="15" fill="rgb(252,92,48)" fg:x="878" fg:w="1"/><text x="71.9820%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="71.7320%" y="549" width="0.0817%" height="15" fill="rgb(245,223,24)" fg:x="878" fg:w="1"/><text x="71.9820%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7320%" y="533" width="0.0817%" height="15" fill="rgb(205,176,3)" fg:x="878" fg:w="1"/><text x="71.9820%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.8137%" y="597" width="0.0817%" height="15" fill="rgb(235,151,15)" fg:x="879" fg:w="1"/><text x="72.0637%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.8137%" y="581" width="0.0817%" height="15" fill="rgb(237,209,11)" fg:x="879" fg:w="1"/><text x="72.0637%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8137%" y="565" width="0.0817%" height="15" fill="rgb(243,227,24)" fg:x="879" fg:w="1"/><text x="72.0637%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8137%" y="549" width="0.0817%" height="15" fill="rgb(239,193,16)" fg:x="879" fg:w="1"/><text x="72.0637%" y="559.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.33%)</title><rect x="71.6503%" y="645" width="0.3268%" height="15" fill="rgb(231,27,9)" fg:x="877" fg:w="4"/><text x="71.9003%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.33%)</title><rect x="71.6503%" y="629" width="0.3268%" height="15" fill="rgb(219,169,10)" fg:x="877" fg:w="4"/><text x="71.9003%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="71.8137%" y="613" width="0.1634%" height="15" fill="rgb(244,229,43)" fg:x="879" fg:w="2"/><text x="72.0637%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="71.8954%" y="597" width="0.0817%" height="15" fill="rgb(254,38,20)" fg:x="880" fg:w="1"/><text x="72.1454%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="71.8954%" y="581" width="0.0817%" height="15" fill="rgb(250,47,30)" fg:x="880" fg:w="1"/><text x="72.1454%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.8954%" y="565" width="0.0817%" height="15" fill="rgb(224,124,36)" fg:x="880" fg:w="1"/><text x="72.1454%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.8954%" y="549" width="0.0817%" height="15" fill="rgb(246,68,51)" fg:x="880" fg:w="1"/><text x="72.1454%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="71.8954%" y="533" width="0.0817%" height="15" fill="rgb(253,43,49)" fg:x="880" fg:w="1"/><text x="72.1454%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8954%" y="517" width="0.0817%" height="15" fill="rgb(219,54,36)" fg:x="880" fg:w="1"/><text x="72.1454%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8954%" y="501" width="0.0817%" height="15" fill="rgb(227,133,34)" fg:x="880" fg:w="1"/><text x="72.1454%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.8954%" y="485" width="0.0817%" height="15" fill="rgb(247,227,15)" fg:x="880" fg:w="1"/><text x="72.1454%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.8954%" y="469" width="0.0817%" height="15" fill="rgb(229,96,14)" fg:x="880" fg:w="1"/><text x="72.1454%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.8954%" y="453" width="0.0817%" height="15" fill="rgb(220,79,17)" fg:x="880" fg:w="1"/><text x="72.1454%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.8954%" y="437" width="0.0817%" height="15" fill="rgb(205,131,53)" fg:x="880" fg:w="1"/><text x="72.1454%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.8954%" y="421" width="0.0817%" height="15" fill="rgb(209,50,29)" fg:x="880" fg:w="1"/><text x="72.1454%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="71.9771%" y="629" width="0.0817%" height="15" fill="rgb(245,86,46)" fg:x="881" fg:w="1"/><text x="72.2271%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9771%" y="613" width="0.0817%" height="15" fill="rgb(235,66,46)" fg:x="881" fg:w="1"/><text x="72.2271%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.9771%" y="597" width="0.0817%" height="15" fill="rgb(232,148,31)" fg:x="881" fg:w="1"/><text x="72.2271%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="72.0588%" y="613" width="0.1634%" height="15" fill="rgb(217,149,8)" fg:x="882" fg:w="2"/><text x="72.3088%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1405%" y="597" width="0.0817%" height="15" fill="rgb(209,183,11)" fg:x="883" fg:w="1"/><text x="72.3905%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.1405%" y="581" width="0.0817%" height="15" fill="rgb(208,55,20)" fg:x="883" fg:w="1"/><text x="72.3905%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.1405%" y="565" width="0.0817%" height="15" fill="rgb(218,39,14)" fg:x="883" fg:w="1"/><text x="72.3905%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.1405%" y="549" width="0.0817%" height="15" fill="rgb(216,169,33)" fg:x="883" fg:w="1"/><text x="72.3905%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.1405%" y="533" width="0.0817%" height="15" fill="rgb(233,80,24)" fg:x="883" fg:w="1"/><text x="72.3905%" y="543.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="72.2222%" y="597" width="0.0817%" height="15" fill="rgb(213,179,31)" fg:x="884" fg:w="1"/><text x="72.4722%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3039%" y="533" width="0.0817%" height="15" fill="rgb(209,19,5)" fg:x="885" fg:w="1"/><text x="72.5539%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.4673%" y="485" width="0.0817%" height="15" fill="rgb(219,18,35)" fg:x="887" fg:w="1"/><text x="72.7173%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="72.4673%" y="501" width="0.1634%" height="15" fill="rgb(209,169,16)" fg:x="887" fg:w="2"/><text x="72.7173%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.5490%" y="485" width="0.0817%" height="15" fill="rgb(245,90,51)" fg:x="888" fg:w="1"/><text x="72.7990%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.5490%" y="469" width="0.0817%" height="15" fill="rgb(220,99,45)" fg:x="888" fg:w="1"/><text x="72.7990%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.5490%" y="453" width="0.0817%" height="15" fill="rgb(249,89,25)" fg:x="888" fg:w="1"/><text x="72.7990%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.6307%" y="485" width="0.0817%" height="15" fill="rgb(239,193,0)" fg:x="889" fg:w="1"/><text x="72.8807%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.6307%" y="469" width="0.0817%" height="15" fill="rgb(231,126,1)" fg:x="889" fg:w="1"/><text x="72.8807%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.6307%" y="453" width="0.0817%" height="15" fill="rgb(243,166,3)" fg:x="889" fg:w="1"/><text x="72.8807%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="72.7124%" y="469" width="0.1634%" height="15" fill="rgb(223,22,34)" fg:x="890" fg:w="2"/><text x="72.9624%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="72.7124%" y="453" width="0.1634%" height="15" fill="rgb(251,52,51)" fg:x="890" fg:w="2"/><text x="72.9624%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.7941%" y="437" width="0.0817%" height="15" fill="rgb(221,165,28)" fg:x="891" fg:w="1"/><text x="73.0441%" y="447.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="72.8758%" y="453" width="0.0817%" height="15" fill="rgb(218,121,47)" fg:x="892" fg:w="1"/><text x="73.1258%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="72.7124%" y="485" width="0.3268%" height="15" fill="rgb(209,120,9)" fg:x="890" fg:w="4"/><text x="72.9624%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.8758%" y="469" width="0.1634%" height="15" fill="rgb(236,68,12)" fg:x="892" fg:w="2"/><text x="73.1258%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.9575%" y="453" width="0.0817%" height="15" fill="rgb(225,194,26)" fg:x="893" fg:w="1"/><text x="73.2075%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.9575%" y="437" width="0.0817%" height="15" fill="rgb(231,84,39)" fg:x="893" fg:w="1"/><text x="73.2075%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.9575%" y="421" width="0.0817%" height="15" fill="rgb(210,11,45)" fg:x="893" fg:w="1"/><text x="73.2075%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="72.6307%" y="501" width="0.4902%" height="15" fill="rgb(224,54,52)" fg:x="889" fg:w="6"/><text x="72.8807%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.0392%" y="485" width="0.0817%" height="15" fill="rgb(238,102,14)" fg:x="894" fg:w="1"/><text x="73.2892%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.74%)</title><rect x="72.4673%" y="517" width="0.7353%" height="15" fill="rgb(243,160,52)" fg:x="887" fg:w="9"/><text x="72.7173%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.1209%" y="501" width="0.0817%" height="15" fill="rgb(216,114,19)" fg:x="895" fg:w="1"/><text x="73.3709%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.1209%" y="485" width="0.0817%" height="15" fill="rgb(244,166,37)" fg:x="895" fg:w="1"/><text x="73.3709%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.1209%" y="469" width="0.0817%" height="15" fill="rgb(246,29,44)" fg:x="895" fg:w="1"/><text x="73.3709%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="73.1209%" y="453" width="0.0817%" height="15" fill="rgb(215,56,53)" fg:x="895" fg:w="1"/><text x="73.3709%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.3660%" y="469" width="0.0817%" height="15" fill="rgb(217,60,2)" fg:x="898" fg:w="1"/><text x="73.6160%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4477%" y="453" width="0.0817%" height="15" fill="rgb(207,26,24)" fg:x="899" fg:w="1"/><text x="73.6977%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="73.2026%" y="517" width="0.4902%" height="15" fill="rgb(252,210,15)" fg:x="896" fg:w="6"/><text x="73.4526%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="73.2843%" y="501" width="0.4085%" height="15" fill="rgb(253,209,26)" fg:x="897" fg:w="5"/><text x="73.5343%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="73.2843%" y="485" width="0.4085%" height="15" fill="rgb(238,170,14)" fg:x="897" fg:w="5"/><text x="73.5343%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="73.4477%" y="469" width="0.2451%" height="15" fill="rgb(216,178,15)" fg:x="899" fg:w="3"/><text x="73.6977%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.5294%" y="453" width="0.1634%" height="15" fill="rgb(250,197,2)" fg:x="900" fg:w="2"/><text x="73.7794%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.6111%" y="437" width="0.0817%" height="15" fill="rgb(212,70,42)" fg:x="901" fg:w="1"/><text x="73.8611%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6928%" y="469" width="0.0817%" height="15" fill="rgb(227,213,9)" fg:x="902" fg:w="1"/><text x="73.9428%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7745%" y="469" width="0.0817%" height="15" fill="rgb(245,99,25)" fg:x="903" fg:w="1"/><text x="74.0245%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.7745%" y="453" width="0.0817%" height="15" fill="rgb(250,82,29)" fg:x="903" fg:w="1"/><text x="74.0245%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="73.8562%" y="405" width="0.2451%" height="15" fill="rgb(241,226,54)" fg:x="904" fg:w="3"/><text x="74.1062%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="73.8562%" y="389" width="0.2451%" height="15" fill="rgb(221,99,41)" fg:x="904" fg:w="3"/><text x="74.1062%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="73.8562%" y="373" width="0.2451%" height="15" fill="rgb(213,90,21)" fg:x="904" fg:w="3"/><text x="74.1062%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="73.9379%" y="357" width="0.1634%" height="15" fill="rgb(205,208,24)" fg:x="905" fg:w="2"/><text x="74.1879%" y="367.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.12%)</title><rect x="72.0588%" y="629" width="2.1242%" height="15" fill="rgb(246,31,12)" fg:x="882" fg:w="26"/><text x="72.3088%" y="639.50">e..</text></g><g><title>engine::session::Session::save_changes (24 samples, 1.96%)</title><rect x="72.2222%" y="613" width="1.9608%" height="15" fill="rgb(213,154,6)" fg:x="884" fg:w="24"/><text x="72.4722%" y="623.50">e..</text></g><g><title>engine::session::state::State::close (23 samples, 1.88%)</title><rect x="72.3039%" y="597" width="1.8791%" height="15" fill="rgb(222,163,29)" fg:x="885" fg:w="23"/><text x="72.5539%" y="607.50">e..</text></g><g><title>engine::session::state::State::flush_entities (23 samples, 1.88%)</title><rect x="72.3039%" y="581" width="1.8791%" height="15" fill="rgb(227,201,8)" fg:x="885" fg:w="23"/><text x="72.5539%" y="591.50">e..</text></g><g><title>core::iter::adapters::try_process (23 samples, 1.88%)</title><rect x="72.3039%" y="565" width="1.8791%" height="15" fill="rgb(233,9,32)" fg:x="885" fg:w="23"/><text x="72.5539%" y="575.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 1.88%)</title><rect x="72.3039%" y="549" width="1.8791%" height="15" fill="rgb(217,54,24)" fg:x="885" fg:w="23"/><text x="72.5539%" y="559.50">&lt;..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.80%)</title><rect x="72.3856%" y="533" width="1.7974%" height="15" fill="rgb(235,192,0)" fg:x="886" fg:w="22"/><text x="72.6356%" y="543.50">e..</text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.49%)</title><rect x="73.6928%" y="517" width="0.4902%" height="15" fill="rgb(235,45,9)" fg:x="902" fg:w="6"/><text x="73.9428%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.49%)</title><rect x="73.6928%" y="501" width="0.4902%" height="15" fill="rgb(246,42,40)" fg:x="902" fg:w="6"/><text x="73.9428%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="73.6928%" y="485" width="0.4902%" height="15" fill="rgb(248,111,24)" fg:x="902" fg:w="6"/><text x="73.9428%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="73.8562%" y="469" width="0.3268%" height="15" fill="rgb(249,65,22)" fg:x="904" fg:w="4"/><text x="74.1062%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="73.8562%" y="453" width="0.3268%" height="15" fill="rgb(238,111,51)" fg:x="904" fg:w="4"/><text x="74.1062%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="73.8562%" y="437" width="0.3268%" height="15" fill="rgb(250,118,22)" fg:x="904" fg:w="4"/><text x="74.1062%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="73.8562%" y="421" width="0.3268%" height="15" fill="rgb(234,84,26)" fg:x="904" fg:w="4"/><text x="74.1062%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.1013%" y="405" width="0.0817%" height="15" fill="rgb(243,172,12)" fg:x="907" fg:w="1"/><text x="74.3513%" y="415.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="74.1830%" y="629" width="0.0817%" height="15" fill="rgb(236,150,49)" fg:x="908" fg:w="1"/><text x="74.4330%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="74.1830%" y="613" width="0.0817%" height="15" fill="rgb(225,197,26)" fg:x="908" fg:w="1"/><text x="74.4330%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.1830%" y="597" width="0.0817%" height="15" fill="rgb(214,17,42)" fg:x="908" fg:w="1"/><text x="74.4330%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="74.1830%" y="581" width="0.0817%" height="15" fill="rgb(224,165,40)" fg:x="908" fg:w="1"/><text x="74.4330%" y="591.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="74.2647%" y="629" width="0.0817%" height="15" fill="rgb(246,100,4)" fg:x="909" fg:w="1"/><text x="74.5147%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="74.2647%" y="613" width="0.0817%" height="15" fill="rgb(222,103,0)" fg:x="909" fg:w="1"/><text x="74.5147%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="74.2647%" y="597" width="0.0817%" height="15" fill="rgb(227,189,26)" fg:x="909" fg:w="1"/><text x="74.5147%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="74.2647%" y="581" width="0.0817%" height="15" fill="rgb(214,202,17)" fg:x="909" fg:w="1"/><text x="74.5147%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="74.3464%" y="597" width="0.0817%" height="15" fill="rgb(229,111,3)" fg:x="910" fg:w="1"/><text x="74.5964%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.3464%" y="581" width="0.0817%" height="15" fill="rgb(229,172,15)" fg:x="910" fg:w="1"/><text x="74.5964%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="74.3464%" y="565" width="0.0817%" height="15" fill="rgb(230,224,35)" fg:x="910" fg:w="1"/><text x="74.5964%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3464%" y="549" width="0.0817%" height="15" fill="rgb(251,141,6)" fg:x="910" fg:w="1"/><text x="74.5964%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.3464%" y="533" width="0.0817%" height="15" fill="rgb(225,208,6)" fg:x="910" fg:w="1"/><text x="74.5964%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3464%" y="517" width="0.0817%" height="15" fill="rgb(246,181,16)" fg:x="910" fg:w="1"/><text x="74.5964%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.3464%" y="501" width="0.0817%" height="15" fill="rgb(227,129,36)" fg:x="910" fg:w="1"/><text x="74.5964%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.4281%" y="597" width="0.0817%" height="15" fill="rgb(248,117,24)" fg:x="911" fg:w="1"/><text x="74.6781%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4281%" y="581" width="0.0817%" height="15" fill="rgb(214,185,35)" fg:x="911" fg:w="1"/><text x="74.6781%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.4281%" y="565" width="0.0817%" height="15" fill="rgb(236,150,34)" fg:x="911" fg:w="1"/><text x="74.6781%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4281%" y="549" width="0.0817%" height="15" fill="rgb(243,228,27)" fg:x="911" fg:w="1"/><text x="74.6781%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.4281%" y="533" width="0.0817%" height="15" fill="rgb(245,77,44)" fg:x="911" fg:w="1"/><text x="74.6781%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4281%" y="517" width="0.0817%" height="15" fill="rgb(235,214,42)" fg:x="911" fg:w="1"/><text x="74.6781%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.4281%" y="501" width="0.0817%" height="15" fill="rgb(221,74,3)" fg:x="911" fg:w="1"/><text x="74.6781%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4281%" y="485" width="0.0817%" height="15" fill="rgb(206,121,29)" fg:x="911" fg:w="1"/><text x="74.6781%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.25%)</title><rect x="74.3464%" y="613" width="0.2451%" height="15" fill="rgb(249,131,53)" fg:x="910" fg:w="3"/><text x="74.5964%" y="623.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="74.5098%" y="597" width="0.0817%" height="15" fill="rgb(236,170,29)" fg:x="912" fg:w="1"/><text x="74.7598%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="74.5098%" y="581" width="0.0817%" height="15" fill="rgb(247,96,15)" fg:x="912" fg:w="1"/><text x="74.7598%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="74.5098%" y="565" width="0.0817%" height="15" fill="rgb(211,210,7)" fg:x="912" fg:w="1"/><text x="74.7598%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.5098%" y="549" width="0.0817%" height="15" fill="rgb(240,88,50)" fg:x="912" fg:w="1"/><text x="74.7598%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5915%" y="613" width="0.0817%" height="15" fill="rgb(209,229,26)" fg:x="913" fg:w="1"/><text x="74.8415%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5915%" y="597" width="0.0817%" height="15" fill="rgb(210,68,23)" fg:x="913" fg:w="1"/><text x="74.8415%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5915%" y="581" width="0.0817%" height="15" fill="rgb(229,180,13)" fg:x="913" fg:w="1"/><text x="74.8415%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.5915%" y="565" width="0.0817%" height="15" fill="rgb(236,53,44)" fg:x="913" fg:w="1"/><text x="74.8415%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5915%" y="549" width="0.0817%" height="15" fill="rgb(244,214,29)" fg:x="913" fg:w="1"/><text x="74.8415%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.5915%" y="533" width="0.0817%" height="15" fill="rgb(220,75,29)" fg:x="913" fg:w="1"/><text x="74.8415%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.5915%" y="517" width="0.0817%" height="15" fill="rgb(214,183,37)" fg:x="913" fg:w="1"/><text x="74.8415%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.5915%" y="501" width="0.0817%" height="15" fill="rgb(239,117,29)" fg:x="913" fg:w="1"/><text x="74.8415%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.5915%" y="485" width="0.0817%" height="15" fill="rgb(237,171,35)" fg:x="913" fg:w="1"/><text x="74.8415%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5915%" y="469" width="0.0817%" height="15" fill="rgb(229,178,53)" fg:x="913" fg:w="1"/><text x="74.8415%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.5915%" y="453" width="0.0817%" height="15" fill="rgb(210,102,19)" fg:x="913" fg:w="1"/><text x="74.8415%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.5915%" y="437" width="0.0817%" height="15" fill="rgb(235,127,22)" fg:x="913" fg:w="1"/><text x="74.8415%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.5915%" y="421" width="0.0817%" height="15" fill="rgb(244,31,31)" fg:x="913" fg:w="1"/><text x="74.8415%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.5915%" y="405" width="0.0817%" height="15" fill="rgb(231,43,21)" fg:x="913" fg:w="1"/><text x="74.8415%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.5915%" y="389" width="0.0817%" height="15" fill="rgb(217,131,35)" fg:x="913" fg:w="1"/><text x="74.8415%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.5915%" y="373" width="0.0817%" height="15" fill="rgb(221,149,4)" fg:x="913" fg:w="1"/><text x="74.8415%" y="383.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.41%)</title><rect x="74.3464%" y="629" width="0.4085%" height="15" fill="rgb(232,170,28)" fg:x="910" fg:w="5"/><text x="74.5964%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.6732%" y="613" width="0.0817%" height="15" fill="rgb(238,56,10)" fg:x="914" fg:w="1"/><text x="74.9232%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.6732%" y="597" width="0.0817%" height="15" fill="rgb(235,196,14)" fg:x="914" fg:w="1"/><text x="74.9232%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.6732%" y="581" width="0.0817%" height="15" fill="rgb(216,45,48)" fg:x="914" fg:w="1"/><text x="74.9232%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6732%" y="565" width="0.0817%" height="15" fill="rgb(238,213,17)" fg:x="914" fg:w="1"/><text x="74.9232%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6732%" y="549" width="0.0817%" height="15" fill="rgb(212,13,2)" fg:x="914" fg:w="1"/><text x="74.9232%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6732%" y="533" width="0.0817%" height="15" fill="rgb(240,114,20)" fg:x="914" fg:w="1"/><text x="74.9232%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6732%" y="517" width="0.0817%" height="15" fill="rgb(228,41,40)" fg:x="914" fg:w="1"/><text x="74.9232%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6732%" y="501" width="0.0817%" height="15" fill="rgb(244,132,35)" fg:x="914" fg:w="1"/><text x="74.9232%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.6732%" y="485" width="0.0817%" height="15" fill="rgb(253,189,4)" fg:x="914" fg:w="1"/><text x="74.9232%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.6732%" y="469" width="0.0817%" height="15" fill="rgb(224,37,19)" fg:x="914" fg:w="1"/><text x="74.9232%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.6732%" y="453" width="0.0817%" height="15" fill="rgb(235,223,18)" fg:x="914" fg:w="1"/><text x="74.9232%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6732%" y="437" width="0.0817%" height="15" fill="rgb(235,163,25)" fg:x="914" fg:w="1"/><text x="74.9232%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.6732%" y="421" width="0.0817%" height="15" fill="rgb(217,145,28)" fg:x="914" fg:w="1"/><text x="74.9232%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.6732%" y="405" width="0.0817%" height="15" fill="rgb(223,223,32)" fg:x="914" fg:w="1"/><text x="74.9232%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.6732%" y="389" width="0.0817%" height="15" fill="rgb(227,189,39)" fg:x="914" fg:w="1"/><text x="74.9232%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.6732%" y="373" width="0.0817%" height="15" fill="rgb(248,10,22)" fg:x="914" fg:w="1"/><text x="74.9232%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.6732%" y="357" width="0.0817%" height="15" fill="rgb(248,46,39)" fg:x="914" fg:w="1"/><text x="74.9232%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.6732%" y="341" width="0.0817%" height="15" fill="rgb(248,113,48)" fg:x="914" fg:w="1"/><text x="74.9232%" y="351.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="74.7549%" y="629" width="0.0817%" height="15" fill="rgb(245,16,25)" fg:x="915" fg:w="1"/><text x="75.0049%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="74.7549%" y="613" width="0.0817%" height="15" fill="rgb(249,152,16)" fg:x="915" fg:w="1"/><text x="75.0049%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="74.7549%" y="597" width="0.0817%" height="15" fill="rgb(250,16,1)" fg:x="915" fg:w="1"/><text x="75.0049%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.7549%" y="581" width="0.0817%" height="15" fill="rgb(249,138,3)" fg:x="915" fg:w="1"/><text x="75.0049%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.7549%" y="565" width="0.0817%" height="15" fill="rgb(227,71,41)" fg:x="915" fg:w="1"/><text x="75.0049%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.7549%" y="549" width="0.0817%" height="15" fill="rgb(209,184,23)" fg:x="915" fg:w="1"/><text x="75.0049%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.7549%" y="533" width="0.0817%" height="15" fill="rgb(223,215,31)" fg:x="915" fg:w="1"/><text x="75.0049%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.7549%" y="517" width="0.0817%" height="15" fill="rgb(210,146,28)" fg:x="915" fg:w="1"/><text x="75.0049%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7549%" y="501" width="0.0817%" height="15" fill="rgb(209,183,41)" fg:x="915" fg:w="1"/><text x="75.0049%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.7549%" y="485" width="0.0817%" height="15" fill="rgb(209,224,45)" fg:x="915" fg:w="1"/><text x="75.0049%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7549%" y="469" width="0.0817%" height="15" fill="rgb(224,209,51)" fg:x="915" fg:w="1"/><text x="75.0049%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.7549%" y="453" width="0.0817%" height="15" fill="rgb(223,17,39)" fg:x="915" fg:w="1"/><text x="75.0049%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7549%" y="437" width="0.0817%" height="15" fill="rgb(234,204,37)" fg:x="915" fg:w="1"/><text x="75.0049%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="74.8366%" y="597" width="0.0817%" height="15" fill="rgb(236,120,5)" fg:x="916" fg:w="1"/><text x="75.0866%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.8366%" y="581" width="0.0817%" height="15" fill="rgb(248,97,27)" fg:x="916" fg:w="1"/><text x="75.0866%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (2 samples, 0.16%)</title><rect x="74.8366%" y="629" width="0.1634%" height="15" fill="rgb(240,66,17)" fg:x="916" fg:w="2"/><text x="75.0866%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="74.8366%" y="613" width="0.1634%" height="15" fill="rgb(210,79,3)" fg:x="916" fg:w="2"/><text x="75.0866%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9183%" y="597" width="0.0817%" height="15" fill="rgb(214,176,27)" fg:x="917" fg:w="1"/><text x="75.1683%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9183%" y="581" width="0.0817%" height="15" fill="rgb(235,185,3)" fg:x="917" fg:w="1"/><text x="75.1683%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.9183%" y="565" width="0.0817%" height="15" fill="rgb(227,24,12)" fg:x="917" fg:w="1"/><text x="75.1683%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9183%" y="549" width="0.0817%" height="15" fill="rgb(252,169,48)" fg:x="917" fg:w="1"/><text x="75.1683%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9183%" y="533" width="0.0817%" height="15" fill="rgb(212,65,1)" fg:x="917" fg:w="1"/><text x="75.1683%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.9183%" y="517" width="0.0817%" height="15" fill="rgb(242,39,24)" fg:x="917" fg:w="1"/><text x="75.1683%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0000%" y="581" width="0.0817%" height="15" fill="rgb(249,32,23)" fg:x="918" fg:w="1"/><text x="75.2500%" y="591.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="75.0000%" y="629" width="0.1634%" height="15" fill="rgb(251,195,23)" fg:x="918" fg:w="2"/><text x="75.2500%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="75.0000%" y="613" width="0.1634%" height="15" fill="rgb(236,174,8)" fg:x="918" fg:w="2"/><text x="75.2500%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="75.0000%" y="597" width="0.1634%" height="15" fill="rgb(220,197,8)" fg:x="918" fg:w="2"/><text x="75.2500%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="75.0817%" y="581" width="0.0817%" height="15" fill="rgb(240,108,37)" fg:x="919" fg:w="1"/><text x="75.3317%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.27%)</title><rect x="71.9771%" y="645" width="3.2680%" height="15" fill="rgb(232,176,24)" fg:x="881" fg:w="40"/><text x="72.2271%" y="655.50">plu..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="75.1634%" y="629" width="0.0817%" height="15" fill="rgb(243,35,29)" fg:x="920" fg:w="1"/><text x="75.4134%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="75.2451%" y="597" width="0.0817%" height="15" fill="rgb(210,37,18)" fg:x="921" fg:w="1"/><text x="75.4951%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="75.2451%" y="645" width="0.1634%" height="15" fill="rgb(224,184,40)" fg:x="921" fg:w="2"/><text x="75.4951%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="75.2451%" y="629" width="0.1634%" height="15" fill="rgb(236,39,29)" fg:x="921" fg:w="2"/><text x="75.4951%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="75.2451%" y="613" width="0.1634%" height="15" fill="rgb(232,48,39)" fg:x="921" fg:w="2"/><text x="75.4951%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="75.3268%" y="597" width="0.0817%" height="15" fill="rgb(236,34,42)" fg:x="922" fg:w="1"/><text x="75.5768%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="75.3268%" y="581" width="0.0817%" height="15" fill="rgb(243,106,37)" fg:x="922" fg:w="1"/><text x="75.5768%" y="591.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="75.4085%" y="581" width="0.0817%" height="15" fill="rgb(218,96,6)" fg:x="923" fg:w="1"/><text x="75.6585%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="75.4085%" y="565" width="0.0817%" height="15" fill="rgb(235,130,12)" fg:x="923" fg:w="1"/><text x="75.6585%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="75.4085%" y="549" width="0.0817%" height="15" fill="rgb(231,95,0)" fg:x="923" fg:w="1"/><text x="75.6585%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="75.4085%" y="597" width="0.1634%" height="15" fill="rgb(228,12,23)" fg:x="923" fg:w="2"/><text x="75.6585%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="75.4902%" y="581" width="0.0817%" height="15" fill="rgb(216,12,1)" fg:x="924" fg:w="1"/><text x="75.7402%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4902%" y="565" width="0.0817%" height="15" fill="rgb(219,59,3)" fg:x="924" fg:w="1"/><text x="75.7402%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4902%" y="549" width="0.0817%" height="15" fill="rgb(215,208,46)" fg:x="924" fg:w="1"/><text x="75.7402%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="75.4902%" y="533" width="0.0817%" height="15" fill="rgb(254,224,29)" fg:x="924" fg:w="1"/><text x="75.7402%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.4902%" y="517" width="0.0817%" height="15" fill="rgb(232,14,29)" fg:x="924" fg:w="1"/><text x="75.7402%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4902%" y="501" width="0.0817%" height="15" fill="rgb(208,45,52)" fg:x="924" fg:w="1"/><text x="75.7402%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4902%" y="485" width="0.0817%" height="15" fill="rgb(234,191,28)" fg:x="924" fg:w="1"/><text x="75.7402%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4902%" y="469" width="0.0817%" height="15" fill="rgb(244,67,43)" fg:x="924" fg:w="1"/><text x="75.7402%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.5719%" y="597" width="0.0817%" height="15" fill="rgb(236,189,24)" fg:x="925" fg:w="1"/><text x="75.8219%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (4 samples, 0.33%)</title><rect x="75.4085%" y="645" width="0.3268%" height="15" fill="rgb(239,214,33)" fg:x="923" fg:w="4"/><text x="75.6585%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.33%)</title><rect x="75.4085%" y="629" width="0.3268%" height="15" fill="rgb(226,176,41)" fg:x="923" fg:w="4"/><text x="75.6585%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.33%)</title><rect x="75.4085%" y="613" width="0.3268%" height="15" fill="rgb(248,47,8)" fg:x="923" fg:w="4"/><text x="75.6585%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.6536%" y="597" width="0.0817%" height="15" fill="rgb(218,81,44)" fg:x="926" fg:w="1"/><text x="75.9036%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.6536%" y="581" width="0.0817%" height="15" fill="rgb(213,98,6)" fg:x="926" fg:w="1"/><text x="75.9036%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.6536%" y="565" width="0.0817%" height="15" fill="rgb(222,85,22)" fg:x="926" fg:w="1"/><text x="75.9036%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.6536%" y="549" width="0.0817%" height="15" fill="rgb(239,46,39)" fg:x="926" fg:w="1"/><text x="75.9036%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6536%" y="533" width="0.0817%" height="15" fill="rgb(237,12,29)" fg:x="926" fg:w="1"/><text x="75.9036%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.6536%" y="517" width="0.0817%" height="15" fill="rgb(214,77,8)" fg:x="926" fg:w="1"/><text x="75.9036%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.6536%" y="501" width="0.0817%" height="15" fill="rgb(217,168,37)" fg:x="926" fg:w="1"/><text x="75.9036%" y="511.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="75.7353%" y="613" width="0.0817%" height="15" fill="rgb(221,217,23)" fg:x="927" fg:w="1"/><text x="75.9853%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="75.7353%" y="629" width="0.1634%" height="15" fill="rgb(243,229,36)" fg:x="927" fg:w="2"/><text x="75.9853%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.8170%" y="613" width="0.0817%" height="15" fill="rgb(251,163,40)" fg:x="928" fg:w="1"/><text x="76.0670%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8170%" y="597" width="0.0817%" height="15" fill="rgb(237,222,12)" fg:x="928" fg:w="1"/><text x="76.0670%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.8170%" y="581" width="0.0817%" height="15" fill="rgb(248,132,6)" fg:x="928" fg:w="1"/><text x="76.0670%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.8170%" y="565" width="0.0817%" height="15" fill="rgb(227,167,50)" fg:x="928" fg:w="1"/><text x="76.0670%" y="575.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="75.8170%" y="549" width="0.0817%" height="15" fill="rgb(242,84,37)" fg:x="928" fg:w="1"/><text x="76.0670%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (82 samples, 6.70%)</title><rect x="69.2810%" y="661" width="6.6993%" height="15" fill="rgb(212,4,50)" fg:x="848" fg:w="82"/><text x="69.5310%" y="671.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.25%)</title><rect x="75.7353%" y="645" width="0.2451%" height="15" fill="rgb(230,228,32)" fg:x="927" fg:w="3"/><text x="75.9853%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="75.8987%" y="629" width="0.0817%" height="15" fill="rgb(248,217,23)" fg:x="929" fg:w="1"/><text x="76.1487%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="75.9804%" y="645" width="0.0817%" height="15" fill="rgb(238,197,32)" fg:x="930" fg:w="1"/><text x="76.2304%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="76.0621%" y="645" width="0.1634%" height="15" fill="rgb(236,106,1)" fg:x="931" fg:w="2"/><text x="76.3121%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="76.0621%" y="629" width="0.1634%" height="15" fill="rgb(219,228,13)" fg:x="931" fg:w="2"/><text x="76.3121%" y="639.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="76.0621%" y="613" width="0.1634%" height="15" fill="rgb(238,30,35)" fg:x="931" fg:w="2"/><text x="76.3121%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="76.0621%" y="597" width="0.1634%" height="15" fill="rgb(236,70,23)" fg:x="931" fg:w="2"/><text x="76.3121%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="76.0621%" y="581" width="0.1634%" height="15" fill="rgb(249,104,48)" fg:x="931" fg:w="2"/><text x="76.3121%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (2 samples, 0.16%)</title><rect x="76.0621%" y="565" width="0.1634%" height="15" fill="rgb(254,117,50)" fg:x="931" fg:w="2"/><text x="76.3121%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (2 samples, 0.16%)</title><rect x="76.0621%" y="549" width="0.1634%" height="15" fill="rgb(223,152,4)" fg:x="931" fg:w="2"/><text x="76.3121%" y="559.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="76.0621%" y="533" width="0.1634%" height="15" fill="rgb(245,6,2)" fg:x="931" fg:w="2"/><text x="76.3121%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="76.0621%" y="517" width="0.1634%" height="15" fill="rgb(249,150,24)" fg:x="931" fg:w="2"/><text x="76.3121%" y="527.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.2255%" y="613" width="0.0817%" height="15" fill="rgb(228,185,42)" fg:x="933" fg:w="1"/><text x="76.4755%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.3072%" y="581" width="0.0817%" height="15" fill="rgb(226,39,33)" fg:x="934" fg:w="1"/><text x="76.5572%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="76.3889%" y="549" width="0.1634%" height="15" fill="rgb(221,166,19)" fg:x="935" fg:w="2"/><text x="76.6389%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.3889%" y="533" width="0.1634%" height="15" fill="rgb(209,109,2)" fg:x="935" fg:w="2"/><text x="76.6389%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.3889%" y="517" width="0.1634%" height="15" fill="rgb(252,216,26)" fg:x="935" fg:w="2"/><text x="76.6389%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="76.3889%" y="501" width="0.1634%" height="15" fill="rgb(227,173,36)" fg:x="935" fg:w="2"/><text x="76.6389%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.4706%" y="485" width="0.0817%" height="15" fill="rgb(209,90,7)" fg:x="936" fg:w="1"/><text x="76.7206%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.5523%" y="533" width="0.1634%" height="15" fill="rgb(250,194,11)" fg:x="937" fg:w="2"/><text x="76.8023%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.5523%" y="517" width="0.1634%" height="15" fill="rgb(220,72,50)" fg:x="937" fg:w="2"/><text x="76.8023%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="76.5523%" y="501" width="0.1634%" height="15" fill="rgb(222,106,48)" fg:x="937" fg:w="2"/><text x="76.8023%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="76.5523%" y="485" width="0.1634%" height="15" fill="rgb(216,220,45)" fg:x="937" fg:w="2"/><text x="76.8023%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.7157%" y="485" width="0.0817%" height="15" fill="rgb(234,112,18)" fg:x="939" fg:w="1"/><text x="76.9657%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7157%" y="501" width="0.1634%" height="15" fill="rgb(206,179,9)" fg:x="939" fg:w="2"/><text x="76.9657%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.7974%" y="485" width="0.0817%" height="15" fill="rgb(215,115,40)" fg:x="940" fg:w="1"/><text x="77.0474%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.7974%" y="469" width="0.0817%" height="15" fill="rgb(222,69,34)" fg:x="940" fg:w="1"/><text x="77.0474%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.7974%" y="453" width="0.0817%" height="15" fill="rgb(209,161,10)" fg:x="940" fg:w="1"/><text x="77.0474%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.7974%" y="437" width="0.0817%" height="15" fill="rgb(217,6,38)" fg:x="940" fg:w="1"/><text x="77.0474%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.7974%" y="421" width="0.0817%" height="15" fill="rgb(229,229,48)" fg:x="940" fg:w="1"/><text x="77.0474%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="76.7157%" y="517" width="0.2451%" height="15" fill="rgb(225,21,28)" fg:x="939" fg:w="3"/><text x="76.9657%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.8791%" y="501" width="0.0817%" height="15" fill="rgb(206,33,13)" fg:x="941" fg:w="1"/><text x="77.1291%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.8791%" y="485" width="0.0817%" height="15" fill="rgb(242,178,17)" fg:x="941" fg:w="1"/><text x="77.1291%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.8791%" y="469" width="0.0817%" height="15" fill="rgb(220,162,5)" fg:x="941" fg:w="1"/><text x="77.1291%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.9608%" y="517" width="0.0817%" height="15" fill="rgb(210,33,43)" fg:x="942" fg:w="1"/><text x="77.2108%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.9608%" y="501" width="0.0817%" height="15" fill="rgb(216,116,54)" fg:x="942" fg:w="1"/><text x="77.2108%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.9608%" y="485" width="0.0817%" height="15" fill="rgb(249,92,24)" fg:x="942" fg:w="1"/><text x="77.2108%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9608%" y="469" width="0.0817%" height="15" fill="rgb(231,189,14)" fg:x="942" fg:w="1"/><text x="77.2108%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9608%" y="453" width="0.0817%" height="15" fill="rgb(230,8,41)" fg:x="942" fg:w="1"/><text x="77.2108%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9608%" y="437" width="0.0817%" height="15" fill="rgb(249,7,27)" fg:x="942" fg:w="1"/><text x="77.2108%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9608%" y="421" width="0.0817%" height="15" fill="rgb(232,86,5)" fg:x="942" fg:w="1"/><text x="77.2108%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.0425%" y="517" width="0.0817%" height="15" fill="rgb(224,175,18)" fg:x="943" fg:w="1"/><text x="77.2925%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0425%" y="501" width="0.0817%" height="15" fill="rgb(220,129,12)" fg:x="943" fg:w="1"/><text x="77.2925%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="76.7157%" y="533" width="0.4902%" height="15" fill="rgb(210,19,36)" fg:x="939" fg:w="6"/><text x="76.9657%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.1242%" y="517" width="0.0817%" height="15" fill="rgb(219,96,14)" fg:x="944" fg:w="1"/><text x="77.3742%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.90%)</title><rect x="76.3889%" y="565" width="0.8987%" height="15" fill="rgb(249,106,1)" fg:x="935" fg:w="11"/><text x="76.6389%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.74%)</title><rect x="76.5523%" y="549" width="0.7353%" height="15" fill="rgb(249,155,20)" fg:x="937" fg:w="9"/><text x="76.8023%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.2059%" y="533" width="0.0817%" height="15" fill="rgb(244,168,9)" fg:x="945" fg:w="1"/><text x="77.4559%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.2059%" y="517" width="0.0817%" height="15" fill="rgb(216,23,50)" fg:x="945" fg:w="1"/><text x="77.4559%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.2059%" y="501" width="0.0817%" height="15" fill="rgb(224,219,20)" fg:x="945" fg:w="1"/><text x="77.4559%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.2876%" y="517" width="0.0817%" height="15" fill="rgb(222,156,15)" fg:x="946" fg:w="1"/><text x="77.5376%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.2876%" y="565" width="0.1634%" height="15" fill="rgb(231,97,17)" fg:x="946" fg:w="2"/><text x="77.5376%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.2876%" y="549" width="0.1634%" height="15" fill="rgb(218,70,48)" fg:x="946" fg:w="2"/><text x="77.5376%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.2876%" y="533" width="0.1634%" height="15" fill="rgb(212,196,52)" fg:x="946" fg:w="2"/><text x="77.5376%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="517" width="0.0817%" height="15" fill="rgb(243,203,18)" fg:x="947" fg:w="1"/><text x="77.6193%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="501" width="0.0817%" height="15" fill="rgb(252,125,41)" fg:x="947" fg:w="1"/><text x="77.6193%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="485" width="0.0817%" height="15" fill="rgb(223,180,33)" fg:x="947" fg:w="1"/><text x="77.6193%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3693%" y="469" width="0.0817%" height="15" fill="rgb(254,159,46)" fg:x="947" fg:w="1"/><text x="77.6193%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3693%" y="453" width="0.0817%" height="15" fill="rgb(254,38,10)" fg:x="947" fg:w="1"/><text x="77.6193%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3693%" y="437" width="0.0817%" height="15" fill="rgb(208,217,32)" fg:x="947" fg:w="1"/><text x="77.6193%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="533" width="0.0817%" height="15" fill="rgb(221,120,13)" fg:x="948" fg:w="1"/><text x="77.7010%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="517" width="0.0817%" height="15" fill="rgb(246,54,52)" fg:x="948" fg:w="1"/><text x="77.7010%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="501" width="0.0817%" height="15" fill="rgb(242,34,25)" fg:x="948" fg:w="1"/><text x="77.7010%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.4510%" y="485" width="0.0817%" height="15" fill="rgb(247,209,9)" fg:x="948" fg:w="1"/><text x="77.7010%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.4510%" y="469" width="0.0817%" height="15" fill="rgb(228,71,26)" fg:x="948" fg:w="1"/><text x="77.7010%" y="479.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="77.5327%" y="469" width="0.0817%" height="15" fill="rgb(222,145,49)" fg:x="949" fg:w="1"/><text x="77.7827%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.5327%" y="453" width="0.0817%" height="15" fill="rgb(218,121,17)" fg:x="949" fg:w="1"/><text x="77.7827%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.5327%" y="437" width="0.0817%" height="15" fill="rgb(244,50,7)" fg:x="949" fg:w="1"/><text x="77.7827%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.25%)</title><rect x="77.4510%" y="549" width="0.2451%" height="15" fill="rgb(246,229,37)" fg:x="948" fg:w="3"/><text x="77.7010%" y="559.50"></text></g><g><title>treediff::diff::diff (2 samples, 0.16%)</title><rect x="77.5327%" y="533" width="0.1634%" height="15" fill="rgb(225,18,5)" fg:x="949" fg:w="2"/><text x="77.7827%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="77.5327%" y="517" width="0.1634%" height="15" fill="rgb(213,204,8)" fg:x="949" fg:w="2"/><text x="77.7827%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="77.5327%" y="501" width="0.1634%" height="15" fill="rgb(238,103,6)" fg:x="949" fg:w="2"/><text x="77.7827%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="77.5327%" y="485" width="0.1634%" height="15" fill="rgb(222,25,35)" fg:x="949" fg:w="2"/><text x="77.7827%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.6144%" y="469" width="0.0817%" height="15" fill="rgb(213,203,35)" fg:x="950" fg:w="1"/><text x="77.8644%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.6144%" y="453" width="0.0817%" height="15" fill="rgb(221,79,53)" fg:x="950" fg:w="1"/><text x="77.8644%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.6144%" y="437" width="0.0817%" height="15" fill="rgb(243,200,35)" fg:x="950" fg:w="1"/><text x="77.8644%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.6961%" y="517" width="0.0817%" height="15" fill="rgb(248,60,25)" fg:x="951" fg:w="1"/><text x="77.9461%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="77.7778%" y="485" width="0.0817%" height="15" fill="rgb(227,53,46)" fg:x="952" fg:w="1"/><text x="78.0278%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.9412%" y="469" width="0.1634%" height="15" fill="rgb(216,120,32)" fg:x="954" fg:w="2"/><text x="78.1912%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.9412%" y="453" width="0.1634%" height="15" fill="rgb(220,134,1)" fg:x="954" fg:w="2"/><text x="78.1912%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.0229%" y="437" width="0.0817%" height="15" fill="rgb(237,168,5)" fg:x="955" fg:w="1"/><text x="78.2729%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="78.2680%" y="373" width="0.0817%" height="15" fill="rgb(231,100,33)" fg:x="958" fg:w="1"/><text x="78.5180%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="78.1046%" y="469" width="0.3268%" height="15" fill="rgb(236,177,47)" fg:x="956" fg:w="4"/><text x="78.3546%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.25%)</title><rect x="78.1863%" y="453" width="0.2451%" height="15" fill="rgb(235,7,49)" fg:x="957" fg:w="3"/><text x="78.4363%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.2680%" y="437" width="0.1634%" height="15" fill="rgb(232,119,22)" fg:x="958" fg:w="2"/><text x="78.5180%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2680%" y="421" width="0.1634%" height="15" fill="rgb(254,73,53)" fg:x="958" fg:w="2"/><text x="78.5180%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="78.2680%" y="405" width="0.1634%" height="15" fill="rgb(251,35,20)" fg:x="958" fg:w="2"/><text x="78.5180%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="78.2680%" y="389" width="0.1634%" height="15" fill="rgb(241,119,20)" fg:x="958" fg:w="2"/><text x="78.5180%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.3497%" y="373" width="0.0817%" height="15" fill="rgb(207,102,14)" fg:x="959" fg:w="1"/><text x="78.5997%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3497%" y="357" width="0.0817%" height="15" fill="rgb(248,201,50)" fg:x="959" fg:w="1"/><text x="78.5997%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="77.8595%" y="485" width="0.6536%" height="15" fill="rgb(222,185,44)" fg:x="953" fg:w="8"/><text x="78.1095%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.4314%" y="469" width="0.0817%" height="15" fill="rgb(218,107,18)" fg:x="960" fg:w="1"/><text x="78.6814%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4314%" y="453" width="0.0817%" height="15" fill="rgb(237,177,39)" fg:x="960" fg:w="1"/><text x="78.6814%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (11 samples, 0.90%)</title><rect x="77.6961%" y="549" width="0.8987%" height="15" fill="rgb(246,69,6)" fg:x="951" fg:w="11"/><text x="77.9461%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 0.90%)</title><rect x="77.6961%" y="533" width="0.8987%" height="15" fill="rgb(234,208,37)" fg:x="951" fg:w="11"/><text x="77.9461%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.82%)</title><rect x="77.7778%" y="517" width="0.8170%" height="15" fill="rgb(225,4,6)" fg:x="952" fg:w="10"/><text x="78.0278%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.82%)</title><rect x="77.7778%" y="501" width="0.8170%" height="15" fill="rgb(233,45,0)" fg:x="952" fg:w="10"/><text x="78.0278%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.5131%" y="485" width="0.0817%" height="15" fill="rgb(226,136,5)" fg:x="961" fg:w="1"/><text x="78.7631%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.6765%" y="389" width="0.1634%" height="15" fill="rgb(211,91,47)" fg:x="963" fg:w="2"/><text x="78.9265%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.6765%" y="373" width="0.1634%" height="15" fill="rgb(242,88,51)" fg:x="963" fg:w="2"/><text x="78.9265%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7582%" y="357" width="0.0817%" height="15" fill="rgb(230,91,28)" fg:x="964" fg:w="1"/><text x="79.0082%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7582%" y="341" width="0.0817%" height="15" fill="rgb(254,186,29)" fg:x="964" fg:w="1"/><text x="79.0082%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.7582%" y="325" width="0.0817%" height="15" fill="rgb(238,6,4)" fg:x="964" fg:w="1"/><text x="79.0082%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="78.6765%" y="421" width="0.3268%" height="15" fill="rgb(221,151,16)" fg:x="963" fg:w="4"/><text x="78.9265%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="78.6765%" y="405" width="0.3268%" height="15" fill="rgb(251,143,52)" fg:x="963" fg:w="4"/><text x="78.9265%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="78.8399%" y="389" width="0.1634%" height="15" fill="rgb(206,90,15)" fg:x="965" fg:w="2"/><text x="79.0899%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.9216%" y="373" width="0.0817%" height="15" fill="rgb(218,35,8)" fg:x="966" fg:w="1"/><text x="79.1716%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="78.6765%" y="437" width="0.4085%" height="15" fill="rgb(239,215,6)" fg:x="963" fg:w="5"/><text x="78.9265%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.0033%" y="421" width="0.0817%" height="15" fill="rgb(245,116,39)" fg:x="967" fg:w="1"/><text x="79.2533%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="78.6765%" y="453" width="0.4902%" height="15" fill="rgb(242,65,28)" fg:x="963" fg:w="6"/><text x="78.9265%" y="463.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="79.0850%" y="437" width="0.0817%" height="15" fill="rgb(252,132,53)" fg:x="968" fg:w="1"/><text x="79.3350%" y="447.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.0850%" y="421" width="0.0817%" height="15" fill="rgb(224,159,50)" fg:x="968" fg:w="1"/><text x="79.3350%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.82%)</title><rect x="78.5948%" y="485" width="0.8170%" height="15" fill="rgb(224,93,4)" fg:x="962" fg:w="10"/><text x="78.8448%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.82%)</title><rect x="78.5948%" y="469" width="0.8170%" height="15" fill="rgb(208,81,34)" fg:x="962" fg:w="10"/><text x="78.8448%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.25%)</title><rect x="79.1667%" y="453" width="0.2451%" height="15" fill="rgb(233,92,54)" fg:x="969" fg:w="3"/><text x="79.4167%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="79.2484%" y="437" width="0.1634%" height="15" fill="rgb(237,21,14)" fg:x="970" fg:w="2"/><text x="79.4984%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="79.4118%" y="485" width="0.1634%" height="15" fill="rgb(249,128,51)" fg:x="972" fg:w="2"/><text x="79.6618%" y="495.50"></text></g><g><title>engine::session::Session::close (45 samples, 3.68%)</title><rect x="75.9804%" y="661" width="3.6765%" height="15" fill="rgb(223,129,24)" fg:x="930" fg:w="45"/><text x="76.2304%" y="671.50">engi..</text></g><g><title>engine::session::state::State::close (42 samples, 3.43%)</title><rect x="76.2255%" y="645" width="3.4314%" height="15" fill="rgb(231,168,25)" fg:x="933" fg:w="42"/><text x="76.4755%" y="655.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (42 samples, 3.43%)</title><rect x="76.2255%" y="629" width="3.4314%" height="15" fill="rgb(224,39,20)" fg:x="933" fg:w="42"/><text x="76.4755%" y="639.50">eng..</text></g><g><title>core::iter::adapters::try_process (41 samples, 3.35%)</title><rect x="76.3072%" y="613" width="3.3497%" height="15" fill="rgb(225,152,53)" fg:x="934" fg:w="41"/><text x="76.5572%" y="623.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 3.35%)</title><rect x="76.3072%" y="597" width="3.3497%" height="15" fill="rgb(252,17,24)" fg:x="934" fg:w="41"/><text x="76.5572%" y="607.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.27%)</title><rect x="76.3889%" y="581" width="3.2680%" height="15" fill="rgb(250,114,30)" fg:x="935" fg:w="40"/><text x="76.6389%" y="591.50">eng..</text></g><g><title>kernel::model::any_entity_changes (27 samples, 2.21%)</title><rect x="77.4510%" y="565" width="2.2059%" height="15" fill="rgb(229,5,4)" fg:x="948" fg:w="27"/><text x="77.7010%" y="575.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.06%)</title><rect x="78.5948%" y="549" width="1.0621%" height="15" fill="rgb(225,176,49)" fg:x="962" fg:w="13"/><text x="78.8448%" y="559.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.06%)</title><rect x="78.5948%" y="533" width="1.0621%" height="15" fill="rgb(224,221,49)" fg:x="962" fg:w="13"/><text x="78.8448%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.06%)</title><rect x="78.5948%" y="517" width="1.0621%" height="15" fill="rgb(253,169,27)" fg:x="962" fg:w="13"/><text x="78.8448%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.06%)</title><rect x="78.5948%" y="501" width="1.0621%" height="15" fill="rgb(211,206,16)" fg:x="962" fg:w="13"/><text x="78.8448%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.5752%" y="485" width="0.0817%" height="15" fill="rgb(244,87,35)" fg:x="974" fg:w="1"/><text x="79.8252%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.5752%" y="469" width="0.0817%" height="15" fill="rgb(246,28,10)" fg:x="974" fg:w="1"/><text x="79.8252%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8203%" y="517" width="0.0817%" height="15" fill="rgb(229,12,44)" fg:x="977" fg:w="1"/><text x="80.0703%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.8203%" y="501" width="0.0817%" height="15" fill="rgb(210,145,37)" fg:x="977" fg:w="1"/><text x="80.0703%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8203%" y="485" width="0.0817%" height="15" fill="rgb(227,112,52)" fg:x="977" fg:w="1"/><text x="80.0703%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.8203%" y="469" width="0.0817%" height="15" fill="rgb(238,155,34)" fg:x="977" fg:w="1"/><text x="80.0703%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.8203%" y="453" width="0.0817%" height="15" fill="rgb(239,226,36)" fg:x="977" fg:w="1"/><text x="80.0703%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.8203%" y="437" width="0.0817%" height="15" fill="rgb(230,16,23)" fg:x="977" fg:w="1"/><text x="80.0703%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.8203%" y="421" width="0.0817%" height="15" fill="rgb(236,171,36)" fg:x="977" fg:w="1"/><text x="80.0703%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8203%" y="405" width="0.0817%" height="15" fill="rgb(221,22,14)" fg:x="977" fg:w="1"/><text x="80.0703%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.8203%" y="389" width="0.0817%" height="15" fill="rgb(242,43,11)" fg:x="977" fg:w="1"/><text x="80.0703%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.8203%" y="373" width="0.0817%" height="15" fill="rgb(232,69,23)" fg:x="977" fg:w="1"/><text x="80.0703%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.8203%" y="357" width="0.0817%" height="15" fill="rgb(216,180,54)" fg:x="977" fg:w="1"/><text x="80.0703%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.8203%" y="341" width="0.0817%" height="15" fill="rgb(216,5,24)" fg:x="977" fg:w="1"/><text x="80.0703%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.8203%" y="325" width="0.0817%" height="15" fill="rgb(225,89,9)" fg:x="977" fg:w="1"/><text x="80.0703%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.8203%" y="309" width="0.0817%" height="15" fill="rgb(243,75,33)" fg:x="977" fg:w="1"/><text x="80.0703%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="79.8203%" y="533" width="0.1634%" height="15" fill="rgb(247,141,45)" fg:x="977" fg:w="2"/><text x="80.0703%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9020%" y="517" width="0.0817%" height="15" fill="rgb(232,177,36)" fg:x="978" fg:w="1"/><text x="80.1520%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9020%" y="501" width="0.0817%" height="15" fill="rgb(219,125,36)" fg:x="978" fg:w="1"/><text x="80.1520%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.9020%" y="485" width="0.0817%" height="15" fill="rgb(227,94,9)" fg:x="978" fg:w="1"/><text x="80.1520%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.9020%" y="469" width="0.0817%" height="15" fill="rgb(240,34,52)" fg:x="978" fg:w="1"/><text x="80.1520%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.9020%" y="453" width="0.0817%" height="15" fill="rgb(216,45,12)" fg:x="978" fg:w="1"/><text x="80.1520%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="79.9837%" y="325" width="0.0817%" height="15" fill="rgb(246,21,19)" fg:x="979" fg:w="1"/><text x="80.2337%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="79.9837%" y="309" width="0.0817%" height="15" fill="rgb(213,98,42)" fg:x="979" fg:w="1"/><text x="80.2337%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9837%" y="293" width="0.0817%" height="15" fill="rgb(250,136,47)" fg:x="979" fg:w="1"/><text x="80.2337%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.9837%" y="405" width="0.1634%" height="15" fill="rgb(251,124,27)" fg:x="979" fg:w="2"/><text x="80.2337%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.9837%" y="389" width="0.1634%" height="15" fill="rgb(229,180,14)" fg:x="979" fg:w="2"/><text x="80.2337%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.9837%" y="373" width="0.1634%" height="15" fill="rgb(245,216,25)" fg:x="979" fg:w="2"/><text x="80.2337%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="79.9837%" y="357" width="0.1634%" height="15" fill="rgb(251,43,5)" fg:x="979" fg:w="2"/><text x="80.2337%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="79.9837%" y="341" width="0.1634%" height="15" fill="rgb(250,128,24)" fg:x="979" fg:w="2"/><text x="80.2337%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.0654%" y="325" width="0.0817%" height="15" fill="rgb(217,117,27)" fg:x="980" fg:w="1"/><text x="80.3154%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="80.0654%" y="309" width="0.0817%" height="15" fill="rgb(245,147,4)" fg:x="980" fg:w="1"/><text x="80.3154%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="80.0654%" y="293" width="0.0817%" height="15" fill="rgb(242,201,35)" fg:x="980" fg:w="1"/><text x="80.3154%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.0654%" y="277" width="0.0817%" height="15" fill="rgb(218,181,1)" fg:x="980" fg:w="1"/><text x="80.3154%" y="287.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (5 samples, 0.41%)</title><rect x="79.8203%" y="565" width="0.4085%" height="15" fill="rgb(222,6,29)" fg:x="977" fg:w="5"/><text x="80.0703%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (5 samples, 0.41%)</title><rect x="79.8203%" y="549" width="0.4085%" height="15" fill="rgb(208,186,3)" fg:x="977" fg:w="5"/><text x="80.0703%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (3 samples, 0.25%)</title><rect x="79.9837%" y="533" width="0.2451%" height="15" fill="rgb(216,36,26)" fg:x="979" fg:w="3"/><text x="80.2337%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (3 samples, 0.25%)</title><rect x="79.9837%" y="517" width="0.2451%" height="15" fill="rgb(248,201,23)" fg:x="979" fg:w="3"/><text x="80.2337%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.25%)</title><rect x="79.9837%" y="501" width="0.2451%" height="15" fill="rgb(251,170,31)" fg:x="979" fg:w="3"/><text x="80.2337%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.25%)</title><rect x="79.9837%" y="485" width="0.2451%" height="15" fill="rgb(207,110,25)" fg:x="979" fg:w="3"/><text x="80.2337%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="79.9837%" y="469" width="0.2451%" height="15" fill="rgb(250,54,15)" fg:x="979" fg:w="3"/><text x="80.2337%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="79.9837%" y="453" width="0.2451%" height="15" fill="rgb(227,68,33)" fg:x="979" fg:w="3"/><text x="80.2337%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="79.9837%" y="437" width="0.2451%" height="15" fill="rgb(238,34,41)" fg:x="979" fg:w="3"/><text x="80.2337%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="79.9837%" y="421" width="0.2451%" height="15" fill="rgb(220,11,15)" fg:x="979" fg:w="3"/><text x="80.2337%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.1471%" y="405" width="0.0817%" height="15" fill="rgb(246,111,35)" fg:x="981" fg:w="1"/><text x="80.3971%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.1471%" y="389" width="0.0817%" height="15" fill="rgb(209,88,53)" fg:x="981" fg:w="1"/><text x="80.3971%" y="399.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="80.2288%" y="421" width="0.0817%" height="15" fill="rgb(231,185,47)" fg:x="982" fg:w="1"/><text x="80.4788%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="80.2288%" y="405" width="0.0817%" height="15" fill="rgb(233,154,1)" fg:x="982" fg:w="1"/><text x="80.4788%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="80.2288%" y="389" width="0.0817%" height="15" fill="rgb(225,15,46)" fg:x="982" fg:w="1"/><text x="80.4788%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2288%" y="373" width="0.0817%" height="15" fill="rgb(211,135,41)" fg:x="982" fg:w="1"/><text x="80.4788%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.3922%" y="373" width="0.0817%" height="15" fill="rgb(208,54,0)" fg:x="984" fg:w="1"/><text x="80.6422%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.3922%" y="389" width="0.1634%" height="15" fill="rgb(244,136,14)" fg:x="984" fg:w="2"/><text x="80.6422%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4739%" y="373" width="0.0817%" height="15" fill="rgb(241,56,14)" fg:x="985" fg:w="1"/><text x="80.7239%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4739%" y="357" width="0.0817%" height="15" fill="rgb(205,80,24)" fg:x="985" fg:w="1"/><text x="80.7239%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4739%" y="341" width="0.0817%" height="15" fill="rgb(220,57,4)" fg:x="985" fg:w="1"/><text x="80.7239%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4739%" y="325" width="0.0817%" height="15" fill="rgb(226,193,50)" fg:x="985" fg:w="1"/><text x="80.7239%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.4739%" y="309" width="0.0817%" height="15" fill="rgb(231,168,22)" fg:x="985" fg:w="1"/><text x="80.7239%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.4739%" y="293" width="0.0817%" height="15" fill="rgb(254,215,14)" fg:x="985" fg:w="1"/><text x="80.7239%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.5556%" y="341" width="0.0817%" height="15" fill="rgb(211,115,16)" fg:x="986" fg:w="1"/><text x="80.8056%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.5556%" y="325" width="0.0817%" height="15" fill="rgb(236,210,16)" fg:x="986" fg:w="1"/><text x="80.8056%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.5556%" y="309" width="0.0817%" height="15" fill="rgb(221,94,12)" fg:x="986" fg:w="1"/><text x="80.8056%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5556%" y="293" width="0.0817%" height="15" fill="rgb(235,218,49)" fg:x="986" fg:w="1"/><text x="80.8056%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5556%" y="277" width="0.0817%" height="15" fill="rgb(217,114,14)" fg:x="986" fg:w="1"/><text x="80.8056%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.5556%" y="261" width="0.0817%" height="15" fill="rgb(216,145,22)" fg:x="986" fg:w="1"/><text x="80.8056%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.5556%" y="245" width="0.0817%" height="15" fill="rgb(217,112,39)" fg:x="986" fg:w="1"/><text x="80.8056%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.5556%" y="229" width="0.0817%" height="15" fill="rgb(225,85,32)" fg:x="986" fg:w="1"/><text x="80.8056%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5556%" y="213" width="0.0817%" height="15" fill="rgb(245,209,47)" fg:x="986" fg:w="1"/><text x="80.8056%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="80.5556%" y="197" width="0.0817%" height="15" fill="rgb(218,220,15)" fg:x="986" fg:w="1"/><text x="80.8056%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="80.5556%" y="181" width="0.0817%" height="15" fill="rgb(222,202,31)" fg:x="986" fg:w="1"/><text x="80.8056%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="80.5556%" y="165" width="0.0817%" height="15" fill="rgb(243,203,4)" fg:x="986" fg:w="1"/><text x="80.8056%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="80.5556%" y="149" width="0.0817%" height="15" fill="rgb(237,92,17)" fg:x="986" fg:w="1"/><text x="80.8056%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="80.5556%" y="133" width="0.0817%" height="15" fill="rgb(231,119,7)" fg:x="986" fg:w="1"/><text x="80.8056%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="80.7190%" y="277" width="0.0817%" height="15" fill="rgb(237,82,41)" fg:x="988" fg:w="1"/><text x="80.9690%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.33%)</title><rect x="80.5556%" y="389" width="0.3268%" height="15" fill="rgb(226,81,48)" fg:x="986" fg:w="4"/><text x="80.8056%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="80.5556%" y="373" width="0.3268%" height="15" fill="rgb(234,70,51)" fg:x="986" fg:w="4"/><text x="80.8056%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="80.5556%" y="357" width="0.3268%" height="15" fill="rgb(251,86,4)" fg:x="986" fg:w="4"/><text x="80.8056%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.25%)</title><rect x="80.6373%" y="341" width="0.2451%" height="15" fill="rgb(244,144,28)" fg:x="987" fg:w="3"/><text x="80.8873%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="80.6373%" y="325" width="0.2451%" height="15" fill="rgb(232,161,39)" fg:x="987" fg:w="3"/><text x="80.8873%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="80.7190%" y="309" width="0.1634%" height="15" fill="rgb(247,34,51)" fg:x="988" fg:w="2"/><text x="80.9690%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.7190%" y="293" width="0.1634%" height="15" fill="rgb(225,132,2)" fg:x="988" fg:w="2"/><text x="80.9690%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.8007%" y="277" width="0.0817%" height="15" fill="rgb(209,159,44)" fg:x="989" fg:w="1"/><text x="81.0507%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.8007%" y="261" width="0.0817%" height="15" fill="rgb(251,214,1)" fg:x="989" fg:w="1"/><text x="81.0507%" y="271.50"></text></g><g><title>kernel::model::props::Props::property_named (2 samples, 0.16%)</title><rect x="80.9641%" y="373" width="0.1634%" height="15" fill="rgb(247,84,47)" fg:x="991" fg:w="2"/><text x="81.2141%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="80.9641%" y="357" width="0.1634%" height="15" fill="rgb(240,111,43)" fg:x="991" fg:w="2"/><text x="81.2141%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="81.0458%" y="341" width="0.0817%" height="15" fill="rgb(215,214,35)" fg:x="992" fg:w="1"/><text x="81.2958%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.41%)</title><rect x="80.8824%" y="389" width="0.4085%" height="15" fill="rgb(248,207,23)" fg:x="990" fg:w="5"/><text x="81.1324%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="81.1275%" y="373" width="0.1634%" height="15" fill="rgb(214,186,4)" fg:x="993" fg:w="2"/><text x="81.3775%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="81.1275%" y="357" width="0.1634%" height="15" fill="rgb(220,133,22)" fg:x="993" fg:w="2"/><text x="81.3775%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="81.1275%" y="341" width="0.1634%" height="15" fill="rgb(239,134,19)" fg:x="993" fg:w="2"/><text x="81.3775%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.1275%" y="325" width="0.1634%" height="15" fill="rgb(250,140,9)" fg:x="993" fg:w="2"/><text x="81.3775%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="81.1275%" y="309" width="0.1634%" height="15" fill="rgb(225,59,14)" fg:x="993" fg:w="2"/><text x="81.3775%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.1275%" y="293" width="0.1634%" height="15" fill="rgb(214,152,51)" fg:x="993" fg:w="2"/><text x="81.3775%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="81.1275%" y="277" width="0.1634%" height="15" fill="rgb(251,227,43)" fg:x="993" fg:w="2"/><text x="81.3775%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.1275%" y="261" width="0.1634%" height="15" fill="rgb(241,96,17)" fg:x="993" fg:w="2"/><text x="81.3775%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2908%" y="325" width="0.0817%" height="15" fill="rgb(234,198,43)" fg:x="995" fg:w="1"/><text x="81.5408%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2908%" y="309" width="0.0817%" height="15" fill="rgb(220,108,29)" fg:x="995" fg:w="1"/><text x="81.5408%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.2908%" y="293" width="0.0817%" height="15" fill="rgb(226,163,33)" fg:x="995" fg:w="1"/><text x="81.5408%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.2908%" y="277" width="0.0817%" height="15" fill="rgb(205,194,45)" fg:x="995" fg:w="1"/><text x="81.5408%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.2908%" y="261" width="0.0817%" height="15" fill="rgb(206,143,44)" fg:x="995" fg:w="1"/><text x="81.5408%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.2908%" y="245" width="0.0817%" height="15" fill="rgb(236,136,36)" fg:x="995" fg:w="1"/><text x="81.5408%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.2908%" y="229" width="0.0817%" height="15" fill="rgb(249,172,42)" fg:x="995" fg:w="1"/><text x="81.5408%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.2908%" y="213" width="0.0817%" height="15" fill="rgb(216,139,23)" fg:x="995" fg:w="1"/><text x="81.5408%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.2908%" y="197" width="0.0817%" height="15" fill="rgb(207,166,20)" fg:x="995" fg:w="1"/><text x="81.5408%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="81.2908%" y="181" width="0.0817%" height="15" fill="rgb(210,209,22)" fg:x="995" fg:w="1"/><text x="81.5408%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="81.2908%" y="165" width="0.0817%" height="15" fill="rgb(232,118,20)" fg:x="995" fg:w="1"/><text x="81.5408%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="81.2908%" y="149" width="0.0817%" height="15" fill="rgb(238,113,42)" fg:x="995" fg:w="1"/><text x="81.5408%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="81.2908%" y="133" width="0.0817%" height="15" fill="rgb(231,42,5)" fg:x="995" fg:w="1"/><text x="81.5408%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="81.2908%" y="117" width="0.0817%" height="15" fill="rgb(243,166,24)" fg:x="995" fg:w="1"/><text x="81.5408%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.2908%" y="101" width="0.0817%" height="15" fill="rgb(237,226,12)" fg:x="995" fg:w="1"/><text x="81.5408%" y="111.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3725%" y="261" width="0.0817%" height="15" fill="rgb(229,133,24)" fg:x="996" fg:w="1"/><text x="81.6225%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.3725%" y="245" width="0.0817%" height="15" fill="rgb(238,33,43)" fg:x="996" fg:w="1"/><text x="81.6225%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.25%)</title><rect x="81.2908%" y="389" width="0.2451%" height="15" fill="rgb(227,59,38)" fg:x="995" fg:w="3"/><text x="81.5408%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="81.2908%" y="373" width="0.2451%" height="15" fill="rgb(230,97,0)" fg:x="995" fg:w="3"/><text x="81.5408%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="81.2908%" y="357" width="0.2451%" height="15" fill="rgb(250,173,50)" fg:x="995" fg:w="3"/><text x="81.5408%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="81.2908%" y="341" width="0.2451%" height="15" fill="rgb(240,15,50)" fg:x="995" fg:w="3"/><text x="81.5408%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="81.3725%" y="325" width="0.1634%" height="15" fill="rgb(221,93,22)" fg:x="996" fg:w="2"/><text x="81.6225%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.3725%" y="309" width="0.1634%" height="15" fill="rgb(245,180,53)" fg:x="996" fg:w="2"/><text x="81.6225%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="81.3725%" y="293" width="0.1634%" height="15" fill="rgb(231,88,51)" fg:x="996" fg:w="2"/><text x="81.6225%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="81.3725%" y="277" width="0.1634%" height="15" fill="rgb(240,58,21)" fg:x="996" fg:w="2"/><text x="81.6225%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="81.4542%" y="261" width="0.0817%" height="15" fill="rgb(237,21,10)" fg:x="997" fg:w="1"/><text x="81.7042%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.4542%" y="245" width="0.0817%" height="15" fill="rgb(218,43,11)" fg:x="997" fg:w="1"/><text x="81.7042%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.6176%" y="341" width="0.0817%" height="15" fill="rgb(218,221,29)" fg:x="999" fg:w="1"/><text x="81.8676%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.6176%" y="325" width="0.0817%" height="15" fill="rgb(214,118,42)" fg:x="999" fg:w="1"/><text x="81.8676%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.6176%" y="309" width="0.0817%" height="15" fill="rgb(251,200,26)" fg:x="999" fg:w="1"/><text x="81.8676%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6176%" y="293" width="0.0817%" height="15" fill="rgb(237,101,39)" fg:x="999" fg:w="1"/><text x="81.8676%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.6176%" y="277" width="0.0817%" height="15" fill="rgb(251,117,11)" fg:x="999" fg:w="1"/><text x="81.8676%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="81.6176%" y="261" width="0.0817%" height="15" fill="rgb(216,223,23)" fg:x="999" fg:w="1"/><text x="81.8676%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="81.6176%" y="245" width="0.0817%" height="15" fill="rgb(251,54,12)" fg:x="999" fg:w="1"/><text x="81.8676%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="81.6176%" y="229" width="0.0817%" height="15" fill="rgb(254,176,54)" fg:x="999" fg:w="1"/><text x="81.8676%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="81.6176%" y="213" width="0.0817%" height="15" fill="rgb(210,32,8)" fg:x="999" fg:w="1"/><text x="81.8676%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.6176%" y="197" width="0.0817%" height="15" fill="rgb(235,52,38)" fg:x="999" fg:w="1"/><text x="81.8676%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="81.8627%" y="261" width="0.0817%" height="15" fill="rgb(231,4,44)" fg:x="1002" fg:w="1"/><text x="82.1127%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8627%" y="245" width="0.0817%" height="15" fill="rgb(249,2,32)" fg:x="1002" fg:w="1"/><text x="82.1127%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="81.8627%" y="309" width="0.1634%" height="15" fill="rgb(224,65,26)" fg:x="1002" fg:w="2"/><text x="82.1127%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="81.8627%" y="293" width="0.1634%" height="15" fill="rgb(250,73,40)" fg:x="1002" fg:w="2"/><text x="82.1127%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="81.8627%" y="277" width="0.1634%" height="15" fill="rgb(253,177,16)" fg:x="1002" fg:w="2"/><text x="82.1127%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="81.9444%" y="261" width="0.0817%" height="15" fill="rgb(217,32,34)" fg:x="1003" fg:w="1"/><text x="82.1944%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.0261%" y="293" width="0.0817%" height="15" fill="rgb(212,7,10)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.0261%" y="277" width="0.0817%" height="15" fill="rgb(245,89,8)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0261%" y="261" width="0.0817%" height="15" fill="rgb(237,16,53)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0261%" y="245" width="0.0817%" height="15" fill="rgb(250,204,30)" fg:x="1004" fg:w="1"/><text x="82.2761%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.14%)</title><rect x="82.1078%" y="245" width="1.1438%" height="15" fill="rgb(208,77,27)" fg:x="1005" fg:w="14"/><text x="82.3578%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.14%)</title><rect x="82.1078%" y="229" width="1.1438%" height="15" fill="rgb(250,204,28)" fg:x="1005" fg:w="14"/><text x="82.3578%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="83.2516%" y="245" width="0.0817%" height="15" fill="rgb(244,63,21)" fg:x="1019" fg:w="1"/><text x="83.5016%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="83.4967%" y="181" width="0.0817%" height="15" fill="rgb(236,85,44)" fg:x="1022" fg:w="1"/><text x="83.7467%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="83.4967%" y="165" width="0.0817%" height="15" fill="rgb(215,98,4)" fg:x="1022" fg:w="1"/><text x="83.7467%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (37 samples, 3.02%)</title><rect x="83.5784%" y="181" width="3.0229%" height="15" fill="rgb(235,38,11)" fg:x="1023" fg:w="37"/><text x="83.8284%" y="191.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (37 samples, 3.02%)</title><rect x="83.5784%" y="165" width="3.0229%" height="15" fill="rgb(254,186,25)" fg:x="1023" fg:w="37"/><text x="83.8284%" y="175.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (37 samples, 3.02%)</title><rect x="83.5784%" y="149" width="3.0229%" height="15" fill="rgb(225,55,31)" fg:x="1023" fg:w="37"/><text x="83.8284%" y="159.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (41 samples, 3.35%)</title><rect x="83.3333%" y="229" width="3.3497%" height="15" fill="rgb(211,15,21)" fg:x="1020" fg:w="41"/><text x="83.5833%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (41 samples, 3.35%)</title><rect x="83.3333%" y="213" width="3.3497%" height="15" fill="rgb(215,187,41)" fg:x="1020" fg:w="41"/><text x="83.5833%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (41 samples, 3.35%)</title><rect x="83.3333%" y="197" width="3.3497%" height="15" fill="rgb(248,69,32)" fg:x="1020" fg:w="41"/><text x="83.5833%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="86.6013%" y="181" width="0.0817%" height="15" fill="rgb(252,102,52)" fg:x="1060" fg:w="1"/><text x="86.8513%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="86.6830%" y="229" width="0.0817%" height="15" fill="rgb(253,140,32)" fg:x="1061" fg:w="1"/><text x="86.9330%" y="239.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="86.7647%" y="213" width="0.0817%" height="15" fill="rgb(216,56,42)" fg:x="1062" fg:w="1"/><text x="87.0147%" y="223.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="86.7647%" y="197" width="0.0817%" height="15" fill="rgb(216,184,14)" fg:x="1062" fg:w="1"/><text x="87.0147%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="86.7647%" y="229" width="0.1634%" height="15" fill="rgb(237,187,27)" fg:x="1062" fg:w="2"/><text x="87.0147%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="86.8464%" y="213" width="0.0817%" height="15" fill="rgb(219,65,3)" fg:x="1063" fg:w="1"/><text x="87.0964%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="86.9281%" y="229" width="0.0817%" height="15" fill="rgb(245,83,25)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="86.9281%" y="213" width="0.0817%" height="15" fill="rgb(214,205,45)" fg:x="1064" fg:w="1"/><text x="87.1781%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (61 samples, 4.98%)</title><rect x="82.1078%" y="261" width="4.9837%" height="15" fill="rgb(241,20,18)" fg:x="1005" fg:w="61"/><text x="82.3578%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (46 samples, 3.76%)</title><rect x="83.3333%" y="245" width="3.7582%" height="15" fill="rgb(232,163,23)" fg:x="1020" fg:w="46"/><text x="83.5833%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="87.0098%" y="229" width="0.0817%" height="15" fill="rgb(214,5,46)" fg:x="1065" fg:w="1"/><text x="87.2598%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="87.0915%" y="261" width="0.3268%" height="15" fill="rgb(229,78,17)" fg:x="1066" fg:w="4"/><text x="87.3415%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="87.1732%" y="245" width="0.2451%" height="15" fill="rgb(248,89,10)" fg:x="1067" fg:w="3"/><text x="87.4232%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="87.1732%" y="229" width="0.2451%" height="15" fill="rgb(248,54,15)" fg:x="1067" fg:w="3"/><text x="87.4232%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.25%)</title><rect x="87.1732%" y="213" width="0.2451%" height="15" fill="rgb(223,116,6)" fg:x="1067" fg:w="3"/><text x="87.4232%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="87.1732%" y="197" width="0.2451%" height="15" fill="rgb(205,125,38)" fg:x="1067" fg:w="3"/><text x="87.4232%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="87.1732%" y="181" width="0.2451%" height="15" fill="rgb(251,78,38)" fg:x="1067" fg:w="3"/><text x="87.4232%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="87.1732%" y="165" width="0.2451%" height="15" fill="rgb(253,78,28)" fg:x="1067" fg:w="3"/><text x="87.4232%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="87.4183%" y="229" width="0.0817%" height="15" fill="rgb(209,120,3)" fg:x="1070" fg:w="1"/><text x="87.6683%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (67 samples, 5.47%)</title><rect x="82.1078%" y="277" width="5.4739%" height="15" fill="rgb(238,229,9)" fg:x="1005" fg:w="67"/><text x="82.3578%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="87.4183%" y="261" width="0.1634%" height="15" fill="rgb(253,159,18)" fg:x="1070" fg:w="2"/><text x="87.6683%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="87.4183%" y="245" width="0.1634%" height="15" fill="rgb(244,42,34)" fg:x="1070" fg:w="2"/><text x="87.6683%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.5000%" y="229" width="0.0817%" height="15" fill="rgb(224,8,7)" fg:x="1071" fg:w="1"/><text x="87.7500%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5000%" y="213" width="0.0817%" height="15" fill="rgb(210,201,45)" fg:x="1071" fg:w="1"/><text x="87.7500%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.5000%" y="197" width="0.0817%" height="15" fill="rgb(252,185,21)" fg:x="1071" fg:w="1"/><text x="87.7500%" y="207.50"></text></g><g><title>regex::regex::string::Regex::new (69 samples, 5.64%)</title><rect x="82.0261%" y="309" width="5.6373%" height="15" fill="rgb(223,131,1)" fg:x="1004" fg:w="69"/><text x="82.2761%" y="319.50">regex::..</text></g><g><title>regex::builders::Builder::build_one_string (68 samples, 5.56%)</title><rect x="82.1078%" y="293" width="5.5556%" height="15" fill="rgb(245,141,16)" fg:x="1005" fg:w="68"/><text x="82.3578%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::new (1 samples, 0.08%)</title><rect x="87.5817%" y="277" width="0.0817%" height="15" fill="rgb(229,55,45)" fg:x="1072" fg:w="1"/><text x="87.8317%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="87.6634%" y="261" width="0.1634%" height="15" fill="rgb(208,92,15)" fg:x="1073" fg:w="2"/><text x="87.9134%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="87.7451%" y="245" width="0.0817%" height="15" fill="rgb(234,185,47)" fg:x="1074" fg:w="1"/><text x="87.9951%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (74 samples, 6.05%)</title><rect x="81.8627%" y="325" width="6.0458%" height="15" fill="rgb(253,104,50)" fg:x="1002" fg:w="74"/><text x="82.1127%" y="335.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="87.6634%" y="309" width="0.2451%" height="15" fill="rgb(205,70,7)" fg:x="1073" fg:w="3"/><text x="87.9134%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="87.6634%" y="293" width="0.2451%" height="15" fill="rgb(240,178,43)" fg:x="1073" fg:w="3"/><text x="87.9134%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="87.6634%" y="277" width="0.2451%" height="15" fill="rgb(214,112,2)" fg:x="1073" fg:w="3"/><text x="87.9134%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="87.8268%" y="261" width="0.0817%" height="15" fill="rgb(206,46,17)" fg:x="1075" fg:w="1"/><text x="88.0768%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="87.8268%" y="245" width="0.0817%" height="15" fill="rgb(225,220,16)" fg:x="1075" fg:w="1"/><text x="88.0768%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.8268%" y="229" width="0.0817%" height="15" fill="rgb(238,65,40)" fg:x="1075" fg:w="1"/><text x="88.0768%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.8268%" y="213" width="0.0817%" height="15" fill="rgb(230,151,21)" fg:x="1075" fg:w="1"/><text x="88.0768%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.8268%" y="197" width="0.0817%" height="15" fill="rgb(218,58,49)" fg:x="1075" fg:w="1"/><text x="88.0768%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="87.9085%" y="293" width="0.0817%" height="15" fill="rgb(219,179,14)" fg:x="1076" fg:w="1"/><text x="88.1585%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="87.9085%" y="277" width="0.0817%" height="15" fill="rgb(223,72,1)" fg:x="1076" fg:w="1"/><text x="88.1585%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="88.0719%" y="245" width="0.3268%" height="15" fill="rgb(238,126,10)" fg:x="1078" fg:w="4"/><text x="88.3219%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="88.0719%" y="229" width="0.3268%" height="15" fill="rgb(224,206,38)" fg:x="1078" fg:w="4"/><text x="88.3219%" y="239.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.57%)</title><rect x="87.9085%" y="309" width="0.5719%" height="15" fill="rgb(212,201,54)" fg:x="1076" fg:w="7"/><text x="88.1585%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="87.9902%" y="293" width="0.4902%" height="15" fill="rgb(218,154,48)" fg:x="1077" fg:w="6"/><text x="88.2402%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="87.9902%" y="277" width="0.4902%" height="15" fill="rgb(232,93,24)" fg:x="1077" fg:w="6"/><text x="88.2402%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="87.9902%" y="261" width="0.4902%" height="15" fill="rgb(245,30,21)" fg:x="1077" fg:w="6"/><text x="88.2402%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="88.3987%" y="245" width="0.0817%" height="15" fill="rgb(242,148,29)" fg:x="1082" fg:w="1"/><text x="88.6487%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.4804%" y="261" width="0.0817%" height="15" fill="rgb(244,153,54)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.4804%" y="245" width="0.0817%" height="15" fill="rgb(252,87,22)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.4804%" y="229" width="0.0817%" height="15" fill="rgb(210,51,29)" fg:x="1083" fg:w="1"/><text x="88.7304%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.6438%" y="245" width="0.0817%" height="15" fill="rgb(242,136,47)" fg:x="1085" fg:w="1"/><text x="88.8938%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="88.7255%" y="245" width="0.7353%" height="15" fill="rgb(238,68,4)" fg:x="1086" fg:w="9"/><text x="88.9755%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.74%)</title><rect x="88.7255%" y="229" width="0.7353%" height="15" fill="rgb(242,161,30)" fg:x="1086" fg:w="9"/><text x="88.9755%" y="239.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.2974%" y="213" width="0.1634%" height="15" fill="rgb(218,58,44)" fg:x="1093" fg:w="2"/><text x="89.5474%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="89.7059%" y="213" width="0.2451%" height="15" fill="rgb(252,125,32)" fg:x="1098" fg:w="3"/><text x="89.9559%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="89.7876%" y="197" width="0.1634%" height="15" fill="rgb(219,178,0)" fg:x="1099" fg:w="2"/><text x="90.0376%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="89.9510%" y="197" width="0.1634%" height="15" fill="rgb(213,152,7)" fg:x="1101" fg:w="2"/><text x="90.2010%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="89.9510%" y="181" width="0.1634%" height="15" fill="rgb(249,109,34)" fg:x="1101" fg:w="2"/><text x="90.2010%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.74%)</title><rect x="89.4608%" y="245" width="0.7353%" height="15" fill="rgb(232,96,21)" fg:x="1095" fg:w="9"/><text x="89.7108%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (9 samples, 0.74%)</title><rect x="89.4608%" y="229" width="0.7353%" height="15" fill="rgb(228,27,39)" fg:x="1095" fg:w="9"/><text x="89.7108%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (3 samples, 0.25%)</title><rect x="89.9510%" y="213" width="0.2451%" height="15" fill="rgb(211,182,52)" fg:x="1101" fg:w="3"/><text x="90.2010%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="90.1144%" y="197" width="0.0817%" height="15" fill="rgb(234,178,38)" fg:x="1103" fg:w="1"/><text x="90.3644%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="90.1961%" y="181" width="0.1634%" height="15" fill="rgb(221,111,3)" fg:x="1104" fg:w="2"/><text x="90.4461%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="90.8497%" y="133" width="0.2451%" height="15" fill="rgb(228,175,21)" fg:x="1112" fg:w="3"/><text x="91.0997%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.0948%" y="133" width="0.0817%" height="15" fill="rgb(228,174,43)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.0948%" y="117" width="0.0817%" height="15" fill="rgb(211,191,0)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.0948%" y="101" width="0.0817%" height="15" fill="rgb(253,117,3)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.0948%" y="85" width="0.0817%" height="15" fill="rgb(241,127,19)" fg:x="1115" fg:w="1"/><text x="91.3448%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.2582%" y="101" width="0.0817%" height="15" fill="rgb(218,103,12)" fg:x="1117" fg:w="1"/><text x="91.5082%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.2582%" y="85" width="0.0817%" height="15" fill="rgb(236,214,43)" fg:x="1117" fg:w="1"/><text x="91.5082%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="91.1765%" y="133" width="0.3268%" height="15" fill="rgb(244,144,19)" fg:x="1116" fg:w="4"/><text x="91.4265%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.25%)</title><rect x="91.2582%" y="117" width="0.2451%" height="15" fill="rgb(246,188,10)" fg:x="1117" fg:w="3"/><text x="91.5082%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="91.3399%" y="101" width="0.1634%" height="15" fill="rgb(212,193,33)" fg:x="1118" fg:w="2"/><text x="91.5899%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.4216%" y="85" width="0.0817%" height="15" fill="rgb(241,51,29)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.4216%" y="69" width="0.0817%" height="15" fill="rgb(211,58,19)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.4216%" y="53" width="0.0817%" height="15" fill="rgb(229,111,26)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.4216%" y="37" width="0.0817%" height="15" fill="rgb(213,115,40)" fg:x="1119" fg:w="1"/><text x="91.6716%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (42 samples, 3.43%)</title><rect x="91.5033%" y="133" width="3.4314%" height="15" fill="rgb(209,56,44)" fg:x="1120" fg:w="42"/><text x="91.7533%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.43%)</title><rect x="91.5033%" y="117" width="3.4314%" height="15" fill="rgb(230,108,32)" fg:x="1120" fg:w="42"/><text x="91.7533%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 3.43%)</title><rect x="91.5033%" y="101" width="3.4314%" height="15" fill="rgb(216,165,31)" fg:x="1120" fg:w="42"/><text x="91.7533%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="94.9346%" y="133" width="0.1634%" height="15" fill="rgb(218,122,21)" fg:x="1162" fg:w="2"/><text x="95.1846%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 4.98%)</title><rect x="90.1961%" y="229" width="4.9837%" height="15" fill="rgb(223,224,47)" fg:x="1104" fg:w="61"/><text x="90.4461%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.98%)</title><rect x="90.1961%" y="213" width="4.9837%" height="15" fill="rgb(238,102,44)" fg:x="1104" fg:w="61"/><text x="90.4461%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.98%)</title><rect x="90.1961%" y="197" width="4.9837%" height="15" fill="rgb(236,46,40)" fg:x="1104" fg:w="61"/><text x="90.4461%" y="207.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (59 samples, 4.82%)</title><rect x="90.3595%" y="181" width="4.8203%" height="15" fill="rgb(247,202,50)" fg:x="1106" fg:w="59"/><text x="90.6095%" y="191.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (59 samples, 4.82%)</title><rect x="90.3595%" y="165" width="4.8203%" height="15" fill="rgb(209,99,20)" fg:x="1106" fg:w="59"/><text x="90.6095%" y="175.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (59 samples, 4.82%)</title><rect x="90.3595%" y="149" width="4.8203%" height="15" fill="rgb(252,27,34)" fg:x="1106" fg:w="59"/><text x="90.6095%" y="159.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="95.0980%" y="133" width="0.0817%" height="15" fill="rgb(215,206,23)" fg:x="1164" fg:w="1"/><text x="95.3480%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.3431%" y="213" width="0.0817%" height="15" fill="rgb(212,135,36)" fg:x="1167" fg:w="1"/><text x="95.5931%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.4248%" y="213" width="0.0817%" height="15" fill="rgb(240,189,1)" fg:x="1168" fg:w="1"/><text x="95.6748%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (89 samples, 7.27%)</title><rect x="88.5621%" y="261" width="7.2712%" height="15" fill="rgb(242,56,20)" fg:x="1084" fg:w="89"/><text x="88.8121%" y="271.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (69 samples, 5.64%)</title><rect x="90.1961%" y="245" width="5.6373%" height="15" fill="rgb(247,132,33)" fg:x="1104" fg:w="69"/><text x="90.4461%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="95.1797%" y="229" width="0.6536%" height="15" fill="rgb(208,149,11)" fg:x="1165" fg:w="8"/><text x="95.4297%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="95.5065%" y="213" width="0.3268%" height="15" fill="rgb(211,33,11)" fg:x="1169" fg:w="4"/><text x="95.7565%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.7516%" y="197" width="0.0817%" height="15" fill="rgb(221,29,38)" fg:x="1172" fg:w="1"/><text x="96.0016%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.9150%" y="229" width="0.1634%" height="15" fill="rgb(206,182,49)" fg:x="1174" fg:w="2"/><text x="96.1650%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="95.9150%" y="213" width="0.1634%" height="15" fill="rgb(216,140,1)" fg:x="1174" fg:w="2"/><text x="96.1650%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="95.9967%" y="197" width="0.0817%" height="15" fill="rgb(232,57,40)" fg:x="1175" fg:w="1"/><text x="96.2467%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="95.9967%" y="181" width="0.0817%" height="15" fill="rgb(224,186,18)" fg:x="1175" fg:w="1"/><text x="96.2467%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="95.8333%" y="261" width="0.3268%" height="15" fill="rgb(215,121,11)" fg:x="1173" fg:w="4"/><text x="96.0833%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="95.8333%" y="245" width="0.3268%" height="15" fill="rgb(245,147,10)" fg:x="1173" fg:w="4"/><text x="96.0833%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="96.0784%" y="229" width="0.0817%" height="15" fill="rgb(238,153,13)" fg:x="1176" fg:w="1"/><text x="96.3284%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="96.0784%" y="213" width="0.0817%" height="15" fill="rgb(233,108,0)" fg:x="1176" fg:w="1"/><text x="96.3284%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.1601%" y="213" width="0.0817%" height="15" fill="rgb(212,157,17)" fg:x="1177" fg:w="1"/><text x="96.4101%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.1601%" y="197" width="0.0817%" height="15" fill="rgb(225,213,38)" fg:x="1177" fg:w="1"/><text x="96.4101%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.1601%" y="181" width="0.0817%" height="15" fill="rgb(248,16,11)" fg:x="1177" fg:w="1"/><text x="96.4101%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="96.2418%" y="213" width="0.0817%" height="15" fill="rgb(241,33,4)" fg:x="1178" fg:w="1"/><text x="96.4918%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.2418%" y="197" width="0.0817%" height="15" fill="rgb(222,26,43)" fg:x="1178" fg:w="1"/><text x="96.4918%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="96.1601%" y="229" width="0.2451%" height="15" fill="rgb(243,29,36)" fg:x="1177" fg:w="3"/><text x="96.4101%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="96.3235%" y="213" width="0.0817%" height="15" fill="rgb(241,9,27)" fg:x="1179" fg:w="1"/><text x="96.5735%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="96.3235%" y="197" width="0.0817%" height="15" fill="rgb(205,117,26)" fg:x="1179" fg:w="1"/><text x="96.5735%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.3235%" y="181" width="0.0817%" height="15" fill="rgb(209,80,39)" fg:x="1179" fg:w="1"/><text x="96.5735%" y="191.50"></text></g><g><title>indefinite::rules::number::Number::check (105 samples, 8.58%)</title><rect x="87.9085%" y="325" width="8.5784%" height="15" fill="rgb(239,155,6)" fg:x="1076" fg:w="105"/><text x="88.1585%" y="335.50">indefinite::..</text></g><g><title>regex::regex::string::Regex::new (98 samples, 8.01%)</title><rect x="88.4804%" y="309" width="8.0065%" height="15" fill="rgb(212,104,12)" fg:x="1083" fg:w="98"/><text x="88.7304%" y="319.50">regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (98 samples, 8.01%)</title><rect x="88.4804%" y="293" width="8.0065%" height="15" fill="rgb(234,204,3)" fg:x="1083" fg:w="98"/><text x="88.7304%" y="303.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (98 samples, 8.01%)</title><rect x="88.4804%" y="277" width="8.0065%" height="15" fill="rgb(251,218,7)" fg:x="1083" fg:w="98"/><text x="88.7304%" y="287.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.33%)</title><rect x="96.1601%" y="261" width="0.3268%" height="15" fill="rgb(221,81,32)" fg:x="1177" fg:w="4"/><text x="96.4101%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.33%)</title><rect x="96.1601%" y="245" width="0.3268%" height="15" fill="rgb(214,152,26)" fg:x="1177" fg:w="4"/><text x="96.4101%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="96.4052%" y="229" width="0.0817%" height="15" fill="rgb(223,22,3)" fg:x="1180" fg:w="1"/><text x="96.6552%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="96.4052%" y="213" width="0.0817%" height="15" fill="rgb(207,174,7)" fg:x="1180" fg:w="1"/><text x="96.6552%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="96.4869%" y="261" width="0.0817%" height="15" fill="rgb(224,19,52)" fg:x="1181" fg:w="1"/><text x="96.7369%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="96.4869%" y="245" width="0.0817%" height="15" fill="rgb(228,24,14)" fg:x="1181" fg:w="1"/><text x="96.7369%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="96.4869%" y="293" width="0.1634%" height="15" fill="rgb(230,153,43)" fg:x="1181" fg:w="2"/><text x="96.7369%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="96.4869%" y="277" width="0.1634%" height="15" fill="rgb(231,106,12)" fg:x="1181" fg:w="2"/><text x="96.7369%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="96.5686%" y="261" width="0.0817%" height="15" fill="rgb(215,92,2)" fg:x="1182" fg:w="1"/><text x="96.8186%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.6503%" y="245" width="0.0817%" height="15" fill="rgb(249,143,25)" fg:x="1183" fg:w="1"/><text x="96.9003%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6503%" y="229" width="0.0817%" height="15" fill="rgb(252,7,35)" fg:x="1183" fg:w="1"/><text x="96.9003%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.6503%" y="213" width="0.0817%" height="15" fill="rgb(216,69,40)" fg:x="1183" fg:w="1"/><text x="96.9003%" y="223.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.6503%" y="197" width="0.0817%" height="15" fill="rgb(240,36,33)" fg:x="1183" fg:w="1"/><text x="96.9003%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.7320%" y="229" width="0.0817%" height="15" fill="rgb(231,128,14)" fg:x="1184" fg:w="1"/><text x="96.9820%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.7320%" y="213" width="0.0817%" height="15" fill="rgb(245,143,14)" fg:x="1184" fg:w="1"/><text x="96.9820%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.41%)</title><rect x="96.7320%" y="245" width="0.4085%" height="15" fill="rgb(222,130,28)" fg:x="1184" fg:w="5"/><text x="96.9820%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.33%)</title><rect x="96.8137%" y="229" width="0.3268%" height="15" fill="rgb(212,10,48)" fg:x="1185" fg:w="4"/><text x="97.0637%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="96.8137%" y="213" width="0.3268%" height="15" fill="rgb(254,118,45)" fg:x="1185" fg:w="4"/><text x="97.0637%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.33%)</title><rect x="96.8137%" y="197" width="0.3268%" height="15" fill="rgb(228,6,45)" fg:x="1185" fg:w="4"/><text x="97.0637%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.1405%" y="197" width="0.0817%" height="15" fill="rgb(241,18,35)" fg:x="1189" fg:w="1"/><text x="97.3905%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="97.2222%" y="197" width="0.0817%" height="15" fill="rgb(227,214,53)" fg:x="1190" fg:w="1"/><text x="97.4722%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="97.2222%" y="181" width="0.0817%" height="15" fill="rgb(224,107,51)" fg:x="1190" fg:w="1"/><text x="97.4722%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.2222%" y="165" width="0.0817%" height="15" fill="rgb(248,60,28)" fg:x="1190" fg:w="1"/><text x="97.4722%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="97.1405%" y="213" width="0.2451%" height="15" fill="rgb(249,101,23)" fg:x="1189" fg:w="3"/><text x="97.3905%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.3039%" y="197" width="0.0817%" height="15" fill="rgb(228,51,19)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3039%" y="181" width="0.0817%" height="15" fill="rgb(213,20,6)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3039%" y="165" width="0.0817%" height="15" fill="rgb(212,124,10)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3039%" y="149" width="0.0817%" height="15" fill="rgb(248,3,40)" fg:x="1191" fg:w="1"/><text x="97.5539%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="97.1405%" y="245" width="0.3268%" height="15" fill="rgb(223,178,23)" fg:x="1189" fg:w="4"/><text x="97.3905%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="97.1405%" y="229" width="0.3268%" height="15" fill="rgb(240,132,45)" fg:x="1189" fg:w="4"/><text x="97.3905%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.3856%" y="213" width="0.0817%" height="15" fill="rgb(245,164,36)" fg:x="1192" fg:w="1"/><text x="97.6356%" y="223.50"></text></g><g><title>regex::regex::string::Regex::new (11 samples, 0.90%)</title><rect x="96.6503%" y="293" width="0.8987%" height="15" fill="rgb(231,188,53)" fg:x="1183" fg:w="11"/><text x="96.9003%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (11 samples, 0.90%)</title><rect x="96.6503%" y="277" width="0.8987%" height="15" fill="rgb(237,198,39)" fg:x="1183" fg:w="11"/><text x="96.9003%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.90%)</title><rect x="96.6503%" y="261" width="0.8987%" height="15" fill="rgb(223,120,35)" fg:x="1183" fg:w="11"/><text x="96.9003%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.4673%" y="245" width="0.0817%" height="15" fill="rgb(253,107,49)" fg:x="1193" fg:w="1"/><text x="97.7173%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.4673%" y="229" width="0.0817%" height="15" fill="rgb(216,44,31)" fg:x="1193" fg:w="1"/><text x="97.7173%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.4673%" y="213" width="0.0817%" height="15" fill="rgb(253,87,21)" fg:x="1193" fg:w="1"/><text x="97.7173%" y="223.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (15 samples, 1.23%)</title><rect x="96.4869%" y="309" width="1.2255%" height="15" fill="rgb(226,18,2)" fg:x="1181" fg:w="15"/><text x="96.7369%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.5490%" y="293" width="0.1634%" height="15" fill="rgb(216,8,46)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="97.5490%" y="277" width="0.1634%" height="15" fill="rgb(226,140,39)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="97.5490%" y="261" width="0.1634%" height="15" fill="rgb(221,194,54)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="97.5490%" y="245" width="0.1634%" height="15" fill="rgb(213,92,11)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="97.5490%" y="229" width="0.1634%" height="15" fill="rgb(229,162,46)" fg:x="1194" fg:w="2"/><text x="97.7990%" y="239.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (214 samples, 17.48%)</title><rect x="80.3105%" y="405" width="17.4837%" height="15" fill="rgb(214,111,36)" fg:x="983" fg:w="214"/><text x="80.5605%" y="415.50">&lt;&amp;kernel::model::EntityPtr ..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (199 samples, 16.26%)</title><rect x="81.5359%" y="389" width="16.2582%" height="15" fill="rgb(207,6,21)" fg:x="998" fg:w="199"/><text x="81.7859%" y="399.50">plugins_core::looking::mo..</text></g><g><title>indefinite::indefinite (198 samples, 16.18%)</title><rect x="81.6176%" y="373" width="16.1765%" height="15" fill="rgb(213,127,38)" fg:x="999" fg:w="198"/><text x="81.8676%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (198 samples, 16.18%)</title><rect x="81.6176%" y="357" width="16.1765%" height="15" fill="rgb(238,118,32)" fg:x="999" fg:w="198"/><text x="81.8676%" y="367.50">indefinite::methods::inde..</text></g><g><title>indefinite::methods::apply_rules (197 samples, 16.09%)</title><rect x="81.6993%" y="341" width="16.0948%" height="15" fill="rgb(240,139,39)" fg:x="1000" fg:w="197"/><text x="81.9493%" y="351.50">indefinite::methods::appl..</text></g><g><title>indefinite::rules::other::Other::run (16 samples, 1.31%)</title><rect x="96.4869%" y="325" width="1.3072%" height="15" fill="rgb(235,10,37)" fg:x="1181" fg:w="16"/><text x="96.7369%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.7124%" y="309" width="0.0817%" height="15" fill="rgb(249,171,38)" fg:x="1196" fg:w="1"/><text x="97.9624%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7941%" y="389" width="0.0817%" height="15" fill="rgb(242,144,32)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7941%" y="373" width="0.0817%" height="15" fill="rgb(217,117,21)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7941%" y="357" width="0.0817%" height="15" fill="rgb(249,87,1)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.7941%" y="341" width="0.0817%" height="15" fill="rgb(248,196,48)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.7941%" y="325" width="0.0817%" height="15" fill="rgb(251,206,33)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.7941%" y="309" width="0.0817%" height="15" fill="rgb(232,141,28)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.7941%" y="293" width="0.0817%" height="15" fill="rgb(209,167,14)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.7941%" y="277" width="0.0817%" height="15" fill="rgb(225,11,50)" fg:x="1197" fg:w="1"/><text x="98.0441%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8758%" y="309" width="0.0817%" height="15" fill="rgb(209,50,20)" fg:x="1198" fg:w="1"/><text x="98.1258%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="97.7941%" y="405" width="0.2451%" height="15" fill="rgb(212,17,46)" fg:x="1197" fg:w="3"/><text x="98.0441%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.8758%" y="389" width="0.1634%" height="15" fill="rgb(216,101,39)" fg:x="1198" fg:w="2"/><text x="98.1258%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.8758%" y="373" width="0.1634%" height="15" fill="rgb(212,228,48)" fg:x="1198" fg:w="2"/><text x="98.1258%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="97.8758%" y="357" width="0.1634%" height="15" fill="rgb(250,6,50)" fg:x="1198" fg:w="2"/><text x="98.1258%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="97.8758%" y="341" width="0.1634%" height="15" fill="rgb(250,160,48)" fg:x="1198" fg:w="2"/><text x="98.1258%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="97.8758%" y="325" width="0.1634%" height="15" fill="rgb(244,216,33)" fg:x="1198" fg:w="2"/><text x="98.1258%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.9575%" y="309" width="0.0817%" height="15" fill="rgb(207,157,5)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9575%" y="293" width="0.0817%" height="15" fill="rgb(228,199,8)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9575%" y="277" width="0.0817%" height="15" fill="rgb(227,80,20)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.9575%" y="261" width="0.0817%" height="15" fill="rgb(222,9,33)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.9575%" y="245" width="0.0817%" height="15" fill="rgb(239,44,28)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9575%" y="229" width="0.0817%" height="15" fill="rgb(249,187,43)" fg:x="1199" fg:w="1"/><text x="98.2075%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="341" width="0.0817%" height="15" fill="rgb(216,141,28)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="325" width="0.0817%" height="15" fill="rgb(230,154,53)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="309" width="0.0817%" height="15" fill="rgb(227,82,4)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="293" width="0.0817%" height="15" fill="rgb(220,107,16)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.0392%" y="277" width="0.0817%" height="15" fill="rgb(207,187,2)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="261" width="0.0817%" height="15" fill="rgb(210,162,52)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.0392%" y="245" width="0.0817%" height="15" fill="rgb(217,216,49)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.0392%" y="229" width="0.0817%" height="15" fill="rgb(218,146,49)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.0392%" y="213" width="0.0817%" height="15" fill="rgb(216,55,40)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.0392%" y="197" width="0.0817%" height="15" fill="rgb(208,196,21)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0392%" y="181" width="0.0817%" height="15" fill="rgb(242,117,42)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.0392%" y="165" width="0.0817%" height="15" fill="rgb(210,11,23)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.0392%" y="149" width="0.0817%" height="15" fill="rgb(217,110,2)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.0392%" y="133" width="0.0817%" height="15" fill="rgb(229,77,54)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.0392%" y="117" width="0.0817%" height="15" fill="rgb(218,53,16)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.0392%" y="101" width="0.0817%" height="15" fill="rgb(215,38,13)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0392%" y="85" width="0.0817%" height="15" fill="rgb(235,42,18)" fg:x="1200" fg:w="1"/><text x="98.2892%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.1209%" y="245" width="0.0817%" height="15" fill="rgb(219,66,54)" fg:x="1201" fg:w="1"/><text x="98.3709%" y="255.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.1209%" y="341" width="0.1634%" height="15" fill="rgb(222,205,4)" fg:x="1201" fg:w="2"/><text x="98.3709%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.1209%" y="325" width="0.1634%" height="15" fill="rgb(227,213,46)" fg:x="1201" fg:w="2"/><text x="98.3709%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1209%" y="309" width="0.1634%" height="15" fill="rgb(250,145,42)" fg:x="1201" fg:w="2"/><text x="98.3709%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.1209%" y="293" width="0.1634%" height="15" fill="rgb(219,15,2)" fg:x="1201" fg:w="2"/><text x="98.3709%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.1209%" y="277" width="0.1634%" height="15" fill="rgb(231,181,52)" fg:x="1201" fg:w="2"/><text x="98.3709%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.1209%" y="261" width="0.1634%" height="15" fill="rgb(235,1,42)" fg:x="1201" fg:w="2"/><text x="98.3709%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2026%" y="245" width="0.0817%" height="15" fill="rgb(249,88,27)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2026%" y="229" width="0.0817%" height="15" fill="rgb(235,145,16)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2026%" y="213" width="0.0817%" height="15" fill="rgb(237,114,19)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2026%" y="197" width="0.0817%" height="15" fill="rgb(238,51,50)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2026%" y="181" width="0.0817%" height="15" fill="rgb(205,194,25)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.2026%" y="165" width="0.0817%" height="15" fill="rgb(215,203,17)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2026%" y="149" width="0.0817%" height="15" fill="rgb(233,112,49)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2026%" y="133" width="0.0817%" height="15" fill="rgb(241,130,26)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.2026%" y="117" width="0.0817%" height="15" fill="rgb(252,223,19)" fg:x="1202" fg:w="1"/><text x="98.4526%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2843%" y="213" width="0.0817%" height="15" fill="rgb(211,95,25)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2843%" y="197" width="0.0817%" height="15" fill="rgb(251,182,27)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2843%" y="181" width="0.0817%" height="15" fill="rgb(238,24,4)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="98.2843%" y="165" width="0.0817%" height="15" fill="rgb(224,220,25)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="175.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="98.2843%" y="149" width="0.0817%" height="15" fill="rgb(239,133,26)" fg:x="1203" fg:w="1"/><text x="98.5343%" y="159.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (229 samples, 18.71%)</title><rect x="79.7386%" y="629" width="18.7092%" height="15" fill="rgb(211,94,48)" fg:x="976" fg:w="229"/><text x="79.9886%" y="639.50">&lt;engine::session::Session as ..</text></g><g><title>kernel::plugins::mw::apply_middleware (229 samples, 18.71%)</title><rect x="79.7386%" y="613" width="18.7092%" height="15" fill="rgb(239,87,6)" fg:x="976" fg:w="229"/><text x="79.9886%" y="623.50">kernel::plugins::mw::apply_mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (229 samples, 18.71%)</title><rect x="79.7386%" y="597" width="18.7092%" height="15" fill="rgb(227,62,0)" fg:x="976" fg:w="229"/><text x="79.9886%" y="607.50">kernel::plugins::mw::Middlewa..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (228 samples, 18.63%)</title><rect x="79.8203%" y="581" width="18.6275%" height="15" fill="rgb(211,226,4)" fg:x="977" fg:w="228"/><text x="80.0703%" y="591.50">&lt;engine::session::ExpandSurro..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 18.22%)</title><rect x="80.2288%" y="565" width="18.2190%" height="15" fill="rgb(253,38,52)" fg:x="982" fg:w="223"/><text x="80.4788%" y="575.50">kernel::plugins::mw::Middlew..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (223 samples, 18.22%)</title><rect x="80.2288%" y="549" width="18.2190%" height="15" fill="rgb(229,126,40)" fg:x="982" fg:w="223"/><text x="80.4788%" y="559.50">&lt;plugins_dynlib::DynamicMidd..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 18.22%)</title><rect x="80.2288%" y="533" width="18.2190%" height="15" fill="rgb(229,165,44)" fg:x="982" fg:w="223"/><text x="80.4788%" y="543.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 18.22%)</title><rect x="80.2288%" y="517" width="18.2190%" height="15" fill="rgb(247,95,47)" fg:x="982" fg:w="223"/><text x="80.4788%" y="527.50">core::ops::function::FnOnce:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (223 samples, 18.22%)</title><rect x="80.2288%" y="501" width="18.2190%" height="15" fill="rgb(216,140,30)" fg:x="982" fg:w="223"/><text x="80.4788%" y="511.50">kernel::plugins::mw::Middlew..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (223 samples, 18.22%)</title><rect x="80.2288%" y="485" width="18.2190%" height="15" fill="rgb(246,214,8)" fg:x="982" fg:w="223"/><text x="80.4788%" y="495.50">core::ops::function::FnOnce:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (223 samples, 18.22%)</title><rect x="80.2288%" y="469" width="18.2190%" height="15" fill="rgb(227,224,15)" fg:x="982" fg:w="223"/><text x="80.4788%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (223 samples, 18.22%)</title><rect x="80.2288%" y="453" width="18.2190%" height="15" fill="rgb(233,175,4)" fg:x="982" fg:w="223"/><text x="80.4788%" y="463.50">&lt;engine::session::state::Sta..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (223 samples, 18.22%)</title><rect x="80.2288%" y="437" width="18.2190%" height="15" fill="rgb(221,66,45)" fg:x="982" fg:w="223"/><text x="80.4788%" y="447.50">&lt;plugins_core::looking::acti..</text></g><g><title>plugins_core::looking::model::new_area_observation (222 samples, 18.14%)</title><rect x="80.3105%" y="421" width="18.1373%" height="15" fill="rgb(221,178,18)" fg:x="983" fg:w="222"/><text x="80.5605%" y="431.50">plugins_core::looking::model..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.41%)</title><rect x="98.0392%" y="405" width="0.4085%" height="15" fill="rgb(213,81,29)" fg:x="1200" fg:w="5"/><text x="98.2892%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.41%)</title><rect x="98.0392%" y="389" width="0.4085%" height="15" fill="rgb(220,89,49)" fg:x="1200" fg:w="5"/><text x="98.2892%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.41%)</title><rect x="98.0392%" y="373" width="0.4085%" height="15" fill="rgb(227,60,33)" fg:x="1200" fg:w="5"/><text x="98.2892%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.41%)</title><rect x="98.0392%" y="357" width="0.4085%" height="15" fill="rgb(205,113,12)" fg:x="1200" fg:w="5"/><text x="98.2892%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="98.2843%" y="341" width="0.1634%" height="15" fill="rgb(211,32,1)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="351.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="98.2843%" y="325" width="0.1634%" height="15" fill="rgb(246,2,12)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.2843%" y="309" width="0.1634%" height="15" fill="rgb(243,37,27)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2843%" y="293" width="0.1634%" height="15" fill="rgb(248,211,31)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.2843%" y="277" width="0.1634%" height="15" fill="rgb(242,146,47)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2843%" y="261" width="0.1634%" height="15" fill="rgb(206,70,20)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="98.2843%" y="245" width="0.1634%" height="15" fill="rgb(215,10,51)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2843%" y="229" width="0.1634%" height="15" fill="rgb(243,178,53)" fg:x="1203" fg:w="2"/><text x="98.5343%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.3660%" y="213" width="0.0817%" height="15" fill="rgb(233,221,20)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="223.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="98.3660%" y="197" width="0.0817%" height="15" fill="rgb(218,95,35)" fg:x="1204" fg:w="1"/><text x="98.6160%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4477%" y="533" width="0.0817%" height="15" fill="rgb(229,13,5)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4477%" y="517" width="0.0817%" height="15" fill="rgb(252,164,30)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.4477%" y="501" width="0.0817%" height="15" fill="rgb(232,68,36)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.4477%" y="485" width="0.0817%" height="15" fill="rgb(219,59,54)" fg:x="1205" fg:w="1"/><text x="98.6977%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5294%" y="485" width="0.0817%" height="15" fill="rgb(250,92,33)" fg:x="1206" fg:w="1"/><text x="98.7794%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5294%" y="469" width="0.0817%" height="15" fill="rgb(229,162,54)" fg:x="1206" fg:w="1"/><text x="98.7794%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="98.6111%" y="437" width="0.0817%" height="15" fill="rgb(244,114,52)" fg:x="1207" fg:w="1"/><text x="98.8611%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.6111%" y="421" width="0.0817%" height="15" fill="rgb(212,211,43)" fg:x="1207" fg:w="1"/><text x="98.8611%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.6111%" y="405" width="0.0817%" height="15" fill="rgb(226,147,8)" fg:x="1207" fg:w="1"/><text x="98.8611%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="98.5294%" y="533" width="0.2451%" height="15" fill="rgb(226,23,13)" fg:x="1206" fg:w="3"/><text x="98.7794%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="98.5294%" y="517" width="0.2451%" height="15" fill="rgb(240,63,4)" fg:x="1206" fg:w="3"/><text x="98.7794%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="98.5294%" y="501" width="0.2451%" height="15" fill="rgb(221,1,32)" fg:x="1206" fg:w="3"/><text x="98.7794%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.6111%" y="485" width="0.1634%" height="15" fill="rgb(242,117,10)" fg:x="1207" fg:w="2"/><text x="98.8611%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6111%" y="469" width="0.1634%" height="15" fill="rgb(249,172,44)" fg:x="1207" fg:w="2"/><text x="98.8611%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="98.6111%" y="453" width="0.1634%" height="15" fill="rgb(244,46,45)" fg:x="1207" fg:w="2"/><text x="98.8611%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.6928%" y="437" width="0.0817%" height="15" fill="rgb(206,43,17)" fg:x="1208" fg:w="1"/><text x="98.9428%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.6928%" y="421" width="0.0817%" height="15" fill="rgb(239,218,39)" fg:x="1208" fg:w="1"/><text x="98.9428%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.6928%" y="405" width="0.0817%" height="15" fill="rgb(208,169,54)" fg:x="1208" fg:w="1"/><text x="98.9428%" y="415.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.41%)</title><rect x="98.4477%" y="613" width="0.4085%" height="15" fill="rgb(247,25,42)" fg:x="1205" fg:w="5"/><text x="98.6977%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="98.4477%" y="597" width="0.4085%" height="15" fill="rgb(226,23,31)" fg:x="1205" fg:w="5"/><text x="98.6977%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="98.4477%" y="581" width="0.4085%" height="15" fill="rgb(247,16,28)" fg:x="1205" fg:w="5"/><text x="98.6977%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="98.4477%" y="565" width="0.4085%" height="15" fill="rgb(231,147,38)" fg:x="1205" fg:w="5"/><text x="98.6977%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="98.4477%" y="549" width="0.4085%" height="15" fill="rgb(253,81,48)" fg:x="1205" fg:w="5"/><text x="98.6977%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.7745%" y="533" width="0.0817%" height="15" fill="rgb(249,222,43)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7745%" y="517" width="0.0817%" height="15" fill="rgb(221,3,27)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7745%" y="501" width="0.0817%" height="15" fill="rgb(228,180,5)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.7745%" y="485" width="0.0817%" height="15" fill="rgb(227,131,42)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7745%" y="469" width="0.0817%" height="15" fill="rgb(212,3,39)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.7745%" y="453" width="0.0817%" height="15" fill="rgb(226,45,5)" fg:x="1209" fg:w="1"/><text x="99.0245%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8562%" y="597" width="0.0817%" height="15" fill="rgb(215,167,45)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8562%" y="581" width="0.0817%" height="15" fill="rgb(250,218,53)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8562%" y="565" width="0.0817%" height="15" fill="rgb(207,140,0)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8562%" y="549" width="0.0817%" height="15" fill="rgb(238,133,51)" fg:x="1210" fg:w="1"/><text x="99.1062%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.0196%" y="469" width="0.0817%" height="15" fill="rgb(218,203,53)" fg:x="1212" fg:w="1"/><text x="99.2696%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.0196%" y="453" width="0.0817%" height="15" fill="rgb(226,184,25)" fg:x="1212" fg:w="1"/><text x="99.2696%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="98.9379%" y="501" width="0.2451%" height="15" fill="rgb(231,121,21)" fg:x="1211" fg:w="3"/><text x="99.1879%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="98.9379%" y="485" width="0.2451%" height="15" fill="rgb(251,14,34)" fg:x="1211" fg:w="3"/><text x="99.1879%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.1013%" y="469" width="0.0817%" height="15" fill="rgb(249,193,11)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1013%" y="453" width="0.0817%" height="15" fill="rgb(220,172,37)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1013%" y="437" width="0.0817%" height="15" fill="rgb(231,229,43)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1013%" y="421" width="0.0817%" height="15" fill="rgb(250,161,5)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1013%" y="405" width="0.0817%" height="15" fill="rgb(218,225,18)" fg:x="1213" fg:w="1"/><text x="99.3513%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="98.9379%" y="549" width="0.3268%" height="15" fill="rgb(245,45,42)" fg:x="1211" fg:w="4"/><text x="99.1879%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="98.9379%" y="533" width="0.3268%" height="15" fill="rgb(211,115,1)" fg:x="1211" fg:w="4"/><text x="99.1879%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="98.9379%" y="517" width="0.3268%" height="15" fill="rgb(248,133,52)" fg:x="1211" fg:w="4"/><text x="99.1879%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.1830%" y="501" width="0.0817%" height="15" fill="rgb(238,100,21)" fg:x="1214" fg:w="1"/><text x="99.4330%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1830%" y="485" width="0.0817%" height="15" fill="rgb(247,144,11)" fg:x="1214" fg:w="1"/><text x="99.4330%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="98.9379%" y="597" width="0.4085%" height="15" fill="rgb(206,164,16)" fg:x="1211" fg:w="5"/><text x="99.1879%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="98.9379%" y="581" width="0.4085%" height="15" fill="rgb(222,34,3)" fg:x="1211" fg:w="5"/><text x="99.1879%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="98.9379%" y="565" width="0.4085%" height="15" fill="rgb(248,82,4)" fg:x="1211" fg:w="5"/><text x="99.1879%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.2647%" y="549" width="0.0817%" height="15" fill="rgb(228,81,46)" fg:x="1215" fg:w="1"/><text x="99.5147%" y="559.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="98.8562%" y="613" width="0.5719%" height="15" fill="rgb(227,67,47)" fg:x="1210" fg:w="7"/><text x="99.1062%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.3464%" y="597" width="0.0817%" height="15" fill="rgb(215,93,53)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.3464%" y="581" width="0.0817%" height="15" fill="rgb(248,194,39)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3464%" y="565" width="0.0817%" height="15" fill="rgb(215,5,19)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3464%" y="549" width="0.0817%" height="15" fill="rgb(226,215,51)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3464%" y="533" width="0.0817%" height="15" fill="rgb(225,56,26)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3464%" y="517" width="0.0817%" height="15" fill="rgb(222,75,29)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3464%" y="501" width="0.0817%" height="15" fill="rgb(236,139,6)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3464%" y="485" width="0.0817%" height="15" fill="rgb(223,137,36)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3464%" y="469" width="0.0817%" height="15" fill="rgb(226,99,2)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3464%" y="453" width="0.0817%" height="15" fill="rgb(206,133,23)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3464%" y="437" width="0.0817%" height="15" fill="rgb(243,173,15)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3464%" y="421" width="0.0817%" height="15" fill="rgb(228,69,28)" fg:x="1216" fg:w="1"/><text x="99.5964%" y="431.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.06%)</title><rect x="98.4477%" y="629" width="1.0621%" height="15" fill="rgb(212,51,22)" fg:x="1205" fg:w="13"/><text x="98.6977%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="99.4281%" y="613" width="0.0817%" height="15" fill="rgb(227,113,0)" fg:x="1217" fg:w="1"/><text x="99.6781%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5915%" y="581" width="0.0817%" height="15" fill="rgb(252,84,27)" fg:x="1219" fg:w="1"/><text x="99.8415%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5915%" y="565" width="0.0817%" height="15" fill="rgb(223,145,39)" fg:x="1219" fg:w="1"/><text x="99.8415%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5915%" y="549" width="0.0817%" height="15" fill="rgb(239,219,30)" fg:x="1219" fg:w="1"/><text x="99.8415%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.6732%" y="581" width="0.0817%" height="15" fill="rgb(224,196,39)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.6732%" y="565" width="0.0817%" height="15" fill="rgb(205,35,43)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.6732%" y="549" width="0.0817%" height="15" fill="rgb(228,201,21)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6732%" y="533" width="0.0817%" height="15" fill="rgb(237,118,16)" fg:x="1220" fg:w="1"/><text x="99.9232%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7549%" y="485" width="0.0817%" height="15" fill="rgb(241,17,19)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7549%" y="469" width="0.0817%" height="15" fill="rgb(214,10,25)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.7549%" y="453" width="0.0817%" height="15" fill="rgb(238,37,29)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7549%" y="437" width="0.0817%" height="15" fill="rgb(253,83,25)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="99.7549%" y="421" width="0.0817%" height="15" fill="rgb(234,192,12)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.7549%" y="405" width="0.0817%" height="15" fill="rgb(241,216,45)" fg:x="1221" fg:w="1"/><text x="100.0049%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.7549%" y="581" width="0.1634%" height="15" fill="rgb(242,22,33)" fg:x="1221" fg:w="2"/><text x="100.0049%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.7549%" y="565" width="0.1634%" height="15" fill="rgb(231,105,49)" fg:x="1221" fg:w="2"/><text x="100.0049%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7549%" y="549" width="0.1634%" height="15" fill="rgb(218,204,15)" fg:x="1221" fg:w="2"/><text x="100.0049%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.7549%" y="533" width="0.1634%" height="15" fill="rgb(235,138,41)" fg:x="1221" fg:w="2"/><text x="100.0049%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.7549%" y="517" width="0.1634%" height="15" fill="rgb(246,0,9)" fg:x="1221" fg:w="2"/><text x="100.0049%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.7549%" y="501" width="0.1634%" height="15" fill="rgb(210,74,4)" fg:x="1221" fg:w="2"/><text x="100.0049%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8366%" y="485" width="0.0817%" height="15" fill="rgb(250,60,41)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8366%" y="469" width="0.0817%" height="15" fill="rgb(220,115,12)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="479.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="99.8366%" y="453" width="0.0817%" height="15" fill="rgb(237,100,13)" fg:x="1222" fg:w="1"/><text x="100.0866%" y="463.50"></text></g><g><title>all (1,224 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(213,55,26)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-9bf755a9 (1,224 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(216,17,4)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="1007.50">simple-9bf755a9</text></g><g><title>_start (1,224 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(220,153,47)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,224 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(215,131,9)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,224 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(233,46,42)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,224 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(226,86,7)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,224 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,226,21)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,224 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(244,137,22)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,224 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(211,139,35)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,224 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(214,62,50)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,224 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(212,113,44)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,224 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(226,150,43)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,224 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(250,71,37)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,224 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(219,76,19)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,224 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(250,39,11)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,224 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(230,64,31)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,224 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(208,222,23)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,224 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(227,125,18)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,224 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(234,210,9)" fg:x="0" fg:w="1224"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (402 samples, 32.84%)</title><rect x="67.1569%" y="709" width="32.8431%" height="15" fill="rgb(217,127,24)" fg:x="822" fg:w="402"/><text x="67.4069%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::ro..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (402 samples, 32.84%)</title><rect x="67.1569%" y="693" width="32.8431%" height="15" fill="rgb(239,141,48)" fg:x="822" fg:w="402"/><text x="67.4069%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (402 samples, 32.84%)</title><rect x="67.1569%" y="677" width="32.8431%" height="15" fill="rgb(227,109,8)" fg:x="822" fg:w="402"/><text x="67.4069%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (249 samples, 20.34%)</title><rect x="79.6569%" y="661" width="20.3431%" height="15" fill="rgb(235,184,23)" fg:x="975" fg:w="249"/><text x="79.9069%" y="671.50">engine::session::Session::evalua..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (249 samples, 20.34%)</title><rect x="79.6569%" y="645" width="20.3431%" height="15" fill="rgb(227,226,48)" fg:x="975" fg:w="249"/><text x="79.9069%" y="655.50">engine::session::Session::evalua..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.49%)</title><rect x="99.5098%" y="629" width="0.4902%" height="15" fill="rgb(206,150,11)" fg:x="1218" fg:w="6"/><text x="99.7598%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="99.5098%" y="613" width="0.4902%" height="15" fill="rgb(254,2,33)" fg:x="1218" fg:w="6"/><text x="99.7598%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="99.5098%" y="597" width="0.4902%" height="15" fill="rgb(243,160,20)" fg:x="1218" fg:w="6"/><text x="99.7598%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.9183%" y="581" width="0.0817%" height="15" fill="rgb(218,208,30)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.9183%" y="565" width="0.0817%" height="15" fill="rgb(224,120,49)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9183%" y="549" width="0.0817%" height="15" fill="rgb(246,12,2)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9183%" y="533" width="0.0817%" height="15" fill="rgb(236,117,3)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.9183%" y="517" width="0.0817%" height="15" fill="rgb(216,128,52)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.9183%" y="501" width="0.0817%" height="15" fill="rgb(246,145,19)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.9183%" y="485" width="0.0817%" height="15" fill="rgb(222,11,46)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9183%" y="469" width="0.0817%" height="15" fill="rgb(245,82,36)" fg:x="1223" fg:w="1"/><text x="100.1683%" y="479.50"></text></g></svg></svg>