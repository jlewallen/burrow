<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="1243"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="741" width="0.0805%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0805%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="709" width="0.0805%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.0805%" y="629" width="0.1609%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="2"/><text x="0.3305%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1609%" y="613" width="0.0805%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="1"/><text x="0.4109%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.2414%" y="597" width="0.1609%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.4914%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2414%" y="581" width="0.1609%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="2"/><text x="0.4914%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="0.0000%" y="757" width="0.5632%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="7"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.48%)</title><rect x="0.0805%" y="741" width="0.4827%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="6"/><text x="0.3305%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0805%" y="725" width="0.4827%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="6"/><text x="0.3305%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.48%)</title><rect x="0.0805%" y="709" width="0.4827%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="6"/><text x="0.3305%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0805%" y="693" width="0.4827%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="6"/><text x="0.3305%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0805%" y="677" width="0.4827%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="6"/><text x="0.3305%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.0805%" y="661" width="0.4827%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="6"/><text x="0.3305%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.0805%" y="645" width="0.4827%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="6"/><text x="0.3305%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.2414%" y="629" width="0.3218%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="4"/><text x="0.4914%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.2414%" y="613" width="0.3218%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="4"/><text x="0.4914%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.4023%" y="597" width="0.1609%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="2"/><text x="0.6523%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.4827%" y="581" width="0.0805%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="1"/><text x="0.7327%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4827%" y="565" width="0.0805%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="1"/><text x="0.7327%" y="575.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="0.7241%" y="661" width="0.0805%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="0.9741%" y="671.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="0.8045%" y="645" width="0.1609%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="2"/><text x="1.0545%" y="655.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.8850%" y="629" width="0.0805%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="1.1350%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (11 samples, 0.88%)</title><rect x="0.5632%" y="757" width="0.8850%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="11"/><text x="0.8132%" y="767.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (11 samples, 0.88%)</title><rect x="0.5632%" y="741" width="0.8850%" height="15" fill="rgb(241,131,45)" fg:x="7" fg:w="11"/><text x="0.8132%" y="751.50"></text></g><g><title>engine::session::Session::new (11 samples, 0.88%)</title><rect x="0.5632%" y="725" width="0.8850%" height="15" fill="rgb(249,31,29)" fg:x="7" fg:w="11"/><text x="0.8132%" y="735.50"></text></g><g><title>engine::session::Session::initialize (11 samples, 0.88%)</title><rect x="0.5632%" y="709" width="0.8850%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="11"/><text x="0.8132%" y="719.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (10 samples, 0.80%)</title><rect x="0.6436%" y="693" width="0.8045%" height="15" fill="rgb(238,160,17)" fg:x="8" fg:w="10"/><text x="0.8936%" y="703.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (9 samples, 0.72%)</title><rect x="0.7241%" y="677" width="0.7241%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="9"/><text x="0.9741%" y="687.50"></text></g><g><title>libloading::safe::Library::new (8 samples, 0.64%)</title><rect x="0.8045%" y="661" width="0.6436%" height="15" fill="rgb(232,36,49)" fg:x="10" fg:w="8"/><text x="1.0545%" y="671.50"></text></g><g><title>dlopen (6 samples, 0.48%)</title><rect x="0.9654%" y="645" width="0.4827%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="6"/><text x="1.2154%" y="655.50"></text></g><g><title>_dl_catch_error (6 samples, 0.48%)</title><rect x="0.9654%" y="629" width="0.4827%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="6"/><text x="1.2154%" y="639.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="0.9654%" y="613" width="0.4827%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="6"/><text x="1.2154%" y="623.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="0.9654%" y="597" width="0.4827%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="6"/><text x="1.2154%" y="607.50"></text></g><g><title>_dl_catch_exception (6 samples, 0.48%)</title><rect x="0.9654%" y="581" width="0.4827%" height="15" fill="rgb(241,83,37)" fg:x="12" fg:w="6"/><text x="1.2154%" y="591.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4481%" y="741" width="0.0805%" height="15" fill="rgb(233,36,39)" fg:x="18" fg:w="1"/><text x="1.6981%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4481%" y="725" width="0.0805%" height="15" fill="rgb(226,3,54)" fg:x="18" fg:w="1"/><text x="1.6981%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="1.4481%" y="709" width="0.0805%" height="15" fill="rgb(245,192,40)" fg:x="18" fg:w="1"/><text x="1.6981%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="1.4481%" y="693" width="0.0805%" height="15" fill="rgb(238,167,29)" fg:x="18" fg:w="1"/><text x="1.6981%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="1.4481%" y="677" width="0.0805%" height="15" fill="rgb(232,182,51)" fg:x="18" fg:w="1"/><text x="1.6981%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="1.4481%" y="661" width="0.0805%" height="15" fill="rgb(231,60,39)" fg:x="18" fg:w="1"/><text x="1.6981%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.4481%" y="645" width="0.0805%" height="15" fill="rgb(208,69,12)" fg:x="18" fg:w="1"/><text x="1.6981%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="1.4481%" y="629" width="0.0805%" height="15" fill="rgb(235,93,37)" fg:x="18" fg:w="1"/><text x="1.6981%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="1.4481%" y="613" width="0.0805%" height="15" fill="rgb(213,116,39)" fg:x="18" fg:w="1"/><text x="1.6981%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="1.4481%" y="597" width="0.0805%" height="15" fill="rgb(222,207,29)" fg:x="18" fg:w="1"/><text x="1.6981%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="1.4481%" y="581" width="0.0805%" height="15" fill="rgb(206,96,30)" fg:x="18" fg:w="1"/><text x="1.6981%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="1.4481%" y="565" width="0.0805%" height="15" fill="rgb(218,138,4)" fg:x="18" fg:w="1"/><text x="1.6981%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="1.4481%" y="549" width="0.0805%" height="15" fill="rgb(250,191,14)" fg:x="18" fg:w="1"/><text x="1.6981%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.5286%" y="741" width="0.0805%" height="15" fill="rgb(239,60,40)" fg:x="19" fg:w="1"/><text x="1.7786%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.5286%" y="725" width="0.0805%" height="15" fill="rgb(206,27,48)" fg:x="19" fg:w="1"/><text x="1.7786%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5286%" y="709" width="0.0805%" height="15" fill="rgb(225,35,8)" fg:x="19" fg:w="1"/><text x="1.7786%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.6090%" y="725" width="0.0805%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="1"/><text x="1.8590%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6090%" y="709" width="0.0805%" height="15" fill="rgb(247,123,22)" fg:x="20" fg:w="1"/><text x="1.8590%" y="719.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.6895%" y="629" width="0.0805%" height="15" fill="rgb(231,138,38)" fg:x="21" fg:w="1"/><text x="1.9395%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.6895%" y="613" width="0.0805%" height="15" fill="rgb(231,145,46)" fg:x="21" fg:w="1"/><text x="1.9395%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="1.7699%" y="613" width="0.0805%" height="15" fill="rgb(251,118,11)" fg:x="22" fg:w="1"/><text x="2.0199%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.8504%" y="613" width="0.0805%" height="15" fill="rgb(217,147,25)" fg:x="23" fg:w="1"/><text x="2.1004%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="1.7699%" y="629" width="0.4827%" height="15" fill="rgb(247,81,37)" fg:x="22" fg:w="6"/><text x="2.0199%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.9308%" y="613" width="0.3218%" height="15" fill="rgb(209,12,38)" fg:x="24" fg:w="4"/><text x="2.1808%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.9308%" y="597" width="0.3218%" height="15" fill="rgb(227,1,9)" fg:x="24" fg:w="4"/><text x="2.1808%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.9308%" y="581" width="0.3218%" height="15" fill="rgb(248,47,43)" fg:x="24" fg:w="4"/><text x="2.1808%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="1.9308%" y="565" width="0.3218%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="4"/><text x="2.1808%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="2.0113%" y="549" width="0.2414%" height="15" fill="rgb(210,229,1)" fg:x="25" fg:w="3"/><text x="2.2613%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.0917%" y="533" width="0.1609%" height="15" fill="rgb(222,148,37)" fg:x="26" fg:w="2"/><text x="2.3417%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="2.0917%" y="517" width="0.1609%" height="15" fill="rgb(234,67,33)" fg:x="26" fg:w="2"/><text x="2.3417%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.0917%" y="501" width="0.1609%" height="15" fill="rgb(247,98,35)" fg:x="26" fg:w="2"/><text x="2.3417%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.0917%" y="485" width="0.1609%" height="15" fill="rgb(247,138,52)" fg:x="26" fg:w="2"/><text x="2.3417%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="2.0917%" y="469" width="0.1609%" height="15" fill="rgb(213,79,30)" fg:x="26" fg:w="2"/><text x="2.3417%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="2.0917%" y="453" width="0.1609%" height="15" fill="rgb(246,177,23)" fg:x="26" fg:w="2"/><text x="2.3417%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="1.6895%" y="661" width="0.7241%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="9"/><text x="1.9395%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="1.6895%" y="645" width="0.7241%" height="15" fill="rgb(216,154,8)" fg:x="21" fg:w="9"/><text x="1.9395%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.2526%" y="629" width="0.1609%" height="15" fill="rgb(244,35,45)" fg:x="28" fg:w="2"/><text x="2.5026%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3331%" y="613" width="0.0805%" height="15" fill="rgb(251,115,12)" fg:x="29" fg:w="1"/><text x="2.5831%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4135%" y="613" width="0.0805%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="1"/><text x="2.6635%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4940%" y="597" width="0.0805%" height="15" fill="rgb(233,84,52)" fg:x="31" fg:w="1"/><text x="2.7440%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.4135%" y="661" width="0.2414%" height="15" fill="rgb(207,117,47)" fg:x="30" fg:w="3"/><text x="2.6635%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="2.4135%" y="645" width="0.2414%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="3"/><text x="2.6635%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.4135%" y="629" width="0.2414%" height="15" fill="rgb(209,38,44)" fg:x="30" fg:w="3"/><text x="2.6635%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.4940%" y="613" width="0.1609%" height="15" fill="rgb(236,212,23)" fg:x="31" fg:w="2"/><text x="2.7440%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5744%" y="597" width="0.0805%" height="15" fill="rgb(242,79,21)" fg:x="32" fg:w="1"/><text x="2.8244%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5744%" y="581" width="0.0805%" height="15" fill="rgb(211,96,35)" fg:x="32" fg:w="1"/><text x="2.8244%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.5744%" y="565" width="0.0805%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="1"/><text x="2.8244%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5744%" y="549" width="0.0805%" height="15" fill="rgb(211,81,21)" fg:x="32" fg:w="1"/><text x="2.8244%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7353%" y="613" width="0.0805%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="1"/><text x="2.9853%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7353%" y="597" width="0.0805%" height="15" fill="rgb(235,213,38)" fg:x="34" fg:w="1"/><text x="2.9853%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7353%" y="581" width="0.0805%" height="15" fill="rgb(237,122,38)" fg:x="34" fg:w="1"/><text x="2.9853%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.8962%" y="565" width="0.0805%" height="15" fill="rgb(244,218,35)" fg:x="36" fg:w="1"/><text x="3.1462%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8962%" y="549" width="0.0805%" height="15" fill="rgb(240,68,47)" fg:x="36" fg:w="1"/><text x="3.1462%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.9767%" y="533" width="0.1609%" height="15" fill="rgb(210,16,53)" fg:x="37" fg:w="2"/><text x="3.2267%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="2.9767%" y="517" width="0.1609%" height="15" fill="rgb(235,124,12)" fg:x="37" fg:w="2"/><text x="3.2267%" y="527.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.69%)</title><rect x="1.6090%" y="741" width="1.6895%" height="15" fill="rgb(224,169,11)" fg:x="20" fg:w="21"/><text x="1.8590%" y="751.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.61%)</title><rect x="1.6895%" y="725" width="1.6090%" height="15" fill="rgb(250,166,2)" fg:x="21" fg:w="20"/><text x="1.9395%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (20 samples, 1.61%)</title><rect x="1.6895%" y="709" width="1.6090%" height="15" fill="rgb(242,216,29)" fg:x="21" fg:w="20"/><text x="1.9395%" y="719.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (20 samples, 1.61%)</title><rect x="1.6895%" y="693" width="1.6090%" height="15" fill="rgb(230,116,27)" fg:x="21" fg:w="20"/><text x="1.9395%" y="703.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (20 samples, 1.61%)</title><rect x="1.6895%" y="677" width="1.6090%" height="15" fill="rgb(228,99,48)" fg:x="21" fg:w="20"/><text x="1.9395%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.64%)</title><rect x="2.6549%" y="661" width="0.6436%" height="15" fill="rgb(253,11,6)" fg:x="33" fg:w="8"/><text x="2.9049%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="2.6549%" y="645" width="0.6436%" height="15" fill="rgb(247,143,39)" fg:x="33" fg:w="8"/><text x="2.9049%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="2.6549%" y="629" width="0.6436%" height="15" fill="rgb(236,97,10)" fg:x="33" fg:w="8"/><text x="2.9049%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="2.8158%" y="613" width="0.4827%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="6"/><text x="3.0658%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="2.8962%" y="597" width="0.4023%" height="15" fill="rgb(216,164,2)" fg:x="36" fg:w="5"/><text x="3.1462%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="2.8962%" y="581" width="0.4023%" height="15" fill="rgb(220,129,5)" fg:x="36" fg:w="5"/><text x="3.1462%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="2.9767%" y="565" width="0.3218%" height="15" fill="rgb(242,17,10)" fg:x="37" fg:w="4"/><text x="3.2267%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="2.9767%" y="549" width="0.3218%" height="15" fill="rgb(242,107,0)" fg:x="37" fg:w="4"/><text x="3.2267%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.1376%" y="533" width="0.1609%" height="15" fill="rgb(251,28,31)" fg:x="39" fg:w="2"/><text x="3.3876%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.2985%" y="661" width="0.0805%" height="15" fill="rgb(233,223,10)" fg:x="41" fg:w="1"/><text x="3.5485%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.2985%" y="709" width="0.1609%" height="15" fill="rgb(215,21,27)" fg:x="41" fg:w="2"/><text x="3.5485%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.2985%" y="693" width="0.1609%" height="15" fill="rgb(232,23,21)" fg:x="41" fg:w="2"/><text x="3.5485%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.2985%" y="677" width="0.1609%" height="15" fill="rgb(244,5,23)" fg:x="41" fg:w="2"/><text x="3.5485%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.3789%" y="661" width="0.0805%" height="15" fill="rgb(226,81,46)" fg:x="42" fg:w="1"/><text x="3.6289%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.3789%" y="645" width="0.0805%" height="15" fill="rgb(247,70,30)" fg:x="42" fg:w="1"/><text x="3.6289%" y="655.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="3.3789%" y="629" width="0.0805%" height="15" fill="rgb(212,68,19)" fg:x="42" fg:w="1"/><text x="3.6289%" y="639.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="3.4594%" y="709" width="0.0805%" height="15" fill="rgb(240,187,13)" fg:x="43" fg:w="1"/><text x="3.7094%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.4594%" y="693" width="0.0805%" height="15" fill="rgb(223,113,26)" fg:x="43" fg:w="1"/><text x="3.7094%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4594%" y="677" width="0.0805%" height="15" fill="rgb(206,192,2)" fg:x="43" fg:w="1"/><text x="3.7094%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.5398%" y="677" width="0.0805%" height="15" fill="rgb(241,108,4)" fg:x="44" fg:w="1"/><text x="3.7898%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="3.5398%" y="661" width="0.0805%" height="15" fill="rgb(247,173,49)" fg:x="44" fg:w="1"/><text x="3.7898%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.5398%" y="645" width="0.0805%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="1"/><text x="3.7898%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5398%" y="629" width="0.0805%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="1"/><text x="3.7898%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5398%" y="613" width="0.0805%" height="15" fill="rgb(245,172,44)" fg:x="44" fg:w="1"/><text x="3.7898%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5398%" y="597" width="0.0805%" height="15" fill="rgb(236,23,11)" fg:x="44" fg:w="1"/><text x="3.7898%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.5398%" y="581" width="0.0805%" height="15" fill="rgb(205,117,38)" fg:x="44" fg:w="1"/><text x="3.7898%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5398%" y="565" width="0.0805%" height="15" fill="rgb(237,72,25)" fg:x="44" fg:w="1"/><text x="3.7898%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.5398%" y="549" width="0.0805%" height="15" fill="rgb(244,70,9)" fg:x="44" fg:w="1"/><text x="3.7898%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.5398%" y="533" width="0.0805%" height="15" fill="rgb(217,125,39)" fg:x="44" fg:w="1"/><text x="3.7898%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.5398%" y="517" width="0.0805%" height="15" fill="rgb(235,36,10)" fg:x="44" fg:w="1"/><text x="3.7898%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.5398%" y="501" width="0.0805%" height="15" fill="rgb(251,123,47)" fg:x="44" fg:w="1"/><text x="3.7898%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5398%" y="485" width="0.0805%" height="15" fill="rgb(221,13,13)" fg:x="44" fg:w="1"/><text x="3.7898%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5398%" y="469" width="0.0805%" height="15" fill="rgb(238,131,9)" fg:x="44" fg:w="1"/><text x="3.7898%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.5398%" y="453" width="0.0805%" height="15" fill="rgb(211,50,8)" fg:x="44" fg:w="1"/><text x="3.7898%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.5398%" y="437" width="0.0805%" height="15" fill="rgb(245,182,24)" fg:x="44" fg:w="1"/><text x="3.7898%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.5398%" y="421" width="0.0805%" height="15" fill="rgb(242,14,37)" fg:x="44" fg:w="1"/><text x="3.7898%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.5398%" y="405" width="0.0805%" height="15" fill="rgb(246,228,12)" fg:x="44" fg:w="1"/><text x="3.7898%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5398%" y="389" width="0.0805%" height="15" fill="rgb(213,55,15)" fg:x="44" fg:w="1"/><text x="3.7898%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="3.2985%" y="725" width="0.4023%" height="15" fill="rgb(209,9,3)" fg:x="41" fg:w="5"/><text x="3.5485%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="3.5398%" y="709" width="0.1609%" height="15" fill="rgb(230,59,30)" fg:x="44" fg:w="2"/><text x="3.7898%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.5398%" y="693" width="0.1609%" height="15" fill="rgb(209,121,21)" fg:x="44" fg:w="2"/><text x="3.7898%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6203%" y="677" width="0.0805%" height="15" fill="rgb(220,109,13)" fg:x="45" fg:w="1"/><text x="3.8703%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7007%" y="613" width="0.0805%" height="15" fill="rgb(232,18,1)" fg:x="46" fg:w="1"/><text x="3.9507%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7007%" y="597" width="0.0805%" height="15" fill="rgb(215,41,42)" fg:x="46" fg:w="1"/><text x="3.9507%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7007%" y="581" width="0.0805%" height="15" fill="rgb(224,123,36)" fg:x="46" fg:w="1"/><text x="3.9507%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7007%" y="565" width="0.0805%" height="15" fill="rgb(240,125,3)" fg:x="46" fg:w="1"/><text x="3.9507%" y="575.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.7007%" y="709" width="0.1609%" height="15" fill="rgb(205,98,50)" fg:x="46" fg:w="2"/><text x="3.9507%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.7007%" y="693" width="0.1609%" height="15" fill="rgb(205,185,37)" fg:x="46" fg:w="2"/><text x="3.9507%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.7007%" y="677" width="0.1609%" height="15" fill="rgb(238,207,15)" fg:x="46" fg:w="2"/><text x="3.9507%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.7007%" y="661" width="0.1609%" height="15" fill="rgb(213,199,42)" fg:x="46" fg:w="2"/><text x="3.9507%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.7007%" y="645" width="0.1609%" height="15" fill="rgb(235,201,11)" fg:x="46" fg:w="2"/><text x="3.9507%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="3.7007%" y="629" width="0.1609%" height="15" fill="rgb(207,46,11)" fg:x="46" fg:w="2"/><text x="3.9507%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7812%" y="613" width="0.0805%" height="15" fill="rgb(241,35,35)" fg:x="47" fg:w="1"/><text x="4.0312%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7812%" y="597" width="0.0805%" height="15" fill="rgb(243,32,47)" fg:x="47" fg:w="1"/><text x="4.0312%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7812%" y="581" width="0.0805%" height="15" fill="rgb(247,202,23)" fg:x="47" fg:w="1"/><text x="4.0312%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7812%" y="565" width="0.0805%" height="15" fill="rgb(219,102,11)" fg:x="47" fg:w="1"/><text x="4.0312%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7812%" y="549" width="0.0805%" height="15" fill="rgb(243,110,44)" fg:x="47" fg:w="1"/><text x="4.0312%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7812%" y="533" width="0.0805%" height="15" fill="rgb(222,74,54)" fg:x="47" fg:w="1"/><text x="4.0312%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7812%" y="517" width="0.0805%" height="15" fill="rgb(216,99,12)" fg:x="47" fg:w="1"/><text x="4.0312%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.7812%" y="501" width="0.0805%" height="15" fill="rgb(226,22,26)" fg:x="47" fg:w="1"/><text x="4.0312%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.7812%" y="485" width="0.0805%" height="15" fill="rgb(217,163,10)" fg:x="47" fg:w="1"/><text x="4.0312%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.7812%" y="469" width="0.0805%" height="15" fill="rgb(213,25,53)" fg:x="47" fg:w="1"/><text x="4.0312%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.7812%" y="453" width="0.0805%" height="15" fill="rgb(252,105,26)" fg:x="47" fg:w="1"/><text x="4.0312%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.7812%" y="437" width="0.0805%" height="15" fill="rgb(220,39,43)" fg:x="47" fg:w="1"/><text x="4.0312%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="3.8616%" y="709" width="0.0805%" height="15" fill="rgb(229,68,48)" fg:x="48" fg:w="1"/><text x="4.1116%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8616%" y="693" width="0.0805%" height="15" fill="rgb(252,8,32)" fg:x="48" fg:w="1"/><text x="4.1116%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.8616%" y="677" width="0.0805%" height="15" fill="rgb(223,20,43)" fg:x="48" fg:w="1"/><text x="4.1116%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.8616%" y="661" width="0.0805%" height="15" fill="rgb(229,81,49)" fg:x="48" fg:w="1"/><text x="4.1116%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.9421%" y="709" width="0.0805%" height="15" fill="rgb(236,28,36)" fg:x="49" fg:w="1"/><text x="4.1921%" y="719.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9421%" y="693" width="0.0805%" height="15" fill="rgb(249,185,26)" fg:x="49" fg:w="1"/><text x="4.1921%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.0225%" y="661" width="0.1609%" height="15" fill="rgb(249,174,33)" fg:x="50" fg:w="2"/><text x="4.2725%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.0225%" y="645" width="0.1609%" height="15" fill="rgb(233,201,37)" fg:x="50" fg:w="2"/><text x="4.2725%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.0225%" y="629" width="0.1609%" height="15" fill="rgb(221,78,26)" fg:x="50" fg:w="2"/><text x="4.2725%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="4.0225%" y="613" width="0.1609%" height="15" fill="rgb(250,127,30)" fg:x="50" fg:w="2"/><text x="4.2725%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="4.0225%" y="597" width="0.1609%" height="15" fill="rgb(230,49,44)" fg:x="50" fg:w="2"/><text x="4.2725%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="4.0225%" y="581" width="0.1609%" height="15" fill="rgb(229,67,23)" fg:x="50" fg:w="2"/><text x="4.2725%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="4.0225%" y="565" width="0.1609%" height="15" fill="rgb(249,83,47)" fg:x="50" fg:w="2"/><text x="4.2725%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.1030%" y="549" width="0.0805%" height="15" fill="rgb(215,43,3)" fg:x="51" fg:w="1"/><text x="4.3530%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1030%" y="533" width="0.0805%" height="15" fill="rgb(238,154,13)" fg:x="51" fg:w="1"/><text x="4.3530%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1030%" y="517" width="0.0805%" height="15" fill="rgb(219,56,2)" fg:x="51" fg:w="1"/><text x="4.3530%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="4.0225%" y="693" width="0.2414%" height="15" fill="rgb(233,0,4)" fg:x="50" fg:w="3"/><text x="4.2725%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="4.0225%" y="677" width="0.2414%" height="15" fill="rgb(235,30,7)" fg:x="50" fg:w="3"/><text x="4.2725%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.1834%" y="661" width="0.0805%" height="15" fill="rgb(250,79,13)" fg:x="52" fg:w="1"/><text x="4.4334%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.1834%" y="645" width="0.0805%" height="15" fill="rgb(211,146,34)" fg:x="52" fg:w="1"/><text x="4.4334%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.1834%" y="629" width="0.0805%" height="15" fill="rgb(228,22,38)" fg:x="52" fg:w="1"/><text x="4.4334%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1834%" y="613" width="0.0805%" height="15" fill="rgb(235,168,5)" fg:x="52" fg:w="1"/><text x="4.4334%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.1834%" y="597" width="0.0805%" height="15" fill="rgb(221,155,16)" fg:x="52" fg:w="1"/><text x="4.4334%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1834%" y="581" width="0.0805%" height="15" fill="rgb(215,215,53)" fg:x="52" fg:w="1"/><text x="4.4334%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1834%" y="565" width="0.0805%" height="15" fill="rgb(223,4,10)" fg:x="52" fg:w="1"/><text x="4.4334%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1834%" y="549" width="0.0805%" height="15" fill="rgb(234,103,6)" fg:x="52" fg:w="1"/><text x="4.4334%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1834%" y="533" width="0.0805%" height="15" fill="rgb(227,97,0)" fg:x="52" fg:w="1"/><text x="4.4334%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1834%" y="517" width="0.0805%" height="15" fill="rgb(234,150,53)" fg:x="52" fg:w="1"/><text x="4.4334%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1834%" y="501" width="0.0805%" height="15" fill="rgb(228,201,54)" fg:x="52" fg:w="1"/><text x="4.4334%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1834%" y="485" width="0.0805%" height="15" fill="rgb(222,22,37)" fg:x="52" fg:w="1"/><text x="4.4334%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1834%" y="469" width="0.0805%" height="15" fill="rgb(237,53,32)" fg:x="52" fg:w="1"/><text x="4.4334%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1834%" y="453" width="0.0805%" height="15" fill="rgb(233,25,53)" fg:x="52" fg:w="1"/><text x="4.4334%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1834%" y="437" width="0.0805%" height="15" fill="rgb(210,40,34)" fg:x="52" fg:w="1"/><text x="4.4334%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1834%" y="421" width="0.0805%" height="15" fill="rgb(241,220,44)" fg:x="52" fg:w="1"/><text x="4.4334%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1834%" y="405" width="0.0805%" height="15" fill="rgb(235,28,35)" fg:x="52" fg:w="1"/><text x="4.4334%" y="415.50"></text></g><g><title>plugins_core::build::Build::holding (13 samples, 1.05%)</title><rect x="3.2985%" y="741" width="1.0459%" height="15" fill="rgb(210,56,17)" fg:x="41" fg:w="13"/><text x="3.5485%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="3.7007%" y="725" width="0.6436%" height="15" fill="rgb(224,130,29)" fg:x="46" fg:w="8"/><text x="3.9507%" y="735.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="4.0225%" y="709" width="0.3218%" height="15" fill="rgb(235,212,8)" fg:x="50" fg:w="4"/><text x="4.2725%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="4.2639%" y="693" width="0.0805%" height="15" fill="rgb(223,33,50)" fg:x="53" fg:w="1"/><text x="4.5139%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2639%" y="677" width="0.0805%" height="15" fill="rgb(219,149,13)" fg:x="53" fg:w="1"/><text x="4.5139%" y="687.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="4.2639%" y="661" width="0.0805%" height="15" fill="rgb(250,156,29)" fg:x="53" fg:w="1"/><text x="4.5139%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="4.3443%" y="709" width="0.0805%" height="15" fill="rgb(216,193,19)" fg:x="54" fg:w="1"/><text x="4.5943%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="4.3443%" y="693" width="0.0805%" height="15" fill="rgb(216,135,14)" fg:x="54" fg:w="1"/><text x="4.5943%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.3443%" y="677" width="0.0805%" height="15" fill="rgb(241,47,5)" fg:x="54" fg:w="1"/><text x="4.5943%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.3443%" y="661" width="0.0805%" height="15" fill="rgb(233,42,35)" fg:x="54" fg:w="1"/><text x="4.5943%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.3443%" y="645" width="0.0805%" height="15" fill="rgb(231,13,6)" fg:x="54" fg:w="1"/><text x="4.5943%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.3443%" y="629" width="0.0805%" height="15" fill="rgb(207,181,40)" fg:x="54" fg:w="1"/><text x="4.5943%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.3443%" y="613" width="0.0805%" height="15" fill="rgb(254,173,49)" fg:x="54" fg:w="1"/><text x="4.5943%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3443%" y="597" width="0.0805%" height="15" fill="rgb(221,1,38)" fg:x="54" fg:w="1"/><text x="4.5943%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4248%" y="661" width="0.0805%" height="15" fill="rgb(206,124,46)" fg:x="55" fg:w="1"/><text x="4.6748%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4248%" y="645" width="0.0805%" height="15" fill="rgb(249,21,11)" fg:x="55" fg:w="1"/><text x="4.6748%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4248%" y="629" width="0.0805%" height="15" fill="rgb(222,201,40)" fg:x="55" fg:w="1"/><text x="4.6748%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4248%" y="613" width="0.0805%" height="15" fill="rgb(235,61,29)" fg:x="55" fg:w="1"/><text x="4.6748%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4248%" y="597" width="0.0805%" height="15" fill="rgb(219,207,3)" fg:x="55" fg:w="1"/><text x="4.6748%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.4248%" y="581" width="0.0805%" height="15" fill="rgb(222,56,46)" fg:x="55" fg:w="1"/><text x="4.6748%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.4248%" y="565" width="0.0805%" height="15" fill="rgb(239,76,54)" fg:x="55" fg:w="1"/><text x="4.6748%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.4248%" y="549" width="0.0805%" height="15" fill="rgb(231,124,27)" fg:x="55" fg:w="1"/><text x="4.6748%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.4248%" y="533" width="0.0805%" height="15" fill="rgb(249,195,6)" fg:x="55" fg:w="1"/><text x="4.6748%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4248%" y="517" width="0.0805%" height="15" fill="rgb(237,174,47)" fg:x="55" fg:w="1"/><text x="4.6748%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.4248%" y="501" width="0.0805%" height="15" fill="rgb(206,201,31)" fg:x="55" fg:w="1"/><text x="4.6748%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.4248%" y="485" width="0.0805%" height="15" fill="rgb(231,57,52)" fg:x="55" fg:w="1"/><text x="4.6748%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.4248%" y="469" width="0.0805%" height="15" fill="rgb(248,177,22)" fg:x="55" fg:w="1"/><text x="4.6748%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.4248%" y="453" width="0.0805%" height="15" fill="rgb(215,211,37)" fg:x="55" fg:w="1"/><text x="4.6748%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.4248%" y="437" width="0.0805%" height="15" fill="rgb(241,128,51)" fg:x="55" fg:w="1"/><text x="4.6748%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.4248%" y="421" width="0.0805%" height="15" fill="rgb(227,165,31)" fg:x="55" fg:w="1"/><text x="4.6748%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="4.4248%" y="709" width="0.1609%" height="15" fill="rgb(228,167,24)" fg:x="55" fg:w="2"/><text x="4.6748%" y="719.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="4.4248%" y="693" width="0.1609%" height="15" fill="rgb(228,143,12)" fg:x="55" fg:w="2"/><text x="4.6748%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="4.4248%" y="677" width="0.1609%" height="15" fill="rgb(249,149,8)" fg:x="55" fg:w="2"/><text x="4.6748%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.5052%" y="661" width="0.0805%" height="15" fill="rgb(243,35,44)" fg:x="56" fg:w="1"/><text x="4.7552%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.5052%" y="645" width="0.0805%" height="15" fill="rgb(246,89,9)" fg:x="56" fg:w="1"/><text x="4.7552%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5857%" y="613" width="0.0805%" height="15" fill="rgb(233,213,13)" fg:x="57" fg:w="1"/><text x="4.8357%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5857%" y="597" width="0.0805%" height="15" fill="rgb(233,141,41)" fg:x="57" fg:w="1"/><text x="4.8357%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5857%" y="581" width="0.0805%" height="15" fill="rgb(239,167,4)" fg:x="57" fg:w="1"/><text x="4.8357%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.5857%" y="565" width="0.0805%" height="15" fill="rgb(209,217,16)" fg:x="57" fg:w="1"/><text x="4.8357%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5857%" y="549" width="0.0805%" height="15" fill="rgb(219,88,35)" fg:x="57" fg:w="1"/><text x="4.8357%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.5857%" y="533" width="0.0805%" height="15" fill="rgb(220,193,23)" fg:x="57" fg:w="1"/><text x="4.8357%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.5857%" y="517" width="0.0805%" height="15" fill="rgb(230,90,52)" fg:x="57" fg:w="1"/><text x="4.8357%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.5857%" y="501" width="0.0805%" height="15" fill="rgb(252,106,19)" fg:x="57" fg:w="1"/><text x="4.8357%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.5857%" y="485" width="0.0805%" height="15" fill="rgb(206,74,20)" fg:x="57" fg:w="1"/><text x="4.8357%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5857%" y="469" width="0.0805%" height="15" fill="rgb(230,138,44)" fg:x="57" fg:w="1"/><text x="4.8357%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.5857%" y="453" width="0.0805%" height="15" fill="rgb(235,182,43)" fg:x="57" fg:w="1"/><text x="4.8357%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.5857%" y="437" width="0.0805%" height="15" fill="rgb(242,16,51)" fg:x="57" fg:w="1"/><text x="4.8357%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.5857%" y="421" width="0.0805%" height="15" fill="rgb(248,9,4)" fg:x="57" fg:w="1"/><text x="4.8357%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.5857%" y="405" width="0.0805%" height="15" fill="rgb(210,31,22)" fg:x="57" fg:w="1"/><text x="4.8357%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.5857%" y="389" width="0.0805%" height="15" fill="rgb(239,54,39)" fg:x="57" fg:w="1"/><text x="4.8357%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5857%" y="373" width="0.0805%" height="15" fill="rgb(230,99,41)" fg:x="57" fg:w="1"/><text x="4.8357%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.5857%" y="629" width="0.1609%" height="15" fill="rgb(253,106,12)" fg:x="57" fg:w="2"/><text x="4.8357%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6661%" y="613" width="0.0805%" height="15" fill="rgb(213,46,41)" fg:x="58" fg:w="1"/><text x="4.9161%" y="623.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="4.5857%" y="661" width="0.2414%" height="15" fill="rgb(215,133,35)" fg:x="57" fg:w="3"/><text x="4.8357%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="4.5857%" y="645" width="0.2414%" height="15" fill="rgb(213,28,5)" fg:x="57" fg:w="3"/><text x="4.8357%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.7466%" y="629" width="0.0805%" height="15" fill="rgb(215,77,49)" fg:x="59" fg:w="1"/><text x="4.9966%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7466%" y="613" width="0.0805%" height="15" fill="rgb(248,100,22)" fg:x="59" fg:w="1"/><text x="4.9966%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.7466%" y="597" width="0.0805%" height="15" fill="rgb(208,67,9)" fg:x="59" fg:w="1"/><text x="4.9966%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7466%" y="581" width="0.0805%" height="15" fill="rgb(219,133,21)" fg:x="59" fg:w="1"/><text x="4.9966%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.7466%" y="565" width="0.0805%" height="15" fill="rgb(246,46,29)" fg:x="59" fg:w="1"/><text x="4.9966%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.7466%" y="549" width="0.0805%" height="15" fill="rgb(246,185,52)" fg:x="59" fg:w="1"/><text x="4.9966%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="4.7466%" y="533" width="0.0805%" height="15" fill="rgb(252,136,11)" fg:x="59" fg:w="1"/><text x="4.9966%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (7 samples, 0.56%)</title><rect x="4.3443%" y="741" width="0.5632%" height="15" fill="rgb(219,138,53)" fg:x="54" fg:w="7"/><text x="4.5943%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="4.3443%" y="725" width="0.5632%" height="15" fill="rgb(211,51,23)" fg:x="54" fg:w="7"/><text x="4.5943%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="4.5857%" y="709" width="0.3218%" height="15" fill="rgb(247,221,28)" fg:x="57" fg:w="4"/><text x="4.8357%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="4.5857%" y="693" width="0.3218%" height="15" fill="rgb(251,222,45)" fg:x="57" fg:w="4"/><text x="4.8357%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.32%)</title><rect x="4.5857%" y="677" width="0.3218%" height="15" fill="rgb(217,162,53)" fg:x="57" fg:w="4"/><text x="4.8357%" y="687.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.8270%" y="661" width="0.0805%" height="15" fill="rgb(229,93,14)" fg:x="60" fg:w="1"/><text x="5.0770%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.8270%" y="645" width="0.0805%" height="15" fill="rgb(209,67,49)" fg:x="60" fg:w="1"/><text x="5.0770%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.9075%" y="725" width="0.0805%" height="15" fill="rgb(213,87,29)" fg:x="61" fg:w="1"/><text x="5.1575%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.9075%" y="709" width="0.0805%" height="15" fill="rgb(205,151,52)" fg:x="61" fg:w="1"/><text x="5.1575%" y="719.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.9075%" y="693" width="0.0805%" height="15" fill="rgb(253,215,39)" fg:x="61" fg:w="1"/><text x="5.1575%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.9075%" y="677" width="0.0805%" height="15" fill="rgb(221,220,41)" fg:x="61" fg:w="1"/><text x="5.1575%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9075%" y="661" width="0.0805%" height="15" fill="rgb(218,133,21)" fg:x="61" fg:w="1"/><text x="5.1575%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9075%" y="645" width="0.0805%" height="15" fill="rgb(221,193,43)" fg:x="61" fg:w="1"/><text x="5.1575%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9075%" y="629" width="0.0805%" height="15" fill="rgb(240,128,52)" fg:x="61" fg:w="1"/><text x="5.1575%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9075%" y="613" width="0.0805%" height="15" fill="rgb(253,114,12)" fg:x="61" fg:w="1"/><text x="5.1575%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9075%" y="597" width="0.0805%" height="15" fill="rgb(215,223,47)" fg:x="61" fg:w="1"/><text x="5.1575%" y="607.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="4.9879%" y="725" width="0.1609%" height="15" fill="rgb(248,225,23)" fg:x="62" fg:w="2"/><text x="5.2379%" y="735.50"></text></g><g><title>engine::users::model::add_username_to_key (2 samples, 0.16%)</title><rect x="4.9879%" y="709" width="0.1609%" height="15" fill="rgb(250,108,0)" fg:x="62" fg:w="2"/><text x="5.2379%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScopeMut&lt;engine::users::model::Usernames&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0684%" y="693" width="0.0805%" height="15" fill="rgb(228,208,7)" fg:x="63" fg:w="1"/><text x="5.3184%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0684%" y="677" width="0.0805%" height="15" fill="rgb(244,45,10)" fg:x="63" fg:w="1"/><text x="5.3184%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0684%" y="661" width="0.0805%" height="15" fill="rgb(207,125,25)" fg:x="63" fg:w="1"/><text x="5.3184%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="5.1488%" y="677" width="0.0805%" height="15" fill="rgb(210,195,18)" fg:x="64" fg:w="1"/><text x="5.3988%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.1488%" y="661" width="0.0805%" height="15" fill="rgb(249,80,12)" fg:x="64" fg:w="1"/><text x="5.3988%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.1488%" y="645" width="0.0805%" height="15" fill="rgb(221,65,9)" fg:x="64" fg:w="1"/><text x="5.3988%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.1488%" y="629" width="0.0805%" height="15" fill="rgb(235,49,36)" fg:x="64" fg:w="1"/><text x="5.3988%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.1488%" y="613" width="0.0805%" height="15" fill="rgb(225,32,20)" fg:x="64" fg:w="1"/><text x="5.3988%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.1488%" y="597" width="0.0805%" height="15" fill="rgb(215,141,46)" fg:x="64" fg:w="1"/><text x="5.3988%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1488%" y="581" width="0.0805%" height="15" fill="rgb(250,160,47)" fg:x="64" fg:w="1"/><text x="5.3988%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.1488%" y="565" width="0.0805%" height="15" fill="rgb(216,222,40)" fg:x="64" fg:w="1"/><text x="5.3988%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.1488%" y="549" width="0.0805%" height="15" fill="rgb(234,217,39)" fg:x="64" fg:w="1"/><text x="5.3988%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.1488%" y="533" width="0.0805%" height="15" fill="rgb(207,178,40)" fg:x="64" fg:w="1"/><text x="5.3988%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.1488%" y="517" width="0.0805%" height="15" fill="rgb(221,136,13)" fg:x="64" fg:w="1"/><text x="5.3988%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1488%" y="501" width="0.0805%" height="15" fill="rgb(249,199,10)" fg:x="64" fg:w="1"/><text x="5.3988%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.1488%" y="485" width="0.0805%" height="15" fill="rgb(249,222,13)" fg:x="64" fg:w="1"/><text x="5.3988%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.1488%" y="469" width="0.0805%" height="15" fill="rgb(244,185,38)" fg:x="64" fg:w="1"/><text x="5.3988%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.1488%" y="453" width="0.0805%" height="15" fill="rgb(236,202,9)" fg:x="64" fg:w="1"/><text x="5.3988%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.1488%" y="437" width="0.0805%" height="15" fill="rgb(250,229,37)" fg:x="64" fg:w="1"/><text x="5.3988%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.1488%" y="421" width="0.0805%" height="15" fill="rgb(206,174,23)" fg:x="64" fg:w="1"/><text x="5.3988%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1488%" y="405" width="0.0805%" height="15" fill="rgb(211,33,43)" fg:x="64" fg:w="1"/><text x="5.3988%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="5.2293%" y="645" width="0.0805%" height="15" fill="rgb(245,58,50)" fg:x="65" fg:w="1"/><text x="5.4793%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="5.2293%" y="629" width="0.0805%" height="15" fill="rgb(244,68,36)" fg:x="65" fg:w="1"/><text x="5.4793%" y="639.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="5.2293%" y="613" width="0.0805%" height="15" fill="rgb(232,229,15)" fg:x="65" fg:w="1"/><text x="5.4793%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="5.2293%" y="677" width="0.1609%" height="15" fill="rgb(254,30,23)" fg:x="65" fg:w="2"/><text x="5.4793%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.2293%" y="661" width="0.1609%" height="15" fill="rgb(235,160,14)" fg:x="65" fg:w="2"/><text x="5.4793%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.3097%" y="645" width="0.0805%" height="15" fill="rgb(212,155,44)" fg:x="66" fg:w="1"/><text x="5.5597%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.3097%" y="629" width="0.0805%" height="15" fill="rgb(226,2,50)" fg:x="66" fg:w="1"/><text x="5.5597%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.3097%" y="613" width="0.0805%" height="15" fill="rgb(234,177,6)" fg:x="66" fg:w="1"/><text x="5.5597%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="5.3902%" y="645" width="0.0805%" height="15" fill="rgb(217,24,9)" fg:x="67" fg:w="1"/><text x="5.6402%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.3902%" y="629" width="0.0805%" height="15" fill="rgb(220,13,46)" fg:x="67" fg:w="1"/><text x="5.6402%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.3902%" y="613" width="0.0805%" height="15" fill="rgb(239,221,27)" fg:x="67" fg:w="1"/><text x="5.6402%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.3902%" y="597" width="0.0805%" height="15" fill="rgb(222,198,25)" fg:x="67" fg:w="1"/><text x="5.6402%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.3902%" y="581" width="0.0805%" height="15" fill="rgb(211,99,13)" fg:x="67" fg:w="1"/><text x="5.6402%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.3902%" y="565" width="0.0805%" height="15" fill="rgb(232,111,31)" fg:x="67" fg:w="1"/><text x="5.6402%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.3902%" y="549" width="0.0805%" height="15" fill="rgb(245,82,37)" fg:x="67" fg:w="1"/><text x="5.6402%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3902%" y="533" width="0.0805%" height="15" fill="rgb(227,149,46)" fg:x="67" fg:w="1"/><text x="5.6402%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.3902%" y="517" width="0.0805%" height="15" fill="rgb(218,36,50)" fg:x="67" fg:w="1"/><text x="5.6402%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.3902%" y="501" width="0.0805%" height="15" fill="rgb(226,80,48)" fg:x="67" fg:w="1"/><text x="5.6402%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.3902%" y="485" width="0.0805%" height="15" fill="rgb(238,224,15)" fg:x="67" fg:w="1"/><text x="5.6402%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.3902%" y="469" width="0.0805%" height="15" fill="rgb(241,136,10)" fg:x="67" fg:w="1"/><text x="5.6402%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3902%" y="453" width="0.0805%" height="15" fill="rgb(208,32,45)" fg:x="67" fg:w="1"/><text x="5.6402%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.3902%" y="437" width="0.0805%" height="15" fill="rgb(207,135,9)" fg:x="67" fg:w="1"/><text x="5.6402%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.3902%" y="421" width="0.0805%" height="15" fill="rgb(206,86,44)" fg:x="67" fg:w="1"/><text x="5.6402%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.3902%" y="405" width="0.0805%" height="15" fill="rgb(245,177,15)" fg:x="67" fg:w="1"/><text x="5.6402%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.3902%" y="389" width="0.0805%" height="15" fill="rgb(206,64,50)" fg:x="67" fg:w="1"/><text x="5.6402%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.3902%" y="373" width="0.0805%" height="15" fill="rgb(234,36,40)" fg:x="67" fg:w="1"/><text x="5.6402%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="5.3902%" y="661" width="0.1609%" height="15" fill="rgb(213,64,8)" fg:x="67" fg:w="2"/><text x="5.6402%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="5.4706%" y="645" width="0.0805%" height="15" fill="rgb(210,75,36)" fg:x="68" fg:w="1"/><text x="5.7206%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="5.4706%" y="629" width="0.0805%" height="15" fill="rgb(229,88,21)" fg:x="68" fg:w="1"/><text x="5.7206%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="5.4706%" y="613" width="0.0805%" height="15" fill="rgb(252,204,47)" fg:x="68" fg:w="1"/><text x="5.7206%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="5.4706%" y="597" width="0.0805%" height="15" fill="rgb(208,77,27)" fg:x="68" fg:w="1"/><text x="5.7206%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.4706%" y="581" width="0.0805%" height="15" fill="rgb(221,76,26)" fg:x="68" fg:w="1"/><text x="5.7206%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4706%" y="565" width="0.0805%" height="15" fill="rgb(225,139,18)" fg:x="68" fg:w="1"/><text x="5.7206%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.4706%" y="549" width="0.0805%" height="15" fill="rgb(230,137,11)" fg:x="68" fg:w="1"/><text x="5.7206%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4706%" y="533" width="0.0805%" height="15" fill="rgb(212,28,1)" fg:x="68" fg:w="1"/><text x="5.7206%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.4706%" y="517" width="0.0805%" height="15" fill="rgb(248,164,17)" fg:x="68" fg:w="1"/><text x="5.7206%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.4706%" y="501" width="0.0805%" height="15" fill="rgb(222,171,42)" fg:x="68" fg:w="1"/><text x="5.7206%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.4706%" y="485" width="0.0805%" height="15" fill="rgb(243,84,45)" fg:x="68" fg:w="1"/><text x="5.7206%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.4706%" y="469" width="0.0805%" height="15" fill="rgb(252,49,23)" fg:x="68" fg:w="1"/><text x="5.7206%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4706%" y="453" width="0.0805%" height="15" fill="rgb(215,19,7)" fg:x="68" fg:w="1"/><text x="5.7206%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.4706%" y="437" width="0.0805%" height="15" fill="rgb(238,81,41)" fg:x="68" fg:w="1"/><text x="5.7206%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.4706%" y="421" width="0.0805%" height="15" fill="rgb(210,199,37)" fg:x="68" fg:w="1"/><text x="5.7206%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.4706%" y="405" width="0.0805%" height="15" fill="rgb(244,192,49)" fg:x="68" fg:w="1"/><text x="5.7206%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.4706%" y="389" width="0.0805%" height="15" fill="rgb(226,211,11)" fg:x="68" fg:w="1"/><text x="5.7206%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.4706%" y="373" width="0.0805%" height="15" fill="rgb(236,162,54)" fg:x="68" fg:w="1"/><text x="5.7206%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4706%" y="357" width="0.0805%" height="15" fill="rgb(220,229,9)" fg:x="68" fg:w="1"/><text x="5.7206%" y="367.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="5.5511%" y="645" width="0.0805%" height="15" fill="rgb(250,87,22)" fg:x="69" fg:w="1"/><text x="5.8011%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="5.5511%" y="629" width="0.0805%" height="15" fill="rgb(239,43,17)" fg:x="69" fg:w="1"/><text x="5.8011%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="5.5511%" y="613" width="0.0805%" height="15" fill="rgb(231,177,25)" fg:x="69" fg:w="1"/><text x="5.8011%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="5.5511%" y="597" width="0.0805%" height="15" fill="rgb(219,179,1)" fg:x="69" fg:w="1"/><text x="5.8011%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.64%)</title><rect x="5.1488%" y="725" width="0.6436%" height="15" fill="rgb(238,219,53)" fg:x="64" fg:w="8"/><text x="5.3988%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="5.1488%" y="709" width="0.6436%" height="15" fill="rgb(232,167,36)" fg:x="64" fg:w="8"/><text x="5.3988%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (8 samples, 0.64%)</title><rect x="5.1488%" y="693" width="0.6436%" height="15" fill="rgb(244,19,51)" fg:x="64" fg:w="8"/><text x="5.3988%" y="703.50"></text></g><g><title>plugins_core::build::Build::leads_to (5 samples, 0.40%)</title><rect x="5.3902%" y="677" width="0.4023%" height="15" fill="rgb(224,6,22)" fg:x="67" fg:w="5"/><text x="5.6402%" y="687.50"></text></g><g><title>plugins_core::tools::leads_to (3 samples, 0.24%)</title><rect x="5.5511%" y="661" width="0.2414%" height="15" fill="rgb(224,145,5)" fg:x="69" fg:w="3"/><text x="5.8011%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.6315%" y="645" width="0.1609%" height="15" fill="rgb(234,130,49)" fg:x="70" fg:w="2"/><text x="5.8815%" y="655.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Exit&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6315%" y="629" width="0.1609%" height="15" fill="rgb(254,6,2)" fg:x="70" fg:w="2"/><text x="5.8815%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.6315%" y="613" width="0.1609%" height="15" fill="rgb(208,96,46)" fg:x="70" fg:w="2"/><text x="5.8815%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="5.6315%" y="597" width="0.1609%" height="15" fill="rgb(239,3,39)" fg:x="70" fg:w="2"/><text x="5.8815%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="5.6315%" y="581" width="0.1609%" height="15" fill="rgb(233,210,1)" fg:x="70" fg:w="2"/><text x="5.8815%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.7120%" y="565" width="0.0805%" height="15" fill="rgb(244,137,37)" fg:x="71" fg:w="1"/><text x="5.9620%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.7924%" y="661" width="0.0805%" height="15" fill="rgb(240,136,2)" fg:x="72" fg:w="1"/><text x="6.0424%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7924%" y="645" width="0.0805%" height="15" fill="rgb(239,18,37)" fg:x="72" fg:w="1"/><text x="6.0424%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.7924%" y="629" width="0.0805%" height="15" fill="rgb(218,185,22)" fg:x="72" fg:w="1"/><text x="6.0424%" y="639.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.8729%" y="661" width="0.0805%" height="15" fill="rgb(225,218,4)" fg:x="73" fg:w="1"/><text x="6.1229%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.8729%" y="645" width="0.0805%" height="15" fill="rgb(230,182,32)" fg:x="73" fg:w="1"/><text x="6.1229%" y="655.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="5.8729%" y="629" width="0.0805%" height="15" fill="rgb(242,56,43)" fg:x="73" fg:w="1"/><text x="6.1229%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.8729%" y="613" width="0.0805%" height="15" fill="rgb(233,99,24)" fg:x="73" fg:w="1"/><text x="6.1229%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="5.8729%" y="597" width="0.0805%" height="15" fill="rgb(234,209,42)" fg:x="73" fg:w="1"/><text x="6.1229%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="5.8729%" y="581" width="0.0805%" height="15" fill="rgb(227,7,12)" fg:x="73" fg:w="1"/><text x="6.1229%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="5.8729%" y="565" width="0.0805%" height="15" fill="rgb(245,203,43)" fg:x="73" fg:w="1"/><text x="6.1229%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="5.8729%" y="549" width="0.0805%" height="15" fill="rgb(238,205,33)" fg:x="73" fg:w="1"/><text x="6.1229%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8729%" y="533" width="0.0805%" height="15" fill="rgb(231,56,7)" fg:x="73" fg:w="1"/><text x="6.1229%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="5.8729%" y="517" width="0.0805%" height="15" fill="rgb(244,186,29)" fg:x="73" fg:w="1"/><text x="6.1229%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="5.8729%" y="501" width="0.0805%" height="15" fill="rgb(234,111,31)" fg:x="73" fg:w="1"/><text x="6.1229%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="5.8729%" y="485" width="0.0805%" height="15" fill="rgb(241,149,10)" fg:x="73" fg:w="1"/><text x="6.1229%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="5.8729%" y="469" width="0.0805%" height="15" fill="rgb(249,206,44)" fg:x="73" fg:w="1"/><text x="6.1229%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="5.8729%" y="453" width="0.0805%" height="15" fill="rgb(251,153,30)" fg:x="73" fg:w="1"/><text x="6.1229%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.8729%" y="437" width="0.0805%" height="15" fill="rgb(239,152,38)" fg:x="73" fg:w="1"/><text x="6.1229%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="5.9533%" y="613" width="0.0805%" height="15" fill="rgb(249,139,47)" fg:x="74" fg:w="1"/><text x="6.2033%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9533%" y="597" width="0.0805%" height="15" fill="rgb(244,64,35)" fg:x="74" fg:w="1"/><text x="6.2033%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.9533%" y="581" width="0.0805%" height="15" fill="rgb(216,46,15)" fg:x="74" fg:w="1"/><text x="6.2033%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.0338%" y="597" width="0.1609%" height="15" fill="rgb(250,74,19)" fg:x="75" fg:w="2"/><text x="6.2838%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.0338%" y="581" width="0.1609%" height="15" fill="rgb(249,42,33)" fg:x="75" fg:w="2"/><text x="6.2838%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.0338%" y="565" width="0.1609%" height="15" fill="rgb(242,149,17)" fg:x="75" fg:w="2"/><text x="6.2838%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.0338%" y="549" width="0.1609%" height="15" fill="rgb(244,29,21)" fg:x="75" fg:w="2"/><text x="6.2838%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1947%" y="581" width="0.1609%" height="15" fill="rgb(220,130,37)" fg:x="77" fg:w="2"/><text x="6.4447%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="6.3556%" y="565" width="0.0805%" height="15" fill="rgb(211,67,2)" fg:x="79" fg:w="1"/><text x="6.6056%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3556%" y="549" width="0.0805%" height="15" fill="rgb(235,68,52)" fg:x="79" fg:w="1"/><text x="6.6056%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.72%)</title><rect x="5.9533%" y="629" width="0.7241%" height="15" fill="rgb(246,142,3)" fg:x="74" fg:w="9"/><text x="6.2033%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="6.0338%" y="613" width="0.6436%" height="15" fill="rgb(241,25,7)" fg:x="75" fg:w="8"/><text x="6.2838%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="6.1947%" y="597" width="0.4827%" height="15" fill="rgb(242,119,39)" fg:x="77" fg:w="6"/><text x="6.4447%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="6.3556%" y="581" width="0.3218%" height="15" fill="rgb(241,98,45)" fg:x="79" fg:w="4"/><text x="6.6056%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.4360%" y="565" width="0.2414%" height="15" fill="rgb(254,28,30)" fg:x="80" fg:w="3"/><text x="6.6860%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.4360%" y="549" width="0.2414%" height="15" fill="rgb(241,142,54)" fg:x="80" fg:w="3"/><text x="6.6860%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="6.4360%" y="533" width="0.2414%" height="15" fill="rgb(222,85,15)" fg:x="80" fg:w="3"/><text x="6.6860%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="6.4360%" y="517" width="0.2414%" height="15" fill="rgb(210,85,47)" fg:x="80" fg:w="3"/><text x="6.6860%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.5165%" y="501" width="0.1609%" height="15" fill="rgb(224,206,25)" fg:x="81" fg:w="2"/><text x="6.7665%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.5165%" y="485" width="0.1609%" height="15" fill="rgb(243,201,19)" fg:x="81" fg:w="2"/><text x="6.7665%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.5165%" y="469" width="0.1609%" height="15" fill="rgb(236,59,4)" fg:x="81" fg:w="2"/><text x="6.7665%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.5165%" y="453" width="0.1609%" height="15" fill="rgb(254,179,45)" fg:x="81" fg:w="2"/><text x="6.7665%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.5165%" y="437" width="0.1609%" height="15" fill="rgb(226,14,10)" fg:x="81" fg:w="2"/><text x="6.7665%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.5165%" y="421" width="0.1609%" height="15" fill="rgb(244,27,41)" fg:x="81" fg:w="2"/><text x="6.7665%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7578%" y="549" width="0.0805%" height="15" fill="rgb(235,35,32)" fg:x="84" fg:w="1"/><text x="7.0078%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.8383%" y="549" width="0.0805%" height="15" fill="rgb(218,68,31)" fg:x="85" fg:w="1"/><text x="7.0883%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.8383%" y="533" width="0.0805%" height="15" fill="rgb(207,120,37)" fg:x="85" fg:w="1"/><text x="7.0883%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="6.6774%" y="629" width="0.3218%" height="15" fill="rgb(227,98,0)" fg:x="83" fg:w="4"/><text x="6.9274%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="6.6774%" y="613" width="0.3218%" height="15" fill="rgb(207,7,3)" fg:x="83" fg:w="4"/><text x="6.9274%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.7578%" y="597" width="0.2414%" height="15" fill="rgb(206,98,19)" fg:x="84" fg:w="3"/><text x="7.0078%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.7578%" y="581" width="0.2414%" height="15" fill="rgb(217,5,26)" fg:x="84" fg:w="3"/><text x="7.0078%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="6.7578%" y="565" width="0.2414%" height="15" fill="rgb(235,190,38)" fg:x="84" fg:w="3"/><text x="7.0078%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9187%" y="549" width="0.0805%" height="15" fill="rgb(247,86,24)" fg:x="86" fg:w="1"/><text x="7.1687%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.9187%" y="533" width="0.0805%" height="15" fill="rgb(205,101,16)" fg:x="86" fg:w="1"/><text x="7.1687%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9187%" y="517" width="0.0805%" height="15" fill="rgb(246,168,33)" fg:x="86" fg:w="1"/><text x="7.1687%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.9992%" y="613" width="0.0805%" height="15" fill="rgb(231,114,1)" fg:x="87" fg:w="1"/><text x="7.2492%" y="623.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="6.9992%" y="597" width="0.0805%" height="15" fill="rgb(207,184,53)" fg:x="87" fg:w="1"/><text x="7.2492%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.9992%" y="581" width="0.0805%" height="15" fill="rgb(224,95,51)" fg:x="87" fg:w="1"/><text x="7.2492%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.9992%" y="565" width="0.0805%" height="15" fill="rgb(212,188,45)" fg:x="87" fg:w="1"/><text x="7.2492%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="6.9992%" y="549" width="0.0805%" height="15" fill="rgb(223,154,38)" fg:x="87" fg:w="1"/><text x="7.2492%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="6.9992%" y="533" width="0.0805%" height="15" fill="rgb(251,22,52)" fg:x="87" fg:w="1"/><text x="7.2492%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1601%" y="581" width="0.0805%" height="15" fill="rgb(229,209,22)" fg:x="89" fg:w="1"/><text x="7.4101%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2405%" y="501" width="0.0805%" height="15" fill="rgb(234,138,34)" fg:x="90" fg:w="1"/><text x="7.4905%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.2405%" y="485" width="0.0805%" height="15" fill="rgb(212,95,11)" fg:x="90" fg:w="1"/><text x="7.4905%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2405%" y="469" width="0.0805%" height="15" fill="rgb(240,179,47)" fg:x="90" fg:w="1"/><text x="7.4905%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="7.3210%" y="437" width="0.2414%" height="15" fill="rgb(240,163,11)" fg:x="91" fg:w="3"/><text x="7.5710%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.4014%" y="421" width="0.1609%" height="15" fill="rgb(236,37,12)" fg:x="92" fg:w="2"/><text x="7.6514%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="7.4014%" y="405" width="0.1609%" height="15" fill="rgb(232,164,16)" fg:x="92" fg:w="2"/><text x="7.6514%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="7.2405%" y="517" width="0.4023%" height="15" fill="rgb(244,205,15)" fg:x="90" fg:w="5"/><text x="7.4905%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="7.3210%" y="501" width="0.3218%" height="15" fill="rgb(223,117,47)" fg:x="91" fg:w="4"/><text x="7.5710%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.3210%" y="485" width="0.3218%" height="15" fill="rgb(244,107,35)" fg:x="91" fg:w="4"/><text x="7.5710%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="7.3210%" y="469" width="0.3218%" height="15" fill="rgb(205,140,8)" fg:x="91" fg:w="4"/><text x="7.5710%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="7.3210%" y="453" width="0.3218%" height="15" fill="rgb(228,84,46)" fg:x="91" fg:w="4"/><text x="7.5710%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="7.5623%" y="437" width="0.0805%" height="15" fill="rgb(254,188,9)" fg:x="94" fg:w="1"/><text x="7.8123%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.5623%" y="421" width="0.0805%" height="15" fill="rgb(206,112,54)" fg:x="94" fg:w="1"/><text x="7.8123%" y="431.50"></text></g><g><title>engine::session::Session::flush (24 samples, 1.93%)</title><rect x="5.7924%" y="725" width="1.9308%" height="15" fill="rgb(216,84,49)" fg:x="72" fg:w="24"/><text x="6.0424%" y="735.50">e..</text></g><g><title>engine::session::Session::save_changes (24 samples, 1.93%)</title><rect x="5.7924%" y="709" width="1.9308%" height="15" fill="rgb(214,194,35)" fg:x="72" fg:w="24"/><text x="6.0424%" y="719.50">e..</text></g><g><title>engine::session::state::State::close (24 samples, 1.93%)</title><rect x="5.7924%" y="693" width="1.9308%" height="15" fill="rgb(249,28,3)" fg:x="72" fg:w="24"/><text x="6.0424%" y="703.50">e..</text></g><g><title>engine::session::state::State::flush_entities (24 samples, 1.93%)</title><rect x="5.7924%" y="677" width="1.9308%" height="15" fill="rgb(222,56,52)" fg:x="72" fg:w="24"/><text x="6.0424%" y="687.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (22 samples, 1.77%)</title><rect x="5.9533%" y="661" width="1.7699%" height="15" fill="rgb(245,217,50)" fg:x="74" fg:w="22"/><text x="6.2033%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (22 samples, 1.77%)</title><rect x="5.9533%" y="645" width="1.7699%" height="15" fill="rgb(213,201,24)" fg:x="74" fg:w="22"/><text x="6.2033%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.72%)</title><rect x="6.9992%" y="629" width="0.7241%" height="15" fill="rgb(248,116,28)" fg:x="87" fg:w="9"/><text x="7.2492%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="7.0796%" y="613" width="0.6436%" height="15" fill="rgb(219,72,43)" fg:x="88" fg:w="8"/><text x="7.3296%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.64%)</title><rect x="7.0796%" y="597" width="0.6436%" height="15" fill="rgb(209,138,14)" fg:x="88" fg:w="8"/><text x="7.3296%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="7.2405%" y="581" width="0.4827%" height="15" fill="rgb(222,18,33)" fg:x="90" fg:w="6"/><text x="7.4905%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="7.2405%" y="565" width="0.4827%" height="15" fill="rgb(213,199,7)" fg:x="90" fg:w="6"/><text x="7.4905%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="7.2405%" y="549" width="0.4827%" height="15" fill="rgb(250,110,10)" fg:x="90" fg:w="6"/><text x="7.4905%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="7.2405%" y="533" width="0.4827%" height="15" fill="rgb(248,123,6)" fg:x="90" fg:w="6"/><text x="7.4905%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6428%" y="517" width="0.0805%" height="15" fill="rgb(206,91,31)" fg:x="95" fg:w="1"/><text x="7.8928%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7233%" y="581" width="0.0805%" height="15" fill="rgb(211,154,13)" fg:x="96" fg:w="1"/><text x="7.9733%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="7.7233%" y="693" width="0.1609%" height="15" fill="rgb(225,148,7)" fg:x="96" fg:w="2"/><text x="7.9733%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="7.7233%" y="677" width="0.1609%" height="15" fill="rgb(220,160,43)" fg:x="96" fg:w="2"/><text x="7.9733%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="7.7233%" y="661" width="0.1609%" height="15" fill="rgb(213,52,39)" fg:x="96" fg:w="2"/><text x="7.9733%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="7.7233%" y="645" width="0.1609%" height="15" fill="rgb(243,137,7)" fg:x="96" fg:w="2"/><text x="7.9733%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="7.7233%" y="629" width="0.1609%" height="15" fill="rgb(230,79,13)" fg:x="96" fg:w="2"/><text x="7.9733%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="7.7233%" y="613" width="0.1609%" height="15" fill="rgb(247,105,23)" fg:x="96" fg:w="2"/><text x="7.9733%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="7.7233%" y="597" width="0.1609%" height="15" fill="rgb(223,179,41)" fg:x="96" fg:w="2"/><text x="7.9733%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.8037%" y="581" width="0.0805%" height="15" fill="rgb(218,9,34)" fg:x="97" fg:w="1"/><text x="8.0537%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.8037%" y="565" width="0.0805%" height="15" fill="rgb(222,106,8)" fg:x="97" fg:w="1"/><text x="8.0537%" y="575.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8037%" y="549" width="0.0805%" height="15" fill="rgb(211,220,0)" fg:x="97" fg:w="1"/><text x="8.0537%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="7.8037%" y="533" width="0.0805%" height="15" fill="rgb(229,52,16)" fg:x="97" fg:w="1"/><text x="8.0537%" y="543.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="7.8037%" y="517" width="0.0805%" height="15" fill="rgb(212,155,18)" fg:x="97" fg:w="1"/><text x="8.0537%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="7.8037%" y="501" width="0.0805%" height="15" fill="rgb(242,21,14)" fg:x="97" fg:w="1"/><text x="8.0537%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="7.8037%" y="485" width="0.0805%" height="15" fill="rgb(222,19,48)" fg:x="97" fg:w="1"/><text x="8.0537%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="7.8037%" y="469" width="0.0805%" height="15" fill="rgb(232,45,27)" fg:x="97" fg:w="1"/><text x="8.0537%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.8037%" y="453" width="0.0805%" height="15" fill="rgb(249,103,42)" fg:x="97" fg:w="1"/><text x="8.0537%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="7.8037%" y="437" width="0.0805%" height="15" fill="rgb(246,81,33)" fg:x="97" fg:w="1"/><text x="8.0537%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="7.8037%" y="421" width="0.0805%" height="15" fill="rgb(252,33,42)" fg:x="97" fg:w="1"/><text x="8.0537%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="7.8037%" y="405" width="0.0805%" height="15" fill="rgb(209,212,41)" fg:x="97" fg:w="1"/><text x="8.0537%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="7.8037%" y="389" width="0.0805%" height="15" fill="rgb(207,154,6)" fg:x="97" fg:w="1"/><text x="8.0537%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8037%" y="373" width="0.0805%" height="15" fill="rgb(223,64,47)" fg:x="97" fg:w="1"/><text x="8.0537%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="7.7233%" y="709" width="0.2414%" height="15" fill="rgb(211,161,38)" fg:x="96" fg:w="3"/><text x="7.9733%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.8842%" y="693" width="0.0805%" height="15" fill="rgb(219,138,40)" fg:x="98" fg:w="1"/><text x="8.1342%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.8842%" y="677" width="0.0805%" height="15" fill="rgb(241,228,46)" fg:x="98" fg:w="1"/><text x="8.1342%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.8842%" y="661" width="0.0805%" height="15" fill="rgb(223,209,38)" fg:x="98" fg:w="1"/><text x="8.1342%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8842%" y="645" width="0.0805%" height="15" fill="rgb(236,164,45)" fg:x="98" fg:w="1"/><text x="8.1342%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.8842%" y="629" width="0.0805%" height="15" fill="rgb(231,15,5)" fg:x="98" fg:w="1"/><text x="8.1342%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8842%" y="613" width="0.0805%" height="15" fill="rgb(252,35,15)" fg:x="98" fg:w="1"/><text x="8.1342%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.8842%" y="597" width="0.0805%" height="15" fill="rgb(248,181,18)" fg:x="98" fg:w="1"/><text x="8.1342%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.8842%" y="581" width="0.0805%" height="15" fill="rgb(233,39,42)" fg:x="98" fg:w="1"/><text x="8.1342%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.8842%" y="565" width="0.0805%" height="15" fill="rgb(238,110,33)" fg:x="98" fg:w="1"/><text x="8.1342%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.8842%" y="549" width="0.0805%" height="15" fill="rgb(233,195,10)" fg:x="98" fg:w="1"/><text x="8.1342%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8842%" y="533" width="0.0805%" height="15" fill="rgb(254,105,3)" fg:x="98" fg:w="1"/><text x="8.1342%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.8842%" y="517" width="0.0805%" height="15" fill="rgb(221,225,9)" fg:x="98" fg:w="1"/><text x="8.1342%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.8842%" y="501" width="0.0805%" height="15" fill="rgb(224,227,45)" fg:x="98" fg:w="1"/><text x="8.1342%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.8842%" y="485" width="0.0805%" height="15" fill="rgb(229,198,43)" fg:x="98" fg:w="1"/><text x="8.1342%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.8842%" y="469" width="0.0805%" height="15" fill="rgb(206,209,35)" fg:x="98" fg:w="1"/><text x="8.1342%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.8842%" y="453" width="0.0805%" height="15" fill="rgb(245,195,53)" fg:x="98" fg:w="1"/><text x="8.1342%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.8842%" y="437" width="0.0805%" height="15" fill="rgb(240,92,26)" fg:x="98" fg:w="1"/><text x="8.1342%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="7.9646%" y="645" width="0.0805%" height="15" fill="rgb(207,40,23)" fg:x="99" fg:w="1"/><text x="8.2146%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0451%" y="613" width="0.0805%" height="15" fill="rgb(223,111,35)" fg:x="100" fg:w="1"/><text x="8.2951%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0451%" y="597" width="0.0805%" height="15" fill="rgb(229,147,28)" fg:x="100" fg:w="1"/><text x="8.2951%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0451%" y="581" width="0.0805%" height="15" fill="rgb(211,29,28)" fg:x="100" fg:w="1"/><text x="8.2951%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0451%" y="565" width="0.0805%" height="15" fill="rgb(228,72,33)" fg:x="100" fg:w="1"/><text x="8.2951%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.0451%" y="549" width="0.0805%" height="15" fill="rgb(205,214,31)" fg:x="100" fg:w="1"/><text x="8.2951%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.0451%" y="533" width="0.0805%" height="15" fill="rgb(224,111,15)" fg:x="100" fg:w="1"/><text x="8.2951%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.0451%" y="517" width="0.0805%" height="15" fill="rgb(253,21,26)" fg:x="100" fg:w="1"/><text x="8.2951%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0451%" y="501" width="0.0805%" height="15" fill="rgb(245,139,43)" fg:x="100" fg:w="1"/><text x="8.2951%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0451%" y="485" width="0.0805%" height="15" fill="rgb(252,170,7)" fg:x="100" fg:w="1"/><text x="8.2951%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.0451%" y="469" width="0.0805%" height="15" fill="rgb(231,118,14)" fg:x="100" fg:w="1"/><text x="8.2951%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.0451%" y="453" width="0.0805%" height="15" fill="rgb(238,83,0)" fg:x="100" fg:w="1"/><text x="8.2951%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.0451%" y="437" width="0.0805%" height="15" fill="rgb(221,39,39)" fg:x="100" fg:w="1"/><text x="8.2951%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.0451%" y="421" width="0.0805%" height="15" fill="rgb(222,119,46)" fg:x="100" fg:w="1"/><text x="8.2951%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0451%" y="405" width="0.0805%" height="15" fill="rgb(222,165,49)" fg:x="100" fg:w="1"/><text x="8.2951%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="7.9646%" y="661" width="0.2414%" height="15" fill="rgb(219,113,52)" fg:x="99" fg:w="3"/><text x="8.2146%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.0451%" y="645" width="0.1609%" height="15" fill="rgb(214,7,15)" fg:x="100" fg:w="2"/><text x="8.2951%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.0451%" y="629" width="0.1609%" height="15" fill="rgb(235,32,4)" fg:x="100" fg:w="2"/><text x="8.2951%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1255%" y="613" width="0.0805%" height="15" fill="rgb(238,90,54)" fg:x="101" fg:w="1"/><text x="8.3755%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="8.2060%" y="645" width="0.0805%" height="15" fill="rgb(213,208,19)" fg:x="102" fg:w="1"/><text x="8.4560%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.2060%" y="629" width="0.0805%" height="15" fill="rgb(233,156,4)" fg:x="102" fg:w="1"/><text x="8.4560%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2864%" y="597" width="0.0805%" height="15" fill="rgb(207,194,5)" fg:x="103" fg:w="1"/><text x="8.5364%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2864%" y="581" width="0.0805%" height="15" fill="rgb(206,111,30)" fg:x="103" fg:w="1"/><text x="8.5364%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2864%" y="565" width="0.0805%" height="15" fill="rgb(243,70,54)" fg:x="103" fg:w="1"/><text x="8.5364%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2864%" y="549" width="0.0805%" height="15" fill="rgb(242,28,8)" fg:x="103" fg:w="1"/><text x="8.5364%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.2864%" y="533" width="0.0805%" height="15" fill="rgb(219,106,18)" fg:x="103" fg:w="1"/><text x="8.5364%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.2864%" y="517" width="0.0805%" height="15" fill="rgb(244,222,10)" fg:x="103" fg:w="1"/><text x="8.5364%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.2864%" y="501" width="0.0805%" height="15" fill="rgb(236,179,52)" fg:x="103" fg:w="1"/><text x="8.5364%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.2864%" y="485" width="0.0805%" height="15" fill="rgb(213,23,39)" fg:x="103" fg:w="1"/><text x="8.5364%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2864%" y="469" width="0.0805%" height="15" fill="rgb(238,48,10)" fg:x="103" fg:w="1"/><text x="8.5364%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.2864%" y="453" width="0.0805%" height="15" fill="rgb(251,196,23)" fg:x="103" fg:w="1"/><text x="8.5364%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.2864%" y="437" width="0.0805%" height="15" fill="rgb(250,152,24)" fg:x="103" fg:w="1"/><text x="8.5364%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.2864%" y="421" width="0.0805%" height="15" fill="rgb(209,150,17)" fg:x="103" fg:w="1"/><text x="8.5364%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.2864%" y="405" width="0.0805%" height="15" fill="rgb(234,202,34)" fg:x="103" fg:w="1"/><text x="8.5364%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.2864%" y="389" width="0.0805%" height="15" fill="rgb(253,148,53)" fg:x="103" fg:w="1"/><text x="8.5364%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2864%" y="373" width="0.0805%" height="15" fill="rgb(218,129,16)" fg:x="103" fg:w="1"/><text x="8.5364%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.2864%" y="613" width="0.1609%" height="15" fill="rgb(216,85,19)" fg:x="103" fg:w="2"/><text x="8.5364%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.3669%" y="597" width="0.0805%" height="15" fill="rgb(235,228,7)" fg:x="104" fg:w="1"/><text x="8.6169%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.3669%" y="581" width="0.0805%" height="15" fill="rgb(245,175,0)" fg:x="104" fg:w="1"/><text x="8.6169%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.3669%" y="565" width="0.0805%" height="15" fill="rgb(208,168,36)" fg:x="104" fg:w="1"/><text x="8.6169%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.3669%" y="549" width="0.0805%" height="15" fill="rgb(246,171,24)" fg:x="104" fg:w="1"/><text x="8.6169%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.3669%" y="533" width="0.0805%" height="15" fill="rgb(215,142,24)" fg:x="104" fg:w="1"/><text x="8.6169%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.3669%" y="517" width="0.0805%" height="15" fill="rgb(250,187,7)" fg:x="104" fg:w="1"/><text x="8.6169%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.3669%" y="501" width="0.0805%" height="15" fill="rgb(228,66,33)" fg:x="104" fg:w="1"/><text x="8.6169%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.3669%" y="485" width="0.0805%" height="15" fill="rgb(234,215,21)" fg:x="104" fg:w="1"/><text x="8.6169%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.3669%" y="469" width="0.0805%" height="15" fill="rgb(222,191,20)" fg:x="104" fg:w="1"/><text x="8.6169%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.3669%" y="453" width="0.0805%" height="15" fill="rgb(245,79,54)" fg:x="104" fg:w="1"/><text x="8.6169%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.3669%" y="437" width="0.0805%" height="15" fill="rgb(240,10,37)" fg:x="104" fg:w="1"/><text x="8.6169%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3669%" y="421" width="0.0805%" height="15" fill="rgb(214,192,32)" fg:x="104" fg:w="1"/><text x="8.6169%" y="431.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (7 samples, 0.56%)</title><rect x="7.9646%" y="693" width="0.5632%" height="15" fill="rgb(209,36,54)" fg:x="99" fg:w="7"/><text x="8.2146%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (7 samples, 0.56%)</title><rect x="7.9646%" y="677" width="0.5632%" height="15" fill="rgb(220,10,11)" fg:x="99" fg:w="7"/><text x="8.2146%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="8.2060%" y="661" width="0.3218%" height="15" fill="rgb(221,106,17)" fg:x="102" fg:w="4"/><text x="8.4560%" y="671.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="8.2864%" y="645" width="0.2414%" height="15" fill="rgb(251,142,44)" fg:x="103" fg:w="3"/><text x="8.5364%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="8.2864%" y="629" width="0.2414%" height="15" fill="rgb(238,13,15)" fg:x="103" fg:w="3"/><text x="8.5364%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4473%" y="613" width="0.0805%" height="15" fill="rgb(208,107,27)" fg:x="105" fg:w="1"/><text x="8.6973%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4473%" y="597" width="0.0805%" height="15" fill="rgb(205,136,37)" fg:x="105" fg:w="1"/><text x="8.6973%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.4473%" y="581" width="0.0805%" height="15" fill="rgb(250,205,27)" fg:x="105" fg:w="1"/><text x="8.6973%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.4473%" y="565" width="0.0805%" height="15" fill="rgb(210,80,43)" fg:x="105" fg:w="1"/><text x="8.6973%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4473%" y="549" width="0.0805%" height="15" fill="rgb(247,160,36)" fg:x="105" fg:w="1"/><text x="8.6973%" y="559.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="8.5278%" y="693" width="0.0805%" height="15" fill="rgb(234,13,49)" fg:x="106" fg:w="1"/><text x="8.7778%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.5278%" y="677" width="0.0805%" height="15" fill="rgb(234,122,0)" fg:x="106" fg:w="1"/><text x="8.7778%" y="687.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5278%" y="661" width="0.0805%" height="15" fill="rgb(207,146,38)" fg:x="106" fg:w="1"/><text x="8.7778%" y="671.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.6082%" y="693" width="0.0805%" height="15" fill="rgb(207,177,25)" fg:x="107" fg:w="1"/><text x="8.8582%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="8.6082%" y="677" width="0.0805%" height="15" fill="rgb(211,178,42)" fg:x="107" fg:w="1"/><text x="8.8582%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.6082%" y="661" width="0.0805%" height="15" fill="rgb(230,69,54)" fg:x="107" fg:w="1"/><text x="8.8582%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.6082%" y="645" width="0.0805%" height="15" fill="rgb(214,135,41)" fg:x="107" fg:w="1"/><text x="8.8582%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="8.6887%" y="453" width="0.1609%" height="15" fill="rgb(237,67,25)" fg:x="108" fg:w="2"/><text x="8.9387%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="8.6887%" y="437" width="0.1609%" height="15" fill="rgb(222,189,50)" fg:x="108" fg:w="2"/><text x="8.9387%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="8.6887%" y="421" width="0.1609%" height="15" fill="rgb(245,148,34)" fg:x="108" fg:w="2"/><text x="8.9387%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="8.6887%" y="405" width="0.1609%" height="15" fill="rgb(222,29,6)" fg:x="108" fg:w="2"/><text x="8.9387%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="8.6887%" y="389" width="0.1609%" height="15" fill="rgb(221,189,43)" fg:x="108" fg:w="2"/><text x="8.9387%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="8.6887%" y="373" width="0.1609%" height="15" fill="rgb(207,36,27)" fg:x="108" fg:w="2"/><text x="8.9387%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="8.6887%" y="357" width="0.1609%" height="15" fill="rgb(217,90,24)" fg:x="108" fg:w="2"/><text x="8.9387%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="8.6887%" y="597" width="0.2414%" height="15" fill="rgb(224,66,35)" fg:x="108" fg:w="3"/><text x="8.9387%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="8.6887%" y="581" width="0.2414%" height="15" fill="rgb(221,13,50)" fg:x="108" fg:w="3"/><text x="8.9387%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="8.6887%" y="565" width="0.2414%" height="15" fill="rgb(236,68,49)" fg:x="108" fg:w="3"/><text x="8.9387%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="8.6887%" y="549" width="0.2414%" height="15" fill="rgb(229,146,28)" fg:x="108" fg:w="3"/><text x="8.9387%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="8.6887%" y="533" width="0.2414%" height="15" fill="rgb(225,31,38)" fg:x="108" fg:w="3"/><text x="8.9387%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="8.6887%" y="517" width="0.2414%" height="15" fill="rgb(250,208,3)" fg:x="108" fg:w="3"/><text x="8.9387%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="8.6887%" y="501" width="0.2414%" height="15" fill="rgb(246,54,23)" fg:x="108" fg:w="3"/><text x="8.9387%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="8.6887%" y="485" width="0.2414%" height="15" fill="rgb(243,76,11)" fg:x="108" fg:w="3"/><text x="8.9387%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="8.6887%" y="469" width="0.2414%" height="15" fill="rgb(245,21,50)" fg:x="108" fg:w="3"/><text x="8.9387%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.8496%" y="453" width="0.0805%" height="15" fill="rgb(228,9,43)" fg:x="110" fg:w="1"/><text x="9.0996%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.8496%" y="437" width="0.0805%" height="15" fill="rgb(208,100,47)" fg:x="110" fg:w="1"/><text x="9.0996%" y="447.50"></text></g><g><title>plugins_core::build::Build::holding (16 samples, 1.29%)</title><rect x="7.7233%" y="725" width="1.2872%" height="15" fill="rgb(232,26,8)" fg:x="96" fg:w="16"/><text x="7.9733%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (13 samples, 1.05%)</title><rect x="7.9646%" y="709" width="1.0459%" height="15" fill="rgb(216,166,38)" fg:x="99" fg:w="13"/><text x="8.2146%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="8.6887%" y="693" width="0.3218%" height="15" fill="rgb(251,202,51)" fg:x="108" fg:w="4"/><text x="8.9387%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (4 samples, 0.32%)</title><rect x="8.6887%" y="677" width="0.3218%" height="15" fill="rgb(254,216,34)" fg:x="108" fg:w="4"/><text x="8.9387%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="8.6887%" y="661" width="0.3218%" height="15" fill="rgb(251,32,27)" fg:x="108" fg:w="4"/><text x="8.9387%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="8.6887%" y="645" width="0.3218%" height="15" fill="rgb(208,127,28)" fg:x="108" fg:w="4"/><text x="8.9387%" y="655.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="8.6887%" y="629" width="0.3218%" height="15" fill="rgb(224,137,22)" fg:x="108" fg:w="4"/><text x="8.9387%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="8.6887%" y="613" width="0.3218%" height="15" fill="rgb(254,70,32)" fg:x="108" fg:w="4"/><text x="8.9387%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9300%" y="597" width="0.0805%" height="15" fill="rgb(229,75,37)" fg:x="111" fg:w="1"/><text x="9.1800%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9300%" y="581" width="0.0805%" height="15" fill="rgb(252,64,23)" fg:x="111" fg:w="1"/><text x="9.1800%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9300%" y="565" width="0.0805%" height="15" fill="rgb(232,162,48)" fg:x="111" fg:w="1"/><text x="9.1800%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9300%" y="549" width="0.0805%" height="15" fill="rgb(246,160,12)" fg:x="111" fg:w="1"/><text x="9.1800%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9300%" y="533" width="0.0805%" height="15" fill="rgb(247,166,0)" fg:x="111" fg:w="1"/><text x="9.1800%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9300%" y="517" width="0.0805%" height="15" fill="rgb(249,219,21)" fg:x="111" fg:w="1"/><text x="9.1800%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="9.0105%" y="725" width="0.0805%" height="15" fill="rgb(205,209,3)" fg:x="112" fg:w="1"/><text x="9.2605%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="9.0105%" y="709" width="0.0805%" height="15" fill="rgb(243,44,1)" fg:x="112" fg:w="1"/><text x="9.2605%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.0105%" y="693" width="0.0805%" height="15" fill="rgb(206,159,16)" fg:x="112" fg:w="1"/><text x="9.2605%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.0105%" y="677" width="0.0805%" height="15" fill="rgb(244,77,30)" fg:x="112" fg:w="1"/><text x="9.2605%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.0105%" y="661" width="0.0805%" height="15" fill="rgb(218,69,12)" fg:x="112" fg:w="1"/><text x="9.2605%" y="671.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.0909%" y="725" width="0.0805%" height="15" fill="rgb(212,87,7)" fg:x="113" fg:w="1"/><text x="9.3409%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.0909%" y="709" width="0.0805%" height="15" fill="rgb(245,114,25)" fg:x="113" fg:w="1"/><text x="9.3409%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="9.1714%" y="709" width="0.0805%" height="15" fill="rgb(210,61,42)" fg:x="114" fg:w="1"/><text x="9.4214%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="9.1714%" y="693" width="0.0805%" height="15" fill="rgb(211,52,33)" fg:x="114" fg:w="1"/><text x="9.4214%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="9.1714%" y="677" width="0.0805%" height="15" fill="rgb(234,58,33)" fg:x="114" fg:w="1"/><text x="9.4214%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="9.1714%" y="661" width="0.0805%" height="15" fill="rgb(220,115,36)" fg:x="114" fg:w="1"/><text x="9.4214%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="645" width="0.0805%" height="15" fill="rgb(243,153,54)" fg:x="114" fg:w="1"/><text x="9.4214%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.1714%" y="629" width="0.0805%" height="15" fill="rgb(251,47,18)" fg:x="114" fg:w="1"/><text x="9.4214%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="613" width="0.0805%" height="15" fill="rgb(242,102,42)" fg:x="114" fg:w="1"/><text x="9.4214%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="597" width="0.0805%" height="15" fill="rgb(234,31,38)" fg:x="114" fg:w="1"/><text x="9.4214%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="581" width="0.0805%" height="15" fill="rgb(221,117,51)" fg:x="114" fg:w="1"/><text x="9.4214%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.1714%" y="565" width="0.0805%" height="15" fill="rgb(212,20,18)" fg:x="114" fg:w="1"/><text x="9.4214%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="549" width="0.0805%" height="15" fill="rgb(245,133,36)" fg:x="114" fg:w="1"/><text x="9.4214%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="533" width="0.0805%" height="15" fill="rgb(212,6,19)" fg:x="114" fg:w="1"/><text x="9.4214%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="517" width="0.0805%" height="15" fill="rgb(218,1,36)" fg:x="114" fg:w="1"/><text x="9.4214%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.1714%" y="501" width="0.0805%" height="15" fill="rgb(246,84,54)" fg:x="114" fg:w="1"/><text x="9.4214%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.1714%" y="485" width="0.0805%" height="15" fill="rgb(242,110,6)" fg:x="114" fg:w="1"/><text x="9.4214%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1714%" y="469" width="0.0805%" height="15" fill="rgb(214,47,5)" fg:x="114" fg:w="1"/><text x="9.4214%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.1714%" y="453" width="0.0805%" height="15" fill="rgb(218,159,25)" fg:x="114" fg:w="1"/><text x="9.4214%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.1714%" y="437" width="0.0805%" height="15" fill="rgb(215,211,28)" fg:x="114" fg:w="1"/><text x="9.4214%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.1714%" y="421" width="0.0805%" height="15" fill="rgb(238,59,32)" fg:x="114" fg:w="1"/><text x="9.4214%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.1714%" y="405" width="0.0805%" height="15" fill="rgb(226,82,3)" fg:x="114" fg:w="1"/><text x="9.4214%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.1714%" y="389" width="0.0805%" height="15" fill="rgb(240,164,32)" fg:x="114" fg:w="1"/><text x="9.4214%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.1714%" y="373" width="0.0805%" height="15" fill="rgb(232,46,7)" fg:x="114" fg:w="1"/><text x="9.4214%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.1714%" y="357" width="0.0805%" height="15" fill="rgb(229,129,53)" fg:x="114" fg:w="1"/><text x="9.4214%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.1714%" y="341" width="0.0805%" height="15" fill="rgb(234,188,29)" fg:x="114" fg:w="1"/><text x="9.4214%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="9.1714%" y="325" width="0.0805%" height="15" fill="rgb(246,141,4)" fg:x="114" fg:w="1"/><text x="9.4214%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.1714%" y="309" width="0.0805%" height="15" fill="rgb(229,23,39)" fg:x="114" fg:w="1"/><text x="9.4214%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="9.1714%" y="293" width="0.0805%" height="15" fill="rgb(206,12,3)" fg:x="114" fg:w="1"/><text x="9.4214%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="9.1714%" y="277" width="0.0805%" height="15" fill="rgb(252,226,20)" fg:x="114" fg:w="1"/><text x="9.4214%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="9.1714%" y="261" width="0.0805%" height="15" fill="rgb(216,123,35)" fg:x="114" fg:w="1"/><text x="9.4214%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.1714%" y="245" width="0.0805%" height="15" fill="rgb(212,68,40)" fg:x="114" fg:w="1"/><text x="9.4214%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2518%" y="613" width="0.0805%" height="15" fill="rgb(254,125,32)" fg:x="115" fg:w="1"/><text x="9.5018%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2518%" y="597" width="0.0805%" height="15" fill="rgb(253,97,22)" fg:x="115" fg:w="1"/><text x="9.5018%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2518%" y="581" width="0.0805%" height="15" fill="rgb(241,101,14)" fg:x="115" fg:w="1"/><text x="9.5018%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.2518%" y="565" width="0.0805%" height="15" fill="rgb(238,103,29)" fg:x="115" fg:w="1"/><text x="9.5018%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.2518%" y="549" width="0.0805%" height="15" fill="rgb(233,195,47)" fg:x="115" fg:w="1"/><text x="9.5018%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="9.2518%" y="661" width="0.1609%" height="15" fill="rgb(246,218,30)" fg:x="115" fg:w="2"/><text x="9.5018%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.2518%" y="645" width="0.1609%" height="15" fill="rgb(219,145,47)" fg:x="115" fg:w="2"/><text x="9.5018%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="9.2518%" y="629" width="0.1609%" height="15" fill="rgb(243,12,26)" fg:x="115" fg:w="2"/><text x="9.5018%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3323%" y="613" width="0.0805%" height="15" fill="rgb(214,87,16)" fg:x="116" fg:w="1"/><text x="9.5823%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.3323%" y="597" width="0.0805%" height="15" fill="rgb(208,99,42)" fg:x="116" fg:w="1"/><text x="9.5823%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3323%" y="581" width="0.0805%" height="15" fill="rgb(253,99,2)" fg:x="116" fg:w="1"/><text x="9.5823%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.3323%" y="565" width="0.0805%" height="15" fill="rgb(220,168,23)" fg:x="116" fg:w="1"/><text x="9.5823%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.3323%" y="549" width="0.0805%" height="15" fill="rgb(242,38,24)" fg:x="116" fg:w="1"/><text x="9.5823%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3323%" y="533" width="0.0805%" height="15" fill="rgb(225,182,9)" fg:x="116" fg:w="1"/><text x="9.5823%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="9.2518%" y="693" width="0.2414%" height="15" fill="rgb(243,178,37)" fg:x="115" fg:w="3"/><text x="9.5018%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="9.2518%" y="677" width="0.2414%" height="15" fill="rgb(232,139,19)" fg:x="115" fg:w="3"/><text x="9.5018%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="9.4127%" y="661" width="0.0805%" height="15" fill="rgb(225,201,24)" fg:x="117" fg:w="1"/><text x="9.6627%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.4127%" y="645" width="0.0805%" height="15" fill="rgb(221,47,46)" fg:x="117" fg:w="1"/><text x="9.6627%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.4127%" y="629" width="0.0805%" height="15" fill="rgb(249,23,13)" fg:x="117" fg:w="1"/><text x="9.6627%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4127%" y="613" width="0.0805%" height="15" fill="rgb(219,9,5)" fg:x="117" fg:w="1"/><text x="9.6627%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4127%" y="597" width="0.0805%" height="15" fill="rgb(254,171,16)" fg:x="117" fg:w="1"/><text x="9.6627%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4127%" y="581" width="0.0805%" height="15" fill="rgb(230,171,20)" fg:x="117" fg:w="1"/><text x="9.6627%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.4127%" y="565" width="0.0805%" height="15" fill="rgb(210,71,41)" fg:x="117" fg:w="1"/><text x="9.6627%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.4932%" y="693" width="0.0805%" height="15" fill="rgb(206,173,20)" fg:x="118" fg:w="1"/><text x="9.7432%" y="703.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="9.4932%" y="677" width="0.0805%" height="15" fill="rgb(233,88,34)" fg:x="118" fg:w="1"/><text x="9.7432%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.4932%" y="661" width="0.0805%" height="15" fill="rgb(223,209,46)" fg:x="118" fg:w="1"/><text x="9.7432%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4932%" y="645" width="0.0805%" height="15" fill="rgb(250,43,18)" fg:x="118" fg:w="1"/><text x="9.7432%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5736%" y="597" width="0.0805%" height="15" fill="rgb(208,13,10)" fg:x="119" fg:w="1"/><text x="9.8236%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5736%" y="581" width="0.0805%" height="15" fill="rgb(212,200,36)" fg:x="119" fg:w="1"/><text x="9.8236%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5736%" y="565" width="0.0805%" height="15" fill="rgb(225,90,30)" fg:x="119" fg:w="1"/><text x="9.8236%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.5736%" y="549" width="0.0805%" height="15" fill="rgb(236,182,39)" fg:x="119" fg:w="1"/><text x="9.8236%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.5736%" y="533" width="0.0805%" height="15" fill="rgb(212,144,35)" fg:x="119" fg:w="1"/><text x="9.8236%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.5736%" y="517" width="0.0805%" height="15" fill="rgb(228,63,44)" fg:x="119" fg:w="1"/><text x="9.8236%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.5736%" y="501" width="0.0805%" height="15" fill="rgb(228,109,6)" fg:x="119" fg:w="1"/><text x="9.8236%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.5736%" y="485" width="0.0805%" height="15" fill="rgb(238,117,24)" fg:x="119" fg:w="1"/><text x="9.8236%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.5736%" y="469" width="0.0805%" height="15" fill="rgb(242,26,26)" fg:x="119" fg:w="1"/><text x="9.8236%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.5736%" y="453" width="0.0805%" height="15" fill="rgb(221,92,48)" fg:x="119" fg:w="1"/><text x="9.8236%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.5736%" y="437" width="0.0805%" height="15" fill="rgb(209,209,32)" fg:x="119" fg:w="1"/><text x="9.8236%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="9.5736%" y="421" width="0.0805%" height="15" fill="rgb(221,70,22)" fg:x="119" fg:w="1"/><text x="9.8236%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="9.5736%" y="405" width="0.0805%" height="15" fill="rgb(248,145,5)" fg:x="119" fg:w="1"/><text x="9.8236%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="9.5736%" y="389" width="0.0805%" height="15" fill="rgb(226,116,26)" fg:x="119" fg:w="1"/><text x="9.8236%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="9.5736%" y="373" width="0.0805%" height="15" fill="rgb(244,5,17)" fg:x="119" fg:w="1"/><text x="9.8236%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5736%" y="357" width="0.0805%" height="15" fill="rgb(252,159,33)" fg:x="119" fg:w="1"/><text x="9.8236%" y="367.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (60 samples, 4.83%)</title><rect x="4.9075%" y="741" width="4.8270%" height="15" fill="rgb(206,71,0)" fg:x="61" fg:w="60"/><text x="5.1575%" y="751.50">plugin..</text></g><g><title>plugins_core::build::Build::occupying (7 samples, 0.56%)</title><rect x="9.1714%" y="725" width="0.5632%" height="15" fill="rgb(233,118,54)" fg:x="114" fg:w="7"/><text x="9.4214%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (6 samples, 0.48%)</title><rect x="9.2518%" y="709" width="0.4827%" height="15" fill="rgb(234,83,48)" fg:x="115" fg:w="6"/><text x="9.5018%" y="719.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (2 samples, 0.16%)</title><rect x="9.5736%" y="693" width="0.1609%" height="15" fill="rgb(228,3,54)" fg:x="119" fg:w="2"/><text x="9.8236%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="9.5736%" y="677" width="0.1609%" height="15" fill="rgb(226,155,13)" fg:x="119" fg:w="2"/><text x="9.8236%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="9.5736%" y="661" width="0.1609%" height="15" fill="rgb(241,28,37)" fg:x="119" fg:w="2"/><text x="9.8236%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="9.5736%" y="645" width="0.1609%" height="15" fill="rgb(233,93,10)" fg:x="119" fg:w="2"/><text x="9.8236%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.5736%" y="629" width="0.1609%" height="15" fill="rgb(225,113,19)" fg:x="119" fg:w="2"/><text x="9.8236%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="9.5736%" y="613" width="0.1609%" height="15" fill="rgb(241,2,18)" fg:x="119" fg:w="2"/><text x="9.8236%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6541%" y="597" width="0.0805%" height="15" fill="rgb(228,207,21)" fg:x="120" fg:w="1"/><text x="9.9041%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6541%" y="581" width="0.0805%" height="15" fill="rgb(213,211,35)" fg:x="120" fg:w="1"/><text x="9.9041%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6541%" y="565" width="0.0805%" height="15" fill="rgb(209,83,10)" fg:x="120" fg:w="1"/><text x="9.9041%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6541%" y="549" width="0.0805%" height="15" fill="rgb(209,164,1)" fg:x="120" fg:w="1"/><text x="9.9041%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.6541%" y="533" width="0.0805%" height="15" fill="rgb(213,184,43)" fg:x="120" fg:w="1"/><text x="9.9041%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.6541%" y="517" width="0.0805%" height="15" fill="rgb(231,61,34)" fg:x="120" fg:w="1"/><text x="9.9041%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.6541%" y="501" width="0.0805%" height="15" fill="rgb(235,75,3)" fg:x="120" fg:w="1"/><text x="9.9041%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.7345%" y="581" width="0.0805%" height="15" fill="rgb(220,106,47)" fg:x="121" fg:w="1"/><text x="9.9845%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="9.7345%" y="693" width="0.1609%" height="15" fill="rgb(210,196,33)" fg:x="121" fg:w="2"/><text x="9.9845%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="9.7345%" y="677" width="0.1609%" height="15" fill="rgb(229,154,42)" fg:x="121" fg:w="2"/><text x="9.9845%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="9.7345%" y="661" width="0.1609%" height="15" fill="rgb(228,114,26)" fg:x="121" fg:w="2"/><text x="9.9845%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="9.7345%" y="645" width="0.1609%" height="15" fill="rgb(208,144,1)" fg:x="121" fg:w="2"/><text x="9.9845%" y="655.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.7345%" y="629" width="0.1609%" height="15" fill="rgb(239,112,37)" fg:x="121" fg:w="2"/><text x="9.9845%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="9.7345%" y="613" width="0.1609%" height="15" fill="rgb(210,96,50)" fg:x="121" fg:w="2"/><text x="9.9845%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="9.7345%" y="597" width="0.1609%" height="15" fill="rgb(222,178,2)" fg:x="121" fg:w="2"/><text x="9.9845%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.8150%" y="581" width="0.0805%" height="15" fill="rgb(226,74,18)" fg:x="122" fg:w="1"/><text x="10.0650%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.8150%" y="565" width="0.0805%" height="15" fill="rgb(225,67,54)" fg:x="122" fg:w="1"/><text x="10.0650%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.8150%" y="549" width="0.0805%" height="15" fill="rgb(251,92,32)" fg:x="122" fg:w="1"/><text x="10.0650%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.8150%" y="533" width="0.0805%" height="15" fill="rgb(228,149,22)" fg:x="122" fg:w="1"/><text x="10.0650%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.8150%" y="517" width="0.0805%" height="15" fill="rgb(243,54,13)" fg:x="122" fg:w="1"/><text x="10.0650%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.8150%" y="501" width="0.0805%" height="15" fill="rgb(243,180,28)" fg:x="122" fg:w="1"/><text x="10.0650%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.8150%" y="485" width="0.0805%" height="15" fill="rgb(208,167,24)" fg:x="122" fg:w="1"/><text x="10.0650%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8150%" y="469" width="0.0805%" height="15" fill="rgb(245,73,45)" fg:x="122" fg:w="1"/><text x="10.0650%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8150%" y="453" width="0.0805%" height="15" fill="rgb(237,203,48)" fg:x="122" fg:w="1"/><text x="10.0650%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="9.8150%" y="437" width="0.0805%" height="15" fill="rgb(211,197,16)" fg:x="122" fg:w="1"/><text x="10.0650%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="9.8150%" y="421" width="0.0805%" height="15" fill="rgb(243,99,51)" fg:x="122" fg:w="1"/><text x="10.0650%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="9.8150%" y="405" width="0.0805%" height="15" fill="rgb(215,123,29)" fg:x="122" fg:w="1"/><text x="10.0650%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="9.8150%" y="389" width="0.0805%" height="15" fill="rgb(239,186,37)" fg:x="122" fg:w="1"/><text x="10.0650%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.8150%" y="373" width="0.0805%" height="15" fill="rgb(252,136,39)" fg:x="122" fg:w="1"/><text x="10.0650%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="9.8150%" y="357" width="0.0805%" height="15" fill="rgb(223,213,32)" fg:x="122" fg:w="1"/><text x="10.0650%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.8150%" y="341" width="0.0805%" height="15" fill="rgb(233,115,5)" fg:x="122" fg:w="1"/><text x="10.0650%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="9.8150%" y="325" width="0.0805%" height="15" fill="rgb(207,226,44)" fg:x="122" fg:w="1"/><text x="10.0650%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8150%" y="309" width="0.0805%" height="15" fill="rgb(208,126,0)" fg:x="122" fg:w="1"/><text x="10.0650%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="9.8150%" y="293" width="0.0805%" height="15" fill="rgb(244,66,21)" fg:x="122" fg:w="1"/><text x="10.0650%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="9.8150%" y="277" width="0.0805%" height="15" fill="rgb(222,97,12)" fg:x="122" fg:w="1"/><text x="10.0650%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="9.8150%" y="261" width="0.0805%" height="15" fill="rgb(219,213,19)" fg:x="122" fg:w="1"/><text x="10.0650%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.8150%" y="245" width="0.0805%" height="15" fill="rgb(252,169,30)" fg:x="122" fg:w="1"/><text x="10.0650%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.8954%" y="693" width="0.0805%" height="15" fill="rgb(206,32,51)" fg:x="123" fg:w="1"/><text x="10.1454%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.8954%" y="677" width="0.0805%" height="15" fill="rgb(250,172,42)" fg:x="123" fg:w="1"/><text x="10.1454%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.8954%" y="661" width="0.0805%" height="15" fill="rgb(209,34,43)" fg:x="123" fg:w="1"/><text x="10.1454%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.8954%" y="645" width="0.0805%" height="15" fill="rgb(223,11,35)" fg:x="123" fg:w="1"/><text x="10.1454%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8954%" y="629" width="0.0805%" height="15" fill="rgb(251,219,26)" fg:x="123" fg:w="1"/><text x="10.1454%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.8954%" y="613" width="0.0805%" height="15" fill="rgb(231,119,3)" fg:x="123" fg:w="1"/><text x="10.1454%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8954%" y="597" width="0.0805%" height="15" fill="rgb(216,97,11)" fg:x="123" fg:w="1"/><text x="10.1454%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="9.8954%" y="581" width="0.0805%" height="15" fill="rgb(223,59,9)" fg:x="123" fg:w="1"/><text x="10.1454%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8954%" y="565" width="0.0805%" height="15" fill="rgb(233,93,31)" fg:x="123" fg:w="1"/><text x="10.1454%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.8954%" y="549" width="0.0805%" height="15" fill="rgb(239,81,33)" fg:x="123" fg:w="1"/><text x="10.1454%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.8954%" y="533" width="0.0805%" height="15" fill="rgb(213,120,34)" fg:x="123" fg:w="1"/><text x="10.1454%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.8954%" y="517" width="0.0805%" height="15" fill="rgb(243,49,53)" fg:x="123" fg:w="1"/><text x="10.1454%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8954%" y="501" width="0.0805%" height="15" fill="rgb(247,216,33)" fg:x="123" fg:w="1"/><text x="10.1454%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="9.9759%" y="693" width="0.0805%" height="15" fill="rgb(226,26,14)" fg:x="124" fg:w="1"/><text x="10.2259%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.9759%" y="677" width="0.0805%" height="15" fill="rgb(215,49,53)" fg:x="124" fg:w="1"/><text x="10.2259%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9759%" y="661" width="0.0805%" height="15" fill="rgb(245,162,40)" fg:x="124" fg:w="1"/><text x="10.2259%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9759%" y="645" width="0.0805%" height="15" fill="rgb(229,68,17)" fg:x="124" fg:w="1"/><text x="10.2259%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.9759%" y="629" width="0.0805%" height="15" fill="rgb(213,182,10)" fg:x="124" fg:w="1"/><text x="10.2259%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.0563%" y="645" width="0.0805%" height="15" fill="rgb(245,125,30)" fg:x="125" fg:w="1"/><text x="10.3063%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.0563%" y="629" width="0.0805%" height="15" fill="rgb(232,202,2)" fg:x="125" fg:w="1"/><text x="10.3063%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0563%" y="613" width="0.0805%" height="15" fill="rgb(237,140,51)" fg:x="125" fg:w="1"/><text x="10.3063%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0563%" y="597" width="0.0805%" height="15" fill="rgb(236,157,25)" fg:x="125" fg:w="1"/><text x="10.3063%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0563%" y="581" width="0.0805%" height="15" fill="rgb(219,209,0)" fg:x="125" fg:w="1"/><text x="10.3063%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0563%" y="565" width="0.0805%" height="15" fill="rgb(240,116,54)" fg:x="125" fg:w="1"/><text x="10.3063%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.0563%" y="549" width="0.0805%" height="15" fill="rgb(216,10,36)" fg:x="125" fg:w="1"/><text x="10.3063%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (6 samples, 0.48%)</title><rect x="9.7345%" y="741" width="0.4827%" height="15" fill="rgb(222,72,44)" fg:x="121" fg:w="6"/><text x="9.9845%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (6 samples, 0.48%)</title><rect x="9.7345%" y="725" width="0.4827%" height="15" fill="rgb(232,159,9)" fg:x="121" fg:w="6"/><text x="9.9845%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="9.7345%" y="709" width="0.4827%" height="15" fill="rgb(210,39,32)" fg:x="121" fg:w="6"/><text x="9.9845%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="10.0563%" y="693" width="0.1609%" height="15" fill="rgb(216,194,45)" fg:x="125" fg:w="2"/><text x="10.3063%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="10.0563%" y="677" width="0.1609%" height="15" fill="rgb(218,18,35)" fg:x="125" fg:w="2"/><text x="10.3063%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="10.0563%" y="661" width="0.1609%" height="15" fill="rgb(207,83,51)" fg:x="125" fg:w="2"/><text x="10.3063%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.1368%" y="645" width="0.0805%" height="15" fill="rgb(225,63,43)" fg:x="126" fg:w="1"/><text x="10.3868%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="10.1368%" y="629" width="0.0805%" height="15" fill="rgb(207,57,36)" fg:x="126" fg:w="1"/><text x="10.3868%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1368%" y="613" width="0.0805%" height="15" fill="rgb(216,99,33)" fg:x="126" fg:w="1"/><text x="10.3868%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1368%" y="597" width="0.0805%" height="15" fill="rgb(225,42,16)" fg:x="126" fg:w="1"/><text x="10.3868%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1368%" y="581" width="0.0805%" height="15" fill="rgb(220,201,45)" fg:x="126" fg:w="1"/><text x="10.3868%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1368%" y="565" width="0.0805%" height="15" fill="rgb(225,33,4)" fg:x="126" fg:w="1"/><text x="10.3868%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="10.1368%" y="549" width="0.0805%" height="15" fill="rgb(224,33,50)" fg:x="126" fg:w="1"/><text x="10.3868%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1368%" y="533" width="0.0805%" height="15" fill="rgb(246,198,51)" fg:x="126" fg:w="1"/><text x="10.3868%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1368%" y="517" width="0.0805%" height="15" fill="rgb(205,22,4)" fg:x="126" fg:w="1"/><text x="10.3868%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="10.1368%" y="501" width="0.0805%" height="15" fill="rgb(206,3,8)" fg:x="126" fg:w="1"/><text x="10.3868%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="10.2172%" y="709" width="0.0805%" height="15" fill="rgb(251,23,15)" fg:x="127" fg:w="1"/><text x="10.4672%" y="719.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="10.2172%" y="693" width="0.0805%" height="15" fill="rgb(252,88,28)" fg:x="127" fg:w="1"/><text x="10.4672%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.2172%" y="677" width="0.0805%" height="15" fill="rgb(212,127,14)" fg:x="127" fg:w="1"/><text x="10.4672%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.2172%" y="661" width="0.0805%" height="15" fill="rgb(247,145,37)" fg:x="127" fg:w="1"/><text x="10.4672%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.2172%" y="645" width="0.0805%" height="15" fill="rgb(209,117,53)" fg:x="127" fg:w="1"/><text x="10.4672%" y="655.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.2172%" y="629" width="0.0805%" height="15" fill="rgb(212,90,42)" fg:x="127" fg:w="1"/><text x="10.4672%" y="639.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.2172%" y="613" width="0.0805%" height="15" fill="rgb(218,164,37)" fg:x="127" fg:w="1"/><text x="10.4672%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.2172%" y="597" width="0.0805%" height="15" fill="rgb(246,65,34)" fg:x="127" fg:w="1"/><text x="10.4672%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="10.2172%" y="725" width="0.1609%" height="15" fill="rgb(231,100,33)" fg:x="127" fg:w="2"/><text x="10.4672%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="10.2977%" y="709" width="0.0805%" height="15" fill="rgb(228,126,14)" fg:x="128" fg:w="1"/><text x="10.5477%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="10.2977%" y="693" width="0.0805%" height="15" fill="rgb(215,173,21)" fg:x="128" fg:w="1"/><text x="10.5477%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="10.2977%" y="677" width="0.0805%" height="15" fill="rgb(210,6,40)" fg:x="128" fg:w="1"/><text x="10.5477%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.2977%" y="661" width="0.0805%" height="15" fill="rgb(212,48,18)" fg:x="128" fg:w="1"/><text x="10.5477%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="10.2977%" y="645" width="0.0805%" height="15" fill="rgb(230,214,11)" fg:x="128" fg:w="1"/><text x="10.5477%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2977%" y="629" width="0.0805%" height="15" fill="rgb(254,105,39)" fg:x="128" fg:w="1"/><text x="10.5477%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2977%" y="613" width="0.0805%" height="15" fill="rgb(245,158,5)" fg:x="128" fg:w="1"/><text x="10.5477%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="10.2977%" y="597" width="0.0805%" height="15" fill="rgb(249,208,11)" fg:x="128" fg:w="1"/><text x="10.5477%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2977%" y="581" width="0.0805%" height="15" fill="rgb(210,39,28)" fg:x="128" fg:w="1"/><text x="10.5477%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="10.2977%" y="565" width="0.0805%" height="15" fill="rgb(211,56,53)" fg:x="128" fg:w="1"/><text x="10.5477%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.2977%" y="549" width="0.0805%" height="15" fill="rgb(226,201,30)" fg:x="128" fg:w="1"/><text x="10.5477%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="10.2977%" y="533" width="0.0805%" height="15" fill="rgb(239,101,34)" fg:x="128" fg:w="1"/><text x="10.5477%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.2977%" y="517" width="0.0805%" height="15" fill="rgb(226,209,5)" fg:x="128" fg:w="1"/><text x="10.5477%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="10.3781%" y="725" width="0.0805%" height="15" fill="rgb(250,105,47)" fg:x="129" fg:w="1"/><text x="10.6281%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="10.3781%" y="709" width="0.0805%" height="15" fill="rgb(230,72,3)" fg:x="129" fg:w="1"/><text x="10.6281%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="10.3781%" y="693" width="0.0805%" height="15" fill="rgb(232,218,39)" fg:x="129" fg:w="1"/><text x="10.6281%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="10.3781%" y="677" width="0.0805%" height="15" fill="rgb(248,166,6)" fg:x="129" fg:w="1"/><text x="10.6281%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3781%" y="661" width="0.0805%" height="15" fill="rgb(247,89,20)" fg:x="129" fg:w="1"/><text x="10.6281%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="10.4586%" y="709" width="0.0805%" height="15" fill="rgb(248,130,54)" fg:x="130" fg:w="1"/><text x="10.7086%" y="719.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="10.4586%" y="693" width="0.0805%" height="15" fill="rgb(234,196,4)" fg:x="130" fg:w="1"/><text x="10.7086%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="10.4586%" y="677" width="0.0805%" height="15" fill="rgb(250,143,31)" fg:x="130" fg:w="1"/><text x="10.7086%" y="687.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (114 samples, 9.17%)</title><rect x="1.4481%" y="757" width="9.1714%" height="15" fill="rgb(211,110,34)" fg:x="18" fg:w="114"/><text x="1.6981%" y="767.50">&lt;tests::Holdi..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.40%)</title><rect x="10.2172%" y="741" width="0.4023%" height="15" fill="rgb(215,124,48)" fg:x="127" fg:w="5"/><text x="10.4672%" y="751.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="10.4586%" y="725" width="0.1609%" height="15" fill="rgb(216,46,13)" fg:x="130" fg:w="2"/><text x="10.7086%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="10.5390%" y="709" width="0.0805%" height="15" fill="rgb(205,184,25)" fg:x="131" fg:w="1"/><text x="10.7890%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="10.6195%" y="741" width="0.0805%" height="15" fill="rgb(228,1,10)" fg:x="132" fg:w="1"/><text x="10.8695%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="10.6999%" y="741" width="0.0805%" height="15" fill="rgb(213,116,27)" fg:x="133" fg:w="1"/><text x="10.9499%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="10.6999%" y="725" width="0.0805%" height="15" fill="rgb(241,95,50)" fg:x="133" fg:w="1"/><text x="10.9499%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.6999%" y="709" width="0.0805%" height="15" fill="rgb(238,48,32)" fg:x="133" fg:w="1"/><text x="10.9499%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.6999%" y="693" width="0.0805%" height="15" fill="rgb(235,113,49)" fg:x="133" fg:w="1"/><text x="10.9499%" y="703.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="10.6999%" y="677" width="0.0805%" height="15" fill="rgb(205,127,43)" fg:x="133" fg:w="1"/><text x="10.9499%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="10.6999%" y="661" width="0.0805%" height="15" fill="rgb(250,162,2)" fg:x="133" fg:w="1"/><text x="10.9499%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="10.6999%" y="645" width="0.0805%" height="15" fill="rgb(220,13,41)" fg:x="133" fg:w="1"/><text x="10.9499%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="10.6999%" y="629" width="0.0805%" height="15" fill="rgb(249,221,25)" fg:x="133" fg:w="1"/><text x="10.9499%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="10.6999%" y="613" width="0.0805%" height="15" fill="rgb(215,208,19)" fg:x="133" fg:w="1"/><text x="10.9499%" y="623.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="10.6999%" y="597" width="0.0805%" height="15" fill="rgb(236,175,2)" fg:x="133" fg:w="1"/><text x="10.9499%" y="607.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="10.6999%" y="581" width="0.0805%" height="15" fill="rgb(241,52,2)" fg:x="133" fg:w="1"/><text x="10.9499%" y="591.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6999%" y="565" width="0.0805%" height="15" fill="rgb(248,140,14)" fg:x="133" fg:w="1"/><text x="10.9499%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.6999%" y="549" width="0.0805%" height="15" fill="rgb(253,22,42)" fg:x="133" fg:w="1"/><text x="10.9499%" y="559.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="10.6999%" y="533" width="0.0805%" height="15" fill="rgb(234,61,47)" fg:x="133" fg:w="1"/><text x="10.9499%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="10.6999%" y="517" width="0.0805%" height="15" fill="rgb(208,226,15)" fg:x="133" fg:w="1"/><text x="10.9499%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="10.6999%" y="501" width="0.0805%" height="15" fill="rgb(217,221,4)" fg:x="133" fg:w="1"/><text x="10.9499%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="10.6999%" y="485" width="0.0805%" height="15" fill="rgb(212,174,34)" fg:x="133" fg:w="1"/><text x="10.9499%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.08%)</title><rect x="10.6999%" y="469" width="0.0805%" height="15" fill="rgb(253,83,4)" fg:x="133" fg:w="1"/><text x="10.9499%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="10.7804%" y="709" width="0.0805%" height="15" fill="rgb(250,195,49)" fg:x="134" fg:w="1"/><text x="11.0304%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="10.9413%" y="661" width="0.1609%" height="15" fill="rgb(241,192,25)" fg:x="136" fg:w="2"/><text x="11.1913%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.9413%" y="645" width="0.1609%" height="15" fill="rgb(208,124,10)" fg:x="136" fg:w="2"/><text x="11.1913%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.9413%" y="629" width="0.1609%" height="15" fill="rgb(222,33,0)" fg:x="136" fg:w="2"/><text x="11.1913%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.0217%" y="613" width="0.0805%" height="15" fill="rgb(234,209,28)" fg:x="137" fg:w="1"/><text x="11.2717%" y="623.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="11.0217%" y="597" width="0.0805%" height="15" fill="rgb(224,11,23)" fg:x="137" fg:w="1"/><text x="11.2717%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.1022%" y="645" width="0.1609%" height="15" fill="rgb(232,99,1)" fg:x="138" fg:w="2"/><text x="11.3522%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.1022%" y="629" width="0.1609%" height="15" fill="rgb(237,95,45)" fg:x="138" fg:w="2"/><text x="11.3522%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.2631%" y="629" width="0.0805%" height="15" fill="rgb(208,109,11)" fg:x="140" fg:w="1"/><text x="11.5131%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="11.2631%" y="613" width="0.0805%" height="15" fill="rgb(216,190,48)" fg:x="140" fg:w="1"/><text x="11.5131%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.2631%" y="597" width="0.0805%" height="15" fill="rgb(251,171,36)" fg:x="140" fg:w="1"/><text x="11.5131%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.3435%" y="613" width="0.0805%" height="15" fill="rgb(230,62,22)" fg:x="141" fg:w="1"/><text x="11.5935%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.3435%" y="597" width="0.0805%" height="15" fill="rgb(225,114,35)" fg:x="141" fg:w="1"/><text x="11.5935%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.3435%" y="581" width="0.0805%" height="15" fill="rgb(215,118,42)" fg:x="141" fg:w="1"/><text x="11.5935%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3435%" y="565" width="0.0805%" height="15" fill="rgb(243,119,21)" fg:x="141" fg:w="1"/><text x="11.5935%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.4240%" y="597" width="0.0805%" height="15" fill="rgb(252,177,53)" fg:x="142" fg:w="1"/><text x="11.6740%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.5044%" y="597" width="0.1609%" height="15" fill="rgb(237,209,29)" fg:x="143" fg:w="2"/><text x="11.7544%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.5044%" y="581" width="0.1609%" height="15" fill="rgb(212,65,23)" fg:x="143" fg:w="2"/><text x="11.7544%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.5849%" y="565" width="0.0805%" height="15" fill="rgb(230,222,46)" fg:x="144" fg:w="1"/><text x="11.8349%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.88%)</title><rect x="10.9413%" y="677" width="0.8850%" height="15" fill="rgb(215,135,32)" fg:x="136" fg:w="11"/><text x="11.1913%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.72%)</title><rect x="11.1022%" y="661" width="0.7241%" height="15" fill="rgb(246,101,22)" fg:x="138" fg:w="9"/><text x="11.3522%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="11.2631%" y="645" width="0.5632%" height="15" fill="rgb(206,107,13)" fg:x="140" fg:w="7"/><text x="11.5131%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="11.3435%" y="629" width="0.4827%" height="15" fill="rgb(250,100,44)" fg:x="141" fg:w="6"/><text x="11.5935%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="11.4240%" y="613" width="0.4023%" height="15" fill="rgb(231,147,38)" fg:x="142" fg:w="5"/><text x="11.6740%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="11.6653%" y="597" width="0.1609%" height="15" fill="rgb(229,8,40)" fg:x="145" fg:w="2"/><text x="11.9153%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="11.6653%" y="581" width="0.1609%" height="15" fill="rgb(221,135,30)" fg:x="145" fg:w="2"/><text x="11.9153%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="11.7458%" y="565" width="0.0805%" height="15" fill="rgb(249,193,18)" fg:x="146" fg:w="1"/><text x="11.9958%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.7458%" y="549" width="0.0805%" height="15" fill="rgb(209,133,39)" fg:x="146" fg:w="1"/><text x="11.9958%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.9871%" y="597" width="0.0805%" height="15" fill="rgb(232,100,14)" fg:x="149" fg:w="1"/><text x="12.2371%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="11.8262%" y="677" width="0.3218%" height="15" fill="rgb(224,185,1)" fg:x="147" fg:w="4"/><text x="12.0762%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="11.8262%" y="661" width="0.3218%" height="15" fill="rgb(223,139,8)" fg:x="147" fg:w="4"/><text x="12.0762%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.9067%" y="645" width="0.2414%" height="15" fill="rgb(232,213,38)" fg:x="148" fg:w="3"/><text x="12.1567%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="11.9067%" y="629" width="0.2414%" height="15" fill="rgb(207,94,22)" fg:x="148" fg:w="3"/><text x="12.1567%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="11.9871%" y="613" width="0.1609%" height="15" fill="rgb(219,183,54)" fg:x="149" fg:w="2"/><text x="12.2371%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0676%" y="597" width="0.0805%" height="15" fill="rgb(216,185,54)" fg:x="150" fg:w="1"/><text x="12.3176%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.0676%" y="581" width="0.0805%" height="15" fill="rgb(254,217,39)" fg:x="150" fg:w="1"/><text x="12.3176%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.0676%" y="565" width="0.0805%" height="15" fill="rgb(240,178,23)" fg:x="150" fg:w="1"/><text x="12.3176%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0676%" y="549" width="0.0805%" height="15" fill="rgb(218,11,47)" fg:x="150" fg:w="1"/><text x="12.3176%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.1480%" y="613" width="0.0805%" height="15" fill="rgb(218,51,51)" fg:x="151" fg:w="1"/><text x="12.3980%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.1480%" y="645" width="0.1609%" height="15" fill="rgb(238,126,27)" fg:x="151" fg:w="2"/><text x="12.3980%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="12.1480%" y="629" width="0.1609%" height="15" fill="rgb(249,202,22)" fg:x="151" fg:w="2"/><text x="12.3980%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.2285%" y="613" width="0.0805%" height="15" fill="rgb(254,195,49)" fg:x="152" fg:w="1"/><text x="12.4785%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.2285%" y="597" width="0.0805%" height="15" fill="rgb(208,123,14)" fg:x="152" fg:w="1"/><text x="12.4785%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.2285%" y="581" width="0.0805%" height="15" fill="rgb(224,200,8)" fg:x="152" fg:w="1"/><text x="12.4785%" y="591.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="12.3894%" y="581" width="0.0805%" height="15" fill="rgb(217,61,36)" fg:x="154" fg:w="1"/><text x="12.6394%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.3894%" y="565" width="0.0805%" height="15" fill="rgb(206,35,45)" fg:x="154" fg:w="1"/><text x="12.6394%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="12.3089%" y="629" width="0.2414%" height="15" fill="rgb(217,65,33)" fg:x="153" fg:w="3"/><text x="12.5589%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="12.3089%" y="613" width="0.2414%" height="15" fill="rgb(222,158,48)" fg:x="153" fg:w="3"/><text x="12.5589%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="12.3894%" y="597" width="0.1609%" height="15" fill="rgb(254,2,54)" fg:x="154" fg:w="2"/><text x="12.6394%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.4698%" y="581" width="0.0805%" height="15" fill="rgb(250,143,38)" fg:x="155" fg:w="1"/><text x="12.7198%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.4698%" y="565" width="0.0805%" height="15" fill="rgb(248,25,0)" fg:x="155" fg:w="1"/><text x="12.7198%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.4698%" y="549" width="0.0805%" height="15" fill="rgb(206,152,27)" fg:x="155" fg:w="1"/><text x="12.7198%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="12.4698%" y="533" width="0.0805%" height="15" fill="rgb(240,77,30)" fg:x="155" fg:w="1"/><text x="12.7198%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.48%)</title><rect x="12.1480%" y="661" width="0.4827%" height="15" fill="rgb(231,5,3)" fg:x="151" fg:w="6"/><text x="12.3980%" y="671.50"></text></g><g><title>treediff::diff::diff (4 samples, 0.32%)</title><rect x="12.3089%" y="645" width="0.3218%" height="15" fill="rgb(207,226,32)" fg:x="153" fg:w="4"/><text x="12.5589%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.5503%" y="629" width="0.0805%" height="15" fill="rgb(222,207,47)" fg:x="156" fg:w="1"/><text x="12.8003%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.6307%" y="629" width="0.1609%" height="15" fill="rgb(229,115,45)" fg:x="157" fg:w="2"/><text x="12.8807%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7916%" y="597" width="0.0805%" height="15" fill="rgb(224,191,6)" fg:x="159" fg:w="1"/><text x="13.0416%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="12.7916%" y="629" width="0.1609%" height="15" fill="rgb(230,227,24)" fg:x="159" fg:w="2"/><text x="13.0416%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="12.7916%" y="613" width="0.1609%" height="15" fill="rgb(228,80,19)" fg:x="159" fg:w="2"/><text x="13.0416%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8721%" y="597" width="0.0805%" height="15" fill="rgb(247,229,0)" fg:x="160" fg:w="1"/><text x="13.1221%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1939%" y="533" width="0.0805%" height="15" fill="rgb(237,194,15)" fg:x="164" fg:w="1"/><text x="13.4439%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1939%" y="517" width="0.0805%" height="15" fill="rgb(219,203,20)" fg:x="164" fg:w="1"/><text x="13.4439%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.1939%" y="501" width="0.0805%" height="15" fill="rgb(234,128,8)" fg:x="164" fg:w="1"/><text x="13.4439%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="13.0330%" y="581" width="0.3218%" height="15" fill="rgb(248,202,8)" fg:x="162" fg:w="4"/><text x="13.2830%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.0330%" y="565" width="0.3218%" height="15" fill="rgb(206,104,37)" fg:x="162" fg:w="4"/><text x="13.2830%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.1134%" y="549" width="0.2414%" height="15" fill="rgb(223,8,27)" fg:x="163" fg:w="3"/><text x="13.3634%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2743%" y="533" width="0.0805%" height="15" fill="rgb(216,217,28)" fg:x="165" fg:w="1"/><text x="13.5243%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.2743%" y="517" width="0.0805%" height="15" fill="rgb(249,199,1)" fg:x="165" fg:w="1"/><text x="13.5243%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.4352%" y="565" width="0.0805%" height="15" fill="rgb(240,85,17)" fg:x="167" fg:w="1"/><text x="13.6852%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6766%" y="453" width="0.0805%" height="15" fill="rgb(206,108,45)" fg:x="170" fg:w="1"/><text x="13.9266%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6766%" y="437" width="0.0805%" height="15" fill="rgb(245,210,41)" fg:x="170" fg:w="1"/><text x="13.9266%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6766%" y="421" width="0.0805%" height="15" fill="rgb(206,13,37)" fg:x="170" fg:w="1"/><text x="13.9266%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="13.5157%" y="565" width="0.3218%" height="15" fill="rgb(250,61,18)" fg:x="168" fg:w="4"/><text x="13.7657%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.5157%" y="549" width="0.3218%" height="15" fill="rgb(235,172,48)" fg:x="168" fg:w="4"/><text x="13.7657%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="13.5157%" y="533" width="0.3218%" height="15" fill="rgb(249,201,17)" fg:x="168" fg:w="4"/><text x="13.7657%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="13.5157%" y="517" width="0.3218%" height="15" fill="rgb(219,208,6)" fg:x="168" fg:w="4"/><text x="13.7657%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="13.5961%" y="501" width="0.2414%" height="15" fill="rgb(248,31,23)" fg:x="169" fg:w="3"/><text x="13.8461%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="13.6766%" y="485" width="0.1609%" height="15" fill="rgb(245,15,42)" fg:x="170" fg:w="2"/><text x="13.9266%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="13.6766%" y="469" width="0.1609%" height="15" fill="rgb(222,217,39)" fg:x="170" fg:w="2"/><text x="13.9266%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="13.7570%" y="453" width="0.0805%" height="15" fill="rgb(210,219,27)" fg:x="171" fg:w="1"/><text x="14.0070%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="13.7570%" y="437" width="0.0805%" height="15" fill="rgb(252,166,36)" fg:x="171" fg:w="1"/><text x="14.0070%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (11 samples, 0.88%)</title><rect x="13.0330%" y="597" width="0.8850%" height="15" fill="rgb(245,132,34)" fg:x="162" fg:w="11"/><text x="13.2830%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="13.3548%" y="581" width="0.5632%" height="15" fill="rgb(236,54,3)" fg:x="166" fg:w="7"/><text x="13.6048%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.8375%" y="565" width="0.0805%" height="15" fill="rgb(241,173,43)" fg:x="172" fg:w="1"/><text x="14.0875%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.05%)</title><rect x="12.9525%" y="613" width="1.0459%" height="15" fill="rgb(215,190,9)" fg:x="161" fg:w="13"/><text x="13.2025%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="13.9179%" y="597" width="0.0805%" height="15" fill="rgb(242,101,16)" fg:x="173" fg:w="1"/><text x="14.1679%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.9179%" y="581" width="0.0805%" height="15" fill="rgb(223,190,21)" fg:x="173" fg:w="1"/><text x="14.1679%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (19 samples, 1.53%)</title><rect x="12.6307%" y="661" width="1.5286%" height="15" fill="rgb(215,228,25)" fg:x="157" fg:w="19"/><text x="12.8807%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (19 samples, 1.53%)</title><rect x="12.6307%" y="645" width="1.5286%" height="15" fill="rgb(225,36,22)" fg:x="157" fg:w="19"/><text x="12.8807%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.21%)</title><rect x="12.9525%" y="629" width="1.2068%" height="15" fill="rgb(251,106,46)" fg:x="161" fg:w="15"/><text x="13.2025%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="13.9984%" y="613" width="0.1609%" height="15" fill="rgb(208,90,1)" fg:x="174" fg:w="2"/><text x="14.2484%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.1593%" y="517" width="0.0805%" height="15" fill="rgb(243,10,4)" fg:x="176" fg:w="1"/><text x="14.4093%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.1593%" y="501" width="0.0805%" height="15" fill="rgb(212,137,27)" fg:x="176" fg:w="1"/><text x="14.4093%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.1593%" y="485" width="0.0805%" height="15" fill="rgb(231,220,49)" fg:x="176" fg:w="1"/><text x="14.4093%" y="495.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="14.1593%" y="469" width="0.0805%" height="15" fill="rgb(237,96,20)" fg:x="176" fg:w="1"/><text x="14.4093%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="14.1593%" y="565" width="0.1609%" height="15" fill="rgb(239,229,30)" fg:x="176" fg:w="2"/><text x="14.4093%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="14.1593%" y="549" width="0.1609%" height="15" fill="rgb(219,65,33)" fg:x="176" fg:w="2"/><text x="14.4093%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="14.1593%" y="533" width="0.1609%" height="15" fill="rgb(243,134,7)" fg:x="176" fg:w="2"/><text x="14.4093%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.2397%" y="517" width="0.0805%" height="15" fill="rgb(216,177,54)" fg:x="177" fg:w="1"/><text x="14.4897%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.2397%" y="501" width="0.0805%" height="15" fill="rgb(211,160,20)" fg:x="177" fg:w="1"/><text x="14.4897%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.2397%" y="485" width="0.0805%" height="15" fill="rgb(239,85,39)" fg:x="177" fg:w="1"/><text x="14.4897%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.2397%" y="469" width="0.0805%" height="15" fill="rgb(232,125,22)" fg:x="177" fg:w="1"/><text x="14.4897%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.2397%" y="453" width="0.0805%" height="15" fill="rgb(244,57,34)" fg:x="177" fg:w="1"/><text x="14.4897%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="14.2397%" y="437" width="0.0805%" height="15" fill="rgb(214,203,32)" fg:x="177" fg:w="1"/><text x="14.4897%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="14.1593%" y="597" width="0.2414%" height="15" fill="rgb(207,58,43)" fg:x="176" fg:w="3"/><text x="14.4093%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="14.1593%" y="581" width="0.2414%" height="15" fill="rgb(215,193,15)" fg:x="176" fg:w="3"/><text x="14.4093%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.3202%" y="565" width="0.0805%" height="15" fill="rgb(232,15,44)" fg:x="178" fg:w="1"/><text x="14.5702%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3202%" y="549" width="0.0805%" height="15" fill="rgb(212,3,48)" fg:x="178" fg:w="1"/><text x="14.5702%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="14.4006%" y="597" width="0.0805%" height="15" fill="rgb(218,128,7)" fg:x="179" fg:w="1"/><text x="14.6506%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="14.4006%" y="581" width="0.0805%" height="15" fill="rgb(226,216,39)" fg:x="179" fg:w="1"/><text x="14.6506%" y="591.50"></text></g><g><title>engine::session::state::State::close (48 samples, 3.86%)</title><rect x="10.7804%" y="741" width="3.8616%" height="15" fill="rgb(243,47,51)" fg:x="134" fg:w="48"/><text x="11.0304%" y="751.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (48 samples, 3.86%)</title><rect x="10.7804%" y="725" width="3.8616%" height="15" fill="rgb(241,183,40)" fg:x="134" fg:w="48"/><text x="11.0304%" y="735.50">engi..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (47 samples, 3.78%)</title><rect x="10.8608%" y="709" width="3.7812%" height="15" fill="rgb(231,217,32)" fg:x="135" fg:w="47"/><text x="11.1108%" y="719.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (46 samples, 3.70%)</title><rect x="10.9413%" y="693" width="3.7007%" height="15" fill="rgb(229,61,38)" fg:x="136" fg:w="46"/><text x="11.1913%" y="703.50">engi..</text></g><g><title>kernel::model::any_entity_changes (31 samples, 2.49%)</title><rect x="12.1480%" y="677" width="2.4940%" height="15" fill="rgb(225,210,5)" fg:x="151" fg:w="31"/><text x="12.3980%" y="687.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="14.1593%" y="661" width="0.4827%" height="15" fill="rgb(231,79,45)" fg:x="176" fg:w="6"/><text x="14.4093%" y="671.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="14.1593%" y="645" width="0.4827%" height="15" fill="rgb(224,100,7)" fg:x="176" fg:w="6"/><text x="14.4093%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="14.1593%" y="629" width="0.4827%" height="15" fill="rgb(241,198,18)" fg:x="176" fg:w="6"/><text x="14.4093%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="14.1593%" y="613" width="0.4827%" height="15" fill="rgb(252,97,53)" fg:x="176" fg:w="6"/><text x="14.4093%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.4811%" y="597" width="0.1609%" height="15" fill="rgb(220,88,7)" fg:x="180" fg:w="2"/><text x="14.7311%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="14.4811%" y="581" width="0.1609%" height="15" fill="rgb(213,176,14)" fg:x="180" fg:w="2"/><text x="14.7311%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.5615%" y="565" width="0.0805%" height="15" fill="rgb(246,73,7)" fg:x="181" fg:w="1"/><text x="14.8115%" y="575.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="14.6420%" y="741" width="0.0805%" height="15" fill="rgb(245,64,36)" fg:x="182" fg:w="1"/><text x="14.8920%" y="751.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::deliver (1 samples, 0.08%)</title><rect x="14.6420%" y="725" width="0.0805%" height="15" fill="rgb(245,80,10)" fg:x="182" fg:w="1"/><text x="14.8920%" y="735.50"></text></g><g><title>engine::session::Session::close (52 samples, 4.18%)</title><rect x="10.6195%" y="757" width="4.1834%" height="15" fill="rgb(232,107,50)" fg:x="132" fg:w="52"/><text x="10.8695%" y="767.50">engin..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="14.7224%" y="741" width="0.0805%" height="15" fill="rgb(253,3,0)" fg:x="183" fg:w="1"/><text x="14.9724%" y="751.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (2 samples, 0.16%)</title><rect x="14.8029%" y="581" width="0.1609%" height="15" fill="rgb(212,99,53)" fg:x="184" fg:w="2"/><text x="15.0529%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8833%" y="565" width="0.0805%" height="15" fill="rgb(249,111,54)" fg:x="185" fg:w="1"/><text x="15.1333%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.8833%" y="549" width="0.0805%" height="15" fill="rgb(249,55,30)" fg:x="185" fg:w="1"/><text x="15.1333%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.8833%" y="533" width="0.0805%" height="15" fill="rgb(237,47,42)" fg:x="185" fg:w="1"/><text x="15.1333%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.8833%" y="517" width="0.0805%" height="15" fill="rgb(211,20,18)" fg:x="185" fg:w="1"/><text x="15.1333%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.8833%" y="501" width="0.0805%" height="15" fill="rgb(231,203,46)" fg:x="185" fg:w="1"/><text x="15.1333%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.8833%" y="485" width="0.0805%" height="15" fill="rgb(237,142,3)" fg:x="185" fg:w="1"/><text x="15.1333%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.8833%" y="469" width="0.0805%" height="15" fill="rgb(241,107,1)" fg:x="185" fg:w="1"/><text x="15.1333%" y="479.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="14.9638%" y="549" width="0.0805%" height="15" fill="rgb(229,83,13)" fg:x="186" fg:w="1"/><text x="15.2138%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.9638%" y="533" width="0.0805%" height="15" fill="rgb(241,91,40)" fg:x="186" fg:w="1"/><text x="15.2138%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.9638%" y="517" width="0.0805%" height="15" fill="rgb(225,3,45)" fg:x="186" fg:w="1"/><text x="15.2138%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="14.9638%" y="501" width="0.0805%" height="15" fill="rgb(244,223,14)" fg:x="186" fg:w="1"/><text x="15.2138%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="14.9638%" y="485" width="0.0805%" height="15" fill="rgb(224,124,37)" fg:x="186" fg:w="1"/><text x="15.2138%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0442%" y="517" width="0.0805%" height="15" fill="rgb(251,171,30)" fg:x="187" fg:w="1"/><text x="15.2942%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="15.1247%" y="469" width="0.2414%" height="15" fill="rgb(236,46,54)" fg:x="188" fg:w="3"/><text x="15.3747%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="15.1247%" y="453" width="0.2414%" height="15" fill="rgb(245,213,5)" fg:x="188" fg:w="3"/><text x="15.3747%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="15.1247%" y="437" width="0.2414%" height="15" fill="rgb(230,144,27)" fg:x="188" fg:w="3"/><text x="15.3747%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="15.2051%" y="421" width="0.1609%" height="15" fill="rgb(220,86,6)" fg:x="189" fg:w="2"/><text x="15.4551%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="15.2051%" y="405" width="0.1609%" height="15" fill="rgb(240,20,13)" fg:x="189" fg:w="2"/><text x="15.4551%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="15.2051%" y="389" width="0.1609%" height="15" fill="rgb(217,89,34)" fg:x="189" fg:w="2"/><text x="15.4551%" y="399.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="15.2051%" y="373" width="0.1609%" height="15" fill="rgb(229,13,5)" fg:x="189" fg:w="2"/><text x="15.4551%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (2 samples, 0.16%)</title><rect x="15.2051%" y="357" width="0.1609%" height="15" fill="rgb(244,67,35)" fg:x="189" fg:w="2"/><text x="15.4551%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.2051%" y="341" width="0.1609%" height="15" fill="rgb(221,40,2)" fg:x="189" fg:w="2"/><text x="15.4551%" y="351.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="15.3660%" y="421" width="0.0805%" height="15" fill="rgb(237,157,21)" fg:x="191" fg:w="1"/><text x="15.6160%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="15.3660%" y="405" width="0.0805%" height="15" fill="rgb(222,94,11)" fg:x="191" fg:w="1"/><text x="15.6160%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.3660%" y="389" width="0.0805%" height="15" fill="rgb(249,113,6)" fg:x="191" fg:w="1"/><text x="15.6160%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="15.3660%" y="373" width="0.0805%" height="15" fill="rgb(238,137,36)" fg:x="191" fg:w="1"/><text x="15.6160%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (7 samples, 0.56%)</title><rect x="14.9638%" y="565" width="0.5632%" height="15" fill="rgb(210,102,26)" fg:x="186" fg:w="7"/><text x="15.2138%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="15.0442%" y="549" width="0.4827%" height="15" fill="rgb(218,30,30)" fg:x="187" fg:w="6"/><text x="15.2942%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="15.0442%" y="533" width="0.4827%" height="15" fill="rgb(214,67,26)" fg:x="187" fg:w="6"/><text x="15.2942%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="15.1247%" y="517" width="0.4023%" height="15" fill="rgb(251,9,53)" fg:x="188" fg:w="5"/><text x="15.3747%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="15.1247%" y="501" width="0.4023%" height="15" fill="rgb(228,204,25)" fg:x="188" fg:w="5"/><text x="15.3747%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="15.1247%" y="485" width="0.4023%" height="15" fill="rgb(207,153,8)" fg:x="188" fg:w="5"/><text x="15.3747%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.3660%" y="469" width="0.1609%" height="15" fill="rgb(242,9,16)" fg:x="191" fg:w="2"/><text x="15.6160%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="15.3660%" y="453" width="0.1609%" height="15" fill="rgb(217,211,10)" fg:x="191" fg:w="2"/><text x="15.6160%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="15.3660%" y="437" width="0.1609%" height="15" fill="rgb(219,228,52)" fg:x="191" fg:w="2"/><text x="15.6160%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.4465%" y="421" width="0.0805%" height="15" fill="rgb(231,92,29)" fg:x="192" fg:w="1"/><text x="15.6965%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (10 samples, 0.80%)</title><rect x="14.8029%" y="613" width="0.8045%" height="15" fill="rgb(232,8,23)" fg:x="184" fg:w="10"/><text x="15.0529%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (10 samples, 0.80%)</title><rect x="14.8029%" y="597" width="0.8045%" height="15" fill="rgb(216,211,34)" fg:x="184" fg:w="10"/><text x="15.0529%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.64%)</title><rect x="14.9638%" y="581" width="0.6436%" height="15" fill="rgb(236,151,0)" fg:x="186" fg:w="8"/><text x="15.2138%" y="591.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="15.5270%" y="565" width="0.0805%" height="15" fill="rgb(209,168,3)" fg:x="193" fg:w="1"/><text x="15.7770%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5270%" y="549" width="0.0805%" height="15" fill="rgb(208,129,28)" fg:x="193" fg:w="1"/><text x="15.7770%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.5270%" y="533" width="0.0805%" height="15" fill="rgb(229,78,22)" fg:x="193" fg:w="1"/><text x="15.7770%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.5270%" y="517" width="0.0805%" height="15" fill="rgb(228,187,13)" fg:x="193" fg:w="1"/><text x="15.7770%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.5270%" y="501" width="0.0805%" height="15" fill="rgb(240,119,24)" fg:x="193" fg:w="1"/><text x="15.7770%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.5270%" y="485" width="0.0805%" height="15" fill="rgb(209,194,42)" fg:x="193" fg:w="1"/><text x="15.7770%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.5270%" y="469" width="0.0805%" height="15" fill="rgb(247,200,46)" fg:x="193" fg:w="1"/><text x="15.7770%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.5270%" y="453" width="0.0805%" height="15" fill="rgb(218,76,16)" fg:x="193" fg:w="1"/><text x="15.7770%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.5270%" y="437" width="0.0805%" height="15" fill="rgb(225,21,48)" fg:x="193" fg:w="1"/><text x="15.7770%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.5270%" y="421" width="0.0805%" height="15" fill="rgb(239,223,50)" fg:x="193" fg:w="1"/><text x="15.7770%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.5270%" y="405" width="0.0805%" height="15" fill="rgb(244,45,21)" fg:x="193" fg:w="1"/><text x="15.7770%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.5270%" y="389" width="0.0805%" height="15" fill="rgb(232,33,43)" fg:x="193" fg:w="1"/><text x="15.7770%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5270%" y="373" width="0.0805%" height="15" fill="rgb(209,8,3)" fg:x="193" fg:w="1"/><text x="15.7770%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (1 samples, 0.08%)</title><rect x="15.6074%" y="581" width="0.0805%" height="15" fill="rgb(214,25,53)" fg:x="194" fg:w="1"/><text x="15.8574%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6879%" y="549" width="0.0805%" height="15" fill="rgb(254,186,54)" fg:x="195" fg:w="1"/><text x="15.9379%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (13 samples, 1.05%)</title><rect x="14.8029%" y="661" width="1.0459%" height="15" fill="rgb(208,174,49)" fg:x="184" fg:w="13"/><text x="15.0529%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (13 samples, 1.05%)</title><rect x="14.8029%" y="645" width="1.0459%" height="15" fill="rgb(233,191,51)" fg:x="184" fg:w="13"/><text x="15.0529%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (13 samples, 1.05%)</title><rect x="14.8029%" y="629" width="1.0459%" height="15" fill="rgb(222,134,10)" fg:x="184" fg:w="13"/><text x="15.0529%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.6074%" y="613" width="0.2414%" height="15" fill="rgb(230,226,20)" fg:x="194" fg:w="3"/><text x="15.8574%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.6074%" y="597" width="0.2414%" height="15" fill="rgb(251,111,25)" fg:x="194" fg:w="3"/><text x="15.8574%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.6879%" y="581" width="0.1609%" height="15" fill="rgb(224,40,46)" fg:x="195" fg:w="2"/><text x="15.9379%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.6879%" y="565" width="0.1609%" height="15" fill="rgb(236,108,47)" fg:x="195" fg:w="2"/><text x="15.9379%" y="575.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="15.7683%" y="549" width="0.0805%" height="15" fill="rgb(234,93,0)" fg:x="196" fg:w="1"/><text x="16.0183%" y="559.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="15.9292%" y="645" width="0.0805%" height="15" fill="rgb(224,213,32)" fg:x="198" fg:w="1"/><text x="16.1792%" y="655.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (16 samples, 1.29%)</title><rect x="14.8029%" y="677" width="1.2872%" height="15" fill="rgb(251,11,48)" fg:x="184" fg:w="16"/><text x="15.0529%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (3 samples, 0.24%)</title><rect x="15.8488%" y="661" width="0.2414%" height="15" fill="rgb(236,173,5)" fg:x="197" fg:w="3"/><text x="16.0988%" y="671.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (1 samples, 0.08%)</title><rect x="16.0097%" y="645" width="0.0805%" height="15" fill="rgb(230,95,12)" fg:x="199" fg:w="1"/><text x="16.2597%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0901%" y="677" width="0.0805%" height="15" fill="rgb(232,209,1)" fg:x="200" fg:w="1"/><text x="16.3401%" y="687.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="16.2510%" y="533" width="0.0805%" height="15" fill="rgb(232,6,1)" fg:x="202" fg:w="1"/><text x="16.5010%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="16.5728%" y="405" width="0.2414%" height="15" fill="rgb(210,224,50)" fg:x="206" fg:w="3"/><text x="16.8228%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.6533%" y="389" width="0.1609%" height="15" fill="rgb(228,127,35)" fg:x="207" fg:w="2"/><text x="16.9033%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.6533%" y="373" width="0.1609%" height="15" fill="rgb(245,102,45)" fg:x="207" fg:w="2"/><text x="16.9033%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="16.6533%" y="357" width="0.1609%" height="15" fill="rgb(214,1,49)" fg:x="207" fg:w="2"/><text x="16.9033%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="16.6533%" y="341" width="0.1609%" height="15" fill="rgb(226,163,40)" fg:x="207" fg:w="2"/><text x="16.9033%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="16.6533%" y="325" width="0.1609%" height="15" fill="rgb(239,212,28)" fg:x="207" fg:w="2"/><text x="16.9033%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="16.6533%" y="309" width="0.1609%" height="15" fill="rgb(220,20,13)" fg:x="207" fg:w="2"/><text x="16.9033%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="16.6533%" y="293" width="0.1609%" height="15" fill="rgb(210,164,35)" fg:x="207" fg:w="2"/><text x="16.9033%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="16.6533%" y="277" width="0.1609%" height="15" fill="rgb(248,109,41)" fg:x="207" fg:w="2"/><text x="16.9033%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="16.6533%" y="261" width="0.1609%" height="15" fill="rgb(238,23,50)" fg:x="207" fg:w="2"/><text x="16.9033%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="16.6533%" y="245" width="0.1609%" height="15" fill="rgb(211,48,49)" fg:x="207" fg:w="2"/><text x="16.9033%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="16.6533%" y="229" width="0.1609%" height="15" fill="rgb(223,36,21)" fg:x="207" fg:w="2"/><text x="16.9033%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.6533%" y="213" width="0.1609%" height="15" fill="rgb(207,123,46)" fg:x="207" fg:w="2"/><text x="16.9033%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="16.5728%" y="453" width="0.3218%" height="15" fill="rgb(240,218,32)" fg:x="206" fg:w="4"/><text x="16.8228%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="16.5728%" y="437" width="0.3218%" height="15" fill="rgb(252,5,43)" fg:x="206" fg:w="4"/><text x="16.8228%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="16.5728%" y="421" width="0.3218%" height="15" fill="rgb(252,84,19)" fg:x="206" fg:w="4"/><text x="16.8228%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8142%" y="405" width="0.0805%" height="15" fill="rgb(243,152,39)" fg:x="209" fg:w="1"/><text x="17.0642%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.8142%" y="389" width="0.0805%" height="15" fill="rgb(234,160,15)" fg:x="209" fg:w="1"/><text x="17.0642%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.8142%" y="373" width="0.0805%" height="15" fill="rgb(237,34,20)" fg:x="209" fg:w="1"/><text x="17.0642%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.8142%" y="357" width="0.0805%" height="15" fill="rgb(229,97,13)" fg:x="209" fg:w="1"/><text x="17.0642%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.8142%" y="341" width="0.0805%" height="15" fill="rgb(234,71,50)" fg:x="209" fg:w="1"/><text x="17.0642%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8142%" y="325" width="0.0805%" height="15" fill="rgb(253,155,4)" fg:x="209" fg:w="1"/><text x="17.0642%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.8142%" y="309" width="0.0805%" height="15" fill="rgb(222,185,37)" fg:x="209" fg:w="1"/><text x="17.0642%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.8142%" y="293" width="0.0805%" height="15" fill="rgb(251,177,13)" fg:x="209" fg:w="1"/><text x="17.0642%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.8142%" y="277" width="0.0805%" height="15" fill="rgb(250,179,40)" fg:x="209" fg:w="1"/><text x="17.0642%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.8142%" y="261" width="0.0805%" height="15" fill="rgb(242,44,2)" fg:x="209" fg:w="1"/><text x="17.0642%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.8142%" y="245" width="0.0805%" height="15" fill="rgb(216,177,13)" fg:x="209" fg:w="1"/><text x="17.0642%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="16.8142%" y="229" width="0.0805%" height="15" fill="rgb(216,106,43)" fg:x="209" fg:w="1"/><text x="17.0642%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.8946%" y="453" width="0.0805%" height="15" fill="rgb(216,183,2)" fg:x="210" fg:w="1"/><text x="17.1446%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.8946%" y="437" width="0.0805%" height="15" fill="rgb(249,75,3)" fg:x="210" fg:w="1"/><text x="17.1446%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.8946%" y="421" width="0.0805%" height="15" fill="rgb(219,67,39)" fg:x="210" fg:w="1"/><text x="17.1446%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.8946%" y="405" width="0.0805%" height="15" fill="rgb(253,228,2)" fg:x="210" fg:w="1"/><text x="17.1446%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="16.8946%" y="389" width="0.0805%" height="15" fill="rgb(235,138,27)" fg:x="210" fg:w="1"/><text x="17.1446%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.8946%" y="373" width="0.0805%" height="15" fill="rgb(236,97,51)" fg:x="210" fg:w="1"/><text x="17.1446%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (6 samples, 0.48%)</title><rect x="16.5728%" y="501" width="0.4827%" height="15" fill="rgb(240,80,30)" fg:x="206" fg:w="6"/><text x="16.8228%" y="511.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="16.5728%" y="485" width="0.4827%" height="15" fill="rgb(230,178,19)" fg:x="206" fg:w="6"/><text x="16.8228%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="16.5728%" y="469" width="0.4827%" height="15" fill="rgb(210,190,27)" fg:x="206" fg:w="6"/><text x="16.8228%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9751%" y="453" width="0.0805%" height="15" fill="rgb(222,107,31)" fg:x="211" fg:w="1"/><text x="17.2251%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9751%" y="437" width="0.0805%" height="15" fill="rgb(216,127,34)" fg:x="211" fg:w="1"/><text x="17.2251%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9751%" y="421" width="0.0805%" height="15" fill="rgb(234,116,52)" fg:x="211" fg:w="1"/><text x="17.2251%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9751%" y="405" width="0.0805%" height="15" fill="rgb(222,124,15)" fg:x="211" fg:w="1"/><text x="17.2251%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.9751%" y="389" width="0.0805%" height="15" fill="rgb(231,179,28)" fg:x="211" fg:w="1"/><text x="17.2251%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9751%" y="373" width="0.0805%" height="15" fill="rgb(226,93,45)" fg:x="211" fg:w="1"/><text x="17.2251%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9751%" y="357" width="0.0805%" height="15" fill="rgb(215,8,51)" fg:x="211" fg:w="1"/><text x="17.2251%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9751%" y="341" width="0.0805%" height="15" fill="rgb(223,106,5)" fg:x="211" fg:w="1"/><text x="17.2251%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.0555%" y="437" width="0.0805%" height="15" fill="rgb(250,191,5)" fg:x="212" fg:w="1"/><text x="17.3055%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="17.0555%" y="501" width="0.1609%" height="15" fill="rgb(242,132,44)" fg:x="212" fg:w="2"/><text x="17.3055%" y="511.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.0555%" y="485" width="0.1609%" height="15" fill="rgb(251,152,29)" fg:x="212" fg:w="2"/><text x="17.3055%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="17.0555%" y="469" width="0.1609%" height="15" fill="rgb(218,179,5)" fg:x="212" fg:w="2"/><text x="17.3055%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.0555%" y="453" width="0.1609%" height="15" fill="rgb(227,67,19)" fg:x="212" fg:w="2"/><text x="17.3055%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1360%" y="437" width="0.0805%" height="15" fill="rgb(233,119,31)" fg:x="213" fg:w="1"/><text x="17.3860%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::HasScopes&gt;::scopes (1 samples, 0.08%)</title><rect x="17.2164%" y="485" width="0.0805%" height="15" fill="rgb(241,120,22)" fg:x="214" fg:w="1"/><text x="17.4664%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="17.2969%" y="469" width="0.0805%" height="15" fill="rgb(224,102,30)" fg:x="215" fg:w="1"/><text x="17.5469%" y="479.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="17.2969%" y="453" width="0.0805%" height="15" fill="rgb(210,164,37)" fg:x="215" fg:w="1"/><text x="17.5469%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.2969%" y="437" width="0.0805%" height="15" fill="rgb(226,191,16)" fg:x="215" fg:w="1"/><text x="17.5469%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.2969%" y="421" width="0.0805%" height="15" fill="rgb(214,40,45)" fg:x="215" fg:w="1"/><text x="17.5469%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.2969%" y="405" width="0.0805%" height="15" fill="rgb(244,29,26)" fg:x="215" fg:w="1"/><text x="17.5469%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.2969%" y="389" width="0.0805%" height="15" fill="rgb(216,16,5)" fg:x="215" fg:w="1"/><text x="17.5469%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="17.2164%" y="501" width="0.2414%" height="15" fill="rgb(249,76,35)" fg:x="214" fg:w="3"/><text x="17.4664%" y="511.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="17.2969%" y="485" width="0.1609%" height="15" fill="rgb(207,11,44)" fg:x="215" fg:w="2"/><text x="17.5469%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3773%" y="469" width="0.0805%" height="15" fill="rgb(228,190,49)" fg:x="216" fg:w="1"/><text x="17.6273%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="17.4578%" y="453" width="0.0805%" height="15" fill="rgb(214,173,12)" fg:x="217" fg:w="1"/><text x="17.7078%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.4578%" y="437" width="0.0805%" height="15" fill="rgb(218,26,35)" fg:x="217" fg:w="1"/><text x="17.7078%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="17.4578%" y="421" width="0.0805%" height="15" fill="rgb(220,200,19)" fg:x="217" fg:w="1"/><text x="17.7078%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="17.4578%" y="405" width="0.0805%" height="15" fill="rgb(239,95,49)" fg:x="217" fg:w="1"/><text x="17.7078%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="17.5382%" y="421" width="0.2414%" height="15" fill="rgb(235,85,53)" fg:x="218" fg:w="3"/><text x="17.7882%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="17.6187%" y="405" width="0.1609%" height="15" fill="rgb(233,133,31)" fg:x="219" fg:w="2"/><text x="17.8687%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.6991%" y="389" width="0.0805%" height="15" fill="rgb(218,25,20)" fg:x="220" fg:w="1"/><text x="17.9491%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6991%" y="373" width="0.0805%" height="15" fill="rgb(252,210,38)" fg:x="220" fg:w="1"/><text x="17.9491%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="17.7796%" y="357" width="0.0805%" height="15" fill="rgb(242,134,21)" fg:x="221" fg:w="1"/><text x="18.0296%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="17.7796%" y="341" width="0.0805%" height="15" fill="rgb(213,28,48)" fg:x="221" fg:w="1"/><text x="18.0296%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="17.7796%" y="325" width="0.0805%" height="15" fill="rgb(250,196,2)" fg:x="221" fg:w="1"/><text x="18.0296%" y="335.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="17.7796%" y="309" width="0.0805%" height="15" fill="rgb(227,5,17)" fg:x="221" fg:w="1"/><text x="18.0296%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="17.7796%" y="421" width="0.1609%" height="15" fill="rgb(221,226,24)" fg:x="221" fg:w="2"/><text x="18.0296%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="17.7796%" y="405" width="0.1609%" height="15" fill="rgb(211,5,48)" fg:x="221" fg:w="2"/><text x="18.0296%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="17.7796%" y="389" width="0.1609%" height="15" fill="rgb(219,150,6)" fg:x="221" fg:w="2"/><text x="18.0296%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (2 samples, 0.16%)</title><rect x="17.7796%" y="373" width="0.1609%" height="15" fill="rgb(251,46,16)" fg:x="221" fg:w="2"/><text x="18.0296%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="17.8600%" y="357" width="0.0805%" height="15" fill="rgb(220,204,40)" fg:x="222" fg:w="1"/><text x="18.1100%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="17.8600%" y="341" width="0.0805%" height="15" fill="rgb(211,85,2)" fg:x="222" fg:w="1"/><text x="18.1100%" y="351.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="17.8600%" y="325" width="0.0805%" height="15" fill="rgb(229,17,7)" fg:x="222" fg:w="1"/><text x="18.1100%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="17.8600%" y="309" width="0.0805%" height="15" fill="rgb(239,72,28)" fg:x="222" fg:w="1"/><text x="18.1100%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.8600%" y="293" width="0.0805%" height="15" fill="rgb(230,47,54)" fg:x="222" fg:w="1"/><text x="18.1100%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.8600%" y="277" width="0.0805%" height="15" fill="rgb(214,50,8)" fg:x="222" fg:w="1"/><text x="18.1100%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.9405%" y="373" width="0.0805%" height="15" fill="rgb(216,198,43)" fg:x="223" fg:w="1"/><text x="18.1905%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.9405%" y="357" width="0.0805%" height="15" fill="rgb(234,20,35)" fg:x="223" fg:w="1"/><text x="18.1905%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="18.0209%" y="373" width="0.0805%" height="15" fill="rgb(254,45,19)" fg:x="224" fg:w="1"/><text x="18.2709%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.0209%" y="357" width="0.0805%" height="15" fill="rgb(219,14,44)" fg:x="224" fg:w="1"/><text x="18.2709%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.0209%" y="341" width="0.0805%" height="15" fill="rgb(217,220,26)" fg:x="224" fg:w="1"/><text x="18.2709%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (41 samples, 3.30%)</title><rect x="18.1014%" y="357" width="3.2985%" height="15" fill="rgb(213,158,28)" fg:x="225" fg:w="41"/><text x="18.3514%" y="367.50">cor..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (39 samples, 3.14%)</title><rect x="18.2623%" y="341" width="3.1376%" height="15" fill="rgb(252,51,52)" fg:x="227" fg:w="39"/><text x="18.5123%" y="351.50">cor..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.3194%" y="325" width="0.0805%" height="15" fill="rgb(246,89,16)" fg:x="265" fg:w="1"/><text x="21.5694%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.56%)</title><rect x="21.4803%" y="341" width="0.5632%" height="15" fill="rgb(216,158,49)" fg:x="267" fg:w="7"/><text x="21.7303%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.88%)</title><rect x="21.3998%" y="357" width="0.8850%" height="15" fill="rgb(236,107,19)" fg:x="266" fg:w="11"/><text x="21.6498%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="22.0434%" y="341" width="0.2414%" height="15" fill="rgb(228,185,30)" fg:x="274" fg:w="3"/><text x="22.2934%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="22.1239%" y="325" width="0.1609%" height="15" fill="rgb(246,134,8)" fg:x="275" fg:w="2"/><text x="22.3739%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="22.2043%" y="309" width="0.0805%" height="15" fill="rgb(214,143,50)" fg:x="276" fg:w="1"/><text x="22.4543%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.2043%" y="293" width="0.0805%" height="15" fill="rgb(228,75,8)" fg:x="276" fg:w="1"/><text x="22.4543%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="22.2848%" y="357" width="0.1609%" height="15" fill="rgb(207,175,4)" fg:x="277" fg:w="2"/><text x="22.5348%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="22.3652%" y="341" width="0.0805%" height="15" fill="rgb(205,108,24)" fg:x="278" fg:w="1"/><text x="22.6152%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="22.4457%" y="325" width="0.0805%" height="15" fill="rgb(244,120,49)" fg:x="279" fg:w="1"/><text x="22.6957%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="22.5261%" y="309" width="0.0805%" height="15" fill="rgb(223,47,38)" fg:x="280" fg:w="1"/><text x="22.7761%" y="319.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="23.0088%" y="293" width="0.0805%" height="15" fill="rgb(229,179,11)" fg:x="286" fg:w="1"/><text x="23.2588%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0893%" y="293" width="0.0805%" height="15" fill="rgb(231,122,1)" fg:x="287" fg:w="1"/><text x="23.3393%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.1698%" y="293" width="0.0805%" height="15" fill="rgb(245,119,9)" fg:x="288" fg:w="1"/><text x="23.4198%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="23.2502%" y="293" width="0.0805%" height="15" fill="rgb(241,163,25)" fg:x="289" fg:w="1"/><text x="23.5002%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.2502%" y="277" width="0.0805%" height="15" fill="rgb(217,214,3)" fg:x="289" fg:w="1"/><text x="23.5002%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.2502%" y="261" width="0.0805%" height="15" fill="rgb(240,86,28)" fg:x="289" fg:w="1"/><text x="23.5002%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.2502%" y="245" width="0.0805%" height="15" fill="rgb(215,47,9)" fg:x="289" fg:w="1"/><text x="23.5002%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.3307%" y="261" width="0.0805%" height="15" fill="rgb(252,25,45)" fg:x="290" fg:w="1"/><text x="23.5807%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.3307%" y="245" width="0.0805%" height="15" fill="rgb(251,164,9)" fg:x="290" fg:w="1"/><text x="23.5807%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.3307%" y="229" width="0.0805%" height="15" fill="rgb(233,194,0)" fg:x="290" fg:w="1"/><text x="23.5807%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="23.4916%" y="245" width="0.1609%" height="15" fill="rgb(249,111,24)" fg:x="292" fg:w="2"/><text x="23.7416%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="23.3307%" y="293" width="0.4023%" height="15" fill="rgb(250,223,3)" fg:x="290" fg:w="5"/><text x="23.5807%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="23.3307%" y="277" width="0.4023%" height="15" fill="rgb(236,178,37)" fg:x="290" fg:w="5"/><text x="23.5807%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="23.4111%" y="261" width="0.3218%" height="15" fill="rgb(241,158,50)" fg:x="291" fg:w="4"/><text x="23.6611%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.6525%" y="245" width="0.0805%" height="15" fill="rgb(213,121,41)" fg:x="294" fg:w="1"/><text x="23.9025%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="23.7329%" y="277" width="0.0805%" height="15" fill="rgb(240,92,3)" fg:x="295" fg:w="1"/><text x="23.9829%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="23.7329%" y="261" width="0.0805%" height="15" fill="rgb(205,123,3)" fg:x="295" fg:w="1"/><text x="23.9829%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.7329%" y="245" width="0.0805%" height="15" fill="rgb(205,97,47)" fg:x="295" fg:w="1"/><text x="23.9829%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.7329%" y="229" width="0.0805%" height="15" fill="rgb(247,152,14)" fg:x="295" fg:w="1"/><text x="23.9829%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8134%" y="261" width="0.0805%" height="15" fill="rgb(248,195,53)" fg:x="296" fg:w="1"/><text x="24.0634%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (102 samples, 8.21%)</title><rect x="23.7329%" y="293" width="8.2060%" height="15" fill="rgb(226,201,16)" fg:x="295" fg:w="102"/><text x="23.9829%" y="303.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (101 samples, 8.13%)</title><rect x="23.8134%" y="277" width="8.1255%" height="15" fill="rgb(205,98,0)" fg:x="296" fg:w="101"/><text x="24.0634%" y="287.50">regex_autom..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (100 samples, 8.05%)</title><rect x="23.8938%" y="261" width="8.0451%" height="15" fill="rgb(214,191,48)" fg:x="297" fg:w="100"/><text x="24.1438%" y="271.50">alloc::vec:..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="31.9389%" y="293" width="0.4827%" height="15" fill="rgb(237,112,39)" fg:x="397" fg:w="6"/><text x="32.1889%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3411%" y="277" width="0.0805%" height="15" fill="rgb(247,203,27)" fg:x="402" fg:w="1"/><text x="32.5911%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 10.14%)</title><rect x="22.4457%" y="341" width="10.1368%" height="15" fill="rgb(235,124,28)" fg:x="279" fg:w="126"/><text x="22.6957%" y="351.50">&lt;core::iter::ad..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (125 samples, 10.06%)</title><rect x="22.5261%" y="325" width="10.0563%" height="15" fill="rgb(208,207,46)" fg:x="280" fg:w="125"/><text x="22.7761%" y="335.50">regex_automata:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (124 samples, 9.98%)</title><rect x="22.6066%" y="309" width="9.9759%" height="15" fill="rgb(234,176,4)" fg:x="281" fg:w="124"/><text x="22.8566%" y="319.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="32.4216%" y="293" width="0.1609%" height="15" fill="rgb(230,133,28)" fg:x="403" fg:w="2"/><text x="32.6716%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="32.5020%" y="277" width="0.0805%" height="15" fill="rgb(211,137,40)" fg:x="404" fg:w="1"/><text x="32.7520%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.5020%" y="261" width="0.0805%" height="15" fill="rgb(254,35,13)" fg:x="404" fg:w="1"/><text x="32.7520%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.5020%" y="245" width="0.0805%" height="15" fill="rgb(225,49,51)" fg:x="404" fg:w="1"/><text x="32.7520%" y="255.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="32.8238%" y="325" width="0.1609%" height="15" fill="rgb(251,10,15)" fg:x="408" fg:w="2"/><text x="33.0738%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9847%" y="325" width="0.0805%" height="15" fill="rgb(228,207,15)" fg:x="410" fg:w="1"/><text x="33.2347%" y="335.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="33.0652%" y="325" width="0.0805%" height="15" fill="rgb(241,99,19)" fg:x="411" fg:w="1"/><text x="33.3152%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="33.1456%" y="325" width="0.0805%" height="15" fill="rgb(207,104,49)" fg:x="412" fg:w="1"/><text x="33.3956%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="33.1456%" y="309" width="0.0805%" height="15" fill="rgb(234,99,18)" fg:x="412" fg:w="1"/><text x="33.3956%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.1456%" y="293" width="0.0805%" height="15" fill="rgb(213,191,49)" fg:x="412" fg:w="1"/><text x="33.3956%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="33.2261%" y="325" width="0.6436%" height="15" fill="rgb(210,226,19)" fg:x="413" fg:w="8"/><text x="33.4761%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="33.6283%" y="309" width="0.2414%" height="15" fill="rgb(229,97,18)" fg:x="418" fg:w="3"/><text x="33.8783%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="33.7088%" y="293" width="0.1609%" height="15" fill="rgb(211,167,15)" fg:x="419" fg:w="2"/><text x="33.9588%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="33.7892%" y="277" width="0.0805%" height="15" fill="rgb(210,169,34)" fg:x="420" fg:w="1"/><text x="34.0392%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="33.8697%" y="325" width="0.5632%" height="15" fill="rgb(241,121,31)" fg:x="421" fg:w="7"/><text x="34.1197%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.3524%" y="309" width="0.0805%" height="15" fill="rgb(232,40,11)" fg:x="427" fg:w="1"/><text x="34.6024%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.93%)</title><rect x="32.5825%" y="341" width="1.9308%" height="15" fill="rgb(205,86,26)" fg:x="405" fg:w="24"/><text x="32.8325%" y="351.50">r..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="34.4328%" y="325" width="0.0805%" height="15" fill="rgb(231,126,28)" fg:x="428" fg:w="1"/><text x="34.6828%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="34.5133%" y="341" width="0.0805%" height="15" fill="rgb(219,221,18)" fg:x="429" fg:w="1"/><text x="34.7633%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="34.5133%" y="325" width="0.0805%" height="15" fill="rgb(211,40,0)" fg:x="429" fg:w="1"/><text x="34.7633%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.5133%" y="309" width="0.0805%" height="15" fill="rgb(239,85,43)" fg:x="429" fg:w="1"/><text x="34.7633%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.5133%" y="293" width="0.0805%" height="15" fill="rgb(231,55,21)" fg:x="429" fg:w="1"/><text x="34.7633%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="34.5133%" y="277" width="0.0805%" height="15" fill="rgb(225,184,43)" fg:x="429" fg:w="1"/><text x="34.7633%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="34.5133%" y="261" width="0.0805%" height="15" fill="rgb(251,158,41)" fg:x="429" fg:w="1"/><text x="34.7633%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (207 samples, 16.65%)</title><rect x="18.1014%" y="373" width="16.6533%" height="15" fill="rgb(234,159,37)" fg:x="225" fg:w="207"/><text x="18.3514%" y="383.50">regex_automata::meta::stra..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (153 samples, 12.31%)</title><rect x="22.4457%" y="357" width="12.3089%" height="15" fill="rgb(216,204,22)" fg:x="279" fg:w="153"/><text x="22.6957%" y="367.50">regex_automata::nf..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="34.5937%" y="341" width="0.1609%" height="15" fill="rgb(214,17,3)" fg:x="430" fg:w="2"/><text x="34.8437%" y="351.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (2 samples, 0.16%)</title><rect x="34.5937%" y="325" width="0.1609%" height="15" fill="rgb(212,111,17)" fg:x="430" fg:w="2"/><text x="34.8437%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="34.6742%" y="309" width="0.0805%" height="15" fill="rgb(221,157,24)" fg:x="431" fg:w="1"/><text x="34.9242%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="34.9155%" y="325" width="0.0805%" height="15" fill="rgb(252,16,13)" fg:x="434" fg:w="1"/><text x="35.1655%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="34.9960%" y="309" width="0.1609%" height="15" fill="rgb(221,62,2)" fg:x="435" fg:w="2"/><text x="35.2460%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="34.9960%" y="293" width="0.1609%" height="15" fill="rgb(247,87,22)" fg:x="435" fg:w="2"/><text x="35.2460%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="34.9960%" y="277" width="0.1609%" height="15" fill="rgb(215,73,9)" fg:x="435" fg:w="2"/><text x="35.2460%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="34.7546%" y="373" width="0.4827%" height="15" fill="rgb(207,175,33)" fg:x="432" fg:w="6"/><text x="35.0046%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="34.8351%" y="357" width="0.4023%" height="15" fill="rgb(243,129,54)" fg:x="433" fg:w="5"/><text x="35.0851%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="34.9155%" y="341" width="0.3218%" height="15" fill="rgb(227,119,45)" fg:x="434" fg:w="4"/><text x="35.1655%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="34.9960%" y="325" width="0.2414%" height="15" fill="rgb(205,109,36)" fg:x="435" fg:w="3"/><text x="35.2460%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="35.1569%" y="309" width="0.0805%" height="15" fill="rgb(205,6,39)" fg:x="437" fg:w="1"/><text x="35.4069%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="35.1569%" y="293" width="0.0805%" height="15" fill="rgb(221,32,16)" fg:x="437" fg:w="1"/><text x="35.4069%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.5591%" y="325" width="0.0805%" height="15" fill="rgb(228,144,50)" fg:x="442" fg:w="1"/><text x="35.8091%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="35.5591%" y="341" width="0.1609%" height="15" fill="rgb(229,201,53)" fg:x="442" fg:w="2"/><text x="35.8091%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="35.6396%" y="325" width="0.0805%" height="15" fill="rgb(249,153,27)" fg:x="443" fg:w="1"/><text x="35.8896%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (222 samples, 17.86%)</title><rect x="17.9405%" y="389" width="17.8600%" height="15" fill="rgb(227,106,25)" fg:x="223" fg:w="222"/><text x="18.1905%" y="399.50">regex_automata::meta::regex:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="35.2373%" y="373" width="0.5632%" height="15" fill="rgb(230,65,29)" fg:x="438" fg:w="7"/><text x="35.4873%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="35.2373%" y="357" width="0.5632%" height="15" fill="rgb(221,57,46)" fg:x="438" fg:w="7"/><text x="35.4873%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="35.7200%" y="341" width="0.0805%" height="15" fill="rgb(229,161,17)" fg:x="444" fg:w="1"/><text x="35.9700%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="35.7200%" y="325" width="0.0805%" height="15" fill="rgb(222,213,11)" fg:x="444" fg:w="1"/><text x="35.9700%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="35.7200%" y="309" width="0.0805%" height="15" fill="rgb(235,35,13)" fg:x="444" fg:w="1"/><text x="35.9700%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (223 samples, 17.94%)</title><rect x="17.9405%" y="421" width="17.9405%" height="15" fill="rgb(233,158,34)" fg:x="223" fg:w="223"/><text x="18.1905%" y="431.50">&lt;regex::regex::string::Regex..</text></g><g><title>regex::builders::Builder::build_one_string (223 samples, 17.94%)</title><rect x="17.9405%" y="405" width="17.9405%" height="15" fill="rgb(215,151,48)" fg:x="223" fg:w="223"/><text x="18.1905%" y="415.50">regex::builders::Builder::bu..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="35.8005%" y="389" width="0.0805%" height="15" fill="rgb(229,84,14)" fg:x="445" fg:w="1"/><text x="36.0505%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.8809%" y="405" width="0.0805%" height="15" fill="rgb(229,68,14)" fg:x="446" fg:w="1"/><text x="36.1309%" y="415.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="35.9614%" y="389" width="0.1609%" height="15" fill="rgb(243,106,26)" fg:x="447" fg:w="2"/><text x="36.2114%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="35.9614%" y="373" width="0.1609%" height="15" fill="rgb(206,45,38)" fg:x="447" fg:w="2"/><text x="36.2114%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.9614%" y="357" width="0.1609%" height="15" fill="rgb(226,6,15)" fg:x="447" fg:w="2"/><text x="36.2114%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.0418%" y="341" width="0.0805%" height="15" fill="rgb(232,22,54)" fg:x="448" fg:w="1"/><text x="36.2918%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="36.1223%" y="373" width="0.0805%" height="15" fill="rgb(229,222,32)" fg:x="449" fg:w="1"/><text x="36.3723%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1223%" y="357" width="0.0805%" height="15" fill="rgb(228,62,29)" fg:x="449" fg:w="1"/><text x="36.3723%" y="367.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.2027%" y="357" width="0.0805%" height="15" fill="rgb(251,103,34)" fg:x="450" fg:w="1"/><text x="36.4527%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="35.8809%" y="421" width="0.5632%" height="15" fill="rgb(233,12,30)" fg:x="446" fg:w="7"/><text x="36.1309%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (6 samples, 0.48%)</title><rect x="35.9614%" y="405" width="0.4827%" height="15" fill="rgb(238,52,0)" fg:x="447" fg:w="6"/><text x="36.2114%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (4 samples, 0.32%)</title><rect x="36.1223%" y="389" width="0.3218%" height="15" fill="rgb(223,98,5)" fg:x="449" fg:w="4"/><text x="36.3723%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="36.2027%" y="373" width="0.2414%" height="15" fill="rgb(228,75,37)" fg:x="450" fg:w="3"/><text x="36.4527%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="36.2832%" y="357" width="0.1609%" height="15" fill="rgb(205,115,49)" fg:x="451" fg:w="2"/><text x="36.5332%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.4441%" y="357" width="0.0805%" height="15" fill="rgb(250,154,43)" fg:x="453" fg:w="1"/><text x="36.6941%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.4441%" y="341" width="0.0805%" height="15" fill="rgb(226,43,29)" fg:x="453" fg:w="1"/><text x="36.6941%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.6854%" y="309" width="0.0805%" height="15" fill="rgb(249,228,39)" fg:x="456" fg:w="1"/><text x="36.9354%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="36.6854%" y="341" width="0.2414%" height="15" fill="rgb(216,79,43)" fg:x="456" fg:w="3"/><text x="36.9354%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="36.6854%" y="325" width="0.2414%" height="15" fill="rgb(228,95,12)" fg:x="456" fg:w="3"/><text x="36.9354%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="36.7659%" y="309" width="0.1609%" height="15" fill="rgb(249,221,15)" fg:x="457" fg:w="2"/><text x="37.0159%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (9 samples, 0.72%)</title><rect x="36.5245%" y="357" width="0.7241%" height="15" fill="rgb(233,34,13)" fg:x="454" fg:w="9"/><text x="36.7745%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="36.9268%" y="341" width="0.3218%" height="15" fill="rgb(214,103,39)" fg:x="459" fg:w="4"/><text x="37.1768%" y="351.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (246 samples, 19.79%)</title><rect x="17.5382%" y="437" width="19.7908%" height="15" fill="rgb(251,126,39)" fg:x="218" fg:w="246"/><text x="17.7882%" y="447.50">indefinite::helper::Helper::get..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.88%)</title><rect x="36.4441%" y="421" width="0.8850%" height="15" fill="rgb(214,216,36)" fg:x="453" fg:w="11"/><text x="36.6941%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.88%)</title><rect x="36.4441%" y="405" width="0.8850%" height="15" fill="rgb(220,221,8)" fg:x="453" fg:w="11"/><text x="36.6941%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.88%)</title><rect x="36.4441%" y="389" width="0.8850%" height="15" fill="rgb(240,216,3)" fg:x="453" fg:w="11"/><text x="36.6941%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (11 samples, 0.88%)</title><rect x="36.4441%" y="373" width="0.8850%" height="15" fill="rgb(232,218,17)" fg:x="453" fg:w="11"/><text x="36.6941%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="37.2486%" y="357" width="0.0805%" height="15" fill="rgb(229,163,45)" fg:x="463" fg:w="1"/><text x="37.4986%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.2486%" y="341" width="0.0805%" height="15" fill="rgb(231,110,42)" fg:x="463" fg:w="1"/><text x="37.4986%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.2486%" y="325" width="0.0805%" height="15" fill="rgb(208,170,48)" fg:x="463" fg:w="1"/><text x="37.4986%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.2486%" y="309" width="0.0805%" height="15" fill="rgb(239,116,25)" fg:x="463" fg:w="1"/><text x="37.4986%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="37.3290%" y="405" width="0.0805%" height="15" fill="rgb(219,200,50)" fg:x="464" fg:w="1"/><text x="37.5790%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="37.3290%" y="389" width="0.0805%" height="15" fill="rgb(245,200,0)" fg:x="464" fg:w="1"/><text x="37.5790%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.3290%" y="373" width="0.0805%" height="15" fill="rgb(245,119,33)" fg:x="464" fg:w="1"/><text x="37.5790%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="37.4095%" y="373" width="0.0805%" height="15" fill="rgb(231,125,12)" fg:x="465" fg:w="1"/><text x="37.6595%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.4899%" y="373" width="0.0805%" height="15" fill="rgb(216,96,41)" fg:x="466" fg:w="1"/><text x="37.7399%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.4899%" y="357" width="0.0805%" height="15" fill="rgb(248,43,45)" fg:x="466" fg:w="1"/><text x="37.7399%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="37.4899%" y="341" width="0.0805%" height="15" fill="rgb(217,222,7)" fg:x="466" fg:w="1"/><text x="37.7399%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="37.4899%" y="325" width="0.0805%" height="15" fill="rgb(233,28,6)" fg:x="466" fg:w="1"/><text x="37.7399%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="37.5704%" y="373" width="0.0805%" height="15" fill="rgb(231,218,15)" fg:x="467" fg:w="1"/><text x="37.8204%" y="383.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.5704%" y="357" width="0.0805%" height="15" fill="rgb(226,171,48)" fg:x="467" fg:w="1"/><text x="37.8204%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="37.5704%" y="341" width="0.0805%" height="15" fill="rgb(235,201,9)" fg:x="467" fg:w="1"/><text x="37.8204%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.5704%" y="325" width="0.0805%" height="15" fill="rgb(217,80,15)" fg:x="467" fg:w="1"/><text x="37.8204%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.5704%" y="309" width="0.0805%" height="15" fill="rgb(219,152,8)" fg:x="467" fg:w="1"/><text x="37.8204%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.5704%" y="293" width="0.0805%" height="15" fill="rgb(243,107,38)" fg:x="467" fg:w="1"/><text x="37.8204%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (2 samples, 0.16%)</title><rect x="37.6508%" y="373" width="0.1609%" height="15" fill="rgb(231,17,5)" fg:x="468" fg:w="2"/><text x="37.9008%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="37.6508%" y="357" width="0.1609%" height="15" fill="rgb(209,25,54)" fg:x="468" fg:w="2"/><text x="37.9008%" y="367.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="37.8117%" y="373" width="0.0805%" height="15" fill="rgb(219,0,2)" fg:x="470" fg:w="1"/><text x="38.0617%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.0531%" y="357" width="0.0805%" height="15" fill="rgb(246,9,5)" fg:x="473" fg:w="1"/><text x="38.3031%" y="367.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.1335%" y="341" width="0.1609%" height="15" fill="rgb(226,159,4)" fg:x="474" fg:w="2"/><text x="38.3835%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (22 samples, 1.77%)</title><rect x="38.1335%" y="357" width="1.7699%" height="15" fill="rgb(219,175,34)" fg:x="474" fg:w="22"/><text x="38.3835%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.61%)</title><rect x="38.2944%" y="341" width="1.6090%" height="15" fill="rgb(236,10,46)" fg:x="476" fg:w="20"/><text x="38.5444%" y="351.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="39.6621%" y="325" width="0.2414%" height="15" fill="rgb(240,211,16)" fg:x="493" fg:w="3"/><text x="39.9121%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="39.9035%" y="357" width="0.0805%" height="15" fill="rgb(205,3,43)" fg:x="496" fg:w="1"/><text x="40.1535%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="39.9839%" y="341" width="0.1609%" height="15" fill="rgb(245,7,22)" fg:x="497" fg:w="2"/><text x="40.2339%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (2 samples, 0.16%)</title><rect x="39.9839%" y="325" width="0.1609%" height="15" fill="rgb(239,132,32)" fg:x="497" fg:w="2"/><text x="40.2339%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="40.1448%" y="341" width="0.3218%" height="15" fill="rgb(228,202,34)" fg:x="499" fg:w="4"/><text x="40.3948%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="40.3862%" y="325" width="0.0805%" height="15" fill="rgb(254,200,22)" fg:x="502" fg:w="1"/><text x="40.6362%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="39.9839%" y="357" width="0.5632%" height="15" fill="rgb(219,10,39)" fg:x="497" fg:w="7"/><text x="40.2339%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="40.4666%" y="341" width="0.0805%" height="15" fill="rgb(226,210,39)" fg:x="503" fg:w="1"/><text x="40.7166%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.7884%" y="325" width="0.0805%" height="15" fill="rgb(208,219,16)" fg:x="507" fg:w="1"/><text x="41.0384%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="40.8689%" y="325" width="0.2414%" height="15" fill="rgb(216,158,51)" fg:x="508" fg:w="3"/><text x="41.1189%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="40.8689%" y="309" width="0.2414%" height="15" fill="rgb(233,14,44)" fg:x="508" fg:w="3"/><text x="41.1189%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="40.8689%" y="293" width="0.2414%" height="15" fill="rgb(237,97,39)" fg:x="508" fg:w="3"/><text x="41.1189%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="40.8689%" y="277" width="0.2414%" height="15" fill="rgb(218,198,43)" fg:x="508" fg:w="3"/><text x="41.1189%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.40%)</title><rect x="41.1102%" y="325" width="0.4023%" height="15" fill="rgb(231,104,20)" fg:x="511" fg:w="5"/><text x="41.3602%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="41.3516%" y="309" width="0.1609%" height="15" fill="rgb(254,36,13)" fg:x="514" fg:w="2"/><text x="41.6016%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="41.4320%" y="293" width="0.0805%" height="15" fill="rgb(248,14,50)" fg:x="515" fg:w="1"/><text x="41.6820%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="41.4320%" y="277" width="0.0805%" height="15" fill="rgb(217,107,29)" fg:x="515" fg:w="1"/><text x="41.6820%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (14 samples, 1.13%)</title><rect x="41.5929%" y="309" width="1.1263%" height="15" fill="rgb(251,169,33)" fg:x="517" fg:w="14"/><text x="41.8429%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (14 samples, 1.13%)</title><rect x="41.5929%" y="293" width="1.1263%" height="15" fill="rgb(217,108,32)" fg:x="517" fg:w="14"/><text x="41.8429%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (29 samples, 2.33%)</title><rect x="40.5471%" y="357" width="2.3331%" height="15" fill="rgb(219,66,42)" fg:x="504" fg:w="29"/><text x="40.7971%" y="367.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.25%)</title><rect x="40.6275%" y="341" width="2.2526%" height="15" fill="rgb(206,180,7)" fg:x="505" fg:w="28"/><text x="40.8775%" y="351.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (17 samples, 1.37%)</title><rect x="41.5125%" y="325" width="1.3677%" height="15" fill="rgb(208,226,31)" fg:x="516" fg:w="17"/><text x="41.7625%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (2 samples, 0.16%)</title><rect x="42.7192%" y="309" width="0.1609%" height="15" fill="rgb(218,26,49)" fg:x="531" fg:w="2"/><text x="42.9692%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="42.8801%" y="357" width="0.0805%" height="15" fill="rgb(233,197,48)" fg:x="533" fg:w="1"/><text x="43.1301%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.8801%" y="341" width="0.0805%" height="15" fill="rgb(252,181,51)" fg:x="533" fg:w="1"/><text x="43.1301%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="43.0410%" y="309" width="0.1609%" height="15" fill="rgb(253,90,19)" fg:x="535" fg:w="2"/><text x="43.2910%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.0410%" y="293" width="0.1609%" height="15" fill="rgb(215,171,30)" fg:x="535" fg:w="2"/><text x="43.2910%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.0410%" y="277" width="0.1609%" height="15" fill="rgb(214,222,9)" fg:x="535" fg:w="2"/><text x="43.2910%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.0410%" y="261" width="0.1609%" height="15" fill="rgb(223,3,22)" fg:x="535" fg:w="2"/><text x="43.2910%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="43.2019%" y="293" width="0.0805%" height="15" fill="rgb(225,196,46)" fg:x="537" fg:w="1"/><text x="43.4519%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="43.2019%" y="277" width="0.0805%" height="15" fill="rgb(209,110,37)" fg:x="537" fg:w="1"/><text x="43.4519%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="44.8109%" y="245" width="0.3218%" height="15" fill="rgb(249,89,12)" fg:x="557" fg:w="4"/><text x="45.0609%" y="255.50"></text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="45.1327%" y="245" width="0.4827%" height="15" fill="rgb(226,27,33)" fg:x="561" fg:w="6"/><text x="45.3827%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (7 samples, 0.56%)</title><rect x="45.6154%" y="245" width="0.5632%" height="15" fill="rgb(213,82,22)" fg:x="567" fg:w="7"/><text x="45.8654%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="45.8568%" y="229" width="0.3218%" height="15" fill="rgb(248,140,0)" fg:x="570" fg:w="4"/><text x="46.1068%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="45.8568%" y="213" width="0.3218%" height="15" fill="rgb(228,106,3)" fg:x="570" fg:w="4"/><text x="46.1068%" y="223.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="45.8568%" y="197" width="0.3218%" height="15" fill="rgb(209,23,37)" fg:x="570" fg:w="4"/><text x="46.1068%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (3 samples, 0.24%)</title><rect x="46.1786%" y="245" width="0.2414%" height="15" fill="rgb(241,93,50)" fg:x="574" fg:w="3"/><text x="46.4286%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="46.4200%" y="245" width="0.1609%" height="15" fill="rgb(253,46,43)" fg:x="577" fg:w="2"/><text x="46.6700%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="47.1440%" y="181" width="0.0805%" height="15" fill="rgb(226,206,43)" fg:x="586" fg:w="1"/><text x="47.3940%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="47.0636%" y="213" width="0.3218%" height="15" fill="rgb(217,54,7)" fg:x="585" fg:w="4"/><text x="47.3136%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="47.0636%" y="197" width="0.3218%" height="15" fill="rgb(223,5,52)" fg:x="585" fg:w="4"/><text x="47.3136%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="47.2245%" y="181" width="0.1609%" height="15" fill="rgb(206,52,46)" fg:x="587" fg:w="2"/><text x="47.4745%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (17 samples, 1.37%)</title><rect x="46.5809%" y="245" width="1.3677%" height="15" fill="rgb(253,136,11)" fg:x="579" fg:w="17"/><text x="46.8309%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (16 samples, 1.29%)</title><rect x="46.6613%" y="229" width="1.2872%" height="15" fill="rgb(208,106,33)" fg:x="580" fg:w="16"/><text x="46.9113%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.56%)</title><rect x="47.3854%" y="213" width="0.5632%" height="15" fill="rgb(206,54,4)" fg:x="589" fg:w="7"/><text x="47.6354%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="47.7876%" y="197" width="0.1609%" height="15" fill="rgb(213,3,15)" fg:x="594" fg:w="2"/><text x="48.0376%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="47.8681%" y="181" width="0.0805%" height="15" fill="rgb(252,211,39)" fg:x="595" fg:w="1"/><text x="48.1181%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.8681%" y="165" width="0.0805%" height="15" fill="rgb(223,6,36)" fg:x="595" fg:w="1"/><text x="48.1181%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.8681%" y="149" width="0.0805%" height="15" fill="rgb(252,169,45)" fg:x="595" fg:w="1"/><text x="48.1181%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (89 samples, 7.16%)</title><rect x="47.9485%" y="245" width="7.1601%" height="15" fill="rgb(212,48,26)" fg:x="596" fg:w="89"/><text x="48.1985%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (89 samples, 7.16%)</title><rect x="47.9485%" y="229" width="7.1601%" height="15" fill="rgb(251,102,48)" fg:x="596" fg:w="89"/><text x="48.1985%" y="239.50">regex_auto..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (89 samples, 7.16%)</title><rect x="47.9485%" y="213" width="7.1601%" height="15" fill="rgb(243,208,16)" fg:x="596" fg:w="89"/><text x="48.1985%" y="223.50">alloc::vec..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (6 samples, 0.48%)</title><rect x="55.1086%" y="245" width="0.4827%" height="15" fill="rgb(219,96,24)" fg:x="685" fg:w="6"/><text x="55.3586%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="55.4304%" y="229" width="0.1609%" height="15" fill="rgb(219,33,29)" fg:x="689" fg:w="2"/><text x="55.6804%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="55.5913%" y="245" width="0.0805%" height="15" fill="rgb(223,176,5)" fg:x="691" fg:w="1"/><text x="55.8413%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (166 samples, 13.35%)</title><rect x="43.0410%" y="341" width="13.3548%" height="15" fill="rgb(228,140,14)" fg:x="535" fg:w="166"/><text x="43.2910%" y="351.50">&lt;core::iter::adapter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (166 samples, 13.35%)</title><rect x="43.0410%" y="325" width="13.3548%" height="15" fill="rgb(217,179,31)" fg:x="535" fg:w="166"/><text x="43.2910%" y="335.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (164 samples, 13.19%)</title><rect x="43.2019%" y="309" width="13.1939%" height="15" fill="rgb(230,9,30)" fg:x="537" fg:w="164"/><text x="43.4519%" y="319.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (163 samples, 13.11%)</title><rect x="43.2824%" y="293" width="13.1134%" height="15" fill="rgb(230,136,20)" fg:x="538" fg:w="163"/><text x="43.5324%" y="303.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (163 samples, 13.11%)</title><rect x="43.2824%" y="277" width="13.1134%" height="15" fill="rgb(215,210,22)" fg:x="538" fg:w="163"/><text x="43.5324%" y="287.50">regex_automata::nfa:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (161 samples, 12.95%)</title><rect x="43.4433%" y="261" width="12.9525%" height="15" fill="rgb(218,43,5)" fg:x="540" fg:w="161"/><text x="43.6933%" y="271.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (9 samples, 0.72%)</title><rect x="55.6718%" y="245" width="0.7241%" height="15" fill="rgb(216,11,5)" fg:x="692" fg:w="9"/><text x="55.9218%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="56.1545%" y="229" width="0.2414%" height="15" fill="rgb(209,82,29)" fg:x="698" fg:w="3"/><text x="56.4045%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3154%" y="213" width="0.0805%" height="15" fill="rgb(244,115,12)" fg:x="700" fg:w="1"/><text x="56.5654%" y="223.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.3154%" y="197" width="0.0805%" height="15" fill="rgb(222,82,18)" fg:x="700" fg:w="1"/><text x="56.5654%" y="207.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="56.7176%" y="325" width="0.0805%" height="15" fill="rgb(249,227,8)" fg:x="705" fg:w="1"/><text x="56.9676%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.7981%" y="325" width="0.0805%" height="15" fill="rgb(253,141,45)" fg:x="706" fg:w="1"/><text x="57.0481%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.8785%" y="325" width="0.1609%" height="15" fill="rgb(234,184,4)" fg:x="707" fg:w="2"/><text x="57.1285%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (15 samples, 1.21%)</title><rect x="57.0394%" y="325" width="1.2068%" height="15" fill="rgb(218,194,23)" fg:x="709" fg:w="15"/><text x="57.2894%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="57.9244%" y="309" width="0.3218%" height="15" fill="rgb(235,66,41)" fg:x="720" fg:w="4"/><text x="58.1744%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.0048%" y="293" width="0.2414%" height="15" fill="rgb(245,217,1)" fg:x="721" fg:w="3"/><text x="58.2548%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="58.0048%" y="277" width="0.2414%" height="15" fill="rgb(229,91,1)" fg:x="721" fg:w="3"/><text x="58.2548%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.4875%" y="309" width="0.0805%" height="15" fill="rgb(207,101,30)" fg:x="727" fg:w="1"/><text x="58.7375%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="58.2462%" y="325" width="0.4023%" height="15" fill="rgb(223,82,49)" fg:x="724" fg:w="5"/><text x="58.4962%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.5680%" y="309" width="0.0805%" height="15" fill="rgb(218,167,17)" fg:x="728" fg:w="1"/><text x="58.8180%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.5680%" y="293" width="0.0805%" height="15" fill="rgb(208,103,14)" fg:x="728" fg:w="1"/><text x="58.8180%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (5 samples, 0.40%)</title><rect x="58.6484%" y="325" width="0.4023%" height="15" fill="rgb(238,20,8)" fg:x="729" fg:w="5"/><text x="58.8984%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (202 samples, 16.25%)</title><rect x="42.9606%" y="357" width="16.2510%" height="15" fill="rgb(218,80,54)" fg:x="534" fg:w="202"/><text x="43.2106%" y="367.50">regex_automata::nfa::thom..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (35 samples, 2.82%)</title><rect x="56.3958%" y="341" width="2.8158%" height="15" fill="rgb(240,144,17)" fg:x="701" fg:w="35"/><text x="56.6458%" y="351.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="59.0507%" y="325" width="0.1609%" height="15" fill="rgb(245,27,50)" fg:x="734" fg:w="2"/><text x="59.3007%" y="335.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.1311%" y="309" width="0.0805%" height="15" fill="rgb(251,51,7)" fg:x="735" fg:w="1"/><text x="59.3811%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (266 samples, 21.40%)</title><rect x="37.8922%" y="373" width="21.3998%" height="15" fill="rgb(245,217,29)" fg:x="471" fg:w="266"/><text x="38.1422%" y="383.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="59.2116%" y="357" width="0.0805%" height="15" fill="rgb(221,176,29)" fg:x="736" fg:w="1"/><text x="59.4616%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.2920%" y="341" width="0.0805%" height="15" fill="rgb(212,180,24)" fg:x="737" fg:w="1"/><text x="59.5420%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.2920%" y="325" width="0.0805%" height="15" fill="rgb(254,24,2)" fg:x="737" fg:w="1"/><text x="59.5420%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.2920%" y="309" width="0.0805%" height="15" fill="rgb(230,100,2)" fg:x="737" fg:w="1"/><text x="59.5420%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="59.3725%" y="325" width="0.0805%" height="15" fill="rgb(219,142,25)" fg:x="738" fg:w="1"/><text x="59.6225%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="59.3725%" y="309" width="0.0805%" height="15" fill="rgb(240,73,43)" fg:x="738" fg:w="1"/><text x="59.6225%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="59.3725%" y="293" width="0.0805%" height="15" fill="rgb(214,114,15)" fg:x="738" fg:w="1"/><text x="59.6225%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="59.4529%" y="325" width="0.0805%" height="15" fill="rgb(207,130,4)" fg:x="739" fg:w="1"/><text x="59.7029%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="59.3725%" y="341" width="0.4827%" height="15" fill="rgb(221,25,40)" fg:x="738" fg:w="6"/><text x="59.6225%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="59.5334%" y="325" width="0.3218%" height="15" fill="rgb(241,184,7)" fg:x="740" fg:w="4"/><text x="59.7834%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="59.5334%" y="309" width="0.3218%" height="15" fill="rgb(235,159,4)" fg:x="740" fg:w="4"/><text x="59.7834%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="59.5334%" y="293" width="0.3218%" height="15" fill="rgb(214,87,48)" fg:x="740" fg:w="4"/><text x="59.7834%" y="303.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="59.5334%" y="277" width="0.3218%" height="15" fill="rgb(246,198,24)" fg:x="740" fg:w="4"/><text x="59.7834%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="59.8552%" y="341" width="0.0805%" height="15" fill="rgb(209,66,40)" fg:x="744" fg:w="1"/><text x="60.1052%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.8552%" y="325" width="0.0805%" height="15" fill="rgb(233,147,39)" fg:x="744" fg:w="1"/><text x="60.1052%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.72%)</title><rect x="59.2920%" y="373" width="0.7241%" height="15" fill="rgb(231,145,52)" fg:x="737" fg:w="9"/><text x="59.5420%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.72%)</title><rect x="59.2920%" y="357" width="0.7241%" height="15" fill="rgb(206,20,26)" fg:x="737" fg:w="9"/><text x="59.5420%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.9356%" y="341" width="0.0805%" height="15" fill="rgb(238,220,4)" fg:x="745" fg:w="1"/><text x="60.1856%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.40%)</title><rect x="60.0965%" y="325" width="0.4023%" height="15" fill="rgb(252,195,42)" fg:x="747" fg:w="5"/><text x="60.3465%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="60.3379%" y="309" width="0.1609%" height="15" fill="rgb(209,10,6)" fg:x="750" fg:w="2"/><text x="60.5879%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.4183%" y="293" width="0.0805%" height="15" fill="rgb(229,3,52)" fg:x="751" fg:w="1"/><text x="60.6683%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.56%)</title><rect x="60.0965%" y="341" width="0.5632%" height="15" fill="rgb(253,49,37)" fg:x="747" fg:w="7"/><text x="60.3465%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="60.4988%" y="325" width="0.1609%" height="15" fill="rgb(240,103,49)" fg:x="752" fg:w="2"/><text x="60.7488%" y="335.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="60.4988%" y="309" width="0.1609%" height="15" fill="rgb(250,182,30)" fg:x="752" fg:w="2"/><text x="60.7488%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="60.5792%" y="293" width="0.0805%" height="15" fill="rgb(248,8,30)" fg:x="753" fg:w="1"/><text x="60.8292%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="60.7401%" y="325" width="0.0805%" height="15" fill="rgb(237,120,30)" fg:x="755" fg:w="1"/><text x="60.9901%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="60.7401%" y="309" width="0.0805%" height="15" fill="rgb(221,146,34)" fg:x="755" fg:w="1"/><text x="60.9901%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.7401%" y="293" width="0.0805%" height="15" fill="rgb(242,55,13)" fg:x="755" fg:w="1"/><text x="60.9901%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="60.6597%" y="341" width="0.2414%" height="15" fill="rgb(242,112,31)" fg:x="754" fg:w="3"/><text x="60.9097%" y="351.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="60.8206%" y="325" width="0.0805%" height="15" fill="rgb(249,192,27)" fg:x="756" fg:w="1"/><text x="61.0706%" y="335.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (293 samples, 23.57%)</title><rect x="37.4095%" y="389" width="23.5720%" height="15" fill="rgb(208,204,44)" fg:x="465" fg:w="293"/><text x="37.6595%" y="399.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (12 samples, 0.97%)</title><rect x="60.0161%" y="373" width="0.9654%" height="15" fill="rgb(208,93,54)" fg:x="746" fg:w="12"/><text x="60.2661%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (12 samples, 0.97%)</title><rect x="60.0161%" y="357" width="0.9654%" height="15" fill="rgb(242,1,31)" fg:x="746" fg:w="12"/><text x="60.2661%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="60.9010%" y="341" width="0.0805%" height="15" fill="rgb(241,83,25)" fg:x="757" fg:w="1"/><text x="61.1510%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="60.9010%" y="325" width="0.0805%" height="15" fill="rgb(205,169,50)" fg:x="757" fg:w="1"/><text x="61.1510%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.9010%" y="309" width="0.0805%" height="15" fill="rgb(239,186,37)" fg:x="757" fg:w="1"/><text x="61.1510%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.9010%" y="293" width="0.0805%" height="15" fill="rgb(205,221,10)" fg:x="757" fg:w="1"/><text x="61.1510%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.9010%" y="277" width="0.0805%" height="15" fill="rgb(218,196,15)" fg:x="757" fg:w="1"/><text x="61.1510%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (295 samples, 23.73%)</title><rect x="37.3290%" y="421" width="23.7329%" height="15" fill="rgb(218,196,35)" fg:x="464" fg:w="295"/><text x="37.5790%" y="431.50">&lt;regex::regex::string::Regex as core::..</text></g><g><title>regex::builders::Builder::build_one_string (294 samples, 23.65%)</title><rect x="37.4095%" y="405" width="23.6525%" height="15" fill="rgb(233,63,24)" fg:x="465" fg:w="294"/><text x="37.6595%" y="415.50">regex::builders::Builder::build_one_st..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="60.9815%" y="389" width="0.0805%" height="15" fill="rgb(225,8,4)" fg:x="758" fg:w="1"/><text x="61.2315%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.1424%" y="389" width="0.0805%" height="15" fill="rgb(234,105,35)" fg:x="760" fg:w="1"/><text x="61.3924%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.1424%" y="373" width="0.0805%" height="15" fill="rgb(236,21,32)" fg:x="760" fg:w="1"/><text x="61.3924%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.1424%" y="357" width="0.0805%" height="15" fill="rgb(228,109,6)" fg:x="760" fg:w="1"/><text x="61.3924%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="61.2228%" y="373" width="0.0805%" height="15" fill="rgb(229,215,31)" fg:x="761" fg:w="1"/><text x="61.4728%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (5 samples, 0.40%)</title><rect x="61.3033%" y="373" width="0.4023%" height="15" fill="rgb(221,52,54)" fg:x="762" fg:w="5"/><text x="61.5533%" y="383.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="61.5447%" y="357" width="0.1609%" height="15" fill="rgb(252,129,43)" fg:x="765" fg:w="2"/><text x="61.7947%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.72%)</title><rect x="61.0619%" y="421" width="0.7241%" height="15" fill="rgb(248,183,27)" fg:x="759" fg:w="9"/><text x="61.3119%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.64%)</title><rect x="61.1424%" y="405" width="0.6436%" height="15" fill="rgb(250,0,22)" fg:x="760" fg:w="8"/><text x="61.3924%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (7 samples, 0.56%)</title><rect x="61.2228%" y="389" width="0.5632%" height="15" fill="rgb(213,166,10)" fg:x="761" fg:w="7"/><text x="61.4728%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="61.7056%" y="373" width="0.0805%" height="15" fill="rgb(207,163,36)" fg:x="767" fg:w="1"/><text x="61.9556%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.7056%" y="357" width="0.0805%" height="15" fill="rgb(208,122,22)" fg:x="767" fg:w="1"/><text x="61.9556%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.1078%" y="325" width="0.0805%" height="15" fill="rgb(207,104,49)" fg:x="772" fg:w="1"/><text x="62.3578%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.1078%" y="309" width="0.0805%" height="15" fill="rgb(248,211,50)" fg:x="772" fg:w="1"/><text x="62.3578%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.1078%" y="293" width="0.0805%" height="15" fill="rgb(217,13,45)" fg:x="772" fg:w="1"/><text x="62.3578%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.1883%" y="325" width="0.0805%" height="15" fill="rgb(211,216,49)" fg:x="773" fg:w="1"/><text x="62.4383%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.1883%" y="309" width="0.0805%" height="15" fill="rgb(221,58,53)" fg:x="773" fg:w="1"/><text x="62.4383%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="62.1883%" y="293" width="0.0805%" height="15" fill="rgb(220,112,41)" fg:x="773" fg:w="1"/><text x="62.4383%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.97%)</title><rect x="61.8665%" y="341" width="0.9654%" height="15" fill="rgb(236,38,28)" fg:x="769" fg:w="12"/><text x="62.1165%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.56%)</title><rect x="62.2687%" y="325" width="0.5632%" height="15" fill="rgb(227,195,22)" fg:x="774" fg:w="7"/><text x="62.5187%" y="335.50"></text></g><g><title>indefinite::rules::number::Number::check (320 samples, 25.74%)</title><rect x="37.3290%" y="437" width="25.7442%" height="15" fill="rgb(214,55,33)" fg:x="464" fg:w="320"/><text x="37.5790%" y="447.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (16 samples, 1.29%)</title><rect x="61.7860%" y="421" width="1.2872%" height="15" fill="rgb(248,80,13)" fg:x="768" fg:w="16"/><text x="62.0360%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.29%)</title><rect x="61.7860%" y="405" width="1.2872%" height="15" fill="rgb(238,52,6)" fg:x="768" fg:w="16"/><text x="62.0360%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.29%)</title><rect x="61.7860%" y="389" width="1.2872%" height="15" fill="rgb(224,198,47)" fg:x="768" fg:w="16"/><text x="62.0360%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.29%)</title><rect x="61.7860%" y="373" width="1.2872%" height="15" fill="rgb(233,171,20)" fg:x="768" fg:w="16"/><text x="62.0360%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.21%)</title><rect x="61.8665%" y="357" width="1.2068%" height="15" fill="rgb(241,30,25)" fg:x="769" fg:w="15"/><text x="62.1165%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="62.8319%" y="341" width="0.2414%" height="15" fill="rgb(207,171,38)" fg:x="781" fg:w="3"/><text x="63.0819%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="62.8319%" y="325" width="0.2414%" height="15" fill="rgb(234,70,1)" fg:x="781" fg:w="3"/><text x="63.0819%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="62.8319%" y="309" width="0.2414%" height="15" fill="rgb(232,178,18)" fg:x="781" fg:w="3"/><text x="63.0819%" y="319.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="62.8319%" y="293" width="0.2414%" height="15" fill="rgb(241,78,40)" fg:x="781" fg:w="3"/><text x="63.0819%" y="303.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.16%)</title><rect x="63.0732%" y="421" width="0.1609%" height="15" fill="rgb(222,35,25)" fg:x="784" fg:w="2"/><text x="63.3232%" y="431.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="63.1537%" y="405" width="0.0805%" height="15" fill="rgb(207,92,16)" fg:x="785" fg:w="1"/><text x="63.4037%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="63.3950%" y="357" width="0.0805%" height="15" fill="rgb(216,59,51)" fg:x="788" fg:w="1"/><text x="63.6450%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3950%" y="341" width="0.0805%" height="15" fill="rgb(213,80,28)" fg:x="788" fg:w="1"/><text x="63.6450%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="63.3950%" y="325" width="0.0805%" height="15" fill="rgb(220,93,7)" fg:x="788" fg:w="1"/><text x="63.6450%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.3950%" y="309" width="0.0805%" height="15" fill="rgb(225,24,44)" fg:x="788" fg:w="1"/><text x="63.6450%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.5559%" y="341" width="0.0805%" height="15" fill="rgb(243,74,40)" fg:x="790" fg:w="1"/><text x="63.8059%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.5559%" y="325" width="0.0805%" height="15" fill="rgb(228,39,7)" fg:x="790" fg:w="1"/><text x="63.8059%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5559%" y="309" width="0.0805%" height="15" fill="rgb(227,79,8)" fg:x="790" fg:w="1"/><text x="63.8059%" y="319.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (3 samples, 0.24%)</title><rect x="63.4755%" y="357" width="0.2414%" height="15" fill="rgb(236,58,11)" fg:x="789" fg:w="3"/><text x="63.7255%" y="367.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="63.6364%" y="341" width="0.0805%" height="15" fill="rgb(249,63,35)" fg:x="791" fg:w="1"/><text x="63.8864%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.6364%" y="325" width="0.0805%" height="15" fill="rgb(252,114,16)" fg:x="791" fg:w="1"/><text x="63.8864%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.7973%" y="325" width="0.0805%" height="15" fill="rgb(254,151,24)" fg:x="793" fg:w="1"/><text x="64.0473%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="63.7973%" y="341" width="0.1609%" height="15" fill="rgb(253,54,39)" fg:x="793" fg:w="2"/><text x="64.0473%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="63.8777%" y="325" width="0.0805%" height="15" fill="rgb(243,25,45)" fg:x="794" fg:w="1"/><text x="64.1277%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.8777%" y="309" width="0.0805%" height="15" fill="rgb(234,134,9)" fg:x="794" fg:w="1"/><text x="64.1277%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="64.0386%" y="325" width="0.1609%" height="15" fill="rgb(227,166,31)" fg:x="796" fg:w="2"/><text x="64.2886%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="63.9582%" y="341" width="0.3218%" height="15" fill="rgb(245,143,41)" fg:x="795" fg:w="4"/><text x="64.2082%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.1995%" y="325" width="0.0805%" height="15" fill="rgb(238,181,32)" fg:x="798" fg:w="1"/><text x="64.4495%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.1995%" y="309" width="0.0805%" height="15" fill="rgb(224,113,18)" fg:x="798" fg:w="1"/><text x="64.4495%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.1995%" y="293" width="0.0805%" height="15" fill="rgb(240,229,28)" fg:x="798" fg:w="1"/><text x="64.4495%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="64.2800%" y="341" width="0.0805%" height="15" fill="rgb(250,185,3)" fg:x="799" fg:w="1"/><text x="64.5300%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4409%" y="309" width="0.0805%" height="15" fill="rgb(212,59,25)" fg:x="801" fg:w="1"/><text x="64.6909%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.5213%" y="309" width="0.0805%" height="15" fill="rgb(221,87,20)" fg:x="802" fg:w="1"/><text x="64.7713%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="64.4409%" y="325" width="0.2414%" height="15" fill="rgb(213,74,28)" fg:x="801" fg:w="3"/><text x="64.6909%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="64.6018%" y="309" width="0.0805%" height="15" fill="rgb(224,132,34)" fg:x="803" fg:w="1"/><text x="64.8518%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.6018%" y="293" width="0.0805%" height="15" fill="rgb(222,101,24)" fg:x="803" fg:w="1"/><text x="64.8518%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.6018%" y="277" width="0.0805%" height="15" fill="rgb(254,142,4)" fg:x="803" fg:w="1"/><text x="64.8518%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.6018%" y="261" width="0.0805%" height="15" fill="rgb(230,229,49)" fg:x="803" fg:w="1"/><text x="64.8518%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.6822%" y="325" width="0.0805%" height="15" fill="rgb(238,70,47)" fg:x="804" fg:w="1"/><text x="64.9322%" y="335.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.8431%" y="309" width="0.0805%" height="15" fill="rgb(231,160,17)" fg:x="806" fg:w="1"/><text x="65.0931%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="64.9236%" y="309" width="0.1609%" height="15" fill="rgb(218,68,53)" fg:x="807" fg:w="2"/><text x="65.1736%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.0040%" y="293" width="0.0805%" height="15" fill="rgb(236,111,10)" fg:x="808" fg:w="1"/><text x="65.2540%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.0040%" y="277" width="0.0805%" height="15" fill="rgb(224,34,41)" fg:x="808" fg:w="1"/><text x="65.2540%" y="287.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0040%" y="261" width="0.0805%" height="15" fill="rgb(241,118,19)" fg:x="808" fg:w="1"/><text x="65.2540%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="65.0845%" y="309" width="0.3218%" height="15" fill="rgb(238,129,25)" fg:x="809" fg:w="4"/><text x="65.3345%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (22 samples, 1.77%)</title><rect x="63.7168%" y="357" width="1.7699%" height="15" fill="rgb(238,22,31)" fg:x="792" fg:w="22"/><text x="63.9668%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.13%)</title><rect x="64.3604%" y="341" width="1.1263%" height="15" fill="rgb(222,174,48)" fg:x="800" fg:w="14"/><text x="64.6104%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.72%)</title><rect x="64.7627%" y="325" width="0.7241%" height="15" fill="rgb(206,152,40)" fg:x="805" fg:w="9"/><text x="65.0127%" y="335.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="65.4063%" y="309" width="0.0805%" height="15" fill="rgb(218,99,54)" fg:x="813" fg:w="1"/><text x="65.6563%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4063%" y="293" width="0.0805%" height="15" fill="rgb(220,174,26)" fg:x="813" fg:w="1"/><text x="65.6563%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="65.7281%" y="309" width="0.1609%" height="15" fill="rgb(245,116,9)" fg:x="817" fg:w="2"/><text x="65.9781%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="65.8085%" y="293" width="0.0805%" height="15" fill="rgb(209,72,35)" fg:x="818" fg:w="1"/><text x="66.0585%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="65.8085%" y="277" width="0.0805%" height="15" fill="rgb(226,126,21)" fg:x="818" fg:w="1"/><text x="66.0585%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="65.8085%" y="261" width="0.0805%" height="15" fill="rgb(227,192,1)" fg:x="818" fg:w="1"/><text x="66.0585%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 0.48%)</title><rect x="65.8890%" y="293" width="0.4827%" height="15" fill="rgb(237,180,29)" fg:x="819" fg:w="6"/><text x="66.1390%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.48%)</title><rect x="65.8890%" y="277" width="0.4827%" height="15" fill="rgb(230,197,35)" fg:x="819" fg:w="6"/><text x="66.1390%" y="287.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="65.9694%" y="261" width="0.4023%" height="15" fill="rgb(246,193,31)" fg:x="820" fg:w="5"/><text x="66.2194%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (11 samples, 0.88%)</title><rect x="65.5672%" y="325" width="0.8850%" height="15" fill="rgb(241,36,4)" fg:x="815" fg:w="11"/><text x="65.8172%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.56%)</title><rect x="65.8890%" y="309" width="0.5632%" height="15" fill="rgb(241,130,17)" fg:x="819" fg:w="7"/><text x="66.1390%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="66.3717%" y="293" width="0.0805%" height="15" fill="rgb(206,137,32)" fg:x="825" fg:w="1"/><text x="66.6217%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.05%)</title><rect x="65.4867%" y="357" width="1.0459%" height="15" fill="rgb(237,228,51)" fg:x="814" fg:w="13"/><text x="65.7367%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.05%)</title><rect x="65.4867%" y="341" width="1.0459%" height="15" fill="rgb(243,6,42)" fg:x="814" fg:w="13"/><text x="65.7367%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.4521%" y="325" width="0.0805%" height="15" fill="rgb(251,74,28)" fg:x="826" fg:w="1"/><text x="66.7021%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="66.5326%" y="325" width="0.2414%" height="15" fill="rgb(218,20,49)" fg:x="827" fg:w="3"/><text x="66.7826%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="66.5326%" y="309" width="0.2414%" height="15" fill="rgb(238,28,14)" fg:x="827" fg:w="3"/><text x="66.7826%" y="319.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="66.6935%" y="293" width="0.0805%" height="15" fill="rgb(229,40,46)" fg:x="829" fg:w="1"/><text x="66.9435%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (44 samples, 3.54%)</title><rect x="63.3146%" y="405" width="3.5398%" height="15" fill="rgb(244,195,20)" fg:x="787" fg:w="44"/><text x="63.5646%" y="415.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.46%)</title><rect x="63.3950%" y="389" width="3.4594%" height="15" fill="rgb(253,56,35)" fg:x="788" fg:w="43"/><text x="63.6450%" y="399.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.46%)</title><rect x="63.3950%" y="373" width="3.4594%" height="15" fill="rgb(210,149,44)" fg:x="788" fg:w="43"/><text x="63.6450%" y="383.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="66.5326%" y="357" width="0.3218%" height="15" fill="rgb(240,135,12)" fg:x="827" fg:w="4"/><text x="66.7826%" y="367.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="66.5326%" y="341" width="0.3218%" height="15" fill="rgb(251,24,50)" fg:x="827" fg:w="4"/><text x="66.7826%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="66.7739%" y="325" width="0.0805%" height="15" fill="rgb(243,200,47)" fg:x="830" fg:w="1"/><text x="67.0239%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="66.8544%" y="405" width="0.0805%" height="15" fill="rgb(224,166,26)" fg:x="831" fg:w="1"/><text x="67.1044%" y="415.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="66.8544%" y="389" width="0.0805%" height="15" fill="rgb(233,0,47)" fg:x="831" fg:w="1"/><text x="67.1044%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.9348%" y="373" width="0.0805%" height="15" fill="rgb(253,80,5)" fg:x="832" fg:w="1"/><text x="67.1848%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="66.9348%" y="405" width="0.1609%" height="15" fill="rgb(214,133,25)" fg:x="832" fg:w="2"/><text x="67.1848%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="66.9348%" y="389" width="0.1609%" height="15" fill="rgb(209,27,14)" fg:x="832" fg:w="2"/><text x="67.1848%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="67.0153%" y="373" width="0.0805%" height="15" fill="rgb(219,102,51)" fg:x="833" fg:w="1"/><text x="67.2653%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="67.0153%" y="357" width="0.0805%" height="15" fill="rgb(237,18,16)" fg:x="833" fg:w="1"/><text x="67.2653%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0957%" y="341" width="0.0805%" height="15" fill="rgb(241,85,17)" fg:x="834" fg:w="1"/><text x="67.3457%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="67.7393%" y="325" width="0.1609%" height="15" fill="rgb(236,90,42)" fg:x="842" fg:w="2"/><text x="67.9893%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.8198%" y="309" width="0.0805%" height="15" fill="rgb(249,57,21)" fg:x="843" fg:w="1"/><text x="68.0698%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="67.8198%" y="293" width="0.0805%" height="15" fill="rgb(243,12,36)" fg:x="843" fg:w="1"/><text x="68.0698%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.9002%" y="325" width="0.0805%" height="15" fill="rgb(253,128,47)" fg:x="844" fg:w="1"/><text x="68.1502%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="67.9807%" y="325" width="0.0805%" height="15" fill="rgb(207,33,20)" fg:x="845" fg:w="1"/><text x="68.2307%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.0611%" y="309" width="0.0805%" height="15" fill="rgb(233,215,35)" fg:x="846" fg:w="1"/><text x="68.3111%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.05%)</title><rect x="67.1762%" y="341" width="1.0459%" height="15" fill="rgb(249,188,52)" fg:x="835" fg:w="13"/><text x="67.4262%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="68.0611%" y="325" width="0.1609%" height="15" fill="rgb(225,12,32)" fg:x="846" fg:w="2"/><text x="68.3111%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.1416%" y="309" width="0.0805%" height="15" fill="rgb(247,98,14)" fg:x="847" fg:w="1"/><text x="68.3916%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.21%)</title><rect x="67.0957%" y="357" width="1.2068%" height="15" fill="rgb(247,219,48)" fg:x="834" fg:w="15"/><text x="67.3457%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="68.2220%" y="341" width="0.0805%" height="15" fill="rgb(253,60,48)" fg:x="848" fg:w="1"/><text x="68.4720%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.2220%" y="325" width="0.0805%" height="15" fill="rgb(245,15,52)" fg:x="848" fg:w="1"/><text x="68.4720%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.2220%" y="309" width="0.0805%" height="15" fill="rgb(220,133,28)" fg:x="848" fg:w="1"/><text x="68.4720%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.2220%" y="293" width="0.0805%" height="15" fill="rgb(217,180,4)" fg:x="848" fg:w="1"/><text x="68.4720%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (64 samples, 5.15%)</title><rect x="63.2341%" y="421" width="5.1488%" height="15" fill="rgb(251,24,1)" fg:x="786" fg:w="64"/><text x="63.4841%" y="431.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (16 samples, 1.29%)</title><rect x="67.0957%" y="405" width="1.2872%" height="15" fill="rgb(212,185,49)" fg:x="834" fg:w="16"/><text x="67.3457%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.29%)</title><rect x="67.0957%" y="389" width="1.2872%" height="15" fill="rgb(215,175,22)" fg:x="834" fg:w="16"/><text x="67.3457%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.29%)</title><rect x="67.0957%" y="373" width="1.2872%" height="15" fill="rgb(250,205,14)" fg:x="834" fg:w="16"/><text x="67.3457%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="68.3025%" y="357" width="0.0805%" height="15" fill="rgb(225,211,22)" fg:x="849" fg:w="1"/><text x="68.5525%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="68.3025%" y="341" width="0.0805%" height="15" fill="rgb(251,179,42)" fg:x="849" fg:w="1"/><text x="68.5525%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.3025%" y="325" width="0.0805%" height="15" fill="rgb(208,216,51)" fg:x="849" fg:w="1"/><text x="68.5525%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.3025%" y="309" width="0.0805%" height="15" fill="rgb(235,36,11)" fg:x="849" fg:w="1"/><text x="68.5525%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3025%" y="293" width="0.0805%" height="15" fill="rgb(213,189,28)" fg:x="849" fg:w="1"/><text x="68.5525%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (650 samples, 52.29%)</title><rect x="16.4119%" y="517" width="52.2928%" height="15" fill="rgb(227,203,42)" fg:x="204" fg:w="650"/><text x="16.6619%" y="527.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::Observ..</text></g><g><title>plugins_core::looking::model::qualify_name (637 samples, 51.25%)</title><rect x="17.4578%" y="501" width="51.2470%" height="15" fill="rgb(244,72,36)" fg:x="217" fg:w="637"/><text x="17.7078%" y="511.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (637 samples, 51.25%)</title><rect x="17.4578%" y="485" width="51.2470%" height="15" fill="rgb(213,53,17)" fg:x="217" fg:w="637"/><text x="17.7078%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (637 samples, 51.25%)</title><rect x="17.4578%" y="469" width="51.2470%" height="15" fill="rgb(207,167,3)" fg:x="217" fg:w="637"/><text x="17.7078%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (636 samples, 51.17%)</title><rect x="17.5382%" y="453" width="51.1665%" height="15" fill="rgb(216,98,30)" fg:x="218" fg:w="636"/><text x="17.7882%" y="463.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (70 samples, 5.63%)</title><rect x="63.0732%" y="437" width="5.6315%" height="15" fill="rgb(236,123,15)" fg:x="784" fg:w="70"/><text x="63.3232%" y="447.50">indefin..</text></g><g><title>indefinite::irregular::Irregular::check (4 samples, 0.32%)</title><rect x="68.3829%" y="421" width="0.3218%" height="15" fill="rgb(248,81,50)" fg:x="850" fg:w="4"/><text x="68.6329%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.7047%" y="517" width="0.0805%" height="15" fill="rgb(214,120,4)" fg:x="854" fg:w="1"/><text x="68.9547%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="68.7852%" y="485" width="0.0805%" height="15" fill="rgb(208,179,34)" fg:x="855" fg:w="1"/><text x="69.0352%" y="495.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="68.7852%" y="469" width="0.0805%" height="15" fill="rgb(227,140,7)" fg:x="855" fg:w="1"/><text x="69.0352%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (2 samples, 0.16%)</title><rect x="68.7852%" y="517" width="0.1609%" height="15" fill="rgb(214,22,6)" fg:x="855" fg:w="2"/><text x="69.0352%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="68.7852%" y="501" width="0.1609%" height="15" fill="rgb(207,137,27)" fg:x="855" fg:w="2"/><text x="69.0352%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="68.8656%" y="485" width="0.0805%" height="15" fill="rgb(210,8,46)" fg:x="856" fg:w="1"/><text x="69.1156%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.8656%" y="469" width="0.0805%" height="15" fill="rgb(240,16,54)" fg:x="856" fg:w="1"/><text x="69.1156%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="453" width="0.0805%" height="15" fill="rgb(211,209,29)" fg:x="856" fg:w="1"/><text x="69.1156%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.8656%" y="437" width="0.0805%" height="15" fill="rgb(226,228,24)" fg:x="856" fg:w="1"/><text x="69.1156%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="421" width="0.0805%" height="15" fill="rgb(222,84,9)" fg:x="856" fg:w="1"/><text x="69.1156%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="405" width="0.0805%" height="15" fill="rgb(234,203,30)" fg:x="856" fg:w="1"/><text x="69.1156%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="389" width="0.0805%" height="15" fill="rgb(238,109,14)" fg:x="856" fg:w="1"/><text x="69.1156%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.8656%" y="373" width="0.0805%" height="15" fill="rgb(233,206,34)" fg:x="856" fg:w="1"/><text x="69.1156%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="357" width="0.0805%" height="15" fill="rgb(220,167,47)" fg:x="856" fg:w="1"/><text x="69.1156%" y="367.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="341" width="0.0805%" height="15" fill="rgb(238,105,10)" fg:x="856" fg:w="1"/><text x="69.1156%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="325" width="0.0805%" height="15" fill="rgb(213,227,17)" fg:x="856" fg:w="1"/><text x="69.1156%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="68.8656%" y="309" width="0.0805%" height="15" fill="rgb(217,132,38)" fg:x="856" fg:w="1"/><text x="69.1156%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="68.8656%" y="293" width="0.0805%" height="15" fill="rgb(242,146,4)" fg:x="856" fg:w="1"/><text x="69.1156%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.8656%" y="277" width="0.0805%" height="15" fill="rgb(212,61,9)" fg:x="856" fg:w="1"/><text x="69.1156%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.8656%" y="261" width="0.0805%" height="15" fill="rgb(247,126,22)" fg:x="856" fg:w="1"/><text x="69.1156%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="68.8656%" y="245" width="0.0805%" height="15" fill="rgb(220,196,2)" fg:x="856" fg:w="1"/><text x="69.1156%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="68.8656%" y="229" width="0.0805%" height="15" fill="rgb(208,46,4)" fg:x="856" fg:w="1"/><text x="69.1156%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="68.8656%" y="213" width="0.0805%" height="15" fill="rgb(252,104,46)" fg:x="856" fg:w="1"/><text x="69.1156%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="68.8656%" y="197" width="0.0805%" height="15" fill="rgb(237,152,48)" fg:x="856" fg:w="1"/><text x="69.1156%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.8656%" y="181" width="0.0805%" height="15" fill="rgb(221,59,37)" fg:x="856" fg:w="1"/><text x="69.1156%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.0265%" y="469" width="0.0805%" height="15" fill="rgb(209,202,51)" fg:x="858" fg:w="1"/><text x="69.2765%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="69.2679%" y="389" width="0.0805%" height="15" fill="rgb(228,81,30)" fg:x="861" fg:w="1"/><text x="69.5179%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="69.2679%" y="373" width="0.0805%" height="15" fill="rgb(227,42,39)" fg:x="861" fg:w="1"/><text x="69.5179%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.2679%" y="357" width="0.0805%" height="15" fill="rgb(221,26,2)" fg:x="861" fg:w="1"/><text x="69.5179%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2679%" y="341" width="0.0805%" height="15" fill="rgb(254,61,31)" fg:x="861" fg:w="1"/><text x="69.5179%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2679%" y="325" width="0.0805%" height="15" fill="rgb(222,173,38)" fg:x="861" fg:w="1"/><text x="69.5179%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2679%" y="309" width="0.0805%" height="15" fill="rgb(218,50,12)" fg:x="861" fg:w="1"/><text x="69.5179%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2679%" y="293" width="0.0805%" height="15" fill="rgb(223,88,40)" fg:x="861" fg:w="1"/><text x="69.5179%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2679%" y="277" width="0.0805%" height="15" fill="rgb(237,54,19)" fg:x="861" fg:w="1"/><text x="69.5179%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.2679%" y="261" width="0.0805%" height="15" fill="rgb(251,129,25)" fg:x="861" fg:w="1"/><text x="69.5179%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.2679%" y="245" width="0.0805%" height="15" fill="rgb(238,97,19)" fg:x="861" fg:w="1"/><text x="69.5179%" y="255.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.3484%" y="293" width="0.0805%" height="15" fill="rgb(240,169,18)" fg:x="862" fg:w="1"/><text x="69.5984%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.4288%" y="229" width="0.0805%" height="15" fill="rgb(230,187,49)" fg:x="863" fg:w="1"/><text x="69.6788%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4288%" y="213" width="0.0805%" height="15" fill="rgb(209,44,26)" fg:x="863" fg:w="1"/><text x="69.6788%" y="223.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="69.3484%" y="373" width="0.2414%" height="15" fill="rgb(244,0,6)" fg:x="862" fg:w="3"/><text x="69.5984%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.3484%" y="357" width="0.2414%" height="15" fill="rgb(248,18,21)" fg:x="862" fg:w="3"/><text x="69.5984%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.3484%" y="341" width="0.2414%" height="15" fill="rgb(245,180,19)" fg:x="862" fg:w="3"/><text x="69.5984%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.3484%" y="325" width="0.2414%" height="15" fill="rgb(252,118,36)" fg:x="862" fg:w="3"/><text x="69.5984%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.3484%" y="309" width="0.2414%" height="15" fill="rgb(210,224,19)" fg:x="862" fg:w="3"/><text x="69.5984%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.4288%" y="293" width="0.1609%" height="15" fill="rgb(218,30,24)" fg:x="863" fg:w="2"/><text x="69.6788%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4288%" y="277" width="0.1609%" height="15" fill="rgb(219,75,50)" fg:x="863" fg:w="2"/><text x="69.6788%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.4288%" y="261" width="0.1609%" height="15" fill="rgb(234,72,50)" fg:x="863" fg:w="2"/><text x="69.6788%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4288%" y="245" width="0.1609%" height="15" fill="rgb(219,100,48)" fg:x="863" fg:w="2"/><text x="69.6788%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.5093%" y="229" width="0.0805%" height="15" fill="rgb(253,5,41)" fg:x="864" fg:w="1"/><text x="69.7593%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="69.5093%" y="213" width="0.0805%" height="15" fill="rgb(247,181,11)" fg:x="864" fg:w="1"/><text x="69.7593%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5897%" y="293" width="0.0805%" height="15" fill="rgb(222,223,25)" fg:x="865" fg:w="1"/><text x="69.8397%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5897%" y="277" width="0.0805%" height="15" fill="rgb(214,198,28)" fg:x="865" fg:w="1"/><text x="69.8397%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5897%" y="261" width="0.0805%" height="15" fill="rgb(230,46,43)" fg:x="865" fg:w="1"/><text x="69.8397%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5897%" y="245" width="0.0805%" height="15" fill="rgb(233,65,53)" fg:x="865" fg:w="1"/><text x="69.8397%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5897%" y="229" width="0.0805%" height="15" fill="rgb(221,121,27)" fg:x="865" fg:w="1"/><text x="69.8397%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5897%" y="213" width="0.0805%" height="15" fill="rgb(247,70,47)" fg:x="865" fg:w="1"/><text x="69.8397%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="69.5897%" y="197" width="0.0805%" height="15" fill="rgb(228,85,35)" fg:x="865" fg:w="1"/><text x="69.8397%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.5897%" y="181" width="0.0805%" height="15" fill="rgb(209,50,18)" fg:x="865" fg:w="1"/><text x="69.8397%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.5897%" y="165" width="0.0805%" height="15" fill="rgb(250,19,35)" fg:x="865" fg:w="1"/><text x="69.8397%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="69.5897%" y="149" width="0.0805%" height="15" fill="rgb(253,107,29)" fg:x="865" fg:w="1"/><text x="69.8397%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.5897%" y="133" width="0.0805%" height="15" fill="rgb(252,179,29)" fg:x="865" fg:w="1"/><text x="69.8397%" y="143.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.6702%" y="293" width="0.0805%" height="15" fill="rgb(238,194,6)" fg:x="866" fg:w="1"/><text x="69.9202%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6702%" y="277" width="0.0805%" height="15" fill="rgb(238,164,29)" fg:x="866" fg:w="1"/><text x="69.9202%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6702%" y="261" width="0.0805%" height="15" fill="rgb(224,25,9)" fg:x="866" fg:w="1"/><text x="69.9202%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="69.5897%" y="341" width="0.4023%" height="15" fill="rgb(244,153,23)" fg:x="865" fg:w="5"/><text x="69.8397%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="69.5897%" y="325" width="0.4023%" height="15" fill="rgb(212,203,14)" fg:x="865" fg:w="5"/><text x="69.8397%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="69.5897%" y="309" width="0.4023%" height="15" fill="rgb(220,164,20)" fg:x="865" fg:w="5"/><text x="69.8397%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="69.7506%" y="293" width="0.2414%" height="15" fill="rgb(222,203,48)" fg:x="867" fg:w="3"/><text x="70.0006%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="69.7506%" y="277" width="0.2414%" height="15" fill="rgb(215,159,22)" fg:x="867" fg:w="3"/><text x="70.0006%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="69.8311%" y="261" width="0.1609%" height="15" fill="rgb(216,183,47)" fg:x="868" fg:w="2"/><text x="70.0811%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.8311%" y="245" width="0.1609%" height="15" fill="rgb(229,195,25)" fg:x="868" fg:w="2"/><text x="70.0811%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8311%" y="229" width="0.1609%" height="15" fill="rgb(224,132,51)" fg:x="868" fg:w="2"/><text x="70.0811%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="69.8311%" y="213" width="0.1609%" height="15" fill="rgb(240,63,7)" fg:x="868" fg:w="2"/><text x="70.0811%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.8311%" y="197" width="0.1609%" height="15" fill="rgb(249,182,41)" fg:x="868" fg:w="2"/><text x="70.0811%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8311%" y="181" width="0.1609%" height="15" fill="rgb(243,47,26)" fg:x="868" fg:w="2"/><text x="70.0811%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="69.8311%" y="165" width="0.1609%" height="15" fill="rgb(233,48,2)" fg:x="868" fg:w="2"/><text x="70.0811%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.8311%" y="149" width="0.1609%" height="15" fill="rgb(244,165,34)" fg:x="868" fg:w="2"/><text x="70.0811%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.8311%" y="133" width="0.1609%" height="15" fill="rgb(207,89,7)" fg:x="868" fg:w="2"/><text x="70.0811%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="69.8311%" y="117" width="0.1609%" height="15" fill="rgb(244,117,36)" fg:x="868" fg:w="2"/><text x="70.0811%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.8311%" y="101" width="0.1609%" height="15" fill="rgb(226,144,34)" fg:x="868" fg:w="2"/><text x="70.0811%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.9115%" y="85" width="0.0805%" height="15" fill="rgb(213,23,19)" fg:x="869" fg:w="1"/><text x="70.1615%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.9115%" y="69" width="0.0805%" height="15" fill="rgb(217,75,12)" fg:x="869" fg:w="1"/><text x="70.1615%" y="79.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9115%" y="53" width="0.0805%" height="15" fill="rgb(224,159,17)" fg:x="869" fg:w="1"/><text x="70.1615%" y="63.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9115%" y="37" width="0.0805%" height="15" fill="rgb(217,118,1)" fg:x="869" fg:w="1"/><text x="70.1615%" y="47.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (9 samples, 0.72%)</title><rect x="69.3484%" y="389" width="0.7241%" height="15" fill="rgb(232,180,48)" fg:x="862" fg:w="9"/><text x="69.5984%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="69.5897%" y="373" width="0.4827%" height="15" fill="rgb(230,27,33)" fg:x="865" fg:w="6"/><text x="69.8397%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="69.5897%" y="357" width="0.4827%" height="15" fill="rgb(205,31,21)" fg:x="865" fg:w="6"/><text x="69.8397%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.9920%" y="341" width="0.0805%" height="15" fill="rgb(253,59,4)" fg:x="870" fg:w="1"/><text x="70.2420%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.9920%" y="325" width="0.0805%" height="15" fill="rgb(224,201,9)" fg:x="870" fg:w="1"/><text x="70.2420%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9920%" y="309" width="0.0805%" height="15" fill="rgb(229,206,30)" fg:x="870" fg:w="1"/><text x="70.2420%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9920%" y="293" width="0.0805%" height="15" fill="rgb(212,67,47)" fg:x="870" fg:w="1"/><text x="70.2420%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="70.0724%" y="389" width="0.0805%" height="15" fill="rgb(211,96,50)" fg:x="871" fg:w="1"/><text x="70.3224%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.0724%" y="373" width="0.0805%" height="15" fill="rgb(252,114,18)" fg:x="871" fg:w="1"/><text x="70.3224%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.0724%" y="357" width="0.0805%" height="15" fill="rgb(223,58,37)" fg:x="871" fg:w="1"/><text x="70.3224%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0724%" y="341" width="0.0805%" height="15" fill="rgb(237,70,4)" fg:x="871" fg:w="1"/><text x="70.3224%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0724%" y="325" width="0.0805%" height="15" fill="rgb(244,85,46)" fg:x="871" fg:w="1"/><text x="70.3224%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0724%" y="309" width="0.0805%" height="15" fill="rgb(223,39,52)" fg:x="871" fg:w="1"/><text x="70.3224%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0724%" y="293" width="0.0805%" height="15" fill="rgb(218,200,14)" fg:x="871" fg:w="1"/><text x="70.3224%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (13 samples, 1.05%)</title><rect x="69.2679%" y="421" width="1.0459%" height="15" fill="rgb(208,171,16)" fg:x="861" fg:w="13"/><text x="69.5179%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (13 samples, 1.05%)</title><rect x="69.2679%" y="405" width="1.0459%" height="15" fill="rgb(234,200,18)" fg:x="861" fg:w="13"/><text x="69.5179%" y="415.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="70.1529%" y="389" width="0.1609%" height="15" fill="rgb(228,45,11)" fg:x="872" fg:w="2"/><text x="70.4029%" y="399.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.1529%" y="373" width="0.1609%" height="15" fill="rgb(237,182,11)" fg:x="872" fg:w="2"/><text x="70.4029%" y="383.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.1529%" y="357" width="0.1609%" height="15" fill="rgb(241,175,49)" fg:x="872" fg:w="2"/><text x="70.4029%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.2333%" y="341" width="0.0805%" height="15" fill="rgb(247,38,35)" fg:x="873" fg:w="1"/><text x="70.4833%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2333%" y="325" width="0.0805%" height="15" fill="rgb(228,39,49)" fg:x="873" fg:w="1"/><text x="70.4833%" y="335.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.37%)</title><rect x="69.0265%" y="485" width="1.3677%" height="15" fill="rgb(226,101,26)" fg:x="858" fg:w="17"/><text x="69.2765%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.29%)</title><rect x="69.1070%" y="469" width="1.2872%" height="15" fill="rgb(206,141,19)" fg:x="859" fg:w="16"/><text x="69.3570%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.29%)</title><rect x="69.1070%" y="453" width="1.2872%" height="15" fill="rgb(211,200,13)" fg:x="859" fg:w="16"/><text x="69.3570%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (15 samples, 1.21%)</title><rect x="69.1874%" y="437" width="1.2068%" height="15" fill="rgb(241,121,6)" fg:x="860" fg:w="15"/><text x="69.4374%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.3138%" y="421" width="0.0805%" height="15" fill="rgb(234,221,29)" fg:x="874" fg:w="1"/><text x="70.5638%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (693 samples, 55.75%)</title><rect x="14.8029%" y="741" width="55.7522%" height="15" fill="rgb(229,136,5)" fg:x="184" fg:w="693"/><text x="15.0529%" y="751.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (693 samples, 55.75%)</title><rect x="14.8029%" y="725" width="55.7522%" height="15" fill="rgb(238,36,11)" fg:x="184" fg:w="693"/><text x="15.0529%" y="735.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (693 samples, 55.75%)</title><rect x="14.8029%" y="709" width="55.7522%" height="15" fill="rgb(251,55,41)" fg:x="184" fg:w="693"/><text x="15.0529%" y="719.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (693 samples, 55.75%)</title><rect x="14.8029%" y="693" width="55.7522%" height="15" fill="rgb(242,34,40)" fg:x="184" fg:w="693"/><text x="15.0529%" y="703.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (676 samples, 54.38%)</title><rect x="16.1706%" y="677" width="54.3846%" height="15" fill="rgb(215,42,17)" fg:x="201" fg:w="676"/><text x="16.4206%" y="687.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (676 samples, 54.38%)</title><rect x="16.1706%" y="661" width="54.3846%" height="15" fill="rgb(207,44,46)" fg:x="201" fg:w="676"/><text x="16.4206%" y="671.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (676 samples, 54.38%)</title><rect x="16.1706%" y="645" width="54.3846%" height="15" fill="rgb(211,206,28)" fg:x="201" fg:w="676"/><text x="16.4206%" y="655.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (676 samples, 54.38%)</title><rect x="16.1706%" y="629" width="54.3846%" height="15" fill="rgb(237,167,16)" fg:x="201" fg:w="676"/><text x="16.4206%" y="639.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (676 samples, 54.38%)</title><rect x="16.1706%" y="613" width="54.3846%" height="15" fill="rgb(233,66,6)" fg:x="201" fg:w="676"/><text x="16.4206%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (676 samples, 54.38%)</title><rect x="16.1706%" y="597" width="54.3846%" height="15" fill="rgb(246,123,29)" fg:x="201" fg:w="676"/><text x="16.4206%" y="607.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (675 samples, 54.30%)</title><rect x="16.2510%" y="581" width="54.3041%" height="15" fill="rgb(209,62,40)" fg:x="202" fg:w="675"/><text x="16.5010%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (675 samples, 54.30%)</title><rect x="16.2510%" y="565" width="54.3041%" height="15" fill="rgb(218,4,25)" fg:x="202" fg:w="675"/><text x="16.5010%" y="575.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (675 samples, 54.30%)</title><rect x="16.2510%" y="549" width="54.3041%" height="15" fill="rgb(253,91,49)" fg:x="202" fg:w="675"/><text x="16.5010%" y="559.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (674 samples, 54.22%)</title><rect x="16.3315%" y="533" width="54.2237%" height="15" fill="rgb(228,155,29)" fg:x="203" fg:w="674"/><text x="16.5815%" y="543.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (20 samples, 1.61%)</title><rect x="68.9461%" y="517" width="1.6090%" height="15" fill="rgb(243,57,37)" fg:x="857" fg:w="20"/><text x="69.1961%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (20 samples, 1.61%)</title><rect x="68.9461%" y="501" width="1.6090%" height="15" fill="rgb(244,167,17)" fg:x="857" fg:w="20"/><text x="69.1961%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.3942%" y="485" width="0.1609%" height="15" fill="rgb(207,181,38)" fg:x="875" fg:w="2"/><text x="70.6442%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3942%" y="469" width="0.1609%" height="15" fill="rgb(211,8,23)" fg:x="875" fg:w="2"/><text x="70.6442%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="70.3942%" y="453" width="0.1609%" height="15" fill="rgb(235,11,44)" fg:x="875" fg:w="2"/><text x="70.6442%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="70.4747%" y="437" width="0.0805%" height="15" fill="rgb(248,18,52)" fg:x="876" fg:w="1"/><text x="70.7247%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="70.4747%" y="421" width="0.0805%" height="15" fill="rgb(208,4,7)" fg:x="876" fg:w="1"/><text x="70.7247%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4747%" y="405" width="0.0805%" height="15" fill="rgb(240,17,39)" fg:x="876" fg:w="1"/><text x="70.7247%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4747%" y="389" width="0.0805%" height="15" fill="rgb(207,170,3)" fg:x="876" fg:w="1"/><text x="70.7247%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.4747%" y="373" width="0.0805%" height="15" fill="rgb(236,100,52)" fg:x="876" fg:w="1"/><text x="70.7247%" y="383.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.5551%" y="693" width="0.0805%" height="15" fill="rgb(246,78,51)" fg:x="877" fg:w="1"/><text x="70.8051%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5551%" y="677" width="0.0805%" height="15" fill="rgb(211,17,15)" fg:x="877" fg:w="1"/><text x="70.8051%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.5551%" y="661" width="0.0805%" height="15" fill="rgb(209,59,46)" fg:x="877" fg:w="1"/><text x="70.8051%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.5551%" y="645" width="0.0805%" height="15" fill="rgb(210,92,25)" fg:x="877" fg:w="1"/><text x="70.8051%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.5551%" y="629" width="0.0805%" height="15" fill="rgb(238,174,52)" fg:x="877" fg:w="1"/><text x="70.8051%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="70.5551%" y="741" width="0.2414%" height="15" fill="rgb(230,73,7)" fg:x="877" fg:w="3"/><text x="70.8051%" y="751.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="70.5551%" y="725" width="0.2414%" height="15" fill="rgb(243,124,40)" fg:x="877" fg:w="3"/><text x="70.8051%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (3 samples, 0.24%)</title><rect x="70.5551%" y="709" width="0.2414%" height="15" fill="rgb(244,170,11)" fg:x="877" fg:w="3"/><text x="70.8051%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6356%" y="693" width="0.1609%" height="15" fill="rgb(207,114,54)" fg:x="878" fg:w="2"/><text x="70.8856%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6356%" y="677" width="0.1609%" height="15" fill="rgb(205,42,20)" fg:x="878" fg:w="2"/><text x="70.8856%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="70.7160%" y="661" width="0.0805%" height="15" fill="rgb(230,30,28)" fg:x="879" fg:w="1"/><text x="70.9660%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.7160%" y="645" width="0.0805%" height="15" fill="rgb(205,73,54)" fg:x="879" fg:w="1"/><text x="70.9660%" y="655.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.7160%" y="629" width="0.0805%" height="15" fill="rgb(254,227,23)" fg:x="879" fg:w="1"/><text x="70.9660%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7160%" y="613" width="0.0805%" height="15" fill="rgb(228,202,34)" fg:x="879" fg:w="1"/><text x="70.9660%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.7160%" y="597" width="0.0805%" height="15" fill="rgb(222,225,37)" fg:x="879" fg:w="1"/><text x="70.9660%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7160%" y="581" width="0.0805%" height="15" fill="rgb(221,14,54)" fg:x="879" fg:w="1"/><text x="70.9660%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7160%" y="565" width="0.0805%" height="15" fill="rgb(254,102,2)" fg:x="879" fg:w="1"/><text x="70.9660%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7160%" y="549" width="0.0805%" height="15" fill="rgb(232,104,17)" fg:x="879" fg:w="1"/><text x="70.9660%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7160%" y="533" width="0.0805%" height="15" fill="rgb(250,220,14)" fg:x="879" fg:w="1"/><text x="70.9660%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="70.7965%" y="709" width="0.0805%" height="15" fill="rgb(241,158,9)" fg:x="880" fg:w="1"/><text x="71.0465%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7965%" y="693" width="0.0805%" height="15" fill="rgb(246,9,43)" fg:x="880" fg:w="1"/><text x="71.0465%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.7965%" y="677" width="0.0805%" height="15" fill="rgb(206,73,33)" fg:x="880" fg:w="1"/><text x="71.0465%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.7965%" y="661" width="0.0805%" height="15" fill="rgb(222,79,8)" fg:x="880" fg:w="1"/><text x="71.0465%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.7965%" y="645" width="0.0805%" height="15" fill="rgb(234,8,54)" fg:x="880" fg:w="1"/><text x="71.0465%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.7965%" y="629" width="0.0805%" height="15" fill="rgb(209,134,38)" fg:x="880" fg:w="1"/><text x="71.0465%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7965%" y="613" width="0.0805%" height="15" fill="rgb(230,127,29)" fg:x="880" fg:w="1"/><text x="71.0465%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.7965%" y="597" width="0.0805%" height="15" fill="rgb(242,44,41)" fg:x="880" fg:w="1"/><text x="71.0465%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.7965%" y="581" width="0.0805%" height="15" fill="rgb(222,56,43)" fg:x="880" fg:w="1"/><text x="71.0465%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.7965%" y="565" width="0.0805%" height="15" fill="rgb(238,39,47)" fg:x="880" fg:w="1"/><text x="71.0465%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.7965%" y="549" width="0.0805%" height="15" fill="rgb(226,79,43)" fg:x="880" fg:w="1"/><text x="71.0465%" y="559.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.7965%" y="533" width="0.0805%" height="15" fill="rgb(242,105,53)" fg:x="880" fg:w="1"/><text x="71.0465%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7965%" y="517" width="0.0805%" height="15" fill="rgb(251,132,46)" fg:x="880" fg:w="1"/><text x="71.0465%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9574%" y="565" width="0.0805%" height="15" fill="rgb(231,77,14)" fg:x="882" fg:w="1"/><text x="71.2074%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.9574%" y="549" width="0.0805%" height="15" fill="rgb(240,135,9)" fg:x="882" fg:w="1"/><text x="71.2074%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9574%" y="533" width="0.0805%" height="15" fill="rgb(248,109,14)" fg:x="882" fg:w="1"/><text x="71.2074%" y="543.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="70.8769%" y="677" width="0.2414%" height="15" fill="rgb(227,146,52)" fg:x="881" fg:w="3"/><text x="71.1269%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="70.8769%" y="661" width="0.2414%" height="15" fill="rgb(232,54,3)" fg:x="881" fg:w="3"/><text x="71.1269%" y="671.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="70.8769%" y="645" width="0.2414%" height="15" fill="rgb(229,201,43)" fg:x="881" fg:w="3"/><text x="71.1269%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.9574%" y="629" width="0.1609%" height="15" fill="rgb(252,161,33)" fg:x="882" fg:w="2"/><text x="71.2074%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.9574%" y="613" width="0.1609%" height="15" fill="rgb(226,146,40)" fg:x="882" fg:w="2"/><text x="71.2074%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.9574%" y="597" width="0.1609%" height="15" fill="rgb(219,47,25)" fg:x="882" fg:w="2"/><text x="71.2074%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.9574%" y="581" width="0.1609%" height="15" fill="rgb(250,135,13)" fg:x="882" fg:w="2"/><text x="71.2074%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0378%" y="565" width="0.0805%" height="15" fill="rgb(219,229,18)" fg:x="883" fg:w="1"/><text x="71.2878%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0378%" y="549" width="0.0805%" height="15" fill="rgb(217,152,27)" fg:x="883" fg:w="1"/><text x="71.2878%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0378%" y="533" width="0.0805%" height="15" fill="rgb(225,71,47)" fg:x="883" fg:w="1"/><text x="71.2878%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0378%" y="517" width="0.0805%" height="15" fill="rgb(220,139,14)" fg:x="883" fg:w="1"/><text x="71.2878%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.0378%" y="501" width="0.0805%" height="15" fill="rgb(247,54,32)" fg:x="883" fg:w="1"/><text x="71.2878%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.0378%" y="485" width="0.0805%" height="15" fill="rgb(252,131,39)" fg:x="883" fg:w="1"/><text x="71.2878%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="71.0378%" y="469" width="0.0805%" height="15" fill="rgb(210,108,39)" fg:x="883" fg:w="1"/><text x="71.2878%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="71.0378%" y="453" width="0.0805%" height="15" fill="rgb(205,23,29)" fg:x="883" fg:w="1"/><text x="71.2878%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (4 samples, 0.32%)</title><rect x="70.8769%" y="693" width="0.3218%" height="15" fill="rgb(246,139,46)" fg:x="881" fg:w="4"/><text x="71.1269%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1183%" y="677" width="0.0805%" height="15" fill="rgb(250,81,26)" fg:x="884" fg:w="1"/><text x="71.3683%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1183%" y="661" width="0.0805%" height="15" fill="rgb(214,104,7)" fg:x="884" fg:w="1"/><text x="71.3683%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.1183%" y="645" width="0.0805%" height="15" fill="rgb(233,189,8)" fg:x="884" fg:w="1"/><text x="71.3683%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1183%" y="629" width="0.0805%" height="15" fill="rgb(228,141,17)" fg:x="884" fg:w="1"/><text x="71.3683%" y="639.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="71.1183%" y="613" width="0.0805%" height="15" fill="rgb(247,157,1)" fg:x="884" fg:w="1"/><text x="71.3683%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (6 samples, 0.48%)</title><rect x="70.7965%" y="741" width="0.4827%" height="15" fill="rgb(249,225,5)" fg:x="880" fg:w="6"/><text x="71.0465%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="70.7965%" y="725" width="0.4827%" height="15" fill="rgb(242,55,13)" fg:x="880" fg:w="6"/><text x="71.0465%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="70.8769%" y="709" width="0.4023%" height="15" fill="rgb(230,49,50)" fg:x="881" fg:w="5"/><text x="71.1269%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="71.1987%" y="693" width="0.0805%" height="15" fill="rgb(241,111,38)" fg:x="885" fg:w="1"/><text x="71.4487%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.1987%" y="677" width="0.0805%" height="15" fill="rgb(252,155,4)" fg:x="885" fg:w="1"/><text x="71.4487%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.1987%" y="661" width="0.0805%" height="15" fill="rgb(212,69,32)" fg:x="885" fg:w="1"/><text x="71.4487%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1987%" y="645" width="0.0805%" height="15" fill="rgb(243,107,47)" fg:x="885" fg:w="1"/><text x="71.4487%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1987%" y="629" width="0.0805%" height="15" fill="rgb(247,130,12)" fg:x="885" fg:w="1"/><text x="71.4487%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.1987%" y="613" width="0.0805%" height="15" fill="rgb(233,74,16)" fg:x="885" fg:w="1"/><text x="71.4487%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.1987%" y="597" width="0.0805%" height="15" fill="rgb(208,58,18)" fg:x="885" fg:w="1"/><text x="71.4487%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.1987%" y="581" width="0.0805%" height="15" fill="rgb(242,225,1)" fg:x="885" fg:w="1"/><text x="71.4487%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1987%" y="565" width="0.0805%" height="15" fill="rgb(249,39,40)" fg:x="885" fg:w="1"/><text x="71.4487%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.2792%" y="741" width="0.1609%" height="15" fill="rgb(207,72,44)" fg:x="886" fg:w="2"/><text x="71.5292%" y="751.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::ops::deref::Deref&gt;::deref (1 samples, 0.08%)</title><rect x="71.4401%" y="709" width="0.0805%" height="15" fill="rgb(215,193,12)" fg:x="888" fg:w="1"/><text x="71.6901%" y="719.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.24%)</title><rect x="71.4401%" y="741" width="0.2414%" height="15" fill="rgb(248,41,39)" fg:x="888" fg:w="3"/><text x="71.6901%" y="751.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="71.4401%" y="725" width="0.2414%" height="15" fill="rgb(253,85,4)" fg:x="888" fg:w="3"/><text x="71.6901%" y="735.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="71.5205%" y="709" width="0.1609%" height="15" fill="rgb(243,70,31)" fg:x="889" fg:w="2"/><text x="71.7705%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.6010%" y="693" width="0.0805%" height="15" fill="rgb(253,195,26)" fg:x="890" fg:w="1"/><text x="71.8510%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6010%" y="677" width="0.0805%" height="15" fill="rgb(243,42,11)" fg:x="890" fg:w="1"/><text x="71.8510%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.6010%" y="661" width="0.0805%" height="15" fill="rgb(239,66,17)" fg:x="890" fg:w="1"/><text x="71.8510%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.6010%" y="645" width="0.0805%" height="15" fill="rgb(217,132,21)" fg:x="890" fg:w="1"/><text x="71.8510%" y="655.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="71.6010%" y="629" width="0.0805%" height="15" fill="rgb(252,202,21)" fg:x="890" fg:w="1"/><text x="71.8510%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (892 samples, 71.76%)</title><rect x="0.0000%" y="805" width="71.7619%" height="15" fill="rgb(233,98,36)" fg:x="0" fg:w="892"/><text x="0.2500%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (892 samples, 71.76%)</title><rect x="0.0000%" y="789" width="71.7619%" height="15" fill="rgb(216,153,54)" fg:x="0" fg:w="892"/><text x="0.2500%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (892 samples, 71.76%)</title><rect x="0.0000%" y="773" width="71.7619%" height="15" fill="rgb(250,99,7)" fg:x="0" fg:w="892"/><text x="0.2500%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (708 samples, 56.96%)</title><rect x="14.8029%" y="757" width="56.9590%" height="15" fill="rgb(207,56,50)" fg:x="184" fg:w="708"/><text x="15.0529%" y="767.50">engine::session::Session::evaluate_and_perform</text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="71.6814%" y="741" width="0.0805%" height="15" fill="rgb(244,61,34)" fg:x="891" fg:w="1"/><text x="71.9314%" y="751.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="71.6814%" y="725" width="0.0805%" height="15" fill="rgb(241,50,38)" fg:x="891" fg:w="1"/><text x="71.9314%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="709" width="0.0805%" height="15" fill="rgb(212,166,30)" fg:x="891" fg:w="1"/><text x="71.9314%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6814%" y="693" width="0.0805%" height="15" fill="rgb(249,127,32)" fg:x="891" fg:w="1"/><text x="71.9314%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="677" width="0.0805%" height="15" fill="rgb(209,103,0)" fg:x="891" fg:w="1"/><text x="71.9314%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="661" width="0.0805%" height="15" fill="rgb(238,209,51)" fg:x="891" fg:w="1"/><text x="71.9314%" y="671.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="645" width="0.0805%" height="15" fill="rgb(237,56,23)" fg:x="891" fg:w="1"/><text x="71.9314%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6814%" y="629" width="0.0805%" height="15" fill="rgb(215,153,46)" fg:x="891" fg:w="1"/><text x="71.9314%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="613" width="0.0805%" height="15" fill="rgb(224,49,31)" fg:x="891" fg:w="1"/><text x="71.9314%" y="623.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="597" width="0.0805%" height="15" fill="rgb(250,18,42)" fg:x="891" fg:w="1"/><text x="71.9314%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="581" width="0.0805%" height="15" fill="rgb(215,176,39)" fg:x="891" fg:w="1"/><text x="71.9314%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="71.6814%" y="565" width="0.0805%" height="15" fill="rgb(223,77,29)" fg:x="891" fg:w="1"/><text x="71.9314%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="71.6814%" y="549" width="0.0805%" height="15" fill="rgb(234,94,52)" fg:x="891" fg:w="1"/><text x="71.9314%" y="559.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6814%" y="533" width="0.0805%" height="15" fill="rgb(220,154,50)" fg:x="891" fg:w="1"/><text x="71.9314%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.6814%" y="517" width="0.0805%" height="15" fill="rgb(212,11,10)" fg:x="891" fg:w="1"/><text x="71.9314%" y="527.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="71.6814%" y="501" width="0.0805%" height="15" fill="rgb(205,166,19)" fg:x="891" fg:w="1"/><text x="71.9314%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="71.6814%" y="485" width="0.0805%" height="15" fill="rgb(244,198,16)" fg:x="891" fg:w="1"/><text x="71.9314%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="71.6814%" y="469" width="0.0805%" height="15" fill="rgb(219,69,12)" fg:x="891" fg:w="1"/><text x="71.9314%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="71.6814%" y="453" width="0.0805%" height="15" fill="rgb(245,30,7)" fg:x="891" fg:w="1"/><text x="71.9314%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.6814%" y="437" width="0.0805%" height="15" fill="rgb(218,221,48)" fg:x="891" fg:w="1"/><text x="71.9314%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="71.6814%" y="421" width="0.0805%" height="15" fill="rgb(216,66,15)" fg:x="891" fg:w="1"/><text x="71.9314%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.6814%" y="405" width="0.0805%" height="15" fill="rgb(226,122,50)" fg:x="891" fg:w="1"/><text x="71.9314%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="71.6814%" y="389" width="0.0805%" height="15" fill="rgb(239,156,16)" fg:x="891" fg:w="1"/><text x="71.9314%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.9228%" y="709" width="0.0805%" height="15" fill="rgb(224,27,38)" fg:x="894" fg:w="1"/><text x="72.1728%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.0837%" y="629" width="0.0805%" height="15" fill="rgb(224,39,27)" fg:x="896" fg:w="1"/><text x="72.3337%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.0837%" y="613" width="0.0805%" height="15" fill="rgb(215,92,29)" fg:x="896" fg:w="1"/><text x="72.3337%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0837%" y="597" width="0.0805%" height="15" fill="rgb(207,159,16)" fg:x="896" fg:w="1"/><text x="72.3337%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="71.8423%" y="757" width="0.4023%" height="15" fill="rgb(238,163,47)" fg:x="893" fg:w="5"/><text x="72.0923%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (5 samples, 0.40%)</title><rect x="71.8423%" y="741" width="0.4023%" height="15" fill="rgb(219,91,49)" fg:x="893" fg:w="5"/><text x="72.0923%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="71.8423%" y="725" width="0.4023%" height="15" fill="rgb(227,167,31)" fg:x="893" fg:w="5"/><text x="72.0923%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="72.0032%" y="709" width="0.2414%" height="15" fill="rgb(234,80,54)" fg:x="895" fg:w="3"/><text x="72.2532%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.0032%" y="693" width="0.2414%" height="15" fill="rgb(212,114,2)" fg:x="895" fg:w="3"/><text x="72.2532%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.0032%" y="677" width="0.2414%" height="15" fill="rgb(234,50,24)" fg:x="895" fg:w="3"/><text x="72.2532%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="72.0032%" y="661" width="0.2414%" height="15" fill="rgb(221,68,8)" fg:x="895" fg:w="3"/><text x="72.2532%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="72.0032%" y="645" width="0.2414%" height="15" fill="rgb(254,180,31)" fg:x="895" fg:w="3"/><text x="72.2532%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1641%" y="629" width="0.0805%" height="15" fill="rgb(247,130,50)" fg:x="897" fg:w="1"/><text x="72.4141%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.1641%" y="613" width="0.0805%" height="15" fill="rgb(211,109,4)" fg:x="897" fg:w="1"/><text x="72.4141%" y="623.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="72.2446%" y="645" width="0.1609%" height="15" fill="rgb(238,50,21)" fg:x="898" fg:w="2"/><text x="72.4946%" y="655.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="72.2446%" y="629" width="0.1609%" height="15" fill="rgb(225,57,45)" fg:x="898" fg:w="2"/><text x="72.4946%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (4 samples, 0.32%)</title><rect x="72.2446%" y="757" width="0.3218%" height="15" fill="rgb(209,196,50)" fg:x="898" fg:w="4"/><text x="72.4946%" y="767.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (4 samples, 0.32%)</title><rect x="72.2446%" y="741" width="0.3218%" height="15" fill="rgb(242,140,13)" fg:x="898" fg:w="4"/><text x="72.4946%" y="751.50"></text></g><g><title>engine::session::Session::new (4 samples, 0.32%)</title><rect x="72.2446%" y="725" width="0.3218%" height="15" fill="rgb(217,111,7)" fg:x="898" fg:w="4"/><text x="72.4946%" y="735.50"></text></g><g><title>engine::session::Session::initialize (4 samples, 0.32%)</title><rect x="72.2446%" y="709" width="0.3218%" height="15" fill="rgb(253,193,51)" fg:x="898" fg:w="4"/><text x="72.4946%" y="719.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (4 samples, 0.32%)</title><rect x="72.2446%" y="693" width="0.3218%" height="15" fill="rgb(252,70,29)" fg:x="898" fg:w="4"/><text x="72.4946%" y="703.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="72.2446%" y="677" width="0.3218%" height="15" fill="rgb(232,127,12)" fg:x="898" fg:w="4"/><text x="72.4946%" y="687.50"></text></g><g><title>libloading::safe::Library::new (4 samples, 0.32%)</title><rect x="72.2446%" y="661" width="0.3218%" height="15" fill="rgb(211,180,21)" fg:x="898" fg:w="4"/><text x="72.4946%" y="671.50"></text></g><g><title>dlopen (2 samples, 0.16%)</title><rect x="72.4055%" y="645" width="0.1609%" height="15" fill="rgb(229,72,13)" fg:x="900" fg:w="2"/><text x="72.6555%" y="655.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="72.4055%" y="629" width="0.1609%" height="15" fill="rgb(240,211,49)" fg:x="900" fg:w="2"/><text x="72.6555%" y="639.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="72.4055%" y="613" width="0.1609%" height="15" fill="rgb(219,149,40)" fg:x="900" fg:w="2"/><text x="72.6555%" y="623.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="72.4055%" y="597" width="0.1609%" height="15" fill="rgb(210,127,46)" fg:x="900" fg:w="2"/><text x="72.6555%" y="607.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="72.4055%" y="581" width="0.1609%" height="15" fill="rgb(220,106,7)" fg:x="900" fg:w="2"/><text x="72.6555%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="72.5664%" y="741" width="0.0805%" height="15" fill="rgb(249,31,22)" fg:x="902" fg:w="1"/><text x="72.8164%" y="751.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="72.5664%" y="725" width="0.0805%" height="15" fill="rgb(253,1,49)" fg:x="902" fg:w="1"/><text x="72.8164%" y="735.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6468%" y="629" width="0.0805%" height="15" fill="rgb(227,144,33)" fg:x="903" fg:w="1"/><text x="72.8968%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6468%" y="613" width="0.0805%" height="15" fill="rgb(249,163,44)" fg:x="903" fg:w="1"/><text x="72.8968%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6468%" y="597" width="0.0805%" height="15" fill="rgb(234,15,39)" fg:x="903" fg:w="1"/><text x="72.8968%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.6468%" y="581" width="0.0805%" height="15" fill="rgb(207,66,16)" fg:x="903" fg:w="1"/><text x="72.8968%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="72.6468%" y="661" width="0.2414%" height="15" fill="rgb(233,112,24)" fg:x="903" fg:w="3"/><text x="72.8968%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="72.6468%" y="645" width="0.2414%" height="15" fill="rgb(230,90,22)" fg:x="903" fg:w="3"/><text x="72.8968%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="72.7273%" y="629" width="0.1609%" height="15" fill="rgb(229,61,13)" fg:x="904" fg:w="2"/><text x="72.9773%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="72.7273%" y="613" width="0.1609%" height="15" fill="rgb(225,57,24)" fg:x="904" fg:w="2"/><text x="72.9773%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.8077%" y="597" width="0.0805%" height="15" fill="rgb(208,169,48)" fg:x="905" fg:w="1"/><text x="73.0577%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.8077%" y="581" width="0.0805%" height="15" fill="rgb(244,218,51)" fg:x="905" fg:w="1"/><text x="73.0577%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.8077%" y="565" width="0.0805%" height="15" fill="rgb(214,148,10)" fg:x="905" fg:w="1"/><text x="73.0577%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.8077%" y="549" width="0.0805%" height="15" fill="rgb(225,174,27)" fg:x="905" fg:w="1"/><text x="73.0577%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8882%" y="661" width="0.0805%" height="15" fill="rgb(230,96,26)" fg:x="906" fg:w="1"/><text x="73.1382%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8882%" y="645" width="0.0805%" height="15" fill="rgb(232,10,30)" fg:x="906" fg:w="1"/><text x="73.1382%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8882%" y="629" width="0.0805%" height="15" fill="rgb(222,8,50)" fg:x="906" fg:w="1"/><text x="73.1382%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8882%" y="613" width="0.0805%" height="15" fill="rgb(213,81,27)" fg:x="906" fg:w="1"/><text x="73.1382%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8882%" y="597" width="0.0805%" height="15" fill="rgb(245,50,10)" fg:x="906" fg:w="1"/><text x="73.1382%" y="607.50"></text></g><g><title>engine::session::Session::flush (5 samples, 0.40%)</title><rect x="72.6468%" y="741" width="0.4023%" height="15" fill="rgb(216,100,18)" fg:x="903" fg:w="5"/><text x="72.8968%" y="751.50"></text></g><g><title>engine::session::state::State::close (5 samples, 0.40%)</title><rect x="72.6468%" y="725" width="0.4023%" height="15" fill="rgb(236,147,54)" fg:x="903" fg:w="5"/><text x="72.8968%" y="735.50"></text></g><g><title>engine::session::state::State::flush_entities (5 samples, 0.40%)</title><rect x="72.6468%" y="709" width="0.4023%" height="15" fill="rgb(205,143,26)" fg:x="903" fg:w="5"/><text x="72.8968%" y="719.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (5 samples, 0.40%)</title><rect x="72.6468%" y="693" width="0.4023%" height="15" fill="rgb(236,26,9)" fg:x="903" fg:w="5"/><text x="72.8968%" y="703.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (5 samples, 0.40%)</title><rect x="72.6468%" y="677" width="0.4023%" height="15" fill="rgb(221,165,53)" fg:x="903" fg:w="5"/><text x="72.8968%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="72.9686%" y="661" width="0.0805%" height="15" fill="rgb(214,110,17)" fg:x="907" fg:w="1"/><text x="73.2186%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9686%" y="645" width="0.0805%" height="15" fill="rgb(237,197,12)" fg:x="907" fg:w="1"/><text x="73.2186%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.9686%" y="629" width="0.0805%" height="15" fill="rgb(205,84,17)" fg:x="907" fg:w="1"/><text x="73.2186%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="72.9686%" y="613" width="0.0805%" height="15" fill="rgb(237,18,45)" fg:x="907" fg:w="1"/><text x="73.2186%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="72.9686%" y="597" width="0.0805%" height="15" fill="rgb(221,87,14)" fg:x="907" fg:w="1"/><text x="73.2186%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9686%" y="581" width="0.0805%" height="15" fill="rgb(238,186,15)" fg:x="907" fg:w="1"/><text x="73.2186%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9686%" y="565" width="0.0805%" height="15" fill="rgb(208,115,11)" fg:x="907" fg:w="1"/><text x="73.2186%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9686%" y="549" width="0.0805%" height="15" fill="rgb(254,175,0)" fg:x="907" fg:w="1"/><text x="73.2186%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9686%" y="533" width="0.0805%" height="15" fill="rgb(227,24,42)" fg:x="907" fg:w="1"/><text x="73.2186%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9686%" y="517" width="0.0805%" height="15" fill="rgb(223,211,37)" fg:x="907" fg:w="1"/><text x="73.2186%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9686%" y="501" width="0.0805%" height="15" fill="rgb(235,49,27)" fg:x="907" fg:w="1"/><text x="73.2186%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9686%" y="485" width="0.0805%" height="15" fill="rgb(254,97,51)" fg:x="907" fg:w="1"/><text x="73.2186%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.9686%" y="469" width="0.0805%" height="15" fill="rgb(249,51,40)" fg:x="907" fg:w="1"/><text x="73.2186%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.9686%" y="453" width="0.0805%" height="15" fill="rgb(210,128,45)" fg:x="907" fg:w="1"/><text x="73.2186%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9686%" y="437" width="0.0805%" height="15" fill="rgb(224,137,50)" fg:x="907" fg:w="1"/><text x="73.2186%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.0491%" y="629" width="0.1609%" height="15" fill="rgb(242,15,9)" fg:x="908" fg:w="2"/><text x="73.2991%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1295%" y="613" width="0.0805%" height="15" fill="rgb(233,187,41)" fg:x="909" fg:w="1"/><text x="73.3795%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1295%" y="597" width="0.0805%" height="15" fill="rgb(227,2,29)" fg:x="909" fg:w="1"/><text x="73.3795%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1295%" y="581" width="0.0805%" height="15" fill="rgb(222,70,3)" fg:x="909" fg:w="1"/><text x="73.3795%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="73.0491%" y="725" width="0.2414%" height="15" fill="rgb(213,11,42)" fg:x="908" fg:w="3"/><text x="73.2991%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="73.0491%" y="709" width="0.2414%" height="15" fill="rgb(225,150,9)" fg:x="908" fg:w="3"/><text x="73.2991%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="73.0491%" y="693" width="0.2414%" height="15" fill="rgb(230,162,45)" fg:x="908" fg:w="3"/><text x="73.2991%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="73.0491%" y="677" width="0.2414%" height="15" fill="rgb(222,14,52)" fg:x="908" fg:w="3"/><text x="73.2991%" y="687.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="73.0491%" y="661" width="0.2414%" height="15" fill="rgb(254,198,14)" fg:x="908" fg:w="3"/><text x="73.2991%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="73.0491%" y="645" width="0.2414%" height="15" fill="rgb(220,217,30)" fg:x="908" fg:w="3"/><text x="73.2991%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2100%" y="629" width="0.0805%" height="15" fill="rgb(215,146,41)" fg:x="910" fg:w="1"/><text x="73.4600%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2100%" y="613" width="0.0805%" height="15" fill="rgb(217,27,36)" fg:x="910" fg:w="1"/><text x="73.4600%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.2100%" y="597" width="0.0805%" height="15" fill="rgb(219,218,39)" fg:x="910" fg:w="1"/><text x="73.4600%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.2100%" y="581" width="0.0805%" height="15" fill="rgb(219,4,42)" fg:x="910" fg:w="1"/><text x="73.4600%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2100%" y="565" width="0.0805%" height="15" fill="rgb(249,119,36)" fg:x="910" fg:w="1"/><text x="73.4600%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2100%" y="549" width="0.0805%" height="15" fill="rgb(209,23,33)" fg:x="910" fg:w="1"/><text x="73.4600%" y="559.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.32%)</title><rect x="73.0491%" y="741" width="0.3218%" height="15" fill="rgb(211,10,0)" fg:x="908" fg:w="4"/><text x="73.2991%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.2904%" y="725" width="0.0805%" height="15" fill="rgb(208,99,37)" fg:x="911" fg:w="1"/><text x="73.5404%" y="735.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="73.2904%" y="709" width="0.0805%" height="15" fill="rgb(213,132,31)" fg:x="911" fg:w="1"/><text x="73.5404%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.2904%" y="693" width="0.0805%" height="15" fill="rgb(243,129,40)" fg:x="911" fg:w="1"/><text x="73.5404%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.2904%" y="677" width="0.0805%" height="15" fill="rgb(210,66,33)" fg:x="911" fg:w="1"/><text x="73.5404%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.2904%" y="661" width="0.0805%" height="15" fill="rgb(209,189,4)" fg:x="911" fg:w="1"/><text x="73.5404%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.2904%" y="645" width="0.0805%" height="15" fill="rgb(214,107,37)" fg:x="911" fg:w="1"/><text x="73.5404%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.2904%" y="629" width="0.0805%" height="15" fill="rgb(245,88,54)" fg:x="911" fg:w="1"/><text x="73.5404%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2904%" y="613" width="0.0805%" height="15" fill="rgb(205,146,20)" fg:x="911" fg:w="1"/><text x="73.5404%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2904%" y="597" width="0.0805%" height="15" fill="rgb(220,161,25)" fg:x="911" fg:w="1"/><text x="73.5404%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2904%" y="581" width="0.0805%" height="15" fill="rgb(215,152,15)" fg:x="911" fg:w="1"/><text x="73.5404%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.2904%" y="565" width="0.0805%" height="15" fill="rgb(233,192,44)" fg:x="911" fg:w="1"/><text x="73.5404%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2904%" y="549" width="0.0805%" height="15" fill="rgb(240,170,46)" fg:x="911" fg:w="1"/><text x="73.5404%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.2904%" y="533" width="0.0805%" height="15" fill="rgb(207,104,33)" fg:x="911" fg:w="1"/><text x="73.5404%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.2904%" y="517" width="0.0805%" height="15" fill="rgb(219,21,39)" fg:x="911" fg:w="1"/><text x="73.5404%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.2904%" y="501" width="0.0805%" height="15" fill="rgb(214,133,29)" fg:x="911" fg:w="1"/><text x="73.5404%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.2904%" y="485" width="0.0805%" height="15" fill="rgb(226,93,6)" fg:x="911" fg:w="1"/><text x="73.5404%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2904%" y="469" width="0.0805%" height="15" fill="rgb(252,222,34)" fg:x="911" fg:w="1"/><text x="73.5404%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.2904%" y="453" width="0.0805%" height="15" fill="rgb(252,92,48)" fg:x="911" fg:w="1"/><text x="73.5404%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.2904%" y="437" width="0.0805%" height="15" fill="rgb(245,223,24)" fg:x="911" fg:w="1"/><text x="73.5404%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.2904%" y="421" width="0.0805%" height="15" fill="rgb(205,176,3)" fg:x="911" fg:w="1"/><text x="73.5404%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.2904%" y="405" width="0.0805%" height="15" fill="rgb(235,151,15)" fg:x="911" fg:w="1"/><text x="73.5404%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.2904%" y="389" width="0.0805%" height="15" fill="rgb(237,209,11)" fg:x="911" fg:w="1"/><text x="73.5404%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2904%" y="373" width="0.0805%" height="15" fill="rgb(243,227,24)" fg:x="911" fg:w="1"/><text x="73.5404%" y="383.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="73.3709%" y="741" width="0.0805%" height="15" fill="rgb(239,193,16)" fg:x="912" fg:w="1"/><text x="73.6209%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="73.3709%" y="725" width="0.0805%" height="15" fill="rgb(231,27,9)" fg:x="912" fg:w="1"/><text x="73.6209%" y="735.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.3709%" y="709" width="0.0805%" height="15" fill="rgb(219,169,10)" fg:x="912" fg:w="1"/><text x="73.6209%" y="719.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.3709%" y="693" width="0.0805%" height="15" fill="rgb(244,229,43)" fg:x="912" fg:w="1"/><text x="73.6209%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="73.3709%" y="677" width="0.0805%" height="15" fill="rgb(254,38,20)" fg:x="912" fg:w="1"/><text x="73.6209%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.4513%" y="661" width="0.1609%" height="15" fill="rgb(250,47,30)" fg:x="913" fg:w="2"/><text x="73.7013%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5318%" y="645" width="0.0805%" height="15" fill="rgb(224,124,36)" fg:x="914" fg:w="1"/><text x="73.7818%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5318%" y="629" width="0.0805%" height="15" fill="rgb(246,68,51)" fg:x="914" fg:w="1"/><text x="73.7818%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="73.4513%" y="725" width="0.2414%" height="15" fill="rgb(253,43,49)" fg:x="913" fg:w="3"/><text x="73.7013%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="73.4513%" y="709" width="0.2414%" height="15" fill="rgb(219,54,36)" fg:x="913" fg:w="3"/><text x="73.7013%" y="719.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="73.4513%" y="693" width="0.2414%" height="15" fill="rgb(227,133,34)" fg:x="913" fg:w="3"/><text x="73.7013%" y="703.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="73.4513%" y="677" width="0.2414%" height="15" fill="rgb(247,227,15)" fg:x="913" fg:w="3"/><text x="73.7013%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6122%" y="661" width="0.0805%" height="15" fill="rgb(229,96,14)" fg:x="915" fg:w="1"/><text x="73.8622%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.6122%" y="645" width="0.0805%" height="15" fill="rgb(220,79,17)" fg:x="915" fg:w="1"/><text x="73.8622%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6122%" y="629" width="0.0805%" height="15" fill="rgb(205,131,53)" fg:x="915" fg:w="1"/><text x="73.8622%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.6122%" y="613" width="0.0805%" height="15" fill="rgb(209,50,29)" fg:x="915" fg:w="1"/><text x="73.8622%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.6122%" y="597" width="0.0805%" height="15" fill="rgb(245,86,46)" fg:x="915" fg:w="1"/><text x="73.8622%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="73.6927%" y="645" width="0.1609%" height="15" fill="rgb(235,66,46)" fg:x="916" fg:w="2"/><text x="73.9427%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="73.6927%" y="629" width="0.1609%" height="15" fill="rgb(232,148,31)" fg:x="916" fg:w="2"/><text x="73.9427%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.7731%" y="613" width="0.0805%" height="15" fill="rgb(217,149,8)" fg:x="917" fg:w="1"/><text x="74.0231%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="73.6927%" y="661" width="0.2414%" height="15" fill="rgb(209,183,11)" fg:x="916" fg:w="3"/><text x="73.9427%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.8536%" y="645" width="0.0805%" height="15" fill="rgb(208,55,20)" fg:x="918" fg:w="1"/><text x="74.1036%" y="655.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.8536%" y="629" width="0.0805%" height="15" fill="rgb(218,39,14)" fg:x="918" fg:w="1"/><text x="74.1036%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.8536%" y="613" width="0.0805%" height="15" fill="rgb(216,169,33)" fg:x="918" fg:w="1"/><text x="74.1036%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.8536%" y="597" width="0.0805%" height="15" fill="rgb(233,80,24)" fg:x="918" fg:w="1"/><text x="74.1036%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.8536%" y="581" width="0.0805%" height="15" fill="rgb(213,179,31)" fg:x="918" fg:w="1"/><text x="74.1036%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8536%" y="565" width="0.0805%" height="15" fill="rgb(209,19,5)" fg:x="918" fg:w="1"/><text x="74.1036%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8536%" y="549" width="0.0805%" height="15" fill="rgb(219,18,35)" fg:x="918" fg:w="1"/><text x="74.1036%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8536%" y="533" width="0.0805%" height="15" fill="rgb(209,169,16)" fg:x="918" fg:w="1"/><text x="74.1036%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8536%" y="517" width="0.0805%" height="15" fill="rgb(245,90,51)" fg:x="918" fg:w="1"/><text x="74.1036%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.8536%" y="501" width="0.0805%" height="15" fill="rgb(220,99,45)" fg:x="918" fg:w="1"/><text x="74.1036%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8536%" y="485" width="0.0805%" height="15" fill="rgb(249,89,25)" fg:x="918" fg:w="1"/><text x="74.1036%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.8536%" y="469" width="0.0805%" height="15" fill="rgb(239,193,0)" fg:x="918" fg:w="1"/><text x="74.1036%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8536%" y="453" width="0.0805%" height="15" fill="rgb(231,126,1)" fg:x="918" fg:w="1"/><text x="74.1036%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8536%" y="437" width="0.0805%" height="15" fill="rgb(243,166,3)" fg:x="918" fg:w="1"/><text x="74.1036%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.32%)</title><rect x="73.6927%" y="725" width="0.3218%" height="15" fill="rgb(223,22,34)" fg:x="916" fg:w="4"/><text x="73.9427%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="73.6927%" y="709" width="0.3218%" height="15" fill="rgb(251,52,51)" fg:x="916" fg:w="4"/><text x="73.9427%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.32%)</title><rect x="73.6927%" y="693" width="0.3218%" height="15" fill="rgb(221,165,28)" fg:x="916" fg:w="4"/><text x="73.9427%" y="703.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="73.6927%" y="677" width="0.3218%" height="15" fill="rgb(218,121,47)" fg:x="916" fg:w="4"/><text x="73.9427%" y="687.50"></text></g><g><title>plugins_core::tools::leads_to (1 samples, 0.08%)</title><rect x="73.9340%" y="661" width="0.0805%" height="15" fill="rgb(209,120,9)" fg:x="919" fg:w="1"/><text x="74.1840%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.9340%" y="645" width="0.0805%" height="15" fill="rgb(236,68,12)" fg:x="919" fg:w="1"/><text x="74.1840%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.9340%" y="629" width="0.0805%" height="15" fill="rgb(225,194,26)" fg:x="919" fg:w="1"/><text x="74.1840%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.9340%" y="613" width="0.0805%" height="15" fill="rgb(231,84,39)" fg:x="919" fg:w="1"/><text x="74.1840%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9340%" y="597" width="0.0805%" height="15" fill="rgb(210,11,45)" fg:x="919" fg:w="1"/><text x="74.1840%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9340%" y="581" width="0.0805%" height="15" fill="rgb(224,54,52)" fg:x="919" fg:w="1"/><text x="74.1840%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9340%" y="565" width="0.0805%" height="15" fill="rgb(238,102,14)" fg:x="919" fg:w="1"/><text x="74.1840%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9340%" y="549" width="0.0805%" height="15" fill="rgb(243,160,52)" fg:x="919" fg:w="1"/><text x="74.1840%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9340%" y="533" width="0.0805%" height="15" fill="rgb(216,114,19)" fg:x="919" fg:w="1"/><text x="74.1840%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9340%" y="517" width="0.0805%" height="15" fill="rgb(244,166,37)" fg:x="919" fg:w="1"/><text x="74.1840%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.1754%" y="549" width="0.0805%" height="15" fill="rgb(246,29,44)" fg:x="922" fg:w="1"/><text x="74.4254%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.1754%" y="533" width="0.0805%" height="15" fill="rgb(215,56,53)" fg:x="922" fg:w="1"/><text x="74.4254%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.1754%" y="517" width="0.0805%" height="15" fill="rgb(217,60,2)" fg:x="922" fg:w="1"/><text x="74.4254%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.0949%" y="565" width="0.2414%" height="15" fill="rgb(207,26,24)" fg:x="921" fg:w="3"/><text x="74.3449%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2558%" y="549" width="0.0805%" height="15" fill="rgb(252,210,15)" fg:x="923" fg:w="1"/><text x="74.5058%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2558%" y="533" width="0.0805%" height="15" fill="rgb(253,209,26)" fg:x="923" fg:w="1"/><text x="74.5058%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.2558%" y="517" width="0.0805%" height="15" fill="rgb(238,170,14)" fg:x="923" fg:w="1"/><text x="74.5058%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="74.0145%" y="629" width="0.4827%" height="15" fill="rgb(216,178,15)" fg:x="920" fg:w="6"/><text x="74.2645%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.0949%" y="613" width="0.4023%" height="15" fill="rgb(250,197,2)" fg:x="921" fg:w="5"/><text x="74.3449%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.0949%" y="597" width="0.4023%" height="15" fill="rgb(212,70,42)" fg:x="921" fg:w="5"/><text x="74.3449%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="74.0949%" y="581" width="0.4023%" height="15" fill="rgb(227,213,9)" fg:x="921" fg:w="5"/><text x="74.3449%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="74.3363%" y="565" width="0.1609%" height="15" fill="rgb(245,99,25)" fg:x="924" fg:w="2"/><text x="74.5863%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="629" width="0.0805%" height="15" fill="rgb(250,82,29)" fg:x="926" fg:w="1"/><text x="74.7472%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="613" width="0.0805%" height="15" fill="rgb(241,226,54)" fg:x="926" fg:w="1"/><text x="74.7472%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="597" width="0.0805%" height="15" fill="rgb(221,99,41)" fg:x="926" fg:w="1"/><text x="74.7472%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="581" width="0.0805%" height="15" fill="rgb(213,90,21)" fg:x="926" fg:w="1"/><text x="74.7472%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="565" width="0.0805%" height="15" fill="rgb(205,208,24)" fg:x="926" fg:w="1"/><text x="74.7472%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="549" width="0.0805%" height="15" fill="rgb(246,31,12)" fg:x="926" fg:w="1"/><text x="74.7472%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="533" width="0.0805%" height="15" fill="rgb(213,154,6)" fg:x="926" fg:w="1"/><text x="74.7472%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.4972%" y="517" width="0.0805%" height="15" fill="rgb(222,163,29)" fg:x="926" fg:w="1"/><text x="74.7472%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5776%" y="581" width="0.0805%" height="15" fill="rgb(227,201,8)" fg:x="927" fg:w="1"/><text x="74.8276%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.5776%" y="565" width="0.0805%" height="15" fill="rgb(233,9,32)" fg:x="927" fg:w="1"/><text x="74.8276%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.5776%" y="549" width="0.0805%" height="15" fill="rgb(217,54,24)" fg:x="927" fg:w="1"/><text x="74.8276%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="74.6581%" y="565" width="0.1609%" height="15" fill="rgb(235,192,0)" fg:x="928" fg:w="2"/><text x="74.9081%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.6581%" y="549" width="0.1609%" height="15" fill="rgb(235,45,9)" fg:x="928" fg:w="2"/><text x="74.9081%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="74.6581%" y="533" width="0.1609%" height="15" fill="rgb(246,42,40)" fg:x="928" fg:w="2"/><text x="74.9081%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="74.6581%" y="517" width="0.1609%" height="15" fill="rgb(248,111,24)" fg:x="928" fg:w="2"/><text x="74.9081%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7385%" y="501" width="0.0805%" height="15" fill="rgb(249,65,22)" fg:x="929" fg:w="1"/><text x="74.9885%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7385%" y="485" width="0.0805%" height="15" fill="rgb(238,111,51)" fg:x="929" fg:w="1"/><text x="74.9885%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7385%" y="469" width="0.0805%" height="15" fill="rgb(250,118,22)" fg:x="929" fg:w="1"/><text x="74.9885%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7385%" y="453" width="0.0805%" height="15" fill="rgb(234,84,26)" fg:x="929" fg:w="1"/><text x="74.9885%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="74.7385%" y="437" width="0.0805%" height="15" fill="rgb(243,172,12)" fg:x="929" fg:w="1"/><text x="74.9885%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="74.7385%" y="421" width="0.0805%" height="15" fill="rgb(236,150,49)" fg:x="929" fg:w="1"/><text x="74.9885%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7385%" y="405" width="0.0805%" height="15" fill="rgb(225,197,26)" fg:x="929" fg:w="1"/><text x="74.9885%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.7385%" y="389" width="0.0805%" height="15" fill="rgb(214,17,42)" fg:x="929" fg:w="1"/><text x="74.9885%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.7385%" y="373" width="0.0805%" height="15" fill="rgb(224,165,40)" fg:x="929" fg:w="1"/><text x="74.9885%" y="383.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.88%)</title><rect x="74.0145%" y="725" width="0.8850%" height="15" fill="rgb(246,100,4)" fg:x="920" fg:w="11"/><text x="74.2645%" y="735.50"></text></g><g><title>engine::session::Session::save_changes (11 samples, 0.88%)</title><rect x="74.0145%" y="709" width="0.8850%" height="15" fill="rgb(222,103,0)" fg:x="920" fg:w="11"/><text x="74.2645%" y="719.50"></text></g><g><title>engine::session::state::State::close (11 samples, 0.88%)</title><rect x="74.0145%" y="693" width="0.8850%" height="15" fill="rgb(227,189,26)" fg:x="920" fg:w="11"/><text x="74.2645%" y="703.50"></text></g><g><title>engine::session::state::State::flush_entities (11 samples, 0.88%)</title><rect x="74.0145%" y="677" width="0.8850%" height="15" fill="rgb(214,202,17)" fg:x="920" fg:w="11"/><text x="74.2645%" y="687.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (11 samples, 0.88%)</title><rect x="74.0145%" y="661" width="0.8850%" height="15" fill="rgb(229,111,3)" fg:x="920" fg:w="11"/><text x="74.2645%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (11 samples, 0.88%)</title><rect x="74.0145%" y="645" width="0.8850%" height="15" fill="rgb(229,172,15)" fg:x="920" fg:w="11"/><text x="74.2645%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="74.5776%" y="629" width="0.3218%" height="15" fill="rgb(230,224,35)" fg:x="927" fg:w="4"/><text x="74.8276%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="74.5776%" y="613" width="0.3218%" height="15" fill="rgb(251,141,6)" fg:x="927" fg:w="4"/><text x="74.8276%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="74.5776%" y="597" width="0.3218%" height="15" fill="rgb(225,208,6)" fg:x="927" fg:w="4"/><text x="74.8276%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="74.6581%" y="581" width="0.2414%" height="15" fill="rgb(246,181,16)" fg:x="928" fg:w="3"/><text x="74.9081%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.8190%" y="565" width="0.0805%" height="15" fill="rgb(227,129,36)" fg:x="930" fg:w="1"/><text x="75.0690%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.8994%" y="693" width="0.0805%" height="15" fill="rgb(248,117,24)" fg:x="931" fg:w="1"/><text x="75.1494%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.8994%" y="677" width="0.0805%" height="15" fill="rgb(214,185,35)" fg:x="931" fg:w="1"/><text x="75.1494%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.8994%" y="661" width="0.0805%" height="15" fill="rgb(236,150,34)" fg:x="931" fg:w="1"/><text x="75.1494%" y="671.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="74.8994%" y="645" width="0.0805%" height="15" fill="rgb(243,228,27)" fg:x="931" fg:w="1"/><text x="75.1494%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.9799%" y="645" width="0.0805%" height="15" fill="rgb(245,77,44)" fg:x="932" fg:w="1"/><text x="75.2299%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.9799%" y="629" width="0.0805%" height="15" fill="rgb(235,214,42)" fg:x="932" fg:w="1"/><text x="75.2299%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.9799%" y="613" width="0.0805%" height="15" fill="rgb(221,74,3)" fg:x="932" fg:w="1"/><text x="75.2299%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.9799%" y="597" width="0.0805%" height="15" fill="rgb(206,121,29)" fg:x="932" fg:w="1"/><text x="75.2299%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.9799%" y="581" width="0.0805%" height="15" fill="rgb(249,131,53)" fg:x="932" fg:w="1"/><text x="75.2299%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.9799%" y="565" width="0.0805%" height="15" fill="rgb(236,170,29)" fg:x="932" fg:w="1"/><text x="75.2299%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.9799%" y="549" width="0.0805%" height="15" fill="rgb(247,96,15)" fg:x="932" fg:w="1"/><text x="75.2299%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.9799%" y="533" width="0.0805%" height="15" fill="rgb(211,210,7)" fg:x="932" fg:w="1"/><text x="75.2299%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.9799%" y="517" width="0.0805%" height="15" fill="rgb(240,88,50)" fg:x="932" fg:w="1"/><text x="75.2299%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.9799%" y="501" width="0.0805%" height="15" fill="rgb(209,229,26)" fg:x="932" fg:w="1"/><text x="75.2299%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="74.8994%" y="709" width="0.2414%" height="15" fill="rgb(210,68,23)" fg:x="931" fg:w="3"/><text x="75.1494%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="74.9799%" y="693" width="0.1609%" height="15" fill="rgb(229,180,13)" fg:x="932" fg:w="2"/><text x="75.2299%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.9799%" y="677" width="0.1609%" height="15" fill="rgb(236,53,44)" fg:x="932" fg:w="2"/><text x="75.2299%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.9799%" y="661" width="0.1609%" height="15" fill="rgb(244,214,29)" fg:x="932" fg:w="2"/><text x="75.2299%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.0603%" y="645" width="0.0805%" height="15" fill="rgb(220,75,29)" fg:x="933" fg:w="1"/><text x="75.3103%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.0603%" y="629" width="0.0805%" height="15" fill="rgb(214,183,37)" fg:x="933" fg:w="1"/><text x="75.3103%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.0603%" y="613" width="0.0805%" height="15" fill="rgb(239,117,29)" fg:x="933" fg:w="1"/><text x="75.3103%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.0603%" y="597" width="0.0805%" height="15" fill="rgb(237,171,35)" fg:x="933" fg:w="1"/><text x="75.3103%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0603%" y="581" width="0.0805%" height="15" fill="rgb(229,178,53)" fg:x="933" fg:w="1"/><text x="75.3103%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.0603%" y="565" width="0.0805%" height="15" fill="rgb(210,102,19)" fg:x="933" fg:w="1"/><text x="75.3103%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.0603%" y="549" width="0.0805%" height="15" fill="rgb(235,127,22)" fg:x="933" fg:w="1"/><text x="75.3103%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1408%" y="613" width="0.0805%" height="15" fill="rgb(244,31,31)" fg:x="934" fg:w="1"/><text x="75.3908%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1408%" y="597" width="0.0805%" height="15" fill="rgb(231,43,21)" fg:x="934" fg:w="1"/><text x="75.3908%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.1408%" y="581" width="0.0805%" height="15" fill="rgb(217,131,35)" fg:x="934" fg:w="1"/><text x="75.3908%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.1408%" y="565" width="0.0805%" height="15" fill="rgb(221,149,4)" fg:x="934" fg:w="1"/><text x="75.3908%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.1408%" y="549" width="0.0805%" height="15" fill="rgb(232,170,28)" fg:x="934" fg:w="1"/><text x="75.3908%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.1408%" y="533" width="0.0805%" height="15" fill="rgb(238,56,10)" fg:x="934" fg:w="1"/><text x="75.3908%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.1408%" y="517" width="0.0805%" height="15" fill="rgb(235,196,14)" fg:x="934" fg:w="1"/><text x="75.3908%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.1408%" y="501" width="0.0805%" height="15" fill="rgb(216,45,48)" fg:x="934" fg:w="1"/><text x="75.3908%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.1408%" y="485" width="0.0805%" height="15" fill="rgb(238,213,17)" fg:x="934" fg:w="1"/><text x="75.3908%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.1408%" y="469" width="0.0805%" height="15" fill="rgb(212,13,2)" fg:x="934" fg:w="1"/><text x="75.3908%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.1408%" y="453" width="0.0805%" height="15" fill="rgb(240,114,20)" fg:x="934" fg:w="1"/><text x="75.3908%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.1408%" y="437" width="0.0805%" height="15" fill="rgb(228,41,40)" fg:x="934" fg:w="1"/><text x="75.3908%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.1408%" y="421" width="0.0805%" height="15" fill="rgb(244,132,35)" fg:x="934" fg:w="1"/><text x="75.3908%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.1408%" y="405" width="0.0805%" height="15" fill="rgb(253,189,4)" fg:x="934" fg:w="1"/><text x="75.3908%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.1408%" y="389" width="0.0805%" height="15" fill="rgb(224,37,19)" fg:x="934" fg:w="1"/><text x="75.3908%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="75.1408%" y="661" width="0.1609%" height="15" fill="rgb(235,223,18)" fg:x="934" fg:w="2"/><text x="75.3908%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="75.1408%" y="645" width="0.1609%" height="15" fill="rgb(235,163,25)" fg:x="934" fg:w="2"/><text x="75.3908%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.1408%" y="629" width="0.1609%" height="15" fill="rgb(217,145,28)" fg:x="934" fg:w="2"/><text x="75.3908%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2212%" y="613" width="0.0805%" height="15" fill="rgb(223,223,32)" fg:x="935" fg:w="1"/><text x="75.4712%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2212%" y="597" width="0.0805%" height="15" fill="rgb(227,189,39)" fg:x="935" fg:w="1"/><text x="75.4712%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2212%" y="581" width="0.0805%" height="15" fill="rgb(248,10,22)" fg:x="935" fg:w="1"/><text x="75.4712%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2212%" y="565" width="0.0805%" height="15" fill="rgb(248,46,39)" fg:x="935" fg:w="1"/><text x="75.4712%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.2212%" y="549" width="0.0805%" height="15" fill="rgb(248,113,48)" fg:x="935" fg:w="1"/><text x="75.4712%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2212%" y="533" width="0.0805%" height="15" fill="rgb(245,16,25)" fg:x="935" fg:w="1"/><text x="75.4712%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2212%" y="517" width="0.0805%" height="15" fill="rgb(249,152,16)" fg:x="935" fg:w="1"/><text x="75.4712%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2212%" y="501" width="0.0805%" height="15" fill="rgb(250,16,1)" fg:x="935" fg:w="1"/><text x="75.4712%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.2212%" y="485" width="0.0805%" height="15" fill="rgb(249,138,3)" fg:x="935" fg:w="1"/><text x="75.4712%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.2212%" y="469" width="0.0805%" height="15" fill="rgb(227,71,41)" fg:x="935" fg:w="1"/><text x="75.4712%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.2212%" y="453" width="0.0805%" height="15" fill="rgb(209,184,23)" fg:x="935" fg:w="1"/><text x="75.4712%" y="463.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="75.1408%" y="693" width="0.2414%" height="15" fill="rgb(223,215,31)" fg:x="934" fg:w="3"/><text x="75.3908%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="75.1408%" y="677" width="0.2414%" height="15" fill="rgb(210,146,28)" fg:x="934" fg:w="3"/><text x="75.3908%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.3017%" y="661" width="0.0805%" height="15" fill="rgb(209,183,41)" fg:x="936" fg:w="1"/><text x="75.5517%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3017%" y="645" width="0.0805%" height="15" fill="rgb(209,224,45)" fg:x="936" fg:w="1"/><text x="75.5517%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.3017%" y="629" width="0.0805%" height="15" fill="rgb(224,209,51)" fg:x="936" fg:w="1"/><text x="75.5517%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3017%" y="613" width="0.0805%" height="15" fill="rgb(223,17,39)" fg:x="936" fg:w="1"/><text x="75.5517%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3017%" y="597" width="0.0805%" height="15" fill="rgb(234,204,37)" fg:x="936" fg:w="1"/><text x="75.5517%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3017%" y="581" width="0.0805%" height="15" fill="rgb(236,120,5)" fg:x="936" fg:w="1"/><text x="75.5517%" y="591.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="75.3017%" y="565" width="0.0805%" height="15" fill="rgb(248,97,27)" fg:x="936" fg:w="1"/><text x="75.5517%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="75.3017%" y="549" width="0.0805%" height="15" fill="rgb(240,66,17)" fg:x="936" fg:w="1"/><text x="75.5517%" y="559.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.3821%" y="693" width="0.0805%" height="15" fill="rgb(210,79,3)" fg:x="937" fg:w="1"/><text x="75.6321%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3821%" y="677" width="0.0805%" height="15" fill="rgb(214,176,27)" fg:x="937" fg:w="1"/><text x="75.6321%" y="687.50"></text></g><g><title>plugins_core::build::Build::holding (8 samples, 0.64%)</title><rect x="74.8994%" y="725" width="0.6436%" height="15" fill="rgb(235,185,3)" fg:x="931" fg:w="8"/><text x="75.1494%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="75.1408%" y="709" width="0.4023%" height="15" fill="rgb(227,24,12)" fg:x="934" fg:w="5"/><text x="75.3908%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="75.4626%" y="693" width="0.0805%" height="15" fill="rgb(252,169,48)" fg:x="938" fg:w="1"/><text x="75.7126%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="75.4626%" y="677" width="0.0805%" height="15" fill="rgb(212,65,1)" fg:x="938" fg:w="1"/><text x="75.7126%" y="687.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="75.5430%" y="725" width="0.0805%" height="15" fill="rgb(242,39,24)" fg:x="939" fg:w="1"/><text x="75.7930%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="75.5430%" y="709" width="0.0805%" height="15" fill="rgb(249,32,23)" fg:x="939" fg:w="1"/><text x="75.7930%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.5430%" y="693" width="0.0805%" height="15" fill="rgb(251,195,23)" fg:x="939" fg:w="1"/><text x="75.7930%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.5430%" y="677" width="0.0805%" height="15" fill="rgb(236,174,8)" fg:x="939" fg:w="1"/><text x="75.7930%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.5430%" y="661" width="0.0805%" height="15" fill="rgb(220,197,8)" fg:x="939" fg:w="1"/><text x="75.7930%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.5430%" y="645" width="0.0805%" height="15" fill="rgb(240,108,37)" fg:x="939" fg:w="1"/><text x="75.7930%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5430%" y="629" width="0.0805%" height="15" fill="rgb(232,176,24)" fg:x="939" fg:w="1"/><text x="75.7930%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.5430%" y="613" width="0.0805%" height="15" fill="rgb(243,35,29)" fg:x="939" fg:w="1"/><text x="75.7930%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5430%" y="597" width="0.0805%" height="15" fill="rgb(210,37,18)" fg:x="939" fg:w="1"/><text x="75.7930%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.5430%" y="581" width="0.0805%" height="15" fill="rgb(224,184,40)" fg:x="939" fg:w="1"/><text x="75.7930%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.5430%" y="565" width="0.0805%" height="15" fill="rgb(236,39,29)" fg:x="939" fg:w="1"/><text x="75.7930%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.5430%" y="549" width="0.0805%" height="15" fill="rgb(232,48,39)" fg:x="939" fg:w="1"/><text x="75.7930%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="75.6235%" y="693" width="0.0805%" height="15" fill="rgb(236,34,42)" fg:x="940" fg:w="1"/><text x="75.8735%" y="703.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="75.6235%" y="677" width="0.0805%" height="15" fill="rgb(243,106,37)" fg:x="940" fg:w="1"/><text x="75.8735%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="75.6235%" y="661" width="0.0805%" height="15" fill="rgb(218,96,6)" fg:x="940" fg:w="1"/><text x="75.8735%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="645" width="0.0805%" height="15" fill="rgb(235,130,12)" fg:x="940" fg:w="1"/><text x="75.8735%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.6235%" y="629" width="0.0805%" height="15" fill="rgb(231,95,0)" fg:x="940" fg:w="1"/><text x="75.8735%" y="639.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="613" width="0.0805%" height="15" fill="rgb(228,12,23)" fg:x="940" fg:w="1"/><text x="75.8735%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="597" width="0.0805%" height="15" fill="rgb(216,12,1)" fg:x="940" fg:w="1"/><text x="75.8735%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="581" width="0.0805%" height="15" fill="rgb(219,59,3)" fg:x="940" fg:w="1"/><text x="75.8735%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.6235%" y="565" width="0.0805%" height="15" fill="rgb(215,208,46)" fg:x="940" fg:w="1"/><text x="75.8735%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="549" width="0.0805%" height="15" fill="rgb(254,224,29)" fg:x="940" fg:w="1"/><text x="75.8735%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="533" width="0.0805%" height="15" fill="rgb(232,14,29)" fg:x="940" fg:w="1"/><text x="75.8735%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="517" width="0.0805%" height="15" fill="rgb(208,45,52)" fg:x="940" fg:w="1"/><text x="75.8735%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="75.6235%" y="501" width="0.0805%" height="15" fill="rgb(234,191,28)" fg:x="940" fg:w="1"/><text x="75.8735%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="75.6235%" y="485" width="0.0805%" height="15" fill="rgb(244,67,43)" fg:x="940" fg:w="1"/><text x="75.8735%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6235%" y="469" width="0.0805%" height="15" fill="rgb(236,189,24)" fg:x="940" fg:w="1"/><text x="75.8735%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6235%" y="453" width="0.0805%" height="15" fill="rgb(239,214,33)" fg:x="940" fg:w="1"/><text x="75.8735%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="75.6235%" y="437" width="0.0805%" height="15" fill="rgb(226,176,41)" fg:x="940" fg:w="1"/><text x="75.8735%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="75.6235%" y="421" width="0.0805%" height="15" fill="rgb(248,47,8)" fg:x="940" fg:w="1"/><text x="75.8735%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.6235%" y="405" width="0.0805%" height="15" fill="rgb(218,81,44)" fg:x="940" fg:w="1"/><text x="75.8735%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="75.6235%" y="389" width="0.0805%" height="15" fill="rgb(213,98,6)" fg:x="940" fg:w="1"/><text x="75.8735%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.6235%" y="373" width="0.0805%" height="15" fill="rgb(222,85,22)" fg:x="940" fg:w="1"/><text x="75.8735%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="75.6235%" y="357" width="0.0805%" height="15" fill="rgb(239,46,39)" fg:x="940" fg:w="1"/><text x="75.8735%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.6235%" y="341" width="0.0805%" height="15" fill="rgb(237,12,29)" fg:x="940" fg:w="1"/><text x="75.8735%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="75.6235%" y="325" width="0.0805%" height="15" fill="rgb(214,77,8)" fg:x="940" fg:w="1"/><text x="75.8735%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.6235%" y="309" width="0.0805%" height="15" fill="rgb(217,168,37)" fg:x="940" fg:w="1"/><text x="75.8735%" y="319.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.7039%" y="645" width="0.0805%" height="15" fill="rgb(221,217,23)" fg:x="941" fg:w="1"/><text x="75.9539%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.7039%" y="629" width="0.0805%" height="15" fill="rgb(243,229,36)" fg:x="941" fg:w="1"/><text x="75.9539%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7039%" y="613" width="0.0805%" height="15" fill="rgb(251,163,40)" fg:x="941" fg:w="1"/><text x="75.9539%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7039%" y="597" width="0.0805%" height="15" fill="rgb(237,222,12)" fg:x="941" fg:w="1"/><text x="75.9539%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7039%" y="581" width="0.0805%" height="15" fill="rgb(248,132,6)" fg:x="941" fg:w="1"/><text x="75.9539%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7039%" y="565" width="0.0805%" height="15" fill="rgb(227,167,50)" fg:x="941" fg:w="1"/><text x="75.9539%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.7039%" y="549" width="0.0805%" height="15" fill="rgb(242,84,37)" fg:x="941" fg:w="1"/><text x="75.9539%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7039%" y="533" width="0.0805%" height="15" fill="rgb(212,4,50)" fg:x="941" fg:w="1"/><text x="75.9539%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7039%" y="517" width="0.0805%" height="15" fill="rgb(230,228,32)" fg:x="941" fg:w="1"/><text x="75.9539%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.7039%" y="501" width="0.0805%" height="15" fill="rgb(248,217,23)" fg:x="941" fg:w="1"/><text x="75.9539%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.7039%" y="485" width="0.0805%" height="15" fill="rgb(238,197,32)" fg:x="941" fg:w="1"/><text x="75.9539%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.7039%" y="469" width="0.0805%" height="15" fill="rgb(236,106,1)" fg:x="941" fg:w="1"/><text x="75.9539%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="75.7039%" y="453" width="0.0805%" height="15" fill="rgb(219,228,13)" fg:x="941" fg:w="1"/><text x="75.9539%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="75.7039%" y="437" width="0.0805%" height="15" fill="rgb(238,30,35)" fg:x="941" fg:w="1"/><text x="75.9539%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="75.6235%" y="709" width="0.2414%" height="15" fill="rgb(236,70,23)" fg:x="940" fg:w="3"/><text x="75.8735%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="75.7039%" y="693" width="0.1609%" height="15" fill="rgb(249,104,48)" fg:x="941" fg:w="2"/><text x="75.9539%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="75.7039%" y="677" width="0.1609%" height="15" fill="rgb(254,117,50)" fg:x="941" fg:w="2"/><text x="75.9539%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="75.7039%" y="661" width="0.1609%" height="15" fill="rgb(223,152,4)" fg:x="941" fg:w="2"/><text x="75.9539%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="75.7844%" y="645" width="0.0805%" height="15" fill="rgb(245,6,2)" fg:x="942" fg:w="1"/><text x="76.0344%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="75.7844%" y="629" width="0.0805%" height="15" fill="rgb(249,150,24)" fg:x="942" fg:w="1"/><text x="76.0344%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7844%" y="613" width="0.0805%" height="15" fill="rgb(228,185,42)" fg:x="942" fg:w="1"/><text x="76.0344%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.7844%" y="597" width="0.0805%" height="15" fill="rgb(226,39,33)" fg:x="942" fg:w="1"/><text x="76.0344%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7844%" y="581" width="0.0805%" height="15" fill="rgb(221,166,19)" fg:x="942" fg:w="1"/><text x="76.0344%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.7844%" y="565" width="0.0805%" height="15" fill="rgb(209,109,2)" fg:x="942" fg:w="1"/><text x="76.0344%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="75.7844%" y="549" width="0.0805%" height="15" fill="rgb(252,216,26)" fg:x="942" fg:w="1"/><text x="76.0344%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7844%" y="533" width="0.0805%" height="15" fill="rgb(227,173,36)" fg:x="942" fg:w="1"/><text x="76.0344%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.7844%" y="517" width="0.0805%" height="15" fill="rgb(209,90,7)" fg:x="942" fg:w="1"/><text x="76.0344%" y="527.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="75.8648%" y="693" width="0.0805%" height="15" fill="rgb(250,194,11)" fg:x="943" fg:w="1"/><text x="76.1148%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.8648%" y="677" width="0.0805%" height="15" fill="rgb(220,72,50)" fg:x="943" fg:w="1"/><text x="76.1148%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.8648%" y="661" width="0.0805%" height="15" fill="rgb(222,106,48)" fg:x="943" fg:w="1"/><text x="76.1148%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.8648%" y="645" width="0.0805%" height="15" fill="rgb(216,220,45)" fg:x="943" fg:w="1"/><text x="76.1148%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.8648%" y="629" width="0.0805%" height="15" fill="rgb(234,112,18)" fg:x="943" fg:w="1"/><text x="76.1148%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8648%" y="613" width="0.0805%" height="15" fill="rgb(206,179,9)" fg:x="943" fg:w="1"/><text x="76.1148%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8648%" y="597" width="0.0805%" height="15" fill="rgb(215,115,40)" fg:x="943" fg:w="1"/><text x="76.1148%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8648%" y="581" width="0.0805%" height="15" fill="rgb(222,69,34)" fg:x="943" fg:w="1"/><text x="76.1148%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8648%" y="565" width="0.0805%" height="15" fill="rgb(209,161,10)" fg:x="943" fg:w="1"/><text x="76.1148%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.8648%" y="549" width="0.0805%" height="15" fill="rgb(217,6,38)" fg:x="943" fg:w="1"/><text x="76.1148%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8648%" y="533" width="0.0805%" height="15" fill="rgb(229,229,48)" fg:x="943" fg:w="1"/><text x="76.1148%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8648%" y="517" width="0.0805%" height="15" fill="rgb(225,21,28)" fg:x="943" fg:w="1"/><text x="76.1148%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8648%" y="501" width="0.0805%" height="15" fill="rgb(206,33,13)" fg:x="943" fg:w="1"/><text x="76.1148%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.8648%" y="485" width="0.0805%" height="15" fill="rgb(242,178,17)" fg:x="943" fg:w="1"/><text x="76.1148%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.8648%" y="469" width="0.0805%" height="15" fill="rgb(220,162,5)" fg:x="943" fg:w="1"/><text x="76.1148%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="75.8648%" y="453" width="0.0805%" height="15" fill="rgb(210,33,43)" fg:x="943" fg:w="1"/><text x="76.1148%" y="463.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.57%)</title><rect x="73.4513%" y="741" width="2.5744%" height="15" fill="rgb(216,116,54)" fg:x="913" fg:w="32"/><text x="73.7013%" y="751.50">pl..</text></g><g><title>plugins_core::build::Build::occupying (5 samples, 0.40%)</title><rect x="75.6235%" y="725" width="0.4023%" height="15" fill="rgb(249,92,24)" fg:x="940" fg:w="5"/><text x="75.8735%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="75.8648%" y="709" width="0.1609%" height="15" fill="rgb(231,189,14)" fg:x="943" fg:w="2"/><text x="76.1148%" y="719.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="75.9453%" y="693" width="0.0805%" height="15" fill="rgb(230,8,41)" fg:x="944" fg:w="1"/><text x="76.1953%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="75.9453%" y="677" width="0.0805%" height="15" fill="rgb(249,7,27)" fg:x="944" fg:w="1"/><text x="76.1953%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="75.9453%" y="661" width="0.0805%" height="15" fill="rgb(232,86,5)" fg:x="944" fg:w="1"/><text x="76.1953%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.9453%" y="645" width="0.0805%" height="15" fill="rgb(224,175,18)" fg:x="944" fg:w="1"/><text x="76.1953%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.9453%" y="629" width="0.0805%" height="15" fill="rgb(220,129,12)" fg:x="944" fg:w="1"/><text x="76.1953%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="75.9453%" y="613" width="0.0805%" height="15" fill="rgb(210,19,36)" fg:x="944" fg:w="1"/><text x="76.1953%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9453%" y="597" width="0.0805%" height="15" fill="rgb(219,96,14)" fg:x="944" fg:w="1"/><text x="76.1953%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9453%" y="581" width="0.0805%" height="15" fill="rgb(249,106,1)" fg:x="944" fg:w="1"/><text x="76.1953%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9453%" y="565" width="0.0805%" height="15" fill="rgb(249,155,20)" fg:x="944" fg:w="1"/><text x="76.1953%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9453%" y="549" width="0.0805%" height="15" fill="rgb(244,168,9)" fg:x="944" fg:w="1"/><text x="76.1953%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="75.9453%" y="533" width="0.0805%" height="15" fill="rgb(216,23,50)" fg:x="944" fg:w="1"/><text x="76.1953%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9453%" y="517" width="0.0805%" height="15" fill="rgb(224,219,20)" fg:x="944" fg:w="1"/><text x="76.1953%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="75.9453%" y="501" width="0.0805%" height="15" fill="rgb(222,156,15)" fg:x="944" fg:w="1"/><text x="76.1953%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.9453%" y="485" width="0.0805%" height="15" fill="rgb(231,97,17)" fg:x="944" fg:w="1"/><text x="76.1953%" y="495.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="76.0257%" y="741" width="0.0805%" height="15" fill="rgb(218,70,48)" fg:x="945" fg:w="1"/><text x="76.2757%" y="751.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="76.0257%" y="725" width="0.0805%" height="15" fill="rgb(212,196,52)" fg:x="945" fg:w="1"/><text x="76.2757%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.0257%" y="709" width="0.0805%" height="15" fill="rgb(243,203,18)" fg:x="945" fg:w="1"/><text x="76.2757%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.0257%" y="693" width="0.0805%" height="15" fill="rgb(252,125,41)" fg:x="945" fg:w="1"/><text x="76.2757%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.0257%" y="677" width="0.0805%" height="15" fill="rgb(223,180,33)" fg:x="945" fg:w="1"/><text x="76.2757%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.0257%" y="661" width="0.0805%" height="15" fill="rgb(254,159,46)" fg:x="945" fg:w="1"/><text x="76.2757%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.0257%" y="645" width="0.0805%" height="15" fill="rgb(254,38,10)" fg:x="945" fg:w="1"/><text x="76.2757%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="76.1062%" y="693" width="0.0805%" height="15" fill="rgb(208,217,32)" fg:x="946" fg:w="1"/><text x="76.3562%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="76.1062%" y="677" width="0.0805%" height="15" fill="rgb(221,120,13)" fg:x="946" fg:w="1"/><text x="76.3562%" y="687.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="76.1062%" y="661" width="0.0805%" height="15" fill="rgb(246,54,52)" fg:x="946" fg:w="1"/><text x="76.3562%" y="671.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="76.1062%" y="741" width="0.1609%" height="15" fill="rgb(242,34,25)" fg:x="946" fg:w="2"/><text x="76.3562%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="76.1062%" y="725" width="0.1609%" height="15" fill="rgb(247,209,9)" fg:x="946" fg:w="2"/><text x="76.3562%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.1062%" y="709" width="0.1609%" height="15" fill="rgb(228,71,26)" fg:x="946" fg:w="2"/><text x="76.3562%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="76.1866%" y="693" width="0.0805%" height="15" fill="rgb(222,145,49)" fg:x="947" fg:w="1"/><text x="76.4366%" y="703.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="76.1866%" y="677" width="0.0805%" height="15" fill="rgb(218,121,17)" fg:x="947" fg:w="1"/><text x="76.4366%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="76.1866%" y="661" width="0.0805%" height="15" fill="rgb(244,50,7)" fg:x="947" fg:w="1"/><text x="76.4366%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="76.1866%" y="645" width="0.0805%" height="15" fill="rgb(246,229,37)" fg:x="947" fg:w="1"/><text x="76.4366%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="76.1866%" y="629" width="0.0805%" height="15" fill="rgb(225,18,5)" fg:x="947" fg:w="1"/><text x="76.4366%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.1866%" y="613" width="0.0805%" height="15" fill="rgb(213,204,8)" fg:x="947" fg:w="1"/><text x="76.4366%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.1866%" y="597" width="0.0805%" height="15" fill="rgb(238,103,6)" fg:x="947" fg:w="1"/><text x="76.4366%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1866%" y="581" width="0.0805%" height="15" fill="rgb(222,25,35)" fg:x="947" fg:w="1"/><text x="76.4366%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1866%" y="565" width="0.0805%" height="15" fill="rgb(213,203,35)" fg:x="947" fg:w="1"/><text x="76.4366%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="76.2671%" y="725" width="0.1609%" height="15" fill="rgb(221,79,53)" fg:x="948" fg:w="2"/><text x="76.5171%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="76.2671%" y="709" width="0.1609%" height="15" fill="rgb(243,200,35)" fg:x="948" fg:w="2"/><text x="76.5171%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="76.2671%" y="693" width="0.1609%" height="15" fill="rgb(248,60,25)" fg:x="948" fg:w="2"/><text x="76.5171%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="76.2671%" y="677" width="0.1609%" height="15" fill="rgb(227,53,46)" fg:x="948" fg:w="2"/><text x="76.5171%" y="687.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="76.2671%" y="661" width="0.1609%" height="15" fill="rgb(216,120,32)" fg:x="948" fg:w="2"/><text x="76.5171%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="76.2671%" y="645" width="0.1609%" height="15" fill="rgb(220,134,1)" fg:x="948" fg:w="2"/><text x="76.5171%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.2671%" y="629" width="0.1609%" height="15" fill="rgb(237,168,5)" fg:x="948" fg:w="2"/><text x="76.5171%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.2671%" y="613" width="0.1609%" height="15" fill="rgb(231,100,33)" fg:x="948" fg:w="2"/><text x="76.5171%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="76.2671%" y="597" width="0.1609%" height="15" fill="rgb(236,177,47)" fg:x="948" fg:w="2"/><text x="76.5171%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3475%" y="581" width="0.0805%" height="15" fill="rgb(235,7,49)" fg:x="949" fg:w="1"/><text x="76.5975%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.3475%" y="565" width="0.0805%" height="15" fill="rgb(232,119,22)" fg:x="949" fg:w="1"/><text x="76.5975%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.3475%" y="549" width="0.0805%" height="15" fill="rgb(254,73,53)" fg:x="949" fg:w="1"/><text x="76.5975%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (49 samples, 3.94%)</title><rect x="72.5664%" y="757" width="3.9421%" height="15" fill="rgb(251,35,20)" fg:x="902" fg:w="49"/><text x="72.8164%" y="767.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="76.2671%" y="741" width="0.2414%" height="15" fill="rgb(241,119,20)" fg:x="948" fg:w="3"/><text x="76.5171%" y="751.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="76.4280%" y="725" width="0.0805%" height="15" fill="rgb(207,102,14)" fg:x="950" fg:w="1"/><text x="76.6780%" y="735.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="76.4280%" y="709" width="0.0805%" height="15" fill="rgb(248,201,50)" fg:x="950" fg:w="1"/><text x="76.6780%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="76.4280%" y="693" width="0.0805%" height="15" fill="rgb(222,185,44)" fg:x="950" fg:w="1"/><text x="76.6780%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.4280%" y="677" width="0.0805%" height="15" fill="rgb(218,107,18)" fg:x="950" fg:w="1"/><text x="76.6780%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.4280%" y="661" width="0.0805%" height="15" fill="rgb(237,177,39)" fg:x="950" fg:w="1"/><text x="76.6780%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.4280%" y="645" width="0.0805%" height="15" fill="rgb(246,69,6)" fg:x="950" fg:w="1"/><text x="76.6780%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4280%" y="629" width="0.0805%" height="15" fill="rgb(234,208,37)" fg:x="950" fg:w="1"/><text x="76.6780%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4280%" y="613" width="0.0805%" height="15" fill="rgb(225,4,6)" fg:x="950" fg:w="1"/><text x="76.6780%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.4280%" y="597" width="0.0805%" height="15" fill="rgb(233,45,0)" fg:x="950" fg:w="1"/><text x="76.6780%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4280%" y="581" width="0.0805%" height="15" fill="rgb(226,136,5)" fg:x="950" fg:w="1"/><text x="76.6780%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="76.4280%" y="565" width="0.0805%" height="15" fill="rgb(211,91,47)" fg:x="950" fg:w="1"/><text x="76.6780%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.4280%" y="549" width="0.0805%" height="15" fill="rgb(242,88,51)" fg:x="950" fg:w="1"/><text x="76.6780%" y="559.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.5084%" y="741" width="0.0805%" height="15" fill="rgb(230,91,28)" fg:x="951" fg:w="1"/><text x="76.7584%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.5084%" y="725" width="0.0805%" height="15" fill="rgb(254,186,29)" fg:x="951" fg:w="1"/><text x="76.7584%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.5084%" y="709" width="0.0805%" height="15" fill="rgb(238,6,4)" fg:x="951" fg:w="1"/><text x="76.7584%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.5084%" y="693" width="0.0805%" height="15" fill="rgb(221,151,16)" fg:x="951" fg:w="1"/><text x="76.7584%" y="703.50"></text></g><g><title>&lt;core::time::Duration as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.08%)</title><rect x="76.5084%" y="677" width="0.0805%" height="15" fill="rgb(251,143,52)" fg:x="951" fg:w="1"/><text x="76.7584%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.5889%" y="709" width="0.0805%" height="15" fill="rgb(206,90,15)" fg:x="952" fg:w="1"/><text x="76.8389%" y="719.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="76.7498%" y="661" width="0.1609%" height="15" fill="rgb(218,35,8)" fg:x="954" fg:w="2"/><text x="76.9998%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="76.7498%" y="645" width="0.1609%" height="15" fill="rgb(239,215,6)" fg:x="954" fg:w="2"/><text x="76.9998%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.7498%" y="629" width="0.1609%" height="15" fill="rgb(245,116,39)" fg:x="954" fg:w="2"/><text x="76.9998%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.9107%" y="613" width="0.0805%" height="15" fill="rgb(242,65,28)" fg:x="956" fg:w="1"/><text x="77.1607%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.9107%" y="597" width="0.0805%" height="15" fill="rgb(252,132,53)" fg:x="956" fg:w="1"/><text x="77.1607%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.9107%" y="581" width="0.0805%" height="15" fill="rgb(224,159,50)" fg:x="956" fg:w="1"/><text x="77.1607%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.9107%" y="565" width="0.0805%" height="15" fill="rgb(224,93,4)" fg:x="956" fg:w="1"/><text x="77.1607%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9107%" y="549" width="0.0805%" height="15" fill="rgb(208,81,34)" fg:x="956" fg:w="1"/><text x="77.1607%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9107%" y="533" width="0.0805%" height="15" fill="rgb(233,92,54)" fg:x="956" fg:w="1"/><text x="77.1607%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9107%" y="517" width="0.0805%" height="15" fill="rgb(237,21,14)" fg:x="956" fg:w="1"/><text x="77.1607%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9107%" y="501" width="0.0805%" height="15" fill="rgb(249,128,51)" fg:x="956" fg:w="1"/><text x="77.1607%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.9107%" y="629" width="0.1609%" height="15" fill="rgb(223,129,24)" fg:x="956" fg:w="2"/><text x="77.1607%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.9912%" y="613" width="0.0805%" height="15" fill="rgb(231,168,25)" fg:x="957" fg:w="1"/><text x="77.2412%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.9912%" y="597" width="0.0805%" height="15" fill="rgb(224,39,20)" fg:x="957" fg:w="1"/><text x="77.2412%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.9912%" y="581" width="0.0805%" height="15" fill="rgb(225,152,53)" fg:x="957" fg:w="1"/><text x="77.2412%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="76.7498%" y="677" width="0.4023%" height="15" fill="rgb(252,17,24)" fg:x="954" fg:w="5"/><text x="76.9998%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="76.9107%" y="661" width="0.2414%" height="15" fill="rgb(250,114,30)" fg:x="956" fg:w="3"/><text x="77.1607%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="76.9107%" y="645" width="0.2414%" height="15" fill="rgb(229,5,4)" fg:x="956" fg:w="3"/><text x="77.1607%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.0716%" y="629" width="0.0805%" height="15" fill="rgb(225,176,49)" fg:x="958" fg:w="1"/><text x="77.3216%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.0716%" y="613" width="0.0805%" height="15" fill="rgb(224,221,49)" fg:x="958" fg:w="1"/><text x="77.3216%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="77.0716%" y="597" width="0.0805%" height="15" fill="rgb(253,169,27)" fg:x="958" fg:w="1"/><text x="77.3216%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.0716%" y="581" width="0.0805%" height="15" fill="rgb(211,206,16)" fg:x="958" fg:w="1"/><text x="77.3216%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.0716%" y="565" width="0.0805%" height="15" fill="rgb(244,87,35)" fg:x="958" fg:w="1"/><text x="77.3216%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0716%" y="549" width="0.0805%" height="15" fill="rgb(246,28,10)" fg:x="958" fg:w="1"/><text x="77.3216%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0716%" y="533" width="0.0805%" height="15" fill="rgb(229,12,44)" fg:x="958" fg:w="1"/><text x="77.3216%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.1521%" y="629" width="0.0805%" height="15" fill="rgb(210,145,37)" fg:x="959" fg:w="1"/><text x="77.4021%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.1521%" y="613" width="0.0805%" height="15" fill="rgb(227,112,52)" fg:x="959" fg:w="1"/><text x="77.4021%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3130%" y="597" width="0.0805%" height="15" fill="rgb(238,155,34)" fg:x="961" fg:w="1"/><text x="77.5630%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="77.1521%" y="677" width="0.3218%" height="15" fill="rgb(239,226,36)" fg:x="959" fg:w="4"/><text x="77.4021%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="77.1521%" y="661" width="0.3218%" height="15" fill="rgb(230,16,23)" fg:x="959" fg:w="4"/><text x="77.4021%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="77.1521%" y="645" width="0.3218%" height="15" fill="rgb(236,171,36)" fg:x="959" fg:w="4"/><text x="77.4021%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.2325%" y="629" width="0.2414%" height="15" fill="rgb(221,22,14)" fg:x="960" fg:w="3"/><text x="77.4825%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="77.2325%" y="613" width="0.2414%" height="15" fill="rgb(242,43,11)" fg:x="960" fg:w="3"/><text x="77.4825%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="77.3934%" y="597" width="0.0805%" height="15" fill="rgb(232,69,23)" fg:x="962" fg:w="1"/><text x="77.6434%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3934%" y="581" width="0.0805%" height="15" fill="rgb(216,180,54)" fg:x="962" fg:w="1"/><text x="77.6434%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.3934%" y="565" width="0.0805%" height="15" fill="rgb(216,5,24)" fg:x="962" fg:w="1"/><text x="77.6434%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3934%" y="549" width="0.0805%" height="15" fill="rgb(225,89,9)" fg:x="962" fg:w="1"/><text x="77.6434%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4739%" y="565" width="0.0805%" height="15" fill="rgb(243,75,33)" fg:x="963" fg:w="1"/><text x="77.7239%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.4739%" y="645" width="0.1609%" height="15" fill="rgb(247,141,45)" fg:x="963" fg:w="2"/><text x="77.7239%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="77.4739%" y="629" width="0.1609%" height="15" fill="rgb(232,177,36)" fg:x="963" fg:w="2"/><text x="77.7239%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.4739%" y="613" width="0.1609%" height="15" fill="rgb(219,125,36)" fg:x="963" fg:w="2"/><text x="77.7239%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.4739%" y="597" width="0.1609%" height="15" fill="rgb(227,94,9)" fg:x="963" fg:w="2"/><text x="77.7239%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="77.4739%" y="581" width="0.1609%" height="15" fill="rgb(240,34,52)" fg:x="963" fg:w="2"/><text x="77.7239%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.5543%" y="565" width="0.0805%" height="15" fill="rgb(216,45,12)" fg:x="964" fg:w="1"/><text x="77.8043%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.5543%" y="549" width="0.0805%" height="15" fill="rgb(246,21,19)" fg:x="964" fg:w="1"/><text x="77.8043%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.5543%" y="533" width="0.0805%" height="15" fill="rgb(213,98,42)" fg:x="964" fg:w="1"/><text x="77.8043%" y="543.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (3 samples, 0.24%)</title><rect x="77.4739%" y="661" width="0.2414%" height="15" fill="rgb(250,136,47)" fg:x="963" fg:w="3"/><text x="77.7239%" y="671.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="77.6348%" y="645" width="0.0805%" height="15" fill="rgb(251,124,27)" fg:x="965" fg:w="1"/><text x="77.8848%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.6348%" y="629" width="0.0805%" height="15" fill="rgb(229,180,14)" fg:x="965" fg:w="1"/><text x="77.8848%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.6348%" y="613" width="0.0805%" height="15" fill="rgb(245,216,25)" fg:x="965" fg:w="1"/><text x="77.8848%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.6348%" y="597" width="0.0805%" height="15" fill="rgb(251,43,5)" fg:x="965" fg:w="1"/><text x="77.8848%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="77.6348%" y="581" width="0.0805%" height="15" fill="rgb(250,128,24)" fg:x="965" fg:w="1"/><text x="77.8848%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="77.7152%" y="645" width="0.0805%" height="15" fill="rgb(217,117,27)" fg:x="966" fg:w="1"/><text x="77.9652%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.7957%" y="629" width="0.0805%" height="15" fill="rgb(245,147,4)" fg:x="967" fg:w="1"/><text x="78.0457%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8761%" y="629" width="0.0805%" height="15" fill="rgb(242,201,35)" fg:x="968" fg:w="1"/><text x="78.1261%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.8761%" y="613" width="0.0805%" height="15" fill="rgb(218,181,1)" fg:x="968" fg:w="1"/><text x="78.1261%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="77.8761%" y="597" width="0.0805%" height="15" fill="rgb(222,6,29)" fg:x="968" fg:w="1"/><text x="78.1261%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.9566%" y="581" width="0.0805%" height="15" fill="rgb(208,186,3)" fg:x="969" fg:w="1"/><text x="78.2066%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="77.9566%" y="565" width="0.0805%" height="15" fill="rgb(216,36,26)" fg:x="969" fg:w="1"/><text x="78.2066%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="78.0370%" y="501" width="0.0805%" height="15" fill="rgb(248,201,23)" fg:x="970" fg:w="1"/><text x="78.2870%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.1175%" y="453" width="0.1609%" height="15" fill="rgb(251,170,31)" fg:x="971" fg:w="2"/><text x="78.3675%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="78.1175%" y="437" width="0.1609%" height="15" fill="rgb(207,110,25)" fg:x="971" fg:w="2"/><text x="78.3675%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="78.1175%" y="421" width="0.1609%" height="15" fill="rgb(250,54,15)" fg:x="971" fg:w="2"/><text x="78.3675%" y="431.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.64%)</title><rect x="77.7152%" y="661" width="0.6436%" height="15" fill="rgb(227,68,33)" fg:x="966" fg:w="8"/><text x="77.9652%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="77.7957%" y="645" width="0.5632%" height="15" fill="rgb(238,34,41)" fg:x="967" fg:w="7"/><text x="78.0457%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="77.9566%" y="629" width="0.4023%" height="15" fill="rgb(220,11,15)" fg:x="969" fg:w="5"/><text x="78.2066%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="77.9566%" y="613" width="0.4023%" height="15" fill="rgb(246,111,35)" fg:x="969" fg:w="5"/><text x="78.2066%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="77.9566%" y="597" width="0.4023%" height="15" fill="rgb(209,88,53)" fg:x="969" fg:w="5"/><text x="78.2066%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="78.0370%" y="581" width="0.3218%" height="15" fill="rgb(231,185,47)" fg:x="970" fg:w="4"/><text x="78.2870%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="78.0370%" y="565" width="0.3218%" height="15" fill="rgb(233,154,1)" fg:x="970" fg:w="4"/><text x="78.2870%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="78.0370%" y="549" width="0.3218%" height="15" fill="rgb(225,15,46)" fg:x="970" fg:w="4"/><text x="78.2870%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="78.0370%" y="533" width="0.3218%" height="15" fill="rgb(211,135,41)" fg:x="970" fg:w="4"/><text x="78.2870%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="78.0370%" y="517" width="0.3218%" height="15" fill="rgb(208,54,0)" fg:x="970" fg:w="4"/><text x="78.2870%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="78.1175%" y="501" width="0.2414%" height="15" fill="rgb(244,136,14)" fg:x="971" fg:w="3"/><text x="78.3675%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="78.1175%" y="485" width="0.2414%" height="15" fill="rgb(241,56,14)" fg:x="971" fg:w="3"/><text x="78.3675%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="78.1175%" y="469" width="0.2414%" height="15" fill="rgb(205,80,24)" fg:x="971" fg:w="3"/><text x="78.3675%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.2784%" y="453" width="0.0805%" height="15" fill="rgb(220,57,4)" fg:x="973" fg:w="1"/><text x="78.5284%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.4393%" y="565" width="0.1609%" height="15" fill="rgb(226,193,50)" fg:x="975" fg:w="2"/><text x="78.6893%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.4393%" y="549" width="0.1609%" height="15" fill="rgb(231,168,22)" fg:x="975" fg:w="2"/><text x="78.6893%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="78.4393%" y="533" width="0.1609%" height="15" fill="rgb(254,215,14)" fg:x="975" fg:w="2"/><text x="78.6893%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="78.4393%" y="517" width="0.1609%" height="15" fill="rgb(211,115,16)" fg:x="975" fg:w="2"/><text x="78.6893%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5197%" y="501" width="0.0805%" height="15" fill="rgb(236,210,16)" fg:x="976" fg:w="1"/><text x="78.7697%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.5197%" y="485" width="0.0805%" height="15" fill="rgb(221,94,12)" fg:x="976" fg:w="1"/><text x="78.7697%" y="495.50"></text></g><g><title>engine::session::state::State::close (26 samples, 2.09%)</title><rect x="76.5889%" y="741" width="2.0917%" height="15" fill="rgb(235,218,49)" fg:x="952" fg:w="26"/><text x="76.8389%" y="751.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.09%)</title><rect x="76.5889%" y="725" width="2.0917%" height="15" fill="rgb(217,114,14)" fg:x="952" fg:w="26"/><text x="76.8389%" y="735.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (25 samples, 2.01%)</title><rect x="76.6693%" y="709" width="2.0113%" height="15" fill="rgb(216,145,22)" fg:x="953" fg:w="25"/><text x="76.9193%" y="719.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.93%)</title><rect x="76.7498%" y="693" width="1.9308%" height="15" fill="rgb(217,112,39)" fg:x="954" fg:w="24"/><text x="76.9998%" y="703.50">e..</text></g><g><title>kernel::model::any_entity_changes (15 samples, 1.21%)</title><rect x="77.4739%" y="677" width="1.2068%" height="15" fill="rgb(225,85,32)" fg:x="963" fg:w="15"/><text x="77.7239%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="78.3588%" y="661" width="0.3218%" height="15" fill="rgb(245,209,47)" fg:x="974" fg:w="4"/><text x="78.6088%" y="671.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="78.3588%" y="645" width="0.3218%" height="15" fill="rgb(218,220,15)" fg:x="974" fg:w="4"/><text x="78.6088%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="78.3588%" y="629" width="0.3218%" height="15" fill="rgb(222,202,31)" fg:x="974" fg:w="4"/><text x="78.6088%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="78.3588%" y="613" width="0.3218%" height="15" fill="rgb(243,203,4)" fg:x="974" fg:w="4"/><text x="78.6088%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="78.3588%" y="597" width="0.3218%" height="15" fill="rgb(237,92,17)" fg:x="974" fg:w="4"/><text x="78.6088%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="78.3588%" y="581" width="0.3218%" height="15" fill="rgb(231,119,7)" fg:x="974" fg:w="4"/><text x="78.6088%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6002%" y="565" width="0.0805%" height="15" fill="rgb(237,82,41)" fg:x="977" fg:w="1"/><text x="78.8502%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6002%" y="549" width="0.0805%" height="15" fill="rgb(226,81,48)" fg:x="977" fg:w="1"/><text x="78.8502%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="78.6002%" y="533" width="0.0805%" height="15" fill="rgb(234,70,51)" fg:x="977" fg:w="1"/><text x="78.8502%" y="543.50"></text></g><g><title>engine::session::Session::close (29 samples, 2.33%)</title><rect x="76.5084%" y="757" width="2.3331%" height="15" fill="rgb(251,86,4)" fg:x="951" fg:w="29"/><text x="76.7584%" y="767.50">e..</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="78.6806%" y="741" width="0.1609%" height="15" fill="rgb(244,144,28)" fg:x="978" fg:w="2"/><text x="78.9306%" y="751.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="78.6806%" y="725" width="0.1609%" height="15" fill="rgb(232,161,39)" fg:x="978" fg:w="2"/><text x="78.9306%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="78.6806%" y="709" width="0.1609%" height="15" fill="rgb(247,34,51)" fg:x="978" fg:w="2"/><text x="78.9306%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="78.6806%" y="693" width="0.1609%" height="15" fill="rgb(225,132,2)" fg:x="978" fg:w="2"/><text x="78.9306%" y="703.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="78.6806%" y="677" width="0.1609%" height="15" fill="rgb(209,159,44)" fg:x="978" fg:w="2"/><text x="78.9306%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="78.8415%" y="565" width="0.0805%" height="15" fill="rgb(251,214,1)" fg:x="980" fg:w="1"/><text x="79.0915%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="78.8415%" y="549" width="0.0805%" height="15" fill="rgb(247,84,47)" fg:x="980" fg:w="1"/><text x="79.0915%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.8415%" y="533" width="0.0805%" height="15" fill="rgb(240,111,43)" fg:x="980" fg:w="1"/><text x="79.0915%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.8415%" y="517" width="0.0805%" height="15" fill="rgb(215,214,35)" fg:x="980" fg:w="1"/><text x="79.0915%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="78.8415%" y="501" width="0.0805%" height="15" fill="rgb(248,207,23)" fg:x="980" fg:w="1"/><text x="79.0915%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.8415%" y="485" width="0.0805%" height="15" fill="rgb(214,186,4)" fg:x="980" fg:w="1"/><text x="79.0915%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8415%" y="469" width="0.0805%" height="15" fill="rgb(220,133,22)" fg:x="980" fg:w="1"/><text x="79.0915%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="78.8415%" y="453" width="0.0805%" height="15" fill="rgb(239,134,19)" fg:x="980" fg:w="1"/><text x="79.0915%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8415%" y="437" width="0.0805%" height="15" fill="rgb(250,140,9)" fg:x="980" fg:w="1"/><text x="79.0915%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="78.8415%" y="421" width="0.0805%" height="15" fill="rgb(225,59,14)" fg:x="980" fg:w="1"/><text x="79.0915%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.8415%" y="405" width="0.0805%" height="15" fill="rgb(214,152,51)" fg:x="980" fg:w="1"/><text x="79.0915%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="78.8415%" y="389" width="0.0805%" height="15" fill="rgb(251,227,43)" fg:x="980" fg:w="1"/><text x="79.0915%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="78.9220%" y="565" width="0.0805%" height="15" fill="rgb(241,96,17)" fg:x="981" fg:w="1"/><text x="79.1720%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="78.9220%" y="549" width="0.0805%" height="15" fill="rgb(234,198,43)" fg:x="981" fg:w="1"/><text x="79.1720%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.9220%" y="533" width="0.0805%" height="15" fill="rgb(220,108,29)" fg:x="981" fg:w="1"/><text x="79.1720%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9220%" y="517" width="0.0805%" height="15" fill="rgb(226,163,33)" fg:x="981" fg:w="1"/><text x="79.1720%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.9220%" y="501" width="0.0805%" height="15" fill="rgb(205,194,45)" fg:x="981" fg:w="1"/><text x="79.1720%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="78.9220%" y="485" width="0.0805%" height="15" fill="rgb(206,143,44)" fg:x="981" fg:w="1"/><text x="79.1720%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.9220%" y="469" width="0.0805%" height="15" fill="rgb(236,136,36)" fg:x="981" fg:w="1"/><text x="79.1720%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="78.9220%" y="453" width="0.0805%" height="15" fill="rgb(249,172,42)" fg:x="981" fg:w="1"/><text x="79.1720%" y="463.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="78.8415%" y="677" width="0.2414%" height="15" fill="rgb(216,139,23)" fg:x="980" fg:w="3"/><text x="79.0915%" y="687.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="78.8415%" y="661" width="0.2414%" height="15" fill="rgb(207,166,20)" fg:x="980" fg:w="3"/><text x="79.0915%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="78.8415%" y="645" width="0.2414%" height="15" fill="rgb(210,209,22)" fg:x="980" fg:w="3"/><text x="79.0915%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="78.8415%" y="629" width="0.2414%" height="15" fill="rgb(232,118,20)" fg:x="980" fg:w="3"/><text x="79.0915%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="78.8415%" y="613" width="0.2414%" height="15" fill="rgb(238,113,42)" fg:x="980" fg:w="3"/><text x="79.0915%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="78.8415%" y="597" width="0.2414%" height="15" fill="rgb(231,42,5)" fg:x="980" fg:w="3"/><text x="79.0915%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="78.8415%" y="581" width="0.2414%" height="15" fill="rgb(243,166,24)" fg:x="980" fg:w="3"/><text x="79.0915%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.0024%" y="565" width="0.0805%" height="15" fill="rgb(237,226,12)" fg:x="982" fg:w="1"/><text x="79.2524%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.0024%" y="549" width="0.0805%" height="15" fill="rgb(229,133,24)" fg:x="982" fg:w="1"/><text x="79.2524%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="79.0024%" y="533" width="0.0805%" height="15" fill="rgb(238,33,43)" fg:x="982" fg:w="1"/><text x="79.2524%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0024%" y="517" width="0.0805%" height="15" fill="rgb(227,59,38)" fg:x="982" fg:w="1"/><text x="79.2524%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0024%" y="501" width="0.0805%" height="15" fill="rgb(230,97,0)" fg:x="982" fg:w="1"/><text x="79.2524%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0024%" y="485" width="0.0805%" height="15" fill="rgb(250,173,50)" fg:x="982" fg:w="1"/><text x="79.2524%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.0024%" y="469" width="0.0805%" height="15" fill="rgb(240,15,50)" fg:x="982" fg:w="1"/><text x="79.2524%" y="479.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0829%" y="677" width="0.0805%" height="15" fill="rgb(221,93,22)" fg:x="983" fg:w="1"/><text x="79.3329%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0829%" y="661" width="0.0805%" height="15" fill="rgb(245,180,53)" fg:x="983" fg:w="1"/><text x="79.3329%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.0829%" y="645" width="0.0805%" height="15" fill="rgb(231,88,51)" fg:x="983" fg:w="1"/><text x="79.3329%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.0829%" y="629" width="0.0805%" height="15" fill="rgb(240,58,21)" fg:x="983" fg:w="1"/><text x="79.3329%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.0829%" y="613" width="0.0805%" height="15" fill="rgb(237,21,10)" fg:x="983" fg:w="1"/><text x="79.3329%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.0829%" y="597" width="0.0805%" height="15" fill="rgb(218,43,11)" fg:x="983" fg:w="1"/><text x="79.3329%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.0829%" y="581" width="0.0805%" height="15" fill="rgb(218,221,29)" fg:x="983" fg:w="1"/><text x="79.3329%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.0829%" y="565" width="0.0805%" height="15" fill="rgb(214,118,42)" fg:x="983" fg:w="1"/><text x="79.3329%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.0829%" y="549" width="0.0805%" height="15" fill="rgb(251,200,26)" fg:x="983" fg:w="1"/><text x="79.3329%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.0829%" y="533" width="0.0805%" height="15" fill="rgb(237,101,39)" fg:x="983" fg:w="1"/><text x="79.3329%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.0829%" y="517" width="0.0805%" height="15" fill="rgb(251,117,11)" fg:x="983" fg:w="1"/><text x="79.3329%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.0829%" y="501" width="0.0805%" height="15" fill="rgb(216,223,23)" fg:x="983" fg:w="1"/><text x="79.3329%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.0829%" y="485" width="0.0805%" height="15" fill="rgb(251,54,12)" fg:x="983" fg:w="1"/><text x="79.3329%" y="495.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="79.1633%" y="677" width="0.0805%" height="15" fill="rgb(254,176,54)" fg:x="984" fg:w="1"/><text x="79.4133%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2438%" y="453" width="0.0805%" height="15" fill="rgb(210,32,8)" fg:x="985" fg:w="1"/><text x="79.4938%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2438%" y="437" width="0.0805%" height="15" fill="rgb(235,52,38)" fg:x="985" fg:w="1"/><text x="79.4938%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2438%" y="421" width="0.0805%" height="15" fill="rgb(231,4,44)" fg:x="985" fg:w="1"/><text x="79.4938%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.2438%" y="405" width="0.0805%" height="15" fill="rgb(249,2,32)" fg:x="985" fg:w="1"/><text x="79.4938%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="79.2438%" y="501" width="0.1609%" height="15" fill="rgb(224,65,26)" fg:x="985" fg:w="2"/><text x="79.4938%" y="511.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.2438%" y="485" width="0.1609%" height="15" fill="rgb(250,73,40)" fg:x="985" fg:w="2"/><text x="79.4938%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.2438%" y="469" width="0.1609%" height="15" fill="rgb(253,177,16)" fg:x="985" fg:w="2"/><text x="79.4938%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.3242%" y="453" width="0.0805%" height="15" fill="rgb(217,32,34)" fg:x="986" fg:w="1"/><text x="79.5742%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.3242%" y="437" width="0.0805%" height="15" fill="rgb(212,7,10)" fg:x="986" fg:w="1"/><text x="79.5742%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4047%" y="485" width="0.0805%" height="15" fill="rgb(245,89,8)" fg:x="987" fg:w="1"/><text x="79.6547%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.4047%" y="469" width="0.0805%" height="15" fill="rgb(237,16,53)" fg:x="987" fg:w="1"/><text x="79.6547%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.4047%" y="453" width="0.0805%" height="15" fill="rgb(250,204,30)" fg:x="987" fg:w="1"/><text x="79.6547%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.4047%" y="437" width="0.0805%" height="15" fill="rgb(208,77,27)" fg:x="987" fg:w="1"/><text x="79.6547%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.4047%" y="421" width="0.0805%" height="15" fill="rgb(250,204,28)" fg:x="987" fg:w="1"/><text x="79.6547%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4047%" y="405" width="0.0805%" height="15" fill="rgb(244,63,21)" fg:x="987" fg:w="1"/><text x="79.6547%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.4047%" y="389" width="0.0805%" height="15" fill="rgb(236,85,44)" fg:x="987" fg:w="1"/><text x="79.6547%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.4047%" y="373" width="0.0805%" height="15" fill="rgb(215,98,4)" fg:x="987" fg:w="1"/><text x="79.6547%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.4047%" y="357" width="0.0805%" height="15" fill="rgb(235,38,11)" fg:x="987" fg:w="1"/><text x="79.6547%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.4047%" y="341" width="0.0805%" height="15" fill="rgb(254,186,25)" fg:x="987" fg:w="1"/><text x="79.6547%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.4047%" y="325" width="0.0805%" height="15" fill="rgb(225,55,31)" fg:x="987" fg:w="1"/><text x="79.6547%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4047%" y="309" width="0.0805%" height="15" fill="rgb(211,15,21)" fg:x="987" fg:w="1"/><text x="79.6547%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4851%" y="453" width="0.0805%" height="15" fill="rgb(215,187,41)" fg:x="988" fg:w="1"/><text x="79.7351%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4851%" y="437" width="0.0805%" height="15" fill="rgb(248,69,32)" fg:x="988" fg:w="1"/><text x="79.7351%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4851%" y="421" width="0.0805%" height="15" fill="rgb(252,102,52)" fg:x="988" fg:w="1"/><text x="79.7351%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.4851%" y="405" width="0.0805%" height="15" fill="rgb(253,140,32)" fg:x="988" fg:w="1"/><text x="79.7351%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (3 samples, 0.24%)</title><rect x="79.4047%" y="501" width="0.2414%" height="15" fill="rgb(216,56,42)" fg:x="987" fg:w="3"/><text x="79.6547%" y="511.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="79.4851%" y="485" width="0.1609%" height="15" fill="rgb(216,184,14)" fg:x="988" fg:w="2"/><text x="79.7351%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="79.4851%" y="469" width="0.1609%" height="15" fill="rgb(237,187,27)" fg:x="988" fg:w="2"/><text x="79.7351%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.5656%" y="453" width="0.0805%" height="15" fill="rgb(219,65,3)" fg:x="989" fg:w="1"/><text x="79.8156%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.5656%" y="437" width="0.0805%" height="15" fill="rgb(245,83,25)" fg:x="989" fg:w="1"/><text x="79.8156%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.5656%" y="421" width="0.0805%" height="15" fill="rgb(214,205,45)" fg:x="989" fg:w="1"/><text x="79.8156%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.5656%" y="405" width="0.0805%" height="15" fill="rgb(241,20,18)" fg:x="989" fg:w="1"/><text x="79.8156%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.5656%" y="389" width="0.0805%" height="15" fill="rgb(232,163,23)" fg:x="989" fg:w="1"/><text x="79.8156%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.5656%" y="373" width="0.0805%" height="15" fill="rgb(214,5,46)" fg:x="989" fg:w="1"/><text x="79.8156%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.5656%" y="357" width="0.0805%" height="15" fill="rgb(229,78,17)" fg:x="989" fg:w="1"/><text x="79.8156%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.6460%" y="421" width="0.0805%" height="15" fill="rgb(248,89,10)" fg:x="990" fg:w="1"/><text x="79.8960%" y="431.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="79.6460%" y="405" width="0.0805%" height="15" fill="rgb(248,54,15)" fg:x="990" fg:w="1"/><text x="79.8960%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="79.6460%" y="389" width="0.0805%" height="15" fill="rgb(223,116,6)" fg:x="990" fg:w="1"/><text x="79.8960%" y="399.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="79.6460%" y="373" width="0.0805%" height="15" fill="rgb(205,125,38)" fg:x="990" fg:w="1"/><text x="79.8960%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="79.6460%" y="357" width="0.0805%" height="15" fill="rgb(251,78,38)" fg:x="990" fg:w="1"/><text x="79.8960%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="79.6460%" y="341" width="0.0805%" height="15" fill="rgb(253,78,28)" fg:x="990" fg:w="1"/><text x="79.8960%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.21%)</title><rect x="79.7265%" y="357" width="1.2068%" height="15" fill="rgb(209,120,3)" fg:x="991" fg:w="15"/><text x="79.9765%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (15 samples, 1.21%)</title><rect x="79.7265%" y="341" width="1.2068%" height="15" fill="rgb(238,229,9)" fg:x="991" fg:w="15"/><text x="79.9765%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="81.0137%" y="341" width="0.3218%" height="15" fill="rgb(253,159,18)" fg:x="1007" fg:w="4"/><text x="81.2637%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="81.2550%" y="325" width="0.0805%" height="15" fill="rgb(244,42,34)" fg:x="1010" fg:w="1"/><text x="81.5050%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="81.3355%" y="309" width="0.1609%" height="15" fill="rgb(224,8,7)" fg:x="1011" fg:w="2"/><text x="81.5855%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.64%)</title><rect x="80.9332%" y="357" width="0.6436%" height="15" fill="rgb(210,201,45)" fg:x="1006" fg:w="8"/><text x="81.1832%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="81.3355%" y="341" width="0.2414%" height="15" fill="rgb(252,185,21)" fg:x="1011" fg:w="3"/><text x="81.5855%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (3 samples, 0.24%)</title><rect x="81.3355%" y="325" width="0.2414%" height="15" fill="rgb(223,131,1)" fg:x="1011" fg:w="3"/><text x="81.5855%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="81.4964%" y="309" width="0.0805%" height="15" fill="rgb(245,141,16)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.4964%" y="293" width="0.0805%" height="15" fill="rgb(229,55,45)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.4964%" y="277" width="0.0805%" height="15" fill="rgb(208,92,15)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.4964%" y="261" width="0.0805%" height="15" fill="rgb(234,185,47)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="81.4964%" y="245" width="0.0805%" height="15" fill="rgb(253,104,50)" fg:x="1013" fg:w="1"/><text x="81.7464%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.6573%" y="293" width="0.0805%" height="15" fill="rgb(205,70,7)" fg:x="1015" fg:w="1"/><text x="81.9073%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="81.7377%" y="293" width="0.0805%" height="15" fill="rgb(240,178,43)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.7377%" y="277" width="0.0805%" height="15" fill="rgb(214,112,2)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.7377%" y="261" width="0.0805%" height="15" fill="rgb(206,46,17)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.7377%" y="245" width="0.0805%" height="15" fill="rgb(225,220,16)" fg:x="1016" fg:w="1"/><text x="81.9877%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="81.8182%" y="293" width="0.1609%" height="15" fill="rgb(238,65,40)" fg:x="1017" fg:w="2"/><text x="82.0682%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="81.8986%" y="277" width="0.0805%" height="15" fill="rgb(230,151,21)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="81.8986%" y="261" width="0.0805%" height="15" fill="rgb(218,58,49)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.8986%" y="245" width="0.0805%" height="15" fill="rgb(219,179,14)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.8986%" y="229" width="0.0805%" height="15" fill="rgb(223,72,1)" fg:x="1018" fg:w="1"/><text x="82.1486%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="81.9791%" y="293" width="0.0805%" height="15" fill="rgb(238,126,10)" fg:x="1019" fg:w="1"/><text x="82.2291%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="81.9791%" y="277" width="0.0805%" height="15" fill="rgb(224,206,38)" fg:x="1019" fg:w="1"/><text x="82.2291%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (28 samples, 2.25%)</title><rect x="82.0595%" y="293" width="2.2526%" height="15" fill="rgb(212,201,54)" fg:x="1020" fg:w="28"/><text x="82.3095%" y="303.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (28 samples, 2.25%)</title><rect x="82.0595%" y="277" width="2.2526%" height="15" fill="rgb(218,154,48)" fg:x="1020" fg:w="28"/><text x="82.3095%" y="287.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (28 samples, 2.25%)</title><rect x="82.0595%" y="261" width="2.2526%" height="15" fill="rgb(232,93,24)" fg:x="1020" fg:w="28"/><text x="82.3095%" y="271.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="84.3121%" y="293" width="0.1609%" height="15" fill="rgb(245,30,21)" fg:x="1048" fg:w="2"/><text x="84.5621%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 2.98%)</title><rect x="81.5768%" y="341" width="2.9767%" height="15" fill="rgb(242,148,29)" fg:x="1014" fg:w="37"/><text x="81.8268%" y="351.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 2.98%)</title><rect x="81.5768%" y="325" width="2.9767%" height="15" fill="rgb(244,153,54)" fg:x="1014" fg:w="37"/><text x="81.8268%" y="335.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (37 samples, 2.98%)</title><rect x="81.5768%" y="309" width="2.9767%" height="15" fill="rgb(252,87,22)" fg:x="1014" fg:w="37"/><text x="81.8268%" y="319.50">reg..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="84.4730%" y="293" width="0.0805%" height="15" fill="rgb(210,51,29)" fg:x="1050" fg:w="1"/><text x="84.7230%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.4730%" y="277" width="0.0805%" height="15" fill="rgb(242,136,47)" fg:x="1050" fg:w="1"/><text x="84.7230%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.4730%" y="261" width="0.0805%" height="15" fill="rgb(238,68,4)" fg:x="1050" fg:w="1"/><text x="84.7230%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.4730%" y="245" width="0.0805%" height="15" fill="rgb(242,161,30)" fg:x="1050" fg:w="1"/><text x="84.7230%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.5535%" y="341" width="0.0805%" height="15" fill="rgb(218,58,44)" fg:x="1051" fg:w="1"/><text x="84.8035%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="84.6340%" y="325" width="0.2414%" height="15" fill="rgb(252,125,32)" fg:x="1052" fg:w="3"/><text x="84.8840%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="84.6340%" y="309" width="0.2414%" height="15" fill="rgb(219,178,0)" fg:x="1052" fg:w="3"/><text x="84.8840%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="84.6340%" y="293" width="0.2414%" height="15" fill="rgb(213,152,7)" fg:x="1052" fg:w="3"/><text x="84.8840%" y="303.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="84.6340%" y="277" width="0.2414%" height="15" fill="rgb(249,109,34)" fg:x="1052" fg:w="3"/><text x="84.8840%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="84.8753%" y="325" width="0.1609%" height="15" fill="rgb(232,96,21)" fg:x="1055" fg:w="2"/><text x="85.1253%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.9558%" y="309" width="0.0805%" height="15" fill="rgb(228,27,39)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.9558%" y="293" width="0.0805%" height="15" fill="rgb(211,182,52)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.9558%" y="277" width="0.0805%" height="15" fill="rgb(234,178,38)" fg:x="1056" fg:w="1"/><text x="85.2058%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="85.0362%" y="325" width="0.0805%" height="15" fill="rgb(221,111,3)" fg:x="1057" fg:w="1"/><text x="85.2862%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="84.6340%" y="341" width="0.5632%" height="15" fill="rgb(228,175,21)" fg:x="1052" fg:w="7"/><text x="84.8840%" y="351.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="85.1167%" y="325" width="0.0805%" height="15" fill="rgb(228,174,43)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1167%" y="309" width="0.0805%" height="15" fill="rgb(211,191,0)" fg:x="1058" fg:w="1"/><text x="85.3667%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="85.1971%" y="341" width="0.0805%" height="15" fill="rgb(253,117,3)" fg:x="1059" fg:w="1"/><text x="85.4471%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (47 samples, 3.78%)</title><rect x="81.5768%" y="357" width="3.7812%" height="15" fill="rgb(241,127,19)" fg:x="1014" fg:w="47"/><text x="81.8268%" y="367.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="85.2776%" y="341" width="0.0805%" height="15" fill="rgb(218,103,12)" fg:x="1060" fg:w="1"/><text x="85.5276%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="85.2776%" y="325" width="0.0805%" height="15" fill="rgb(236,214,43)" fg:x="1060" fg:w="1"/><text x="85.5276%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (71 samples, 5.71%)</title><rect x="79.7265%" y="373" width="5.7120%" height="15" fill="rgb(244,144,19)" fg:x="991" fg:w="71"/><text x="79.9765%" y="383.50">regex_a..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="85.3580%" y="357" width="0.0805%" height="15" fill="rgb(246,188,10)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="367.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="85.3580%" y="341" width="0.0805%" height="15" fill="rgb(212,193,33)" fg:x="1061" fg:w="1"/><text x="85.6080%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="85.4385%" y="325" width="0.0805%" height="15" fill="rgb(241,51,29)" fg:x="1062" fg:w="1"/><text x="85.6885%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="85.4385%" y="373" width="0.1609%" height="15" fill="rgb(211,58,19)" fg:x="1062" fg:w="2"/><text x="85.6885%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="85.4385%" y="357" width="0.1609%" height="15" fill="rgb(229,111,26)" fg:x="1062" fg:w="2"/><text x="85.6885%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="85.4385%" y="341" width="0.1609%" height="15" fill="rgb(213,115,40)" fg:x="1062" fg:w="2"/><text x="85.6885%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="85.5189%" y="325" width="0.0805%" height="15" fill="rgb(209,56,44)" fg:x="1063" fg:w="1"/><text x="85.7689%" y="335.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (75 samples, 6.03%)</title><rect x="79.7265%" y="421" width="6.0338%" height="15" fill="rgb(230,108,32)" fg:x="991" fg:w="75"/><text x="79.9765%" y="431.50">&lt;regex::..</text></g><g><title>regex::builders::Builder::build_one_string (75 samples, 6.03%)</title><rect x="79.7265%" y="405" width="6.0338%" height="15" fill="rgb(216,165,31)" fg:x="991" fg:w="75"/><text x="79.9765%" y="415.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (75 samples, 6.03%)</title><rect x="79.7265%" y="389" width="6.0338%" height="15" fill="rgb(218,122,21)" fg:x="991" fg:w="75"/><text x="79.9765%" y="399.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="85.5994%" y="373" width="0.1609%" height="15" fill="rgb(223,224,47)" fg:x="1064" fg:w="2"/><text x="85.8494%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="85.5994%" y="357" width="0.1609%" height="15" fill="rgb(238,102,44)" fg:x="1064" fg:w="2"/><text x="85.8494%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6798%" y="341" width="0.0805%" height="15" fill="rgb(236,46,40)" fg:x="1065" fg:w="1"/><text x="85.9298%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7603%" y="389" width="0.0805%" height="15" fill="rgb(247,202,50)" fg:x="1066" fg:w="1"/><text x="86.0103%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.8407%" y="389" width="0.0805%" height="15" fill="rgb(209,99,20)" fg:x="1067" fg:w="1"/><text x="86.0907%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="85.9212%" y="373" width="0.0805%" height="15" fill="rgb(252,27,34)" fg:x="1068" fg:w="1"/><text x="86.1712%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="85.7603%" y="421" width="0.3218%" height="15" fill="rgb(215,206,23)" fg:x="1066" fg:w="4"/><text x="86.0103%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="85.7603%" y="405" width="0.3218%" height="15" fill="rgb(212,135,36)" fg:x="1066" fg:w="4"/><text x="86.0103%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="85.9212%" y="389" width="0.1609%" height="15" fill="rgb(240,189,1)" fg:x="1068" fg:w="2"/><text x="86.1712%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="86.0016%" y="373" width="0.0805%" height="15" fill="rgb(242,56,20)" fg:x="1069" fg:w="1"/><text x="86.2516%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.1625%" y="341" width="0.0805%" height="15" fill="rgb(247,132,33)" fg:x="1071" fg:w="1"/><text x="86.4125%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="86.2430%" y="341" width="0.1609%" height="15" fill="rgb(208,149,11)" fg:x="1072" fg:w="2"/><text x="86.4930%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="86.3234%" y="325" width="0.0805%" height="15" fill="rgb(211,33,11)" fg:x="1073" fg:w="1"/><text x="86.5734%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="86.3234%" y="309" width="0.0805%" height="15" fill="rgb(221,29,38)" fg:x="1073" fg:w="1"/><text x="86.5734%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="86.0821%" y="357" width="0.4023%" height="15" fill="rgb(206,182,49)" fg:x="1070" fg:w="5"/><text x="86.3321%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="86.4039%" y="341" width="0.0805%" height="15" fill="rgb(216,140,1)" fg:x="1074" fg:w="1"/><text x="86.6539%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="86.0821%" y="373" width="0.4827%" height="15" fill="rgb(232,57,40)" fg:x="1070" fg:w="6"/><text x="86.3321%" y="383.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="86.4843%" y="357" width="0.0805%" height="15" fill="rgb(224,186,18)" fg:x="1075" fg:w="1"/><text x="86.7343%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.4843%" y="341" width="0.0805%" height="15" fill="rgb(215,121,11)" fg:x="1075" fg:w="1"/><text x="86.7343%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.4843%" y="325" width="0.0805%" height="15" fill="rgb(245,147,10)" fg:x="1075" fg:w="1"/><text x="86.7343%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4843%" y="309" width="0.0805%" height="15" fill="rgb(238,153,13)" fg:x="1075" fg:w="1"/><text x="86.7343%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (87 samples, 7.00%)</title><rect x="79.6460%" y="437" width="6.9992%" height="15" fill="rgb(233,108,0)" fg:x="990" fg:w="87"/><text x="79.8960%" y="447.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.56%)</title><rect x="86.0821%" y="421" width="0.5632%" height="15" fill="rgb(212,157,17)" fg:x="1070" fg:w="7"/><text x="86.3321%" y="431.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.56%)</title><rect x="86.0821%" y="405" width="0.5632%" height="15" fill="rgb(225,213,38)" fg:x="1070" fg:w="7"/><text x="86.3321%" y="415.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.56%)</title><rect x="86.0821%" y="389" width="0.5632%" height="15" fill="rgb(248,16,11)" fg:x="1070" fg:w="7"/><text x="86.3321%" y="399.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="86.5648%" y="373" width="0.0805%" height="15" fill="rgb(241,33,4)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="383.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="86.5648%" y="357" width="0.0805%" height="15" fill="rgb(222,26,43)" fg:x="1076" fg:w="1"/><text x="86.8148%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.8866%" y="341" width="0.0805%" height="15" fill="rgb(243,29,36)" fg:x="1080" fg:w="1"/><text x="87.1366%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="86.8866%" y="325" width="0.0805%" height="15" fill="rgb(241,9,27)" fg:x="1080" fg:w="1"/><text x="87.1366%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.8866%" y="309" width="0.0805%" height="15" fill="rgb(205,117,26)" fg:x="1080" fg:w="1"/><text x="87.1366%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="86.8866%" y="293" width="0.0805%" height="15" fill="rgb(209,80,39)" fg:x="1080" fg:w="1"/><text x="87.1366%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="86.8061%" y="373" width="0.2414%" height="15" fill="rgb(239,155,6)" fg:x="1079" fg:w="3"/><text x="87.0561%" y="383.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="86.8061%" y="357" width="0.2414%" height="15" fill="rgb(212,104,12)" fg:x="1079" fg:w="3"/><text x="87.0561%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="86.9670%" y="341" width="0.0805%" height="15" fill="rgb(234,204,3)" fg:x="1081" fg:w="1"/><text x="87.2170%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0475%" y="373" width="0.0805%" height="15" fill="rgb(251,218,7)" fg:x="1082" fg:w="1"/><text x="87.2975%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.1279%" y="373" width="0.0805%" height="15" fill="rgb(221,81,32)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.1279%" y="357" width="0.0805%" height="15" fill="rgb(214,152,26)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1279%" y="341" width="0.0805%" height="15" fill="rgb(223,22,3)" fg:x="1083" fg:w="1"/><text x="87.3779%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.05%)</title><rect x="87.2888%" y="357" width="1.0459%" height="15" fill="rgb(207,174,7)" fg:x="1085" fg:w="13"/><text x="87.5388%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.05%)</title><rect x="87.2888%" y="341" width="1.0459%" height="15" fill="rgb(224,19,52)" fg:x="1085" fg:w="13"/><text x="87.5388%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.2542%" y="325" width="0.0805%" height="15" fill="rgb(228,24,14)" fg:x="1097" fg:w="1"/><text x="88.5042%" y="335.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="88.3347%" y="357" width="0.3218%" height="15" fill="rgb(230,153,43)" fg:x="1098" fg:w="4"/><text x="88.5847%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="88.3347%" y="341" width="0.3218%" height="15" fill="rgb(231,106,12)" fg:x="1098" fg:w="4"/><text x="88.5847%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="88.7369%" y="325" width="0.0805%" height="15" fill="rgb(215,92,2)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.7369%" y="309" width="0.0805%" height="15" fill="rgb(249,143,25)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.7369%" y="293" width="0.0805%" height="15" fill="rgb(252,7,35)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.7369%" y="277" width="0.0805%" height="15" fill="rgb(216,69,40)" fg:x="1103" fg:w="1"/><text x="88.9869%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="88.8978%" y="293" width="0.0805%" height="15" fill="rgb(240,36,33)" fg:x="1105" fg:w="1"/><text x="89.1478%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8978%" y="277" width="0.0805%" height="15" fill="rgb(231,128,14)" fg:x="1105" fg:w="1"/><text x="89.1478%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.8978%" y="261" width="0.0805%" height="15" fill="rgb(245,143,14)" fg:x="1105" fg:w="1"/><text x="89.1478%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="88.8174%" y="325" width="0.2414%" height="15" fill="rgb(222,130,28)" fg:x="1104" fg:w="3"/><text x="89.0674%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="88.8978%" y="309" width="0.1609%" height="15" fill="rgb(212,10,48)" fg:x="1105" fg:w="2"/><text x="89.1478%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.9783%" y="293" width="0.0805%" height="15" fill="rgb(254,118,45)" fg:x="1106" fg:w="1"/><text x="89.2283%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.9783%" y="277" width="0.0805%" height="15" fill="rgb(228,6,45)" fg:x="1106" fg:w="1"/><text x="89.2283%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="88.9783%" y="261" width="0.0805%" height="15" fill="rgb(241,18,35)" fg:x="1106" fg:w="1"/><text x="89.2283%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="89.0587%" y="309" width="0.0805%" height="15" fill="rgb(227,214,53)" fg:x="1107" fg:w="1"/><text x="89.3087%" y="319.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="89.0587%" y="293" width="0.0805%" height="15" fill="rgb(224,107,51)" fg:x="1107" fg:w="1"/><text x="89.3087%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="89.0587%" y="325" width="0.1609%" height="15" fill="rgb(248,60,28)" fg:x="1107" fg:w="2"/><text x="89.3087%" y="335.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="89.1392%" y="309" width="0.0805%" height="15" fill="rgb(249,101,23)" fg:x="1108" fg:w="1"/><text x="89.3892%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="88.6565%" y="357" width="0.6436%" height="15" fill="rgb(228,51,19)" fg:x="1102" fg:w="8"/><text x="88.9065%" y="367.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="88.6565%" y="341" width="0.6436%" height="15" fill="rgb(213,20,6)" fg:x="1102" fg:w="8"/><text x="88.9065%" y="351.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="89.2196%" y="325" width="0.0805%" height="15" fill="rgb(212,124,10)" fg:x="1109" fg:w="1"/><text x="89.4696%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="90.4264%" y="245" width="0.2414%" height="15" fill="rgb(248,3,40)" fg:x="1124" fg:w="3"/><text x="90.6764%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.6677%" y="245" width="0.0805%" height="15" fill="rgb(223,178,23)" fg:x="1127" fg:w="1"/><text x="90.9177%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="90.7482%" y="245" width="0.0805%" height="15" fill="rgb(240,132,45)" fg:x="1128" fg:w="1"/><text x="90.9982%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.9895%" y="213" width="0.0805%" height="15" fill="rgb(245,164,36)" fg:x="1131" fg:w="1"/><text x="91.2395%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.0700%" y="213" width="0.1609%" height="15" fill="rgb(231,188,53)" fg:x="1132" fg:w="2"/><text x="91.3200%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.1504%" y="197" width="0.0805%" height="15" fill="rgb(237,198,39)" fg:x="1133" fg:w="1"/><text x="91.4004%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.1504%" y="181" width="0.0805%" height="15" fill="rgb(223,120,35)" fg:x="1133" fg:w="1"/><text x="91.4004%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.80%)</title><rect x="90.8286%" y="245" width="0.8045%" height="15" fill="rgb(253,107,49)" fg:x="1129" fg:w="10"/><text x="91.0786%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (10 samples, 0.80%)</title><rect x="90.8286%" y="229" width="0.8045%" height="15" fill="rgb(216,44,31)" fg:x="1129" fg:w="10"/><text x="91.0786%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="91.2309%" y="213" width="0.4023%" height="15" fill="rgb(253,87,21)" fg:x="1134" fg:w="5"/><text x="91.4809%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.5527%" y="197" width="0.0805%" height="15" fill="rgb(226,18,2)" fg:x="1138" fg:w="1"/><text x="91.8027%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5527%" y="181" width="0.0805%" height="15" fill="rgb(216,8,46)" fg:x="1138" fg:w="1"/><text x="91.8027%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5527%" y="165" width="0.0805%" height="15" fill="rgb(226,140,39)" fg:x="1138" fg:w="1"/><text x="91.8027%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.5527%" y="149" width="0.0805%" height="15" fill="rgb(221,194,54)" fg:x="1138" fg:w="1"/><text x="91.8027%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.6331%" y="229" width="0.0805%" height="15" fill="rgb(213,92,11)" fg:x="1139" fg:w="1"/><text x="91.8831%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (3 samples, 0.24%)</title><rect x="91.6331%" y="245" width="0.2414%" height="15" fill="rgb(229,162,46)" fg:x="1139" fg:w="3"/><text x="91.8831%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="91.7136%" y="229" width="0.1609%" height="15" fill="rgb(214,111,36)" fg:x="1140" fg:w="2"/><text x="91.9636%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="91.7940%" y="213" width="0.0805%" height="15" fill="rgb(207,6,21)" fg:x="1141" fg:w="1"/><text x="92.0440%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.7940%" y="197" width="0.0805%" height="15" fill="rgb(213,127,38)" fg:x="1141" fg:w="1"/><text x="92.0440%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (34 samples, 2.74%)</title><rect x="91.8745%" y="245" width="2.7353%" height="15" fill="rgb(238,118,32)" fg:x="1142" fg:w="34"/><text x="92.1245%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.74%)</title><rect x="91.8745%" y="229" width="2.7353%" height="15" fill="rgb(240,139,39)" fg:x="1142" fg:w="34"/><text x="92.1245%" y="239.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.74%)</title><rect x="91.8745%" y="213" width="2.7353%" height="15" fill="rgb(235,10,37)" fg:x="1142" fg:w="34"/><text x="92.1245%" y="223.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="94.6098%" y="245" width="0.1609%" height="15" fill="rgb(249,171,38)" fg:x="1176" fg:w="2"/><text x="94.8598%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6903%" y="229" width="0.0805%" height="15" fill="rgb(242,144,32)" fg:x="1177" fg:w="1"/><text x="94.9403%" y="239.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="94.7707%" y="245" width="0.0805%" height="15" fill="rgb(217,117,21)" fg:x="1178" fg:w="1"/><text x="95.0207%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (73 samples, 5.87%)</title><rect x="89.3805%" y="341" width="5.8729%" height="15" fill="rgb(249,87,1)" fg:x="1111" fg:w="73"/><text x="89.6305%" y="351.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.87%)</title><rect x="89.3805%" y="325" width="5.8729%" height="15" fill="rgb(248,196,48)" fg:x="1111" fg:w="73"/><text x="89.6305%" y="335.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.87%)</title><rect x="89.3805%" y="309" width="5.8729%" height="15" fill="rgb(251,206,33)" fg:x="1111" fg:w="73"/><text x="89.6305%" y="319.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (73 samples, 5.87%)</title><rect x="89.3805%" y="293" width="5.8729%" height="15" fill="rgb(232,141,28)" fg:x="1111" fg:w="73"/><text x="89.6305%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (73 samples, 5.87%)</title><rect x="89.3805%" y="277" width="5.8729%" height="15" fill="rgb(209,167,14)" fg:x="1111" fg:w="73"/><text x="89.6305%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (73 samples, 5.87%)</title><rect x="89.3805%" y="261" width="5.8729%" height="15" fill="rgb(225,11,50)" fg:x="1111" fg:w="73"/><text x="89.6305%" y="271.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (5 samples, 0.40%)</title><rect x="94.8512%" y="245" width="0.4023%" height="15" fill="rgb(209,50,20)" fg:x="1179" fg:w="5"/><text x="95.1012%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="94.9316%" y="229" width="0.3218%" height="15" fill="rgb(212,17,46)" fg:x="1180" fg:w="4"/><text x="95.1816%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.0925%" y="213" width="0.1609%" height="15" fill="rgb(216,101,39)" fg:x="1182" fg:w="2"/><text x="95.3425%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.1730%" y="197" width="0.0805%" height="15" fill="rgb(212,228,48)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.1730%" y="181" width="0.0805%" height="15" fill="rgb(250,6,50)" fg:x="1183" fg:w="1"/><text x="95.4230%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="95.4143%" y="325" width="0.1609%" height="15" fill="rgb(250,160,48)" fg:x="1186" fg:w="2"/><text x="95.6643%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="95.5752%" y="325" width="0.2414%" height="15" fill="rgb(244,216,33)" fg:x="1188" fg:w="3"/><text x="95.8252%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.6557%" y="309" width="0.1609%" height="15" fill="rgb(207,157,5)" fg:x="1189" fg:w="2"/><text x="95.9057%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.6557%" y="293" width="0.1609%" height="15" fill="rgb(228,199,8)" fg:x="1189" fg:w="2"/><text x="95.9057%" y="303.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.6557%" y="277" width="0.1609%" height="15" fill="rgb(227,80,20)" fg:x="1189" fg:w="2"/><text x="95.9057%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="95.8166%" y="325" width="0.2414%" height="15" fill="rgb(222,9,33)" fg:x="1191" fg:w="3"/><text x="96.0666%" y="335.50"></text></g><g><title>regex_automata::meta::strategy::new (111 samples, 8.93%)</title><rect x="87.2084%" y="373" width="8.9300%" height="15" fill="rgb(239,44,28)" fg:x="1084" fg:w="111"/><text x="87.4584%" y="383.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (85 samples, 6.84%)</title><rect x="89.3001%" y="357" width="6.8383%" height="15" fill="rgb(249,187,43)" fg:x="1110" fg:w="85"/><text x="89.5501%" y="367.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.88%)</title><rect x="95.2534%" y="341" width="0.8850%" height="15" fill="rgb(216,141,28)" fg:x="1184" fg:w="11"/><text x="95.5034%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.0579%" y="325" width="0.0805%" height="15" fill="rgb(230,154,53)" fg:x="1194" fg:w="1"/><text x="96.3079%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="96.1384%" y="341" width="0.0805%" height="15" fill="rgb(227,82,4)" fg:x="1195" fg:w="1"/><text x="96.3884%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="96.1384%" y="325" width="0.0805%" height="15" fill="rgb(220,107,16)" fg:x="1195" fg:w="1"/><text x="96.3884%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.1384%" y="373" width="0.1609%" height="15" fill="rgb(207,187,2)" fg:x="1195" fg:w="2"/><text x="96.3884%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.1384%" y="357" width="0.1609%" height="15" fill="rgb(210,162,52)" fg:x="1195" fg:w="2"/><text x="96.3884%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="96.2188%" y="341" width="0.0805%" height="15" fill="rgb(217,216,49)" fg:x="1196" fg:w="1"/><text x="96.4688%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.6211%" y="309" width="0.0805%" height="15" fill="rgb(218,146,49)" fg:x="1201" fg:w="1"/><text x="96.8711%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.7015%" y="309" width="0.0805%" height="15" fill="rgb(216,55,40)" fg:x="1202" fg:w="1"/><text x="96.9515%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.7015%" y="293" width="0.0805%" height="15" fill="rgb(208,196,21)" fg:x="1202" fg:w="1"/><text x="96.9515%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="96.7015%" y="277" width="0.0805%" height="15" fill="rgb(242,117,42)" fg:x="1202" fg:w="1"/><text x="96.9515%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.56%)</title><rect x="96.2993%" y="325" width="0.5632%" height="15" fill="rgb(210,11,23)" fg:x="1197" fg:w="7"/><text x="96.5493%" y="335.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="96.7820%" y="309" width="0.0805%" height="15" fill="rgb(217,110,2)" fg:x="1203" fg:w="1"/><text x="97.0320%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.64%)</title><rect x="96.2993%" y="341" width="0.6436%" height="15" fill="rgb(229,77,54)" fg:x="1197" fg:w="8"/><text x="96.5493%" y="351.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="96.8624%" y="325" width="0.0805%" height="15" fill="rgb(218,53,16)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="335.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="96.8624%" y="309" width="0.0805%" height="15" fill="rgb(215,38,13)" fg:x="1204" fg:w="1"/><text x="97.1124%" y="319.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (129 samples, 10.38%)</title><rect x="86.7257%" y="421" width="10.3781%" height="15" fill="rgb(235,42,18)" fg:x="1078" fg:w="129"/><text x="86.9757%" y="431.50">&lt;regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (129 samples, 10.38%)</title><rect x="86.7257%" y="405" width="10.3781%" height="15" fill="rgb(219,66,54)" fg:x="1078" fg:w="129"/><text x="86.9757%" y="415.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (129 samples, 10.38%)</title><rect x="86.7257%" y="389" width="10.3781%" height="15" fill="rgb(222,205,4)" fg:x="1078" fg:w="129"/><text x="86.9757%" y="399.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (10 samples, 0.80%)</title><rect x="96.2993%" y="373" width="0.8045%" height="15" fill="rgb(227,213,46)" fg:x="1197" fg:w="10"/><text x="96.5493%" y="383.50"></text></g><g><title>regex_syntax::ast::visitor::visit (10 samples, 0.80%)</title><rect x="96.2993%" y="357" width="0.8045%" height="15" fill="rgb(250,145,42)" fg:x="1197" fg:w="10"/><text x="96.5493%" y="367.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="96.9429%" y="341" width="0.1609%" height="15" fill="rgb(219,15,2)" fg:x="1205" fg:w="2"/><text x="97.1929%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="97.0233%" y="325" width="0.0805%" height="15" fill="rgb(231,181,52)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0233%" y="309" width="0.0805%" height="15" fill="rgb(235,1,42)" fg:x="1206" fg:w="1"/><text x="97.2733%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1038%" y="389" width="0.0805%" height="15" fill="rgb(249,88,27)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="97.1038%" y="373" width="0.0805%" height="15" fill="rgb(235,145,16)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="383.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1038%" y="357" width="0.0805%" height="15" fill="rgb(237,114,19)" fg:x="1207" fg:w="1"/><text x="97.3538%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.1038%" y="421" width="0.1609%" height="15" fill="rgb(238,51,50)" fg:x="1207" fg:w="2"/><text x="97.3538%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.1038%" y="405" width="0.1609%" height="15" fill="rgb(205,194,25)" fg:x="1207" fg:w="2"/><text x="97.3538%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.1842%" y="389" width="0.0805%" height="15" fill="rgb(215,203,17)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="97.1842%" y="373" width="0.0805%" height="15" fill="rgb(233,112,49)" fg:x="1208" fg:w="1"/><text x="97.4342%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="97.2647%" y="405" width="0.0805%" height="15" fill="rgb(241,130,26)" fg:x="1209" fg:w="1"/><text x="97.5147%" y="415.50"></text></g><g><title>indefinite::rules::number::Number::check (134 samples, 10.78%)</title><rect x="86.6452%" y="437" width="10.7804%" height="15" fill="rgb(252,223,19)" fg:x="1077" fg:w="134"/><text x="86.8952%" y="447.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::is_match_at (2 samples, 0.16%)</title><rect x="97.2647%" y="421" width="0.1609%" height="15" fill="rgb(211,95,25)" fg:x="1209" fg:w="2"/><text x="97.5147%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="97.3451%" y="405" width="0.0805%" height="15" fill="rgb(251,182,27)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.3451%" y="389" width="0.0805%" height="15" fill="rgb(238,24,4)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.3451%" y="373" width="0.0805%" height="15" fill="rgb(224,220,25)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.3451%" y="357" width="0.0805%" height="15" fill="rgb(239,133,26)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.3451%" y="341" width="0.0805%" height="15" fill="rgb(211,94,48)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.3451%" y="325" width="0.0805%" height="15" fill="rgb(239,87,6)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3451%" y="309" width="0.0805%" height="15" fill="rgb(227,62,0)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.3451%" y="293" width="0.0805%" height="15" fill="rgb(211,226,4)" fg:x="1210" fg:w="1"/><text x="97.5951%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.4256%" y="357" width="0.0805%" height="15" fill="rgb(253,38,52)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="367.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4256%" y="341" width="0.0805%" height="15" fill="rgb(229,126,40)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="97.4256%" y="325" width="0.0805%" height="15" fill="rgb(229,165,44)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.4256%" y="309" width="0.0805%" height="15" fill="rgb(247,95,47)" fg:x="1211" fg:w="1"/><text x="97.6756%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.6669%" y="341" width="0.0805%" height="15" fill="rgb(216,140,30)" fg:x="1214" fg:w="1"/><text x="97.9169%" y="351.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="97.7474%" y="341" width="0.1609%" height="15" fill="rgb(246,214,8)" fg:x="1215" fg:w="2"/><text x="97.9974%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="97.8278%" y="325" width="0.0805%" height="15" fill="rgb(227,224,15)" fg:x="1216" fg:w="1"/><text x="98.0778%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.9083%" y="325" width="0.0805%" height="15" fill="rgb(233,175,4)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="97.9083%" y="309" width="0.0805%" height="15" fill="rgb(221,66,45)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="97.9083%" y="293" width="0.0805%" height="15" fill="rgb(221,178,18)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="97.9083%" y="277" width="0.0805%" height="15" fill="rgb(213,81,29)" fg:x="1217" fg:w="1"/><text x="98.1583%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.9887%" y="309" width="0.0805%" height="15" fill="rgb(220,89,49)" fg:x="1218" fg:w="1"/><text x="98.2387%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (8 samples, 0.64%)</title><rect x="97.5060%" y="357" width="0.6436%" height="15" fill="rgb(227,60,33)" fg:x="1212" fg:w="8"/><text x="97.7560%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="97.9083%" y="341" width="0.2414%" height="15" fill="rgb(205,113,12)" fg:x="1217" fg:w="3"/><text x="98.1583%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="97.9887%" y="325" width="0.1609%" height="15" fill="rgb(211,32,1)" fg:x="1218" fg:w="2"/><text x="98.2387%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="98.0692%" y="309" width="0.0805%" height="15" fill="rgb(246,2,12)" fg:x="1219" fg:w="1"/><text x="98.3192%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="98.1496%" y="293" width="0.0805%" height="15" fill="rgb(243,37,27)" fg:x="1220" fg:w="1"/><text x="98.3996%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="98.1496%" y="309" width="0.1609%" height="15" fill="rgb(248,211,31)" fg:x="1220" fg:w="2"/><text x="98.3996%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="98.2301%" y="293" width="0.0805%" height="15" fill="rgb(242,146,47)" fg:x="1221" fg:w="1"/><text x="98.4801%" y="303.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (12 samples, 0.97%)</title><rect x="97.4256%" y="405" width="0.9654%" height="15" fill="rgb(206,70,20)" fg:x="1211" fg:w="12"/><text x="97.6756%" y="415.50"></text></g><g><title>regex::builders::Builder::build_one_string (12 samples, 0.97%)</title><rect x="97.4256%" y="389" width="0.9654%" height="15" fill="rgb(215,10,51)" fg:x="1211" fg:w="12"/><text x="97.6756%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (12 samples, 0.97%)</title><rect x="97.4256%" y="373" width="0.9654%" height="15" fill="rgb(243,178,53)" fg:x="1211" fg:w="12"/><text x="97.6756%" y="383.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="98.1496%" y="357" width="0.2414%" height="15" fill="rgb(233,221,20)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="367.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="98.1496%" y="341" width="0.2414%" height="15" fill="rgb(218,95,35)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="98.1496%" y="325" width="0.2414%" height="15" fill="rgb(229,13,5)" fg:x="1220" fg:w="3"/><text x="98.3996%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="98.3105%" y="309" width="0.0805%" height="15" fill="rgb(252,164,30)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="98.3105%" y="293" width="0.0805%" height="15" fill="rgb(232,68,36)" fg:x="1222" fg:w="1"/><text x="98.5605%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.3910%" y="341" width="0.0805%" height="15" fill="rgb(219,59,54)" fg:x="1223" fg:w="1"/><text x="98.6410%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="98.3910%" y="357" width="0.1609%" height="15" fill="rgb(250,92,33)" fg:x="1223" fg:w="2"/><text x="98.6410%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.4714%" y="341" width="0.0805%" height="15" fill="rgb(229,162,54)" fg:x="1224" fg:w="1"/><text x="98.7214%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="98.3910%" y="405" width="0.2414%" height="15" fill="rgb(244,114,52)" fg:x="1223" fg:w="3"/><text x="98.6410%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="98.3910%" y="389" width="0.2414%" height="15" fill="rgb(212,211,43)" fg:x="1223" fg:w="3"/><text x="98.6410%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="98.3910%" y="373" width="0.2414%" height="15" fill="rgb(226,147,8)" fg:x="1223" fg:w="3"/><text x="98.6410%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="98.5519%" y="357" width="0.0805%" height="15" fill="rgb(226,23,13)" fg:x="1225" fg:w="1"/><text x="98.8019%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5519%" y="341" width="0.0805%" height="15" fill="rgb(240,63,4)" fg:x="1225" fg:w="1"/><text x="98.8019%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.7128%" y="325" width="0.0805%" height="15" fill="rgb(221,1,32)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.7128%" y="309" width="0.0805%" height="15" fill="rgb(242,117,10)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="319.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="98.7128%" y="293" width="0.0805%" height="15" fill="rgb(249,172,44)" fg:x="1227" fg:w="1"/><text x="98.9628%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.7932%" y="325" width="0.0805%" height="15" fill="rgb(244,46,45)" fg:x="1228" fg:w="1"/><text x="99.0432%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="98.6323%" y="341" width="0.3218%" height="15" fill="rgb(206,43,17)" fg:x="1226" fg:w="4"/><text x="98.8823%" y="351.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.8737%" y="325" width="0.0805%" height="15" fill="rgb(239,218,39)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.8737%" y="309" width="0.0805%" height="15" fill="rgb(208,169,54)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.8737%" y="293" width="0.0805%" height="15" fill="rgb(247,25,42)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8737%" y="277" width="0.0805%" height="15" fill="rgb(226,23,31)" fg:x="1229" fg:w="1"/><text x="99.1237%" y="287.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (246 samples, 19.79%)</title><rect x="79.2438%" y="517" width="19.7908%" height="15" fill="rgb(247,16,28)" fg:x="985" fg:w="246"/><text x="79.4938%" y="527.50">&lt;&amp;kernel::model::entry::Entry a..</text></g><g><title>plugins_core::looking::model::qualify_name (241 samples, 19.39%)</title><rect x="79.6460%" y="501" width="19.3886%" height="15" fill="rgb(231,147,38)" fg:x="990" fg:w="241"/><text x="79.8960%" y="511.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (241 samples, 19.39%)</title><rect x="79.6460%" y="485" width="19.3886%" height="15" fill="rgb(253,81,48)" fg:x="990" fg:w="241"/><text x="79.8960%" y="495.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (241 samples, 19.39%)</title><rect x="79.6460%" y="469" width="19.3886%" height="15" fill="rgb(249,222,43)" fg:x="990" fg:w="241"/><text x="79.8960%" y="479.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (241 samples, 19.39%)</title><rect x="79.6460%" y="453" width="19.3886%" height="15" fill="rgb(221,3,27)" fg:x="990" fg:w="241"/><text x="79.8960%" y="463.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (20 samples, 1.61%)</title><rect x="97.4256%" y="437" width="1.6090%" height="15" fill="rgb(228,180,5)" fg:x="1211" fg:w="20"/><text x="97.6756%" y="447.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (20 samples, 1.61%)</title><rect x="97.4256%" y="421" width="1.6090%" height="15" fill="rgb(227,131,42)" fg:x="1211" fg:w="20"/><text x="97.6756%" y="431.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="98.6323%" y="405" width="0.4023%" height="15" fill="rgb(212,3,39)" fg:x="1226" fg:w="5"/><text x="98.8823%" y="415.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="98.6323%" y="389" width="0.4023%" height="15" fill="rgb(226,45,5)" fg:x="1226" fg:w="5"/><text x="98.8823%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="98.6323%" y="373" width="0.4023%" height="15" fill="rgb(215,167,45)" fg:x="1226" fg:w="5"/><text x="98.8823%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="98.6323%" y="357" width="0.4023%" height="15" fill="rgb(250,218,53)" fg:x="1226" fg:w="5"/><text x="98.8823%" y="367.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.9541%" y="341" width="0.0805%" height="15" fill="rgb(207,140,0)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.9541%" y="325" width="0.0805%" height="15" fill="rgb(238,133,51)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="98.9541%" y="309" width="0.0805%" height="15" fill="rgb(218,203,53)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9541%" y="293" width="0.0805%" height="15" fill="rgb(226,184,25)" fg:x="1230" fg:w="1"/><text x="99.2041%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::to_entry (1 samples, 0.08%)</title><rect x="99.0346%" y="517" width="0.0805%" height="15" fill="rgb(231,121,21)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="527.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="99.0346%" y="501" width="0.0805%" height="15" fill="rgb(251,14,34)" fg:x="1231" fg:w="1"/><text x="99.2846%" y="511.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1955%" y="485" width="0.0805%" height="15" fill="rgb(249,193,11)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1955%" y="469" width="0.0805%" height="15" fill="rgb(220,172,37)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.1955%" y="453" width="0.0805%" height="15" fill="rgb(231,229,43)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1955%" y="437" width="0.0805%" height="15" fill="rgb(250,161,5)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1955%" y="421" width="0.0805%" height="15" fill="rgb(218,225,18)" fg:x="1233" fg:w="1"/><text x="99.4455%" y="431.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="99.2759%" y="485" width="0.0805%" height="15" fill="rgb(245,45,42)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="99.2759%" y="469" width="0.0805%" height="15" fill="rgb(211,115,1)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.2759%" y="453" width="0.0805%" height="15" fill="rgb(248,133,52)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="99.2759%" y="437" width="0.0805%" height="15" fill="rgb(238,100,21)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="99.2759%" y="421" width="0.0805%" height="15" fill="rgb(247,144,11)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="99.2759%" y="405" width="0.0805%" height="15" fill="rgb(206,164,16)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.2759%" y="389" width="0.0805%" height="15" fill="rgb(222,34,3)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="399.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.2759%" y="373" width="0.0805%" height="15" fill="rgb(248,82,4)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2759%" y="357" width="0.0805%" height="15" fill="rgb(228,81,46)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2759%" y="341" width="0.0805%" height="15" fill="rgb(227,67,47)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2759%" y="325" width="0.0805%" height="15" fill="rgb(215,93,53)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2759%" y="309" width="0.0805%" height="15" fill="rgb(248,194,39)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2759%" y="293" width="0.0805%" height="15" fill="rgb(215,5,19)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2759%" y="277" width="0.0805%" height="15" fill="rgb(226,215,51)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2759%" y="261" width="0.0805%" height="15" fill="rgb(225,56,26)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2759%" y="245" width="0.0805%" height="15" fill="rgb(222,75,29)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2759%" y="229" width="0.0805%" height="15" fill="rgb(236,139,6)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2759%" y="213" width="0.0805%" height="15" fill="rgb(223,137,36)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.2759%" y="197" width="0.0805%" height="15" fill="rgb(226,99,2)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2759%" y="181" width="0.0805%" height="15" fill="rgb(206,133,23)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2759%" y="165" width="0.0805%" height="15" fill="rgb(243,173,15)" fg:x="1234" fg:w="1"/><text x="99.5259%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3564%" y="485" width="0.0805%" height="15" fill="rgb(228,69,28)" fg:x="1235" fg:w="1"/><text x="99.6064%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (257 samples, 20.68%)</title><rect x="78.8415%" y="741" width="20.6758%" height="15" fill="rgb(212,51,22)" fg:x="980" fg:w="257"/><text x="79.0915%" y="751.50">&lt;engine::session::Session as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (257 samples, 20.68%)</title><rect x="78.8415%" y="725" width="20.6758%" height="15" fill="rgb(227,113,0)" fg:x="980" fg:w="257"/><text x="79.0915%" y="735.50">kernel::plugins::mw::apply_middle..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (257 samples, 20.68%)</title><rect x="78.8415%" y="709" width="20.6758%" height="15" fill="rgb(252,84,27)" fg:x="980" fg:w="257"/><text x="79.0915%" y="719.50">kernel::plugins::mw::MiddlewareNe..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (257 samples, 20.68%)</title><rect x="78.8415%" y="693" width="20.6758%" height="15" fill="rgb(223,145,39)" fg:x="980" fg:w="257"/><text x="79.0915%" y="703.50">&lt;engine::session::ExpandSurroundi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (252 samples, 20.27%)</title><rect x="79.2438%" y="677" width="20.2735%" height="15" fill="rgb(239,219,30)" fg:x="985" fg:w="252"/><text x="79.4938%" y="687.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (252 samples, 20.27%)</title><rect x="79.2438%" y="661" width="20.2735%" height="15" fill="rgb(224,196,39)" fg:x="985" fg:w="252"/><text x="79.4938%" y="671.50">&lt;plugins_dynlib::DynamicMiddlewa..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (252 samples, 20.27%)</title><rect x="79.2438%" y="645" width="20.2735%" height="15" fill="rgb(205,35,43)" fg:x="985" fg:w="252"/><text x="79.4938%" y="655.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (252 samples, 20.27%)</title><rect x="79.2438%" y="629" width="20.2735%" height="15" fill="rgb(228,201,21)" fg:x="985" fg:w="252"/><text x="79.4938%" y="639.50">core::ops::function::FnOnce::cal..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (252 samples, 20.27%)</title><rect x="79.2438%" y="613" width="20.2735%" height="15" fill="rgb(237,118,16)" fg:x="985" fg:w="252"/><text x="79.4938%" y="623.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (252 samples, 20.27%)</title><rect x="79.2438%" y="597" width="20.2735%" height="15" fill="rgb(241,17,19)" fg:x="985" fg:w="252"/><text x="79.4938%" y="607.50">core::ops::function::FnOnce::cal..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (252 samples, 20.27%)</title><rect x="79.2438%" y="581" width="20.2735%" height="15" fill="rgb(214,10,25)" fg:x="985" fg:w="252"/><text x="79.4938%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (252 samples, 20.27%)</title><rect x="79.2438%" y="565" width="20.2735%" height="15" fill="rgb(238,37,29)" fg:x="985" fg:w="252"/><text x="79.4938%" y="575.50">&lt;engine::session::state::State a..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (252 samples, 20.27%)</title><rect x="79.2438%" y="549" width="20.2735%" height="15" fill="rgb(253,83,25)" fg:x="985" fg:w="252"/><text x="79.4938%" y="559.50">&lt;plugins_core::looking::actions:..</text></g><g><title>plugins_core::looking::model::new_area_observation (252 samples, 20.27%)</title><rect x="79.2438%" y="533" width="20.2735%" height="15" fill="rgb(234,192,12)" fg:x="985" fg:w="252"/><text x="79.4938%" y="543.50">plugins_core::looking::model::ne..</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.40%)</title><rect x="99.1150%" y="517" width="0.4023%" height="15" fill="rgb(241,216,45)" fg:x="1232" fg:w="5"/><text x="99.3650%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (5 samples, 0.40%)</title><rect x="99.1150%" y="501" width="0.4023%" height="15" fill="rgb(242,22,33)" fg:x="1232" fg:w="5"/><text x="99.3650%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.4368%" y="485" width="0.0805%" height="15" fill="rgb(231,105,49)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.4368%" y="469" width="0.0805%" height="15" fill="rgb(218,204,15)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.4368%" y="453" width="0.0805%" height="15" fill="rgb(235,138,41)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.4368%" y="437" width="0.0805%" height="15" fill="rgb(246,0,9)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.4368%" y="421" width="0.0805%" height="15" fill="rgb(210,74,4)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4368%" y="405" width="0.0805%" height="15" fill="rgb(250,60,41)" fg:x="1236" fg:w="1"/><text x="99.6868%" y="415.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.5173%" y="725" width="0.0805%" height="15" fill="rgb(220,115,12)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5173%" y="709" width="0.0805%" height="15" fill="rgb(237,100,13)" fg:x="1237" fg:w="1"/><text x="99.7673%" y="719.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="99.5977%" y="709" width="0.0805%" height="15" fill="rgb(213,55,26)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="719.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="99.5977%" y="693" width="0.0805%" height="15" fill="rgb(216,17,4)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.5977%" y="677" width="0.0805%" height="15" fill="rgb(220,153,47)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.5977%" y="661" width="0.0805%" height="15" fill="rgb(215,131,9)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.5977%" y="645" width="0.0805%" height="15" fill="rgb(233,46,42)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5977%" y="629" width="0.0805%" height="15" fill="rgb(226,86,7)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5977%" y="613" width="0.0805%" height="15" fill="rgb(239,226,21)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.5977%" y="597" width="0.0805%" height="15" fill="rgb(244,137,22)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5977%" y="581" width="0.0805%" height="15" fill="rgb(211,139,35)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5977%" y="565" width="0.0805%" height="15" fill="rgb(214,62,50)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5977%" y="549" width="0.0805%" height="15" fill="rgb(212,113,44)" fg:x="1238" fg:w="1"/><text x="99.8477%" y="559.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6782%" y="693" width="0.0805%" height="15" fill="rgb(226,150,43)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6782%" y="677" width="0.0805%" height="15" fill="rgb(250,71,37)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="687.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6782%" y="661" width="0.0805%" height="15" fill="rgb(219,76,19)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6782%" y="645" width="0.0805%" height="15" fill="rgb(250,39,11)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6782%" y="629" width="0.0805%" height="15" fill="rgb(230,64,31)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.6782%" y="613" width="0.0805%" height="15" fill="rgb(208,222,23)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6782%" y="597" width="0.0805%" height="15" fill="rgb(227,125,18)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6782%" y="581" width="0.0805%" height="15" fill="rgb(234,210,9)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6782%" y="565" width="0.0805%" height="15" fill="rgb(217,127,24)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6782%" y="549" width="0.0805%" height="15" fill="rgb(239,141,48)" fg:x="1239" fg:w="1"/><text x="99.9282%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (4 samples, 0.32%)</title><rect x="99.5173%" y="741" width="0.3218%" height="15" fill="rgb(227,109,8)" fg:x="1237" fg:w="4"/><text x="99.7673%" y="751.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.5977%" y="725" width="0.2414%" height="15" fill="rgb(235,184,23)" fg:x="1238" fg:w="3"/><text x="99.8477%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (2 samples, 0.16%)</title><rect x="99.6782%" y="709" width="0.1609%" height="15" fill="rgb(227,226,48)" fg:x="1239" fg:w="2"/><text x="99.9282%" y="719.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7586%" y="693" width="0.0805%" height="15" fill="rgb(206,150,11)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="703.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="677" width="0.0805%" height="15" fill="rgb(254,2,33)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7586%" y="661" width="0.0805%" height="15" fill="rgb(243,160,20)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="645" width="0.0805%" height="15" fill="rgb(218,208,30)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="655.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7586%" y="629" width="0.0805%" height="15" fill="rgb(224,120,49)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="613" width="0.0805%" height="15" fill="rgb(246,12,2)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="623.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7586%" y="597" width="0.0805%" height="15" fill="rgb(236,117,3)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7586%" y="581" width="0.0805%" height="15" fill="rgb(216,128,52)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="565" width="0.0805%" height="15" fill="rgb(246,145,19)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7586%" y="549" width="0.0805%" height="15" fill="rgb(222,11,46)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7586%" y="533" width="0.0805%" height="15" fill="rgb(245,82,36)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="517" width="0.0805%" height="15" fill="rgb(250,73,51)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7586%" y="501" width="0.0805%" height="15" fill="rgb(221,189,23)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7586%" y="485" width="0.0805%" height="15" fill="rgb(210,33,7)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7586%" y="469" width="0.0805%" height="15" fill="rgb(210,107,22)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7586%" y="453" width="0.0805%" height="15" fill="rgb(222,116,37)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7586%" y="437" width="0.0805%" height="15" fill="rgb(254,17,48)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7586%" y="421" width="0.0805%" height="15" fill="rgb(224,36,32)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.7586%" y="405" width="0.0805%" height="15" fill="rgb(232,90,46)" fg:x="1240" fg:w="1"/><text x="100.0086%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as core::str::traits::FromStr&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8391%" y="693" width="0.0805%" height="15" fill="rgb(241,66,40)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8391%" y="677" width="0.0805%" height="15" fill="rgb(249,184,29)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8391%" y="661" width="0.0805%" height="15" fill="rgb(231,181,1)" fg:x="1241" fg:w="1"/><text x="100.0891%" y="671.50"></text></g><g><title>all (1,243 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(224,94,2)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1119.50"></text></g><g><title>simple-484c7248 (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(229,170,15)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1103.50">simple-484c7248</text></g><g><title>_start (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(240,127,35)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1087.50">_start</text></g><g><title>__libc_start_main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(248,196,34)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1071.50">__libc_start_main</text></g><g><title>main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(236,137,7)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1055.50">main</text></g><g><title>std::rt::lang_start_internal (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(235,127,16)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,243 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(250,192,54)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,243 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(218,98,20)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,243 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(230,176,47)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,243 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(244,2,33)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,243 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(231,100,17)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,243 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(245,23,12)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,243 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(249,55,22)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,243 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(207,134,9)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="911.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,243 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(218,134,0)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="895.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,243 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(213,212,33)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,243 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(252,106,18)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="863.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,243 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(208,126,42)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="847.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,243 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(246,175,29)" fg:x="0" fg:w="1243"/><text x="0.2500%" y="831.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (351 samples, 28.24%)</title><rect x="71.7619%" y="805" width="28.2381%" height="15" fill="rgb(215,13,50)" fg:x="892" fg:w="351"/><text x="72.0119%" y="815.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as crite..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (351 samples, 28.24%)</title><rect x="71.7619%" y="789" width="28.2381%" height="15" fill="rgb(216,172,15)" fg:x="892" fg:w="351"/><text x="72.0119%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (351 samples, 28.24%)</title><rect x="71.7619%" y="773" width="28.2381%" height="15" fill="rgb(212,103,13)" fg:x="892" fg:w="351"/><text x="72.0119%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (263 samples, 21.16%)</title><rect x="78.8415%" y="757" width="21.1585%" height="15" fill="rgb(231,171,36)" fg:x="980" fg:w="263"/><text x="79.0915%" y="767.50">engine::session::Session::evaluat..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="99.8391%" y="741" width="0.1609%" height="15" fill="rgb(250,123,20)" fg:x="1241" fg:w="2"/><text x="100.0891%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.8391%" y="725" width="0.1609%" height="15" fill="rgb(212,53,50)" fg:x="1241" fg:w="2"/><text x="100.0891%" y="735.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.8391%" y="709" width="0.1609%" height="15" fill="rgb(243,54,12)" fg:x="1241" fg:w="2"/><text x="100.0891%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.9195%" y="693" width="0.0805%" height="15" fill="rgb(234,101,34)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="703.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.9195%" y="677" width="0.0805%" height="15" fill="rgb(254,67,22)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="687.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.9195%" y="661" width="0.0805%" height="15" fill="rgb(250,35,47)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9195%" y="645" width="0.0805%" height="15" fill="rgb(226,126,38)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9195%" y="629" width="0.0805%" height="15" fill="rgb(216,138,53)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9195%" y="613" width="0.0805%" height="15" fill="rgb(246,199,43)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9195%" y="597" width="0.0805%" height="15" fill="rgb(232,125,11)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.9195%" y="581" width="0.0805%" height="15" fill="rgb(218,219,45)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9195%" y="565" width="0.0805%" height="15" fill="rgb(216,102,54)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9195%" y="549" width="0.0805%" height="15" fill="rgb(250,228,7)" fg:x="1242" fg:w="1"/><text x="100.1695%" y="559.50"></text></g></svg></svg>