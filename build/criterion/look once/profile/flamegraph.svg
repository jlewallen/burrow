<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="1217"><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0822%" y="517" width="0.0822%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3322%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="0.0822%" y="501" width="0.0822%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3322%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0822%" y="485" width="0.0822%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3322%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0822%" y="469" width="0.0822%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3322%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0822%" y="453" width="0.0822%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3322%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0822%" y="437" width="0.0822%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3322%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0822%" y="421" width="0.0822%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.3322%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0822%" y="405" width="0.0822%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.3322%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="0.0822%" y="389" width="0.0822%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.3322%" y="399.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0822%" y="549" width="0.1643%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="2"/><text x="0.3322%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (2 samples, 0.16%)</title><rect x="0.0822%" y="533" width="0.1643%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="2"/><text x="0.3322%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.1643%" y="517" width="0.0822%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="1"/><text x="0.4143%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="0.2465%" y="469" width="0.0822%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.4965%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="0.2465%" y="453" width="0.0822%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.4965%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.2465%" y="437" width="0.0822%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.4965%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2465%" y="421" width="0.0822%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.4965%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="0.2465%" y="405" width="0.0822%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.4965%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2465%" y="389" width="0.0822%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.4965%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="0.2465%" y="373" width="0.0822%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="1"/><text x="0.4965%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="0.2465%" y="357" width="0.0822%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="1"/><text x="0.4965%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2465%" y="341" width="0.0822%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="1"/><text x="0.4965%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="0.2465%" y="517" width="0.1643%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="2"/><text x="0.4965%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="0.2465%" y="501" width="0.1643%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="2"/><text x="0.4965%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="0.2465%" y="485" width="0.1643%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="2"/><text x="0.4965%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="0.3287%" y="469" width="0.0822%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="1"/><text x="0.5787%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3287%" y="453" width="0.0822%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="1"/><text x="0.5787%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3287%" y="437" width="0.0822%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="1"/><text x="0.5787%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3287%" y="421" width="0.0822%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="1"/><text x="0.5787%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3287%" y="405" width="0.0822%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="1"/><text x="0.5787%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3287%" y="389" width="0.0822%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="1"/><text x="0.5787%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3287%" y="373" width="0.0822%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="1"/><text x="0.5787%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="0.3287%" y="357" width="0.0822%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="1"/><text x="0.5787%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="0.3287%" y="341" width="0.0822%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.5787%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="0.3287%" y="325" width="0.0822%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.5787%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="0.3287%" y="309" width="0.0822%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.5787%" y="319.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="0.4108%" y="517" width="0.0822%" height="15" fill="rgb(233,36,39)" fg:x="5" fg:w="1"/><text x="0.6608%" y="527.50"></text></g><g><title>anyhow::error::object_drop (1 samples, 0.08%)</title><rect x="0.4930%" y="485" width="0.0822%" height="15" fill="rgb(226,3,54)" fg:x="6" fg:w="1"/><text x="0.7430%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.4930%" y="469" width="0.0822%" height="15" fill="rgb(245,192,40)" fg:x="6" fg:w="1"/><text x="0.7430%" y="479.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="0.5752%" y="469" width="0.0822%" height="15" fill="rgb(238,167,29)" fg:x="7" fg:w="1"/><text x="0.8252%" y="479.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="0.5752%" y="453" width="0.0822%" height="15" fill="rgb(232,182,51)" fg:x="7" fg:w="1"/><text x="0.8252%" y="463.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.74%)</title><rect x="0.2465%" y="549" width="0.7395%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="9"/><text x="0.4965%" y="559.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.74%)</title><rect x="0.2465%" y="533" width="0.7395%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="9"/><text x="0.4965%" y="543.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.49%)</title><rect x="0.4930%" y="517" width="0.4930%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="6"/><text x="0.7430%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="0.4930%" y="501" width="0.4930%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="6"/><text x="0.7430%" y="511.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.41%)</title><rect x="0.5752%" y="485" width="0.4108%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="5"/><text x="0.8252%" y="495.50"></text></g><g><title>dlopen (4 samples, 0.33%)</title><rect x="0.6574%" y="469" width="0.3287%" height="15" fill="rgb(206,96,30)" fg:x="8" fg:w="4"/><text x="0.9074%" y="479.50"></text></g><g><title>_dl_catch_error (4 samples, 0.33%)</title><rect x="0.6574%" y="453" width="0.3287%" height="15" fill="rgb(218,138,4)" fg:x="8" fg:w="4"/><text x="0.9074%" y="463.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="0.6574%" y="437" width="0.3287%" height="15" fill="rgb(250,191,14)" fg:x="8" fg:w="4"/><text x="0.9074%" y="447.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="0.6574%" y="421" width="0.3287%" height="15" fill="rgb(239,60,40)" fg:x="8" fg:w="4"/><text x="0.9074%" y="431.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="0.6574%" y="405" width="0.3287%" height="15" fill="rgb(206,27,48)" fg:x="8" fg:w="4"/><text x="0.9074%" y="415.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="0.9860%" y="533" width="0.0822%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="1.2360%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::surround::Surroundings&gt; (1 samples, 0.08%)</title><rect x="1.0682%" y="533" width="0.0822%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="1"/><text x="1.3182%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.0682%" y="517" width="0.0822%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="1"/><text x="1.3182%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::BuildSurroundings&gt; (1 samples, 0.08%)</title><rect x="1.1504%" y="533" width="0.0822%" height="15" fill="rgb(231,138,38)" fg:x="14" fg:w="1"/><text x="1.4004%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="1.1504%" y="517" width="0.0822%" height="15" fill="rgb(231,145,46)" fg:x="14" fg:w="1"/><text x="1.4004%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="1.1504%" y="501" width="0.0822%" height="15" fill="rgb(251,118,11)" fg:x="14" fg:w="1"/><text x="1.4004%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="1.2325%" y="501" width="0.0822%" height="15" fill="rgb(217,147,25)" fg:x="15" fg:w="1"/><text x="1.4825%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="1.2325%" y="485" width="0.0822%" height="15" fill="rgb(247,81,37)" fg:x="15" fg:w="1"/><text x="1.4825%" y="495.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="1.3147%" y="501" width="0.0822%" height="15" fill="rgb(209,12,38)" fg:x="16" fg:w="1"/><text x="1.5647%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="1.3147%" y="485" width="0.0822%" height="15" fill="rgb(227,1,9)" fg:x="16" fg:w="1"/><text x="1.5647%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="1.3147%" y="469" width="0.0822%" height="15" fill="rgb(248,47,43)" fg:x="16" fg:w="1"/><text x="1.5647%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.3147%" y="453" width="0.0822%" height="15" fill="rgb(221,10,30)" fg:x="16" fg:w="1"/><text x="1.5647%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.3147%" y="437" width="0.0822%" height="15" fill="rgb(210,229,1)" fg:x="16" fg:w="1"/><text x="1.5647%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.3147%" y="421" width="0.0822%" height="15" fill="rgb(222,148,37)" fg:x="16" fg:w="1"/><text x="1.5647%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.3969%" y="453" width="0.0822%" height="15" fill="rgb(234,67,33)" fg:x="17" fg:w="1"/><text x="1.6469%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="1.3969%" y="437" width="0.0822%" height="15" fill="rgb(247,98,35)" fg:x="17" fg:w="1"/><text x="1.6469%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.3969%" y="421" width="0.0822%" height="15" fill="rgb(247,138,52)" fg:x="17" fg:w="1"/><text x="1.6469%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.33%)</title><rect x="1.5612%" y="437" width="0.3287%" height="15" fill="rgb(213,79,30)" fg:x="19" fg:w="4"/><text x="1.8112%" y="447.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="1.6434%" y="421" width="0.2465%" height="15" fill="rgb(246,177,23)" fg:x="20" fg:w="3"/><text x="1.8934%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.7256%" y="405" width="0.1643%" height="15" fill="rgb(230,62,27)" fg:x="21" fg:w="2"/><text x="1.9756%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.8077%" y="389" width="0.0822%" height="15" fill="rgb(216,154,8)" fg:x="22" fg:w="1"/><text x="2.0577%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8899%" y="405" width="0.0822%" height="15" fill="rgb(244,35,45)" fg:x="23" fg:w="1"/><text x="2.1399%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="1.8899%" y="389" width="0.0822%" height="15" fill="rgb(251,115,12)" fg:x="23" fg:w="1"/><text x="2.1399%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="1.8899%" y="421" width="0.1643%" height="15" fill="rgb(240,54,50)" fg:x="23" fg:w="2"/><text x="2.1399%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="1.9721%" y="405" width="0.0822%" height="15" fill="rgb(233,84,52)" fg:x="24" fg:w="1"/><text x="2.2221%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.74%)</title><rect x="1.3969%" y="469" width="0.7395%" height="15" fill="rgb(207,117,47)" fg:x="17" fg:w="9"/><text x="1.6469%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.66%)</title><rect x="1.4790%" y="453" width="0.6574%" height="15" fill="rgb(249,43,39)" fg:x="18" fg:w="8"/><text x="1.7290%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="1.8899%" y="437" width="0.2465%" height="15" fill="rgb(209,38,44)" fg:x="23" fg:w="3"/><text x="2.1399%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.0542%" y="421" width="0.0822%" height="15" fill="rgb(236,212,23)" fg:x="25" fg:w="1"/><text x="2.3042%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.0542%" y="405" width="0.0822%" height="15" fill="rgb(242,79,21)" fg:x="25" fg:w="1"/><text x="2.3042%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0542%" y="389" width="0.0822%" height="15" fill="rgb(211,96,35)" fg:x="25" fg:w="1"/><text x="2.3042%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.0542%" y="373" width="0.0822%" height="15" fill="rgb(253,215,40)" fg:x="25" fg:w="1"/><text x="2.3042%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.1364%" y="469" width="0.0822%" height="15" fill="rgb(211,81,21)" fg:x="26" fg:w="1"/><text x="2.3864%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="2.1364%" y="453" width="0.0822%" height="15" fill="rgb(208,190,38)" fg:x="26" fg:w="1"/><text x="2.3864%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.1364%" y="437" width="0.0822%" height="15" fill="rgb(235,213,38)" fg:x="26" fg:w="1"/><text x="2.3864%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.1364%" y="421" width="0.0822%" height="15" fill="rgb(237,122,38)" fg:x="26" fg:w="1"/><text x="2.3864%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2186%" y="421" width="0.0822%" height="15" fill="rgb(244,218,35)" fg:x="27" fg:w="1"/><text x="2.4686%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3007%" y="421" width="0.0822%" height="15" fill="rgb(240,68,47)" fg:x="28" fg:w="1"/><text x="2.5507%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.3007%" y="405" width="0.0822%" height="15" fill="rgb(210,16,53)" fg:x="28" fg:w="1"/><text x="2.5507%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.3007%" y="389" width="0.0822%" height="15" fill="rgb(235,124,12)" fg:x="28" fg:w="1"/><text x="2.5507%" y="399.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="2.3829%" y="421" width="0.0822%" height="15" fill="rgb(224,169,11)" fg:x="29" fg:w="1"/><text x="2.6329%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.3829%" y="405" width="0.0822%" height="15" fill="rgb(250,166,2)" fg:x="29" fg:w="1"/><text x="2.6329%" y="415.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.31%)</title><rect x="1.2325%" y="533" width="1.3147%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="16"/><text x="1.4825%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (16 samples, 1.31%)</title><rect x="1.2325%" y="517" width="1.3147%" height="15" fill="rgb(230,116,27)" fg:x="15" fg:w="16"/><text x="1.4825%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.15%)</title><rect x="1.3969%" y="501" width="1.1504%" height="15" fill="rgb(228,99,48)" fg:x="17" fg:w="14"/><text x="1.6469%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (14 samples, 1.15%)</title><rect x="1.3969%" y="485" width="1.1504%" height="15" fill="rgb(253,11,6)" fg:x="17" fg:w="14"/><text x="1.6469%" y="495.50"></text></g><g><title>kernel::compare::any_entity_changes (4 samples, 0.33%)</title><rect x="2.2186%" y="469" width="0.3287%" height="15" fill="rgb(247,143,39)" fg:x="27" fg:w="4"/><text x="2.4686%" y="479.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (4 samples, 0.33%)</title><rect x="2.2186%" y="453" width="0.3287%" height="15" fill="rgb(236,97,10)" fg:x="27" fg:w="4"/><text x="2.4686%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="2.2186%" y="437" width="0.3287%" height="15" fill="rgb(233,208,19)" fg:x="27" fg:w="4"/><text x="2.4686%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.4651%" y="421" width="0.0822%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="1"/><text x="2.7151%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4651%" y="405" width="0.0822%" height="15" fill="rgb(220,129,5)" fg:x="30" fg:w="1"/><text x="2.7151%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="2.4651%" y="389" width="0.0822%" height="15" fill="rgb(242,17,10)" fg:x="30" fg:w="1"/><text x="2.7151%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.4651%" y="373" width="0.0822%" height="15" fill="rgb(242,107,0)" fg:x="30" fg:w="1"/><text x="2.7151%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="2.4651%" y="357" width="0.0822%" height="15" fill="rgb(251,28,31)" fg:x="30" fg:w="1"/><text x="2.7151%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="2.4651%" y="341" width="0.0822%" height="15" fill="rgb(233,223,10)" fg:x="30" fg:w="1"/><text x="2.7151%" y="351.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="2.5472%" y="501" width="0.0822%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="1"/><text x="2.7972%" y="511.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5472%" y="485" width="0.0822%" height="15" fill="rgb(232,23,21)" fg:x="31" fg:w="1"/><text x="2.7972%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5472%" y="469" width="0.0822%" height="15" fill="rgb(244,5,23)" fg:x="31" fg:w="1"/><text x="2.7972%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.5472%" y="453" width="0.0822%" height="15" fill="rgb(226,81,46)" fg:x="31" fg:w="1"/><text x="2.7972%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="2.5472%" y="437" width="0.0822%" height="15" fill="rgb(247,70,30)" fg:x="31" fg:w="1"/><text x="2.7972%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="2.5472%" y="421" width="0.0822%" height="15" fill="rgb(212,68,19)" fg:x="31" fg:w="1"/><text x="2.7972%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="2.5472%" y="405" width="0.0822%" height="15" fill="rgb(240,187,13)" fg:x="31" fg:w="1"/><text x="2.7972%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5472%" y="389" width="0.0822%" height="15" fill="rgb(223,113,26)" fg:x="31" fg:w="1"/><text x="2.7972%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.5472%" y="373" width="0.0822%" height="15" fill="rgb(206,192,2)" fg:x="31" fg:w="1"/><text x="2.7972%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.5472%" y="357" width="0.0822%" height="15" fill="rgb(241,108,4)" fg:x="31" fg:w="1"/><text x="2.7972%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.5472%" y="341" width="0.0822%" height="15" fill="rgb(247,173,49)" fg:x="31" fg:w="1"/><text x="2.7972%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.5472%" y="325" width="0.0822%" height="15" fill="rgb(224,114,35)" fg:x="31" fg:w="1"/><text x="2.7972%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.5472%" y="309" width="0.0822%" height="15" fill="rgb(245,159,27)" fg:x="31" fg:w="1"/><text x="2.7972%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.5472%" y="293" width="0.0822%" height="15" fill="rgb(245,172,44)" fg:x="31" fg:w="1"/><text x="2.7972%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.6294%" y="469" width="0.0822%" height="15" fill="rgb(236,23,11)" fg:x="32" fg:w="1"/><text x="2.8794%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="2.6294%" y="453" width="0.0822%" height="15" fill="rgb(205,117,38)" fg:x="32" fg:w="1"/><text x="2.8794%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.25%)</title><rect x="2.5472%" y="533" width="0.2465%" height="15" fill="rgb(237,72,25)" fg:x="31" fg:w="3"/><text x="2.7972%" y="543.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="2.5472%" y="517" width="0.2465%" height="15" fill="rgb(244,70,9)" fg:x="31" fg:w="3"/><text x="2.7972%" y="527.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="2.6294%" y="501" width="0.1643%" height="15" fill="rgb(217,125,39)" fg:x="32" fg:w="2"/><text x="2.8794%" y="511.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="2.6294%" y="485" width="0.1643%" height="15" fill="rgb(235,36,10)" fg:x="32" fg:w="2"/><text x="2.8794%" y="495.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="2.7116%" y="469" width="0.0822%" height="15" fill="rgb(251,123,47)" fg:x="33" fg:w="1"/><text x="2.9616%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.7116%" y="453" width="0.0822%" height="15" fill="rgb(221,13,13)" fg:x="33" fg:w="1"/><text x="2.9616%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="2.7116%" y="437" width="0.0822%" height="15" fill="rgb(238,131,9)" fg:x="33" fg:w="1"/><text x="2.9616%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="2.8759%" y="517" width="0.0822%" height="15" fill="rgb(211,50,8)" fg:x="35" fg:w="1"/><text x="3.1259%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.8759%" y="501" width="0.0822%" height="15" fill="rgb(245,182,24)" fg:x="35" fg:w="1"/><text x="3.1259%" y="511.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="2.8759%" y="485" width="0.0822%" height="15" fill="rgb(242,14,37)" fg:x="35" fg:w="1"/><text x="3.1259%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="2.9581%" y="469" width="0.0822%" height="15" fill="rgb(246,228,12)" fg:x="36" fg:w="1"/><text x="3.2081%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.9581%" y="453" width="0.0822%" height="15" fill="rgb(213,55,15)" fg:x="36" fg:w="1"/><text x="3.2081%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.9581%" y="437" width="0.0822%" height="15" fill="rgb(209,9,3)" fg:x="36" fg:w="1"/><text x="3.2081%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="3.0403%" y="421" width="0.1643%" height="15" fill="rgb(230,59,30)" fg:x="37" fg:w="2"/><text x="3.2903%" y="431.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="3.0403%" y="405" width="0.1643%" height="15" fill="rgb(209,121,21)" fg:x="37" fg:w="2"/><text x="3.2903%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.1224%" y="389" width="0.0822%" height="15" fill="rgb(220,109,13)" fg:x="38" fg:w="1"/><text x="3.3724%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="3.1224%" y="373" width="0.0822%" height="15" fill="rgb(232,18,1)" fg:x="38" fg:w="1"/><text x="3.3724%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="3.1224%" y="357" width="0.0822%" height="15" fill="rgb(215,41,42)" fg:x="38" fg:w="1"/><text x="3.3724%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.1224%" y="341" width="0.0822%" height="15" fill="rgb(224,123,36)" fg:x="38" fg:w="1"/><text x="3.3724%" y="351.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.1224%" y="325" width="0.0822%" height="15" fill="rgb(240,125,3)" fg:x="38" fg:w="1"/><text x="3.3724%" y="335.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.25%)</title><rect x="3.0403%" y="437" width="0.2465%" height="15" fill="rgb(205,98,50)" fg:x="37" fg:w="3"/><text x="3.2903%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.2046%" y="421" width="0.0822%" height="15" fill="rgb(205,185,37)" fg:x="39" fg:w="1"/><text x="3.4546%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.2046%" y="405" width="0.0822%" height="15" fill="rgb(238,207,15)" fg:x="39" fg:w="1"/><text x="3.4546%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="3.2868%" y="421" width="0.0822%" height="15" fill="rgb(213,199,42)" fg:x="40" fg:w="1"/><text x="3.5368%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.3689%" y="405" width="0.0822%" height="15" fill="rgb(235,201,11)" fg:x="41" fg:w="1"/><text x="3.6189%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="3.3689%" y="389" width="0.0822%" height="15" fill="rgb(207,46,11)" fg:x="41" fg:w="1"/><text x="3.6189%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.3689%" y="373" width="0.0822%" height="15" fill="rgb(241,35,35)" fg:x="41" fg:w="1"/><text x="3.6189%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.4511%" y="373" width="0.0822%" height="15" fill="rgb(243,32,47)" fg:x="42" fg:w="1"/><text x="3.7011%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4511%" y="405" width="0.1643%" height="15" fill="rgb(247,202,23)" fg:x="42" fg:w="2"/><text x="3.7011%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="3.4511%" y="389" width="0.1643%" height="15" fill="rgb(219,102,11)" fg:x="42" fg:w="2"/><text x="3.7011%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.5333%" y="373" width="0.0822%" height="15" fill="rgb(243,110,44)" fg:x="43" fg:w="1"/><text x="3.7833%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.66%)</title><rect x="3.0403%" y="453" width="0.6574%" height="15" fill="rgb(222,74,54)" fg:x="37" fg:w="8"/><text x="3.2903%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="3.2868%" y="437" width="0.4108%" height="15" fill="rgb(216,99,12)" fg:x="40" fg:w="5"/><text x="3.5368%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="3.3689%" y="421" width="0.3287%" height="15" fill="rgb(226,22,26)" fg:x="41" fg:w="4"/><text x="3.6189%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="3.6154%" y="405" width="0.0822%" height="15" fill="rgb(217,163,10)" fg:x="44" fg:w="1"/><text x="3.8654%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="3.6154%" y="389" width="0.0822%" height="15" fill="rgb(213,25,53)" fg:x="44" fg:w="1"/><text x="3.8654%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.6976%" y="421" width="0.0822%" height="15" fill="rgb(252,105,26)" fg:x="45" fg:w="1"/><text x="3.9476%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.6976%" y="453" width="0.1643%" height="15" fill="rgb(220,39,43)" fg:x="45" fg:w="2"/><text x="3.9476%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="3.6976%" y="437" width="0.1643%" height="15" fill="rgb(229,68,48)" fg:x="45" fg:w="2"/><text x="3.9476%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.7798%" y="421" width="0.0822%" height="15" fill="rgb(252,8,32)" fg:x="46" fg:w="1"/><text x="4.0298%" y="431.50"></text></g><g><title>kernel::compare::any_entity_changes (2 samples, 0.16%)</title><rect x="3.8620%" y="453" width="0.1643%" height="15" fill="rgb(223,20,43)" fg:x="47" fg:w="2"/><text x="4.1120%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="3.8620%" y="437" width="0.1643%" height="15" fill="rgb(229,81,49)" fg:x="47" fg:w="2"/><text x="4.1120%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.8620%" y="421" width="0.1643%" height="15" fill="rgb(236,28,36)" fg:x="47" fg:w="2"/><text x="4.1120%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="3.9441%" y="405" width="0.0822%" height="15" fill="rgb(249,185,26)" fg:x="48" fg:w="1"/><text x="4.1941%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9441%" y="389" width="0.0822%" height="15" fill="rgb(249,174,33)" fg:x="48" fg:w="1"/><text x="4.1941%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.9441%" y="373" width="0.0822%" height="15" fill="rgb(233,201,37)" fg:x="48" fg:w="1"/><text x="4.1941%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9441%" y="357" width="0.0822%" height="15" fill="rgb(221,78,26)" fg:x="48" fg:w="1"/><text x="4.1941%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.9441%" y="341" width="0.0822%" height="15" fill="rgb(250,127,30)" fg:x="48" fg:w="1"/><text x="4.1941%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.9441%" y="325" width="0.0822%" height="15" fill="rgb(230,49,44)" fg:x="48" fg:w="1"/><text x="4.1941%" y="335.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.15%)</title><rect x="2.9581%" y="517" width="1.1504%" height="15" fill="rgb(229,67,23)" fg:x="36" fg:w="14"/><text x="3.2081%" y="527.50"></text></g><g><title>engine::session::Session::save_entity_changes (14 samples, 1.15%)</title><rect x="2.9581%" y="501" width="1.1504%" height="15" fill="rgb(249,83,47)" fg:x="36" fg:w="14"/><text x="3.2081%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (14 samples, 1.15%)</title><rect x="2.9581%" y="485" width="1.1504%" height="15" fill="rgb(215,43,3)" fg:x="36" fg:w="14"/><text x="3.2081%" y="495.50"></text></g><g><title>engine::session::Session::check_for_changes (13 samples, 1.07%)</title><rect x="3.0403%" y="469" width="1.0682%" height="15" fill="rgb(238,154,13)" fg:x="37" fg:w="13"/><text x="3.2903%" y="479.50"></text></g><g><title>kernel::model::Entity::set_gid (1 samples, 0.08%)</title><rect x="4.0263%" y="453" width="0.0822%" height="15" fill="rgb(219,56,2)" fg:x="49" fg:w="1"/><text x="4.2763%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0263%" y="437" width="0.0822%" height="15" fill="rgb(233,0,4)" fg:x="49" fg:w="1"/><text x="4.2763%" y="447.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.1085%" y="485" width="0.0822%" height="15" fill="rgb(235,30,7)" fg:x="50" fg:w="1"/><text x="4.3585%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="4.1085%" y="469" width="0.0822%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="1"/><text x="4.3585%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1085%" y="453" width="0.0822%" height="15" fill="rgb(211,146,34)" fg:x="50" fg:w="1"/><text x="4.3585%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.1085%" y="437" width="0.0822%" height="15" fill="rgb(228,22,38)" fg:x="50" fg:w="1"/><text x="4.3585%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.1085%" y="421" width="0.0822%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="1"/><text x="4.3585%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1085%" y="405" width="0.0822%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="1"/><text x="4.3585%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.1085%" y="501" width="0.1643%" height="15" fill="rgb(215,215,53)" fg:x="50" fg:w="2"/><text x="4.3585%" y="511.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="4.1906%" y="485" width="0.0822%" height="15" fill="rgb(223,4,10)" fg:x="51" fg:w="1"/><text x="4.4406%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1906%" y="469" width="0.0822%" height="15" fill="rgb(234,103,6)" fg:x="51" fg:w="1"/><text x="4.4406%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.1906%" y="453" width="0.0822%" height="15" fill="rgb(227,97,0)" fg:x="51" fg:w="1"/><text x="4.4406%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.1906%" y="437" width="0.0822%" height="15" fill="rgb(234,150,53)" fg:x="51" fg:w="1"/><text x="4.4406%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.1906%" y="421" width="0.0822%" height="15" fill="rgb(228,201,54)" fg:x="51" fg:w="1"/><text x="4.4406%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.1906%" y="405" width="0.0822%" height="15" fill="rgb(222,22,37)" fg:x="51" fg:w="1"/><text x="4.4406%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1906%" y="389" width="0.0822%" height="15" fill="rgb(237,53,32)" fg:x="51" fg:w="1"/><text x="4.4406%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.1906%" y="373" width="0.0822%" height="15" fill="rgb(233,25,53)" fg:x="51" fg:w="1"/><text x="4.4406%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.1906%" y="357" width="0.0822%" height="15" fill="rgb(210,40,34)" fg:x="51" fg:w="1"/><text x="4.4406%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.1906%" y="341" width="0.0822%" height="15" fill="rgb(241,220,44)" fg:x="51" fg:w="1"/><text x="4.4406%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.1906%" y="325" width="0.0822%" height="15" fill="rgb(235,28,35)" fg:x="51" fg:w="1"/><text x="4.4406%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.1906%" y="309" width="0.0822%" height="15" fill="rgb(210,56,17)" fg:x="51" fg:w="1"/><text x="4.4406%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.1906%" y="293" width="0.0822%" height="15" fill="rgb(224,130,29)" fg:x="51" fg:w="1"/><text x="4.4406%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2728%" y="453" width="0.0822%" height="15" fill="rgb(235,212,8)" fg:x="52" fg:w="1"/><text x="4.5228%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.2728%" y="437" width="0.0822%" height="15" fill="rgb(223,33,50)" fg:x="52" fg:w="1"/><text x="4.5228%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="4.2728%" y="421" width="0.0822%" height="15" fill="rgb(219,149,13)" fg:x="52" fg:w="1"/><text x="4.5228%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2728%" y="405" width="0.0822%" height="15" fill="rgb(250,156,29)" fg:x="52" fg:w="1"/><text x="4.5228%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (20 samples, 1.64%)</title><rect x="2.7938%" y="533" width="1.6434%" height="15" fill="rgb(216,193,19)" fg:x="34" fg:w="20"/><text x="3.0438%" y="543.50"></text></g><g><title>plugins_core::build::Build::holding (4 samples, 0.33%)</title><rect x="4.1085%" y="517" width="0.3287%" height="15" fill="rgb(216,135,14)" fg:x="50" fg:w="4"/><text x="4.3585%" y="527.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="4.2728%" y="501" width="0.1643%" height="15" fill="rgb(241,47,5)" fg:x="52" fg:w="2"/><text x="4.5228%" y="511.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (2 samples, 0.16%)</title><rect x="4.2728%" y="485" width="0.1643%" height="15" fill="rgb(233,42,35)" fg:x="52" fg:w="2"/><text x="4.5228%" y="495.50"></text></g><g><title>kernel::model::Entity::replace_scope (2 samples, 0.16%)</title><rect x="4.2728%" y="469" width="0.1643%" height="15" fill="rgb(231,13,6)" fg:x="52" fg:w="2"/><text x="4.5228%" y="479.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="4.3550%" y="453" width="0.0822%" height="15" fill="rgb(207,181,40)" fg:x="53" fg:w="1"/><text x="4.6050%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.3550%" y="437" width="0.0822%" height="15" fill="rgb(254,173,49)" fg:x="53" fg:w="1"/><text x="4.6050%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3550%" y="421" width="0.0822%" height="15" fill="rgb(221,1,38)" fg:x="53" fg:w="1"/><text x="4.6050%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.3550%" y="405" width="0.0822%" height="15" fill="rgb(206,124,46)" fg:x="53" fg:w="1"/><text x="4.6050%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.3550%" y="389" width="0.0822%" height="15" fill="rgb(249,21,11)" fg:x="53" fg:w="1"/><text x="4.6050%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="4.4371%" y="533" width="0.0822%" height="15" fill="rgb(222,201,40)" fg:x="54" fg:w="1"/><text x="4.6871%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.4371%" y="517" width="0.0822%" height="15" fill="rgb(235,61,29)" fg:x="54" fg:w="1"/><text x="4.6871%" y="527.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (44 samples, 3.62%)</title><rect x="0.9860%" y="549" width="3.6154%" height="15" fill="rgb(219,207,3)" fg:x="12" fg:w="44"/><text x="1.2360%" y="559.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="4.5193%" y="533" width="0.0822%" height="15" fill="rgb(222,56,46)" fg:x="55" fg:w="1"/><text x="4.7693%" y="543.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="4.5193%" y="517" width="0.0822%" height="15" fill="rgb(239,76,54)" fg:x="55" fg:w="1"/><text x="4.7693%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="4.5193%" y="501" width="0.0822%" height="15" fill="rgb(231,124,27)" fg:x="55" fg:w="1"/><text x="4.7693%" y="511.50"></text></g><g><title>kernel::model::Entity::new_blank (1 samples, 0.08%)</title><rect x="4.5193%" y="485" width="0.0822%" height="15" fill="rgb(249,195,6)" fg:x="55" fg:w="1"/><text x="4.7693%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="4.5193%" y="469" width="0.0822%" height="15" fill="rgb(237,174,47)" fg:x="55" fg:w="1"/><text x="4.7693%" y="479.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="4.5193%" y="453" width="0.0822%" height="15" fill="rgb(206,201,31)" fg:x="55" fg:w="1"/><text x="4.7693%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.5193%" y="437" width="0.0822%" height="15" fill="rgb(231,57,52)" fg:x="55" fg:w="1"/><text x="4.7693%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.5193%" y="421" width="0.0822%" height="15" fill="rgb(248,177,22)" fg:x="55" fg:w="1"/><text x="4.7693%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.5193%" y="405" width="0.0822%" height="15" fill="rgb(215,211,37)" fg:x="55" fg:w="1"/><text x="4.7693%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.5193%" y="389" width="0.0822%" height="15" fill="rgb(241,128,51)" fg:x="55" fg:w="1"/><text x="4.7693%" y="399.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="4.5193%" y="373" width="0.0822%" height="15" fill="rgb(227,165,31)" fg:x="55" fg:w="1"/><text x="4.7693%" y="383.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="4.5193%" y="357" width="0.0822%" height="15" fill="rgb(228,167,24)" fg:x="55" fg:w="1"/><text x="4.7693%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5193%" y="341" width="0.0822%" height="15" fill="rgb(228,143,12)" fg:x="55" fg:w="1"/><text x="4.7693%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.5193%" y="325" width="0.0822%" height="15" fill="rgb(249,149,8)" fg:x="55" fg:w="1"/><text x="4.7693%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="4.5193%" y="309" width="0.0822%" height="15" fill="rgb(243,35,44)" fg:x="55" fg:w="1"/><text x="4.7693%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="4.5193%" y="293" width="0.0822%" height="15" fill="rgb(246,89,9)" fg:x="55" fg:w="1"/><text x="4.7693%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="4.5193%" y="277" width="0.0822%" height="15" fill="rgb(233,213,13)" fg:x="55" fg:w="1"/><text x="4.7693%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="4.5193%" y="261" width="0.0822%" height="15" fill="rgb(233,141,41)" fg:x="55" fg:w="1"/><text x="4.7693%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="4.5193%" y="245" width="0.0822%" height="15" fill="rgb(239,167,4)" fg:x="55" fg:w="1"/><text x="4.7693%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="4.6015%" y="549" width="0.0822%" height="15" fill="rgb(209,217,16)" fg:x="56" fg:w="1"/><text x="4.8515%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="4.6015%" y="533" width="0.0822%" height="15" fill="rgb(219,88,35)" fg:x="56" fg:w="1"/><text x="4.8515%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="4.6015%" y="517" width="0.0822%" height="15" fill="rgb(220,193,23)" fg:x="56" fg:w="1"/><text x="4.8515%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="4.6015%" y="501" width="0.0822%" height="15" fill="rgb(230,90,52)" fg:x="56" fg:w="1"/><text x="4.8515%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.6015%" y="485" width="0.0822%" height="15" fill="rgb(252,106,19)" fg:x="56" fg:w="1"/><text x="4.8515%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="4.6836%" y="533" width="0.0822%" height="15" fill="rgb(206,74,20)" fg:x="57" fg:w="1"/><text x="4.9336%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="4.6836%" y="517" width="0.0822%" height="15" fill="rgb(230,138,44)" fg:x="57" fg:w="1"/><text x="4.9336%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.6836%" y="501" width="0.0822%" height="15" fill="rgb(235,182,43)" fg:x="57" fg:w="1"/><text x="4.9336%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.6836%" y="485" width="0.0822%" height="15" fill="rgb(242,16,51)" fg:x="57" fg:w="1"/><text x="4.9336%" y="495.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="4.6836%" y="469" width="0.0822%" height="15" fill="rgb(248,9,4)" fg:x="57" fg:w="1"/><text x="4.9336%" y="479.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="4.6836%" y="453" width="0.0822%" height="15" fill="rgb(210,31,22)" fg:x="57" fg:w="1"/><text x="4.9336%" y="463.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="4.6836%" y="437" width="0.0822%" height="15" fill="rgb(239,54,39)" fg:x="57" fg:w="1"/><text x="4.9336%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.6836%" y="421" width="0.0822%" height="15" fill="rgb(230,99,41)" fg:x="57" fg:w="1"/><text x="4.9336%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.6836%" y="405" width="0.0822%" height="15" fill="rgb(253,106,12)" fg:x="57" fg:w="1"/><text x="4.9336%" y="415.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.6836%" y="389" width="0.0822%" height="15" fill="rgb(213,46,41)" fg:x="57" fg:w="1"/><text x="4.9336%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.7658%" y="437" width="0.0822%" height="15" fill="rgb(215,133,35)" fg:x="58" fg:w="1"/><text x="5.0158%" y="447.50"></text></g><g><title>engine::identifiers::model::get_gid (2 samples, 0.16%)</title><rect x="4.7658%" y="517" width="0.1643%" height="15" fill="rgb(213,28,5)" fg:x="58" fg:w="2"/><text x="5.0158%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="4.7658%" y="501" width="0.1643%" height="15" fill="rgb(215,77,49)" fg:x="58" fg:w="2"/><text x="5.0158%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="4.7658%" y="485" width="0.1643%" height="15" fill="rgb(248,100,22)" fg:x="58" fg:w="2"/><text x="5.0158%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="4.7658%" y="469" width="0.1643%" height="15" fill="rgb(208,67,9)" fg:x="58" fg:w="2"/><text x="5.0158%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="4.7658%" y="453" width="0.1643%" height="15" fill="rgb(219,133,21)" fg:x="58" fg:w="2"/><text x="5.0158%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8480%" y="437" width="0.0822%" height="15" fill="rgb(246,46,29)" fg:x="59" fg:w="1"/><text x="5.0980%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8480%" y="421" width="0.0822%" height="15" fill="rgb(246,185,52)" fg:x="59" fg:w="1"/><text x="5.0980%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="4.8480%" y="405" width="0.0822%" height="15" fill="rgb(252,136,11)" fg:x="59" fg:w="1"/><text x="5.0980%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="4.8480%" y="389" width="0.0822%" height="15" fill="rgb(219,138,53)" fg:x="59" fg:w="1"/><text x="5.0980%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.9302%" y="485" width="0.0822%" height="15" fill="rgb(211,51,23)" fg:x="60" fg:w="1"/><text x="5.1802%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="4.9302%" y="469" width="0.0822%" height="15" fill="rgb(247,221,28)" fg:x="60" fg:w="1"/><text x="5.1802%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.9302%" y="453" width="0.0822%" height="15" fill="rgb(251,222,45)" fg:x="60" fg:w="1"/><text x="5.1802%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9302%" y="437" width="0.0822%" height="15" fill="rgb(217,162,53)" fg:x="60" fg:w="1"/><text x="5.1802%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.0123%" y="469" width="0.0822%" height="15" fill="rgb(229,93,14)" fg:x="61" fg:w="1"/><text x="5.2623%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1767%" y="437" width="0.0822%" height="15" fill="rgb(209,67,49)" fg:x="63" fg:w="1"/><text x="5.4267%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2588%" y="421" width="0.0822%" height="15" fill="rgb(213,87,29)" fg:x="64" fg:w="1"/><text x="5.5088%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="5.3410%" y="389" width="0.1643%" height="15" fill="rgb(205,151,52)" fg:x="65" fg:w="2"/><text x="5.5910%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="5.0945%" y="469" width="0.4930%" height="15" fill="rgb(253,215,39)" fg:x="62" fg:w="6"/><text x="5.3445%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="5.0945%" y="453" width="0.4930%" height="15" fill="rgb(221,220,41)" fg:x="62" fg:w="6"/><text x="5.3445%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="5.2588%" y="437" width="0.3287%" height="15" fill="rgb(218,133,21)" fg:x="64" fg:w="4"/><text x="5.5088%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="5.3410%" y="421" width="0.2465%" height="15" fill="rgb(221,193,43)" fg:x="65" fg:w="3"/><text x="5.5910%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="5.3410%" y="405" width="0.2465%" height="15" fill="rgb(240,128,52)" fg:x="65" fg:w="3"/><text x="5.5910%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.5053%" y="389" width="0.0822%" height="15" fill="rgb(253,114,12)" fg:x="67" fg:w="1"/><text x="5.7553%" y="399.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="5.6697%" y="437" width="0.0822%" height="15" fill="rgb(215,223,47)" fg:x="69" fg:w="1"/><text x="5.9197%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (3 samples, 0.25%)</title><rect x="5.7518%" y="437" width="0.2465%" height="15" fill="rgb(248,225,23)" fg:x="70" fg:w="3"/><text x="6.0018%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="5.7518%" y="421" width="0.2465%" height="15" fill="rgb(250,108,0)" fg:x="70" fg:w="3"/><text x="6.0018%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="5.8340%" y="405" width="0.1643%" height="15" fill="rgb(228,208,7)" fg:x="71" fg:w="2"/><text x="6.0840%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.0805%" y="357" width="0.0822%" height="15" fill="rgb(244,45,10)" fg:x="74" fg:w="1"/><text x="6.3305%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.33%)</title><rect x="5.9984%" y="437" width="0.3287%" height="15" fill="rgb(207,125,25)" fg:x="73" fg:w="4"/><text x="6.2484%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="5.9984%" y="421" width="0.3287%" height="15" fill="rgb(210,195,18)" fg:x="73" fg:w="4"/><text x="6.2484%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="5.9984%" y="405" width="0.3287%" height="15" fill="rgb(249,80,12)" fg:x="73" fg:w="4"/><text x="6.2484%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (3 samples, 0.25%)</title><rect x="6.0805%" y="389" width="0.2465%" height="15" fill="rgb(221,65,9)" fg:x="74" fg:w="3"/><text x="6.3305%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="6.0805%" y="373" width="0.2465%" height="15" fill="rgb(235,49,36)" fg:x="74" fg:w="3"/><text x="6.3305%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.1627%" y="357" width="0.1643%" height="15" fill="rgb(225,32,20)" fg:x="75" fg:w="2"/><text x="6.4127%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3270%" y="389" width="0.0822%" height="15" fill="rgb(215,141,46)" fg:x="77" fg:w="1"/><text x="6.5770%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.4092%" y="357" width="0.0822%" height="15" fill="rgb(250,160,47)" fg:x="78" fg:w="1"/><text x="6.6592%" y="367.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="6.4092%" y="341" width="0.0822%" height="15" fill="rgb(216,222,40)" fg:x="78" fg:w="1"/><text x="6.6592%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="6.4092%" y="389" width="0.1643%" height="15" fill="rgb(234,217,39)" fg:x="78" fg:w="2"/><text x="6.6592%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.4092%" y="373" width="0.1643%" height="15" fill="rgb(207,178,40)" fg:x="78" fg:w="2"/><text x="6.6592%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.4914%" y="357" width="0.0822%" height="15" fill="rgb(221,136,13)" fg:x="79" fg:w="1"/><text x="6.7414%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.41%)</title><rect x="6.3270%" y="405" width="0.4108%" height="15" fill="rgb(249,199,10)" fg:x="77" fg:w="5"/><text x="6.5770%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.5735%" y="389" width="0.1643%" height="15" fill="rgb(249,222,13)" fg:x="80" fg:w="2"/><text x="6.8235%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.6557%" y="373" width="0.0822%" height="15" fill="rgb(244,185,38)" fg:x="81" fg:w="1"/><text x="6.9057%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (16 samples, 1.31%)</title><rect x="5.5875%" y="469" width="1.3147%" height="15" fill="rgb(236,202,9)" fg:x="68" fg:w="16"/><text x="5.8375%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.31%)</title><rect x="5.5875%" y="453" width="1.3147%" height="15" fill="rgb(250,229,37)" fg:x="68" fg:w="16"/><text x="5.8375%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.58%)</title><rect x="6.3270%" y="437" width="0.5752%" height="15" fill="rgb(206,174,23)" fg:x="77" fg:w="7"/><text x="6.5770%" y="447.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (7 samples, 0.58%)</title><rect x="6.3270%" y="421" width="0.5752%" height="15" fill="rgb(211,33,43)" fg:x="77" fg:w="7"/><text x="6.5770%" y="431.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="6.7379%" y="405" width="0.1643%" height="15" fill="rgb(245,58,50)" fg:x="82" fg:w="2"/><text x="6.9879%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8200%" y="389" width="0.0822%" height="15" fill="rgb(244,68,36)" fg:x="83" fg:w="1"/><text x="7.0700%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="6.9844%" y="325" width="0.0822%" height="15" fill="rgb(232,229,15)" fg:x="85" fg:w="1"/><text x="7.2344%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="6.9844%" y="309" width="0.0822%" height="15" fill="rgb(254,30,23)" fg:x="85" fg:w="1"/><text x="7.2344%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="6.9844%" y="293" width="0.0822%" height="15" fill="rgb(235,160,14)" fg:x="85" fg:w="1"/><text x="7.2344%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9844%" y="277" width="0.0822%" height="15" fill="rgb(212,155,44)" fg:x="85" fg:w="1"/><text x="7.2344%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="6.9022%" y="373" width="0.3287%" height="15" fill="rgb(226,2,50)" fg:x="84" fg:w="4"/><text x="7.1522%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="6.9844%" y="357" width="0.2465%" height="15" fill="rgb(234,177,6)" fg:x="85" fg:w="3"/><text x="7.2344%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="6.9844%" y="341" width="0.2465%" height="15" fill="rgb(217,24,9)" fg:x="85" fg:w="3"/><text x="7.2344%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="7.0666%" y="325" width="0.1643%" height="15" fill="rgb(220,13,46)" fg:x="86" fg:w="2"/><text x="7.3166%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="7.0666%" y="309" width="0.1643%" height="15" fill="rgb(239,221,27)" fg:x="86" fg:w="2"/><text x="7.3166%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="7.0666%" y="293" width="0.1643%" height="15" fill="rgb(222,198,25)" fg:x="86" fg:w="2"/><text x="7.3166%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.1487%" y="277" width="0.0822%" height="15" fill="rgb(211,99,13)" fg:x="87" fg:w="1"/><text x="7.3987%" y="287.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="7.1487%" y="261" width="0.0822%" height="15" fill="rgb(232,111,31)" fg:x="87" fg:w="1"/><text x="7.3987%" y="271.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="7.3131%" y="357" width="0.0822%" height="15" fill="rgb(245,82,37)" fg:x="89" fg:w="1"/><text x="7.5631%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.25%)</title><rect x="7.2309%" y="373" width="0.2465%" height="15" fill="rgb(227,149,46)" fg:x="88" fg:w="3"/><text x="7.4809%" y="383.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.3952%" y="357" width="0.0822%" height="15" fill="rgb(218,36,50)" fg:x="90" fg:w="1"/><text x="7.6452%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="7.3952%" y="341" width="0.0822%" height="15" fill="rgb(226,80,48)" fg:x="90" fg:w="1"/><text x="7.6452%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.66%)</title><rect x="6.9022%" y="469" width="0.6574%" height="15" fill="rgb(238,224,15)" fg:x="84" fg:w="8"/><text x="7.1522%" y="479.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.66%)</title><rect x="6.9022%" y="453" width="0.6574%" height="15" fill="rgb(241,136,10)" fg:x="84" fg:w="8"/><text x="7.1522%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="6.9022%" y="437" width="0.6574%" height="15" fill="rgb(208,32,45)" fg:x="84" fg:w="8"/><text x="7.1522%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.66%)</title><rect x="6.9022%" y="421" width="0.6574%" height="15" fill="rgb(207,135,9)" fg:x="84" fg:w="8"/><text x="7.1522%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.66%)</title><rect x="6.9022%" y="405" width="0.6574%" height="15" fill="rgb(206,86,44)" fg:x="84" fg:w="8"/><text x="7.1522%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.66%)</title><rect x="6.9022%" y="389" width="0.6574%" height="15" fill="rgb(245,177,15)" fg:x="84" fg:w="8"/><text x="7.1522%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4774%" y="373" width="0.0822%" height="15" fill="rgb(206,64,50)" fg:x="91" fg:w="1"/><text x="7.7274%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.4774%" y="357" width="0.0822%" height="15" fill="rgb(234,36,40)" fg:x="91" fg:w="1"/><text x="7.7274%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.4774%" y="341" width="0.0822%" height="15" fill="rgb(213,64,8)" fg:x="91" fg:w="1"/><text x="7.7274%" y="351.50"></text></g><g><title>engine::session::Session::close (36 samples, 2.96%)</title><rect x="4.6836%" y="549" width="2.9581%" height="15" fill="rgb(210,75,36)" fg:x="57" fg:w="36"/><text x="4.9336%" y="559.50">eng..</text></g><g><title>engine::session::Session::save_entity_changes (35 samples, 2.88%)</title><rect x="4.7658%" y="533" width="2.8759%" height="15" fill="rgb(229,88,21)" fg:x="58" fg:w="35"/><text x="5.0158%" y="543.50">en..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (33 samples, 2.71%)</title><rect x="4.9302%" y="517" width="2.7116%" height="15" fill="rgb(252,204,47)" fg:x="60" fg:w="33"/><text x="5.1802%" y="527.50">en..</text></g><g><title>engine::session::Session::check_for_changes (33 samples, 2.71%)</title><rect x="4.9302%" y="501" width="2.7116%" height="15" fill="rgb(208,77,27)" fg:x="60" fg:w="33"/><text x="5.1802%" y="511.50">en..</text></g><g><title>kernel::compare::any_entity_changes (32 samples, 2.63%)</title><rect x="5.0123%" y="485" width="2.6294%" height="15" fill="rgb(221,76,26)" fg:x="61" fg:w="32"/><text x="5.2623%" y="495.50">ke..</text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="7.5596%" y="469" width="0.0822%" height="15" fill="rgb(225,139,18)" fg:x="92" fg:w="1"/><text x="7.8096%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="7.5596%" y="453" width="0.0822%" height="15" fill="rgb(230,137,11)" fg:x="92" fg:w="1"/><text x="7.8096%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="7.5596%" y="437" width="0.0822%" height="15" fill="rgb(212,28,1)" fg:x="92" fg:w="1"/><text x="7.8096%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="7.5596%" y="421" width="0.0822%" height="15" fill="rgb(248,164,17)" fg:x="92" fg:w="1"/><text x="7.8096%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="7.5596%" y="405" width="0.0822%" height="15" fill="rgb(222,171,42)" fg:x="92" fg:w="1"/><text x="7.8096%" y="415.50"></text></g><g><title>kernel::surround::Surroundings::unpack (3 samples, 0.25%)</title><rect x="7.7239%" y="501" width="0.2465%" height="15" fill="rgb(243,84,45)" fg:x="94" fg:w="3"/><text x="7.9739%" y="511.50"></text></g><g><title>&lt;kernel::model::entry::Entry as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="7.7239%" y="485" width="0.2465%" height="15" fill="rgb(252,49,23)" fg:x="94" fg:w="3"/><text x="7.9739%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="7.7239%" y="469" width="0.2465%" height="15" fill="rgb(215,19,7)" fg:x="94" fg:w="3"/><text x="7.9739%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="7.7239%" y="453" width="0.2465%" height="15" fill="rgb(238,81,41)" fg:x="94" fg:w="3"/><text x="7.9739%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.25%)</title><rect x="7.7239%" y="437" width="0.2465%" height="15" fill="rgb(210,199,37)" fg:x="94" fg:w="3"/><text x="7.9739%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.25%)</title><rect x="7.7239%" y="421" width="0.2465%" height="15" fill="rgb(244,192,49)" fg:x="94" fg:w="3"/><text x="7.9739%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="7.7239%" y="405" width="0.2465%" height="15" fill="rgb(226,211,11)" fg:x="94" fg:w="3"/><text x="7.9739%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.25%)</title><rect x="7.7239%" y="389" width="0.2465%" height="15" fill="rgb(236,162,54)" fg:x="94" fg:w="3"/><text x="7.9739%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.25%)</title><rect x="7.7239%" y="373" width="0.2465%" height="15" fill="rgb(220,229,9)" fg:x="94" fg:w="3"/><text x="7.9739%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.25%)</title><rect x="7.7239%" y="357" width="0.2465%" height="15" fill="rgb(250,87,22)" fg:x="94" fg:w="3"/><text x="7.9739%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.25%)</title><rect x="7.7239%" y="341" width="0.2465%" height="15" fill="rgb(239,43,17)" fg:x="94" fg:w="3"/><text x="7.9739%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.25%)</title><rect x="7.7239%" y="325" width="0.2465%" height="15" fill="rgb(231,177,25)" fg:x="94" fg:w="3"/><text x="7.9739%" y="335.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.25%)</title><rect x="7.7239%" y="309" width="0.2465%" height="15" fill="rgb(219,179,1)" fg:x="94" fg:w="3"/><text x="7.9739%" y="319.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="7.8061%" y="293" width="0.1643%" height="15" fill="rgb(238,219,53)" fg:x="95" fg:w="2"/><text x="8.0561%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="7.9704%" y="469" width="0.0822%" height="15" fill="rgb(232,167,36)" fg:x="97" fg:w="1"/><text x="8.2204%" y="479.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="7.9704%" y="453" width="0.0822%" height="15" fill="rgb(244,19,51)" fg:x="97" fg:w="1"/><text x="8.2204%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="7.9704%" y="437" width="0.0822%" height="15" fill="rgb(224,6,22)" fg:x="97" fg:w="1"/><text x="8.2204%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="7.9704%" y="421" width="0.0822%" height="15" fill="rgb(224,145,5)" fg:x="97" fg:w="1"/><text x="8.2204%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.0526%" y="469" width="0.0822%" height="15" fill="rgb(234,130,49)" fg:x="98" fg:w="1"/><text x="8.3026%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::desc (1 samples, 0.08%)</title><rect x="8.1348%" y="469" width="0.0822%" height="15" fill="rgb(254,6,2)" fg:x="99" fg:w="1"/><text x="8.3848%" y="479.50"></text></g><g><title>kernel::model::Props::property_named (1 samples, 0.08%)</title><rect x="8.1348%" y="453" width="0.0822%" height="15" fill="rgb(208,96,46)" fg:x="99" fg:w="1"/><text x="8.3848%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.1348%" y="437" width="0.0822%" height="15" fill="rgb(239,3,39)" fg:x="99" fg:w="1"/><text x="8.3848%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.1348%" y="421" width="0.0822%" height="15" fill="rgb(233,210,1)" fg:x="99" fg:w="1"/><text x="8.3848%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="8.5456%" y="293" width="0.0822%" height="15" fill="rgb(244,137,37)" fg:x="104" fg:w="1"/><text x="8.7956%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="8.4634%" y="325" width="0.2465%" height="15" fill="rgb(240,136,2)" fg:x="103" fg:w="3"/><text x="8.7134%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="8.5456%" y="309" width="0.1643%" height="15" fill="rgb(239,18,37)" fg:x="104" fg:w="2"/><text x="8.7956%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="8.6278%" y="293" width="0.0822%" height="15" fill="rgb(218,185,22)" fg:x="105" fg:w="1"/><text x="8.8778%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="8.6278%" y="277" width="0.0822%" height="15" fill="rgb(225,218,4)" fg:x="105" fg:w="1"/><text x="8.8778%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.6278%" y="261" width="0.0822%" height="15" fill="rgb(230,182,32)" fg:x="105" fg:w="1"/><text x="8.8778%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6278%" y="245" width="0.0822%" height="15" fill="rgb(242,56,43)" fg:x="105" fg:w="1"/><text x="8.8778%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="8.7099%" y="309" width="0.0822%" height="15" fill="rgb(233,99,24)" fg:x="106" fg:w="1"/><text x="8.9599%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7099%" y="293" width="0.0822%" height="15" fill="rgb(234,209,42)" fg:x="106" fg:w="1"/><text x="8.9599%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7099%" y="277" width="0.0822%" height="15" fill="rgb(227,7,12)" fg:x="106" fg:w="1"/><text x="8.9599%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="8.7099%" y="261" width="0.0822%" height="15" fill="rgb(245,203,43)" fg:x="106" fg:w="1"/><text x="8.9599%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.7099%" y="245" width="0.0822%" height="15" fill="rgb(238,205,33)" fg:x="106" fg:w="1"/><text x="8.9599%" y="255.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="8.7099%" y="229" width="0.0822%" height="15" fill="rgb(231,56,7)" fg:x="106" fg:w="1"/><text x="8.9599%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="8.3813%" y="389" width="0.4930%" height="15" fill="rgb(244,186,29)" fg:x="102" fg:w="6"/><text x="8.6313%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="8.3813%" y="373" width="0.4930%" height="15" fill="rgb(234,111,31)" fg:x="102" fg:w="6"/><text x="8.6313%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.41%)</title><rect x="8.4634%" y="357" width="0.4108%" height="15" fill="rgb(241,149,10)" fg:x="103" fg:w="5"/><text x="8.7134%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.41%)</title><rect x="8.4634%" y="341" width="0.4108%" height="15" fill="rgb(249,206,44)" fg:x="103" fg:w="5"/><text x="8.7134%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="8.7099%" y="325" width="0.1643%" height="15" fill="rgb(251,153,30)" fg:x="106" fg:w="2"/><text x="8.9599%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="8.7921%" y="309" width="0.0822%" height="15" fill="rgb(239,152,38)" fg:x="107" fg:w="1"/><text x="9.0421%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="8.7921%" y="293" width="0.0822%" height="15" fill="rgb(249,139,47)" fg:x="107" fg:w="1"/><text x="9.0421%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.7921%" y="277" width="0.0822%" height="15" fill="rgb(244,64,35)" fg:x="107" fg:w="1"/><text x="9.0421%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.7921%" y="261" width="0.0822%" height="15" fill="rgb(216,46,15)" fg:x="107" fg:w="1"/><text x="9.0421%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.7921%" y="245" width="0.0822%" height="15" fill="rgb(250,74,19)" fg:x="107" fg:w="1"/><text x="9.0421%" y="255.50"></text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.16%)</title><rect x="8.8743%" y="389" width="0.1643%" height="15" fill="rgb(249,42,33)" fg:x="108" fg:w="2"/><text x="9.1243%" y="399.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="9.1208%" y="357" width="0.0822%" height="15" fill="rgb(242,149,17)" fg:x="111" fg:w="1"/><text x="9.3708%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="9.1208%" y="341" width="0.0822%" height="15" fill="rgb(244,29,21)" fg:x="111" fg:w="1"/><text x="9.3708%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="9.1208%" y="325" width="0.0822%" height="15" fill="rgb(220,130,37)" fg:x="111" fg:w="1"/><text x="9.3708%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1208%" y="309" width="0.0822%" height="15" fill="rgb(211,67,2)" fg:x="111" fg:w="1"/><text x="9.3708%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;regex_automata::meta::regex::Regex as core::clone::Clone&gt;::clone::{{closure}}&gt; (1 samples, 0.08%)</title><rect x="9.2030%" y="357" width="0.0822%" height="15" fill="rgb(235,68,52)" fg:x="112" fg:w="1"/><text x="9.4530%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.41%)</title><rect x="9.0386%" y="389" width="0.4108%" height="15" fill="rgb(246,142,3)" fg:x="110" fg:w="5"/><text x="9.2886%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="9.1208%" y="373" width="0.3287%" height="15" fill="rgb(241,25,7)" fg:x="111" fg:w="4"/><text x="9.3708%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="9.2851%" y="357" width="0.1643%" height="15" fill="rgb(242,119,39)" fg:x="113" fg:w="2"/><text x="9.5351%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="9.2851%" y="341" width="0.1643%" height="15" fill="rgb(241,98,45)" fg:x="113" fg:w="2"/><text x="9.5351%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.3673%" y="325" width="0.0822%" height="15" fill="rgb(254,28,30)" fg:x="114" fg:w="1"/><text x="9.6173%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.4495%" y="341" width="0.0822%" height="15" fill="rgb(241,142,54)" fg:x="115" fg:w="1"/><text x="9.6995%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5316%" y="341" width="0.0822%" height="15" fill="rgb(222,85,15)" fg:x="116" fg:w="1"/><text x="9.7816%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="9.6138%" y="341" width="0.0822%" height="15" fill="rgb(210,85,47)" fg:x="117" fg:w="1"/><text x="9.8638%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.6138%" y="325" width="0.0822%" height="15" fill="rgb(224,206,25)" fg:x="117" fg:w="1"/><text x="9.8638%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="9.6960%" y="341" width="0.1643%" height="15" fill="rgb(243,201,19)" fg:x="118" fg:w="2"/><text x="9.9460%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="9.6960%" y="325" width="0.1643%" height="15" fill="rgb(236,59,4)" fg:x="118" fg:w="2"/><text x="9.9460%" y="335.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="9.8603%" y="341" width="0.0822%" height="15" fill="rgb(254,179,45)" fg:x="120" fg:w="1"/><text x="10.1103%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.1068%" y="325" width="0.0822%" height="15" fill="rgb(226,14,10)" fg:x="123" fg:w="1"/><text x="10.3568%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3533%" y="309" width="0.0822%" height="15" fill="rgb(244,27,41)" fg:x="126" fg:w="1"/><text x="10.6033%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (28 samples, 2.30%)</title><rect x="10.1890%" y="325" width="2.3007%" height="15" fill="rgb(235,35,32)" fg:x="124" fg:w="28"/><text x="10.4390%" y="335.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (25 samples, 2.05%)</title><rect x="10.4355%" y="309" width="2.0542%" height="15" fill="rgb(218,68,31)" fg:x="127" fg:w="25"/><text x="10.6855%" y="319.50">c..</text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="12.2432%" y="293" width="0.2465%" height="15" fill="rgb(207,120,37)" fg:x="149" fg:w="3"/><text x="12.4932%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="12.4897%" y="325" width="0.1643%" height="15" fill="rgb(227,98,0)" fg:x="152" fg:w="2"/><text x="12.7397%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="12.5719%" y="309" width="0.0822%" height="15" fill="rgb(207,7,3)" fg:x="153" fg:w="1"/><text x="12.8219%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="12.5719%" y="293" width="0.0822%" height="15" fill="rgb(206,98,19)" fg:x="153" fg:w="1"/><text x="12.8219%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="12.5719%" y="277" width="0.0822%" height="15" fill="rgb(217,5,26)" fg:x="153" fg:w="1"/><text x="12.8219%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="12.9006%" y="309" width="0.1643%" height="15" fill="rgb(235,190,38)" fg:x="157" fg:w="2"/><text x="13.1506%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.49%)</title><rect x="12.6541%" y="325" width="0.4930%" height="15" fill="rgb(247,86,24)" fg:x="154" fg:w="6"/><text x="12.9041%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="13.0649%" y="309" width="0.0822%" height="15" fill="rgb(205,101,16)" fg:x="159" fg:w="1"/><text x="13.3149%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="13.1471%" y="325" width="0.0822%" height="15" fill="rgb(246,168,33)" fg:x="160" fg:w="1"/><text x="13.3971%" y="335.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="13.7223%" y="261" width="0.3287%" height="15" fill="rgb(231,114,1)" fg:x="167" fg:w="4"/><text x="13.9723%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="14.0509%" y="261" width="0.1643%" height="15" fill="rgb(207,184,53)" fg:x="171" fg:w="2"/><text x="14.3009%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.41%)</title><rect x="14.2153%" y="261" width="0.4108%" height="15" fill="rgb(224,95,51)" fg:x="173" fg:w="5"/><text x="14.4653%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="14.3796%" y="245" width="0.2465%" height="15" fill="rgb(212,188,45)" fg:x="175" fg:w="3"/><text x="14.6296%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="14.3796%" y="229" width="0.2465%" height="15" fill="rgb(223,154,38)" fg:x="175" fg:w="3"/><text x="14.6296%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.4618%" y="213" width="0.1643%" height="15" fill="rgb(251,22,52)" fg:x="176" fg:w="2"/><text x="14.7118%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="14.6261%" y="261" width="0.1643%" height="15" fill="rgb(229,209,22)" fg:x="178" fg:w="2"/><text x="14.8761%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.7083%" y="245" width="0.0822%" height="15" fill="rgb(234,138,34)" fg:x="179" fg:w="1"/><text x="14.9583%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="14.7905%" y="261" width="0.3287%" height="15" fill="rgb(212,95,11)" fg:x="180" fg:w="4"/><text x="15.0405%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="14.7905%" y="245" width="0.3287%" height="15" fill="rgb(240,179,47)" fg:x="180" fg:w="4"/><text x="15.0405%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="14.8726%" y="229" width="0.2465%" height="15" fill="rgb(240,163,11)" fg:x="181" fg:w="3"/><text x="15.1226%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="15.0370%" y="213" width="0.0822%" height="15" fill="rgb(236,37,12)" fg:x="183" fg:w="1"/><text x="15.2870%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.0370%" y="197" width="0.0822%" height="15" fill="rgb(232,164,16)" fg:x="183" fg:w="1"/><text x="15.2870%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.0370%" y="181" width="0.0822%" height="15" fill="rgb(244,205,15)" fg:x="183" fg:w="1"/><text x="15.2870%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="15.0370%" y="165" width="0.0822%" height="15" fill="rgb(223,117,47)" fg:x="183" fg:w="1"/><text x="15.2870%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="15.1191%" y="245" width="0.0822%" height="15" fill="rgb(244,107,35)" fg:x="184" fg:w="1"/><text x="15.3691%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.1191%" y="229" width="0.0822%" height="15" fill="rgb(205,140,8)" fg:x="184" fg:w="1"/><text x="15.3691%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (117 samples, 9.61%)</title><rect x="15.1191%" y="261" width="9.6138%" height="15" fill="rgb(228,84,46)" fg:x="184" fg:w="117"/><text x="15.3691%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (116 samples, 9.53%)</title><rect x="15.2013%" y="245" width="9.5316%" height="15" fill="rgb(254,188,9)" fg:x="185" fg:w="116"/><text x="15.4513%" y="255.50">regex_automata..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (116 samples, 9.53%)</title><rect x="15.2013%" y="229" width="9.5316%" height="15" fill="rgb(206,112,54)" fg:x="185" fg:w="116"/><text x="15.4513%" y="239.50">alloc::vec::Ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="24.7329%" y="261" width="0.4108%" height="15" fill="rgb(216,84,49)" fg:x="301" fg:w="5"/><text x="24.9829%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (146 samples, 12.00%)</title><rect x="13.2293%" y="309" width="11.9967%" height="15" fill="rgb(214,194,35)" fg:x="161" fg:w="146"/><text x="13.4793%" y="319.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (146 samples, 12.00%)</title><rect x="13.2293%" y="293" width="11.9967%" height="15" fill="rgb(249,28,3)" fg:x="161" fg:w="146"/><text x="13.4793%" y="303.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (145 samples, 11.91%)</title><rect x="13.3114%" y="277" width="11.9145%" height="15" fill="rgb(222,56,52)" fg:x="162" fg:w="145"/><text x="13.5614%" y="287.50">regex_automata::nf..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="25.1438%" y="261" width="0.0822%" height="15" fill="rgb(245,217,50)" fg:x="306" fg:w="1"/><text x="25.3938%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.2260%" y="309" width="0.0822%" height="15" fill="rgb(213,201,24)" fg:x="307" fg:w="1"/><text x="25.4760%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.4725%" y="293" width="0.0822%" height="15" fill="rgb(248,116,28)" fg:x="310" fg:w="1"/><text x="25.7225%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="25.5546%" y="293" width="0.1643%" height="15" fill="rgb(219,72,43)" fg:x="311" fg:w="2"/><text x="25.8046%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="25.6368%" y="277" width="0.0822%" height="15" fill="rgb(209,138,14)" fg:x="312" fg:w="1"/><text x="25.8868%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.6368%" y="261" width="0.0822%" height="15" fill="rgb(222,18,33)" fg:x="312" fg:w="1"/><text x="25.8868%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="25.6368%" y="245" width="0.0822%" height="15" fill="rgb(213,199,7)" fg:x="312" fg:w="1"/><text x="25.8868%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="25.6368%" y="229" width="0.0822%" height="15" fill="rgb(250,110,10)" fg:x="312" fg:w="1"/><text x="25.8868%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.82%)</title><rect x="25.3081%" y="309" width="0.8217%" height="15" fill="rgb(248,123,6)" fg:x="308" fg:w="10"/><text x="25.5581%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.41%)</title><rect x="25.7190%" y="293" width="0.4108%" height="15" fill="rgb(206,91,31)" fg:x="313" fg:w="5"/><text x="25.9690%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.0477%" y="277" width="0.0822%" height="15" fill="rgb(211,154,13)" fg:x="317" fg:w="1"/><text x="26.2977%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="26.1298%" y="293" width="0.0822%" height="15" fill="rgb(225,148,7)" fg:x="318" fg:w="1"/><text x="26.3798%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.1298%" y="277" width="0.0822%" height="15" fill="rgb(220,160,43)" fg:x="318" fg:w="1"/><text x="26.3798%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (2 samples, 0.16%)</title><rect x="26.1298%" y="309" width="0.1643%" height="15" fill="rgb(213,52,39)" fg:x="318" fg:w="2"/><text x="26.3798%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="26.2120%" y="293" width="0.0822%" height="15" fill="rgb(243,137,7)" fg:x="319" fg:w="1"/><text x="26.4620%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (160 samples, 13.15%)</title><rect x="13.2293%" y="325" width="13.1471%" height="15" fill="rgb(230,79,13)" fg:x="161" fg:w="160"/><text x="13.4793%" y="335.50">regex_automata::nfa:..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="26.2942%" y="309" width="0.0822%" height="15" fill="rgb(247,105,23)" fg:x="320" fg:w="1"/><text x="26.5442%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (201 samples, 16.52%)</title><rect x="9.9425%" y="341" width="16.5160%" height="15" fill="rgb(223,179,41)" fg:x="121" fg:w="201"/><text x="10.1925%" y="351.50">regex_automata::meta::str..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="26.3763%" y="325" width="0.0822%" height="15" fill="rgb(218,9,34)" fg:x="321" fg:w="1"/><text x="26.6263%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="26.4585%" y="309" width="0.0822%" height="15" fill="rgb(222,106,8)" fg:x="322" fg:w="1"/><text x="26.7085%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.4585%" y="293" width="0.0822%" height="15" fill="rgb(211,220,0)" fg:x="322" fg:w="1"/><text x="26.7085%" y="303.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="26.4585%" y="277" width="0.0822%" height="15" fill="rgb(229,52,16)" fg:x="322" fg:w="1"/><text x="26.7085%" y="287.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="26.6228%" y="293" width="0.0822%" height="15" fill="rgb(212,155,18)" fg:x="324" fg:w="1"/><text x="26.8728%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="26.7050%" y="293" width="0.0822%" height="15" fill="rgb(242,21,14)" fg:x="325" fg:w="1"/><text x="26.9550%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="26.7050%" y="277" width="0.0822%" height="15" fill="rgb(222,19,48)" fg:x="325" fg:w="1"/><text x="26.9550%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="26.7050%" y="261" width="0.0822%" height="15" fill="rgb(232,45,27)" fg:x="325" fg:w="1"/><text x="26.9550%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="26.7872%" y="293" width="0.1643%" height="15" fill="rgb(249,103,42)" fg:x="326" fg:w="2"/><text x="27.0372%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.82%)</title><rect x="26.4585%" y="341" width="0.8217%" height="15" fill="rgb(246,81,33)" fg:x="322" fg:w="10"/><text x="26.7085%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.82%)</title><rect x="26.4585%" y="325" width="0.8217%" height="15" fill="rgb(252,33,42)" fg:x="322" fg:w="10"/><text x="26.7085%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (9 samples, 0.74%)</title><rect x="26.5407%" y="309" width="0.7395%" height="15" fill="rgb(209,212,41)" fg:x="323" fg:w="9"/><text x="26.7907%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.33%)</title><rect x="26.9515%" y="293" width="0.3287%" height="15" fill="rgb(207,154,6)" fg:x="328" fg:w="4"/><text x="27.2015%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="27.0337%" y="277" width="0.2465%" height="15" fill="rgb(223,64,47)" fg:x="329" fg:w="3"/><text x="27.2837%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="27.0337%" y="261" width="0.2465%" height="15" fill="rgb(211,161,38)" fg:x="329" fg:w="3"/><text x="27.2837%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="27.0337%" y="245" width="0.2465%" height="15" fill="rgb(219,138,40)" fg:x="329" fg:w="3"/><text x="27.2837%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="27.3624%" y="309" width="0.2465%" height="15" fill="rgb(241,228,46)" fg:x="333" fg:w="3"/><text x="27.6124%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="27.4445%" y="293" width="0.1643%" height="15" fill="rgb(223,209,38)" fg:x="334" fg:w="2"/><text x="27.6945%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.5267%" y="277" width="0.0822%" height="15" fill="rgb(236,164,45)" fg:x="335" fg:w="1"/><text x="27.7767%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.5267%" y="261" width="0.0822%" height="15" fill="rgb(231,15,5)" fg:x="335" fg:w="1"/><text x="27.7767%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="27.5267%" y="245" width="0.0822%" height="15" fill="rgb(252,35,15)" fg:x="335" fg:w="1"/><text x="27.7767%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="27.6089%" y="309" width="0.0822%" height="15" fill="rgb(248,181,18)" fg:x="336" fg:w="1"/><text x="27.8589%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (223 samples, 18.32%)</title><rect x="9.4495%" y="389" width="18.3237%" height="15" fill="rgb(233,39,42)" fg:x="115" fg:w="223"/><text x="9.6995%" y="399.50">regex::regex::string::Regex::..</text></g><g><title>regex::builders::Builder::build_one_string (223 samples, 18.32%)</title><rect x="9.4495%" y="373" width="18.3237%" height="15" fill="rgb(238,110,33)" fg:x="115" fg:w="223"/><text x="9.6995%" y="383.50">regex::builders::Builder::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (223 samples, 18.32%)</title><rect x="9.4495%" y="357" width="18.3237%" height="15" fill="rgb(233,195,10)" fg:x="115" fg:w="223"/><text x="9.6995%" y="367.50">regex_automata::meta::regex::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="27.2802%" y="341" width="0.4930%" height="15" fill="rgb(254,105,3)" fg:x="332" fg:w="6"/><text x="27.5302%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="27.2802%" y="325" width="0.4930%" height="15" fill="rgb(221,225,9)" fg:x="332" fg:w="6"/><text x="27.5302%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.6910%" y="309" width="0.0822%" height="15" fill="rgb(224,227,45)" fg:x="337" fg:w="1"/><text x="27.9410%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.9376%" y="325" width="0.0822%" height="15" fill="rgb(229,198,43)" fg:x="340" fg:w="1"/><text x="28.1876%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="28.5127%" y="309" width="0.0822%" height="15" fill="rgb(206,209,35)" fg:x="347" fg:w="1"/><text x="28.7627%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.5127%" y="293" width="0.0822%" height="15" fill="rgb(245,195,53)" fg:x="347" fg:w="1"/><text x="28.7627%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="28.5127%" y="277" width="0.0822%" height="15" fill="rgb(240,92,26)" fg:x="347" fg:w="1"/><text x="28.7627%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.5949%" y="309" width="0.0822%" height="15" fill="rgb(207,40,23)" fg:x="348" fg:w="1"/><text x="28.8449%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.41%)</title><rect x="28.6771%" y="309" width="0.4108%" height="15" fill="rgb(223,111,35)" fg:x="349" fg:w="5"/><text x="28.9271%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (14 samples, 1.15%)</title><rect x="28.0197%" y="325" width="1.1504%" height="15" fill="rgb(229,147,28)" fg:x="341" fg:w="14"/><text x="28.2697%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="29.0879%" y="309" width="0.0822%" height="15" fill="rgb(211,29,28)" fg:x="354" fg:w="1"/><text x="29.3379%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.0879%" y="293" width="0.0822%" height="15" fill="rgb(228,72,33)" fg:x="354" fg:w="1"/><text x="29.3379%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.0879%" y="277" width="0.0822%" height="15" fill="rgb(205,214,31)" fg:x="354" fg:w="1"/><text x="29.3379%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0879%" y="261" width="0.0822%" height="15" fill="rgb(224,111,15)" fg:x="354" fg:w="1"/><text x="29.3379%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (17 samples, 1.40%)</title><rect x="27.8554%" y="341" width="1.3969%" height="15" fill="rgb(253,21,26)" fg:x="339" fg:w="17"/><text x="28.1054%" y="351.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="29.1701%" y="325" width="0.0822%" height="15" fill="rgb(245,139,43)" fg:x="355" fg:w="1"/><text x="29.4201%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.1701%" y="309" width="0.0822%" height="15" fill="rgb(252,170,7)" fg:x="355" fg:w="1"/><text x="29.4201%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.1701%" y="293" width="0.0822%" height="15" fill="rgb(231,118,14)" fg:x="355" fg:w="1"/><text x="29.4201%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1701%" y="277" width="0.0822%" height="15" fill="rgb(238,83,0)" fg:x="355" fg:w="1"/><text x="29.4201%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (255 samples, 20.95%)</title><rect x="8.3813%" y="405" width="20.9532%" height="15" fill="rgb(221,39,39)" fg:x="102" fg:w="255"/><text x="8.6313%" y="415.50">indefinite::helper::Helper::get_f..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.56%)</title><rect x="27.7732%" y="389" width="1.5612%" height="15" fill="rgb(222,119,46)" fg:x="338" fg:w="19"/><text x="28.0232%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.48%)</title><rect x="27.8554%" y="373" width="1.4790%" height="15" fill="rgb(222,165,49)" fg:x="339" fg:w="18"/><text x="28.1054%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.48%)</title><rect x="27.8554%" y="357" width="1.4790%" height="15" fill="rgb(219,113,52)" fg:x="339" fg:w="18"/><text x="28.1054%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="29.2523%" y="341" width="0.0822%" height="15" fill="rgb(214,7,15)" fg:x="356" fg:w="1"/><text x="29.5023%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="29.2523%" y="325" width="0.0822%" height="15" fill="rgb(235,32,4)" fg:x="356" fg:w="1"/><text x="29.5023%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.2523%" y="309" width="0.0822%" height="15" fill="rgb(238,90,54)" fg:x="356" fg:w="1"/><text x="29.5023%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4166%" y="373" width="0.0822%" height="15" fill="rgb(213,208,19)" fg:x="358" fg:w="1"/><text x="29.6666%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.4988%" y="357" width="0.0822%" height="15" fill="rgb(233,156,4)" fg:x="359" fg:w="1"/><text x="29.7488%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="29.5809%" y="341" width="0.0822%" height="15" fill="rgb(207,194,5)" fg:x="360" fg:w="1"/><text x="29.8309%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="29.5809%" y="357" width="0.1643%" height="15" fill="rgb(206,111,30)" fg:x="360" fg:w="2"/><text x="29.8309%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="29.6631%" y="341" width="0.0822%" height="15" fill="rgb(243,70,54)" fg:x="361" fg:w="1"/><text x="29.9131%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6631%" y="325" width="0.0822%" height="15" fill="rgb(242,28,8)" fg:x="361" fg:w="1"/><text x="29.9131%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="29.6631%" y="309" width="0.0822%" height="15" fill="rgb(219,106,18)" fg:x="361" fg:w="1"/><text x="29.9131%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.6631%" y="293" width="0.0822%" height="15" fill="rgb(244,222,10)" fg:x="361" fg:w="1"/><text x="29.9131%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.58%)</title><rect x="29.3344%" y="389" width="0.5752%" height="15" fill="rgb(236,179,52)" fg:x="357" fg:w="7"/><text x="29.5844%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.41%)</title><rect x="29.4988%" y="373" width="0.4108%" height="15" fill="rgb(213,23,39)" fg:x="359" fg:w="5"/><text x="29.7488%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="29.7453%" y="357" width="0.1643%" height="15" fill="rgb(238,48,10)" fg:x="362" fg:w="2"/><text x="29.9953%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="29.7453%" y="341" width="0.1643%" height="15" fill="rgb(251,196,23)" fg:x="362" fg:w="2"/><text x="29.9953%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.8274%" y="325" width="0.0822%" height="15" fill="rgb(250,152,24)" fg:x="363" fg:w="1"/><text x="30.0774%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="29.9096%" y="325" width="0.1643%" height="15" fill="rgb(209,150,17)" fg:x="364" fg:w="2"/><text x="30.1596%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.25%)</title><rect x="29.9096%" y="341" width="0.2465%" height="15" fill="rgb(234,202,34)" fg:x="364" fg:w="3"/><text x="30.1596%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="30.0740%" y="325" width="0.0822%" height="15" fill="rgb(253,148,53)" fg:x="366" fg:w="1"/><text x="30.3240%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="30.0740%" y="309" width="0.0822%" height="15" fill="rgb(218,129,16)" fg:x="366" fg:w="1"/><text x="30.3240%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="30.1561%" y="325" width="0.0822%" height="15" fill="rgb(216,85,19)" fg:x="367" fg:w="1"/><text x="30.4061%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (5 samples, 0.41%)</title><rect x="29.9096%" y="373" width="0.4108%" height="15" fill="rgb(235,228,7)" fg:x="364" fg:w="5"/><text x="30.1596%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.41%)</title><rect x="29.9096%" y="357" width="0.4108%" height="15" fill="rgb(245,175,0)" fg:x="364" fg:w="5"/><text x="30.1596%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="30.1561%" y="341" width="0.1643%" height="15" fill="rgb(208,168,36)" fg:x="367" fg:w="2"/><text x="30.4061%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="30.2383%" y="325" width="0.0822%" height="15" fill="rgb(246,171,24)" fg:x="368" fg:w="1"/><text x="30.4883%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.2383%" y="309" width="0.0822%" height="15" fill="rgb(215,142,24)" fg:x="368" fg:w="1"/><text x="30.4883%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.2383%" y="293" width="0.0822%" height="15" fill="rgb(250,187,7)" fg:x="368" fg:w="1"/><text x="30.4883%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2383%" y="277" width="0.0822%" height="15" fill="rgb(228,66,33)" fg:x="368" fg:w="1"/><text x="30.4883%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.40%)</title><rect x="30.3205%" y="309" width="1.3969%" height="15" fill="rgb(234,215,21)" fg:x="369" fg:w="17"/><text x="30.5705%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (7 samples, 0.58%)</title><rect x="31.1422%" y="293" width="0.5752%" height="15" fill="rgb(222,191,20)" fg:x="379" fg:w="7"/><text x="31.3922%" y="303.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.89%)</title><rect x="29.9096%" y="389" width="1.8899%" height="15" fill="rgb(245,79,54)" fg:x="364" fg:w="23"/><text x="30.1596%" y="399.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.48%)</title><rect x="30.3205%" y="373" width="1.4790%" height="15" fill="rgb(240,10,37)" fg:x="369" fg:w="18"/><text x="30.5705%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.48%)</title><rect x="30.3205%" y="357" width="1.4790%" height="15" fill="rgb(214,192,32)" fg:x="369" fg:w="18"/><text x="30.5705%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.48%)</title><rect x="30.3205%" y="341" width="1.4790%" height="15" fill="rgb(209,36,54)" fg:x="369" fg:w="18"/><text x="30.5705%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (18 samples, 1.48%)</title><rect x="30.3205%" y="325" width="1.4790%" height="15" fill="rgb(220,10,11)" fg:x="369" fg:w="18"/><text x="30.5705%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="31.7173%" y="309" width="0.0822%" height="15" fill="rgb(221,106,17)" fg:x="386" fg:w="1"/><text x="31.9673%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.7173%" y="293" width="0.0822%" height="15" fill="rgb(251,142,44)" fg:x="386" fg:w="1"/><text x="31.9673%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.7173%" y="277" width="0.0822%" height="15" fill="rgb(238,13,15)" fg:x="386" fg:w="1"/><text x="31.9673%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.7173%" y="261" width="0.0822%" height="15" fill="rgb(208,107,27)" fg:x="386" fg:w="1"/><text x="31.9673%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.25%)</title><rect x="32.0460%" y="309" width="0.2465%" height="15" fill="rgb(205,136,37)" fg:x="390" fg:w="3"/><text x="32.2960%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="32.1282%" y="293" width="0.1643%" height="15" fill="rgb(250,205,27)" fg:x="391" fg:w="2"/><text x="32.3782%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="32.1282%" y="277" width="0.1643%" height="15" fill="rgb(210,80,43)" fg:x="391" fg:w="2"/><text x="32.3782%" y="287.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="32.1282%" y="261" width="0.1643%" height="15" fill="rgb(247,160,36)" fg:x="391" fg:w="2"/><text x="32.3782%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.2925%" y="309" width="0.1643%" height="15" fill="rgb(234,13,49)" fg:x="393" fg:w="2"/><text x="32.5425%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="31.9638%" y="341" width="0.5752%" height="15" fill="rgb(234,122,0)" fg:x="389" fg:w="7"/><text x="32.2138%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="31.9638%" y="325" width="0.5752%" height="15" fill="rgb(207,146,38)" fg:x="389" fg:w="7"/><text x="32.2138%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="32.4569%" y="309" width="0.0822%" height="15" fill="rgb(207,177,25)" fg:x="395" fg:w="1"/><text x="32.7069%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="32.4569%" y="293" width="0.0822%" height="15" fill="rgb(211,178,42)" fg:x="395" fg:w="1"/><text x="32.7069%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.5390%" y="341" width="0.1643%" height="15" fill="rgb(230,69,54)" fg:x="396" fg:w="2"/><text x="32.7890%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="32.7855%" y="309" width="0.1643%" height="15" fill="rgb(214,135,41)" fg:x="399" fg:w="2"/><text x="33.0355%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.8677%" y="293" width="0.0822%" height="15" fill="rgb(237,67,25)" fg:x="400" fg:w="1"/><text x="33.1177%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.8677%" y="277" width="0.0822%" height="15" fill="rgb(222,189,50)" fg:x="400" fg:w="1"/><text x="33.1177%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="32.8677%" y="261" width="0.0822%" height="15" fill="rgb(245,148,34)" fg:x="400" fg:w="1"/><text x="33.1177%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="32.7034%" y="341" width="0.3287%" height="15" fill="rgb(222,29,6)" fg:x="398" fg:w="4"/><text x="32.9534%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="32.7034%" y="325" width="0.3287%" height="15" fill="rgb(221,189,43)" fg:x="398" fg:w="4"/><text x="32.9534%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="32.9499%" y="309" width="0.0822%" height="15" fill="rgb(207,36,27)" fg:x="401" fg:w="1"/><text x="33.1999%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.9499%" y="293" width="0.0822%" height="15" fill="rgb(217,90,24)" fg:x="401" fg:w="1"/><text x="33.1999%" y="303.50"></text></g><g><title>__libc_malloc (3 samples, 0.25%)</title><rect x="33.1964%" y="325" width="0.2465%" height="15" fill="rgb(224,66,35)" fg:x="404" fg:w="3"/><text x="33.4464%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.4429%" y="309" width="0.0822%" height="15" fill="rgb(221,13,50)" fg:x="407" fg:w="1"/><text x="33.6929%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (30 samples, 2.47%)</title><rect x="33.5251%" y="309" width="2.4651%" height="15" fill="rgb(236,68,49)" fg:x="408" fg:w="30"/><text x="33.7751%" y="319.50">co..</text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="35.6615%" y="293" width="0.3287%" height="15" fill="rgb(229,146,28)" fg:x="434" fg:w="4"/><text x="35.9115%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (32 samples, 2.63%)</title><rect x="33.4429%" y="325" width="2.6294%" height="15" fill="rgb(225,31,38)" fg:x="407" fg:w="32"/><text x="33.6929%" y="335.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="35.9901%" y="309" width="0.0822%" height="15" fill="rgb(250,208,3)" fg:x="438" fg:w="1"/><text x="36.2401%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.9901%" y="293" width="0.0822%" height="15" fill="rgb(246,54,23)" fg:x="438" fg:w="1"/><text x="36.2401%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="36.1545%" y="309" width="0.4930%" height="15" fill="rgb(243,76,11)" fg:x="440" fg:w="6"/><text x="36.4045%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="36.5653%" y="293" width="0.0822%" height="15" fill="rgb(245,21,50)" fg:x="445" fg:w="1"/><text x="36.8153%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="36.5653%" y="277" width="0.0822%" height="15" fill="rgb(228,9,43)" fg:x="445" fg:w="1"/><text x="36.8153%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.66%)</title><rect x="36.0723%" y="325" width="0.6574%" height="15" fill="rgb(208,100,47)" fg:x="439" fg:w="8"/><text x="36.3223%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="36.6475%" y="309" width="0.0822%" height="15" fill="rgb(232,26,8)" fg:x="446" fg:w="1"/><text x="36.8975%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="36.6475%" y="293" width="0.0822%" height="15" fill="rgb(216,166,38)" fg:x="446" fg:w="1"/><text x="36.8975%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="37.0583%" y="293" width="0.1643%" height="15" fill="rgb(251,202,51)" fg:x="451" fg:w="2"/><text x="37.3083%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.1405%" y="277" width="0.0822%" height="15" fill="rgb(254,216,34)" fg:x="452" fg:w="1"/><text x="37.3905%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.1405%" y="261" width="0.0822%" height="15" fill="rgb(251,32,27)" fg:x="452" fg:w="1"/><text x="37.3905%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.1405%" y="245" width="0.0822%" height="15" fill="rgb(208,127,28)" fg:x="452" fg:w="1"/><text x="37.3905%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.7157%" y="261" width="0.0822%" height="15" fill="rgb(224,137,22)" fg:x="459" fg:w="1"/><text x="37.9657%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.7157%" y="245" width="0.0822%" height="15" fill="rgb(254,70,32)" fg:x="459" fg:w="1"/><text x="37.9657%" y="255.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="37.7157%" y="229" width="0.0822%" height="15" fill="rgb(229,75,37)" fg:x="459" fg:w="1"/><text x="37.9657%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.74%)</title><rect x="37.2227%" y="293" width="0.7395%" height="15" fill="rgb(252,64,23)" fg:x="453" fg:w="9"/><text x="37.4727%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.49%)</title><rect x="37.4692%" y="277" width="0.4930%" height="15" fill="rgb(232,162,48)" fg:x="456" fg:w="6"/><text x="37.7192%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.7979%" y="261" width="0.1643%" height="15" fill="rgb(246,160,12)" fg:x="460" fg:w="2"/><text x="38.0479%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="37.7979%" y="245" width="0.1643%" height="15" fill="rgb(247,166,0)" fg:x="460" fg:w="2"/><text x="38.0479%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.8800%" y="229" width="0.0822%" height="15" fill="rgb(249,219,21)" fg:x="461" fg:w="1"/><text x="38.1300%" y="239.50"></text></g><g><title>&lt;aho_corasick::nfa::noncontiguous::NFA as aho_corasick::automaton::Automaton&gt;::prefilter (1 samples, 0.08%)</title><rect x="38.0444%" y="277" width="0.0822%" height="15" fill="rgb(205,209,3)" fg:x="463" fg:w="1"/><text x="38.2944%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.66%)</title><rect x="38.1265%" y="277" width="0.6574%" height="15" fill="rgb(243,44,1)" fg:x="464" fg:w="8"/><text x="38.3765%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.66%)</title><rect x="38.1265%" y="261" width="0.6574%" height="15" fill="rgb(206,159,16)" fg:x="464" fg:w="8"/><text x="38.3765%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (11 samples, 0.90%)</title><rect x="37.9622%" y="293" width="0.9039%" height="15" fill="rgb(244,77,30)" fg:x="462" fg:w="11"/><text x="38.2122%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="38.7839%" y="277" width="0.0822%" height="15" fill="rgb(218,69,12)" fg:x="472" fg:w="1"/><text x="39.0339%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (28 samples, 2.30%)</title><rect x="36.7297%" y="325" width="2.3007%" height="15" fill="rgb(212,87,7)" fg:x="447" fg:w="28"/><text x="36.9797%" y="335.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (28 samples, 2.30%)</title><rect x="36.7297%" y="309" width="2.3007%" height="15" fill="rgb(245,114,25)" fg:x="447" fg:w="28"/><text x="36.9797%" y="319.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (2 samples, 0.16%)</title><rect x="38.8661%" y="293" width="0.1643%" height="15" fill="rgb(210,61,42)" fg:x="473" fg:w="2"/><text x="39.1161%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="39.0304%" y="325" width="0.1643%" height="15" fill="rgb(211,52,33)" fg:x="475" fg:w="2"/><text x="39.2804%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="39.0304%" y="309" width="0.1643%" height="15" fill="rgb(234,58,33)" fg:x="475" fg:w="2"/><text x="39.2804%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="39.0304%" y="293" width="0.1643%" height="15" fill="rgb(220,115,36)" fg:x="475" fg:w="2"/><text x="39.2804%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.1126%" y="277" width="0.0822%" height="15" fill="rgb(243,153,54)" fg:x="476" fg:w="1"/><text x="39.3626%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.1126%" y="261" width="0.0822%" height="15" fill="rgb(251,47,18)" fg:x="476" fg:w="1"/><text x="39.3626%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.1126%" y="245" width="0.0822%" height="15" fill="rgb(242,102,42)" fg:x="476" fg:w="1"/><text x="39.3626%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="39.3591%" y="261" width="0.0822%" height="15" fill="rgb(234,31,38)" fg:x="479" fg:w="1"/><text x="39.6091%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="39.4412%" y="245" width="0.0822%" height="15" fill="rgb(221,117,51)" fg:x="480" fg:w="1"/><text x="39.6912%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="41.0025%" y="213" width="0.0822%" height="15" fill="rgb(212,20,18)" fg:x="499" fg:w="1"/><text x="41.2525%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="41.0846%" y="213" width="0.4108%" height="15" fill="rgb(245,133,36)" fg:x="500" fg:w="5"/><text x="41.3346%" y="223.50"></text></g><g><title>__libc_free (8 samples, 0.66%)</title><rect x="41.4955%" y="213" width="0.6574%" height="15" fill="rgb(212,6,19)" fg:x="505" fg:w="8"/><text x="41.7455%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (8 samples, 0.66%)</title><rect x="42.1528%" y="213" width="0.6574%" height="15" fill="rgb(218,1,36)" fg:x="513" fg:w="8"/><text x="42.4028%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="42.4815%" y="197" width="0.3287%" height="15" fill="rgb(246,84,54)" fg:x="517" fg:w="4"/><text x="42.7315%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="42.4815%" y="181" width="0.3287%" height="15" fill="rgb(242,110,6)" fg:x="517" fg:w="4"/><text x="42.7315%" y="191.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="42.5637%" y="165" width="0.2465%" height="15" fill="rgb(214,47,5)" fg:x="518" fg:w="3"/><text x="42.8137%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.33%)</title><rect x="42.8102%" y="213" width="0.3287%" height="15" fill="rgb(218,159,25)" fg:x="521" fg:w="4"/><text x="43.0602%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="42.8924%" y="197" width="0.2465%" height="15" fill="rgb(215,211,28)" fg:x="522" fg:w="3"/><text x="43.1424%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="42.8924%" y="181" width="0.2465%" height="15" fill="rgb(238,59,32)" fg:x="522" fg:w="3"/><text x="43.1424%" y="191.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="42.8924%" y="165" width="0.2465%" height="15" fill="rgb(226,82,3)" fg:x="522" fg:w="3"/><text x="43.1424%" y="175.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="43.5497%" y="181" width="0.1643%" height="15" fill="rgb(240,164,32)" fg:x="530" fg:w="2"/><text x="43.7997%" y="191.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="43.7141%" y="149" width="0.0822%" height="15" fill="rgb(232,46,7)" fg:x="532" fg:w="1"/><text x="43.9641%" y="159.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="43.7141%" y="133" width="0.0822%" height="15" fill="rgb(229,129,53)" fg:x="532" fg:w="1"/><text x="43.9641%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="43.7141%" y="181" width="0.2465%" height="15" fill="rgb(234,188,29)" fg:x="532" fg:w="3"/><text x="43.9641%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="43.7141%" y="165" width="0.2465%" height="15" fill="rgb(246,141,4)" fg:x="532" fg:w="3"/><text x="43.9641%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.7962%" y="149" width="0.1643%" height="15" fill="rgb(229,23,39)" fg:x="533" fg:w="2"/><text x="44.0462%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.2071%" y="165" width="0.0822%" height="15" fill="rgb(206,12,3)" fg:x="538" fg:w="1"/><text x="44.4571%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.23%)</title><rect x="43.1389%" y="213" width="1.2325%" height="15" fill="rgb(252,226,20)" fg:x="525" fg:w="15"/><text x="43.3889%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.07%)</title><rect x="43.3032%" y="197" width="1.0682%" height="15" fill="rgb(216,123,35)" fg:x="527" fg:w="13"/><text x="43.5532%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="43.9606%" y="181" width="0.4108%" height="15" fill="rgb(212,68,40)" fg:x="535" fg:w="5"/><text x="44.2106%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.2892%" y="165" width="0.0822%" height="15" fill="rgb(254,125,32)" fg:x="539" fg:w="1"/><text x="44.5392%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="44.3714%" y="213" width="0.0822%" height="15" fill="rgb(253,97,22)" fg:x="540" fg:w="1"/><text x="44.6214%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="44.3714%" y="197" width="0.0822%" height="15" fill="rgb(241,101,14)" fg:x="540" fg:w="1"/><text x="44.6214%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="44.3714%" y="181" width="0.0822%" height="15" fill="rgb(238,103,29)" fg:x="540" fg:w="1"/><text x="44.6214%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (112 samples, 9.20%)</title><rect x="44.4536%" y="213" width="9.2030%" height="15" fill="rgb(233,195,47)" fg:x="541" fg:w="112"/><text x="44.7036%" y="223.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (112 samples, 9.20%)</title><rect x="44.4536%" y="197" width="9.2030%" height="15" fill="rgb(246,218,30)" fg:x="541" fg:w="112"/><text x="44.7036%" y="207.50">regex_automat..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (112 samples, 9.20%)</title><rect x="44.4536%" y="181" width="9.2030%" height="15" fill="rgb(219,145,47)" fg:x="541" fg:w="112"/><text x="44.7036%" y="191.50">alloc::vec::V..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.41%)</title><rect x="53.6565%" y="213" width="0.4108%" height="15" fill="rgb(243,12,26)" fg:x="653" fg:w="5"/><text x="53.9065%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="54.0674%" y="213" width="0.0822%" height="15" fill="rgb(214,87,16)" fg:x="658" fg:w="1"/><text x="54.3174%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (189 samples, 15.53%)</title><rect x="39.2769%" y="309" width="15.5300%" height="15" fill="rgb(208,99,42)" fg:x="478" fg:w="189"/><text x="39.5269%" y="319.50">&lt;core::iter::adapters::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (188 samples, 15.45%)</title><rect x="39.3591%" y="293" width="15.4478%" height="15" fill="rgb(253,99,2)" fg:x="479" fg:w="188"/><text x="39.6091%" y="303.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (188 samples, 15.45%)</title><rect x="39.3591%" y="277" width="15.4478%" height="15" fill="rgb(220,168,23)" fg:x="479" fg:w="188"/><text x="39.6091%" y="287.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (187 samples, 15.37%)</title><rect x="39.4412%" y="261" width="15.3657%" height="15" fill="rgb(242,38,24)" fg:x="480" fg:w="187"/><text x="39.6912%" y="271.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (186 samples, 15.28%)</title><rect x="39.5234%" y="245" width="15.2835%" height="15" fill="rgb(225,182,9)" fg:x="481" fg:w="186"/><text x="39.7734%" y="255.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (186 samples, 15.28%)</title><rect x="39.5234%" y="229" width="15.2835%" height="15" fill="rgb(243,178,37)" fg:x="481" fg:w="186"/><text x="39.7734%" y="239.50">regex_automata::nfa::th..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (8 samples, 0.66%)</title><rect x="54.1495%" y="213" width="0.6574%" height="15" fill="rgb(232,139,19)" fg:x="659" fg:w="8"/><text x="54.3995%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.66%)</title><rect x="54.1495%" y="197" width="0.6574%" height="15" fill="rgb(225,201,24)" fg:x="659" fg:w="8"/><text x="54.3995%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.58%)</title><rect x="54.2317%" y="181" width="0.5752%" height="15" fill="rgb(221,47,46)" fg:x="660" fg:w="7"/><text x="54.4817%" y="191.50"></text></g><g><title>__libc_malloc (5 samples, 0.41%)</title><rect x="54.3961%" y="165" width="0.4108%" height="15" fill="rgb(249,23,13)" fg:x="662" fg:w="5"/><text x="54.6461%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.9712%" y="293" width="0.0822%" height="15" fill="rgb(219,9,5)" fg:x="669" fg:w="1"/><text x="55.2212%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="55.0534%" y="293" width="0.0822%" height="15" fill="rgb(254,171,16)" fg:x="670" fg:w="1"/><text x="55.3034%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (12 samples, 0.99%)</title><rect x="55.1356%" y="293" width="0.9860%" height="15" fill="rgb(230,171,20)" fg:x="671" fg:w="12"/><text x="55.3856%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.33%)</title><rect x="55.7929%" y="277" width="0.3287%" height="15" fill="rgb(210,71,41)" fg:x="679" fg:w="4"/><text x="56.0429%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="55.7929%" y="261" width="0.3287%" height="15" fill="rgb(206,173,20)" fg:x="679" fg:w="4"/><text x="56.0429%" y="271.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="55.7929%" y="245" width="0.3287%" height="15" fill="rgb(233,88,34)" fg:x="679" fg:w="4"/><text x="56.0429%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (8 samples, 0.66%)</title><rect x="56.1216%" y="293" width="0.6574%" height="15" fill="rgb(223,209,46)" fg:x="683" fg:w="8"/><text x="56.3716%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.6968%" y="277" width="0.0822%" height="15" fill="rgb(250,43,18)" fg:x="690" fg:w="1"/><text x="56.9468%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6968%" y="261" width="0.0822%" height="15" fill="rgb(208,13,10)" fg:x="690" fg:w="1"/><text x="56.9468%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.6968%" y="245" width="0.0822%" height="15" fill="rgb(212,200,36)" fg:x="690" fg:w="1"/><text x="56.9468%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (26 samples, 2.14%)</title><rect x="54.8069%" y="309" width="2.1364%" height="15" fill="rgb(225,90,30)" fg:x="667" fg:w="26"/><text x="55.0569%" y="319.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="56.7790%" y="293" width="0.1643%" height="15" fill="rgb(236,182,39)" fg:x="691" fg:w="2"/><text x="57.0290%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (292 samples, 23.99%)</title><rect x="33.0320%" y="341" width="23.9934%" height="15" fill="rgb(212,144,35)" fg:x="402" fg:w="292"/><text x="33.2820%" y="351.50">regex_automata::meta::strategy::new</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (217 samples, 17.83%)</title><rect x="39.1947%" y="325" width="17.8307%" height="15" fill="rgb(228,63,44)" fg:x="477" fg:w="217"/><text x="39.4447%" y="335.50">regex_automata::nfa::thompso..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="56.9433%" y="309" width="0.0822%" height="15" fill="rgb(228,109,6)" fg:x="693" fg:w="1"/><text x="57.1933%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="57.0255%" y="309" width="0.0822%" height="15" fill="rgb(238,117,24)" fg:x="694" fg:w="1"/><text x="57.2755%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="57.0255%" y="341" width="0.3287%" height="15" fill="rgb(242,26,26)" fg:x="694" fg:w="4"/><text x="57.2755%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="57.0255%" y="325" width="0.3287%" height="15" fill="rgb(221,92,48)" fg:x="694" fg:w="4"/><text x="57.2755%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.25%)</title><rect x="57.1076%" y="309" width="0.2465%" height="15" fill="rgb(209,209,32)" fg:x="695" fg:w="3"/><text x="57.3576%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.2720%" y="293" width="0.0822%" height="15" fill="rgb(221,70,22)" fg:x="697" fg:w="1"/><text x="57.5220%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.2720%" y="277" width="0.0822%" height="15" fill="rgb(248,145,5)" fg:x="697" fg:w="1"/><text x="57.5220%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.2720%" y="261" width="0.0822%" height="15" fill="rgb(226,116,26)" fg:x="697" fg:w="1"/><text x="57.5220%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.3541%" y="277" width="0.0822%" height="15" fill="rgb(244,5,17)" fg:x="698" fg:w="1"/><text x="57.6041%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.3541%" y="261" width="0.0822%" height="15" fill="rgb(252,159,33)" fg:x="698" fg:w="1"/><text x="57.6041%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.3541%" y="245" width="0.0822%" height="15" fill="rgb(206,71,0)" fg:x="698" fg:w="1"/><text x="57.6041%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="57.3541%" y="309" width="0.1643%" height="15" fill="rgb(233,118,54)" fg:x="698" fg:w="2"/><text x="57.6041%" y="319.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="57.3541%" y="293" width="0.1643%" height="15" fill="rgb(234,83,48)" fg:x="698" fg:w="2"/><text x="57.6041%" y="303.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="57.4363%" y="277" width="0.0822%" height="15" fill="rgb(228,3,54)" fg:x="699" fg:w="1"/><text x="57.6863%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.4363%" y="261" width="0.0822%" height="15" fill="rgb(226,155,13)" fg:x="699" fg:w="1"/><text x="57.6863%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="57.6828%" y="293" width="0.0822%" height="15" fill="rgb(241,28,37)" fg:x="702" fg:w="1"/><text x="57.9328%" y="303.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="57.6828%" y="277" width="0.0822%" height="15" fill="rgb(233,93,10)" fg:x="702" fg:w="1"/><text x="57.9328%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="57.6828%" y="261" width="0.0822%" height="15" fill="rgb(225,113,19)" fg:x="702" fg:w="1"/><text x="57.9328%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (315 samples, 25.88%)</title><rect x="31.9638%" y="357" width="25.8833%" height="15" fill="rgb(241,2,18)" fg:x="389" fg:w="315"/><text x="32.2138%" y="367.50">regex_automata::meta::regex::Builder::bui..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.49%)</title><rect x="57.3541%" y="341" width="0.4930%" height="15" fill="rgb(228,207,21)" fg:x="698" fg:w="6"/><text x="57.6041%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.49%)</title><rect x="57.3541%" y="325" width="0.4930%" height="15" fill="rgb(213,211,35)" fg:x="698" fg:w="6"/><text x="57.6041%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.33%)</title><rect x="57.5185%" y="309" width="0.3287%" height="15" fill="rgb(209,83,10)" fg:x="700" fg:w="4"/><text x="57.7685%" y="319.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="57.7650%" y="293" width="0.0822%" height="15" fill="rgb(209,164,1)" fg:x="703" fg:w="1"/><text x="58.0150%" y="303.50"></text></g><g><title>indefinite::rules::number::Number::check (348 samples, 28.59%)</title><rect x="29.3344%" y="405" width="28.5949%" height="15" fill="rgb(213,184,43)" fg:x="357" fg:w="348"/><text x="29.5844%" y="415.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (318 samples, 26.13%)</title><rect x="31.7995%" y="389" width="26.1298%" height="15" fill="rgb(231,61,34)" fg:x="387" fg:w="318"/><text x="32.0495%" y="399.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (317 samples, 26.05%)</title><rect x="31.8817%" y="373" width="26.0477%" height="15" fill="rgb(235,75,3)" fg:x="388" fg:w="317"/><text x="32.1317%" y="383.50">regex::builders::Builder::build_one_string</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="57.8472%" y="357" width="0.0822%" height="15" fill="rgb(220,106,47)" fg:x="704" fg:w="1"/><text x="58.0972%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="57.9293%" y="389" width="0.0822%" height="15" fill="rgb(210,196,33)" fg:x="705" fg:w="1"/><text x="58.1793%" y="399.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="58.0937%" y="341" width="0.0822%" height="15" fill="rgb(229,154,42)" fg:x="707" fg:w="1"/><text x="58.3437%" y="351.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="58.0937%" y="325" width="0.0822%" height="15" fill="rgb(228,114,26)" fg:x="707" fg:w="1"/><text x="58.3437%" y="335.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="58.0937%" y="309" width="0.0822%" height="15" fill="rgb(208,144,1)" fg:x="707" fg:w="1"/><text x="58.3437%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (4 samples, 0.33%)</title><rect x="58.0115%" y="373" width="0.3287%" height="15" fill="rgb(239,112,37)" fg:x="706" fg:w="4"/><text x="58.2615%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.33%)</title><rect x="58.0115%" y="357" width="0.3287%" height="15" fill="rgb(210,96,50)" fg:x="706" fg:w="4"/><text x="58.2615%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="58.1758%" y="341" width="0.1643%" height="15" fill="rgb(222,178,2)" fg:x="708" fg:w="2"/><text x="58.4258%" y="351.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="58.2580%" y="325" width="0.0822%" height="15" fill="rgb(226,74,18)" fg:x="709" fg:w="1"/><text x="58.5080%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.2580%" y="309" width="0.0822%" height="15" fill="rgb(225,67,54)" fg:x="709" fg:w="1"/><text x="58.5080%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.2580%" y="293" width="0.0822%" height="15" fill="rgb(251,92,32)" fg:x="709" fg:w="1"/><text x="58.5080%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.2580%" y="277" width="0.0822%" height="15" fill="rgb(228,149,22)" fg:x="709" fg:w="1"/><text x="58.5080%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.3402%" y="325" width="0.1643%" height="15" fill="rgb(243,54,13)" fg:x="710" fg:w="2"/><text x="58.5902%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="58.3402%" y="309" width="0.1643%" height="15" fill="rgb(243,180,28)" fg:x="710" fg:w="2"/><text x="58.5902%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="58.3402%" y="341" width="0.2465%" height="15" fill="rgb(208,167,24)" fg:x="710" fg:w="3"/><text x="58.5902%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="58.5045%" y="325" width="0.0822%" height="15" fill="rgb(245,73,45)" fg:x="712" fg:w="1"/><text x="58.7545%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="58.3402%" y="373" width="0.3287%" height="15" fill="rgb(237,203,48)" fg:x="710" fg:w="4"/><text x="58.5902%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="58.3402%" y="357" width="0.3287%" height="15" fill="rgb(211,197,16)" fg:x="710" fg:w="4"/><text x="58.5902%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="58.5867%" y="341" width="0.0822%" height="15" fill="rgb(243,99,51)" fg:x="713" fg:w="1"/><text x="58.8367%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.5867%" y="325" width="0.0822%" height="15" fill="rgb(215,123,29)" fg:x="713" fg:w="1"/><text x="58.8367%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.8332%" y="325" width="0.0822%" height="15" fill="rgb(239,186,37)" fg:x="716" fg:w="1"/><text x="59.0832%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="58.9154%" y="293" width="0.0822%" height="15" fill="rgb(252,136,39)" fg:x="717" fg:w="1"/><text x="59.1654%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="58.9154%" y="325" width="0.1643%" height="15" fill="rgb(223,213,32)" fg:x="717" fg:w="2"/><text x="59.1654%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="58.9154%" y="309" width="0.1643%" height="15" fill="rgb(233,115,5)" fg:x="717" fg:w="2"/><text x="59.1654%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="58.9975%" y="293" width="0.0822%" height="15" fill="rgb(207,226,44)" fg:x="718" fg:w="1"/><text x="59.2475%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="59.0797%" y="325" width="0.0822%" height="15" fill="rgb(208,126,0)" fg:x="719" fg:w="1"/><text x="59.3297%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.0797%" y="309" width="0.0822%" height="15" fill="rgb(244,66,21)" fg:x="719" fg:w="1"/><text x="59.3297%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.1619%" y="309" width="0.0822%" height="15" fill="rgb(222,97,12)" fg:x="720" fg:w="1"/><text x="59.4119%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.1619%" y="293" width="0.0822%" height="15" fill="rgb(219,213,19)" fg:x="720" fg:w="1"/><text x="59.4119%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.1619%" y="277" width="0.0822%" height="15" fill="rgb(252,169,30)" fg:x="720" fg:w="1"/><text x="59.4119%" y="287.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (2 samples, 0.16%)</title><rect x="59.1619%" y="325" width="0.1643%" height="15" fill="rgb(206,32,51)" fg:x="720" fg:w="2"/><text x="59.4119%" y="335.50"></text></g><g><title>regex_syntax::hir::Properties::union (1 samples, 0.08%)</title><rect x="59.2440%" y="309" width="0.0822%" height="15" fill="rgb(250,172,42)" fg:x="721" fg:w="1"/><text x="59.4940%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="59.2440%" y="293" width="0.0822%" height="15" fill="rgb(209,34,43)" fg:x="721" fg:w="1"/><text x="59.4940%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4906%" y="309" width="0.0822%" height="15" fill="rgb(223,11,35)" fg:x="724" fg:w="1"/><text x="59.7406%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="59.5727%" y="309" width="0.0822%" height="15" fill="rgb(251,219,26)" fg:x="725" fg:w="1"/><text x="59.8227%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="59.5727%" y="293" width="0.0822%" height="15" fill="rgb(231,119,3)" fg:x="725" fg:w="1"/><text x="59.8227%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5727%" y="277" width="0.0822%" height="15" fill="rgb(216,97,11)" fg:x="725" fg:w="1"/><text x="59.8227%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.41%)</title><rect x="59.6549%" y="309" width="0.4108%" height="15" fill="rgb(223,59,9)" fg:x="726" fg:w="5"/><text x="59.9049%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="59.6549%" y="293" width="0.4108%" height="15" fill="rgb(233,93,31)" fg:x="726" fg:w="5"/><text x="59.9049%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="60.0657%" y="309" width="0.1643%" height="15" fill="rgb(239,81,33)" fg:x="731" fg:w="2"/><text x="60.3157%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="60.2301%" y="293" width="0.1643%" height="15" fill="rgb(213,120,34)" fg:x="733" fg:w="2"/><text x="60.4801%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (2 samples, 0.16%)</title><rect x="60.2301%" y="277" width="0.1643%" height="15" fill="rgb(243,49,53)" fg:x="733" fg:w="2"/><text x="60.4801%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="60.2301%" y="261" width="0.1643%" height="15" fill="rgb(247,216,33)" fg:x="733" fg:w="2"/><text x="60.4801%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="60.2301%" y="245" width="0.1643%" height="15" fill="rgb(226,26,14)" fg:x="733" fg:w="2"/><text x="60.4801%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.33%)</title><rect x="60.4766%" y="277" width="0.3287%" height="15" fill="rgb(215,49,53)" fg:x="736" fg:w="4"/><text x="60.7266%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.6409%" y="261" width="0.1643%" height="15" fill="rgb(245,162,40)" fg:x="738" fg:w="2"/><text x="60.8909%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.6409%" y="245" width="0.1643%" height="15" fill="rgb(229,68,17)" fg:x="738" fg:w="2"/><text x="60.8909%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.7231%" y="229" width="0.0822%" height="15" fill="rgb(213,182,10)" fg:x="739" fg:w="1"/><text x="60.9731%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (14 samples, 1.15%)</title><rect x="60.2301%" y="309" width="1.1504%" height="15" fill="rgb(245,125,30)" fg:x="733" fg:w="14"/><text x="60.4801%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.99%)</title><rect x="60.3944%" y="293" width="0.9860%" height="15" fill="rgb(232,202,2)" fg:x="735" fg:w="12"/><text x="60.6444%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.58%)</title><rect x="60.8053%" y="277" width="0.5752%" height="15" fill="rgb(237,140,51)" fg:x="740" fg:w="7"/><text x="61.0553%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.3804%" y="309" width="0.0822%" height="15" fill="rgb(236,157,25)" fg:x="747" fg:w="1"/><text x="61.6304%" y="319.50"></text></g><g><title>regex_automata::meta::strategy::new (27 samples, 2.22%)</title><rect x="59.3262%" y="325" width="2.2186%" height="15" fill="rgb(219,209,0)" fg:x="722" fg:w="27"/><text x="59.5762%" y="335.50">r..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="61.4626%" y="309" width="0.0822%" height="15" fill="rgb(240,116,54)" fg:x="748" fg:w="1"/><text x="61.7126%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="61.4626%" y="293" width="0.0822%" height="15" fill="rgb(216,10,36)" fg:x="748" fg:w="1"/><text x="61.7126%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="61.7913%" y="277" width="0.0822%" height="15" fill="rgb(222,72,44)" fg:x="752" fg:w="1"/><text x="62.0413%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="61.8735%" y="277" width="0.0822%" height="15" fill="rgb(232,159,9)" fg:x="753" fg:w="1"/><text x="62.1235%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="61.8735%" y="261" width="0.0822%" height="15" fill="rgb(210,39,32)" fg:x="753" fg:w="1"/><text x="62.1235%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.33%)</title><rect x="61.7913%" y="293" width="0.3287%" height="15" fill="rgb(216,194,45)" fg:x="752" fg:w="4"/><text x="62.0413%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="61.9556%" y="277" width="0.1643%" height="15" fill="rgb(218,18,35)" fg:x="754" fg:w="2"/><text x="62.2056%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.9556%" y="261" width="0.1643%" height="15" fill="rgb(207,83,51)" fg:x="754" fg:w="2"/><text x="62.2056%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.9556%" y="245" width="0.1643%" height="15" fill="rgb(225,63,43)" fg:x="754" fg:w="2"/><text x="62.2056%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.9556%" y="229" width="0.1643%" height="15" fill="rgb(207,57,36)" fg:x="754" fg:w="2"/><text x="62.2056%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.74%)</title><rect x="61.5448%" y="325" width="0.7395%" height="15" fill="rgb(216,99,33)" fg:x="749" fg:w="9"/><text x="61.7948%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.74%)</title><rect x="61.5448%" y="309" width="0.7395%" height="15" fill="rgb(225,42,16)" fg:x="749" fg:w="9"/><text x="61.7948%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="62.1200%" y="293" width="0.1643%" height="15" fill="rgb(220,201,45)" fg:x="756" fg:w="2"/><text x="62.3700%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="62.4486%" y="261" width="0.2465%" height="15" fill="rgb(225,33,4)" fg:x="760" fg:w="3"/><text x="62.6986%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="62.4486%" y="245" width="0.2465%" height="15" fill="rgb(224,33,50)" fg:x="760" fg:w="3"/><text x="62.6986%" y="255.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="62.4486%" y="229" width="0.2465%" height="15" fill="rgb(246,198,51)" fg:x="760" fg:w="3"/><text x="62.6986%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="62.6952%" y="261" width="0.0822%" height="15" fill="rgb(205,22,4)" fg:x="763" fg:w="1"/><text x="62.9452%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (7 samples, 0.58%)</title><rect x="62.2843%" y="293" width="0.5752%" height="15" fill="rgb(206,3,8)" fg:x="758" fg:w="7"/><text x="62.5343%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (7 samples, 0.58%)</title><rect x="62.2843%" y="277" width="0.5752%" height="15" fill="rgb(251,23,15)" fg:x="758" fg:w="7"/><text x="62.5343%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="62.7773%" y="261" width="0.0822%" height="15" fill="rgb(252,88,28)" fg:x="764" fg:w="1"/><text x="63.0273%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.25%)</title><rect x="62.8595%" y="293" width="0.2465%" height="15" fill="rgb(212,127,14)" fg:x="765" fg:w="3"/><text x="63.1095%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="63.0238%" y="277" width="0.0822%" height="15" fill="rgb(247,145,37)" fg:x="767" fg:w="1"/><text x="63.2738%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="63.0238%" y="261" width="0.0822%" height="15" fill="rgb(209,117,53)" fg:x="767" fg:w="1"/><text x="63.2738%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (55 samples, 4.52%)</title><rect x="58.6689%" y="373" width="4.5193%" height="15" fill="rgb(212,90,42)" fg:x="714" fg:w="55"/><text x="58.9189%" y="383.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (53 samples, 4.35%)</title><rect x="58.8332%" y="357" width="4.3550%" height="15" fill="rgb(218,164,37)" fg:x="716" fg:w="53"/><text x="59.0832%" y="367.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (53 samples, 4.35%)</title><rect x="58.8332%" y="341" width="4.3550%" height="15" fill="rgb(246,65,34)" fg:x="716" fg:w="53"/><text x="59.0832%" y="351.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (11 samples, 0.90%)</title><rect x="62.2843%" y="325" width="0.9039%" height="15" fill="rgb(231,100,33)" fg:x="758" fg:w="11"/><text x="62.5343%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (11 samples, 0.90%)</title><rect x="62.2843%" y="309" width="0.9039%" height="15" fill="rgb(228,126,14)" fg:x="758" fg:w="11"/><text x="62.5343%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.1060%" y="293" width="0.0822%" height="15" fill="rgb(215,173,21)" fg:x="768" fg:w="1"/><text x="63.3560%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.1060%" y="277" width="0.0822%" height="15" fill="rgb(210,6,40)" fg:x="768" fg:w="1"/><text x="63.3560%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1882%" y="309" width="0.0822%" height="15" fill="rgb(212,48,18)" fg:x="769" fg:w="1"/><text x="63.4382%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="63.4347%" y="293" width="0.1643%" height="15" fill="rgb(230,214,11)" fg:x="772" fg:w="2"/><text x="63.6847%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="63.4347%" y="277" width="0.1643%" height="15" fill="rgb(254,105,39)" fg:x="772" fg:w="2"/><text x="63.6847%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="63.5168%" y="261" width="0.0822%" height="15" fill="rgb(245,158,5)" fg:x="773" fg:w="1"/><text x="63.7668%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.5990%" y="293" width="0.0822%" height="15" fill="rgb(249,208,11)" fg:x="774" fg:w="1"/><text x="63.8490%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="63.5990%" y="277" width="0.0822%" height="15" fill="rgb(210,39,28)" fg:x="774" fg:w="1"/><text x="63.8490%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="63.2703%" y="309" width="0.4930%" height="15" fill="rgb(211,56,53)" fg:x="770" fg:w="6"/><text x="63.5203%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="63.6812%" y="293" width="0.0822%" height="15" fill="rgb(226,201,30)" fg:x="775" fg:w="1"/><text x="63.9312%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.66%)</title><rect x="63.1882%" y="325" width="0.6574%" height="15" fill="rgb(239,101,34)" fg:x="769" fg:w="8"/><text x="63.4382%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="63.7634%" y="309" width="0.0822%" height="15" fill="rgb(226,209,5)" fg:x="776" fg:w="1"/><text x="64.0134%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="63.7634%" y="293" width="0.0822%" height="15" fill="rgb(250,105,47)" fg:x="776" fg:w="1"/><text x="64.0134%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="63.7634%" y="277" width="0.0822%" height="15" fill="rgb(230,72,3)" fg:x="776" fg:w="1"/><text x="64.0134%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7634%" y="261" width="0.0822%" height="15" fill="rgb(232,218,39)" fg:x="776" fg:w="1"/><text x="64.0134%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (682 samples, 56.04%)</title><rect x="7.9704%" y="485" width="56.0394%" height="15" fill="rgb(248,166,6)" fg:x="97" fg:w="682"/><text x="8.2204%" y="495.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEnti..</text></g><g><title>plugins_core::looking::model::qualify_name (679 samples, 55.79%)</title><rect x="8.2169%" y="469" width="55.7929%" height="15" fill="rgb(247,89,20)" fg:x="100" fg:w="679"/><text x="8.4669%" y="479.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (679 samples, 55.79%)</title><rect x="8.2169%" y="453" width="55.7929%" height="15" fill="rgb(248,130,54)" fg:x="100" fg:w="679"/><text x="8.4669%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (679 samples, 55.79%)</title><rect x="8.2169%" y="437" width="55.7929%" height="15" fill="rgb(234,196,4)" fg:x="100" fg:w="679"/><text x="8.4669%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (678 samples, 55.71%)</title><rect x="8.2991%" y="421" width="55.7108%" height="15" fill="rgb(250,143,31)" fg:x="101" fg:w="678"/><text x="8.5491%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (74 samples, 6.08%)</title><rect x="57.9293%" y="405" width="6.0805%" height="15" fill="rgb(211,110,34)" fg:x="705" fg:w="74"/><text x="58.1793%" y="415.50">indefini..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (73 samples, 6.00%)</title><rect x="58.0115%" y="389" width="5.9984%" height="15" fill="rgb(215,124,48)" fg:x="706" fg:w="73"/><text x="58.2615%" y="399.50">indefini..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.82%)</title><rect x="63.1882%" y="373" width="0.8217%" height="15" fill="rgb(216,46,13)" fg:x="769" fg:w="10"/><text x="63.4382%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.82%)</title><rect x="63.1882%" y="357" width="0.8217%" height="15" fill="rgb(205,184,25)" fg:x="769" fg:w="10"/><text x="63.4382%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.82%)</title><rect x="63.1882%" y="341" width="0.8217%" height="15" fill="rgb(228,1,10)" fg:x="769" fg:w="10"/><text x="63.4382%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="63.8455%" y="325" width="0.1643%" height="15" fill="rgb(213,116,27)" fg:x="777" fg:w="2"/><text x="64.0955%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="63.9277%" y="309" width="0.0822%" height="15" fill="rgb(241,95,50)" fg:x="778" fg:w="1"/><text x="64.1777%" y="319.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="64.0099%" y="485" width="0.0822%" height="15" fill="rgb(238,48,32)" fg:x="779" fg:w="1"/><text x="64.2599%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="64.0099%" y="469" width="0.0822%" height="15" fill="rgb(235,113,49)" fg:x="779" fg:w="1"/><text x="64.2599%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="64.0099%" y="453" width="0.0822%" height="15" fill="rgb(205,127,43)" fg:x="779" fg:w="1"/><text x="64.2599%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.0099%" y="437" width="0.0822%" height="15" fill="rgb(250,162,2)" fg:x="779" fg:w="1"/><text x="64.2599%" y="447.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="64.0099%" y="421" width="0.0822%" height="15" fill="rgb(220,13,41)" fg:x="779" fg:w="1"/><text x="64.2599%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="64.0099%" y="405" width="0.0822%" height="15" fill="rgb(249,221,25)" fg:x="779" fg:w="1"/><text x="64.2599%" y="415.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="64.0099%" y="389" width="0.0822%" height="15" fill="rgb(215,208,19)" fg:x="779" fg:w="1"/><text x="64.2599%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="64.0099%" y="373" width="0.0822%" height="15" fill="rgb(236,175,2)" fg:x="779" fg:w="1"/><text x="64.2599%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="64.0099%" y="357" width="0.0822%" height="15" fill="rgb(241,52,2)" fg:x="779" fg:w="1"/><text x="64.2599%" y="367.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="64.0099%" y="341" width="0.0822%" height="15" fill="rgb(248,140,14)" fg:x="779" fg:w="1"/><text x="64.2599%" y="351.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="64.0099%" y="325" width="0.0822%" height="15" fill="rgb(253,22,42)" fg:x="779" fg:w="1"/><text x="64.2599%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="64.0920%" y="453" width="0.1643%" height="15" fill="rgb(234,61,47)" fg:x="780" fg:w="2"/><text x="64.3420%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="64.1742%" y="437" width="0.0822%" height="15" fill="rgb(208,226,15)" fg:x="781" fg:w="1"/><text x="64.4242%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.1742%" y="421" width="0.0822%" height="15" fill="rgb(217,221,4)" fg:x="781" fg:w="1"/><text x="64.4242%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.3385%" y="421" width="0.0822%" height="15" fill="rgb(212,174,34)" fg:x="783" fg:w="1"/><text x="64.5885%" y="431.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (691 samples, 56.78%)</title><rect x="7.7239%" y="517" width="56.7790%" height="15" fill="rgb(253,83,4)" fg:x="94" fg:w="691"/><text x="7.9739%" y="527.50">&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (688 samples, 56.53%)</title><rect x="7.9704%" y="501" width="56.5325%" height="15" fill="rgb(250,195,49)" fg:x="97" fg:w="688"/><text x="8.2204%" y="511.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.41%)</title><rect x="64.0920%" y="485" width="0.4108%" height="15" fill="rgb(241,192,25)" fg:x="780" fg:w="5"/><text x="64.3420%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (5 samples, 0.41%)</title><rect x="64.0920%" y="469" width="0.4108%" height="15" fill="rgb(208,124,10)" fg:x="780" fg:w="5"/><text x="64.3420%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="64.2564%" y="453" width="0.2465%" height="15" fill="rgb(222,33,0)" fg:x="782" fg:w="3"/><text x="64.5064%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="64.2564%" y="437" width="0.2465%" height="15" fill="rgb(234,209,28)" fg:x="782" fg:w="3"/><text x="64.5064%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.4207%" y="421" width="0.0822%" height="15" fill="rgb(224,11,23)" fg:x="784" fg:w="1"/><text x="64.6707%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.4207%" y="405" width="0.0822%" height="15" fill="rgb(232,99,1)" fg:x="784" fg:w="1"/><text x="64.6707%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.4207%" y="389" width="0.0822%" height="15" fill="rgb(237,95,45)" fg:x="784" fg:w="1"/><text x="64.6707%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="64.5029%" y="469" width="0.0822%" height="15" fill="rgb(208,109,11)" fg:x="785" fg:w="1"/><text x="64.7529%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5029%" y="453" width="0.0822%" height="15" fill="rgb(216,190,48)" fg:x="785" fg:w="1"/><text x="64.7529%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="64.5850%" y="453" width="0.0822%" height="15" fill="rgb(251,171,36)" fg:x="786" fg:w="1"/><text x="64.8350%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="64.5850%" y="437" width="0.0822%" height="15" fill="rgb(230,62,22)" fg:x="786" fg:w="1"/><text x="64.8350%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.5850%" y="421" width="0.0822%" height="15" fill="rgb(225,114,35)" fg:x="786" fg:w="1"/><text x="64.8350%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5850%" y="405" width="0.0822%" height="15" fill="rgb(215,118,42)" fg:x="786" fg:w="1"/><text x="64.8350%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.5850%" y="389" width="0.0822%" height="15" fill="rgb(243,119,21)" fg:x="786" fg:w="1"/><text x="64.8350%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5850%" y="373" width="0.0822%" height="15" fill="rgb(252,177,53)" fg:x="786" fg:w="1"/><text x="64.8350%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.5850%" y="357" width="0.0822%" height="15" fill="rgb(237,209,29)" fg:x="786" fg:w="1"/><text x="64.8350%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.5850%" y="341" width="0.0822%" height="15" fill="rgb(212,65,23)" fg:x="786" fg:w="1"/><text x="64.8350%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.5850%" y="325" width="0.0822%" height="15" fill="rgb(230,222,46)" fg:x="786" fg:w="1"/><text x="64.8350%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="64.5850%" y="309" width="0.0822%" height="15" fill="rgb(215,135,32)" fg:x="786" fg:w="1"/><text x="64.8350%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="64.5850%" y="293" width="0.0822%" height="15" fill="rgb(246,101,22)" fg:x="786" fg:w="1"/><text x="64.8350%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.6672%" y="373" width="0.0822%" height="15" fill="rgb(206,107,13)" fg:x="787" fg:w="1"/><text x="64.9172%" y="383.50"></text></g><g><title>engine::internal::Entities::prepare_entity (5 samples, 0.41%)</title><rect x="64.5029%" y="485" width="0.4108%" height="15" fill="rgb(250,100,44)" fg:x="785" fg:w="5"/><text x="64.7529%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="64.5850%" y="469" width="0.3287%" height="15" fill="rgb(231,147,38)" fg:x="786" fg:w="4"/><text x="64.8350%" y="479.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="64.6672%" y="453" width="0.2465%" height="15" fill="rgb(229,8,40)" fg:x="787" fg:w="3"/><text x="64.9172%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.25%)</title><rect x="64.6672%" y="437" width="0.2465%" height="15" fill="rgb(221,135,30)" fg:x="787" fg:w="3"/><text x="64.9172%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="64.6672%" y="421" width="0.2465%" height="15" fill="rgb(249,193,18)" fg:x="787" fg:w="3"/><text x="64.9172%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.25%)</title><rect x="64.6672%" y="405" width="0.2465%" height="15" fill="rgb(209,133,39)" fg:x="787" fg:w="3"/><text x="64.9172%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="64.6672%" y="389" width="0.2465%" height="15" fill="rgb(232,100,14)" fg:x="787" fg:w="3"/><text x="64.9172%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.7494%" y="373" width="0.1643%" height="15" fill="rgb(224,185,1)" fg:x="788" fg:w="2"/><text x="64.9994%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8316%" y="357" width="0.0822%" height="15" fill="rgb(223,139,8)" fg:x="789" fg:w="1"/><text x="65.0816%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.8316%" y="341" width="0.0822%" height="15" fill="rgb(232,213,38)" fg:x="789" fg:w="1"/><text x="65.0816%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.8316%" y="325" width="0.0822%" height="15" fill="rgb(207,94,22)" fg:x="789" fg:w="1"/><text x="65.0816%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (6 samples, 0.49%)</title><rect x="64.5029%" y="501" width="0.4930%" height="15" fill="rgb(219,183,54)" fg:x="785" fg:w="6"/><text x="64.7529%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="64.9137%" y="485" width="0.0822%" height="15" fill="rgb(216,185,54)" fg:x="790" fg:w="1"/><text x="65.1637%" y="495.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="64.9137%" y="469" width="0.0822%" height="15" fill="rgb(254,217,39)" fg:x="790" fg:w="1"/><text x="65.1637%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="64.9137%" y="453" width="0.0822%" height="15" fill="rgb(240,178,23)" fg:x="790" fg:w="1"/><text x="65.1637%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="64.9137%" y="437" width="0.0822%" height="15" fill="rgb(218,11,47)" fg:x="790" fg:w="1"/><text x="65.1637%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="64.9137%" y="421" width="0.0822%" height="15" fill="rgb(218,51,51)" fg:x="790" fg:w="1"/><text x="65.1637%" y="431.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="64.9137%" y="405" width="0.0822%" height="15" fill="rgb(238,126,27)" fg:x="790" fg:w="1"/><text x="65.1637%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="64.9137%" y="389" width="0.0822%" height="15" fill="rgb(249,202,22)" fg:x="790" fg:w="1"/><text x="65.1637%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="64.9959%" y="437" width="0.0822%" height="15" fill="rgb(254,195,49)" fg:x="791" fg:w="1"/><text x="65.2459%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityRef as core::convert::From&lt;&amp;kernel::model::EntityPtr&gt;&gt;::from (1 samples, 0.08%)</title><rect x="64.9959%" y="421" width="0.0822%" height="15" fill="rgb(208,123,14)" fg:x="791" fg:w="1"/><text x="65.2459%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.0781%" y="405" width="0.0822%" height="15" fill="rgb(224,200,8)" fg:x="792" fg:w="1"/><text x="65.3281%" y="415.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living (3 samples, 0.25%)</title><rect x="64.9959%" y="501" width="0.2465%" height="15" fill="rgb(217,61,36)" fg:x="791" fg:w="3"/><text x="65.2459%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.25%)</title><rect x="64.9959%" y="485" width="0.2465%" height="15" fill="rgb(206,35,45)" fg:x="791" fg:w="3"/><text x="65.2459%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.25%)</title><rect x="64.9959%" y="469" width="0.2465%" height="15" fill="rgb(217,65,33)" fg:x="791" fg:w="3"/><text x="65.2459%" y="479.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.25%)</title><rect x="64.9959%" y="453" width="0.2465%" height="15" fill="rgb(222,158,48)" fg:x="791" fg:w="3"/><text x="65.2459%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.0781%" y="437" width="0.1643%" height="15" fill="rgb(254,2,54)" fg:x="792" fg:w="2"/><text x="65.3281%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.0781%" y="421" width="0.1643%" height="15" fill="rgb(250,143,38)" fg:x="792" fg:w="2"/><text x="65.3281%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.1602%" y="405" width="0.0822%" height="15" fill="rgb(248,25,0)" fg:x="793" fg:w="1"/><text x="65.4102%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.1602%" y="389" width="0.0822%" height="15" fill="rgb(206,152,27)" fg:x="793" fg:w="1"/><text x="65.4102%" y="399.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="65.2424%" y="469" width="0.0822%" height="15" fill="rgb(240,77,30)" fg:x="794" fg:w="1"/><text x="65.4924%" y="479.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="65.2424%" y="453" width="0.0822%" height="15" fill="rgb(231,5,3)" fg:x="794" fg:w="1"/><text x="65.4924%" y="463.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2424%" y="437" width="0.0822%" height="15" fill="rgb(207,226,32)" fg:x="794" fg:w="1"/><text x="65.4924%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2424%" y="421" width="0.0822%" height="15" fill="rgb(222,207,47)" fg:x="794" fg:w="1"/><text x="65.4924%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2424%" y="405" width="0.0822%" height="15" fill="rgb(229,115,45)" fg:x="794" fg:w="1"/><text x="65.4924%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.2424%" y="389" width="0.0822%" height="15" fill="rgb(224,191,6)" fg:x="794" fg:w="1"/><text x="65.4924%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.2424%" y="373" width="0.0822%" height="15" fill="rgb(230,227,24)" fg:x="794" fg:w="1"/><text x="65.4924%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.2424%" y="357" width="0.0822%" height="15" fill="rgb(228,80,19)" fg:x="794" fg:w="1"/><text x="65.4924%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2424%" y="341" width="0.0822%" height="15" fill="rgb(247,229,0)" fg:x="794" fg:w="1"/><text x="65.4924%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2424%" y="325" width="0.0822%" height="15" fill="rgb(237,194,15)" fg:x="794" fg:w="1"/><text x="65.4924%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.2424%" y="309" width="0.0822%" height="15" fill="rgb(219,203,20)" fg:x="794" fg:w="1"/><text x="65.4924%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.2424%" y="293" width="0.0822%" height="15" fill="rgb(234,128,8)" fg:x="794" fg:w="1"/><text x="65.4924%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.2424%" y="277" width="0.0822%" height="15" fill="rgb(248,202,8)" fg:x="794" fg:w="1"/><text x="65.4924%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.2424%" y="261" width="0.0822%" height="15" fill="rgb(206,104,37)" fg:x="794" fg:w="1"/><text x="65.4924%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2424%" y="245" width="0.0822%" height="15" fill="rgb(223,8,27)" fg:x="794" fg:w="1"/><text x="65.4924%" y="255.50"></text></g><g><title>engine::session::Session::world (2 samples, 0.16%)</title><rect x="65.2424%" y="501" width="0.1643%" height="15" fill="rgb(216,217,28)" fg:x="794" fg:w="2"/><text x="65.4924%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="65.2424%" y="485" width="0.1643%" height="15" fill="rgb(249,199,1)" fg:x="794" fg:w="2"/><text x="65.4924%" y="495.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="65.3246%" y="469" width="0.0822%" height="15" fill="rgb(240,85,17)" fg:x="795" fg:w="1"/><text x="65.5746%" y="479.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="65.3246%" y="453" width="0.0822%" height="15" fill="rgb(206,108,45)" fg:x="795" fg:w="1"/><text x="65.5746%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.3246%" y="437" width="0.0822%" height="15" fill="rgb(245,210,41)" fg:x="795" fg:w="1"/><text x="65.5746%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.3246%" y="421" width="0.0822%" height="15" fill="rgb(206,13,37)" fg:x="795" fg:w="1"/><text x="65.5746%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.3246%" y="405" width="0.0822%" height="15" fill="rgb(250,61,18)" fg:x="795" fg:w="1"/><text x="65.5746%" y="415.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="65.3246%" y="389" width="0.0822%" height="15" fill="rgb(235,172,48)" fg:x="795" fg:w="1"/><text x="65.5746%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="65.3246%" y="373" width="0.0822%" height="15" fill="rgb(249,201,17)" fg:x="795" fg:w="1"/><text x="65.5746%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.3246%" y="357" width="0.0822%" height="15" fill="rgb(219,208,6)" fg:x="795" fg:w="1"/><text x="65.5746%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.3246%" y="341" width="0.0822%" height="15" fill="rgb(248,31,23)" fg:x="795" fg:w="1"/><text x="65.5746%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.3246%" y="325" width="0.0822%" height="15" fill="rgb(245,15,42)" fg:x="795" fg:w="1"/><text x="65.5746%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="65.3246%" y="309" width="0.0822%" height="15" fill="rgb(222,217,39)" fg:x="795" fg:w="1"/><text x="65.5746%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="65.3246%" y="293" width="0.0822%" height="15" fill="rgb(210,219,27)" fg:x="795" fg:w="1"/><text x="65.5746%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="65.3246%" y="277" width="0.0822%" height="15" fill="rgb(252,166,36)" fg:x="795" fg:w="1"/><text x="65.5746%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="65.3246%" y="261" width="0.0822%" height="15" fill="rgb(245,132,34)" fg:x="795" fg:w="1"/><text x="65.5746%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="65.3246%" y="245" width="0.0822%" height="15" fill="rgb(236,54,3)" fg:x="795" fg:w="1"/><text x="65.5746%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="65.3246%" y="229" width="0.0822%" height="15" fill="rgb(241,173,43)" fg:x="795" fg:w="1"/><text x="65.5746%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="65.3246%" y="213" width="0.0822%" height="15" fill="rgb(215,190,9)" fg:x="795" fg:w="1"/><text x="65.5746%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.3246%" y="197" width="0.0822%" height="15" fill="rgb(242,101,16)" fg:x="795" fg:w="1"/><text x="65.5746%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="65.3246%" y="181" width="0.0822%" height="15" fill="rgb(223,190,21)" fg:x="795" fg:w="1"/><text x="65.5746%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.3246%" y="165" width="0.0822%" height="15" fill="rgb(215,228,25)" fg:x="795" fg:w="1"/><text x="65.5746%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="65.3246%" y="149" width="0.0822%" height="15" fill="rgb(225,36,22)" fg:x="795" fg:w="1"/><text x="65.5746%" y="159.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="65.3246%" y="133" width="0.0822%" height="15" fill="rgb(251,106,46)" fg:x="795" fg:w="1"/><text x="65.5746%" y="143.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="65.3246%" y="117" width="0.0822%" height="15" fill="rgb(208,90,1)" fg:x="795" fg:w="1"/><text x="65.5746%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.3246%" y="101" width="0.0822%" height="15" fill="rgb(243,10,4)" fg:x="795" fg:w="1"/><text x="65.5746%" y="111.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.4067%" y="485" width="0.0822%" height="15" fill="rgb(212,137,27)" fg:x="796" fg:w="1"/><text x="65.6567%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.4889%" y="453" width="0.0822%" height="15" fill="rgb(231,220,49)" fg:x="797" fg:w="1"/><text x="65.7389%" y="463.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (14 samples, 1.15%)</title><rect x="64.5029%" y="517" width="1.1504%" height="15" fill="rgb(237,96,20)" fg:x="785" fg:w="14"/><text x="64.7529%" y="527.50"></text></g><g><title>engine::users::model::username_to_key (3 samples, 0.25%)</title><rect x="65.4067%" y="501" width="0.2465%" height="15" fill="rgb(239,229,30)" fg:x="796" fg:w="3"/><text x="65.6567%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="65.4889%" y="485" width="0.1643%" height="15" fill="rgb(219,65,33)" fg:x="797" fg:w="2"/><text x="65.7389%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="65.4889%" y="469" width="0.1643%" height="15" fill="rgb(243,134,7)" fg:x="797" fg:w="2"/><text x="65.7389%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.5711%" y="453" width="0.0822%" height="15" fill="rgb(216,177,54)" fg:x="798" fg:w="1"/><text x="65.8211%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.5711%" y="437" width="0.0822%" height="15" fill="rgb(211,160,20)" fg:x="798" fg:w="1"/><text x="65.8211%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.7354%" y="421" width="0.1643%" height="15" fill="rgb(239,85,39)" fg:x="800" fg:w="2"/><text x="65.9854%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.8176%" y="405" width="0.0822%" height="15" fill="rgb(232,125,22)" fg:x="801" fg:w="1"/><text x="66.0676%" y="415.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="65.8998%" y="421" width="0.1643%" height="15" fill="rgb(244,57,34)" fg:x="802" fg:w="2"/><text x="66.1498%" y="431.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="65.7354%" y="437" width="0.4108%" height="15" fill="rgb(214,203,32)" fg:x="800" fg:w="5"/><text x="65.9854%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="66.0641%" y="421" width="0.0822%" height="15" fill="rgb(207,58,43)" fg:x="804" fg:w="1"/><text x="66.3141%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.0641%" y="405" width="0.0822%" height="15" fill="rgb(215,193,15)" fg:x="804" fg:w="1"/><text x="66.3141%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.66%)</title><rect x="65.6532%" y="453" width="0.6574%" height="15" fill="rgb(232,15,44)" fg:x="799" fg:w="8"/><text x="65.9032%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.1463%" y="437" width="0.1643%" height="15" fill="rgb(212,3,48)" fg:x="805" fg:w="2"/><text x="66.3963%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (9 samples, 0.74%)</title><rect x="65.6532%" y="485" width="0.7395%" height="15" fill="rgb(218,128,7)" fg:x="799" fg:w="9"/><text x="65.9032%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.74%)</title><rect x="65.6532%" y="469" width="0.7395%" height="15" fill="rgb(226,216,39)" fg:x="799" fg:w="9"/><text x="65.9032%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3106%" y="453" width="0.0822%" height="15" fill="rgb(243,47,51)" fg:x="807" fg:w="1"/><text x="66.5606%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.3928%" y="453" width="0.0822%" height="15" fill="rgb(241,183,40)" fg:x="808" fg:w="1"/><text x="66.6428%" y="463.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="66.4749%" y="453" width="0.0822%" height="15" fill="rgb(231,217,32)" fg:x="809" fg:w="1"/><text x="66.7249%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="66.4749%" y="437" width="0.0822%" height="15" fill="rgb(229,61,38)" fg:x="809" fg:w="1"/><text x="66.7249%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.4749%" y="421" width="0.0822%" height="15" fill="rgb(225,210,5)" fg:x="809" fg:w="1"/><text x="66.7249%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.6393%" y="373" width="0.0822%" height="15" fill="rgb(231,79,45)" fg:x="811" fg:w="1"/><text x="66.8893%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="66.6393%" y="357" width="0.0822%" height="15" fill="rgb(224,100,7)" fg:x="811" fg:w="1"/><text x="66.8893%" y="367.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="66.6393%" y="341" width="0.0822%" height="15" fill="rgb(241,198,18)" fg:x="811" fg:w="1"/><text x="66.8893%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="66.6393%" y="325" width="0.0822%" height="15" fill="rgb(252,97,53)" fg:x="811" fg:w="1"/><text x="66.8893%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="66.6393%" y="309" width="0.0822%" height="15" fill="rgb(220,88,7)" fg:x="811" fg:w="1"/><text x="66.8893%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.6393%" y="293" width="0.0822%" height="15" fill="rgb(213,176,14)" fg:x="811" fg:w="1"/><text x="66.8893%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.6393%" y="277" width="0.0822%" height="15" fill="rgb(246,73,7)" fg:x="811" fg:w="1"/><text x="66.8893%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.6393%" y="261" width="0.0822%" height="15" fill="rgb(245,64,36)" fg:x="811" fg:w="1"/><text x="66.8893%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.6393%" y="245" width="0.0822%" height="15" fill="rgb(245,80,10)" fg:x="811" fg:w="1"/><text x="66.8893%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.6393%" y="229" width="0.0822%" height="15" fill="rgb(232,107,50)" fg:x="811" fg:w="1"/><text x="66.8893%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.6393%" y="213" width="0.0822%" height="15" fill="rgb(253,3,0)" fg:x="811" fg:w="1"/><text x="66.8893%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.6393%" y="197" width="0.0822%" height="15" fill="rgb(212,99,53)" fg:x="811" fg:w="1"/><text x="66.8893%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.6393%" y="181" width="0.0822%" height="15" fill="rgb(249,111,54)" fg:x="811" fg:w="1"/><text x="66.8893%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.6393%" y="165" width="0.0822%" height="15" fill="rgb(249,55,30)" fg:x="811" fg:w="1"/><text x="66.8893%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.6393%" y="149" width="0.0822%" height="15" fill="rgb(237,47,42)" fg:x="811" fg:w="1"/><text x="66.8893%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.6393%" y="133" width="0.0822%" height="15" fill="rgb(211,20,18)" fg:x="811" fg:w="1"/><text x="66.8893%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6393%" y="117" width="0.0822%" height="15" fill="rgb(231,203,46)" fg:x="811" fg:w="1"/><text x="66.8893%" y="127.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="66.8036%" y="357" width="0.0822%" height="15" fill="rgb(237,142,3)" fg:x="813" fg:w="1"/><text x="67.0536%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::EntityRef&gt; (1 samples, 0.08%)</title><rect x="66.8036%" y="341" width="0.0822%" height="15" fill="rgb(241,107,1)" fg:x="813" fg:w="1"/><text x="67.0536%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.8036%" y="325" width="0.0822%" height="15" fill="rgb(229,83,13)" fg:x="813" fg:w="1"/><text x="67.0536%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="67.1323%" y="277" width="0.0822%" height="15" fill="rgb(241,91,40)" fg:x="817" fg:w="1"/><text x="67.3823%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1323%" y="261" width="0.0822%" height="15" fill="rgb(225,3,45)" fg:x="817" fg:w="1"/><text x="67.3823%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1323%" y="245" width="0.0822%" height="15" fill="rgb(244,223,14)" fg:x="817" fg:w="1"/><text x="67.3823%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.1323%" y="229" width="0.0822%" height="15" fill="rgb(224,124,37)" fg:x="817" fg:w="1"/><text x="67.3823%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.1323%" y="213" width="0.0822%" height="15" fill="rgb(251,171,30)" fg:x="817" fg:w="1"/><text x="67.3823%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.1323%" y="197" width="0.0822%" height="15" fill="rgb(236,46,54)" fg:x="817" fg:w="1"/><text x="67.3823%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1323%" y="181" width="0.0822%" height="15" fill="rgb(245,213,5)" fg:x="817" fg:w="1"/><text x="67.3823%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1323%" y="165" width="0.0822%" height="15" fill="rgb(230,144,27)" fg:x="817" fg:w="1"/><text x="67.3823%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.1323%" y="149" width="0.0822%" height="15" fill="rgb(220,86,6)" fg:x="817" fg:w="1"/><text x="67.3823%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.1323%" y="133" width="0.0822%" height="15" fill="rgb(240,20,13)" fg:x="817" fg:w="1"/><text x="67.3823%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.1323%" y="117" width="0.0822%" height="15" fill="rgb(217,89,34)" fg:x="817" fg:w="1"/><text x="67.3823%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.1323%" y="101" width="0.0822%" height="15" fill="rgb(229,13,5)" fg:x="817" fg:w="1"/><text x="67.3823%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1323%" y="85" width="0.0822%" height="15" fill="rgb(244,67,35)" fg:x="817" fg:w="1"/><text x="67.3823%" y="95.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.66%)</title><rect x="66.6393%" y="389" width="0.6574%" height="15" fill="rgb(221,40,2)" fg:x="811" fg:w="8"/><text x="66.8893%" y="399.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (7 samples, 0.58%)</title><rect x="66.7214%" y="373" width="0.5752%" height="15" fill="rgb(237,157,21)" fg:x="812" fg:w="7"/><text x="66.9714%" y="383.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (5 samples, 0.41%)</title><rect x="66.8858%" y="357" width="0.4108%" height="15" fill="rgb(222,94,11)" fg:x="814" fg:w="5"/><text x="67.1358%" y="367.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (5 samples, 0.41%)</title><rect x="66.8858%" y="341" width="0.4108%" height="15" fill="rgb(249,113,6)" fg:x="814" fg:w="5"/><text x="67.1358%" y="351.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="67.1323%" y="325" width="0.1643%" height="15" fill="rgb(238,137,36)" fg:x="817" fg:w="2"/><text x="67.3823%" y="335.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="67.1323%" y="309" width="0.1643%" height="15" fill="rgb(210,102,26)" fg:x="817" fg:w="2"/><text x="67.3823%" y="319.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="67.1323%" y="293" width="0.1643%" height="15" fill="rgb(218,30,30)" fg:x="817" fg:w="2"/><text x="67.3823%" y="303.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="67.2145%" y="277" width="0.0822%" height="15" fill="rgb(214,67,26)" fg:x="818" fg:w="1"/><text x="67.4645%" y="287.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (10 samples, 0.82%)</title><rect x="66.6393%" y="405" width="0.8217%" height="15" fill="rgb(251,9,53)" fg:x="811" fg:w="10"/><text x="66.8893%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="67.2966%" y="389" width="0.1643%" height="15" fill="rgb(228,204,25)" fg:x="819" fg:w="2"/><text x="67.5466%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="67.2966%" y="373" width="0.1643%" height="15" fill="rgb(207,153,8)" fg:x="819" fg:w="2"/><text x="67.5466%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="67.3788%" y="357" width="0.0822%" height="15" fill="rgb(242,9,16)" fg:x="820" fg:w="1"/><text x="67.6288%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="67.3788%" y="341" width="0.0822%" height="15" fill="rgb(217,211,10)" fg:x="820" fg:w="1"/><text x="67.6288%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.3788%" y="325" width="0.0822%" height="15" fill="rgb(219,228,52)" fg:x="820" fg:w="1"/><text x="67.6288%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="67.3788%" y="309" width="0.0822%" height="15" fill="rgb(231,92,29)" fg:x="820" fg:w="1"/><text x="67.6288%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="67.3788%" y="293" width="0.0822%" height="15" fill="rgb(232,8,23)" fg:x="820" fg:w="1"/><text x="67.6288%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="67.3788%" y="277" width="0.0822%" height="15" fill="rgb(216,211,34)" fg:x="820" fg:w="1"/><text x="67.6288%" y="287.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.3788%" y="261" width="0.0822%" height="15" fill="rgb(236,151,0)" fg:x="820" fg:w="1"/><text x="67.6288%" y="271.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3788%" y="245" width="0.0822%" height="15" fill="rgb(209,168,3)" fg:x="820" fg:w="1"/><text x="67.6288%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3788%" y="229" width="0.0822%" height="15" fill="rgb(208,129,28)" fg:x="820" fg:w="1"/><text x="67.6288%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.3788%" y="213" width="0.0822%" height="15" fill="rgb(229,78,22)" fg:x="820" fg:w="1"/><text x="67.6288%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.3788%" y="197" width="0.0822%" height="15" fill="rgb(228,187,13)" fg:x="820" fg:w="1"/><text x="67.6288%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.3788%" y="181" width="0.0822%" height="15" fill="rgb(240,119,24)" fg:x="820" fg:w="1"/><text x="67.6288%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.3788%" y="165" width="0.0822%" height="15" fill="rgb(209,194,42)" fg:x="820" fg:w="1"/><text x="67.6288%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.3788%" y="149" width="0.0822%" height="15" fill="rgb(247,200,46)" fg:x="820" fg:w="1"/><text x="67.6288%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.3788%" y="133" width="0.0822%" height="15" fill="rgb(218,76,16)" fg:x="820" fg:w="1"/><text x="67.6288%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.3788%" y="117" width="0.0822%" height="15" fill="rgb(225,21,48)" fg:x="820" fg:w="1"/><text x="67.6288%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.3788%" y="101" width="0.0822%" height="15" fill="rgb(239,223,50)" fg:x="820" fg:w="1"/><text x="67.6288%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.3788%" y="85" width="0.0822%" height="15" fill="rgb(244,45,21)" fg:x="820" fg:w="1"/><text x="67.6288%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.3788%" y="69" width="0.0822%" height="15" fill="rgb(232,33,43)" fg:x="820" fg:w="1"/><text x="67.6288%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3788%" y="53" width="0.0822%" height="15" fill="rgb(209,8,3)" fg:x="820" fg:w="1"/><text x="67.6288%" y="63.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="67.4610%" y="389" width="0.0822%" height="15" fill="rgb(214,25,53)" fg:x="821" fg:w="1"/><text x="67.7110%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4610%" y="373" width="0.0822%" height="15" fill="rgb(254,186,54)" fg:x="821" fg:w="1"/><text x="67.7110%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.4610%" y="357" width="0.0822%" height="15" fill="rgb(208,174,49)" fg:x="821" fg:w="1"/><text x="67.7110%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.4610%" y="341" width="0.0822%" height="15" fill="rgb(233,191,51)" fg:x="821" fg:w="1"/><text x="67.7110%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.4610%" y="325" width="0.0822%" height="15" fill="rgb(222,134,10)" fg:x="821" fg:w="1"/><text x="67.7110%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.4610%" y="309" width="0.0822%" height="15" fill="rgb(230,226,20)" fg:x="821" fg:w="1"/><text x="67.7110%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4610%" y="293" width="0.0822%" height="15" fill="rgb(251,111,25)" fg:x="821" fg:w="1"/><text x="67.7110%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.4610%" y="277" width="0.0822%" height="15" fill="rgb(224,40,46)" fg:x="821" fg:w="1"/><text x="67.7110%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.4610%" y="261" width="0.0822%" height="15" fill="rgb(236,108,47)" fg:x="821" fg:w="1"/><text x="67.7110%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.4610%" y="245" width="0.0822%" height="15" fill="rgb(234,93,0)" fg:x="821" fg:w="1"/><text x="67.7110%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.4610%" y="229" width="0.0822%" height="15" fill="rgb(224,213,32)" fg:x="821" fg:w="1"/><text x="67.7110%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.4610%" y="213" width="0.0822%" height="15" fill="rgb(251,11,48)" fg:x="821" fg:w="1"/><text x="67.7110%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4610%" y="197" width="0.0822%" height="15" fill="rgb(236,173,5)" fg:x="821" fg:w="1"/><text x="67.7110%" y="207.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="67.6253%" y="261" width="0.0822%" height="15" fill="rgb(230,95,12)" fg:x="823" fg:w="1"/><text x="67.8753%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.6253%" y="245" width="0.0822%" height="15" fill="rgb(232,209,1)" fg:x="823" fg:w="1"/><text x="67.8753%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.6253%" y="229" width="0.0822%" height="15" fill="rgb(232,6,1)" fg:x="823" fg:w="1"/><text x="67.8753%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.7075%" y="101" width="0.0822%" height="15" fill="rgb(210,224,50)" fg:x="824" fg:w="1"/><text x="67.9575%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7075%" y="85" width="0.0822%" height="15" fill="rgb(228,127,35)" fg:x="824" fg:w="1"/><text x="67.9575%" y="95.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7075%" y="69" width="0.0822%" height="15" fill="rgb(245,102,45)" fg:x="824" fg:w="1"/><text x="67.9575%" y="79.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7075%" y="53" width="0.0822%" height="15" fill="rgb(214,1,49)" fg:x="824" fg:w="1"/><text x="67.9575%" y="63.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.7075%" y="37" width="0.0822%" height="15" fill="rgb(226,163,40)" fg:x="824" fg:w="1"/><text x="67.9575%" y="47.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="67.7075%" y="133" width="0.1643%" height="15" fill="rgb(239,212,28)" fg:x="824" fg:w="2"/><text x="67.9575%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="67.7075%" y="117" width="0.1643%" height="15" fill="rgb(220,20,13)" fg:x="824" fg:w="2"/><text x="67.9575%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="67.7896%" y="101" width="0.0822%" height="15" fill="rgb(210,164,35)" fg:x="825" fg:w="1"/><text x="68.0396%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.7896%" y="85" width="0.0822%" height="15" fill="rgb(248,109,41)" fg:x="825" fg:w="1"/><text x="68.0396%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="67.7896%" y="69" width="0.0822%" height="15" fill="rgb(238,23,50)" fg:x="825" fg:w="1"/><text x="68.0396%" y="79.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.7896%" y="53" width="0.0822%" height="15" fill="rgb(211,48,49)" fg:x="825" fg:w="1"/><text x="68.0396%" y="63.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7896%" y="37" width="0.0822%" height="15" fill="rgb(223,36,21)" fg:x="825" fg:w="1"/><text x="68.0396%" y="47.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="67.7075%" y="181" width="0.2465%" height="15" fill="rgb(207,123,46)" fg:x="824" fg:w="3"/><text x="67.9575%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="67.7075%" y="165" width="0.2465%" height="15" fill="rgb(240,218,32)" fg:x="824" fg:w="3"/><text x="67.9575%" y="175.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (3 samples, 0.25%)</title><rect x="67.7075%" y="149" width="0.2465%" height="15" fill="rgb(252,5,43)" fg:x="824" fg:w="3"/><text x="67.9575%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8718%" y="133" width="0.0822%" height="15" fill="rgb(252,84,19)" fg:x="826" fg:w="1"/><text x="68.1218%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8718%" y="117" width="0.0822%" height="15" fill="rgb(243,152,39)" fg:x="826" fg:w="1"/><text x="68.1218%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8718%" y="101" width="0.0822%" height="15" fill="rgb(234,160,15)" fg:x="826" fg:w="1"/><text x="68.1218%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="67.8718%" y="85" width="0.0822%" height="15" fill="rgb(237,34,20)" fg:x="826" fg:w="1"/><text x="68.1218%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.8718%" y="69" width="0.0822%" height="15" fill="rgb(229,97,13)" fg:x="826" fg:w="1"/><text x="68.1218%" y="79.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (6 samples, 0.49%)</title><rect x="67.7075%" y="245" width="0.4930%" height="15" fill="rgb(234,71,50)" fg:x="824" fg:w="6"/><text x="67.9575%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (6 samples, 0.49%)</title><rect x="67.7075%" y="229" width="0.4930%" height="15" fill="rgb(253,155,4)" fg:x="824" fg:w="6"/><text x="67.9575%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="67.7075%" y="213" width="0.4930%" height="15" fill="rgb(222,185,37)" fg:x="824" fg:w="6"/><text x="67.9575%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="67.7075%" y="197" width="0.4930%" height="15" fill="rgb(251,177,13)" fg:x="824" fg:w="6"/><text x="67.9575%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="67.9540%" y="181" width="0.2465%" height="15" fill="rgb(250,179,40)" fg:x="827" fg:w="3"/><text x="68.2040%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="67.9540%" y="165" width="0.2465%" height="15" fill="rgb(242,44,2)" fg:x="827" fg:w="3"/><text x="68.2040%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.25%)</title><rect x="67.9540%" y="149" width="0.2465%" height="15" fill="rgb(216,177,13)" fg:x="827" fg:w="3"/><text x="68.2040%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.74%)</title><rect x="67.6253%" y="309" width="0.7395%" height="15" fill="rgb(216,106,43)" fg:x="823" fg:w="9"/><text x="67.8753%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (9 samples, 0.74%)</title><rect x="67.6253%" y="293" width="0.7395%" height="15" fill="rgb(216,183,2)" fg:x="823" fg:w="9"/><text x="67.8753%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (9 samples, 0.74%)</title><rect x="67.6253%" y="277" width="0.7395%" height="15" fill="rgb(249,75,3)" fg:x="823" fg:w="9"/><text x="67.8753%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (8 samples, 0.66%)</title><rect x="67.7075%" y="261" width="0.6574%" height="15" fill="rgb(219,67,39)" fg:x="824" fg:w="8"/><text x="67.9575%" y="271.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="68.2005%" y="245" width="0.1643%" height="15" fill="rgb(253,228,2)" fg:x="830" fg:w="2"/><text x="68.4505%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.2827%" y="229" width="0.0822%" height="15" fill="rgb(235,138,27)" fg:x="831" fg:w="1"/><text x="68.5327%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.2827%" y="213" width="0.0822%" height="15" fill="rgb(236,97,51)" fg:x="831" fg:w="1"/><text x="68.5327%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.2827%" y="197" width="0.0822%" height="15" fill="rgb(240,80,30)" fg:x="831" fg:w="1"/><text x="68.5327%" y="207.50"></text></g><g><title>plugins_core::tools::get_contained_keys (12 samples, 0.99%)</title><rect x="67.4610%" y="405" width="0.9860%" height="15" fill="rgb(230,178,19)" fg:x="821" fg:w="12"/><text x="67.7110%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (11 samples, 0.90%)</title><rect x="67.5431%" y="389" width="0.9039%" height="15" fill="rgb(210,190,27)" fg:x="822" fg:w="11"/><text x="67.7931%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (11 samples, 0.90%)</title><rect x="67.5431%" y="373" width="0.9039%" height="15" fill="rgb(222,107,31)" fg:x="822" fg:w="11"/><text x="67.7931%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (10 samples, 0.82%)</title><rect x="67.6253%" y="357" width="0.8217%" height="15" fill="rgb(216,127,34)" fg:x="823" fg:w="10"/><text x="67.8753%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (10 samples, 0.82%)</title><rect x="67.6253%" y="341" width="0.8217%" height="15" fill="rgb(234,116,52)" fg:x="823" fg:w="10"/><text x="67.8753%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 0.82%)</title><rect x="67.6253%" y="325" width="0.8217%" height="15" fill="rgb(222,124,15)" fg:x="823" fg:w="10"/><text x="67.8753%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3648%" y="309" width="0.0822%" height="15" fill="rgb(231,179,28)" fg:x="832" fg:w="1"/><text x="68.6148%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.6113%" y="325" width="0.0822%" height="15" fill="rgb(226,93,45)" fg:x="835" fg:w="1"/><text x="68.8613%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (27 samples, 2.22%)</title><rect x="66.5571%" y="437" width="2.2186%" height="15" fill="rgb(215,8,51)" fg:x="810" fg:w="27"/><text x="66.8071%" y="447.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (26 samples, 2.14%)</title><rect x="66.6393%" y="421" width="2.1364%" height="15" fill="rgb(223,106,5)" fg:x="811" fg:w="26"/><text x="66.8893%" y="431.50">&lt;..</text></g><g><title>plugins_core::tools::get_occupant_keys (4 samples, 0.33%)</title><rect x="68.4470%" y="405" width="0.3287%" height="15" fill="rgb(250,191,5)" fg:x="833" fg:w="4"/><text x="68.6970%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.33%)</title><rect x="68.4470%" y="389" width="0.3287%" height="15" fill="rgb(242,132,44)" fg:x="833" fg:w="4"/><text x="68.6970%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (3 samples, 0.25%)</title><rect x="68.5292%" y="373" width="0.2465%" height="15" fill="rgb(251,152,29)" fg:x="834" fg:w="3"/><text x="68.7792%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.6113%" y="357" width="0.1643%" height="15" fill="rgb(218,179,5)" fg:x="835" fg:w="2"/><text x="68.8613%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.6113%" y="341" width="0.1643%" height="15" fill="rgb(227,67,19)" fg:x="835" fg:w="2"/><text x="68.8613%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.6935%" y="325" width="0.0822%" height="15" fill="rgb(233,119,31)" fg:x="836" fg:w="1"/><text x="68.9435%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="68.8578%" y="389" width="0.2465%" height="15" fill="rgb(241,120,22)" fg:x="838" fg:w="3"/><text x="69.1078%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.25%)</title><rect x="68.8578%" y="373" width="0.2465%" height="15" fill="rgb(224,102,30)" fg:x="838" fg:w="3"/><text x="69.1078%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.25%)</title><rect x="68.8578%" y="357" width="0.2465%" height="15" fill="rgb(210,164,37)" fg:x="838" fg:w="3"/><text x="69.1078%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.25%)</title><rect x="68.8578%" y="341" width="0.2465%" height="15" fill="rgb(226,191,16)" fg:x="838" fg:w="3"/><text x="69.1078%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.25%)</title><rect x="68.8578%" y="325" width="0.2465%" height="15" fill="rgb(214,40,45)" fg:x="838" fg:w="3"/><text x="69.1078%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.9400%" y="309" width="0.1643%" height="15" fill="rgb(244,29,26)" fg:x="839" fg:w="2"/><text x="69.1900%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.9400%" y="293" width="0.1643%" height="15" fill="rgb(216,16,5)" fg:x="839" fg:w="2"/><text x="69.1900%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="68.9400%" y="277" width="0.1643%" height="15" fill="rgb(249,76,35)" fg:x="839" fg:w="2"/><text x="69.1900%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="68.9400%" y="261" width="0.1643%" height="15" fill="rgb(207,11,44)" fg:x="839" fg:w="2"/><text x="69.1900%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="68.9400%" y="245" width="0.1643%" height="15" fill="rgb(228,190,49)" fg:x="839" fg:w="2"/><text x="69.1900%" y="255.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="68.9400%" y="229" width="0.1643%" height="15" fill="rgb(214,173,12)" fg:x="839" fg:w="2"/><text x="69.1900%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="68.9400%" y="213" width="0.1643%" height="15" fill="rgb(218,26,35)" fg:x="839" fg:w="2"/><text x="69.1900%" y="223.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="69.1044%" y="373" width="0.0822%" height="15" fill="rgb(220,200,19)" fg:x="841" fg:w="1"/><text x="69.3544%" y="383.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="69.1044%" y="357" width="0.0822%" height="15" fill="rgb(239,95,49)" fg:x="841" fg:w="1"/><text x="69.3544%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1044%" y="341" width="0.0822%" height="15" fill="rgb(235,85,53)" fg:x="841" fg:w="1"/><text x="69.3544%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="69.1044%" y="389" width="0.1643%" height="15" fill="rgb(233,133,31)" fg:x="841" fg:w="2"/><text x="69.3544%" y="399.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.1865%" y="373" width="0.0822%" height="15" fill="rgb(218,25,20)" fg:x="842" fg:w="1"/><text x="69.4365%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.9260%" y="181" width="0.0822%" height="15" fill="rgb(252,210,38)" fg:x="851" fg:w="1"/><text x="70.1760%" y="191.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9260%" y="165" width="0.0822%" height="15" fill="rgb(242,134,21)" fg:x="851" fg:w="1"/><text x="70.1760%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="69.9260%" y="197" width="0.1643%" height="15" fill="rgb(213,28,48)" fg:x="851" fg:w="2"/><text x="70.1760%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.0082%" y="181" width="0.0822%" height="15" fill="rgb(250,196,2)" fg:x="852" fg:w="1"/><text x="70.2582%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="69.9260%" y="213" width="0.2465%" height="15" fill="rgb(227,5,17)" fg:x="851" fg:w="3"/><text x="70.1760%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.0904%" y="197" width="0.0822%" height="15" fill="rgb(221,226,24)" fg:x="853" fg:w="1"/><text x="70.3404%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.0904%" y="181" width="0.0822%" height="15" fill="rgb(211,5,48)" fg:x="853" fg:w="1"/><text x="70.3404%" y="191.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.74%)</title><rect x="69.5974%" y="277" width="0.7395%" height="15" fill="rgb(219,150,6)" fg:x="847" fg:w="9"/><text x="69.8474%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (7 samples, 0.58%)</title><rect x="69.7617%" y="261" width="0.5752%" height="15" fill="rgb(251,46,16)" fg:x="849" fg:w="7"/><text x="70.0117%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.58%)</title><rect x="69.7617%" y="245" width="0.5752%" height="15" fill="rgb(220,204,40)" fg:x="849" fg:w="7"/><text x="70.0117%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="69.9260%" y="229" width="0.4108%" height="15" fill="rgb(211,85,2)" fg:x="851" fg:w="5"/><text x="70.1760%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.1726%" y="213" width="0.1643%" height="15" fill="rgb(229,17,7)" fg:x="854" fg:w="2"/><text x="70.4226%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="70.1726%" y="197" width="0.1643%" height="15" fill="rgb(239,72,28)" fg:x="854" fg:w="2"/><text x="70.4226%" y="207.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="70.1726%" y="181" width="0.1643%" height="15" fill="rgb(230,47,54)" fg:x="854" fg:w="2"/><text x="70.4226%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.1726%" y="165" width="0.1643%" height="15" fill="rgb(214,50,8)" fg:x="854" fg:w="2"/><text x="70.4226%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="70.1726%" y="149" width="0.1643%" height="15" fill="rgb(216,198,43)" fg:x="854" fg:w="2"/><text x="70.4226%" y="159.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="70.2547%" y="133" width="0.0822%" height="15" fill="rgb(234,20,35)" fg:x="855" fg:w="1"/><text x="70.5047%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.3369%" y="277" width="0.0822%" height="15" fill="rgb(254,45,19)" fg:x="856" fg:w="1"/><text x="70.5869%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 1.07%)</title><rect x="69.5974%" y="293" width="1.0682%" height="15" fill="rgb(219,14,44)" fg:x="847" fg:w="13"/><text x="69.8474%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.25%)</title><rect x="70.4191%" y="277" width="0.2465%" height="15" fill="rgb(217,220,26)" fg:x="857" fg:w="3"/><text x="70.6691%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="70.5012%" y="261" width="0.1643%" height="15" fill="rgb(213,158,28)" fg:x="858" fg:w="2"/><text x="70.7512%" y="271.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (19 samples, 1.56%)</title><rect x="69.4330%" y="325" width="1.5612%" height="15" fill="rgb(252,51,52)" fg:x="845" fg:w="19"/><text x="69.6830%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.48%)</title><rect x="69.5152%" y="309" width="1.4790%" height="15" fill="rgb(246,89,16)" fg:x="846" fg:w="18"/><text x="69.7652%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.33%)</title><rect x="70.6656%" y="293" width="0.3287%" height="15" fill="rgb(216,158,49)" fg:x="860" fg:w="4"/><text x="70.9156%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.9121%" y="277" width="0.0822%" height="15" fill="rgb(236,107,19)" fg:x="863" fg:w="1"/><text x="71.1621%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.9942%" y="309" width="0.0822%" height="15" fill="rgb(228,185,30)" fg:x="864" fg:w="1"/><text x="71.2442%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (21 samples, 1.73%)</title><rect x="69.4330%" y="341" width="1.7256%" height="15" fill="rgb(246,134,8)" fg:x="845" fg:w="21"/><text x="69.6830%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="70.9942%" y="325" width="0.1643%" height="15" fill="rgb(214,143,50)" fg:x="864" fg:w="2"/><text x="71.2442%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.0764%" y="309" width="0.0822%" height="15" fill="rgb(228,75,8)" fg:x="865" fg:w="1"/><text x="71.3264%" y="319.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (27 samples, 2.22%)</title><rect x="69.2687%" y="373" width="2.2186%" height="15" fill="rgb(207,175,4)" fg:x="843" fg:w="27"/><text x="69.5187%" y="383.50">&lt;..</text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (26 samples, 2.14%)</title><rect x="69.3509%" y="357" width="2.1364%" height="15" fill="rgb(205,108,24)" fg:x="844" fg:w="26"/><text x="69.6009%" y="367.50">&lt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.33%)</title><rect x="71.1586%" y="341" width="0.3287%" height="15" fill="rgb(244,120,49)" fg:x="866" fg:w="4"/><text x="71.4086%" y="351.50"></text></g><g><title>__libc_malloc (4 samples, 0.33%)</title><rect x="71.1586%" y="325" width="0.3287%" height="15" fill="rgb(223,47,38)" fg:x="866" fg:w="4"/><text x="71.4086%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="71.5694%" y="325" width="0.4108%" height="15" fill="rgb(229,179,11)" fg:x="871" fg:w="5"/><text x="71.8194%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="71.9803%" y="325" width="0.0822%" height="15" fill="rgb(231,122,1)" fg:x="876" fg:w="1"/><text x="72.2303%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.9803%" y="309" width="0.0822%" height="15" fill="rgb(245,119,9)" fg:x="876" fg:w="1"/><text x="72.2303%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="71.9803%" y="293" width="0.0822%" height="15" fill="rgb(241,163,25)" fg:x="876" fg:w="1"/><text x="72.2303%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="72.0624%" y="325" width="0.0822%" height="15" fill="rgb(217,214,3)" fg:x="877" fg:w="1"/><text x="72.3124%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2268%" y="277" width="0.0822%" height="15" fill="rgb(240,86,28)" fg:x="879" fg:w="1"/><text x="72.4768%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2268%" y="261" width="0.0822%" height="15" fill="rgb(215,47,9)" fg:x="879" fg:w="1"/><text x="72.4768%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.2268%" y="245" width="0.0822%" height="15" fill="rgb(252,25,45)" fg:x="879" fg:w="1"/><text x="72.4768%" y="255.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.25%)</title><rect x="72.1446%" y="325" width="0.2465%" height="15" fill="rgb(251,164,9)" fg:x="878" fg:w="3"/><text x="72.3946%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="72.2268%" y="309" width="0.1643%" height="15" fill="rgb(233,194,0)" fg:x="879" fg:w="2"/><text x="72.4768%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="72.2268%" y="293" width="0.1643%" height="15" fill="rgb(249,111,24)" fg:x="879" fg:w="2"/><text x="72.4768%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3090%" y="277" width="0.0822%" height="15" fill="rgb(250,223,3)" fg:x="880" fg:w="1"/><text x="72.5590%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.3090%" y="261" width="0.0822%" height="15" fill="rgb(236,178,37)" fg:x="880" fg:w="1"/><text x="72.5590%" y="271.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3090%" y="245" width="0.0822%" height="15" fill="rgb(241,158,50)" fg:x="880" fg:w="1"/><text x="72.5590%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="72.3090%" y="229" width="0.0822%" height="15" fill="rgb(213,121,41)" fg:x="880" fg:w="1"/><text x="72.5590%" y="239.50"></text></g><g><title>criterion::stats::univariate::sample::Sample&lt;A&gt;::percentiles (1 samples, 0.08%)</title><rect x="72.3090%" y="213" width="0.0822%" height="15" fill="rgb(240,92,3)" fg:x="880" fg:w="1"/><text x="72.5590%" y="223.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Version&gt;::serialize (1 samples, 0.08%)</title><rect x="72.3911%" y="325" width="0.0822%" height="15" fill="rgb(205,123,3)" fg:x="881" fg:w="1"/><text x="72.6411%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4733%" y="229" width="0.0822%" height="15" fill="rgb(205,97,47)" fg:x="882" fg:w="1"/><text x="72.7233%" y="239.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.4733%" y="293" width="0.1643%" height="15" fill="rgb(247,152,14)" fg:x="882" fg:w="2"/><text x="72.7233%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="72.4733%" y="277" width="0.1643%" height="15" fill="rgb(248,195,53)" fg:x="882" fg:w="2"/><text x="72.7233%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.4733%" y="261" width="0.1643%" height="15" fill="rgb(226,201,16)" fg:x="882" fg:w="2"/><text x="72.7233%" y="271.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.4733%" y="245" width="0.1643%" height="15" fill="rgb(205,98,0)" fg:x="882" fg:w="2"/><text x="72.7233%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="72.5555%" y="229" width="0.0822%" height="15" fill="rgb(214,191,48)" fg:x="883" fg:w="1"/><text x="72.8055%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5555%" y="213" width="0.0822%" height="15" fill="rgb(237,112,39)" fg:x="883" fg:w="1"/><text x="72.8055%" y="223.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (77 samples, 6.33%)</title><rect x="66.3928%" y="469" width="6.3270%" height="15" fill="rgb(247,203,27)" fg:x="808" fg:w="77"/><text x="66.6428%" y="479.50">&lt;plugins..</text></g><g><title>core::iter::adapters::try_process (75 samples, 6.16%)</title><rect x="66.5571%" y="453" width="6.1627%" height="15" fill="rgb(235,124,28)" fg:x="810" fg:w="75"/><text x="66.8071%" y="463.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (48 samples, 3.94%)</title><rect x="68.7757%" y="437" width="3.9441%" height="15" fill="rgb(208,207,46)" fg:x="837" fg:w="48"/><text x="69.0257%" y="447.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (48 samples, 3.94%)</title><rect x="68.7757%" y="421" width="3.9441%" height="15" fill="rgb(234,176,4)" fg:x="837" fg:w="48"/><text x="69.0257%" y="431.50">&lt;cor..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (48 samples, 3.94%)</title><rect x="68.7757%" y="405" width="3.9441%" height="15" fill="rgb(230,133,28)" fg:x="837" fg:w="48"/><text x="69.0257%" y="415.50">plug..</text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (42 samples, 3.45%)</title><rect x="69.2687%" y="389" width="3.4511%" height="15" fill="rgb(211,137,40)" fg:x="843" fg:w="42"/><text x="69.5187%" y="399.50">&lt;pl..</text></g><g><title>kernel::model::EntityPtr::to_json_value (15 samples, 1.23%)</title><rect x="71.4873%" y="373" width="1.2325%" height="15" fill="rgb(254,35,13)" fg:x="870" fg:w="15"/><text x="71.7373%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (15 samples, 1.23%)</title><rect x="71.4873%" y="357" width="1.2325%" height="15" fill="rgb(225,49,51)" fg:x="870" fg:w="15"/><text x="71.7373%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (15 samples, 1.23%)</title><rect x="71.4873%" y="341" width="1.2325%" height="15" fill="rgb(251,10,15)" fg:x="870" fg:w="15"/><text x="71.7373%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.25%)</title><rect x="72.4733%" y="325" width="0.2465%" height="15" fill="rgb(228,207,15)" fg:x="882" fg:w="3"/><text x="72.7233%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (3 samples, 0.25%)</title><rect x="72.4733%" y="309" width="0.2465%" height="15" fill="rgb(241,99,19)" fg:x="882" fg:w="3"/><text x="72.7233%" y="319.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.6376%" y="293" width="0.0822%" height="15" fill="rgb(207,104,49)" fg:x="884" fg:w="1"/><text x="72.8876%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.6376%" y="277" width="0.0822%" height="15" fill="rgb(234,99,18)" fg:x="884" fg:w="1"/><text x="72.8876%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.7198%" y="469" width="0.1643%" height="15" fill="rgb(213,191,49)" fg:x="885" fg:w="2"/><text x="72.9698%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (89 samples, 7.31%)</title><rect x="65.6532%" y="517" width="7.3131%" height="15" fill="rgb(210,226,19)" fg:x="799" fg:w="89"/><text x="65.9032%" y="527.50">kernel::pl..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (89 samples, 7.31%)</title><rect x="65.6532%" y="501" width="7.3131%" height="15" fill="rgb(229,97,18)" fg:x="799" fg:w="89"/><text x="65.9032%" y="511.50">&lt;plugins_d..</text></g><g><title>plugins_rpc::querying::have_surroundings (80 samples, 6.57%)</title><rect x="66.3928%" y="485" width="6.5735%" height="15" fill="rgb(211,167,15)" fg:x="808" fg:w="80"/><text x="66.6428%" y="495.50">plugins_r..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.8841%" y="469" width="0.0822%" height="15" fill="rgb(210,169,34)" fg:x="887" fg:w="1"/><text x="73.1341%" y="479.50"></text></g><g><title>plugins_rpc_proto::&lt;impl core::convert::Into&lt;plugins_rpc_proto::EntityKey&gt; for kernel::model::EntityKey&gt;::into (1 samples, 0.08%)</title><rect x="72.8841%" y="453" width="0.0822%" height="15" fill="rgb(241,121,31)" fg:x="887" fg:w="1"/><text x="73.1341%" y="463.50"></text></g><g><title>kernel::model::&lt;impl core::convert::From&lt;kernel::model::EntityKey&gt; for alloc::string::String&gt;::from (1 samples, 0.08%)</title><rect x="72.8841%" y="437" width="0.0822%" height="15" fill="rgb(232,40,11)" fg:x="887" fg:w="1"/><text x="73.1341%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8841%" y="421" width="0.0822%" height="15" fill="rgb(205,86,26)" fg:x="887" fg:w="1"/><text x="73.1341%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (889 samples, 73.05%)</title><rect x="0.0000%" y="597" width="73.0485%" height="15" fill="rgb(231,126,28)" fg:x="0" fg:w="889"/><text x="0.2500%" y="607.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (889 samples, 73.05%)</title><rect x="0.0000%" y="581" width="73.0485%" height="15" fill="rgb(219,221,18)" fg:x="0" fg:w="889"/><text x="0.2500%" y="591.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (889 samples, 73.05%)</title><rect x="0.0000%" y="565" width="73.0485%" height="15" fill="rgb(211,40,0)" fg:x="0" fg:w="889"/><text x="0.2500%" y="575.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (796 samples, 65.41%)</title><rect x="7.6417%" y="549" width="65.4067%" height="15" fill="rgb(239,85,43)" fg:x="93" fg:w="796"/><text x="7.8917%" y="559.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (796 samples, 65.41%)</title><rect x="7.6417%" y="533" width="65.4067%" height="15" fill="rgb(231,55,21)" fg:x="93" fg:w="796"/><text x="7.8917%" y="543.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="72.9663%" y="517" width="0.0822%" height="15" fill="rgb(225,184,43)" fg:x="888" fg:w="1"/><text x="73.2163%" y="527.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="72.9663%" y="501" width="0.0822%" height="15" fill="rgb(251,158,41)" fg:x="888" fg:w="1"/><text x="73.2163%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="72.9663%" y="485" width="0.0822%" height="15" fill="rgb(234,159,37)" fg:x="888" fg:w="1"/><text x="73.2163%" y="495.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="72.9663%" y="469" width="0.0822%" height="15" fill="rgb(216,204,22)" fg:x="888" fg:w="1"/><text x="73.2163%" y="479.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="72.9663%" y="453" width="0.0822%" height="15" fill="rgb(214,17,3)" fg:x="888" fg:w="1"/><text x="73.2163%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.0485%" y="501" width="0.0822%" height="15" fill="rgb(212,111,17)" fg:x="889" fg:w="1"/><text x="73.2985%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1306%" y="469" width="0.0822%" height="15" fill="rgb(221,157,24)" fg:x="890" fg:w="1"/><text x="73.3806%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1306%" y="453" width="0.0822%" height="15" fill="rgb(252,16,13)" fg:x="890" fg:w="1"/><text x="73.3806%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.1306%" y="437" width="0.0822%" height="15" fill="rgb(221,62,2)" fg:x="890" fg:w="1"/><text x="73.3806%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.1306%" y="421" width="0.0822%" height="15" fill="rgb(247,87,22)" fg:x="890" fg:w="1"/><text x="73.3806%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="73.1306%" y="405" width="0.0822%" height="15" fill="rgb(215,73,9)" fg:x="890" fg:w="1"/><text x="73.3806%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.1306%" y="389" width="0.0822%" height="15" fill="rgb(207,175,33)" fg:x="890" fg:w="1"/><text x="73.3806%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.1306%" y="373" width="0.0822%" height="15" fill="rgb(243,129,54)" fg:x="890" fg:w="1"/><text x="73.3806%" y="383.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="73.0485%" y="549" width="0.3287%" height="15" fill="rgb(227,119,45)" fg:x="889" fg:w="4"/><text x="73.2985%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::internal::Entities&gt;&gt; (4 samples, 0.33%)</title><rect x="73.0485%" y="533" width="0.3287%" height="15" fill="rgb(205,109,36)" fg:x="889" fg:w="4"/><text x="73.2985%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="73.0485%" y="517" width="0.3287%" height="15" fill="rgb(205,6,39)" fg:x="889" fg:w="4"/><text x="73.2985%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.25%)</title><rect x="73.1306%" y="501" width="0.2465%" height="15" fill="rgb(221,32,16)" fg:x="890" fg:w="3"/><text x="73.3806%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="73.1306%" y="485" width="0.2465%" height="15" fill="rgb(228,144,50)" fg:x="890" fg:w="3"/><text x="73.3806%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="73.2128%" y="469" width="0.1643%" height="15" fill="rgb(229,201,53)" fg:x="891" fg:w="2"/><text x="73.4628%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="73.3772%" y="469" width="0.0822%" height="15" fill="rgb(249,153,27)" fg:x="893" fg:w="1"/><text x="73.6272%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="73.3772%" y="453" width="0.0822%" height="15" fill="rgb(227,106,25)" fg:x="893" fg:w="1"/><text x="73.6272%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.3772%" y="437" width="0.0822%" height="15" fill="rgb(230,65,29)" fg:x="893" fg:w="1"/><text x="73.6272%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.3772%" y="421" width="0.0822%" height="15" fill="rgb(221,57,46)" fg:x="893" fg:w="1"/><text x="73.6272%" y="431.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (2 samples, 0.16%)</title><rect x="73.3772%" y="549" width="0.1643%" height="15" fill="rgb(229,161,17)" fg:x="893" fg:w="2"/><text x="73.6272%" y="559.50"></text></g><g><title>engine::session::Session::new (2 samples, 0.16%)</title><rect x="73.3772%" y="533" width="0.1643%" height="15" fill="rgb(222,213,11)" fg:x="893" fg:w="2"/><text x="73.6272%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="73.3772%" y="517" width="0.1643%" height="15" fill="rgb(235,35,13)" fg:x="893" fg:w="2"/><text x="73.6272%" y="527.50"></text></g><g><title>engine::internal::Entities::prepare_entity (2 samples, 0.16%)</title><rect x="73.3772%" y="501" width="0.1643%" height="15" fill="rgb(233,158,34)" fg:x="893" fg:w="2"/><text x="73.6272%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="73.3772%" y="485" width="0.1643%" height="15" fill="rgb(215,151,48)" fg:x="893" fg:w="2"/><text x="73.6272%" y="495.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="73.4593%" y="469" width="0.0822%" height="15" fill="rgb(229,84,14)" fg:x="894" fg:w="1"/><text x="73.7093%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4593%" y="453" width="0.0822%" height="15" fill="rgb(229,68,14)" fg:x="894" fg:w="1"/><text x="73.7093%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4593%" y="437" width="0.0822%" height="15" fill="rgb(243,106,26)" fg:x="894" fg:w="1"/><text x="73.7093%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4593%" y="421" width="0.0822%" height="15" fill="rgb(206,45,38)" fg:x="894" fg:w="1"/><text x="73.7093%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4593%" y="405" width="0.0822%" height="15" fill="rgb(226,6,15)" fg:x="894" fg:w="1"/><text x="73.7093%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4593%" y="389" width="0.0822%" height="15" fill="rgb(232,22,54)" fg:x="894" fg:w="1"/><text x="73.7093%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4593%" y="373" width="0.0822%" height="15" fill="rgb(229,222,32)" fg:x="894" fg:w="1"/><text x="73.7093%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4593%" y="357" width="0.0822%" height="15" fill="rgb(228,62,29)" fg:x="894" fg:w="1"/><text x="73.7093%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4593%" y="341" width="0.0822%" height="15" fill="rgb(251,103,34)" fg:x="894" fg:w="1"/><text x="73.7093%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4593%" y="325" width="0.0822%" height="15" fill="rgb(233,12,30)" fg:x="894" fg:w="1"/><text x="73.7093%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.4593%" y="309" width="0.0822%" height="15" fill="rgb(238,52,0)" fg:x="894" fg:w="1"/><text x="73.7093%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="73.4593%" y="293" width="0.0822%" height="15" fill="rgb(223,98,5)" fg:x="894" fg:w="1"/><text x="73.7093%" y="303.50"></text></g><g><title>engine::session::Session::flush (1 samples, 0.08%)</title><rect x="73.5415%" y="533" width="0.0822%" height="15" fill="rgb(228,75,37)" fg:x="895" fg:w="1"/><text x="73.7915%" y="543.50"></text></g><g><title>engine::session::Session::save_entity_changes (1 samples, 0.08%)</title><rect x="73.5415%" y="517" width="0.0822%" height="15" fill="rgb(205,115,49)" fg:x="895" fg:w="1"/><text x="73.7915%" y="527.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (1 samples, 0.08%)</title><rect x="73.5415%" y="501" width="0.0822%" height="15" fill="rgb(250,154,43)" fg:x="895" fg:w="1"/><text x="73.7915%" y="511.50"></text></g><g><title>engine::session::Session::check_for_changes (1 samples, 0.08%)</title><rect x="73.5415%" y="485" width="0.0822%" height="15" fill="rgb(226,43,29)" fg:x="895" fg:w="1"/><text x="73.7915%" y="495.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="73.5415%" y="469" width="0.0822%" height="15" fill="rgb(249,228,39)" fg:x="895" fg:w="1"/><text x="73.7915%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.5415%" y="453" width="0.0822%" height="15" fill="rgb(216,79,43)" fg:x="895" fg:w="1"/><text x="73.7915%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.5415%" y="437" width="0.0822%" height="15" fill="rgb(228,95,12)" fg:x="895" fg:w="1"/><text x="73.7915%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.5415%" y="421" width="0.0822%" height="15" fill="rgb(249,221,15)" fg:x="895" fg:w="1"/><text x="73.7915%" y="431.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="73.6237%" y="533" width="0.0822%" height="15" fill="rgb(233,34,13)" fg:x="896" fg:w="1"/><text x="73.8737%" y="543.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="73.6237%" y="517" width="0.0822%" height="15" fill="rgb(214,103,39)" fg:x="896" fg:w="1"/><text x="73.8737%" y="527.50"></text></g><g><title>kernel::model::entry::OpenedScopeMut&lt;T&gt;::save (1 samples, 0.08%)</title><rect x="73.6237%" y="501" width="0.0822%" height="15" fill="rgb(251,126,39)" fg:x="896" fg:w="1"/><text x="73.8737%" y="511.50"></text></g><g><title>kernel::model::Entity::replace_scope (1 samples, 0.08%)</title><rect x="73.6237%" y="485" width="0.0822%" height="15" fill="rgb(214,216,36)" fg:x="896" fg:w="1"/><text x="73.8737%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6237%" y="469" width="0.0822%" height="15" fill="rgb(220,221,8)" fg:x="896" fg:w="1"/><text x="73.8737%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6237%" y="453" width="0.0822%" height="15" fill="rgb(240,216,3)" fg:x="896" fg:w="1"/><text x="73.8737%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.6237%" y="437" width="0.0822%" height="15" fill="rgb(232,218,17)" fg:x="896" fg:w="1"/><text x="73.8737%" y="447.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="73.7058%" y="485" width="0.0822%" height="15" fill="rgb(229,163,45)" fg:x="897" fg:w="1"/><text x="73.9558%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="73.7880%" y="453" width="0.0822%" height="15" fill="rgb(231,110,42)" fg:x="898" fg:w="1"/><text x="74.0380%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.7880%" y="437" width="0.0822%" height="15" fill="rgb(208,170,48)" fg:x="898" fg:w="1"/><text x="74.0380%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.7880%" y="421" width="0.0822%" height="15" fill="rgb(239,116,25)" fg:x="898" fg:w="1"/><text x="74.0380%" y="431.50"></text></g><g><title>engine::session::Session::flush (3 samples, 0.25%)</title><rect x="73.7058%" y="517" width="0.2465%" height="15" fill="rgb(219,200,50)" fg:x="897" fg:w="3"/><text x="73.9558%" y="527.50"></text></g><g><title>engine::session::Session::save_entity_changes (3 samples, 0.25%)</title><rect x="73.7058%" y="501" width="0.2465%" height="15" fill="rgb(245,200,0)" fg:x="897" fg:w="3"/><text x="73.9558%" y="511.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (2 samples, 0.16%)</title><rect x="73.7880%" y="485" width="0.1643%" height="15" fill="rgb(245,119,33)" fg:x="898" fg:w="2"/><text x="74.0380%" y="495.50"></text></g><g><title>engine::session::Session::check_for_changes (2 samples, 0.16%)</title><rect x="73.7880%" y="469" width="0.1643%" height="15" fill="rgb(231,125,12)" fg:x="898" fg:w="2"/><text x="74.0380%" y="479.50"></text></g><g><title>kernel::compare::any_entity_changes (1 samples, 0.08%)</title><rect x="73.8702%" y="453" width="0.0822%" height="15" fill="rgb(216,96,41)" fg:x="899" fg:w="1"/><text x="74.1202%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8702%" y="437" width="0.0822%" height="15" fill="rgb(248,43,45)" fg:x="899" fg:w="1"/><text x="74.1202%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8702%" y="421" width="0.0822%" height="15" fill="rgb(217,222,7)" fg:x="899" fg:w="1"/><text x="74.1202%" y="431.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8702%" y="405" width="0.0822%" height="15" fill="rgb(233,28,6)" fg:x="899" fg:w="1"/><text x="74.1202%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8702%" y="389" width="0.0822%" height="15" fill="rgb(231,218,15)" fg:x="899" fg:w="1"/><text x="74.1202%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="73.8702%" y="373" width="0.0822%" height="15" fill="rgb(226,171,48)" fg:x="899" fg:w="1"/><text x="74.1202%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8702%" y="357" width="0.0822%" height="15" fill="rgb(235,201,9)" fg:x="899" fg:w="1"/><text x="74.1202%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.8702%" y="341" width="0.0822%" height="15" fill="rgb(217,80,15)" fg:x="899" fg:w="1"/><text x="74.1202%" y="351.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="73.9523%" y="517" width="0.0822%" height="15" fill="rgb(219,152,8)" fg:x="900" fg:w="1"/><text x="74.2023%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.9523%" y="501" width="0.0822%" height="15" fill="rgb(243,107,38)" fg:x="900" fg:w="1"/><text x="74.2023%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.9523%" y="485" width="0.0822%" height="15" fill="rgb(231,17,5)" fg:x="900" fg:w="1"/><text x="74.2023%" y="495.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.9523%" y="469" width="0.0822%" height="15" fill="rgb(209,25,54)" fg:x="900" fg:w="1"/><text x="74.2023%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9523%" y="453" width="0.0822%" height="15" fill="rgb(219,0,2)" fg:x="900" fg:w="1"/><text x="74.2023%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.9523%" y="437" width="0.0822%" height="15" fill="rgb(246,9,5)" fg:x="900" fg:w="1"/><text x="74.2023%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="73.9523%" y="421" width="0.0822%" height="15" fill="rgb(226,159,4)" fg:x="900" fg:w="1"/><text x="74.2023%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9523%" y="405" width="0.0822%" height="15" fill="rgb(219,175,34)" fg:x="900" fg:w="1"/><text x="74.2023%" y="415.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (7 samples, 0.58%)</title><rect x="73.5415%" y="549" width="0.5752%" height="15" fill="rgb(236,10,46)" fg:x="895" fg:w="7"/><text x="73.7915%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (5 samples, 0.41%)</title><rect x="73.7058%" y="533" width="0.4108%" height="15" fill="rgb(240,211,16)" fg:x="897" fg:w="5"/><text x="73.9558%" y="543.50"></text></g><g><title>plugins_core::build::Build::occupying (1 samples, 0.08%)</title><rect x="74.0345%" y="517" width="0.0822%" height="15" fill="rgb(205,3,43)" fg:x="901" fg:w="1"/><text x="74.2845%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="74.0345%" y="501" width="0.0822%" height="15" fill="rgb(245,7,22)" fg:x="901" fg:w="1"/><text x="74.2845%" y="511.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="74.0345%" y="485" width="0.0822%" height="15" fill="rgb(239,132,32)" fg:x="901" fg:w="1"/><text x="74.2845%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0345%" y="469" width="0.0822%" height="15" fill="rgb(228,202,34)" fg:x="901" fg:w="1"/><text x="74.2845%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0345%" y="453" width="0.0822%" height="15" fill="rgb(254,200,22)" fg:x="901" fg:w="1"/><text x="74.2845%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0345%" y="437" width="0.0822%" height="15" fill="rgb(219,10,39)" fg:x="901" fg:w="1"/><text x="74.2845%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0345%" y="421" width="0.0822%" height="15" fill="rgb(226,210,39)" fg:x="901" fg:w="1"/><text x="74.2845%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0345%" y="405" width="0.0822%" height="15" fill="rgb(208,219,16)" fg:x="901" fg:w="1"/><text x="74.2845%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0345%" y="389" width="0.0822%" height="15" fill="rgb(216,158,51)" fg:x="901" fg:w="1"/><text x="74.2845%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0345%" y="373" width="0.0822%" height="15" fill="rgb(233,14,44)" fg:x="901" fg:w="1"/><text x="74.2845%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0345%" y="357" width="0.0822%" height="15" fill="rgb(237,97,39)" fg:x="901" fg:w="1"/><text x="74.2845%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0345%" y="341" width="0.0822%" height="15" fill="rgb(218,198,43)" fg:x="901" fg:w="1"/><text x="74.2845%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0345%" y="325" width="0.0822%" height="15" fill="rgb(231,104,20)" fg:x="901" fg:w="1"/><text x="74.2845%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0345%" y="309" width="0.0822%" height="15" fill="rgb(254,36,13)" fg:x="901" fg:w="1"/><text x="74.2845%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0345%" y="293" width="0.0822%" height="15" fill="rgb(248,14,50)" fg:x="901" fg:w="1"/><text x="74.2845%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.0345%" y="277" width="0.0822%" height="15" fill="rgb(217,107,29)" fg:x="901" fg:w="1"/><text x="74.2845%" y="287.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="74.1167%" y="517" width="0.0822%" height="15" fill="rgb(251,169,33)" fg:x="902" fg:w="1"/><text x="74.3667%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.1167%" y="501" width="0.0822%" height="15" fill="rgb(217,108,32)" fg:x="902" fg:w="1"/><text x="74.3667%" y="511.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="74.1167%" y="485" width="0.0822%" height="15" fill="rgb(219,66,42)" fg:x="902" fg:w="1"/><text x="74.3667%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1167%" y="469" width="0.0822%" height="15" fill="rgb(206,180,7)" fg:x="902" fg:w="1"/><text x="74.3667%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.1167%" y="453" width="0.0822%" height="15" fill="rgb(208,226,31)" fg:x="902" fg:w="1"/><text x="74.3667%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.1167%" y="437" width="0.0822%" height="15" fill="rgb(218,26,49)" fg:x="902" fg:w="1"/><text x="74.3667%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.1988%" y="501" width="0.0822%" height="15" fill="rgb(233,197,48)" fg:x="903" fg:w="1"/><text x="74.4488%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.1988%" y="485" width="0.0822%" height="15" fill="rgb(252,181,51)" fg:x="903" fg:w="1"/><text x="74.4488%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.1988%" y="469" width="0.0822%" height="15" fill="rgb(253,90,19)" fg:x="903" fg:w="1"/><text x="74.4488%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="74.2810%" y="469" width="0.0822%" height="15" fill="rgb(215,171,30)" fg:x="904" fg:w="1"/><text x="74.5310%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.2810%" y="453" width="0.0822%" height="15" fill="rgb(214,222,9)" fg:x="904" fg:w="1"/><text x="74.5310%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="74.4454%" y="453" width="0.0822%" height="15" fill="rgb(223,3,22)" fg:x="906" fg:w="1"/><text x="74.6954%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.4454%" y="437" width="0.0822%" height="15" fill="rgb(225,196,46)" fg:x="906" fg:w="1"/><text x="74.6954%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.4454%" y="421" width="0.0822%" height="15" fill="rgb(209,110,37)" fg:x="906" fg:w="1"/><text x="74.6954%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.4454%" y="405" width="0.0822%" height="15" fill="rgb(249,89,12)" fg:x="906" fg:w="1"/><text x="74.6954%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.4454%" y="389" width="0.0822%" height="15" fill="rgb(226,27,33)" fg:x="906" fg:w="1"/><text x="74.6954%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.4454%" y="373" width="0.0822%" height="15" fill="rgb(213,82,22)" fg:x="906" fg:w="1"/><text x="74.6954%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="74.4454%" y="357" width="0.0822%" height="15" fill="rgb(248,140,0)" fg:x="906" fg:w="1"/><text x="74.6954%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="74.3632%" y="469" width="0.2465%" height="15" fill="rgb(228,106,3)" fg:x="905" fg:w="3"/><text x="74.6132%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5275%" y="453" width="0.0822%" height="15" fill="rgb(209,23,37)" fg:x="907" fg:w="1"/><text x="74.7775%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5275%" y="437" width="0.0822%" height="15" fill="rgb(241,93,50)" fg:x="907" fg:w="1"/><text x="74.7775%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.41%)</title><rect x="74.2810%" y="485" width="0.4108%" height="15" fill="rgb(253,46,43)" fg:x="904" fg:w="5"/><text x="74.5310%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.6097%" y="469" width="0.0822%" height="15" fill="rgb(226,206,43)" fg:x="908" fg:w="1"/><text x="74.8597%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.6097%" y="453" width="0.0822%" height="15" fill="rgb(217,54,7)" fg:x="908" fg:w="1"/><text x="74.8597%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.6097%" y="437" width="0.0822%" height="15" fill="rgb(223,5,52)" fg:x="908" fg:w="1"/><text x="74.8597%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="74.7740%" y="405" width="0.1643%" height="15" fill="rgb(206,52,46)" fg:x="910" fg:w="2"/><text x="75.0240%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9384%" y="389" width="0.0822%" height="15" fill="rgb(253,136,11)" fg:x="912" fg:w="1"/><text x="75.1884%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="74.6919%" y="485" width="0.4108%" height="15" fill="rgb(208,106,33)" fg:x="909" fg:w="5"/><text x="74.9419%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="74.6919%" y="469" width="0.4108%" height="15" fill="rgb(206,54,4)" fg:x="909" fg:w="5"/><text x="74.9419%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="74.6919%" y="453" width="0.4108%" height="15" fill="rgb(213,3,15)" fg:x="909" fg:w="5"/><text x="74.9419%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="74.6919%" y="437" width="0.4108%" height="15" fill="rgb(252,211,39)" fg:x="909" fg:w="5"/><text x="74.9419%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="74.7740%" y="421" width="0.3287%" height="15" fill="rgb(223,6,36)" fg:x="910" fg:w="4"/><text x="75.0240%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.9384%" y="405" width="0.1643%" height="15" fill="rgb(252,169,45)" fg:x="912" fg:w="2"/><text x="75.1884%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0205%" y="389" width="0.0822%" height="15" fill="rgb(212,48,26)" fg:x="913" fg:w="1"/><text x="75.2705%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1027%" y="469" width="0.0822%" height="15" fill="rgb(251,102,48)" fg:x="914" fg:w="1"/><text x="75.3527%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="75.1027%" y="453" width="0.0822%" height="15" fill="rgb(243,208,16)" fg:x="914" fg:w="1"/><text x="75.3527%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.1027%" y="437" width="0.0822%" height="15" fill="rgb(219,96,24)" fg:x="914" fg:w="1"/><text x="75.3527%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.1849%" y="437" width="0.1643%" height="15" fill="rgb(219,33,29)" fg:x="915" fg:w="2"/><text x="75.4349%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.1849%" y="421" width="0.1643%" height="15" fill="rgb(223,176,5)" fg:x="915" fg:w="2"/><text x="75.4349%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="75.1849%" y="405" width="0.1643%" height="15" fill="rgb(228,140,14)" fg:x="915" fg:w="2"/><text x="75.4349%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3492%" y="437" width="0.0822%" height="15" fill="rgb(217,179,31)" fg:x="917" fg:w="1"/><text x="75.5992%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.3492%" y="421" width="0.0822%" height="15" fill="rgb(230,9,30)" fg:x="917" fg:w="1"/><text x="75.5992%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3492%" y="405" width="0.0822%" height="15" fill="rgb(230,136,20)" fg:x="917" fg:w="1"/><text x="75.5992%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3492%" y="389" width="0.0822%" height="15" fill="rgb(215,210,22)" fg:x="917" fg:w="1"/><text x="75.5992%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="75.3492%" y="373" width="0.0822%" height="15" fill="rgb(218,43,5)" fg:x="917" fg:w="1"/><text x="75.5992%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="75.4314%" y="389" width="0.2465%" height="15" fill="rgb(216,11,5)" fg:x="918" fg:w="3"/><text x="75.6814%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="75.4314%" y="373" width="0.2465%" height="15" fill="rgb(209,82,29)" fg:x="918" fg:w="3"/><text x="75.6814%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.5136%" y="357" width="0.1643%" height="15" fill="rgb(244,115,12)" fg:x="919" fg:w="2"/><text x="75.7636%" y="367.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.58%)</title><rect x="75.1849%" y="469" width="0.5752%" height="15" fill="rgb(222,82,18)" fg:x="915" fg:w="7"/><text x="75.4349%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.58%)</title><rect x="75.1849%" y="453" width="0.5752%" height="15" fill="rgb(249,227,8)" fg:x="915" fg:w="7"/><text x="75.4349%" y="463.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (4 samples, 0.33%)</title><rect x="75.4314%" y="437" width="0.3287%" height="15" fill="rgb(253,141,45)" fg:x="918" fg:w="4"/><text x="75.6814%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.33%)</title><rect x="75.4314%" y="421" width="0.3287%" height="15" fill="rgb(234,184,4)" fg:x="918" fg:w="4"/><text x="75.6814%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="75.4314%" y="405" width="0.3287%" height="15" fill="rgb(218,194,23)" fg:x="918" fg:w="4"/><text x="75.6814%" y="415.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6779%" y="389" width="0.0822%" height="15" fill="rgb(235,66,41)" fg:x="921" fg:w="1"/><text x="75.9279%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6779%" y="373" width="0.0822%" height="15" fill="rgb(245,217,1)" fg:x="921" fg:w="1"/><text x="75.9279%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="75.6779%" y="357" width="0.0822%" height="15" fill="rgb(229,91,1)" fg:x="921" fg:w="1"/><text x="75.9279%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.6779%" y="341" width="0.0822%" height="15" fill="rgb(207,101,30)" fg:x="921" fg:w="1"/><text x="75.9279%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6779%" y="325" width="0.0822%" height="15" fill="rgb(223,82,49)" fg:x="921" fg:w="1"/><text x="75.9279%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.9244%" y="293" width="0.0822%" height="15" fill="rgb(218,167,17)" fg:x="924" fg:w="1"/><text x="76.1744%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.9244%" y="277" width="0.0822%" height="15" fill="rgb(208,103,14)" fg:x="924" fg:w="1"/><text x="76.1744%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.9244%" y="325" width="0.1643%" height="15" fill="rgb(238,20,8)" fg:x="924" fg:w="2"/><text x="76.1744%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9244%" y="309" width="0.1643%" height="15" fill="rgb(218,80,54)" fg:x="924" fg:w="2"/><text x="76.1744%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0066%" y="293" width="0.0822%" height="15" fill="rgb(240,144,17)" fg:x="925" fg:w="1"/><text x="76.2566%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.0066%" y="277" width="0.0822%" height="15" fill="rgb(245,27,50)" fg:x="925" fg:w="1"/><text x="76.2566%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="75.9244%" y="341" width="0.3287%" height="15" fill="rgb(251,51,7)" fg:x="924" fg:w="4"/><text x="76.1744%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="76.0887%" y="325" width="0.1643%" height="15" fill="rgb(245,217,29)" fg:x="926" fg:w="2"/><text x="76.3387%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1709%" y="309" width="0.0822%" height="15" fill="rgb(221,176,29)" fg:x="927" fg:w="1"/><text x="76.4209%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.1709%" y="293" width="0.0822%" height="15" fill="rgb(212,180,24)" fg:x="927" fg:w="1"/><text x="76.4209%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.1709%" y="277" width="0.0822%" height="15" fill="rgb(254,24,2)" fg:x="927" fg:w="1"/><text x="76.4209%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="75.8422%" y="373" width="0.4930%" height="15" fill="rgb(230,100,2)" fg:x="923" fg:w="6"/><text x="76.0922%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="75.9244%" y="357" width="0.4108%" height="15" fill="rgb(219,142,25)" fg:x="924" fg:w="5"/><text x="76.1744%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.2531%" y="341" width="0.0822%" height="15" fill="rgb(240,73,43)" fg:x="928" fg:w="1"/><text x="76.5031%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="76.2531%" y="325" width="0.0822%" height="15" fill="rgb(214,114,15)" fg:x="928" fg:w="1"/><text x="76.5031%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.58%)</title><rect x="75.8422%" y="405" width="0.5752%" height="15" fill="rgb(207,130,4)" fg:x="923" fg:w="7"/><text x="76.0922%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.58%)</title><rect x="75.8422%" y="389" width="0.5752%" height="15" fill="rgb(221,25,40)" fg:x="923" fg:w="7"/><text x="76.0922%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3353%" y="373" width="0.0822%" height="15" fill="rgb(241,184,7)" fg:x="929" fg:w="1"/><text x="76.5853%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.3353%" y="357" width="0.0822%" height="15" fill="rgb(235,159,4)" fg:x="929" fg:w="1"/><text x="76.5853%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.3353%" y="341" width="0.0822%" height="15" fill="rgb(214,87,48)" fg:x="929" fg:w="1"/><text x="76.5853%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.74%)</title><rect x="75.7601%" y="469" width="0.7395%" height="15" fill="rgb(246,198,24)" fg:x="922" fg:w="9"/><text x="76.0101%" y="479.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.74%)</title><rect x="75.7601%" y="453" width="0.7395%" height="15" fill="rgb(209,66,40)" fg:x="922" fg:w="9"/><text x="76.0101%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.74%)</title><rect x="75.7601%" y="437" width="0.7395%" height="15" fill="rgb(233,147,39)" fg:x="922" fg:w="9"/><text x="76.0101%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.66%)</title><rect x="75.8422%" y="421" width="0.6574%" height="15" fill="rgb(231,145,52)" fg:x="923" fg:w="8"/><text x="76.0922%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="76.4174%" y="405" width="0.0822%" height="15" fill="rgb(206,20,26)" fg:x="930" fg:w="1"/><text x="76.6674%" y="415.50"></text></g><g><title>engine::session::Session::close (30 samples, 2.47%)</title><rect x="74.1167%" y="549" width="2.4651%" height="15" fill="rgb(238,220,4)" fg:x="902" fg:w="30"/><text x="74.3667%" y="559.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (30 samples, 2.47%)</title><rect x="74.1167%" y="533" width="2.4651%" height="15" fill="rgb(252,195,42)" fg:x="902" fg:w="30"/><text x="74.3667%" y="543.50">en..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (29 samples, 2.38%)</title><rect x="74.1988%" y="517" width="2.3829%" height="15" fill="rgb(209,10,6)" fg:x="903" fg:w="29"/><text x="74.4488%" y="527.50">en..</text></g><g><title>engine::session::Session::check_for_changes (28 samples, 2.30%)</title><rect x="74.2810%" y="501" width="2.3007%" height="15" fill="rgb(229,3,52)" fg:x="904" fg:w="28"/><text x="74.5310%" y="511.50">e..</text></g><g><title>kernel::compare::any_entity_changes (18 samples, 1.48%)</title><rect x="75.1027%" y="485" width="1.4790%" height="15" fill="rgb(253,49,37)" fg:x="914" fg:w="18"/><text x="75.3527%" y="495.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="76.4996%" y="469" width="0.0822%" height="15" fill="rgb(240,103,49)" fg:x="931" fg:w="1"/><text x="76.7496%" y="479.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="76.4996%" y="453" width="0.0822%" height="15" fill="rgb(250,182,30)" fg:x="931" fg:w="1"/><text x="76.7496%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4996%" y="437" width="0.0822%" height="15" fill="rgb(248,8,30)" fg:x="931" fg:w="1"/><text x="76.7496%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.5818%" y="421" width="0.0822%" height="15" fill="rgb(237,120,30)" fg:x="932" fg:w="1"/><text x="76.8318%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.5818%" y="405" width="0.0822%" height="15" fill="rgb(221,146,34)" fg:x="932" fg:w="1"/><text x="76.8318%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.5818%" y="389" width="0.0822%" height="15" fill="rgb(242,55,13)" fg:x="932" fg:w="1"/><text x="76.8318%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.6639%" y="389" width="0.0822%" height="15" fill="rgb(242,112,31)" fg:x="933" fg:w="1"/><text x="76.9139%" y="399.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="76.7461%" y="325" width="0.0822%" height="15" fill="rgb(249,192,27)" fg:x="934" fg:w="1"/><text x="76.9961%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.8283%" y="293" width="0.0822%" height="15" fill="rgb(208,204,44)" fg:x="935" fg:w="1"/><text x="77.0783%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.8283%" y="277" width="0.0822%" height="15" fill="rgb(208,93,54)" fg:x="935" fg:w="1"/><text x="77.0783%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8283%" y="261" width="0.0822%" height="15" fill="rgb(242,1,31)" fg:x="935" fg:w="1"/><text x="77.0783%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="76.7461%" y="389" width="0.2465%" height="15" fill="rgb(241,83,25)" fg:x="934" fg:w="3"/><text x="76.9961%" y="399.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="76.7461%" y="373" width="0.2465%" height="15" fill="rgb(205,169,50)" fg:x="934" fg:w="3"/><text x="76.9961%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.25%)</title><rect x="76.7461%" y="357" width="0.2465%" height="15" fill="rgb(239,186,37)" fg:x="934" fg:w="3"/><text x="76.9961%" y="367.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.25%)</title><rect x="76.7461%" y="341" width="0.2465%" height="15" fill="rgb(205,221,10)" fg:x="934" fg:w="3"/><text x="76.9961%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (2 samples, 0.16%)</title><rect x="76.8283%" y="325" width="0.1643%" height="15" fill="rgb(218,196,15)" fg:x="935" fg:w="2"/><text x="77.0783%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="76.8283%" y="309" width="0.1643%" height="15" fill="rgb(218,196,35)" fg:x="935" fg:w="2"/><text x="77.0783%" y="319.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="76.9104%" y="293" width="0.0822%" height="15" fill="rgb(233,63,24)" fg:x="936" fg:w="1"/><text x="77.1604%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.9104%" y="277" width="0.0822%" height="15" fill="rgb(225,8,4)" fg:x="936" fg:w="1"/><text x="77.1604%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9104%" y="261" width="0.0822%" height="15" fill="rgb(234,105,35)" fg:x="936" fg:w="1"/><text x="77.1604%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9104%" y="245" width="0.0822%" height="15" fill="rgb(236,21,32)" fg:x="936" fg:w="1"/><text x="77.1604%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="77.0748%" y="341" width="0.0822%" height="15" fill="rgb(228,109,6)" fg:x="938" fg:w="1"/><text x="77.3248%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0748%" y="325" width="0.0822%" height="15" fill="rgb(229,215,31)" fg:x="938" fg:w="1"/><text x="77.3248%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.99%)</title><rect x="77.3213%" y="325" width="0.9860%" height="15" fill="rgb(221,52,54)" fg:x="941" fg:w="12"/><text x="77.5713%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (12 samples, 0.99%)</title><rect x="77.3213%" y="309" width="0.9860%" height="15" fill="rgb(252,129,43)" fg:x="941" fg:w="12"/><text x="77.5713%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.25%)</title><rect x="78.3073%" y="325" width="0.2465%" height="15" fill="rgb(248,183,27)" fg:x="953" fg:w="3"/><text x="78.5573%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="78.3895%" y="309" width="0.1643%" height="15" fill="rgb(250,0,22)" fg:x="954" fg:w="2"/><text x="78.6395%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="78.5538%" y="277" width="0.0822%" height="15" fill="rgb(213,166,10)" fg:x="956" fg:w="1"/><text x="78.8038%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="78.8003%" y="261" width="0.0822%" height="15" fill="rgb(207,163,36)" fg:x="959" fg:w="1"/><text x="79.0503%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.8003%" y="245" width="0.0822%" height="15" fill="rgb(208,122,22)" fg:x="959" fg:w="1"/><text x="79.0503%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8003%" y="229" width="0.0822%" height="15" fill="rgb(207,104,49)" fg:x="959" fg:w="1"/><text x="79.0503%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.8003%" y="213" width="0.0822%" height="15" fill="rgb(248,211,50)" fg:x="959" fg:w="1"/><text x="79.0503%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="78.8825%" y="229" width="0.0822%" height="15" fill="rgb(217,13,45)" fg:x="960" fg:w="1"/><text x="79.1325%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.8825%" y="213" width="0.0822%" height="15" fill="rgb(211,216,49)" fg:x="960" fg:w="1"/><text x="79.1325%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.8825%" y="197" width="0.0822%" height="15" fill="rgb(221,58,53)" fg:x="960" fg:w="1"/><text x="79.1325%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.25%)</title><rect x="78.8825%" y="261" width="0.2465%" height="15" fill="rgb(220,112,41)" fg:x="960" fg:w="3"/><text x="79.1325%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.25%)</title><rect x="78.8825%" y="245" width="0.2465%" height="15" fill="rgb(236,38,28)" fg:x="960" fg:w="3"/><text x="79.1325%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (2 samples, 0.16%)</title><rect x="78.9647%" y="229" width="0.1643%" height="15" fill="rgb(227,195,22)" fg:x="961" fg:w="2"/><text x="79.2147%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1290%" y="229" width="0.0822%" height="15" fill="rgb(214,55,33)" fg:x="963" fg:w="1"/><text x="79.3790%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.94%)</title><rect x="79.1290%" y="261" width="3.9441%" height="15" fill="rgb(248,80,13)" fg:x="963" fg:w="48"/><text x="79.3790%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.94%)</title><rect x="79.1290%" y="245" width="3.9441%" height="15" fill="rgb(238,52,6)" fg:x="963" fg:w="48"/><text x="79.3790%" y="255.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (47 samples, 3.86%)</title><rect x="79.2112%" y="229" width="3.8620%" height="15" fill="rgb(224,198,47)" fg:x="964" fg:w="47"/><text x="79.4612%" y="239.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="83.0731%" y="261" width="0.1643%" height="15" fill="rgb(233,171,20)" fg:x="1011" fg:w="2"/><text x="83.3231%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.1553%" y="245" width="0.0822%" height="15" fill="rgb(241,30,25)" fg:x="1012" fg:w="1"/><text x="83.4053%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 4.77%)</title><rect x="78.5538%" y="309" width="4.7658%" height="15" fill="rgb(207,171,38)" fg:x="956" fg:w="58"/><text x="78.8038%" y="319.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (58 samples, 4.77%)</title><rect x="78.5538%" y="293" width="4.7658%" height="15" fill="rgb(234,70,1)" fg:x="956" fg:w="58"/><text x="78.8038%" y="303.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (57 samples, 4.68%)</title><rect x="78.6360%" y="277" width="4.6836%" height="15" fill="rgb(232,178,18)" fg:x="957" fg:w="57"/><text x="78.8860%" y="287.50">regex..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="83.2375%" y="261" width="0.0822%" height="15" fill="rgb(241,78,40)" fg:x="1013" fg:w="1"/><text x="83.4875%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.25%)</title><rect x="83.4018%" y="293" width="0.2465%" height="15" fill="rgb(222,35,25)" fg:x="1015" fg:w="3"/><text x="83.6518%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="83.4840%" y="277" width="0.1643%" height="15" fill="rgb(207,92,16)" fg:x="1016" fg:w="2"/><text x="83.7340%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.4840%" y="261" width="0.1643%" height="15" fill="rgb(216,59,51)" fg:x="1016" fg:w="2"/><text x="83.7340%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="83.4840%" y="245" width="0.1643%" height="15" fill="rgb(213,80,28)" fg:x="1016" fg:w="2"/><text x="83.7340%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.58%)</title><rect x="83.3196%" y="309" width="0.5752%" height="15" fill="rgb(220,93,7)" fg:x="1014" fg:w="7"/><text x="83.5696%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="83.6483%" y="293" width="0.2465%" height="15" fill="rgb(225,24,44)" fg:x="1018" fg:w="3"/><text x="83.8983%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="83.8948%" y="309" width="0.0822%" height="15" fill="rgb(243,74,40)" fg:x="1021" fg:w="1"/><text x="84.1448%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="83.8948%" y="293" width="0.0822%" height="15" fill="rgb(228,39,7)" fg:x="1021" fg:w="1"/><text x="84.1448%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (68 samples, 5.59%)</title><rect x="78.5538%" y="325" width="5.5875%" height="15" fill="rgb(227,79,8)" fg:x="956" fg:w="68"/><text x="78.8038%" y="335.50">regex_a..</text></g><g><title>regex_syntax::hir::Hir::dot (2 samples, 0.16%)</title><rect x="83.9770%" y="309" width="0.1643%" height="15" fill="rgb(236,58,11)" fg:x="1022" fg:w="2"/><text x="84.2270%" y="319.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="84.0592%" y="293" width="0.0822%" height="15" fill="rgb(249,63,35)" fg:x="1023" fg:w="1"/><text x="84.3092%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.0592%" y="277" width="0.0822%" height="15" fill="rgb(252,114,16)" fg:x="1023" fg:w="1"/><text x="84.3092%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (86 samples, 7.07%)</title><rect x="77.1569%" y="341" width="7.0666%" height="15" fill="rgb(254,151,24)" fg:x="939" fg:w="86"/><text x="77.4069%" y="351.50">regex_aut..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="84.1413%" y="325" width="0.0822%" height="15" fill="rgb(253,54,39)" fg:x="1024" fg:w="1"/><text x="84.3913%" y="335.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="84.1413%" y="309" width="0.0822%" height="15" fill="rgb(243,25,45)" fg:x="1024" fg:w="1"/><text x="84.3913%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="84.2235%" y="309" width="0.0822%" height="15" fill="rgb(234,134,9)" fg:x="1025" fg:w="1"/><text x="84.4735%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="84.2235%" y="293" width="0.0822%" height="15" fill="rgb(227,166,31)" fg:x="1025" fg:w="1"/><text x="84.4735%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.2235%" y="277" width="0.0822%" height="15" fill="rgb(245,143,41)" fg:x="1025" fg:w="1"/><text x="84.4735%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.2235%" y="261" width="0.0822%" height="15" fill="rgb(238,181,32)" fg:x="1025" fg:w="1"/><text x="84.4735%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.2235%" y="245" width="0.0822%" height="15" fill="rgb(224,113,18)" fg:x="1025" fg:w="1"/><text x="84.4735%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="84.2235%" y="341" width="0.1643%" height="15" fill="rgb(240,229,28)" fg:x="1025" fg:w="2"/><text x="84.4735%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="84.2235%" y="325" width="0.1643%" height="15" fill="rgb(250,185,3)" fg:x="1025" fg:w="2"/><text x="84.4735%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="84.3057%" y="309" width="0.0822%" height="15" fill="rgb(212,59,25)" fg:x="1026" fg:w="1"/><text x="84.5557%" y="319.50"></text></g><g><title>regex::regex::string::Regex::new (91 samples, 7.48%)</title><rect x="76.9926%" y="389" width="7.4774%" height="15" fill="rgb(221,87,20)" fg:x="937" fg:w="91"/><text x="77.2426%" y="399.50">regex::reg..</text></g><g><title>regex::builders::Builder::build_one_string (91 samples, 7.48%)</title><rect x="76.9926%" y="373" width="7.4774%" height="15" fill="rgb(213,74,28)" fg:x="937" fg:w="91"/><text x="77.2426%" y="383.50">regex::bui..</text></g><g><title>regex_automata::meta::regex::Builder::build (91 samples, 7.48%)</title><rect x="76.9926%" y="357" width="7.4774%" height="15" fill="rgb(224,132,34)" fg:x="937" fg:w="91"/><text x="77.2426%" y="367.50">regex_auto..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="84.3878%" y="341" width="0.0822%" height="15" fill="rgb(222,101,24)" fg:x="1027" fg:w="1"/><text x="84.6378%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="84.3878%" y="325" width="0.0822%" height="15" fill="rgb(254,142,4)" fg:x="1027" fg:w="1"/><text x="84.6378%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="84.3878%" y="309" width="0.0822%" height="15" fill="rgb(230,229,49)" fg:x="1027" fg:w="1"/><text x="84.6378%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.5522%" y="309" width="0.0822%" height="15" fill="rgb(238,70,47)" fg:x="1029" fg:w="1"/><text x="84.8022%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.5522%" y="293" width="0.0822%" height="15" fill="rgb(231,160,17)" fg:x="1029" fg:w="1"/><text x="84.8022%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="84.5522%" y="277" width="0.0822%" height="15" fill="rgb(218,68,53)" fg:x="1029" fg:w="1"/><text x="84.8022%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="84.4700%" y="341" width="0.2465%" height="15" fill="rgb(236,111,10)" fg:x="1028" fg:w="3"/><text x="84.7200%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="84.4700%" y="325" width="0.2465%" height="15" fill="rgb(224,34,41)" fg:x="1028" fg:w="3"/><text x="84.7200%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6343%" y="309" width="0.0822%" height="15" fill="rgb(241,118,19)" fg:x="1030" fg:w="1"/><text x="84.8843%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.6343%" y="293" width="0.0822%" height="15" fill="rgb(238,129,25)" fg:x="1030" fg:w="1"/><text x="84.8843%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="84.6343%" y="277" width="0.0822%" height="15" fill="rgb(238,22,31)" fg:x="1030" fg:w="1"/><text x="84.8843%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (100 samples, 8.22%)</title><rect x="76.6639%" y="405" width="8.2169%" height="15" fill="rgb(222,174,48)" fg:x="933" fg:w="100"/><text x="76.9139%" y="415.50">indefinite:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.41%)</title><rect x="84.4700%" y="389" width="0.4108%" height="15" fill="rgb(206,152,40)" fg:x="1028" fg:w="5"/><text x="84.7200%" y="399.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.41%)</title><rect x="84.4700%" y="373" width="0.4108%" height="15" fill="rgb(218,99,54)" fg:x="1028" fg:w="5"/><text x="84.7200%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.41%)</title><rect x="84.4700%" y="357" width="0.4108%" height="15" fill="rgb(220,174,26)" fg:x="1028" fg:w="5"/><text x="84.7200%" y="367.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="84.7165%" y="341" width="0.1643%" height="15" fill="rgb(245,116,9)" fg:x="1031" fg:w="2"/><text x="84.9665%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="84.7987%" y="325" width="0.0822%" height="15" fill="rgb(209,72,35)" fg:x="1032" fg:w="1"/><text x="85.0487%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.7987%" y="309" width="0.0822%" height="15" fill="rgb(226,126,21)" fg:x="1032" fg:w="1"/><text x="85.0487%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.9630%" y="357" width="0.0822%" height="15" fill="rgb(227,192,1)" fg:x="1034" fg:w="1"/><text x="85.2130%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="84.9630%" y="341" width="0.0822%" height="15" fill="rgb(237,180,29)" fg:x="1034" fg:w="1"/><text x="85.2130%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.9630%" y="325" width="0.0822%" height="15" fill="rgb(230,197,35)" fg:x="1034" fg:w="1"/><text x="85.2130%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.9630%" y="309" width="0.0822%" height="15" fill="rgb(246,193,31)" fg:x="1034" fg:w="1"/><text x="85.2130%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.9630%" y="293" width="0.0822%" height="15" fill="rgb(241,36,4)" fg:x="1034" fg:w="1"/><text x="85.2130%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.25%)</title><rect x="84.8809%" y="389" width="0.2465%" height="15" fill="rgb(241,130,17)" fg:x="1033" fg:w="3"/><text x="85.1309%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="84.9630%" y="373" width="0.1643%" height="15" fill="rgb(206,137,32)" fg:x="1034" fg:w="2"/><text x="85.2130%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="85.0452%" y="357" width="0.0822%" height="15" fill="rgb(237,228,51)" fg:x="1035" fg:w="1"/><text x="85.2952%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="85.0452%" y="341" width="0.0822%" height="15" fill="rgb(243,6,42)" fg:x="1035" fg:w="1"/><text x="85.2952%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.0452%" y="325" width="0.0822%" height="15" fill="rgb(251,74,28)" fg:x="1035" fg:w="1"/><text x="85.2952%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="85.2095%" y="325" width="0.0822%" height="15" fill="rgb(218,20,49)" fg:x="1037" fg:w="1"/><text x="85.4595%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="85.2095%" y="309" width="0.0822%" height="15" fill="rgb(238,28,14)" fg:x="1037" fg:w="1"/><text x="85.4595%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.25%)</title><rect x="85.1274%" y="373" width="0.2465%" height="15" fill="rgb(229,40,46)" fg:x="1036" fg:w="3"/><text x="85.3774%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.25%)</title><rect x="85.1274%" y="357" width="0.2465%" height="15" fill="rgb(244,195,20)" fg:x="1036" fg:w="3"/><text x="85.3774%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.25%)</title><rect x="85.1274%" y="341" width="0.2465%" height="15" fill="rgb(253,56,35)" fg:x="1036" fg:w="3"/><text x="85.3774%" y="351.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="85.2917%" y="325" width="0.0822%" height="15" fill="rgb(210,149,44)" fg:x="1038" fg:w="1"/><text x="85.5417%" y="335.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.49%)</title><rect x="85.1274%" y="389" width="0.4930%" height="15" fill="rgb(240,135,12)" fg:x="1036" fg:w="6"/><text x="85.3774%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.25%)</title><rect x="85.3739%" y="373" width="0.2465%" height="15" fill="rgb(251,24,50)" fg:x="1039" fg:w="3"/><text x="85.6239%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.25%)</title><rect x="85.3739%" y="357" width="0.2465%" height="15" fill="rgb(243,200,47)" fg:x="1039" fg:w="3"/><text x="85.6239%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.25%)</title><rect x="85.3739%" y="341" width="0.2465%" height="15" fill="rgb(224,166,26)" fg:x="1039" fg:w="3"/><text x="85.6239%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="85.3739%" y="325" width="0.2465%" height="15" fill="rgb(233,0,47)" fg:x="1039" fg:w="3"/><text x="85.6239%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="85.3739%" y="309" width="0.2465%" height="15" fill="rgb(253,80,5)" fg:x="1039" fg:w="3"/><text x="85.6239%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="85.4560%" y="293" width="0.1643%" height="15" fill="rgb(214,133,25)" fg:x="1040" fg:w="2"/><text x="85.7060%" y="303.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="85.6204%" y="373" width="0.0822%" height="15" fill="rgb(209,27,14)" fg:x="1042" fg:w="1"/><text x="85.8704%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.7025%" y="341" width="0.0822%" height="15" fill="rgb(219,102,51)" fg:x="1043" fg:w="1"/><text x="85.9525%" y="351.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.7025%" y="325" width="0.0822%" height="15" fill="rgb(237,18,16)" fg:x="1043" fg:w="1"/><text x="85.9525%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="85.7025%" y="309" width="0.0822%" height="15" fill="rgb(241,85,17)" fg:x="1043" fg:w="1"/><text x="85.9525%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7847%" y="341" width="0.0822%" height="15" fill="rgb(236,90,42)" fg:x="1044" fg:w="1"/><text x="86.0347%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.9491%" y="309" width="0.0822%" height="15" fill="rgb(249,57,21)" fg:x="1046" fg:w="1"/><text x="86.1991%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.9491%" y="293" width="0.0822%" height="15" fill="rgb(243,12,36)" fg:x="1046" fg:w="1"/><text x="86.1991%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.9491%" y="277" width="0.0822%" height="15" fill="rgb(253,128,47)" fg:x="1046" fg:w="1"/><text x="86.1991%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.9491%" y="261" width="0.0822%" height="15" fill="rgb(207,33,20)" fg:x="1046" fg:w="1"/><text x="86.1991%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="85.8669%" y="341" width="0.2465%" height="15" fill="rgb(233,215,35)" fg:x="1045" fg:w="3"/><text x="86.1169%" y="351.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="85.8669%" y="325" width="0.2465%" height="15" fill="rgb(249,188,52)" fg:x="1045" fg:w="3"/><text x="86.1169%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="86.0312%" y="309" width="0.0822%" height="15" fill="rgb(225,12,32)" fg:x="1047" fg:w="1"/><text x="86.2812%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="86.0312%" y="293" width="0.0822%" height="15" fill="rgb(247,98,14)" fg:x="1047" fg:w="1"/><text x="86.2812%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.0312%" y="277" width="0.0822%" height="15" fill="rgb(247,219,48)" fg:x="1047" fg:w="1"/><text x="86.2812%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.1134%" y="309" width="0.0822%" height="15" fill="rgb(253,60,48)" fg:x="1048" fg:w="1"/><text x="86.3634%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (12 samples, 0.99%)</title><rect x="86.1134%" y="325" width="0.9860%" height="15" fill="rgb(245,15,52)" fg:x="1048" fg:w="12"/><text x="86.3634%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (11 samples, 0.90%)</title><rect x="86.1956%" y="309" width="0.9039%" height="15" fill="rgb(220,133,28)" fg:x="1049" fg:w="11"/><text x="86.4456%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="87.0994%" y="325" width="0.0822%" height="15" fill="rgb(217,180,4)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.0994%" y="309" width="0.0822%" height="15" fill="rgb(251,24,1)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.0994%" y="293" width="0.0822%" height="15" fill="rgb(212,185,49)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.0994%" y="277" width="0.0822%" height="15" fill="rgb(215,175,22)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.0994%" y="261" width="0.0822%" height="15" fill="rgb(250,205,14)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.0994%" y="245" width="0.0822%" height="15" fill="rgb(225,211,22)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0994%" y="229" width="0.0822%" height="15" fill="rgb(251,179,42)" fg:x="1060" fg:w="1"/><text x="87.3494%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.3459%" y="293" width="0.0822%" height="15" fill="rgb(208,216,51)" fg:x="1063" fg:w="1"/><text x="87.5959%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.3459%" y="277" width="0.0822%" height="15" fill="rgb(235,36,11)" fg:x="1063" fg:w="1"/><text x="87.5959%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.3459%" y="261" width="0.0822%" height="15" fill="rgb(213,189,28)" fg:x="1063" fg:w="1"/><text x="87.5959%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="87.4281%" y="293" width="0.0822%" height="15" fill="rgb(227,203,42)" fg:x="1064" fg:w="1"/><text x="87.6781%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.4281%" y="277" width="0.0822%" height="15" fill="rgb(244,72,36)" fg:x="1064" fg:w="1"/><text x="87.6781%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.4281%" y="261" width="0.0822%" height="15" fill="rgb(213,53,17)" fg:x="1064" fg:w="1"/><text x="87.6781%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="87.4281%" y="245" width="0.0822%" height="15" fill="rgb(207,167,3)" fg:x="1064" fg:w="1"/><text x="87.6781%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="87.4281%" y="229" width="0.0822%" height="15" fill="rgb(216,98,30)" fg:x="1064" fg:w="1"/><text x="87.6781%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.25%)</title><rect x="87.5103%" y="293" width="0.2465%" height="15" fill="rgb(236,123,15)" fg:x="1065" fg:w="3"/><text x="87.7603%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="87.5924%" y="277" width="0.1643%" height="15" fill="rgb(248,81,50)" fg:x="1066" fg:w="2"/><text x="87.8424%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (6 samples, 0.49%)</title><rect x="87.8389%" y="277" width="0.4930%" height="15" fill="rgb(214,120,4)" fg:x="1069" fg:w="6"/><text x="88.0889%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (6 samples, 0.49%)</title><rect x="87.8389%" y="261" width="0.4930%" height="15" fill="rgb(208,179,34)" fg:x="1069" fg:w="6"/><text x="88.0889%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.23%)</title><rect x="87.1816%" y="325" width="1.2325%" height="15" fill="rgb(227,140,7)" fg:x="1061" fg:w="15"/><text x="87.4316%" y="335.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.23%)</title><rect x="87.1816%" y="309" width="1.2325%" height="15" fill="rgb(214,22,6)" fg:x="1061" fg:w="15"/><text x="87.4316%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (8 samples, 0.66%)</title><rect x="87.7568%" y="293" width="0.6574%" height="15" fill="rgb(207,137,27)" fg:x="1068" fg:w="8"/><text x="88.0068%" y="303.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="88.3320%" y="277" width="0.0822%" height="15" fill="rgb(210,8,46)" fg:x="1075" fg:w="1"/><text x="88.5820%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="88.4141%" y="325" width="0.0822%" height="15" fill="rgb(240,16,54)" fg:x="1076" fg:w="1"/><text x="88.6641%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.4141%" y="309" width="0.0822%" height="15" fill="rgb(211,209,29)" fg:x="1076" fg:w="1"/><text x="88.6641%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="88.4141%" y="293" width="0.0822%" height="15" fill="rgb(226,228,24)" fg:x="1076" fg:w="1"/><text x="88.6641%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="88.4141%" y="277" width="0.0822%" height="15" fill="rgb(222,84,9)" fg:x="1076" fg:w="1"/><text x="88.6641%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.5785%" y="293" width="0.0822%" height="15" fill="rgb(234,203,30)" fg:x="1078" fg:w="1"/><text x="88.8285%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.7428%" y="277" width="0.0822%" height="15" fill="rgb(238,109,14)" fg:x="1080" fg:w="1"/><text x="88.9928%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="88.8250%" y="277" width="0.0822%" height="15" fill="rgb(233,206,34)" fg:x="1081" fg:w="1"/><text x="89.0750%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.8250%" y="261" width="0.0822%" height="15" fill="rgb(220,167,47)" fg:x="1081" fg:w="1"/><text x="89.0750%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.8250%" y="245" width="0.0822%" height="15" fill="rgb(238,105,10)" fg:x="1081" fg:w="1"/><text x="89.0750%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.8250%" y="229" width="0.0822%" height="15" fill="rgb(213,227,17)" fg:x="1081" fg:w="1"/><text x="89.0750%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="89.4823%" y="213" width="0.1643%" height="15" fill="rgb(217,132,38)" fg:x="1089" fg:w="2"/><text x="89.7323%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="89.6467%" y="213" width="0.1643%" height="15" fill="rgb(242,146,4)" fg:x="1091" fg:w="2"/><text x="89.8967%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="89.8110%" y="213" width="0.0822%" height="15" fill="rgb(212,61,9)" fg:x="1093" fg:w="1"/><text x="90.0610%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8110%" y="197" width="0.0822%" height="15" fill="rgb(247,126,22)" fg:x="1093" fg:w="1"/><text x="90.0610%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.8932%" y="213" width="0.0822%" height="15" fill="rgb(220,196,2)" fg:x="1094" fg:w="1"/><text x="90.1432%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.8932%" y="197" width="0.0822%" height="15" fill="rgb(208,46,4)" fg:x="1094" fg:w="1"/><text x="90.1432%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.8932%" y="181" width="0.0822%" height="15" fill="rgb(252,104,46)" fg:x="1094" fg:w="1"/><text x="90.1432%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.8932%" y="165" width="0.0822%" height="15" fill="rgb(237,152,48)" fg:x="1094" fg:w="1"/><text x="90.1432%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3040%" y="181" width="0.0822%" height="15" fill="rgb(221,59,37)" fg:x="1099" fg:w="1"/><text x="90.5540%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (10 samples, 0.82%)</title><rect x="89.9753%" y="213" width="0.8217%" height="15" fill="rgb(209,202,51)" fg:x="1095" fg:w="10"/><text x="90.2253%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (9 samples, 0.74%)</title><rect x="90.0575%" y="197" width="0.7395%" height="15" fill="rgb(228,81,30)" fg:x="1096" fg:w="9"/><text x="90.3075%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="90.3862%" y="181" width="0.4108%" height="15" fill="rgb(227,42,39)" fg:x="1100" fg:w="5"/><text x="90.6362%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="90.7970%" y="197" width="0.0822%" height="15" fill="rgb(221,26,2)" fg:x="1105" fg:w="1"/><text x="91.0470%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.7970%" y="181" width="0.0822%" height="15" fill="rgb(254,61,31)" fg:x="1105" fg:w="1"/><text x="91.0470%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (44 samples, 3.62%)</title><rect x="90.7970%" y="213" width="3.6154%" height="15" fill="rgb(222,173,38)" fg:x="1105" fg:w="44"/><text x="91.0470%" y="223.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (43 samples, 3.53%)</title><rect x="90.8792%" y="197" width="3.5333%" height="15" fill="rgb(218,50,12)" fg:x="1106" fg:w="43"/><text x="91.1292%" y="207.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (43 samples, 3.53%)</title><rect x="90.8792%" y="181" width="3.5333%" height="15" fill="rgb(223,88,40)" fg:x="1106" fg:w="43"/><text x="91.1292%" y="191.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.4125%" y="213" width="0.0822%" height="15" fill="rgb(237,54,19)" fg:x="1149" fg:w="1"/><text x="94.6625%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 6.16%)</title><rect x="88.5785%" y="309" width="6.1627%" height="15" fill="rgb(251,129,25)" fg:x="1078" fg:w="75"/><text x="88.8285%" y="319.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (74 samples, 6.08%)</title><rect x="88.6606%" y="293" width="6.0805%" height="15" fill="rgb(238,97,19)" fg:x="1079" fg:w="74"/><text x="88.9106%" y="303.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.83%)</title><rect x="88.9071%" y="277" width="5.8340%" height="15" fill="rgb(240,169,18)" fg:x="1082" fg:w="71"/><text x="89.1571%" y="287.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (71 samples, 5.83%)</title><rect x="88.9071%" y="261" width="5.8340%" height="15" fill="rgb(230,187,49)" fg:x="1082" fg:w="71"/><text x="89.1571%" y="271.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (71 samples, 5.83%)</title><rect x="88.9071%" y="245" width="5.8340%" height="15" fill="rgb(209,44,26)" fg:x="1082" fg:w="71"/><text x="89.1571%" y="255.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (71 samples, 5.83%)</title><rect x="88.9071%" y="229" width="5.8340%" height="15" fill="rgb(244,0,6)" fg:x="1082" fg:w="71"/><text x="89.1571%" y="239.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (3 samples, 0.25%)</title><rect x="94.4947%" y="213" width="0.2465%" height="15" fill="rgb(248,18,21)" fg:x="1150" fg:w="3"/><text x="94.7447%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.6590%" y="197" width="0.0822%" height="15" fill="rgb(245,180,19)" fg:x="1152" fg:w="1"/><text x="94.9090%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.6590%" y="181" width="0.0822%" height="15" fill="rgb(252,118,36)" fg:x="1152" fg:w="1"/><text x="94.9090%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6590%" y="165" width="0.0822%" height="15" fill="rgb(210,224,19)" fg:x="1152" fg:w="1"/><text x="94.9090%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="94.7412%" y="309" width="0.0822%" height="15" fill="rgb(218,30,24)" fg:x="1153" fg:w="1"/><text x="94.9912%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7412%" y="293" width="0.0822%" height="15" fill="rgb(219,75,50)" fg:x="1153" fg:w="1"/><text x="94.9912%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7412%" y="277" width="0.0822%" height="15" fill="rgb(234,72,50)" fg:x="1153" fg:w="1"/><text x="94.9912%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.7412%" y="261" width="0.0822%" height="15" fill="rgb(219,100,48)" fg:x="1153" fg:w="1"/><text x="94.9912%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="94.9055%" y="293" width="0.1643%" height="15" fill="rgb(253,5,41)" fg:x="1155" fg:w="2"/><text x="95.1555%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.0698%" y="293" width="0.0822%" height="15" fill="rgb(247,181,11)" fg:x="1157" fg:w="1"/><text x="95.3198%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0698%" y="277" width="0.0822%" height="15" fill="rgb(222,223,25)" fg:x="1157" fg:w="1"/><text x="95.3198%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.0698%" y="261" width="0.0822%" height="15" fill="rgb(214,198,28)" fg:x="1157" fg:w="1"/><text x="95.3198%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="95.1520%" y="293" width="0.0822%" height="15" fill="rgb(230,46,43)" fg:x="1158" fg:w="1"/><text x="95.4020%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1520%" y="277" width="0.0822%" height="15" fill="rgb(233,65,53)" fg:x="1158" fg:w="1"/><text x="95.4020%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1520%" y="261" width="0.0822%" height="15" fill="rgb(221,121,27)" fg:x="1158" fg:w="1"/><text x="95.4020%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1520%" y="245" width="0.0822%" height="15" fill="rgb(247,70,47)" fg:x="1158" fg:w="1"/><text x="95.4020%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="95.2342%" y="293" width="0.0822%" height="15" fill="rgb(228,85,35)" fg:x="1159" fg:w="1"/><text x="95.4842%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (84 samples, 6.90%)</title><rect x="88.4963%" y="325" width="6.9022%" height="15" fill="rgb(209,50,18)" fg:x="1077" fg:w="84"/><text x="88.7463%" y="335.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.58%)</title><rect x="94.8233%" y="309" width="0.5752%" height="15" fill="rgb(250,19,35)" fg:x="1154" fg:w="7"/><text x="95.0733%" y="319.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.3164%" y="293" width="0.0822%" height="15" fill="rgb(253,107,29)" fg:x="1160" fg:w="1"/><text x="95.5664%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (115 samples, 9.45%)</title><rect x="86.1134%" y="341" width="9.4495%" height="15" fill="rgb(252,179,29)" fg:x="1048" fg:w="115"/><text x="86.3634%" y="351.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="95.3985%" y="325" width="0.1643%" height="15" fill="rgb(238,194,6)" fg:x="1161" fg:w="2"/><text x="95.6485%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.5629%" y="309" width="0.0822%" height="15" fill="rgb(238,164,29)" fg:x="1163" fg:w="1"/><text x="95.8129%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.6450%" y="293" width="0.0822%" height="15" fill="rgb(224,25,9)" fg:x="1164" fg:w="1"/><text x="95.8950%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="95.6450%" y="277" width="0.0822%" height="15" fill="rgb(244,153,23)" fg:x="1164" fg:w="1"/><text x="95.8950%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="95.5629%" y="341" width="0.2465%" height="15" fill="rgb(212,203,14)" fg:x="1163" fg:w="3"/><text x="95.8129%" y="351.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="95.5629%" y="325" width="0.2465%" height="15" fill="rgb(220,164,20)" fg:x="1163" fg:w="3"/><text x="95.8129%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.6450%" y="309" width="0.1643%" height="15" fill="rgb(222,203,48)" fg:x="1164" fg:w="2"/><text x="95.8950%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.7272%" y="293" width="0.0822%" height="15" fill="rgb(215,159,22)" fg:x="1165" fg:w="1"/><text x="95.9772%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="95.7272%" y="277" width="0.0822%" height="15" fill="rgb(216,183,47)" fg:x="1165" fg:w="1"/><text x="95.9772%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="95.7272%" y="261" width="0.0822%" height="15" fill="rgb(229,195,25)" fg:x="1165" fg:w="1"/><text x="95.9772%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.7272%" y="245" width="0.0822%" height="15" fill="rgb(224,132,51)" fg:x="1165" fg:w="1"/><text x="95.9772%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (135 samples, 11.09%)</title><rect x="84.8809%" y="405" width="11.0929%" height="15" fill="rgb(240,63,7)" fg:x="1033" fg:w="135"/><text x="85.1309%" y="415.50">indefinite::rule..</text></g><g><title>regex::regex::string::Regex::new (126 samples, 10.35%)</title><rect x="85.6204%" y="389" width="10.3533%" height="15" fill="rgb(249,182,41)" fg:x="1042" fg:w="126"/><text x="85.8704%" y="399.50">regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (125 samples, 10.27%)</title><rect x="85.7025%" y="373" width="10.2712%" height="15" fill="rgb(243,47,26)" fg:x="1043" fg:w="125"/><text x="85.9525%" y="383.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (125 samples, 10.27%)</title><rect x="85.7025%" y="357" width="10.2712%" height="15" fill="rgb(233,48,2)" fg:x="1043" fg:w="125"/><text x="85.9525%" y="367.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="95.8094%" y="341" width="0.1643%" height="15" fill="rgb(244,165,34)" fg:x="1166" fg:w="2"/><text x="96.0594%" y="351.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="95.8094%" y="325" width="0.1643%" height="15" fill="rgb(207,89,7)" fg:x="1166" fg:w="2"/><text x="96.0594%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="95.8094%" y="309" width="0.1643%" height="15" fill="rgb(244,117,36)" fg:x="1166" fg:w="2"/><text x="96.0594%" y="319.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="95.8094%" y="293" width="0.1643%" height="15" fill="rgb(226,144,34)" fg:x="1166" fg:w="2"/><text x="96.0594%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="95.8915%" y="277" width="0.0822%" height="15" fill="rgb(213,23,19)" fg:x="1167" fg:w="1"/><text x="96.1415%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8915%" y="261" width="0.0822%" height="15" fill="rgb(217,75,12)" fg:x="1167" fg:w="1"/><text x="96.1415%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.9737%" y="373" width="0.0822%" height="15" fill="rgb(224,159,17)" fg:x="1168" fg:w="1"/><text x="96.2237%" y="383.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.9737%" y="357" width="0.0822%" height="15" fill="rgb(217,118,1)" fg:x="1168" fg:w="1"/><text x="96.2237%" y="367.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.9737%" y="341" width="0.0822%" height="15" fill="rgb(232,180,48)" fg:x="1168" fg:w="1"/><text x="96.2237%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.9737%" y="325" width="0.0822%" height="15" fill="rgb(230,27,33)" fg:x="1168" fg:w="1"/><text x="96.2237%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.9737%" y="309" width="0.0822%" height="15" fill="rgb(205,31,21)" fg:x="1168" fg:w="1"/><text x="96.2237%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.1380%" y="293" width="0.0822%" height="15" fill="rgb(253,59,4)" fg:x="1170" fg:w="1"/><text x="96.3880%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.1380%" y="277" width="0.0822%" height="15" fill="rgb(224,201,9)" fg:x="1170" fg:w="1"/><text x="96.3880%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.1380%" y="261" width="0.0822%" height="15" fill="rgb(229,206,30)" fg:x="1170" fg:w="1"/><text x="96.3880%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1380%" y="325" width="0.1643%" height="15" fill="rgb(212,67,47)" fg:x="1170" fg:w="2"/><text x="96.3880%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1380%" y="309" width="0.1643%" height="15" fill="rgb(211,96,50)" fg:x="1170" fg:w="2"/><text x="96.3880%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2202%" y="293" width="0.0822%" height="15" fill="rgb(252,114,18)" fg:x="1171" fg:w="1"/><text x="96.4702%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.3024%" y="325" width="0.0822%" height="15" fill="rgb(223,58,37)" fg:x="1172" fg:w="1"/><text x="96.5524%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3024%" y="309" width="0.0822%" height="15" fill="rgb(237,70,4)" fg:x="1172" fg:w="1"/><text x="96.5524%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.3024%" y="293" width="0.0822%" height="15" fill="rgb(244,85,46)" fg:x="1172" fg:w="1"/><text x="96.5524%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3024%" y="277" width="0.0822%" height="15" fill="rgb(223,39,52)" fg:x="1172" fg:w="1"/><text x="96.5524%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.3024%" y="261" width="0.0822%" height="15" fill="rgb(218,200,14)" fg:x="1172" fg:w="1"/><text x="96.5524%" y="271.50"></text></g><g><title>&lt;alloc::vec::drain::Drain&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3024%" y="245" width="0.0822%" height="15" fill="rgb(208,171,16)" fg:x="1172" fg:w="1"/><text x="96.5524%" y="255.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="96.3846%" y="325" width="0.0822%" height="15" fill="rgb(234,200,18)" fg:x="1173" fg:w="1"/><text x="96.6346%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.3846%" y="309" width="0.0822%" height="15" fill="rgb(228,45,11)" fg:x="1173" fg:w="1"/><text x="96.6346%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.3846%" y="293" width="0.0822%" height="15" fill="rgb(237,182,11)" fg:x="1173" fg:w="1"/><text x="96.6346%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5489%" y="309" width="0.0822%" height="15" fill="rgb(241,175,49)" fg:x="1175" fg:w="1"/><text x="96.7989%" y="319.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="96.6311%" y="309" width="0.0822%" height="15" fill="rgb(247,38,35)" fg:x="1176" fg:w="1"/><text x="96.8811%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="96.6311%" y="293" width="0.0822%" height="15" fill="rgb(228,39,49)" fg:x="1176" fg:w="1"/><text x="96.8811%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="96.7132%" y="293" width="0.0822%" height="15" fill="rgb(226,101,26)" fg:x="1177" fg:w="1"/><text x="96.9632%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="96.7954%" y="277" width="0.0822%" height="15" fill="rgb(206,141,19)" fg:x="1178" fg:w="1"/><text x="97.0454%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (6 samples, 0.49%)</title><rect x="96.4667%" y="325" width="0.4930%" height="15" fill="rgb(211,200,13)" fg:x="1174" fg:w="6"/><text x="96.7167%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.25%)</title><rect x="96.7132%" y="309" width="0.2465%" height="15" fill="rgb(241,121,6)" fg:x="1177" fg:w="3"/><text x="96.9632%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="96.7954%" y="293" width="0.1643%" height="15" fill="rgb(234,221,29)" fg:x="1178" fg:w="2"/><text x="97.0454%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.8776%" y="277" width="0.0822%" height="15" fill="rgb(229,136,5)" fg:x="1179" fg:w="1"/><text x="97.1276%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="96.9597%" y="325" width="0.1643%" height="15" fill="rgb(238,36,11)" fg:x="1180" fg:w="2"/><text x="97.2097%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="96.9597%" y="309" width="0.1643%" height="15" fill="rgb(251,55,41)" fg:x="1180" fg:w="2"/><text x="97.2097%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.9597%" y="293" width="0.1643%" height="15" fill="rgb(242,34,40)" fg:x="1180" fg:w="2"/><text x="97.2097%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="97.0419%" y="277" width="0.0822%" height="15" fill="rgb(215,42,17)" fg:x="1181" fg:w="1"/><text x="97.2919%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="97.0419%" y="261" width="0.0822%" height="15" fill="rgb(207,44,46)" fg:x="1181" fg:w="1"/><text x="97.2919%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="97.0419%" y="245" width="0.0822%" height="15" fill="rgb(211,206,28)" fg:x="1181" fg:w="1"/><text x="97.2919%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="97.0419%" y="229" width="0.0822%" height="15" fill="rgb(237,167,16)" fg:x="1181" fg:w="1"/><text x="97.2919%" y="239.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.15%)</title><rect x="96.0559%" y="373" width="1.1504%" height="15" fill="rgb(233,66,6)" fg:x="1169" fg:w="14"/><text x="96.3059%" y="383.50"></text></g><g><title>regex::builders::Builder::build_one_string (14 samples, 1.15%)</title><rect x="96.0559%" y="357" width="1.1504%" height="15" fill="rgb(246,123,29)" fg:x="1169" fg:w="14"/><text x="96.3059%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (14 samples, 1.15%)</title><rect x="96.0559%" y="341" width="1.1504%" height="15" fill="rgb(209,62,40)" fg:x="1169" fg:w="14"/><text x="96.3059%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="97.1241%" y="325" width="0.0822%" height="15" fill="rgb(218,4,25)" fg:x="1182" fg:w="1"/><text x="97.3741%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="97.1241%" y="309" width="0.0822%" height="15" fill="rgb(253,91,49)" fg:x="1182" fg:w="1"/><text x="97.3741%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.1241%" y="293" width="0.0822%" height="15" fill="rgb(228,155,29)" fg:x="1182" fg:w="1"/><text x="97.3741%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.1241%" y="277" width="0.0822%" height="15" fill="rgb(243,57,37)" fg:x="1182" fg:w="1"/><text x="97.3741%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.1241%" y="261" width="0.0822%" height="15" fill="rgb(244,167,17)" fg:x="1182" fg:w="1"/><text x="97.3741%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (253 samples, 20.79%)</title><rect x="76.5818%" y="485" width="20.7888%" height="15" fill="rgb(207,181,38)" fg:x="932" fg:w="253"/><text x="76.8318%" y="495.50">&lt;&amp;kernel::model::entry::Entry as ..</text></g><g><title>plugins_core::looking::model::qualify_name (253 samples, 20.79%)</title><rect x="76.5818%" y="469" width="20.7888%" height="15" fill="rgb(211,8,23)" fg:x="932" fg:w="253"/><text x="76.8318%" y="479.50">plugins_core::looking::model::qua..</text></g><g><title>indefinite::indefinite (253 samples, 20.79%)</title><rect x="76.5818%" y="453" width="20.7888%" height="15" fill="rgb(235,11,44)" fg:x="932" fg:w="253"/><text x="76.8318%" y="463.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (253 samples, 20.79%)</title><rect x="76.5818%" y="437" width="20.7888%" height="15" fill="rgb(248,18,52)" fg:x="932" fg:w="253"/><text x="76.8318%" y="447.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (252 samples, 20.71%)</title><rect x="76.6639%" y="421" width="20.7067%" height="15" fill="rgb(208,4,7)" fg:x="933" fg:w="252"/><text x="76.9139%" y="431.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (17 samples, 1.40%)</title><rect x="95.9737%" y="405" width="1.3969%" height="15" fill="rgb(240,17,39)" fg:x="1168" fg:w="17"/><text x="96.2237%" y="415.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.40%)</title><rect x="95.9737%" y="389" width="1.3969%" height="15" fill="rgb(207,170,3)" fg:x="1168" fg:w="17"/><text x="96.2237%" y="399.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="97.2062%" y="373" width="0.1643%" height="15" fill="rgb(236,100,52)" fg:x="1183" fg:w="2"/><text x="97.4562%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="97.2884%" y="357" width="0.0822%" height="15" fill="rgb(246,78,51)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="97.2884%" y="341" width="0.0822%" height="15" fill="rgb(211,17,15)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="97.2884%" y="325" width="0.0822%" height="15" fill="rgb(209,59,46)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="97.2884%" y="309" width="0.0822%" height="15" fill="rgb(210,92,25)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.2884%" y="293" width="0.0822%" height="15" fill="rgb(238,174,52)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.2884%" y="277" width="0.0822%" height="15" fill="rgb(230,73,7)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.2884%" y="261" width="0.0822%" height="15" fill="rgb(243,124,40)" fg:x="1184" fg:w="1"/><text x="97.5384%" y="271.50"></text></g><g><title>kernel::model::EntityRef::into_entry (1 samples, 0.08%)</title><rect x="97.3706%" y="485" width="0.0822%" height="15" fill="rgb(244,170,11)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.3706%" y="469" width="0.0822%" height="15" fill="rgb(207,114,54)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="479.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="97.3706%" y="453" width="0.0822%" height="15" fill="rgb(205,42,20)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="97.3706%" y="437" width="0.0822%" height="15" fill="rgb(230,30,28)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="447.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="97.3706%" y="421" width="0.0822%" height="15" fill="rgb(205,73,54)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.3706%" y="405" width="0.0822%" height="15" fill="rgb(254,227,23)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.3706%" y="389" width="0.0822%" height="15" fill="rgb(228,202,34)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="97.3706%" y="373" width="0.0822%" height="15" fill="rgb(222,225,37)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="383.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="97.3706%" y="357" width="0.0822%" height="15" fill="rgb(221,14,54)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="367.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="97.3706%" y="341" width="0.0822%" height="15" fill="rgb(254,102,2)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.3706%" y="325" width="0.0822%" height="15" fill="rgb(232,104,17)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.3706%" y="309" width="0.0822%" height="15" fill="rgb(250,220,14)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.3706%" y="293" width="0.0822%" height="15" fill="rgb(241,158,9)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.3706%" y="277" width="0.0822%" height="15" fill="rgb(246,9,43)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.3706%" y="261" width="0.0822%" height="15" fill="rgb(206,73,33)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.3706%" y="245" width="0.0822%" height="15" fill="rgb(222,79,8)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.3706%" y="229" width="0.0822%" height="15" fill="rgb(234,8,54)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.3706%" y="213" width="0.0822%" height="15" fill="rgb(209,134,38)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.3706%" y="197" width="0.0822%" height="15" fill="rgb(230,127,29)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.3706%" y="181" width="0.0822%" height="15" fill="rgb(242,44,41)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="97.3706%" y="165" width="0.0822%" height="15" fill="rgb(222,56,43)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3706%" y="149" width="0.0822%" height="15" fill="rgb(238,39,47)" fg:x="1185" fg:w="1"/><text x="97.6206%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.4528%" y="453" width="0.0822%" height="15" fill="rgb(226,79,43)" fg:x="1186" fg:w="1"/><text x="97.7028%" y="463.50"></text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::scopes::Action&gt;::perform (256 samples, 21.04%)</title><rect x="76.5818%" y="517" width="21.0353%" height="15" fill="rgb(242,105,53)" fg:x="932" fg:w="256"/><text x="76.8318%" y="527.50">&lt;plugins_core::looking::actions::..</text></g><g><title>plugins_core::looking::model::new_area_observation (256 samples, 21.04%)</title><rect x="76.5818%" y="501" width="21.0353%" height="15" fill="rgb(251,132,46)" fg:x="932" fg:w="256"/><text x="76.8318%" y="511.50">plugins_core::looking::model::new..</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="97.4528%" y="485" width="0.1643%" height="15" fill="rgb(231,77,14)" fg:x="1186" fg:w="2"/><text x="97.7028%" y="495.50"></text></g><g><title>kernel::model::Entity::load_scope (2 samples, 0.16%)</title><rect x="97.4528%" y="469" width="0.1643%" height="15" fill="rgb(240,135,9)" fg:x="1186" fg:w="2"/><text x="97.7028%" y="479.50"></text></g><g><title>&lt;plugins_core::moving::model::Occupyable as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (1 samples, 0.08%)</title><rect x="97.5349%" y="453" width="0.0822%" height="15" fill="rgb(248,109,14)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.5349%" y="437" width="0.0822%" height="15" fill="rgb(227,146,52)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="97.5349%" y="421" width="0.0822%" height="15" fill="rgb(232,54,3)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (1 samples, 0.08%)</title><rect x="97.5349%" y="405" width="0.0822%" height="15" fill="rgb(229,201,43)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="415.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.5349%" y="389" width="0.0822%" height="15" fill="rgb(252,161,33)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="399.50"></text></g><g><title>engine::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="97.5349%" y="373" width="0.0822%" height="15" fill="rgb(226,146,40)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="97.5349%" y="357" width="0.0822%" height="15" fill="rgb(219,47,25)" fg:x="1187" fg:w="1"/><text x="97.7849%" y="367.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_name (1 samples, 0.08%)</title><rect x="97.6171%" y="517" width="0.0822%" height="15" fill="rgb(250,135,13)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="97.6171%" y="501" width="0.0822%" height="15" fill="rgb(219,229,18)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="511.50"></text></g><g><title>engine::internal::Entities::prepare_entity (1 samples, 0.08%)</title><rect x="97.6171%" y="485" width="0.0822%" height="15" fill="rgb(217,152,27)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="97.6171%" y="469" width="0.0822%" height="15" fill="rgb(225,71,47)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="479.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="97.6171%" y="453" width="0.0822%" height="15" fill="rgb(220,139,14)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="463.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="97.6171%" y="437" width="0.0822%" height="15" fill="rgb(247,54,32)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.6171%" y="421" width="0.0822%" height="15" fill="rgb(252,131,39)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6171%" y="405" width="0.0822%" height="15" fill="rgb(210,108,39)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.6171%" y="389" width="0.0822%" height="15" fill="rgb(205,23,29)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6171%" y="373" width="0.0822%" height="15" fill="rgb(246,139,46)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.6171%" y="357" width="0.0822%" height="15" fill="rgb(250,81,26)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6171%" y="341" width="0.0822%" height="15" fill="rgb(214,104,7)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6171%" y="325" width="0.0822%" height="15" fill="rgb(233,189,8)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6171%" y="309" width="0.0822%" height="15" fill="rgb(228,141,17)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6171%" y="293" width="0.0822%" height="15" fill="rgb(247,157,1)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.6171%" y="277" width="0.0822%" height="15" fill="rgb(249,225,5)" fg:x="1188" fg:w="1"/><text x="97.8671%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.6993%" y="421" width="0.0822%" height="15" fill="rgb(242,55,13)" fg:x="1189" fg:w="1"/><text x="97.9493%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.6993%" y="405" width="0.0822%" height="15" fill="rgb(230,49,50)" fg:x="1189" fg:w="1"/><text x="97.9493%" y="415.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.6993%" y="469" width="0.1643%" height="15" fill="rgb(241,111,38)" fg:x="1189" fg:w="2"/><text x="97.9493%" y="479.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.6993%" y="453" width="0.1643%" height="15" fill="rgb(252,155,4)" fg:x="1189" fg:w="2"/><text x="97.9493%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="97.6993%" y="437" width="0.1643%" height="15" fill="rgb(212,69,32)" fg:x="1189" fg:w="2"/><text x="97.9493%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.7814%" y="421" width="0.0822%" height="15" fill="rgb(243,107,47)" fg:x="1190" fg:w="1"/><text x="98.0314%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynMessage&gt; (3 samples, 0.25%)</title><rect x="97.6993%" y="485" width="0.2465%" height="15" fill="rgb(247,130,12)" fg:x="1189" fg:w="3"/><text x="97.9493%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8636%" y="469" width="0.0822%" height="15" fill="rgb(233,74,16)" fg:x="1191" fg:w="1"/><text x="98.1136%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.9458%" y="245" width="0.0822%" height="15" fill="rgb(208,58,18)" fg:x="1192" fg:w="1"/><text x="98.1958%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="97.9458%" y="229" width="0.0822%" height="15" fill="rgb(242,225,1)" fg:x="1192" fg:w="1"/><text x="98.1958%" y="239.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (2 samples, 0.16%)</title><rect x="97.9458%" y="405" width="0.1643%" height="15" fill="rgb(249,39,40)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="415.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="97.9458%" y="389" width="0.1643%" height="15" fill="rgb(207,72,44)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="97.9458%" y="373" width="0.1643%" height="15" fill="rgb(215,193,12)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="97.9458%" y="357" width="0.1643%" height="15" fill="rgb(248,41,39)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="367.50"></text></g><g><title>kernel::model::EntityRef::into_entry (2 samples, 0.16%)</title><rect x="97.9458%" y="341" width="0.1643%" height="15" fill="rgb(253,85,4)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="97.9458%" y="325" width="0.1643%" height="15" fill="rgb(243,70,31)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="97.9458%" y="309" width="0.1643%" height="15" fill="rgb(253,195,26)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="319.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="97.9458%" y="293" width="0.1643%" height="15" fill="rgb(243,42,11)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="303.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="97.9458%" y="277" width="0.1643%" height="15" fill="rgb(239,66,17)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="287.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="97.9458%" y="261" width="0.1643%" height="15" fill="rgb(217,132,21)" fg:x="1192" fg:w="2"/><text x="98.1958%" y="271.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.0279%" y="245" width="0.0822%" height="15" fill="rgb(252,202,21)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="255.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="98.0279%" y="229" width="0.0822%" height="15" fill="rgb(233,98,36)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="239.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.0279%" y="213" width="0.0822%" height="15" fill="rgb(216,153,54)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="223.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.0279%" y="197" width="0.0822%" height="15" fill="rgb(250,99,7)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="207.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.0279%" y="181" width="0.0822%" height="15" fill="rgb(207,56,50)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="191.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.0279%" y="165" width="0.0822%" height="15" fill="rgb(244,61,34)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="175.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.0279%" y="149" width="0.0822%" height="15" fill="rgb(241,50,38)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="159.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.0279%" y="133" width="0.0822%" height="15" fill="rgb(212,166,30)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="143.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.08%)</title><rect x="98.0279%" y="117" width="0.0822%" height="15" fill="rgb(249,127,32)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="127.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.08%)</title><rect x="98.0279%" y="101" width="0.0822%" height="15" fill="rgb(209,103,0)" fg:x="1193" fg:w="1"/><text x="98.2779%" y="111.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.25%)</title><rect x="98.1923%" y="245" width="0.2465%" height="15" fill="rgb(238,209,51)" fg:x="1195" fg:w="3"/><text x="98.4423%" y="255.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.25%)</title><rect x="98.1923%" y="229" width="0.2465%" height="15" fill="rgb(237,56,23)" fg:x="1195" fg:w="3"/><text x="98.4423%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="98.1923%" y="213" width="0.2465%" height="15" fill="rgb(215,153,46)" fg:x="1195" fg:w="3"/><text x="98.4423%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="98.1923%" y="197" width="0.2465%" height="15" fill="rgb(224,49,31)" fg:x="1195" fg:w="3"/><text x="98.4423%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="98.1923%" y="181" width="0.2465%" height="15" fill="rgb(250,18,42)" fg:x="1195" fg:w="3"/><text x="98.4423%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="98.1923%" y="165" width="0.2465%" height="15" fill="rgb(215,176,39)" fg:x="1195" fg:w="3"/><text x="98.4423%" y="175.50"></text></g><g><title>kernel::model::_::&lt;impl serde::de::Deserialize for kernel::model::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.2744%" y="149" width="0.1643%" height="15" fill="rgb(223,77,29)" fg:x="1196" fg:w="2"/><text x="98.5244%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.2744%" y="133" width="0.1643%" height="15" fill="rgb(234,94,52)" fg:x="1196" fg:w="2"/><text x="98.5244%" y="143.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2744%" y="117" width="0.1643%" height="15" fill="rgb(220,154,50)" fg:x="1196" fg:w="2"/><text x="98.5244%" y="127.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.3566%" y="101" width="0.0822%" height="15" fill="rgb(212,11,10)" fg:x="1197" fg:w="1"/><text x="98.6066%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="98.3566%" y="85" width="0.0822%" height="15" fill="rgb(205,166,19)" fg:x="1197" fg:w="1"/><text x="98.6066%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3566%" y="69" width="0.0822%" height="15" fill="rgb(244,198,16)" fg:x="1197" fg:w="1"/><text x="98.6066%" y="79.50"></text></g><g><title>plugins_core::tools::get_contained_keys (5 samples, 0.41%)</title><rect x="98.1101%" y="405" width="0.4108%" height="15" fill="rgb(219,69,12)" fg:x="1194" fg:w="5"/><text x="98.3601%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (5 samples, 0.41%)</title><rect x="98.1101%" y="389" width="0.4108%" height="15" fill="rgb(245,30,7)" fg:x="1194" fg:w="5"/><text x="98.3601%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (4 samples, 0.33%)</title><rect x="98.1923%" y="373" width="0.3287%" height="15" fill="rgb(218,221,48)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="383.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (4 samples, 0.33%)</title><rect x="98.1923%" y="357" width="0.3287%" height="15" fill="rgb(216,66,15)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="367.50"></text></g><g><title>core::iter::adapters::try_process (4 samples, 0.33%)</title><rect x="98.1923%" y="341" width="0.3287%" height="15" fill="rgb(226,122,50)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="98.1923%" y="325" width="0.3287%" height="15" fill="rgb(239,156,16)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.33%)</title><rect x="98.1923%" y="309" width="0.3287%" height="15" fill="rgb(224,27,38)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="319.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (4 samples, 0.33%)</title><rect x="98.1923%" y="293" width="0.3287%" height="15" fill="rgb(224,39,27)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="303.50"></text></g><g><title>engine::internal::Entities::prepare_entity (4 samples, 0.33%)</title><rect x="98.1923%" y="277" width="0.3287%" height="15" fill="rgb(215,92,29)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="287.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.33%)</title><rect x="98.1923%" y="261" width="0.3287%" height="15" fill="rgb(207,159,16)" fg:x="1195" fg:w="4"/><text x="98.4423%" y="271.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.4388%" y="245" width="0.0822%" height="15" fill="rgb(238,163,47)" fg:x="1198" fg:w="1"/><text x="98.6888%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4388%" y="229" width="0.0822%" height="15" fill="rgb(219,91,49)" fg:x="1198" fg:w="1"/><text x="98.6888%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.4388%" y="213" width="0.0822%" height="15" fill="rgb(227,167,31)" fg:x="1198" fg:w="1"/><text x="98.6888%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4388%" y="197" width="0.0822%" height="15" fill="rgb(234,80,54)" fg:x="1198" fg:w="1"/><text x="98.6888%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.66%)</title><rect x="97.9458%" y="437" width="0.6574%" height="15" fill="rgb(212,114,2)" fg:x="1192" fg:w="8"/><text x="98.1958%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (8 samples, 0.66%)</title><rect x="97.9458%" y="421" width="0.6574%" height="15" fill="rgb(234,50,24)" fg:x="1192" fg:w="8"/><text x="98.1958%" y="431.50"></text></g><g><title>plugins_core::tools::get_occupant_keys (1 samples, 0.08%)</title><rect x="98.5210%" y="405" width="0.0822%" height="15" fill="rgb(221,68,8)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="415.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="98.5210%" y="389" width="0.0822%" height="15" fill="rgb(254,180,31)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="399.50"></text></g><g><title>kernel::model::Entity::load_scope (1 samples, 0.08%)</title><rect x="98.5210%" y="373" width="0.0822%" height="15" fill="rgb(247,130,50)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5210%" y="357" width="0.0822%" height="15" fill="rgb(211,109,4)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5210%" y="341" width="0.0822%" height="15" fill="rgb(238,50,21)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5210%" y="325" width="0.0822%" height="15" fill="rgb(225,57,45)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.5210%" y="309" width="0.0822%" height="15" fill="rgb(209,196,50)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.5210%" y="293" width="0.0822%" height="15" fill="rgb(242,140,13)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.5210%" y="277" width="0.0822%" height="15" fill="rgb(217,111,7)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5210%" y="261" width="0.0822%" height="15" fill="rgb(253,193,51)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.5210%" y="245" width="0.0822%" height="15" fill="rgb(252,70,29)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.5210%" y="229" width="0.0822%" height="15" fill="rgb(232,127,12)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.5210%" y="213" width="0.0822%" height="15" fill="rgb(211,180,21)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.5210%" y="197" width="0.0822%" height="15" fill="rgb(229,72,13)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.5210%" y="181" width="0.0822%" height="15" fill="rgb(240,211,49)" fg:x="1199" fg:w="1"/><text x="98.7710%" y="191.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.6853%" y="229" width="0.1643%" height="15" fill="rgb(219,149,40)" fg:x="1201" fg:w="2"/><text x="98.9353%" y="239.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7675%" y="213" width="0.0822%" height="15" fill="rgb(210,127,46)" fg:x="1202" fg:w="1"/><text x="99.0175%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7675%" y="197" width="0.0822%" height="15" fill="rgb(220,106,7)" fg:x="1202" fg:w="1"/><text x="99.0175%" y="207.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.7675%" y="181" width="0.0822%" height="15" fill="rgb(249,31,22)" fg:x="1202" fg:w="1"/><text x="99.0175%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.7675%" y="165" width="0.0822%" height="15" fill="rgb(253,1,49)" fg:x="1202" fg:w="1"/><text x="99.0175%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.7675%" y="149" width="0.0822%" height="15" fill="rgb(227,144,33)" fg:x="1202" fg:w="1"/><text x="99.0175%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.25%)</title><rect x="98.6853%" y="245" width="0.2465%" height="15" fill="rgb(249,163,44)" fg:x="1201" fg:w="3"/><text x="98.9353%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.8496%" y="229" width="0.0822%" height="15" fill="rgb(234,15,39)" fg:x="1203" fg:w="1"/><text x="99.0996%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="98.6853%" y="293" width="0.3287%" height="15" fill="rgb(207,66,16)" fg:x="1201" fg:w="4"/><text x="98.9353%" y="303.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.33%)</title><rect x="98.6853%" y="277" width="0.3287%" height="15" fill="rgb(233,112,24)" fg:x="1201" fg:w="4"/><text x="98.9353%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="98.6853%" y="261" width="0.3287%" height="15" fill="rgb(230,90,22)" fg:x="1201" fg:w="4"/><text x="98.9353%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.9318%" y="245" width="0.0822%" height="15" fill="rgb(229,61,13)" fg:x="1204" fg:w="1"/><text x="99.1818%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.9318%" y="229" width="0.0822%" height="15" fill="rgb(225,57,24)" fg:x="1204" fg:w="1"/><text x="99.1818%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.41%)</title><rect x="98.6853%" y="341" width="0.4108%" height="15" fill="rgb(208,169,48)" fg:x="1201" fg:w="5"/><text x="98.9353%" y="351.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (5 samples, 0.41%)</title><rect x="98.6853%" y="325" width="0.4108%" height="15" fill="rgb(244,218,51)" fg:x="1201" fg:w="5"/><text x="98.9353%" y="335.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="98.6853%" y="309" width="0.4108%" height="15" fill="rgb(214,148,10)" fg:x="1201" fg:w="5"/><text x="98.9353%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.0140%" y="293" width="0.0822%" height="15" fill="rgb(225,174,27)" fg:x="1205" fg:w="1"/><text x="99.2640%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.0140%" y="277" width="0.0822%" height="15" fill="rgb(230,96,26)" fg:x="1205" fg:w="1"/><text x="99.2640%" y="287.50"></text></g><g><title>&lt;plugins_rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.49%)</title><rect x="98.6853%" y="373" width="0.4930%" height="15" fill="rgb(232,10,30)" fg:x="1201" fg:w="6"/><text x="98.9353%" y="383.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="98.6853%" y="357" width="0.4930%" height="15" fill="rgb(222,8,50)" fg:x="1201" fg:w="6"/><text x="98.9353%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.0961%" y="341" width="0.0822%" height="15" fill="rgb(213,81,27)" fg:x="1206" fg:w="1"/><text x="99.3461%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="99.1783%" y="325" width="0.1643%" height="15" fill="rgb(245,50,10)" fg:x="1207" fg:w="2"/><text x="99.4283%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2605%" y="309" width="0.0822%" height="15" fill="rgb(216,100,18)" fg:x="1208" fg:w="1"/><text x="99.5105%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="99.2605%" y="293" width="0.0822%" height="15" fill="rgb(236,147,54)" fg:x="1208" fg:w="1"/><text x="99.5105%" y="303.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="99.3426%" y="309" width="0.0822%" height="15" fill="rgb(205,143,26)" fg:x="1209" fg:w="1"/><text x="99.5926%" y="319.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Props&gt;::serialize (3 samples, 0.25%)</title><rect x="99.3426%" y="325" width="0.2465%" height="15" fill="rgb(236,26,9)" fg:x="1209" fg:w="3"/><text x="99.5926%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="99.4248%" y="309" width="0.1643%" height="15" fill="rgb(221,165,53)" fg:x="1210" fg:w="2"/><text x="99.6748%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.4248%" y="293" width="0.1643%" height="15" fill="rgb(214,110,17)" fg:x="1210" fg:w="2"/><text x="99.6748%" y="303.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="99.4248%" y="277" width="0.1643%" height="15" fill="rgb(237,197,12)" fg:x="1210" fg:w="2"/><text x="99.6748%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.5070%" y="261" width="0.0822%" height="15" fill="rgb(205,84,17)" fg:x="1211" fg:w="1"/><text x="99.7570%" y="271.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="99.5892%" y="277" width="0.0822%" height="15" fill="rgb(237,18,45)" fg:x="1212" fg:w="1"/><text x="99.8392%" y="287.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.5892%" y="261" width="0.0822%" height="15" fill="rgb(221,87,14)" fg:x="1212" fg:w="1"/><text x="99.8392%" y="271.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (22 samples, 1.81%)</title><rect x="97.9458%" y="469" width="1.8077%" height="15" fill="rgb(238,186,15)" fg:x="1192" fg:w="22"/><text x="98.1958%" y="479.50">&lt;..</text></g><g><title>core::iter::adapters::try_process (22 samples, 1.81%)</title><rect x="97.9458%" y="453" width="1.8077%" height="15" fill="rgb(208,115,11)" fg:x="1192" fg:w="22"/><text x="98.1958%" y="463.50">c..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (14 samples, 1.15%)</title><rect x="98.6031%" y="437" width="1.1504%" height="15" fill="rgb(254,175,0)" fg:x="1200" fg:w="14"/><text x="98.8531%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (14 samples, 1.15%)</title><rect x="98.6031%" y="421" width="1.1504%" height="15" fill="rgb(227,24,42)" fg:x="1200" fg:w="14"/><text x="98.8531%" y="431.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (14 samples, 1.15%)</title><rect x="98.6031%" y="405" width="1.1504%" height="15" fill="rgb(223,211,37)" fg:x="1200" fg:w="14"/><text x="98.8531%" y="415.50"></text></g><g><title>&lt;plugins_rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (13 samples, 1.07%)</title><rect x="98.6853%" y="389" width="1.0682%" height="15" fill="rgb(235,49,27)" fg:x="1201" fg:w="13"/><text x="98.9353%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (7 samples, 0.58%)</title><rect x="99.1783%" y="373" width="0.5752%" height="15" fill="rgb(254,97,51)" fg:x="1207" fg:w="7"/><text x="99.4283%" y="383.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::Entity&gt;::serialize (7 samples, 0.58%)</title><rect x="99.1783%" y="357" width="0.5752%" height="15" fill="rgb(249,51,40)" fg:x="1207" fg:w="7"/><text x="99.4283%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.58%)</title><rect x="99.1783%" y="341" width="0.5752%" height="15" fill="rgb(210,128,45)" fg:x="1207" fg:w="7"/><text x="99.4283%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="99.5892%" y="325" width="0.1643%" height="15" fill="rgb(224,137,50)" fg:x="1212" fg:w="2"/><text x="99.8392%" y="335.50"></text></g><g><title>kernel::model::_::&lt;impl serde::ser::Serialize for kernel::model::ScopeValue&gt;::serialize (2 samples, 0.16%)</title><rect x="99.5892%" y="309" width="0.1643%" height="15" fill="rgb(242,15,9)" fg:x="1212" fg:w="2"/><text x="99.8392%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.5892%" y="293" width="0.1643%" height="15" fill="rgb(233,187,41)" fg:x="1212" fg:w="2"/><text x="99.8392%" y="303.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.6713%" y="277" width="0.0822%" height="15" fill="rgb(227,2,29)" fg:x="1213" fg:w="1"/><text x="99.9213%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.6713%" y="261" width="0.0822%" height="15" fill="rgb(222,70,3)" fg:x="1213" fg:w="1"/><text x="99.9213%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.6713%" y="245" width="0.0822%" height="15" fill="rgb(213,11,42)" fg:x="1213" fg:w="1"/><text x="99.9213%" y="255.50"></text></g><g><title>&lt;plugins_rpc_proto::Surroundings as core::convert::TryFrom&lt;&amp;kernel::surround::Surroundings&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="99.7535%" y="469" width="0.0822%" height="15" fill="rgb(225,150,9)" fg:x="1214" fg:w="1"/><text x="100.0035%" y="479.50"></text></g><g><title>&lt;kernel::model::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.7535%" y="453" width="0.0822%" height="15" fill="rgb(230,162,45)" fg:x="1214" fg:w="1"/><text x="100.0035%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.7535%" y="437" width="0.0822%" height="15" fill="rgb(222,14,52)" fg:x="1214" fg:w="1"/><text x="100.0035%" y="447.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.7535%" y="421" width="0.0822%" height="15" fill="rgb(254,198,14)" fg:x="1214" fg:w="1"/><text x="100.0035%" y="431.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.7535%" y="405" width="0.0822%" height="15" fill="rgb(220,217,30)" fg:x="1214" fg:w="1"/><text x="100.0035%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.7535%" y="389" width="0.0822%" height="15" fill="rgb(215,146,41)" fg:x="1214" fg:w="1"/><text x="100.0035%" y="399.50"></text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (27 samples, 2.22%)</title><rect x="97.6993%" y="517" width="2.2186%" height="15" fill="rgb(217,27,36)" fg:x="1189" fg:w="27"/><text x="97.9493%" y="527.50">k..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (27 samples, 2.22%)</title><rect x="97.6993%" y="501" width="2.2186%" height="15" fill="rgb(219,218,39)" fg:x="1189" fg:w="27"/><text x="97.9493%" y="511.50">&lt;..</text></g><g><title>plugins_rpc::querying::have_surroundings (24 samples, 1.97%)</title><rect x="97.9458%" y="485" width="1.9721%" height="15" fill="rgb(219,4,42)" fg:x="1192" fg:w="24"/><text x="98.1958%" y="495.50">p..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8357%" y="469" width="0.0822%" height="15" fill="rgb(249,119,36)" fg:x="1215" fg:w="1"/><text x="100.0857%" y="479.50"></text></g><g><title>all (1,217 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(209,23,33)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="911.50"></text></g><g><title>simple-255e00ed (1,217 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(211,10,0)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="895.50">simple-255e00ed</text></g><g><title>_start (1,217 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(208,99,37)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="879.50">_start</text></g><g><title>__libc_start_main (1,217 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(213,132,31)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="863.50">__libc_start_main</text></g><g><title>main (1,217 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(243,129,40)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (1,217 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(210,66,33)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,217 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(209,189,4)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,217 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(214,107,37)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,217 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(245,88,54)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,217 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(205,146,20)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="767.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,217 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(220,161,25)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,217 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(215,152,15)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,217 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(233,192,44)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,217 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(240,170,46)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,217 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(207,104,33)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="687.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,217 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(219,21,39)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,217 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(214,133,29)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="655.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,217 samples, 100.00%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(226,93,6)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="639.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,217 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(252,222,34)" fg:x="0" fg:w="1217"/><text x="0.2500%" y="623.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (328 samples, 26.95%)</title><rect x="73.0485%" y="597" width="26.9515%" height="15" fill="rgb(252,92,48)" fg:x="889" fg:w="328"/><text x="73.2985%" y="607.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (328 samples, 26.95%)</title><rect x="73.0485%" y="581" width="26.9515%" height="15" fill="rgb(245,223,24)" fg:x="889" fg:w="328"/><text x="73.2985%" y="591.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (328 samples, 26.95%)</title><rect x="73.0485%" y="565" width="26.9515%" height="15" fill="rgb(205,176,3)" fg:x="889" fg:w="328"/><text x="73.2985%" y="575.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (285 samples, 23.42%)</title><rect x="76.5818%" y="549" width="23.4182%" height="15" fill="rgb(235,151,15)" fg:x="932" fg:w="285"/><text x="76.8318%" y="559.50">engine::session::Session::evaluate_an..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (285 samples, 23.42%)</title><rect x="76.5818%" y="533" width="23.4182%" height="15" fill="rgb(237,209,11)" fg:x="932" fg:w="285"/><text x="76.8318%" y="543.50">engine::perform::StandardPerformer::e..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="99.9178%" y="517" width="0.0822%" height="15" fill="rgb(243,227,24)" fg:x="1216" fg:w="1"/><text x="100.1678%" y="527.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="99.9178%" y="501" width="0.0822%" height="15" fill="rgb(239,193,16)" fg:x="1216" fg:w="1"/><text x="100.1678%" y="511.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="99.9178%" y="485" width="0.0822%" height="15" fill="rgb(231,27,9)" fg:x="1216" fg:w="1"/><text x="100.1678%" y="495.50"></text></g></svg></svg>