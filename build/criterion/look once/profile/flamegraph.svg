<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1078" onload="init(evt)" viewBox="0 0 1200 1078" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1078" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1061.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1061.00"> </text><svg id="frames" x="10" width="1180" total_samples="1260"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="661" width="0.0794%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="645" width="0.0794%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="0.0000%" y="629" width="0.0794%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0794%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="0.1587%" y="565" width="0.2381%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="3"/><text x="0.4087%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.2381%" y="549" width="0.1587%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="2"/><text x="0.4881%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="0.3968%" y="549" width="0.1587%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="0.6468%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.3968%" y="533" width="0.1587%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="2"/><text x="0.6468%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.5556%" y="533" width="0.0794%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="1"/><text x="0.8056%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.5556%" y="517" width="0.0794%" height="15" fill="rgb(220,122,19)" fg:x="7" fg:w="1"/><text x="0.8056%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.3968%" y="565" width="0.4762%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="6"/><text x="0.6468%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="0.5556%" y="549" width="0.3175%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="4"/><text x="0.8056%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.6349%" y="533" width="0.2381%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="3"/><text x="0.8849%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.7143%" y="517" width="0.1587%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="2"/><text x="0.9643%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7937%" y="501" width="0.0794%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="1"/><text x="1.0437%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.95%)</title><rect x="0.0000%" y="677" width="0.9524%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="12"/><text x="0.2500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (11 samples, 0.87%)</title><rect x="0.0794%" y="661" width="0.8730%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="11"/><text x="0.3294%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="0.1587%" y="645" width="0.7937%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="10"/><text x="0.4087%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (10 samples, 0.79%)</title><rect x="0.1587%" y="629" width="0.7937%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="10"/><text x="0.4087%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="0.1587%" y="613" width="0.7937%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="10"/><text x="0.4087%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="0.1587%" y="597" width="0.7937%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="10"/><text x="0.4087%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="0.1587%" y="581" width="0.7937%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="10"/><text x="0.4087%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::Write::write_fmt::Adapter&lt;std::sys::unix::stdio::Stderr&gt;&gt; (1 samples, 0.08%)</title><rect x="0.8730%" y="565" width="0.0794%" height="15" fill="rgb(221,5,38)" fg:x="11" fg:w="1"/><text x="1.1230%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1111%" y="565" width="0.0794%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="1"/><text x="1.3611%" y="575.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="1.0317%" y="597" width="0.3175%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="4"/><text x="1.2817%" y="607.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="1.1111%" y="581" width="0.2381%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="3"/><text x="1.3611%" y="591.50"></text></g><g><title>_dl_catch_error (2 samples, 0.16%)</title><rect x="1.1905%" y="565" width="0.1587%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="2"/><text x="1.4405%" y="575.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1905%" y="549" width="0.1587%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="2"/><text x="1.4405%" y="559.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1905%" y="533" width="0.1587%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="2"/><text x="1.4405%" y="543.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="1.1905%" y="517" width="0.1587%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="2"/><text x="1.4405%" y="527.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.48%)</title><rect x="0.9524%" y="677" width="0.4762%" height="15" fill="rgb(209,103,24)" fg:x="12" fg:w="6"/><text x="1.2024%" y="687.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.48%)</title><rect x="0.9524%" y="661" width="0.4762%" height="15" fill="rgb(229,88,8)" fg:x="12" fg:w="6"/><text x="1.2024%" y="671.50"></text></g><g><title>engine::session::Session::initialize (6 samples, 0.48%)</title><rect x="0.9524%" y="645" width="0.4762%" height="15" fill="rgb(213,181,19)" fg:x="12" fg:w="6"/><text x="1.2024%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="0.9524%" y="629" width="0.4762%" height="15" fill="rgb(254,191,54)" fg:x="12" fg:w="6"/><text x="1.2024%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="0.9524%" y="613" width="0.4762%" height="15" fill="rgb(241,83,37)" fg:x="12" fg:w="6"/><text x="1.2024%" y="623.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="1.3492%" y="597" width="0.0794%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="1"/><text x="1.5992%" y="607.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="1.3492%" y="581" width="0.0794%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="1"/><text x="1.5992%" y="591.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.3492%" y="565" width="0.0794%" height="15" fill="rgb(245,192,40)" fg:x="17" fg:w="1"/><text x="1.5992%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="1.4286%" y="613" width="0.1587%" height="15" fill="rgb(238,167,29)" fg:x="18" fg:w="2"/><text x="1.6786%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="1.4286%" y="597" width="0.1587%" height="15" fill="rgb(232,182,51)" fg:x="18" fg:w="2"/><text x="1.6786%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5079%" y="581" width="0.0794%" height="15" fill="rgb(231,60,39)" fg:x="19" fg:w="1"/><text x="1.7579%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="1.5873%" y="581" width="0.0794%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="1"/><text x="1.8373%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="1.5873%" y="565" width="0.0794%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="1"/><text x="1.8373%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="1.5873%" y="549" width="0.0794%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="1"/><text x="1.8373%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="1.5873%" y="533" width="0.0794%" height="15" fill="rgb(222,207,29)" fg:x="20" fg:w="1"/><text x="1.8373%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="1.5873%" y="517" width="0.0794%" height="15" fill="rgb(206,96,30)" fg:x="20" fg:w="1"/><text x="1.8373%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="1.6667%" y="565" width="0.0794%" height="15" fill="rgb(218,138,4)" fg:x="21" fg:w="1"/><text x="1.9167%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="1.7460%" y="549" width="0.2381%" height="15" fill="rgb(250,191,14)" fg:x="22" fg:w="3"/><text x="1.9960%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.8254%" y="533" width="0.1587%" height="15" fill="rgb(239,60,40)" fg:x="23" fg:w="2"/><text x="2.0754%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="1.8254%" y="517" width="0.1587%" height="15" fill="rgb(206,27,48)" fg:x="23" fg:w="2"/><text x="2.0754%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="1.8254%" y="501" width="0.1587%" height="15" fill="rgb(225,35,8)" fg:x="23" fg:w="2"/><text x="2.0754%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="1.8254%" y="485" width="0.1587%" height="15" fill="rgb(250,213,24)" fg:x="23" fg:w="2"/><text x="2.0754%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="1.8254%" y="469" width="0.1587%" height="15" fill="rgb(247,123,22)" fg:x="23" fg:w="2"/><text x="2.0754%" y="479.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="1.8254%" y="453" width="0.1587%" height="15" fill="rgb(231,138,38)" fg:x="23" fg:w="2"/><text x="2.0754%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="1.9841%" y="533" width="0.1587%" height="15" fill="rgb(231,145,46)" fg:x="25" fg:w="2"/><text x="2.2341%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="1.9841%" y="517" width="0.1587%" height="15" fill="rgb(251,118,11)" fg:x="25" fg:w="2"/><text x="2.2341%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.0635%" y="501" width="0.0794%" height="15" fill="rgb(217,147,25)" fg:x="26" fg:w="1"/><text x="2.3135%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.2222%" y="469" width="0.0794%" height="15" fill="rgb(247,81,37)" fg:x="28" fg:w="1"/><text x="2.4722%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="1.6667%" y="581" width="0.7143%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="9"/><text x="1.9167%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="1.7460%" y="565" width="0.6349%" height="15" fill="rgb(227,1,9)" fg:x="22" fg:w="8"/><text x="1.9960%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="1.9841%" y="549" width="0.3968%" height="15" fill="rgb(248,47,43)" fg:x="25" fg:w="5"/><text x="2.2341%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.1429%" y="533" width="0.2381%" height="15" fill="rgb(221,10,30)" fg:x="27" fg:w="3"/><text x="2.3929%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.1429%" y="517" width="0.2381%" height="15" fill="rgb(210,229,1)" fg:x="27" fg:w="3"/><text x="2.3929%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="2.1429%" y="501" width="0.2381%" height="15" fill="rgb(222,148,37)" fg:x="27" fg:w="3"/><text x="2.3929%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.2222%" y="485" width="0.1587%" height="15" fill="rgb(234,67,33)" fg:x="28" fg:w="2"/><text x="2.4722%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.3016%" y="469" width="0.0794%" height="15" fill="rgb(247,98,35)" fg:x="29" fg:w="1"/><text x="2.5516%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3016%" y="453" width="0.0794%" height="15" fill="rgb(247,138,52)" fg:x="29" fg:w="1"/><text x="2.5516%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.3016%" y="437" width="0.0794%" height="15" fill="rgb(213,79,30)" fg:x="29" fg:w="1"/><text x="2.5516%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.3016%" y="421" width="0.0794%" height="15" fill="rgb(246,177,23)" fg:x="29" fg:w="1"/><text x="2.5516%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.4603%" y="533" width="0.0794%" height="15" fill="rgb(230,62,27)" fg:x="31" fg:w="1"/><text x="2.7103%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4603%" y="517" width="0.0794%" height="15" fill="rgb(216,154,8)" fg:x="31" fg:w="1"/><text x="2.7103%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5397%" y="517" width="0.0794%" height="15" fill="rgb(244,35,45)" fg:x="32" fg:w="1"/><text x="2.7897%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="2.3810%" y="581" width="0.3968%" height="15" fill="rgb(251,115,12)" fg:x="30" fg:w="5"/><text x="2.6310%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="2.3810%" y="565" width="0.3968%" height="15" fill="rgb(240,54,50)" fg:x="30" fg:w="5"/><text x="2.6310%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="2.3810%" y="549" width="0.3968%" height="15" fill="rgb(233,84,52)" fg:x="30" fg:w="5"/><text x="2.6310%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="2.5397%" y="533" width="0.2381%" height="15" fill="rgb(207,117,47)" fg:x="32" fg:w="3"/><text x="2.7897%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.6190%" y="517" width="0.1587%" height="15" fill="rgb(249,43,39)" fg:x="33" fg:w="2"/><text x="2.8690%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.6190%" y="501" width="0.1587%" height="15" fill="rgb(209,38,44)" fg:x="33" fg:w="2"/><text x="2.8690%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6984%" y="485" width="0.0794%" height="15" fill="rgb(236,212,23)" fg:x="34" fg:w="1"/><text x="2.9484%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="2.6984%" y="469" width="0.0794%" height="15" fill="rgb(242,79,21)" fg:x="34" fg:w="1"/><text x="2.9484%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.6984%" y="453" width="0.0794%" height="15" fill="rgb(211,96,35)" fg:x="34" fg:w="1"/><text x="2.9484%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7778%" y="533" width="0.0794%" height="15" fill="rgb(253,215,40)" fg:x="35" fg:w="1"/><text x="3.0278%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.7778%" y="517" width="0.0794%" height="15" fill="rgb(211,81,21)" fg:x="35" fg:w="1"/><text x="3.0278%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="2.7778%" y="501" width="0.0794%" height="15" fill="rgb(208,190,38)" fg:x="35" fg:w="1"/><text x="3.0278%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="2.8571%" y="533" width="0.0794%" height="15" fill="rgb(235,213,38)" fg:x="36" fg:w="1"/><text x="3.1071%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.8571%" y="517" width="0.0794%" height="15" fill="rgb(237,122,38)" fg:x="36" fg:w="1"/><text x="3.1071%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="2.9365%" y="533" width="0.0794%" height="15" fill="rgb(244,218,35)" fg:x="37" fg:w="1"/><text x="3.1865%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="2.9365%" y="517" width="0.0794%" height="15" fill="rgb(240,68,47)" fg:x="37" fg:w="1"/><text x="3.1865%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.9365%" y="501" width="0.0794%" height="15" fill="rgb(210,16,53)" fg:x="37" fg:w="1"/><text x="3.1865%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.0159%" y="485" width="0.0794%" height="15" fill="rgb(235,124,12)" fg:x="38" fg:w="1"/><text x="3.2659%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0159%" y="469" width="0.0794%" height="15" fill="rgb(224,169,11)" fg:x="38" fg:w="1"/><text x="3.2659%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.0159%" y="453" width="0.0794%" height="15" fill="rgb(250,166,2)" fg:x="38" fg:w="1"/><text x="3.2659%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="3.0159%" y="437" width="0.0794%" height="15" fill="rgb(242,216,29)" fg:x="38" fg:w="1"/><text x="3.2659%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="3.2540%" y="373" width="0.0794%" height="15" fill="rgb(230,116,27)" fg:x="41" fg:w="1"/><text x="3.5040%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="3.0159%" y="501" width="0.3968%" height="15" fill="rgb(228,99,48)" fg:x="38" fg:w="5"/><text x="3.2659%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="3.0952%" y="485" width="0.3175%" height="15" fill="rgb(253,11,6)" fg:x="39" fg:w="4"/><text x="3.3452%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="3.0952%" y="469" width="0.3175%" height="15" fill="rgb(247,143,39)" fg:x="39" fg:w="4"/><text x="3.3452%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="3.0952%" y="453" width="0.3175%" height="15" fill="rgb(236,97,10)" fg:x="39" fg:w="4"/><text x="3.3452%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="3.1746%" y="437" width="0.2381%" height="15" fill="rgb(233,208,19)" fg:x="40" fg:w="3"/><text x="3.4246%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="3.1746%" y="421" width="0.2381%" height="15" fill="rgb(216,164,2)" fg:x="40" fg:w="3"/><text x="3.4246%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="3.2540%" y="405" width="0.1587%" height="15" fill="rgb(220,129,5)" fg:x="41" fg:w="2"/><text x="3.5040%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="3.2540%" y="389" width="0.1587%" height="15" fill="rgb(242,17,10)" fg:x="41" fg:w="2"/><text x="3.5040%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="3.3333%" y="373" width="0.0794%" height="15" fill="rgb(242,107,0)" fg:x="42" fg:w="1"/><text x="3.5833%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="3.3333%" y="357" width="0.0794%" height="15" fill="rgb(251,28,31)" fg:x="42" fg:w="1"/><text x="3.5833%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="3.3333%" y="341" width="0.0794%" height="15" fill="rgb(233,223,10)" fg:x="42" fg:w="1"/><text x="3.5833%" y="351.50"></text></g><g><title>engine::session::Session::flush (26 samples, 2.06%)</title><rect x="1.4286%" y="661" width="2.0635%" height="15" fill="rgb(215,21,27)" fg:x="18" fg:w="26"/><text x="1.6786%" y="671.50">e..</text></g><g><title>engine::session::state::State::close (26 samples, 2.06%)</title><rect x="1.4286%" y="645" width="2.0635%" height="15" fill="rgb(232,23,21)" fg:x="18" fg:w="26"/><text x="1.6786%" y="655.50">e..</text></g><g><title>engine::session::state::State::flush_entities (26 samples, 2.06%)</title><rect x="1.4286%" y="629" width="2.0635%" height="15" fill="rgb(244,5,23)" fg:x="18" fg:w="26"/><text x="1.6786%" y="639.50">e..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (24 samples, 1.90%)</title><rect x="1.5873%" y="613" width="1.9048%" height="15" fill="rgb(226,81,46)" fg:x="20" fg:w="24"/><text x="1.8373%" y="623.50">e..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (24 samples, 1.90%)</title><rect x="1.5873%" y="597" width="1.9048%" height="15" fill="rgb(247,70,30)" fg:x="20" fg:w="24"/><text x="1.8373%" y="607.50">e..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.71%)</title><rect x="2.7778%" y="581" width="0.7143%" height="15" fill="rgb(212,68,19)" fg:x="35" fg:w="9"/><text x="3.0278%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="2.7778%" y="565" width="0.7143%" height="15" fill="rgb(240,187,13)" fg:x="35" fg:w="9"/><text x="3.0278%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.71%)</title><rect x="2.7778%" y="549" width="0.7143%" height="15" fill="rgb(223,113,26)" fg:x="35" fg:w="9"/><text x="3.0278%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.48%)</title><rect x="3.0159%" y="533" width="0.4762%" height="15" fill="rgb(206,192,2)" fg:x="38" fg:w="6"/><text x="3.2659%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="3.0159%" y="517" width="0.4762%" height="15" fill="rgb(241,108,4)" fg:x="38" fg:w="6"/><text x="3.2659%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="3.4127%" y="501" width="0.0794%" height="15" fill="rgb(247,173,49)" fg:x="43" fg:w="1"/><text x="3.6627%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.4127%" y="485" width="0.0794%" height="15" fill="rgb(224,114,35)" fg:x="43" fg:w="1"/><text x="3.6627%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.4921%" y="581" width="0.0794%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="1"/><text x="3.7421%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.4921%" y="565" width="0.0794%" height="15" fill="rgb(245,172,44)" fg:x="44" fg:w="1"/><text x="3.7421%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="3.4921%" y="629" width="0.1587%" height="15" fill="rgb(236,23,11)" fg:x="44" fg:w="2"/><text x="3.7421%" y="639.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="3.4921%" y="613" width="0.1587%" height="15" fill="rgb(205,117,38)" fg:x="44" fg:w="2"/><text x="3.7421%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="3.4921%" y="597" width="0.1587%" height="15" fill="rgb(237,72,25)" fg:x="44" fg:w="2"/><text x="3.7421%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.5714%" y="581" width="0.0794%" height="15" fill="rgb(244,70,9)" fg:x="45" fg:w="1"/><text x="3.8214%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5714%" y="565" width="0.0794%" height="15" fill="rgb(217,125,39)" fg:x="45" fg:w="1"/><text x="3.8214%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.5714%" y="549" width="0.0794%" height="15" fill="rgb(235,36,10)" fg:x="45" fg:w="1"/><text x="3.8214%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5714%" y="533" width="0.0794%" height="15" fill="rgb(251,123,47)" fg:x="45" fg:w="1"/><text x="3.8214%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.5714%" y="517" width="0.0794%" height="15" fill="rgb(221,13,13)" fg:x="45" fg:w="1"/><text x="3.8214%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.5714%" y="501" width="0.0794%" height="15" fill="rgb(238,131,9)" fg:x="45" fg:w="1"/><text x="3.8214%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.5714%" y="485" width="0.0794%" height="15" fill="rgb(211,50,8)" fg:x="45" fg:w="1"/><text x="3.8214%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.5714%" y="469" width="0.0794%" height="15" fill="rgb(245,182,24)" fg:x="45" fg:w="1"/><text x="3.8214%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6508%" y="469" width="0.0794%" height="15" fill="rgb(242,14,37)" fg:x="46" fg:w="1"/><text x="3.9008%" y="479.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="3.6508%" y="613" width="0.1587%" height="15" fill="rgb(246,228,12)" fg:x="46" fg:w="2"/><text x="3.9008%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="3.6508%" y="597" width="0.1587%" height="15" fill="rgb(213,55,15)" fg:x="46" fg:w="2"/><text x="3.9008%" y="607.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="3.6508%" y="581" width="0.1587%" height="15" fill="rgb(209,9,3)" fg:x="46" fg:w="2"/><text x="3.9008%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="3.6508%" y="565" width="0.1587%" height="15" fill="rgb(230,59,30)" fg:x="46" fg:w="2"/><text x="3.9008%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="3.6508%" y="549" width="0.1587%" height="15" fill="rgb(209,121,21)" fg:x="46" fg:w="2"/><text x="3.9008%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.6508%" y="533" width="0.1587%" height="15" fill="rgb(220,109,13)" fg:x="46" fg:w="2"/><text x="3.9008%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (2 samples, 0.16%)</title><rect x="3.6508%" y="517" width="0.1587%" height="15" fill="rgb(232,18,1)" fg:x="46" fg:w="2"/><text x="3.9008%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="3.6508%" y="501" width="0.1587%" height="15" fill="rgb(215,41,42)" fg:x="46" fg:w="2"/><text x="3.9008%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="3.6508%" y="485" width="0.1587%" height="15" fill="rgb(224,123,36)" fg:x="46" fg:w="2"/><text x="3.9008%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="3.7302%" y="469" width="0.0794%" height="15" fill="rgb(240,125,3)" fg:x="47" fg:w="1"/><text x="3.9802%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="3.4921%" y="645" width="0.3968%" height="15" fill="rgb(205,98,50)" fg:x="44" fg:w="5"/><text x="3.7421%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="3.6508%" y="629" width="0.2381%" height="15" fill="rgb(205,185,37)" fg:x="46" fg:w="3"/><text x="3.9008%" y="639.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="3.8095%" y="613" width="0.0794%" height="15" fill="rgb(238,207,15)" fg:x="48" fg:w="1"/><text x="4.0595%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8095%" y="597" width="0.0794%" height="15" fill="rgb(213,199,42)" fg:x="48" fg:w="1"/><text x="4.0595%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8095%" y="581" width="0.0794%" height="15" fill="rgb(235,201,11)" fg:x="48" fg:w="1"/><text x="4.0595%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="3.8095%" y="565" width="0.0794%" height="15" fill="rgb(207,46,11)" fg:x="48" fg:w="1"/><text x="4.0595%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8095%" y="549" width="0.0794%" height="15" fill="rgb(241,35,35)" fg:x="48" fg:w="1"/><text x="4.0595%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.8889%" y="597" width="0.0794%" height="15" fill="rgb(243,32,47)" fg:x="49" fg:w="1"/><text x="4.1389%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8889%" y="581" width="0.0794%" height="15" fill="rgb(247,202,23)" fg:x="49" fg:w="1"/><text x="4.1389%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="3.8889%" y="629" width="0.1587%" height="15" fill="rgb(219,102,11)" fg:x="49" fg:w="2"/><text x="4.1389%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="3.8889%" y="613" width="0.1587%" height="15" fill="rgb(243,110,44)" fg:x="49" fg:w="2"/><text x="4.1389%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="3.9683%" y="597" width="0.0794%" height="15" fill="rgb(222,74,54)" fg:x="50" fg:w="1"/><text x="4.2183%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.9683%" y="581" width="0.0794%" height="15" fill="rgb(216,99,12)" fg:x="50" fg:w="1"/><text x="4.2183%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.9683%" y="565" width="0.0794%" height="15" fill="rgb(226,22,26)" fg:x="50" fg:w="1"/><text x="4.2183%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9683%" y="549" width="0.0794%" height="15" fill="rgb(217,163,10)" fg:x="50" fg:w="1"/><text x="4.2183%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9683%" y="533" width="0.0794%" height="15" fill="rgb(213,25,53)" fg:x="50" fg:w="1"/><text x="4.2183%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.9683%" y="517" width="0.0794%" height="15" fill="rgb(252,105,26)" fg:x="50" fg:w="1"/><text x="4.2183%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9683%" y="501" width="0.0794%" height="15" fill="rgb(220,39,43)" fg:x="50" fg:w="1"/><text x="4.2183%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.9683%" y="485" width="0.0794%" height="15" fill="rgb(229,68,48)" fg:x="50" fg:w="1"/><text x="4.2183%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.9683%" y="469" width="0.0794%" height="15" fill="rgb(252,8,32)" fg:x="50" fg:w="1"/><text x="4.2183%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.9683%" y="453" width="0.0794%" height="15" fill="rgb(223,20,43)" fg:x="50" fg:w="1"/><text x="4.2183%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.9683%" y="437" width="0.0794%" height="15" fill="rgb(229,81,49)" fg:x="50" fg:w="1"/><text x="4.2183%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.9683%" y="421" width="0.0794%" height="15" fill="rgb(236,28,36)" fg:x="50" fg:w="1"/><text x="4.2183%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.9683%" y="405" width="0.0794%" height="15" fill="rgb(249,185,26)" fg:x="50" fg:w="1"/><text x="4.2183%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.9683%" y="389" width="0.0794%" height="15" fill="rgb(249,174,33)" fg:x="50" fg:w="1"/><text x="4.2183%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.9683%" y="373" width="0.0794%" height="15" fill="rgb(233,201,37)" fg:x="50" fg:w="1"/><text x="4.2183%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.9683%" y="357" width="0.0794%" height="15" fill="rgb(221,78,26)" fg:x="50" fg:w="1"/><text x="4.2183%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.9683%" y="341" width="0.0794%" height="15" fill="rgb(250,127,30)" fg:x="50" fg:w="1"/><text x="4.2183%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.9683%" y="325" width="0.0794%" height="15" fill="rgb(230,49,44)" fg:x="50" fg:w="1"/><text x="4.2183%" y="335.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="4.0476%" y="629" width="0.0794%" height="15" fill="rgb(229,67,23)" fg:x="51" fg:w="1"/><text x="4.2976%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.0476%" y="613" width="0.0794%" height="15" fill="rgb(249,83,47)" fg:x="51" fg:w="1"/><text x="4.2976%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="4.0476%" y="597" width="0.0794%" height="15" fill="rgb(215,43,3)" fg:x="51" fg:w="1"/><text x="4.2976%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.1270%" y="629" width="0.0794%" height="15" fill="rgb(238,154,13)" fg:x="52" fg:w="1"/><text x="4.3770%" y="639.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="4.1270%" y="613" width="0.0794%" height="15" fill="rgb(219,56,2)" fg:x="52" fg:w="1"/><text x="4.3770%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="4.2063%" y="613" width="0.0794%" height="15" fill="rgb(233,0,4)" fg:x="53" fg:w="1"/><text x="4.4563%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.2063%" y="597" width="0.0794%" height="15" fill="rgb(235,30,7)" fg:x="53" fg:w="1"/><text x="4.4563%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (11 samples, 0.87%)</title><rect x="3.4921%" y="661" width="0.8730%" height="15" fill="rgb(250,79,13)" fg:x="44" fg:w="11"/><text x="3.7421%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="3.8889%" y="645" width="0.4762%" height="15" fill="rgb(211,146,34)" fg:x="49" fg:w="6"/><text x="4.1389%" y="655.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="4.2063%" y="629" width="0.1587%" height="15" fill="rgb(228,22,38)" fg:x="53" fg:w="2"/><text x="4.4563%" y="639.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="4.2857%" y="613" width="0.0794%" height="15" fill="rgb(235,168,5)" fg:x="54" fg:w="1"/><text x="4.5357%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="4.2857%" y="597" width="0.0794%" height="15" fill="rgb(221,155,16)" fg:x="54" fg:w="1"/><text x="4.5357%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.2857%" y="581" width="0.0794%" height="15" fill="rgb(215,215,53)" fg:x="54" fg:w="1"/><text x="4.5357%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2857%" y="565" width="0.0794%" height="15" fill="rgb(223,4,10)" fg:x="54" fg:w="1"/><text x="4.5357%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2857%" y="549" width="0.0794%" height="15" fill="rgb(234,103,6)" fg:x="54" fg:w="1"/><text x="4.5357%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.2857%" y="533" width="0.0794%" height="15" fill="rgb(227,97,0)" fg:x="54" fg:w="1"/><text x="4.5357%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.2857%" y="517" width="0.0794%" height="15" fill="rgb(234,150,53)" fg:x="54" fg:w="1"/><text x="4.5357%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.3651%" y="629" width="0.0794%" height="15" fill="rgb(228,201,54)" fg:x="55" fg:w="1"/><text x="4.6151%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.3651%" y="613" width="0.0794%" height="15" fill="rgb(222,22,37)" fg:x="55" fg:w="1"/><text x="4.6151%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.3651%" y="597" width="0.0794%" height="15" fill="rgb(237,53,32)" fg:x="55" fg:w="1"/><text x="4.6151%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3651%" y="581" width="0.0794%" height="15" fill="rgb(233,25,53)" fg:x="55" fg:w="1"/><text x="4.6151%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3651%" y="565" width="0.0794%" height="15" fill="rgb(210,40,34)" fg:x="55" fg:w="1"/><text x="4.6151%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3651%" y="549" width="0.0794%" height="15" fill="rgb(241,220,44)" fg:x="55" fg:w="1"/><text x="4.6151%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3651%" y="533" width="0.0794%" height="15" fill="rgb(235,28,35)" fg:x="55" fg:w="1"/><text x="4.6151%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.3651%" y="517" width="0.0794%" height="15" fill="rgb(210,56,17)" fg:x="55" fg:w="1"/><text x="4.6151%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="4.3651%" y="661" width="0.1587%" height="15" fill="rgb(224,130,29)" fg:x="55" fg:w="2"/><text x="4.6151%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="4.3651%" y="645" width="0.1587%" height="15" fill="rgb(235,212,8)" fg:x="55" fg:w="2"/><text x="4.6151%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.4444%" y="629" width="0.0794%" height="15" fill="rgb(223,33,50)" fg:x="56" fg:w="1"/><text x="4.6944%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.4444%" y="613" width="0.0794%" height="15" fill="rgb(219,149,13)" fg:x="56" fg:w="1"/><text x="4.6944%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.4444%" y="597" width="0.0794%" height="15" fill="rgb(250,156,29)" fg:x="56" fg:w="1"/><text x="4.6944%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.4444%" y="581" width="0.0794%" height="15" fill="rgb(216,193,19)" fg:x="56" fg:w="1"/><text x="4.6944%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.4444%" y="565" width="0.0794%" height="15" fill="rgb(216,135,14)" fg:x="56" fg:w="1"/><text x="4.6944%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4444%" y="549" width="0.0794%" height="15" fill="rgb(241,47,5)" fg:x="56" fg:w="1"/><text x="4.6944%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4444%" y="533" width="0.0794%" height="15" fill="rgb(233,42,35)" fg:x="56" fg:w="1"/><text x="4.6944%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4444%" y="517" width="0.0794%" height="15" fill="rgb(231,13,6)" fg:x="56" fg:w="1"/><text x="4.6944%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.4444%" y="501" width="0.0794%" height="15" fill="rgb(207,181,40)" fg:x="56" fg:w="1"/><text x="4.6944%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.6825%" y="517" width="0.1587%" height="15" fill="rgb(254,173,49)" fg:x="59" fg:w="2"/><text x="4.9325%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.6825%" y="501" width="0.1587%" height="15" fill="rgb(221,1,38)" fg:x="59" fg:w="2"/><text x="4.9325%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.6825%" y="485" width="0.1587%" height="15" fill="rgb(206,124,46)" fg:x="59" fg:w="2"/><text x="4.9325%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="4.6825%" y="469" width="0.1587%" height="15" fill="rgb(249,21,11)" fg:x="59" fg:w="2"/><text x="4.9325%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.6825%" y="453" width="0.1587%" height="15" fill="rgb(222,201,40)" fg:x="59" fg:w="2"/><text x="4.9325%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="4.6825%" y="437" width="0.1587%" height="15" fill="rgb(235,61,29)" fg:x="59" fg:w="2"/><text x="4.9325%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="4.6825%" y="421" width="0.1587%" height="15" fill="rgb(219,207,3)" fg:x="59" fg:w="2"/><text x="4.9325%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="4.6825%" y="405" width="0.1587%" height="15" fill="rgb(222,56,46)" fg:x="59" fg:w="2"/><text x="4.9325%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="4.6825%" y="389" width="0.1587%" height="15" fill="rgb(239,76,54)" fg:x="59" fg:w="2"/><text x="4.9325%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="4.6825%" y="373" width="0.1587%" height="15" fill="rgb(231,124,27)" fg:x="59" fg:w="2"/><text x="4.9325%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="4.6825%" y="357" width="0.1587%" height="15" fill="rgb(249,195,6)" fg:x="59" fg:w="2"/><text x="4.9325%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="4.6825%" y="341" width="0.1587%" height="15" fill="rgb(237,174,47)" fg:x="59" fg:w="2"/><text x="4.9325%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="4.6825%" y="325" width="0.1587%" height="15" fill="rgb(206,201,31)" fg:x="59" fg:w="2"/><text x="4.9325%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="4.6825%" y="309" width="0.1587%" height="15" fill="rgb(231,57,52)" fg:x="59" fg:w="2"/><text x="4.9325%" y="319.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="4.6825%" y="293" width="0.1587%" height="15" fill="rgb(248,177,22)" fg:x="59" fg:w="2"/><text x="4.9325%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="4.6825%" y="277" width="0.1587%" height="15" fill="rgb(215,211,37)" fg:x="59" fg:w="2"/><text x="4.9325%" y="287.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="4.6825%" y="597" width="0.2381%" height="15" fill="rgb(241,128,51)" fg:x="59" fg:w="3"/><text x="4.9325%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="4.6825%" y="581" width="0.2381%" height="15" fill="rgb(227,165,31)" fg:x="59" fg:w="3"/><text x="4.9325%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="4.6825%" y="565" width="0.2381%" height="15" fill="rgb(228,167,24)" fg:x="59" fg:w="3"/><text x="4.9325%" y="575.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="4.6825%" y="549" width="0.2381%" height="15" fill="rgb(228,143,12)" fg:x="59" fg:w="3"/><text x="4.9325%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="4.6825%" y="533" width="0.2381%" height="15" fill="rgb(249,149,8)" fg:x="59" fg:w="3"/><text x="4.9325%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8413%" y="517" width="0.0794%" height="15" fill="rgb(243,35,44)" fg:x="61" fg:w="1"/><text x="5.0913%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8413%" y="501" width="0.0794%" height="15" fill="rgb(246,89,9)" fg:x="61" fg:w="1"/><text x="5.0913%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8413%" y="485" width="0.0794%" height="15" fill="rgb(233,213,13)" fg:x="61" fg:w="1"/><text x="5.0913%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8413%" y="469" width="0.0794%" height="15" fill="rgb(233,141,41)" fg:x="61" fg:w="1"/><text x="5.0913%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.8413%" y="453" width="0.0794%" height="15" fill="rgb(239,167,4)" fg:x="61" fg:w="1"/><text x="5.0913%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8413%" y="437" width="0.0794%" height="15" fill="rgb(209,217,16)" fg:x="61" fg:w="1"/><text x="5.0913%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="4.8413%" y="421" width="0.0794%" height="15" fill="rgb(219,88,35)" fg:x="61" fg:w="1"/><text x="5.0913%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.8413%" y="405" width="0.0794%" height="15" fill="rgb(220,193,23)" fg:x="61" fg:w="1"/><text x="5.0913%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="4.8413%" y="389" width="0.0794%" height="15" fill="rgb(230,90,52)" fg:x="61" fg:w="1"/><text x="5.0913%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.9206%" y="565" width="0.0794%" height="15" fill="rgb(252,106,19)" fg:x="62" fg:w="1"/><text x="5.1706%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.9206%" y="549" width="0.0794%" height="15" fill="rgb(206,74,20)" fg:x="62" fg:w="1"/><text x="5.1706%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.9206%" y="533" width="0.0794%" height="15" fill="rgb(230,138,44)" fg:x="62" fg:w="1"/><text x="5.1706%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9206%" y="517" width="0.0794%" height="15" fill="rgb(235,182,43)" fg:x="62" fg:w="1"/><text x="5.1706%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9206%" y="501" width="0.0794%" height="15" fill="rgb(242,16,51)" fg:x="62" fg:w="1"/><text x="5.1706%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.9206%" y="485" width="0.0794%" height="15" fill="rgb(248,9,4)" fg:x="62" fg:w="1"/><text x="5.1706%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.9206%" y="469" width="0.0794%" height="15" fill="rgb(210,31,22)" fg:x="62" fg:w="1"/><text x="5.1706%" y="479.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="5.0000%" y="565" width="0.0794%" height="15" fill="rgb(239,54,39)" fg:x="63" fg:w="1"/><text x="5.2500%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="5.0000%" y="549" width="0.0794%" height="15" fill="rgb(230,99,41)" fg:x="63" fg:w="1"/><text x="5.2500%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="5.0794%" y="485" width="0.0794%" height="15" fill="rgb(253,106,12)" fg:x="64" fg:w="1"/><text x="5.3294%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="5.0794%" y="469" width="0.0794%" height="15" fill="rgb(213,46,41)" fg:x="64" fg:w="1"/><text x="5.3294%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0794%" y="453" width="0.0794%" height="15" fill="rgb(215,133,35)" fg:x="64" fg:w="1"/><text x="5.3294%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0794%" y="437" width="0.0794%" height="15" fill="rgb(213,28,5)" fg:x="64" fg:w="1"/><text x="5.3294%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.0794%" y="421" width="0.0794%" height="15" fill="rgb(215,77,49)" fg:x="64" fg:w="1"/><text x="5.3294%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="5.0794%" y="405" width="0.0794%" height="15" fill="rgb(248,100,22)" fg:x="64" fg:w="1"/><text x="5.3294%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="4.9206%" y="581" width="0.3175%" height="15" fill="rgb(208,67,9)" fg:x="62" fg:w="4"/><text x="5.1706%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="5.0794%" y="565" width="0.1587%" height="15" fill="rgb(219,133,21)" fg:x="64" fg:w="2"/><text x="5.3294%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="5.0794%" y="549" width="0.1587%" height="15" fill="rgb(246,46,29)" fg:x="64" fg:w="2"/><text x="5.3294%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="5.0794%" y="533" width="0.1587%" height="15" fill="rgb(246,185,52)" fg:x="64" fg:w="2"/><text x="5.3294%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="5.0794%" y="517" width="0.1587%" height="15" fill="rgb(252,136,11)" fg:x="64" fg:w="2"/><text x="5.3294%" y="527.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="5.0794%" y="501" width="0.1587%" height="15" fill="rgb(219,138,53)" fg:x="64" fg:w="2"/><text x="5.3294%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1587%" y="485" width="0.0794%" height="15" fill="rgb(211,51,23)" fg:x="65" fg:w="1"/><text x="5.4087%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.1587%" y="469" width="0.0794%" height="15" fill="rgb(247,221,28)" fg:x="65" fg:w="1"/><text x="5.4087%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1587%" y="453" width="0.0794%" height="15" fill="rgb(251,222,45)" fg:x="65" fg:w="1"/><text x="5.4087%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="5.1587%" y="437" width="0.0794%" height="15" fill="rgb(217,162,53)" fg:x="65" fg:w="1"/><text x="5.4087%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="5.1587%" y="421" width="0.0794%" height="15" fill="rgb(229,93,14)" fg:x="65" fg:w="1"/><text x="5.4087%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="5.1587%" y="405" width="0.0794%" height="15" fill="rgb(209,67,49)" fg:x="65" fg:w="1"/><text x="5.4087%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.1587%" y="389" width="0.0794%" height="15" fill="rgb(213,87,29)" fg:x="65" fg:w="1"/><text x="5.4087%" y="399.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="5.2381%" y="517" width="0.0794%" height="15" fill="rgb(205,151,52)" fg:x="66" fg:w="1"/><text x="5.4881%" y="527.50"></text></g><g><title>core::iter::adapters::try_process (9 samples, 0.71%)</title><rect x="4.6825%" y="645" width="0.7143%" height="15" fill="rgb(253,215,39)" fg:x="59" fg:w="9"/><text x="4.9325%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="4.6825%" y="629" width="0.7143%" height="15" fill="rgb(221,220,41)" fg:x="59" fg:w="9"/><text x="4.9325%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (9 samples, 0.71%)</title><rect x="4.6825%" y="613" width="0.7143%" height="15" fill="rgb(218,133,21)" fg:x="59" fg:w="9"/><text x="4.9325%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (6 samples, 0.48%)</title><rect x="4.9206%" y="597" width="0.4762%" height="15" fill="rgb(221,193,43)" fg:x="62" fg:w="6"/><text x="5.1706%" y="607.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="5.2381%" y="581" width="0.1587%" height="15" fill="rgb(240,128,52)" fg:x="66" fg:w="2"/><text x="5.4881%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="5.2381%" y="565" width="0.1587%" height="15" fill="rgb(253,114,12)" fg:x="66" fg:w="2"/><text x="5.4881%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="5.2381%" y="549" width="0.1587%" height="15" fill="rgb(215,223,47)" fg:x="66" fg:w="2"/><text x="5.4881%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="5.2381%" y="533" width="0.1587%" height="15" fill="rgb(248,225,23)" fg:x="66" fg:w="2"/><text x="5.4881%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="5.3175%" y="517" width="0.0794%" height="15" fill="rgb(250,108,0)" fg:x="67" fg:w="1"/><text x="5.5675%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="5.3175%" y="501" width="0.0794%" height="15" fill="rgb(228,208,7)" fg:x="67" fg:w="1"/><text x="5.5675%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.3175%" y="485" width="0.0794%" height="15" fill="rgb(244,45,10)" fg:x="67" fg:w="1"/><text x="5.5675%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="5.3175%" y="469" width="0.0794%" height="15" fill="rgb(207,125,25)" fg:x="67" fg:w="1"/><text x="5.5675%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.3175%" y="453" width="0.0794%" height="15" fill="rgb(210,195,18)" fg:x="67" fg:w="1"/><text x="5.5675%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="5.3968%" y="629" width="0.1587%" height="15" fill="rgb(249,80,12)" fg:x="68" fg:w="2"/><text x="5.6468%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.3968%" y="613" width="0.1587%" height="15" fill="rgb(221,65,9)" fg:x="68" fg:w="2"/><text x="5.6468%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (2 samples, 0.16%)</title><rect x="5.3968%" y="597" width="0.1587%" height="15" fill="rgb(235,49,36)" fg:x="68" fg:w="2"/><text x="5.6468%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="5.3968%" y="581" width="0.1587%" height="15" fill="rgb(225,32,20)" fg:x="68" fg:w="2"/><text x="5.6468%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="5.4762%" y="565" width="0.0794%" height="15" fill="rgb(215,141,46)" fg:x="69" fg:w="1"/><text x="5.7262%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.5556%" y="581" width="0.0794%" height="15" fill="rgb(250,160,47)" fg:x="70" fg:w="1"/><text x="5.8056%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.5556%" y="565" width="0.0794%" height="15" fill="rgb(216,222,40)" fg:x="70" fg:w="1"/><text x="5.8056%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="5.5556%" y="549" width="0.0794%" height="15" fill="rgb(234,217,39)" fg:x="70" fg:w="1"/><text x="5.8056%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.6349%" y="533" width="0.0794%" height="15" fill="rgb(207,178,40)" fg:x="71" fg:w="1"/><text x="5.8849%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7143%" y="517" width="0.0794%" height="15" fill="rgb(221,136,13)" fg:x="72" fg:w="1"/><text x="5.9643%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7143%" y="501" width="0.0794%" height="15" fill="rgb(249,199,10)" fg:x="72" fg:w="1"/><text x="5.9643%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7143%" y="485" width="0.0794%" height="15" fill="rgb(249,222,13)" fg:x="72" fg:w="1"/><text x="5.9643%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.7937%" y="469" width="0.0794%" height="15" fill="rgb(244,185,38)" fg:x="73" fg:w="1"/><text x="6.0437%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.7937%" y="501" width="0.1587%" height="15" fill="rgb(236,202,9)" fg:x="73" fg:w="2"/><text x="6.0437%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7937%" y="485" width="0.1587%" height="15" fill="rgb(250,229,37)" fg:x="73" fg:w="2"/><text x="6.0437%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8730%" y="469" width="0.0794%" height="15" fill="rgb(206,174,23)" fg:x="74" fg:w="1"/><text x="6.1230%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.8730%" y="453" width="0.0794%" height="15" fill="rgb(211,33,43)" fg:x="74" fg:w="1"/><text x="6.1230%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9524%" y="501" width="0.0794%" height="15" fill="rgb(245,58,50)" fg:x="75" fg:w="1"/><text x="6.2024%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.9524%" y="485" width="0.0794%" height="15" fill="rgb(244,68,36)" fg:x="75" fg:w="1"/><text x="6.2024%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.7937%" y="517" width="0.3968%" height="15" fill="rgb(232,229,15)" fg:x="73" fg:w="5"/><text x="6.0437%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.0317%" y="501" width="0.1587%" height="15" fill="rgb(254,30,23)" fg:x="76" fg:w="2"/><text x="6.2817%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.0317%" y="485" width="0.1587%" height="15" fill="rgb(235,160,14)" fg:x="76" fg:w="2"/><text x="6.2817%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.1111%" y="469" width="0.0794%" height="15" fill="rgb(212,155,44)" fg:x="77" fg:w="1"/><text x="6.3611%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="5.7143%" y="533" width="0.5556%" height="15" fill="rgb(226,2,50)" fg:x="72" fg:w="7"/><text x="5.9643%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.1905%" y="517" width="0.0794%" height="15" fill="rgb(234,177,6)" fg:x="78" fg:w="1"/><text x="6.4405%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="5.6349%" y="549" width="0.7143%" height="15" fill="rgb(217,24,9)" fg:x="71" fg:w="9"/><text x="5.8849%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2698%" y="533" width="0.0794%" height="15" fill="rgb(220,13,46)" fg:x="79" fg:w="1"/><text x="6.5198%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.3492%" y="517" width="0.0794%" height="15" fill="rgb(239,221,27)" fg:x="80" fg:w="1"/><text x="6.5992%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.3492%" y="549" width="0.1587%" height="15" fill="rgb(222,198,25)" fg:x="80" fg:w="2"/><text x="6.5992%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="6.3492%" y="533" width="0.1587%" height="15" fill="rgb(211,99,13)" fg:x="80" fg:w="2"/><text x="6.5992%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4286%" y="517" width="0.0794%" height="15" fill="rgb(232,111,31)" fg:x="81" fg:w="1"/><text x="6.6786%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4286%" y="501" width="0.0794%" height="15" fill="rgb(245,82,37)" fg:x="81" fg:w="1"/><text x="6.6786%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.4286%" y="485" width="0.0794%" height="15" fill="rgb(227,149,46)" fg:x="81" fg:w="1"/><text x="6.6786%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.4286%" y="469" width="0.0794%" height="15" fill="rgb(218,36,50)" fg:x="81" fg:w="1"/><text x="6.6786%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.4286%" y="453" width="0.0794%" height="15" fill="rgb(226,80,48)" fg:x="81" fg:w="1"/><text x="6.6786%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.5873%" y="501" width="0.0794%" height="15" fill="rgb(238,224,15)" fg:x="83" fg:w="1"/><text x="6.8373%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="6.5873%" y="485" width="0.0794%" height="15" fill="rgb(241,136,10)" fg:x="83" fg:w="1"/><text x="6.8373%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6667%" y="453" width="0.0794%" height="15" fill="rgb(208,32,45)" fg:x="84" fg:w="1"/><text x="6.9167%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6667%" y="437" width="0.0794%" height="15" fill="rgb(207,135,9)" fg:x="84" fg:w="1"/><text x="6.9167%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7460%" y="421" width="0.0794%" height="15" fill="rgb(206,86,44)" fg:x="85" fg:w="1"/><text x="6.9960%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7460%" y="405" width="0.0794%" height="15" fill="rgb(245,177,15)" fg:x="85" fg:w="1"/><text x="6.9960%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7460%" y="389" width="0.0794%" height="15" fill="rgb(206,64,50)" fg:x="85" fg:w="1"/><text x="6.9960%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.8254%" y="405" width="0.0794%" height="15" fill="rgb(234,36,40)" fg:x="86" fg:w="1"/><text x="7.0754%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8254%" y="389" width="0.0794%" height="15" fill="rgb(213,64,8)" fg:x="86" fg:w="1"/><text x="7.0754%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.8254%" y="373" width="0.0794%" height="15" fill="rgb(210,75,36)" fg:x="86" fg:w="1"/><text x="7.0754%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.8254%" y="357" width="0.0794%" height="15" fill="rgb(229,88,21)" fg:x="86" fg:w="1"/><text x="7.0754%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="6.6667%" y="485" width="0.3175%" height="15" fill="rgb(252,204,47)" fg:x="84" fg:w="4"/><text x="6.9167%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="6.6667%" y="469" width="0.3175%" height="15" fill="rgb(208,77,27)" fg:x="84" fg:w="4"/><text x="6.9167%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.7460%" y="453" width="0.2381%" height="15" fill="rgb(221,76,26)" fg:x="85" fg:w="3"/><text x="6.9960%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="6.7460%" y="437" width="0.2381%" height="15" fill="rgb(225,139,18)" fg:x="85" fg:w="3"/><text x="6.9960%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.8254%" y="421" width="0.1587%" height="15" fill="rgb(230,137,11)" fg:x="86" fg:w="2"/><text x="7.0754%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9048%" y="405" width="0.0794%" height="15" fill="rgb(212,28,1)" fg:x="87" fg:w="1"/><text x="7.1548%" y="415.50"></text></g><g><title>engine::session::Session::flush (21 samples, 1.67%)</title><rect x="5.3968%" y="645" width="1.6667%" height="15" fill="rgb(248,164,17)" fg:x="68" fg:w="21"/><text x="5.6468%" y="655.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.51%)</title><rect x="5.5556%" y="629" width="1.5079%" height="15" fill="rgb(222,171,42)" fg:x="70" fg:w="19"/><text x="5.8056%" y="639.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.51%)</title><rect x="5.5556%" y="613" width="1.5079%" height="15" fill="rgb(243,84,45)" fg:x="70" fg:w="19"/><text x="5.8056%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.51%)</title><rect x="5.5556%" y="597" width="1.5079%" height="15" fill="rgb(252,49,23)" fg:x="70" fg:w="19"/><text x="5.8056%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (18 samples, 1.43%)</title><rect x="5.6349%" y="581" width="1.4286%" height="15" fill="rgb(215,19,7)" fg:x="71" fg:w="18"/><text x="5.8849%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.43%)</title><rect x="5.6349%" y="565" width="1.4286%" height="15" fill="rgb(238,81,41)" fg:x="71" fg:w="18"/><text x="5.8849%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.56%)</title><rect x="6.5079%" y="549" width="0.5556%" height="15" fill="rgb(210,199,37)" fg:x="82" fg:w="7"/><text x="6.7579%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.56%)</title><rect x="6.5079%" y="533" width="0.5556%" height="15" fill="rgb(244,192,49)" fg:x="82" fg:w="7"/><text x="6.7579%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.56%)</title><rect x="6.5079%" y="517" width="0.5556%" height="15" fill="rgb(226,211,11)" fg:x="82" fg:w="7"/><text x="6.7579%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="6.6667%" y="501" width="0.3968%" height="15" fill="rgb(236,162,54)" fg:x="84" fg:w="5"/><text x="6.9167%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.9841%" y="485" width="0.0794%" height="15" fill="rgb(220,229,9)" fg:x="88" fg:w="1"/><text x="7.2341%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.0635%" y="565" width="0.0794%" height="15" fill="rgb(250,87,22)" fg:x="89" fg:w="1"/><text x="7.3135%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0635%" y="549" width="0.0794%" height="15" fill="rgb(239,43,17)" fg:x="89" fg:w="1"/><text x="7.3135%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="7.0635%" y="613" width="0.1587%" height="15" fill="rgb(231,177,25)" fg:x="89" fg:w="2"/><text x="7.3135%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.0635%" y="597" width="0.1587%" height="15" fill="rgb(219,179,1)" fg:x="89" fg:w="2"/><text x="7.3135%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.0635%" y="581" width="0.1587%" height="15" fill="rgb(238,219,53)" fg:x="89" fg:w="2"/><text x="7.3135%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="7.1429%" y="565" width="0.0794%" height="15" fill="rgb(232,167,36)" fg:x="90" fg:w="1"/><text x="7.3929%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.1429%" y="549" width="0.0794%" height="15" fill="rgb(244,19,51)" fg:x="90" fg:w="1"/><text x="7.3929%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.1429%" y="533" width="0.0794%" height="15" fill="rgb(224,6,22)" fg:x="90" fg:w="1"/><text x="7.3929%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.1429%" y="517" width="0.0794%" height="15" fill="rgb(224,145,5)" fg:x="90" fg:w="1"/><text x="7.3929%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.1429%" y="501" width="0.0794%" height="15" fill="rgb(234,130,49)" fg:x="90" fg:w="1"/><text x="7.3929%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="7.2222%" y="613" width="0.0794%" height="15" fill="rgb(254,6,2)" fg:x="91" fg:w="1"/><text x="7.4722%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="7.2222%" y="597" width="0.0794%" height="15" fill="rgb(208,96,46)" fg:x="91" fg:w="1"/><text x="7.4722%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2222%" y="581" width="0.0794%" height="15" fill="rgb(239,3,39)" fg:x="91" fg:w="1"/><text x="7.4722%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2222%" y="565" width="0.0794%" height="15" fill="rgb(233,210,1)" fg:x="91" fg:w="1"/><text x="7.4722%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2222%" y="549" width="0.0794%" height="15" fill="rgb(244,137,37)" fg:x="91" fg:w="1"/><text x="7.4722%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.2222%" y="533" width="0.0794%" height="15" fill="rgb(240,136,2)" fg:x="91" fg:w="1"/><text x="7.4722%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2222%" y="517" width="0.0794%" height="15" fill="rgb(239,18,37)" fg:x="91" fg:w="1"/><text x="7.4722%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.3016%" y="565" width="0.0794%" height="15" fill="rgb(218,185,22)" fg:x="92" fg:w="1"/><text x="7.5516%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.3016%" y="549" width="0.0794%" height="15" fill="rgb(225,218,4)" fg:x="92" fg:w="1"/><text x="7.5516%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.3016%" y="533" width="0.0794%" height="15" fill="rgb(230,182,32)" fg:x="92" fg:w="1"/><text x="7.5516%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.3016%" y="517" width="0.0794%" height="15" fill="rgb(242,56,43)" fg:x="92" fg:w="1"/><text x="7.5516%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="7.0635%" y="629" width="0.3968%" height="15" fill="rgb(233,99,24)" fg:x="89" fg:w="5"/><text x="7.3135%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="7.3016%" y="613" width="0.1587%" height="15" fill="rgb(234,209,42)" fg:x="92" fg:w="2"/><text x="7.5516%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.3016%" y="597" width="0.1587%" height="15" fill="rgb(227,7,12)" fg:x="92" fg:w="2"/><text x="7.5516%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="7.3016%" y="581" width="0.1587%" height="15" fill="rgb(245,203,43)" fg:x="92" fg:w="2"/><text x="7.5516%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.3810%" y="565" width="0.0794%" height="15" fill="rgb(238,205,33)" fg:x="93" fg:w="1"/><text x="7.6310%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.3810%" y="549" width="0.0794%" height="15" fill="rgb(231,56,7)" fg:x="93" fg:w="1"/><text x="7.6310%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3810%" y="533" width="0.0794%" height="15" fill="rgb(244,186,29)" fg:x="93" fg:w="1"/><text x="7.6310%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.3810%" y="517" width="0.0794%" height="15" fill="rgb(234,111,31)" fg:x="93" fg:w="1"/><text x="7.6310%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="7.3810%" y="501" width="0.0794%" height="15" fill="rgb(241,149,10)" fg:x="93" fg:w="1"/><text x="7.6310%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="7.3810%" y="485" width="0.0794%" height="15" fill="rgb(249,206,44)" fg:x="93" fg:w="1"/><text x="7.6310%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="7.4603%" y="629" width="0.0794%" height="15" fill="rgb(251,153,30)" fg:x="94" fg:w="1"/><text x="7.7103%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="7.4603%" y="613" width="0.0794%" height="15" fill="rgb(239,152,38)" fg:x="94" fg:w="1"/><text x="7.7103%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4603%" y="597" width="0.0794%" height="15" fill="rgb(249,139,47)" fg:x="94" fg:w="1"/><text x="7.7103%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.5397%" y="581" width="0.0794%" height="15" fill="rgb(244,64,35)" fg:x="95" fg:w="1"/><text x="7.7897%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.5397%" y="565" width="0.0794%" height="15" fill="rgb(216,46,15)" fg:x="95" fg:w="1"/><text x="7.7897%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.5397%" y="549" width="0.0794%" height="15" fill="rgb(250,74,19)" fg:x="95" fg:w="1"/><text x="7.7897%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5397%" y="533" width="0.0794%" height="15" fill="rgb(249,42,33)" fg:x="95" fg:w="1"/><text x="7.7897%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5397%" y="517" width="0.0794%" height="15" fill="rgb(242,149,17)" fg:x="95" fg:w="1"/><text x="7.7897%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5397%" y="501" width="0.0794%" height="15" fill="rgb(244,29,21)" fg:x="95" fg:w="1"/><text x="7.7897%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5397%" y="485" width="0.0794%" height="15" fill="rgb(220,130,37)" fg:x="95" fg:w="1"/><text x="7.7897%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.5397%" y="469" width="0.0794%" height="15" fill="rgb(211,67,2)" fg:x="95" fg:w="1"/><text x="7.7897%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5397%" y="453" width="0.0794%" height="15" fill="rgb(235,68,52)" fg:x="95" fg:w="1"/><text x="7.7897%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5397%" y="437" width="0.0794%" height="15" fill="rgb(246,142,3)" fg:x="95" fg:w="1"/><text x="7.7897%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5397%" y="421" width="0.0794%" height="15" fill="rgb(241,25,7)" fg:x="95" fg:w="1"/><text x="7.7897%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.5397%" y="405" width="0.0794%" height="15" fill="rgb(242,119,39)" fg:x="95" fg:w="1"/><text x="7.7897%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.5397%" y="389" width="0.0794%" height="15" fill="rgb(241,98,45)" fg:x="95" fg:w="1"/><text x="7.7897%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.5397%" y="373" width="0.0794%" height="15" fill="rgb(254,28,30)" fg:x="95" fg:w="1"/><text x="7.7897%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.5397%" y="357" width="0.0794%" height="15" fill="rgb(241,142,54)" fg:x="95" fg:w="1"/><text x="7.7897%" y="367.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="7.5397%" y="613" width="0.1587%" height="15" fill="rgb(222,85,15)" fg:x="95" fg:w="2"/><text x="7.7897%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="7.5397%" y="597" width="0.1587%" height="15" fill="rgb(210,85,47)" fg:x="95" fg:w="2"/><text x="7.7897%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.6190%" y="581" width="0.0794%" height="15" fill="rgb(224,206,25)" fg:x="96" fg:w="1"/><text x="7.8690%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.6190%" y="565" width="0.0794%" height="15" fill="rgb(243,201,19)" fg:x="96" fg:w="1"/><text x="7.8690%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.6190%" y="549" width="0.0794%" height="15" fill="rgb(236,59,4)" fg:x="96" fg:w="1"/><text x="7.8690%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6190%" y="533" width="0.0794%" height="15" fill="rgb(254,179,45)" fg:x="96" fg:w="1"/><text x="7.8690%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6190%" y="517" width="0.0794%" height="15" fill="rgb(226,14,10)" fg:x="96" fg:w="1"/><text x="7.8690%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6190%" y="501" width="0.0794%" height="15" fill="rgb(244,27,41)" fg:x="96" fg:w="1"/><text x="7.8690%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6190%" y="485" width="0.0794%" height="15" fill="rgb(235,35,32)" fg:x="96" fg:w="1"/><text x="7.8690%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.6190%" y="469" width="0.0794%" height="15" fill="rgb(218,68,31)" fg:x="96" fg:w="1"/><text x="7.8690%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6190%" y="453" width="0.0794%" height="15" fill="rgb(207,120,37)" fg:x="96" fg:w="1"/><text x="7.8690%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.6190%" y="437" width="0.0794%" height="15" fill="rgb(227,98,0)" fg:x="96" fg:w="1"/><text x="7.8690%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.6190%" y="421" width="0.0794%" height="15" fill="rgb(207,7,3)" fg:x="96" fg:w="1"/><text x="7.8690%" y="431.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="7.6984%" y="613" width="0.0794%" height="15" fill="rgb(206,98,19)" fg:x="97" fg:w="1"/><text x="7.9484%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6984%" y="597" width="0.0794%" height="15" fill="rgb(217,5,26)" fg:x="97" fg:w="1"/><text x="7.9484%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6984%" y="581" width="0.0794%" height="15" fill="rgb(235,190,38)" fg:x="97" fg:w="1"/><text x="7.9484%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="7.6984%" y="565" width="0.0794%" height="15" fill="rgb(247,86,24)" fg:x="97" fg:w="1"/><text x="7.9484%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="7.6984%" y="549" width="0.0794%" height="15" fill="rgb(205,101,16)" fg:x="97" fg:w="1"/><text x="7.9484%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6984%" y="533" width="0.0794%" height="15" fill="rgb(246,168,33)" fg:x="97" fg:w="1"/><text x="7.9484%" y="543.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="7.8571%" y="597" width="0.0794%" height="15" fill="rgb(231,114,1)" fg:x="99" fg:w="1"/><text x="8.1071%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.8571%" y="581" width="0.0794%" height="15" fill="rgb(207,184,53)" fg:x="99" fg:w="1"/><text x="8.1071%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="7.8571%" y="565" width="0.0794%" height="15" fill="rgb(224,95,51)" fg:x="99" fg:w="1"/><text x="8.1071%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.8571%" y="549" width="0.0794%" height="15" fill="rgb(212,188,45)" fg:x="99" fg:w="1"/><text x="8.1071%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.8571%" y="533" width="0.0794%" height="15" fill="rgb(223,154,38)" fg:x="99" fg:w="1"/><text x="8.1071%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8571%" y="517" width="0.0794%" height="15" fill="rgb(251,22,52)" fg:x="99" fg:w="1"/><text x="8.1071%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8571%" y="501" width="0.0794%" height="15" fill="rgb(229,209,22)" fg:x="99" fg:w="1"/><text x="8.1071%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8571%" y="485" width="0.0794%" height="15" fill="rgb(234,138,34)" fg:x="99" fg:w="1"/><text x="8.1071%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8571%" y="469" width="0.0794%" height="15" fill="rgb(212,95,11)" fg:x="99" fg:w="1"/><text x="8.1071%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.8571%" y="453" width="0.0794%" height="15" fill="rgb(240,179,47)" fg:x="99" fg:w="1"/><text x="8.1071%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8571%" y="437" width="0.0794%" height="15" fill="rgb(240,163,11)" fg:x="99" fg:w="1"/><text x="8.1071%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8571%" y="421" width="0.0794%" height="15" fill="rgb(236,37,12)" fg:x="99" fg:w="1"/><text x="8.1071%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8571%" y="405" width="0.0794%" height="15" fill="rgb(232,164,16)" fg:x="99" fg:w="1"/><text x="8.1071%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.8571%" y="389" width="0.0794%" height="15" fill="rgb(244,205,15)" fg:x="99" fg:w="1"/><text x="8.1071%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.8571%" y="373" width="0.0794%" height="15" fill="rgb(223,117,47)" fg:x="99" fg:w="1"/><text x="8.1071%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.8571%" y="357" width="0.0794%" height="15" fill="rgb(244,107,35)" fg:x="99" fg:w="1"/><text x="8.1071%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.8571%" y="341" width="0.0794%" height="15" fill="rgb(205,140,8)" fg:x="99" fg:w="1"/><text x="8.1071%" y="351.50"></text></g><g><title>plugins_core::build::Build::holding (12 samples, 0.95%)</title><rect x="7.0635%" y="645" width="0.9524%" height="15" fill="rgb(228,84,46)" fg:x="89" fg:w="12"/><text x="7.3135%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.48%)</title><rect x="7.5397%" y="629" width="0.4762%" height="15" fill="rgb(254,188,9)" fg:x="95" fg:w="6"/><text x="7.7897%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="7.7778%" y="613" width="0.2381%" height="15" fill="rgb(206,112,54)" fg:x="98" fg:w="3"/><text x="8.0278%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="7.9365%" y="597" width="0.0794%" height="15" fill="rgb(216,84,49)" fg:x="100" fg:w="1"/><text x="8.1865%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.9365%" y="581" width="0.0794%" height="15" fill="rgb(214,194,35)" fg:x="100" fg:w="1"/><text x="8.1865%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="8.0159%" y="597" width="0.0794%" height="15" fill="rgb(249,28,3)" fg:x="101" fg:w="1"/><text x="8.2659%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0952%" y="565" width="0.0794%" height="15" fill="rgb(222,56,52)" fg:x="102" fg:w="1"/><text x="8.3452%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0952%" y="549" width="0.0794%" height="15" fill="rgb(245,217,50)" fg:x="102" fg:w="1"/><text x="8.3452%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0952%" y="533" width="0.0794%" height="15" fill="rgb(213,201,24)" fg:x="102" fg:w="1"/><text x="8.3452%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.0952%" y="517" width="0.0794%" height="15" fill="rgb(248,116,28)" fg:x="102" fg:w="1"/><text x="8.3452%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0952%" y="501" width="0.0794%" height="15" fill="rgb(219,72,43)" fg:x="102" fg:w="1"/><text x="8.3452%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.0952%" y="485" width="0.0794%" height="15" fill="rgb(209,138,14)" fg:x="102" fg:w="1"/><text x="8.3452%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.0952%" y="469" width="0.0794%" height="15" fill="rgb(222,18,33)" fg:x="102" fg:w="1"/><text x="8.3452%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.0952%" y="453" width="0.0794%" height="15" fill="rgb(213,199,7)" fg:x="102" fg:w="1"/><text x="8.3452%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.0952%" y="437" width="0.0794%" height="15" fill="rgb(250,110,10)" fg:x="102" fg:w="1"/><text x="8.3452%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0952%" y="421" width="0.0794%" height="15" fill="rgb(248,123,6)" fg:x="102" fg:w="1"/><text x="8.3452%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.0952%" y="405" width="0.0794%" height="15" fill="rgb(206,91,31)" fg:x="102" fg:w="1"/><text x="8.3452%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.0952%" y="389" width="0.0794%" height="15" fill="rgb(211,154,13)" fg:x="102" fg:w="1"/><text x="8.3452%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.0952%" y="373" width="0.0794%" height="15" fill="rgb(225,148,7)" fg:x="102" fg:w="1"/><text x="8.3452%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.0952%" y="357" width="0.0794%" height="15" fill="rgb(220,160,43)" fg:x="102" fg:w="1"/><text x="8.3452%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.0952%" y="341" width="0.0794%" height="15" fill="rgb(213,52,39)" fg:x="102" fg:w="1"/><text x="8.3452%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.0952%" y="325" width="0.0794%" height="15" fill="rgb(243,137,7)" fg:x="102" fg:w="1"/><text x="8.3452%" y="335.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="8.0159%" y="645" width="0.2381%" height="15" fill="rgb(230,79,13)" fg:x="101" fg:w="3"/><text x="8.2659%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="8.0159%" y="629" width="0.2381%" height="15" fill="rgb(247,105,23)" fg:x="101" fg:w="3"/><text x="8.2659%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="8.0159%" y="613" width="0.2381%" height="15" fill="rgb(223,179,41)" fg:x="101" fg:w="3"/><text x="8.2659%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.0952%" y="597" width="0.1587%" height="15" fill="rgb(218,9,34)" fg:x="102" fg:w="2"/><text x="8.3452%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.0952%" y="581" width="0.1587%" height="15" fill="rgb(222,106,8)" fg:x="102" fg:w="2"/><text x="8.3452%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1746%" y="565" width="0.0794%" height="15" fill="rgb(211,220,0)" fg:x="103" fg:w="1"/><text x="8.4246%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1746%" y="549" width="0.0794%" height="15" fill="rgb(229,52,16)" fg:x="103" fg:w="1"/><text x="8.4246%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1746%" y="533" width="0.0794%" height="15" fill="rgb(212,155,18)" fg:x="103" fg:w="1"/><text x="8.4246%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1746%" y="517" width="0.0794%" height="15" fill="rgb(242,21,14)" fg:x="103" fg:w="1"/><text x="8.4246%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.1746%" y="501" width="0.0794%" height="15" fill="rgb(222,19,48)" fg:x="103" fg:w="1"/><text x="8.4246%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.1746%" y="485" width="0.0794%" height="15" fill="rgb(232,45,27)" fg:x="103" fg:w="1"/><text x="8.4246%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.1746%" y="469" width="0.0794%" height="15" fill="rgb(249,103,42)" fg:x="103" fg:w="1"/><text x="8.4246%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.2540%" y="565" width="0.0794%" height="15" fill="rgb(246,81,33)" fg:x="104" fg:w="1"/><text x="8.5040%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.2540%" y="549" width="0.0794%" height="15" fill="rgb(252,33,42)" fg:x="104" fg:w="1"/><text x="8.5040%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.2540%" y="533" width="0.0794%" height="15" fill="rgb(209,212,41)" fg:x="104" fg:w="1"/><text x="8.5040%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.2540%" y="517" width="0.0794%" height="15" fill="rgb(207,154,6)" fg:x="104" fg:w="1"/><text x="8.5040%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3333%" y="533" width="0.0794%" height="15" fill="rgb(223,64,47)" fg:x="105" fg:w="1"/><text x="8.5833%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3333%" y="517" width="0.0794%" height="15" fill="rgb(211,161,38)" fg:x="105" fg:w="1"/><text x="8.5833%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3333%" y="501" width="0.0794%" height="15" fill="rgb(219,138,40)" fg:x="105" fg:w="1"/><text x="8.5833%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3333%" y="485" width="0.0794%" height="15" fill="rgb(241,228,46)" fg:x="105" fg:w="1"/><text x="8.5833%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3333%" y="469" width="0.0794%" height="15" fill="rgb(223,209,38)" fg:x="105" fg:w="1"/><text x="8.5833%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="8.2540%" y="629" width="0.2381%" height="15" fill="rgb(236,164,45)" fg:x="104" fg:w="3"/><text x="8.5040%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="8.2540%" y="613" width="0.2381%" height="15" fill="rgb(231,15,5)" fg:x="104" fg:w="3"/><text x="8.5040%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="8.2540%" y="597" width="0.2381%" height="15" fill="rgb(252,35,15)" fg:x="104" fg:w="3"/><text x="8.5040%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="8.2540%" y="581" width="0.2381%" height="15" fill="rgb(248,181,18)" fg:x="104" fg:w="3"/><text x="8.5040%" y="591.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="8.3333%" y="565" width="0.1587%" height="15" fill="rgb(233,39,42)" fg:x="105" fg:w="2"/><text x="8.5833%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="8.3333%" y="549" width="0.1587%" height="15" fill="rgb(238,110,33)" fg:x="105" fg:w="2"/><text x="8.5833%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4127%" y="533" width="0.0794%" height="15" fill="rgb(233,195,10)" fg:x="106" fg:w="1"/><text x="8.6627%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4127%" y="517" width="0.0794%" height="15" fill="rgb(254,105,3)" fg:x="106" fg:w="1"/><text x="8.6627%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Props&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4127%" y="501" width="0.0794%" height="15" fill="rgb(221,225,9)" fg:x="106" fg:w="1"/><text x="8.6627%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.4127%" y="485" width="0.0794%" height="15" fill="rgb(224,227,45)" fg:x="106" fg:w="1"/><text x="8.6627%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.4127%" y="469" width="0.0794%" height="15" fill="rgb(229,198,43)" fg:x="106" fg:w="1"/><text x="8.6627%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4127%" y="453" width="0.0794%" height="15" fill="rgb(206,209,35)" fg:x="106" fg:w="1"/><text x="8.6627%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.4127%" y="437" width="0.0794%" height="15" fill="rgb(245,195,53)" fg:x="106" fg:w="1"/><text x="8.6627%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4921%" y="533" width="0.0794%" height="15" fill="rgb(240,92,26)" fg:x="107" fg:w="1"/><text x="8.7421%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4921%" y="517" width="0.0794%" height="15" fill="rgb(207,40,23)" fg:x="107" fg:w="1"/><text x="8.7421%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4921%" y="501" width="0.0794%" height="15" fill="rgb(223,111,35)" fg:x="107" fg:w="1"/><text x="8.7421%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.4921%" y="485" width="0.0794%" height="15" fill="rgb(229,147,28)" fg:x="107" fg:w="1"/><text x="8.7421%" y="495.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="8.4921%" y="613" width="0.1587%" height="15" fill="rgb(211,29,28)" fg:x="107" fg:w="2"/><text x="8.7421%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="8.4921%" y="597" width="0.1587%" height="15" fill="rgb(228,72,33)" fg:x="107" fg:w="2"/><text x="8.7421%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="8.4921%" y="581" width="0.1587%" height="15" fill="rgb(205,214,31)" fg:x="107" fg:w="2"/><text x="8.7421%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.4921%" y="565" width="0.1587%" height="15" fill="rgb(224,111,15)" fg:x="107" fg:w="2"/><text x="8.7421%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.4921%" y="549" width="0.1587%" height="15" fill="rgb(253,21,26)" fg:x="107" fg:w="2"/><text x="8.7421%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="8.5714%" y="533" width="0.0794%" height="15" fill="rgb(245,139,43)" fg:x="108" fg:w="1"/><text x="8.8214%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="8.5714%" y="517" width="0.0794%" height="15" fill="rgb(252,170,7)" fg:x="108" fg:w="1"/><text x="8.8214%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5714%" y="501" width="0.0794%" height="15" fill="rgb(231,118,14)" fg:x="108" fg:w="1"/><text x="8.8214%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="8.5714%" y="485" width="0.0794%" height="15" fill="rgb(238,83,0)" fg:x="108" fg:w="1"/><text x="8.8214%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.5714%" y="469" width="0.0794%" height="15" fill="rgb(221,39,39)" fg:x="108" fg:w="1"/><text x="8.8214%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.5714%" y="453" width="0.0794%" height="15" fill="rgb(222,119,46)" fg:x="108" fg:w="1"/><text x="8.8214%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="8.6508%" y="613" width="0.0794%" height="15" fill="rgb(222,165,49)" fg:x="109" fg:w="1"/><text x="8.9008%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6508%" y="597" width="0.0794%" height="15" fill="rgb(219,113,52)" fg:x="109" fg:w="1"/><text x="8.9008%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6508%" y="581" width="0.0794%" height="15" fill="rgb(214,7,15)" fg:x="109" fg:w="1"/><text x="8.9008%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.6508%" y="565" width="0.0794%" height="15" fill="rgb(235,32,4)" fg:x="109" fg:w="1"/><text x="8.9008%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.6508%" y="549" width="0.0794%" height="15" fill="rgb(238,90,54)" fg:x="109" fg:w="1"/><text x="8.9008%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.6508%" y="533" width="0.0794%" height="15" fill="rgb(213,208,19)" fg:x="109" fg:w="1"/><text x="8.9008%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.6508%" y="517" width="0.0794%" height="15" fill="rgb(233,156,4)" fg:x="109" fg:w="1"/><text x="8.9008%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6508%" y="501" width="0.0794%" height="15" fill="rgb(207,194,5)" fg:x="109" fg:w="1"/><text x="8.9008%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.6508%" y="485" width="0.0794%" height="15" fill="rgb(206,111,30)" fg:x="109" fg:w="1"/><text x="8.9008%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="8.6508%" y="469" width="0.0794%" height="15" fill="rgb(243,70,54)" fg:x="109" fg:w="1"/><text x="8.9008%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="8.6508%" y="453" width="0.0794%" height="15" fill="rgb(242,28,8)" fg:x="109" fg:w="1"/><text x="8.9008%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="8.6508%" y="437" width="0.0794%" height="15" fill="rgb(219,106,18)" fg:x="109" fg:w="1"/><text x="8.9008%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="8.6508%" y="421" width="0.0794%" height="15" fill="rgb(244,222,10)" fg:x="109" fg:w="1"/><text x="8.9008%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6508%" y="405" width="0.0794%" height="15" fill="rgb(236,179,52)" fg:x="109" fg:w="1"/><text x="8.9008%" y="415.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.7302%" y="613" width="0.0794%" height="15" fill="rgb(213,23,39)" fg:x="110" fg:w="1"/><text x="8.9802%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7302%" y="597" width="0.0794%" height="15" fill="rgb(238,48,10)" fg:x="110" fg:w="1"/><text x="8.9802%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7302%" y="581" width="0.0794%" height="15" fill="rgb(251,196,23)" fg:x="110" fg:w="1"/><text x="8.9802%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="8.7302%" y="565" width="0.0794%" height="15" fill="rgb(250,152,24)" fg:x="110" fg:w="1"/><text x="8.9802%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.7302%" y="549" width="0.0794%" height="15" fill="rgb(209,150,17)" fg:x="110" fg:w="1"/><text x="8.9802%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7302%" y="533" width="0.0794%" height="15" fill="rgb(234,202,34)" fg:x="110" fg:w="1"/><text x="8.9802%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.7302%" y="517" width="0.0794%" height="15" fill="rgb(253,148,53)" fg:x="110" fg:w="1"/><text x="8.9802%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.7302%" y="501" width="0.0794%" height="15" fill="rgb(218,129,16)" fg:x="110" fg:w="1"/><text x="8.9802%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (55 samples, 4.37%)</title><rect x="4.5238%" y="661" width="4.3651%" height="15" fill="rgb(216,85,19)" fg:x="57" fg:w="55"/><text x="4.7738%" y="671.50">plugi..</text></g><g><title>plugins_core::build::Build::occupying (8 samples, 0.63%)</title><rect x="8.2540%" y="645" width="0.6349%" height="15" fill="rgb(235,228,7)" fg:x="104" fg:w="8"/><text x="8.5040%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="8.4921%" y="629" width="0.3968%" height="15" fill="rgb(245,175,0)" fg:x="107" fg:w="5"/><text x="8.7421%" y="639.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (1 samples, 0.08%)</title><rect x="8.8095%" y="613" width="0.0794%" height="15" fill="rgb(208,168,36)" fg:x="111" fg:w="1"/><text x="9.0595%" y="623.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="8.8095%" y="597" width="0.0794%" height="15" fill="rgb(246,171,24)" fg:x="111" fg:w="1"/><text x="9.0595%" y="607.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="8.8095%" y="581" width="0.0794%" height="15" fill="rgb(215,142,24)" fg:x="111" fg:w="1"/><text x="9.0595%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.8095%" y="565" width="0.0794%" height="15" fill="rgb(250,187,7)" fg:x="111" fg:w="1"/><text x="9.0595%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.8095%" y="549" width="0.0794%" height="15" fill="rgb(228,66,33)" fg:x="111" fg:w="1"/><text x="9.0595%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.8095%" y="533" width="0.0794%" height="15" fill="rgb(234,215,21)" fg:x="111" fg:w="1"/><text x="9.0595%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8095%" y="517" width="0.0794%" height="15" fill="rgb(222,191,20)" fg:x="111" fg:w="1"/><text x="9.0595%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8095%" y="501" width="0.0794%" height="15" fill="rgb(245,79,54)" fg:x="111" fg:w="1"/><text x="9.0595%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8095%" y="485" width="0.0794%" height="15" fill="rgb(240,10,37)" fg:x="111" fg:w="1"/><text x="9.0595%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8095%" y="469" width="0.0794%" height="15" fill="rgb(214,192,32)" fg:x="111" fg:w="1"/><text x="9.0595%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8095%" y="453" width="0.0794%" height="15" fill="rgb(209,36,54)" fg:x="111" fg:w="1"/><text x="9.0595%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.8889%" y="613" width="0.0794%" height="15" fill="rgb(220,10,11)" fg:x="112" fg:w="1"/><text x="9.1389%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.8889%" y="597" width="0.0794%" height="15" fill="rgb(221,106,17)" fg:x="112" fg:w="1"/><text x="9.1389%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.8889%" y="581" width="0.0794%" height="15" fill="rgb(251,142,44)" fg:x="112" fg:w="1"/><text x="9.1389%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8889%" y="565" width="0.0794%" height="15" fill="rgb(238,13,15)" fg:x="112" fg:w="1"/><text x="9.1389%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8889%" y="549" width="0.0794%" height="15" fill="rgb(208,107,27)" fg:x="112" fg:w="1"/><text x="9.1389%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.8889%" y="533" width="0.0794%" height="15" fill="rgb(205,136,37)" fg:x="112" fg:w="1"/><text x="9.1389%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.8889%" y="517" width="0.0794%" height="15" fill="rgb(250,205,27)" fg:x="112" fg:w="1"/><text x="9.1389%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="8.8889%" y="661" width="0.1587%" height="15" fill="rgb(210,80,43)" fg:x="112" fg:w="2"/><text x="9.1389%" y="671.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="8.8889%" y="645" width="0.1587%" height="15" fill="rgb(247,160,36)" fg:x="112" fg:w="2"/><text x="9.1389%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="8.8889%" y="629" width="0.1587%" height="15" fill="rgb(234,13,49)" fg:x="112" fg:w="2"/><text x="9.1389%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.9683%" y="613" width="0.0794%" height="15" fill="rgb(234,122,0)" fg:x="113" fg:w="1"/><text x="9.2183%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="8.9683%" y="597" width="0.0794%" height="15" fill="rgb(207,146,38)" fg:x="113" fg:w="1"/><text x="9.2183%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="8.9683%" y="581" width="0.0794%" height="15" fill="rgb(207,177,25)" fg:x="113" fg:w="1"/><text x="9.2183%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9683%" y="565" width="0.0794%" height="15" fill="rgb(211,178,42)" fg:x="113" fg:w="1"/><text x="9.2183%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.9683%" y="549" width="0.0794%" height="15" fill="rgb(230,69,54)" fg:x="113" fg:w="1"/><text x="9.2183%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9683%" y="533" width="0.0794%" height="15" fill="rgb(214,135,41)" fg:x="113" fg:w="1"/><text x="9.2183%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9683%" y="517" width="0.0794%" height="15" fill="rgb(237,67,25)" fg:x="113" fg:w="1"/><text x="9.2183%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9683%" y="501" width="0.0794%" height="15" fill="rgb(222,189,50)" fg:x="113" fg:w="1"/><text x="9.2183%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9683%" y="485" width="0.0794%" height="15" fill="rgb(245,148,34)" fg:x="113" fg:w="1"/><text x="9.2183%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9683%" y="469" width="0.0794%" height="15" fill="rgb(222,29,6)" fg:x="113" fg:w="1"/><text x="9.2183%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9683%" y="453" width="0.0794%" height="15" fill="rgb(221,189,43)" fg:x="113" fg:w="1"/><text x="9.2183%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9683%" y="437" width="0.0794%" height="15" fill="rgb(207,36,27)" fg:x="113" fg:w="1"/><text x="9.2183%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9683%" y="421" width="0.0794%" height="15" fill="rgb(217,90,24)" fg:x="113" fg:w="1"/><text x="9.2183%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.9683%" y="405" width="0.0794%" height="15" fill="rgb(224,66,35)" fg:x="113" fg:w="1"/><text x="9.2183%" y="415.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (97 samples, 7.70%)</title><rect x="1.4286%" y="677" width="7.6984%" height="15" fill="rgb(221,13,50)" fg:x="18" fg:w="97"/><text x="1.6786%" y="687.50">&lt;tests::Hol..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (1 samples, 0.08%)</title><rect x="9.0476%" y="661" width="0.0794%" height="15" fill="rgb(236,68,49)" fg:x="114" fg:w="1"/><text x="9.2976%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="9.0476%" y="645" width="0.0794%" height="15" fill="rgb(229,146,28)" fg:x="114" fg:w="1"/><text x="9.2976%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="9.0476%" y="629" width="0.0794%" height="15" fill="rgb(225,31,38)" fg:x="114" fg:w="1"/><text x="9.2976%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="9.0476%" y="613" width="0.0794%" height="15" fill="rgb(250,208,3)" fg:x="114" fg:w="1"/><text x="9.2976%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="9.0476%" y="597" width="0.0794%" height="15" fill="rgb(246,54,23)" fg:x="114" fg:w="1"/><text x="9.2976%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.0476%" y="581" width="0.0794%" height="15" fill="rgb(243,76,11)" fg:x="114" fg:w="1"/><text x="9.2976%" y="591.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="9.0476%" y="565" width="0.0794%" height="15" fill="rgb(245,21,50)" fg:x="114" fg:w="1"/><text x="9.2976%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0476%" y="549" width="0.0794%" height="15" fill="rgb(228,9,43)" fg:x="114" fg:w="1"/><text x="9.2976%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0476%" y="533" width="0.0794%" height="15" fill="rgb(208,100,47)" fg:x="114" fg:w="1"/><text x="9.2976%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0476%" y="517" width="0.0794%" height="15" fill="rgb(232,26,8)" fg:x="114" fg:w="1"/><text x="9.2976%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0476%" y="501" width="0.0794%" height="15" fill="rgb(216,166,38)" fg:x="114" fg:w="1"/><text x="9.2976%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.0476%" y="485" width="0.0794%" height="15" fill="rgb(251,202,51)" fg:x="114" fg:w="1"/><text x="9.2976%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.1270%" y="629" width="0.1587%" height="15" fill="rgb(254,216,34)" fg:x="115" fg:w="2"/><text x="9.3770%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.1270%" y="613" width="0.1587%" height="15" fill="rgb(251,32,27)" fg:x="115" fg:w="2"/><text x="9.3770%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="9.2063%" y="597" width="0.0794%" height="15" fill="rgb(208,127,28)" fg:x="116" fg:w="1"/><text x="9.4563%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2063%" y="581" width="0.0794%" height="15" fill="rgb(224,137,22)" fg:x="116" fg:w="1"/><text x="9.4563%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.2063%" y="565" width="0.0794%" height="15" fill="rgb(254,70,32)" fg:x="116" fg:w="1"/><text x="9.4563%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.2063%" y="549" width="0.0794%" height="15" fill="rgb(229,75,37)" fg:x="116" fg:w="1"/><text x="9.4563%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.2063%" y="533" width="0.0794%" height="15" fill="rgb(252,64,23)" fg:x="116" fg:w="1"/><text x="9.4563%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.2063%" y="517" width="0.0794%" height="15" fill="rgb(232,162,48)" fg:x="116" fg:w="1"/><text x="9.4563%" y="527.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.2063%" y="501" width="0.0794%" height="15" fill="rgb(246,160,12)" fg:x="116" fg:w="1"/><text x="9.4563%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.2063%" y="485" width="0.0794%" height="15" fill="rgb(247,166,0)" fg:x="116" fg:w="1"/><text x="9.4563%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="9.3651%" y="565" width="0.2381%" height="15" fill="rgb(249,219,21)" fg:x="118" fg:w="3"/><text x="9.6151%" y="575.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.4444%" y="549" width="0.1587%" height="15" fill="rgb(205,209,3)" fg:x="119" fg:w="2"/><text x="9.6944%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.5238%" y="533" width="0.0794%" height="15" fill="rgb(243,44,1)" fg:x="120" fg:w="1"/><text x="9.7738%" y="543.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="9.5238%" y="517" width="0.0794%" height="15" fill="rgb(206,159,16)" fg:x="120" fg:w="1"/><text x="9.7738%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (6 samples, 0.48%)</title><rect x="9.2857%" y="581" width="0.4762%" height="15" fill="rgb(244,77,30)" fg:x="117" fg:w="6"/><text x="9.5357%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="9.6032%" y="565" width="0.1587%" height="15" fill="rgb(218,69,12)" fg:x="121" fg:w="2"/><text x="9.8532%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.6825%" y="549" width="0.0794%" height="15" fill="rgb(212,87,7)" fg:x="122" fg:w="1"/><text x="9.9325%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.7619%" y="565" width="0.0794%" height="15" fill="rgb(245,114,25)" fg:x="123" fg:w="1"/><text x="10.0119%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.8413%" y="565" width="0.1587%" height="15" fill="rgb(210,61,42)" fg:x="124" fg:w="2"/><text x="10.0913%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9206%" y="549" width="0.0794%" height="15" fill="rgb(211,52,33)" fg:x="125" fg:w="1"/><text x="10.1706%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9206%" y="533" width="0.0794%" height="15" fill="rgb(234,58,33)" fg:x="125" fg:w="1"/><text x="10.1706%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.0000%" y="549" width="0.0794%" height="15" fill="rgb(220,115,36)" fg:x="126" fg:w="1"/><text x="10.2500%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.0000%" y="533" width="0.0794%" height="15" fill="rgb(243,153,54)" fg:x="126" fg:w="1"/><text x="10.2500%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.0000%" y="517" width="0.0794%" height="15" fill="rgb(251,47,18)" fg:x="126" fg:w="1"/><text x="10.2500%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0000%" y="501" width="0.0794%" height="15" fill="rgb(242,102,42)" fg:x="126" fg:w="1"/><text x="10.2500%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.0794%" y="549" width="0.0794%" height="15" fill="rgb(234,31,38)" fg:x="127" fg:w="1"/><text x="10.3294%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0794%" y="533" width="0.0794%" height="15" fill="rgb(221,117,51)" fg:x="127" fg:w="1"/><text x="10.3294%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.1587%" y="501" width="0.1587%" height="15" fill="rgb(212,20,18)" fg:x="128" fg:w="2"/><text x="10.4087%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.1587%" y="485" width="0.1587%" height="15" fill="rgb(245,133,36)" fg:x="128" fg:w="2"/><text x="10.4087%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.2381%" y="469" width="0.0794%" height="15" fill="rgb(212,6,19)" fg:x="129" fg:w="1"/><text x="10.4881%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2381%" y="453" width="0.0794%" height="15" fill="rgb(218,1,36)" fg:x="129" fg:w="1"/><text x="10.4881%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.1587%" y="517" width="0.3175%" height="15" fill="rgb(246,84,54)" fg:x="128" fg:w="4"/><text x="10.4087%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3175%" y="501" width="0.1587%" height="15" fill="rgb(242,110,6)" fg:x="130" fg:w="2"/><text x="10.5675%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="10.3175%" y="485" width="0.1587%" height="15" fill="rgb(214,47,5)" fg:x="130" fg:w="2"/><text x="10.5675%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3968%" y="469" width="0.0794%" height="15" fill="rgb(218,159,25)" fg:x="131" fg:w="1"/><text x="10.6468%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="10.0000%" y="565" width="0.5556%" height="15" fill="rgb(215,211,28)" fg:x="126" fg:w="7"/><text x="10.2500%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.1587%" y="549" width="0.3968%" height="15" fill="rgb(238,59,32)" fg:x="128" fg:w="5"/><text x="10.4087%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="10.1587%" y="533" width="0.3968%" height="15" fill="rgb(226,82,3)" fg:x="128" fg:w="5"/><text x="10.4087%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.4762%" y="517" width="0.0794%" height="15" fill="rgb(240,164,32)" fg:x="132" fg:w="1"/><text x="10.7262%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (17 samples, 1.35%)</title><rect x="9.2857%" y="597" width="1.3492%" height="15" fill="rgb(232,46,7)" fg:x="117" fg:w="17"/><text x="9.5357%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.87%)</title><rect x="9.7619%" y="581" width="0.8730%" height="15" fill="rgb(229,129,53)" fg:x="123" fg:w="11"/><text x="10.0119%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.5556%" y="565" width="0.0794%" height="15" fill="rgb(234,188,29)" fg:x="133" fg:w="1"/><text x="10.8056%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.5556%" y="549" width="0.0794%" height="15" fill="rgb(246,141,4)" fg:x="133" fg:w="1"/><text x="10.8056%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.5556%" y="533" width="0.0794%" height="15" fill="rgb(229,23,39)" fg:x="133" fg:w="1"/><text x="10.8056%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.5556%" y="517" width="0.0794%" height="15" fill="rgb(206,12,3)" fg:x="133" fg:w="1"/><text x="10.8056%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6349%" y="597" width="0.0794%" height="15" fill="rgb(252,226,20)" fg:x="134" fg:w="1"/><text x="10.8849%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.6349%" y="581" width="0.0794%" height="15" fill="rgb(216,123,35)" fg:x="134" fg:w="1"/><text x="10.8849%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6349%" y="565" width="0.0794%" height="15" fill="rgb(212,68,40)" fg:x="134" fg:w="1"/><text x="10.8849%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6349%" y="549" width="0.0794%" height="15" fill="rgb(254,125,32)" fg:x="134" fg:w="1"/><text x="10.8849%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6349%" y="533" width="0.0794%" height="15" fill="rgb(253,97,22)" fg:x="134" fg:w="1"/><text x="10.8849%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.6349%" y="517" width="0.0794%" height="15" fill="rgb(241,101,14)" fg:x="134" fg:w="1"/><text x="10.8849%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.6349%" y="501" width="0.0794%" height="15" fill="rgb(238,103,29)" fg:x="134" fg:w="1"/><text x="10.8849%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.6349%" y="485" width="0.0794%" height="15" fill="rgb(233,195,47)" fg:x="134" fg:w="1"/><text x="10.8849%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="10.8730%" y="485" width="0.0794%" height="15" fill="rgb(246,218,30)" fg:x="137" fg:w="1"/><text x="11.1230%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="10.8730%" y="469" width="0.0794%" height="15" fill="rgb(219,145,47)" fg:x="137" fg:w="1"/><text x="11.1230%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="10.9524%" y="469" width="0.2381%" height="15" fill="rgb(243,12,26)" fg:x="138" fg:w="3"/><text x="11.2024%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.0317%" y="453" width="0.1587%" height="15" fill="rgb(214,87,16)" fg:x="139" fg:w="2"/><text x="11.2817%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="10.7143%" y="565" width="0.5556%" height="15" fill="rgb(208,99,42)" fg:x="135" fg:w="7"/><text x="10.9643%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="10.7937%" y="549" width="0.4762%" height="15" fill="rgb(253,99,2)" fg:x="136" fg:w="6"/><text x="11.0437%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="10.7937%" y="533" width="0.4762%" height="15" fill="rgb(220,168,23)" fg:x="136" fg:w="6"/><text x="11.0437%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="10.7937%" y="517" width="0.4762%" height="15" fill="rgb(242,38,24)" fg:x="136" fg:w="6"/><text x="11.0437%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="10.8730%" y="501" width="0.3968%" height="15" fill="rgb(225,182,9)" fg:x="137" fg:w="5"/><text x="11.1230%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.9524%" y="485" width="0.3175%" height="15" fill="rgb(243,178,37)" fg:x="138" fg:w="4"/><text x="11.2024%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.1905%" y="469" width="0.0794%" height="15" fill="rgb(232,139,19)" fg:x="141" fg:w="1"/><text x="11.4405%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="11.1905%" y="453" width="0.0794%" height="15" fill="rgb(225,201,24)" fg:x="141" fg:w="1"/><text x="11.4405%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.1905%" y="437" width="0.0794%" height="15" fill="rgb(221,47,46)" fg:x="141" fg:w="1"/><text x="11.4405%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.63%)</title><rect x="10.7143%" y="581" width="0.6349%" height="15" fill="rgb(249,23,13)" fg:x="135" fg:w="8"/><text x="10.9643%" y="591.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="11.2698%" y="565" width="0.0794%" height="15" fill="rgb(219,9,5)" fg:x="142" fg:w="1"/><text x="11.5198%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.2698%" y="549" width="0.0794%" height="15" fill="rgb(254,171,16)" fg:x="142" fg:w="1"/><text x="11.5198%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="11.2698%" y="533" width="0.0794%" height="15" fill="rgb(230,171,20)" fg:x="142" fg:w="1"/><text x="11.5198%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.3492%" y="549" width="0.0794%" height="15" fill="rgb(210,71,41)" fg:x="143" fg:w="1"/><text x="11.5992%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4286%" y="549" width="0.0794%" height="15" fill="rgb(206,173,20)" fg:x="144" fg:w="1"/><text x="11.6786%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.4286%" y="533" width="0.0794%" height="15" fill="rgb(233,88,34)" fg:x="144" fg:w="1"/><text x="11.6786%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4286%" y="517" width="0.0794%" height="15" fill="rgb(223,209,46)" fg:x="144" fg:w="1"/><text x="11.6786%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5079%" y="549" width="0.0794%" height="15" fill="rgb(250,43,18)" fg:x="145" fg:w="1"/><text x="11.7579%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.5079%" y="533" width="0.0794%" height="15" fill="rgb(208,13,10)" fg:x="145" fg:w="1"/><text x="11.7579%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.5873%" y="469" width="0.0794%" height="15" fill="rgb(212,200,36)" fg:x="146" fg:w="1"/><text x="11.8373%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.5873%" y="453" width="0.0794%" height="15" fill="rgb(225,90,30)" fg:x="146" fg:w="1"/><text x="11.8373%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="11.5873%" y="501" width="0.1587%" height="15" fill="rgb(236,182,39)" fg:x="146" fg:w="2"/><text x="11.8373%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="11.5873%" y="485" width="0.1587%" height="15" fill="rgb(212,144,35)" fg:x="146" fg:w="2"/><text x="11.8373%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6667%" y="469" width="0.0794%" height="15" fill="rgb(228,63,44)" fg:x="147" fg:w="1"/><text x="11.9167%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="11.8254%" y="485" width="0.0794%" height="15" fill="rgb(228,109,6)" fg:x="149" fg:w="1"/><text x="12.0754%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="11.9841%" y="389" width="0.1587%" height="15" fill="rgb(238,117,24)" fg:x="151" fg:w="2"/><text x="12.2341%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0635%" y="373" width="0.0794%" height="15" fill="rgb(242,26,26)" fg:x="152" fg:w="1"/><text x="12.3135%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0635%" y="357" width="0.0794%" height="15" fill="rgb(221,92,48)" fg:x="152" fg:w="1"/><text x="12.3135%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.9048%" y="453" width="0.3175%" height="15" fill="rgb(209,209,32)" fg:x="150" fg:w="4"/><text x="12.1548%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.9048%" y="437" width="0.3175%" height="15" fill="rgb(221,70,22)" fg:x="150" fg:w="4"/><text x="12.1548%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="11.9048%" y="421" width="0.3175%" height="15" fill="rgb(248,145,5)" fg:x="150" fg:w="4"/><text x="12.1548%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="11.9048%" y="405" width="0.3175%" height="15" fill="rgb(226,116,26)" fg:x="150" fg:w="4"/><text x="12.1548%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1429%" y="389" width="0.0794%" height="15" fill="rgb(244,5,17)" fg:x="153" fg:w="1"/><text x="12.3929%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (9 samples, 0.71%)</title><rect x="11.5873%" y="533" width="0.7143%" height="15" fill="rgb(252,159,33)" fg:x="146" fg:w="9"/><text x="11.8373%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.71%)</title><rect x="11.5873%" y="517" width="0.7143%" height="15" fill="rgb(206,71,0)" fg:x="146" fg:w="9"/><text x="11.8373%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.56%)</title><rect x="11.7460%" y="501" width="0.5556%" height="15" fill="rgb(233,118,54)" fg:x="148" fg:w="7"/><text x="11.9960%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="11.9048%" y="485" width="0.3968%" height="15" fill="rgb(234,83,48)" fg:x="150" fg:w="5"/><text x="12.1548%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="11.9048%" y="469" width="0.3968%" height="15" fill="rgb(228,3,54)" fg:x="150" fg:w="5"/><text x="12.1548%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.2222%" y="453" width="0.0794%" height="15" fill="rgb(226,155,13)" fg:x="154" fg:w="1"/><text x="12.4722%" y="463.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.03%)</title><rect x="11.3492%" y="581" width="1.0317%" height="15" fill="rgb(241,28,37)" fg:x="143" fg:w="13"/><text x="11.5992%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.03%)</title><rect x="11.3492%" y="565" width="1.0317%" height="15" fill="rgb(233,93,10)" fg:x="143" fg:w="13"/><text x="11.5992%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.79%)</title><rect x="11.5873%" y="549" width="0.7937%" height="15" fill="rgb(225,113,19)" fg:x="146" fg:w="10"/><text x="11.8373%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3016%" y="533" width="0.0794%" height="15" fill="rgb(241,2,18)" fg:x="155" fg:w="1"/><text x="12.5516%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.5397%" y="437" width="0.0794%" height="15" fill="rgb(228,207,21)" fg:x="158" fg:w="1"/><text x="12.7897%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.5397%" y="421" width="0.0794%" height="15" fill="rgb(213,211,35)" fg:x="158" fg:w="1"/><text x="12.7897%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5397%" y="405" width="0.0794%" height="15" fill="rgb(209,83,10)" fg:x="158" fg:w="1"/><text x="12.7897%" y="415.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="12.6190%" y="405" width="0.1587%" height="15" fill="rgb(209,164,1)" fg:x="159" fg:w="2"/><text x="12.8690%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.7778%" y="357" width="0.0794%" height="15" fill="rgb(213,184,43)" fg:x="161" fg:w="1"/><text x="13.0278%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="12.6190%" y="421" width="0.3175%" height="15" fill="rgb(231,61,34)" fg:x="159" fg:w="4"/><text x="12.8690%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.7778%" y="405" width="0.1587%" height="15" fill="rgb(235,75,3)" fg:x="161" fg:w="2"/><text x="13.0278%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.7778%" y="389" width="0.1587%" height="15" fill="rgb(220,106,47)" fg:x="161" fg:w="2"/><text x="13.0278%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="12.7778%" y="373" width="0.1587%" height="15" fill="rgb(210,196,33)" fg:x="161" fg:w="2"/><text x="13.0278%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8571%" y="357" width="0.0794%" height="15" fill="rgb(229,154,42)" fg:x="162" fg:w="1"/><text x="13.1071%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.9365%" y="421" width="0.0794%" height="15" fill="rgb(228,114,26)" fg:x="163" fg:w="1"/><text x="13.1865%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="12.5397%" y="453" width="0.5556%" height="15" fill="rgb(208,144,1)" fg:x="158" fg:w="7"/><text x="12.7897%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="12.6190%" y="437" width="0.4762%" height="15" fill="rgb(239,112,37)" fg:x="159" fg:w="6"/><text x="12.8690%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0159%" y="421" width="0.0794%" height="15" fill="rgb(210,96,50)" fg:x="164" fg:w="1"/><text x="13.2659%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0159%" y="405" width="0.0794%" height="15" fill="rgb(222,178,2)" fg:x="164" fg:w="1"/><text x="13.2659%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0159%" y="389" width="0.0794%" height="15" fill="rgb(226,74,18)" fg:x="164" fg:w="1"/><text x="13.2659%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.0952%" y="453" width="0.0794%" height="15" fill="rgb(225,67,54)" fg:x="165" fg:w="1"/><text x="13.3452%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="13.0952%" y="437" width="0.0794%" height="15" fill="rgb(251,92,32)" fg:x="165" fg:w="1"/><text x="13.3452%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.79%)</title><rect x="12.4603%" y="517" width="0.7937%" height="15" fill="rgb(228,149,22)" fg:x="157" fg:w="10"/><text x="12.7103%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.79%)</title><rect x="12.4603%" y="501" width="0.7937%" height="15" fill="rgb(243,54,13)" fg:x="157" fg:w="10"/><text x="12.7103%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.71%)</title><rect x="12.5397%" y="485" width="0.7143%" height="15" fill="rgb(243,180,28)" fg:x="158" fg:w="9"/><text x="12.7897%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.71%)</title><rect x="12.5397%" y="469" width="0.7143%" height="15" fill="rgb(208,167,24)" fg:x="158" fg:w="9"/><text x="12.7897%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1746%" y="453" width="0.0794%" height="15" fill="rgb(245,73,45)" fg:x="166" fg:w="1"/><text x="13.4246%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.1746%" y="437" width="0.0794%" height="15" fill="rgb(237,203,48)" fg:x="166" fg:w="1"/><text x="13.4246%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.2540%" y="517" width="0.0794%" height="15" fill="rgb(211,197,16)" fg:x="167" fg:w="1"/><text x="13.5040%" y="527.50"></text></g><g><title>engine::session::Session::close (54 samples, 4.29%)</title><rect x="9.1270%" y="677" width="4.2857%" height="15" fill="rgb(243,99,51)" fg:x="115" fg:w="54"/><text x="9.3770%" y="687.50">engin..</text></g><g><title>engine::session::state::State::close (54 samples, 4.29%)</title><rect x="9.1270%" y="661" width="4.2857%" height="15" fill="rgb(215,123,29)" fg:x="115" fg:w="54"/><text x="9.3770%" y="671.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (54 samples, 4.29%)</title><rect x="9.1270%" y="645" width="4.2857%" height="15" fill="rgb(239,186,37)" fg:x="115" fg:w="54"/><text x="9.3770%" y="655.50">engin..</text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (52 samples, 4.13%)</title><rect x="9.2857%" y="629" width="4.1270%" height="15" fill="rgb(252,136,39)" fg:x="117" fg:w="52"/><text x="9.5357%" y="639.50">engi..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (52 samples, 4.13%)</title><rect x="9.2857%" y="613" width="4.1270%" height="15" fill="rgb(223,213,32)" fg:x="117" fg:w="52"/><text x="9.5357%" y="623.50">engi..</text></g><g><title>kernel::model::any_entity_changes (34 samples, 2.70%)</title><rect x="10.7143%" y="597" width="2.6984%" height="15" fill="rgb(233,115,5)" fg:x="135" fg:w="34"/><text x="10.9643%" y="607.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.03%)</title><rect x="12.3810%" y="581" width="1.0317%" height="15" fill="rgb(207,226,44)" fg:x="156" fg:w="13"/><text x="12.6310%" y="591.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.03%)</title><rect x="12.3810%" y="565" width="1.0317%" height="15" fill="rgb(208,126,0)" fg:x="156" fg:w="13"/><text x="12.6310%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.03%)</title><rect x="12.3810%" y="549" width="1.0317%" height="15" fill="rgb(244,66,21)" fg:x="156" fg:w="13"/><text x="12.6310%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.03%)</title><rect x="12.3810%" y="533" width="1.0317%" height="15" fill="rgb(222,97,12)" fg:x="156" fg:w="13"/><text x="12.6310%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3333%" y="517" width="0.0794%" height="15" fill="rgb(219,213,19)" fg:x="168" fg:w="1"/><text x="13.5833%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.3333%" y="501" width="0.0794%" height="15" fill="rgb(252,169,30)" fg:x="168" fg:w="1"/><text x="13.5833%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.3333%" y="485" width="0.0794%" height="15" fill="rgb(206,32,51)" fg:x="168" fg:w="1"/><text x="13.5833%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.4127%" y="501" width="0.0794%" height="15" fill="rgb(250,172,42)" fg:x="169" fg:w="1"/><text x="13.6627%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.4127%" y="485" width="0.0794%" height="15" fill="rgb(209,34,43)" fg:x="169" fg:w="1"/><text x="13.6627%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.4127%" y="469" width="0.0794%" height="15" fill="rgb(223,11,35)" fg:x="169" fg:w="1"/><text x="13.6627%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4127%" y="453" width="0.0794%" height="15" fill="rgb(251,219,26)" fg:x="169" fg:w="1"/><text x="13.6627%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4127%" y="437" width="0.0794%" height="15" fill="rgb(231,119,3)" fg:x="169" fg:w="1"/><text x="13.6627%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4127%" y="421" width="0.0794%" height="15" fill="rgb(216,97,11)" fg:x="169" fg:w="1"/><text x="13.6627%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4127%" y="405" width="0.0794%" height="15" fill="rgb(223,59,9)" fg:x="169" fg:w="1"/><text x="13.6627%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.4127%" y="389" width="0.0794%" height="15" fill="rgb(233,93,31)" fg:x="169" fg:w="1"/><text x="13.6627%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4127%" y="373" width="0.0794%" height="15" fill="rgb(239,81,33)" fg:x="169" fg:w="1"/><text x="13.6627%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.4127%" y="357" width="0.0794%" height="15" fill="rgb(213,120,34)" fg:x="169" fg:w="1"/><text x="13.6627%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.4127%" y="341" width="0.0794%" height="15" fill="rgb(243,49,53)" fg:x="169" fg:w="1"/><text x="13.6627%" y="351.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="13.4127%" y="325" width="0.0794%" height="15" fill="rgb(247,216,33)" fg:x="169" fg:w="1"/><text x="13.6627%" y="335.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="13.4127%" y="533" width="0.1587%" height="15" fill="rgb(226,26,14)" fg:x="169" fg:w="2"/><text x="13.6627%" y="543.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="13.4127%" y="517" width="0.1587%" height="15" fill="rgb(215,49,53)" fg:x="169" fg:w="2"/><text x="13.6627%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.4921%" y="501" width="0.0794%" height="15" fill="rgb(245,162,40)" fg:x="170" fg:w="1"/><text x="13.7421%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.4921%" y="485" width="0.0794%" height="15" fill="rgb(229,68,17)" fg:x="170" fg:w="1"/><text x="13.7421%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.4921%" y="469" width="0.0794%" height="15" fill="rgb(213,182,10)" fg:x="170" fg:w="1"/><text x="13.7421%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.5714%" y="533" width="0.1587%" height="15" fill="rgb(245,125,30)" fg:x="171" fg:w="2"/><text x="13.8214%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="13.5714%" y="517" width="0.1587%" height="15" fill="rgb(232,202,2)" fg:x="171" fg:w="2"/><text x="13.8214%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="13.5714%" y="501" width="0.1587%" height="15" fill="rgb(237,140,51)" fg:x="171" fg:w="2"/><text x="13.8214%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5714%" y="485" width="0.1587%" height="15" fill="rgb(236,157,25)" fg:x="171" fg:w="2"/><text x="13.8214%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5714%" y="469" width="0.1587%" height="15" fill="rgb(219,209,0)" fg:x="171" fg:w="2"/><text x="13.8214%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5714%" y="453" width="0.1587%" height="15" fill="rgb(240,116,54)" fg:x="171" fg:w="2"/><text x="13.8214%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5714%" y="437" width="0.1587%" height="15" fill="rgb(216,10,36)" fg:x="171" fg:w="2"/><text x="13.8214%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="13.5714%" y="421" width="0.1587%" height="15" fill="rgb(222,72,44)" fg:x="171" fg:w="2"/><text x="13.8214%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6508%" y="405" width="0.0794%" height="15" fill="rgb(232,159,9)" fg:x="172" fg:w="1"/><text x="13.9008%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.6508%" y="389" width="0.0794%" height="15" fill="rgb(210,39,32)" fg:x="172" fg:w="1"/><text x="13.9008%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.6508%" y="373" width="0.0794%" height="15" fill="rgb(216,194,45)" fg:x="172" fg:w="1"/><text x="13.9008%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.6508%" y="357" width="0.0794%" height="15" fill="rgb(218,18,35)" fg:x="172" fg:w="1"/><text x="13.9008%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.6508%" y="341" width="0.0794%" height="15" fill="rgb(207,83,51)" fg:x="172" fg:w="1"/><text x="13.9008%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6508%" y="325" width="0.0794%" height="15" fill="rgb(225,63,43)" fg:x="172" fg:w="1"/><text x="13.9008%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.6508%" y="309" width="0.0794%" height="15" fill="rgb(207,57,36)" fg:x="172" fg:w="1"/><text x="13.9008%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.6508%" y="293" width="0.0794%" height="15" fill="rgb(216,99,33)" fg:x="172" fg:w="1"/><text x="13.9008%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.6508%" y="277" width="0.0794%" height="15" fill="rgb(225,42,16)" fg:x="172" fg:w="1"/><text x="13.9008%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.6508%" y="261" width="0.0794%" height="15" fill="rgb(220,201,45)" fg:x="172" fg:w="1"/><text x="13.9008%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.6508%" y="245" width="0.0794%" height="15" fill="rgb(225,33,4)" fg:x="172" fg:w="1"/><text x="13.9008%" y="255.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="13.7302%" y="517" width="0.0794%" height="15" fill="rgb(224,33,50)" fg:x="173" fg:w="1"/><text x="13.9802%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7302%" y="501" width="0.0794%" height="15" fill="rgb(246,198,51)" fg:x="173" fg:w="1"/><text x="13.9802%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.7302%" y="485" width="0.0794%" height="15" fill="rgb(205,22,4)" fg:x="173" fg:w="1"/><text x="13.9802%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7302%" y="469" width="0.0794%" height="15" fill="rgb(206,3,8)" fg:x="173" fg:w="1"/><text x="13.9802%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.7302%" y="453" width="0.0794%" height="15" fill="rgb(251,23,15)" fg:x="173" fg:w="1"/><text x="13.9802%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7302%" y="437" width="0.0794%" height="15" fill="rgb(252,88,28)" fg:x="173" fg:w="1"/><text x="13.9802%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.7302%" y="421" width="0.0794%" height="15" fill="rgb(212,127,14)" fg:x="173" fg:w="1"/><text x="13.9802%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7302%" y="405" width="0.0794%" height="15" fill="rgb(247,145,37)" fg:x="173" fg:w="1"/><text x="13.9802%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7302%" y="389" width="0.0794%" height="15" fill="rgb(209,117,53)" fg:x="173" fg:w="1"/><text x="13.9802%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="13.7302%" y="373" width="0.0794%" height="15" fill="rgb(212,90,42)" fg:x="173" fg:w="1"/><text x="13.9802%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.7302%" y="357" width="0.0794%" height="15" fill="rgb(218,164,37)" fg:x="173" fg:w="1"/><text x="13.9802%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="13.7302%" y="341" width="0.0794%" height="15" fill="rgb(246,65,34)" fg:x="173" fg:w="1"/><text x="13.9802%" y="351.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (6 samples, 0.48%)</title><rect x="13.4127%" y="581" width="0.4762%" height="15" fill="rgb(231,100,33)" fg:x="169" fg:w="6"/><text x="13.6627%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="13.4127%" y="565" width="0.4762%" height="15" fill="rgb(228,126,14)" fg:x="169" fg:w="6"/><text x="13.6627%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="13.4127%" y="549" width="0.4762%" height="15" fill="rgb(215,173,21)" fg:x="169" fg:w="6"/><text x="13.6627%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="13.7302%" y="533" width="0.1587%" height="15" fill="rgb(210,6,40)" fg:x="173" fg:w="2"/><text x="13.9802%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.8095%" y="517" width="0.0794%" height="15" fill="rgb(212,48,18)" fg:x="174" fg:w="1"/><text x="14.0595%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.8095%" y="501" width="0.0794%" height="15" fill="rgb(230,214,11)" fg:x="174" fg:w="1"/><text x="14.0595%" y="511.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (7 samples, 0.56%)</title><rect x="13.4127%" y="629" width="0.5556%" height="15" fill="rgb(254,105,39)" fg:x="169" fg:w="7"/><text x="13.6627%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (7 samples, 0.56%)</title><rect x="13.4127%" y="613" width="0.5556%" height="15" fill="rgb(245,158,5)" fg:x="169" fg:w="7"/><text x="13.6627%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (7 samples, 0.56%)</title><rect x="13.4127%" y="597" width="0.5556%" height="15" fill="rgb(249,208,11)" fg:x="169" fg:w="7"/><text x="13.6627%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.8889%" y="581" width="0.0794%" height="15" fill="rgb(210,39,28)" fg:x="175" fg:w="1"/><text x="14.1389%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.8889%" y="565" width="0.0794%" height="15" fill="rgb(211,56,53)" fg:x="175" fg:w="1"/><text x="14.1389%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="13.9683%" y="581" width="0.0794%" height="15" fill="rgb(226,201,30)" fg:x="176" fg:w="1"/><text x="14.2183%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="13.9683%" y="565" width="0.0794%" height="15" fill="rgb(239,101,34)" fg:x="176" fg:w="1"/><text x="14.2183%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.9683%" y="549" width="0.0794%" height="15" fill="rgb(226,209,5)" fg:x="176" fg:w="1"/><text x="14.2183%" y="559.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (2 samples, 0.16%)</title><rect x="13.9683%" y="629" width="0.1587%" height="15" fill="rgb(250,105,47)" fg:x="176" fg:w="2"/><text x="14.2183%" y="639.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (2 samples, 0.16%)</title><rect x="13.9683%" y="613" width="0.1587%" height="15" fill="rgb(230,72,3)" fg:x="176" fg:w="2"/><text x="14.2183%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="13.9683%" y="597" width="0.1587%" height="15" fill="rgb(232,218,39)" fg:x="176" fg:w="2"/><text x="14.2183%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="14.0476%" y="581" width="0.0794%" height="15" fill="rgb(248,166,6)" fg:x="177" fg:w="1"/><text x="14.2976%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="14.0476%" y="565" width="0.0794%" height="15" fill="rgb(247,89,20)" fg:x="177" fg:w="1"/><text x="14.2976%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="549" width="0.0794%" height="15" fill="rgb(248,130,54)" fg:x="177" fg:w="1"/><text x="14.2976%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0476%" y="533" width="0.0794%" height="15" fill="rgb(234,196,4)" fg:x="177" fg:w="1"/><text x="14.2976%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="517" width="0.0794%" height="15" fill="rgb(250,143,31)" fg:x="177" fg:w="1"/><text x="14.2976%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="501" width="0.0794%" height="15" fill="rgb(211,110,34)" fg:x="177" fg:w="1"/><text x="14.2976%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="485" width="0.0794%" height="15" fill="rgb(215,124,48)" fg:x="177" fg:w="1"/><text x="14.2976%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0476%" y="469" width="0.0794%" height="15" fill="rgb(216,46,13)" fg:x="177" fg:w="1"/><text x="14.2976%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="453" width="0.0794%" height="15" fill="rgb(205,184,25)" fg:x="177" fg:w="1"/><text x="14.2976%" y="463.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="437" width="0.0794%" height="15" fill="rgb(228,1,10)" fg:x="177" fg:w="1"/><text x="14.2976%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="421" width="0.0794%" height="15" fill="rgb(213,116,27)" fg:x="177" fg:w="1"/><text x="14.2976%" y="431.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="14.0476%" y="405" width="0.0794%" height="15" fill="rgb(241,95,50)" fg:x="177" fg:w="1"/><text x="14.2976%" y="415.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="389" width="0.0794%" height="15" fill="rgb(238,48,32)" fg:x="177" fg:w="1"/><text x="14.2976%" y="399.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="14.0476%" y="373" width="0.0794%" height="15" fill="rgb(235,113,49)" fg:x="177" fg:w="1"/><text x="14.2976%" y="383.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="14.0476%" y="357" width="0.0794%" height="15" fill="rgb(205,127,43)" fg:x="177" fg:w="1"/><text x="14.2976%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0476%" y="341" width="0.0794%" height="15" fill="rgb(250,162,2)" fg:x="177" fg:w="1"/><text x="14.2976%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.0476%" y="325" width="0.0794%" height="15" fill="rgb(220,13,41)" fg:x="177" fg:w="1"/><text x="14.2976%" y="335.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="14.0476%" y="309" width="0.0794%" height="15" fill="rgb(249,221,25)" fg:x="177" fg:w="1"/><text x="14.2976%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="14.0476%" y="293" width="0.0794%" height="15" fill="rgb(215,208,19)" fg:x="177" fg:w="1"/><text x="14.2976%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="14.0476%" y="277" width="0.0794%" height="15" fill="rgb(236,175,2)" fg:x="177" fg:w="1"/><text x="14.2976%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="14.0476%" y="261" width="0.0794%" height="15" fill="rgb(241,52,2)" fg:x="177" fg:w="1"/><text x="14.2976%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="14.0476%" y="245" width="0.0794%" height="15" fill="rgb(248,140,14)" fg:x="177" fg:w="1"/><text x="14.2976%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="14.0476%" y="229" width="0.0794%" height="15" fill="rgb(253,22,42)" fg:x="177" fg:w="1"/><text x="14.2976%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.0476%" y="213" width="0.0794%" height="15" fill="rgb(234,61,47)" fg:x="177" fg:w="1"/><text x="14.2976%" y="223.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (10 samples, 0.79%)</title><rect x="13.4127%" y="645" width="0.7937%" height="15" fill="rgb(208,226,15)" fg:x="169" fg:w="10"/><text x="13.6627%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="14.1270%" y="629" width="0.0794%" height="15" fill="rgb(217,221,4)" fg:x="178" fg:w="1"/><text x="14.3770%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="14.1270%" y="613" width="0.0794%" height="15" fill="rgb(212,174,34)" fg:x="178" fg:w="1"/><text x="14.3770%" y="623.50"></text></g><g><title>kernel::surround::Surroundings::unpack (1 samples, 0.08%)</title><rect x="14.2063%" y="469" width="0.0794%" height="15" fill="rgb(253,83,4)" fg:x="179" fg:w="1"/><text x="14.4563%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.6825%" y="325" width="0.0794%" height="15" fill="rgb(250,195,49)" fg:x="185" fg:w="1"/><text x="14.9325%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6825%" y="309" width="0.0794%" height="15" fill="rgb(241,192,25)" fg:x="185" fg:w="1"/><text x="14.9325%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.6825%" y="293" width="0.0794%" height="15" fill="rgb(208,124,10)" fg:x="185" fg:w="1"/><text x="14.9325%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.6825%" y="277" width="0.0794%" height="15" fill="rgb(222,33,0)" fg:x="185" fg:w="1"/><text x="14.9325%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.6825%" y="261" width="0.0794%" height="15" fill="rgb(234,209,28)" fg:x="185" fg:w="1"/><text x="14.9325%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.6825%" y="245" width="0.0794%" height="15" fill="rgb(224,11,23)" fg:x="185" fg:w="1"/><text x="14.9325%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6825%" y="229" width="0.0794%" height="15" fill="rgb(232,99,1)" fg:x="185" fg:w="1"/><text x="14.9325%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.6825%" y="213" width="0.0794%" height="15" fill="rgb(237,95,45)" fg:x="185" fg:w="1"/><text x="14.9325%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.6825%" y="197" width="0.0794%" height="15" fill="rgb(208,109,11)" fg:x="185" fg:w="1"/><text x="14.9325%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.6825%" y="181" width="0.0794%" height="15" fill="rgb(216,190,48)" fg:x="185" fg:w="1"/><text x="14.9325%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.6825%" y="165" width="0.0794%" height="15" fill="rgb(251,171,36)" fg:x="185" fg:w="1"/><text x="14.9325%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.6825%" y="149" width="0.0794%" height="15" fill="rgb(230,62,22)" fg:x="185" fg:w="1"/><text x="14.9325%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.6825%" y="133" width="0.0794%" height="15" fill="rgb(225,114,35)" fg:x="185" fg:w="1"/><text x="14.9325%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="14.5238%" y="389" width="0.3175%" height="15" fill="rgb(215,118,42)" fg:x="183" fg:w="4"/><text x="14.7738%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="14.5238%" y="373" width="0.3175%" height="15" fill="rgb(243,119,21)" fg:x="183" fg:w="4"/><text x="14.7738%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="14.5238%" y="357" width="0.3175%" height="15" fill="rgb(252,177,53)" fg:x="183" fg:w="4"/><text x="14.7738%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="14.6032%" y="341" width="0.2381%" height="15" fill="rgb(237,209,29)" fg:x="184" fg:w="3"/><text x="14.8532%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7619%" y="325" width="0.0794%" height="15" fill="rgb(212,65,23)" fg:x="186" fg:w="1"/><text x="15.0119%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7619%" y="309" width="0.0794%" height="15" fill="rgb(230,222,46)" fg:x="186" fg:w="1"/><text x="15.0119%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7619%" y="293" width="0.0794%" height="15" fill="rgb(215,135,32)" fg:x="186" fg:w="1"/><text x="15.0119%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7619%" y="277" width="0.0794%" height="15" fill="rgb(246,101,22)" fg:x="186" fg:w="1"/><text x="15.0119%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7619%" y="261" width="0.0794%" height="15" fill="rgb(206,107,13)" fg:x="186" fg:w="1"/><text x="15.0119%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7619%" y="245" width="0.0794%" height="15" fill="rgb(250,100,44)" fg:x="186" fg:w="1"/><text x="15.0119%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7619%" y="229" width="0.0794%" height="15" fill="rgb(231,147,38)" fg:x="186" fg:w="1"/><text x="15.0119%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7619%" y="213" width="0.0794%" height="15" fill="rgb(229,8,40)" fg:x="186" fg:w="1"/><text x="15.0119%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7619%" y="197" width="0.0794%" height="15" fill="rgb(221,135,30)" fg:x="186" fg:w="1"/><text x="15.0119%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7619%" y="181" width="0.0794%" height="15" fill="rgb(249,193,18)" fg:x="186" fg:w="1"/><text x="15.0119%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7619%" y="165" width="0.0794%" height="15" fill="rgb(209,133,39)" fg:x="186" fg:w="1"/><text x="15.0119%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7619%" y="149" width="0.0794%" height="15" fill="rgb(232,100,14)" fg:x="186" fg:w="1"/><text x="15.0119%" y="159.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.9206%" y="357" width="0.0794%" height="15" fill="rgb(224,185,1)" fg:x="188" fg:w="1"/><text x="15.1706%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.9206%" y="341" width="0.0794%" height="15" fill="rgb(223,139,8)" fg:x="188" fg:w="1"/><text x="15.1706%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.0000%" y="325" width="0.0794%" height="15" fill="rgb(232,213,38)" fg:x="189" fg:w="1"/><text x="15.2500%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (9 samples, 0.71%)</title><rect x="14.5238%" y="437" width="0.7143%" height="15" fill="rgb(207,94,22)" fg:x="183" fg:w="9"/><text x="14.7738%" y="447.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.71%)</title><rect x="14.5238%" y="421" width="0.7143%" height="15" fill="rgb(219,183,54)" fg:x="183" fg:w="9"/><text x="14.7738%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (9 samples, 0.71%)</title><rect x="14.5238%" y="405" width="0.7143%" height="15" fill="rgb(216,185,54)" fg:x="183" fg:w="9"/><text x="14.7738%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="14.8413%" y="389" width="0.3968%" height="15" fill="rgb(254,217,39)" fg:x="187" fg:w="5"/><text x="15.0913%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.9206%" y="373" width="0.3175%" height="15" fill="rgb(240,178,23)" fg:x="188" fg:w="4"/><text x="15.1706%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.0000%" y="357" width="0.2381%" height="15" fill="rgb(218,11,47)" fg:x="189" fg:w="3"/><text x="15.2500%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.0000%" y="341" width="0.2381%" height="15" fill="rgb(218,51,51)" fg:x="189" fg:w="3"/><text x="15.2500%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="15.0794%" y="325" width="0.1587%" height="15" fill="rgb(238,126,27)" fg:x="190" fg:w="2"/><text x="15.3294%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.0794%" y="309" width="0.1587%" height="15" fill="rgb(249,202,22)" fg:x="190" fg:w="2"/><text x="15.3294%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.0794%" y="293" width="0.1587%" height="15" fill="rgb(254,195,49)" fg:x="190" fg:w="2"/><text x="15.3294%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.0794%" y="277" width="0.1587%" height="15" fill="rgb(208,123,14)" fg:x="190" fg:w="2"/><text x="15.3294%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="15.0794%" y="261" width="0.1587%" height="15" fill="rgb(224,200,8)" fg:x="190" fg:w="2"/><text x="15.3294%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="15.0794%" y="245" width="0.1587%" height="15" fill="rgb(217,61,36)" fg:x="190" fg:w="2"/><text x="15.3294%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="15.1587%" y="229" width="0.0794%" height="15" fill="rgb(206,35,45)" fg:x="191" fg:w="1"/><text x="15.4087%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.3175%" y="373" width="0.1587%" height="15" fill="rgb(217,65,33)" fg:x="193" fg:w="2"/><text x="15.5675%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.3175%" y="357" width="0.1587%" height="15" fill="rgb(222,158,48)" fg:x="193" fg:w="2"/><text x="15.5675%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="15.3175%" y="341" width="0.1587%" height="15" fill="rgb(254,2,54)" fg:x="193" fg:w="2"/><text x="15.5675%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3968%" y="325" width="0.0794%" height="15" fill="rgb(250,143,38)" fg:x="194" fg:w="1"/><text x="15.6468%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="15.3968%" y="309" width="0.0794%" height="15" fill="rgb(248,25,0)" fg:x="194" fg:w="1"/><text x="15.6468%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="15.3968%" y="293" width="0.0794%" height="15" fill="rgb(206,152,27)" fg:x="194" fg:w="1"/><text x="15.6468%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="15.3968%" y="277" width="0.0794%" height="15" fill="rgb(240,77,30)" fg:x="194" fg:w="1"/><text x="15.6468%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="15.3968%" y="261" width="0.0794%" height="15" fill="rgb(231,5,3)" fg:x="194" fg:w="1"/><text x="15.6468%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3968%" y="245" width="0.0794%" height="15" fill="rgb(207,226,32)" fg:x="194" fg:w="1"/><text x="15.6468%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.3968%" y="229" width="0.0794%" height="15" fill="rgb(222,207,47)" fg:x="194" fg:w="1"/><text x="15.6468%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.3968%" y="213" width="0.0794%" height="15" fill="rgb(229,115,45)" fg:x="194" fg:w="1"/><text x="15.6468%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.3968%" y="197" width="0.0794%" height="15" fill="rgb(224,191,6)" fg:x="194" fg:w="1"/><text x="15.6468%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.3968%" y="181" width="0.0794%" height="15" fill="rgb(230,227,24)" fg:x="194" fg:w="1"/><text x="15.6468%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.3968%" y="165" width="0.0794%" height="15" fill="rgb(228,80,19)" fg:x="194" fg:w="1"/><text x="15.6468%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.3968%" y="149" width="0.0794%" height="15" fill="rgb(247,229,0)" fg:x="194" fg:w="1"/><text x="15.6468%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4762%" y="293" width="0.0794%" height="15" fill="rgb(237,194,15)" fg:x="195" fg:w="1"/><text x="15.7262%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="15.4762%" y="277" width="0.0794%" height="15" fill="rgb(219,203,20)" fg:x="195" fg:w="1"/><text x="15.7262%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="15.4762%" y="261" width="0.0794%" height="15" fill="rgb(234,128,8)" fg:x="195" fg:w="1"/><text x="15.7262%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="15.4762%" y="245" width="0.0794%" height="15" fill="rgb(248,202,8)" fg:x="195" fg:w="1"/><text x="15.7262%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="15.4762%" y="229" width="0.0794%" height="15" fill="rgb(206,104,37)" fg:x="195" fg:w="1"/><text x="15.7262%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="15.4762%" y="213" width="0.0794%" height="15" fill="rgb(223,8,27)" fg:x="195" fg:w="1"/><text x="15.7262%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.4762%" y="197" width="0.0794%" height="15" fill="rgb(216,217,28)" fg:x="195" fg:w="1"/><text x="15.7262%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="15.3175%" y="389" width="0.3175%" height="15" fill="rgb(249,199,1)" fg:x="193" fg:w="4"/><text x="15.5675%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.4762%" y="373" width="0.1587%" height="15" fill="rgb(240,85,17)" fg:x="195" fg:w="2"/><text x="15.7262%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="15.4762%" y="357" width="0.1587%" height="15" fill="rgb(206,108,45)" fg:x="195" fg:w="2"/><text x="15.7262%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="15.4762%" y="341" width="0.1587%" height="15" fill="rgb(245,210,41)" fg:x="195" fg:w="2"/><text x="15.7262%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="15.4762%" y="325" width="0.1587%" height="15" fill="rgb(206,13,37)" fg:x="195" fg:w="2"/><text x="15.7262%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="15.4762%" y="309" width="0.1587%" height="15" fill="rgb(250,61,18)" fg:x="195" fg:w="2"/><text x="15.7262%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="15.5556%" y="293" width="0.0794%" height="15" fill="rgb(235,172,48)" fg:x="196" fg:w="1"/><text x="15.8056%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="15.5556%" y="277" width="0.0794%" height="15" fill="rgb(249,201,17)" fg:x="196" fg:w="1"/><text x="15.8056%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.6349%" y="389" width="0.0794%" height="15" fill="rgb(219,208,6)" fg:x="197" fg:w="1"/><text x="15.8849%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="15.7143%" y="389" width="0.0794%" height="15" fill="rgb(248,31,23)" fg:x="198" fg:w="1"/><text x="15.9643%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.7143%" y="373" width="0.0794%" height="15" fill="rgb(245,15,42)" fg:x="198" fg:w="1"/><text x="15.9643%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7143%" y="357" width="0.0794%" height="15" fill="rgb(222,217,39)" fg:x="198" fg:w="1"/><text x="15.9643%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7143%" y="341" width="0.0794%" height="15" fill="rgb(210,219,27)" fg:x="198" fg:w="1"/><text x="15.9643%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7143%" y="325" width="0.0794%" height="15" fill="rgb(252,166,36)" fg:x="198" fg:w="1"/><text x="15.9643%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7143%" y="309" width="0.0794%" height="15" fill="rgb(245,132,34)" fg:x="198" fg:w="1"/><text x="15.9643%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.7143%" y="293" width="0.0794%" height="15" fill="rgb(236,54,3)" fg:x="198" fg:w="1"/><text x="15.9643%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.7143%" y="277" width="0.0794%" height="15" fill="rgb(241,173,43)" fg:x="198" fg:w="1"/><text x="15.9643%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.8730%" y="293" width="0.0794%" height="15" fill="rgb(215,190,9)" fg:x="200" fg:w="1"/><text x="16.1230%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="15.8730%" y="277" width="0.0794%" height="15" fill="rgb(242,101,16)" fg:x="200" fg:w="1"/><text x="16.1230%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="15.8730%" y="261" width="0.0794%" height="15" fill="rgb(223,190,21)" fg:x="200" fg:w="1"/><text x="16.1230%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (10 samples, 0.79%)</title><rect x="15.2381%" y="437" width="0.7937%" height="15" fill="rgb(215,228,25)" fg:x="192" fg:w="10"/><text x="15.4881%" y="447.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.79%)</title><rect x="15.2381%" y="421" width="0.7937%" height="15" fill="rgb(225,36,22)" fg:x="192" fg:w="10"/><text x="15.4881%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.79%)</title><rect x="15.2381%" y="405" width="0.7937%" height="15" fill="rgb(251,106,46)" fg:x="192" fg:w="10"/><text x="15.4881%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.7937%" y="389" width="0.2381%" height="15" fill="rgb(208,90,1)" fg:x="199" fg:w="3"/><text x="16.0437%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.7937%" y="373" width="0.2381%" height="15" fill="rgb(243,10,4)" fg:x="199" fg:w="3"/><text x="16.0437%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="15.7937%" y="357" width="0.2381%" height="15" fill="rgb(212,137,27)" fg:x="199" fg:w="3"/><text x="16.0437%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.7937%" y="341" width="0.2381%" height="15" fill="rgb(231,220,49)" fg:x="199" fg:w="3"/><text x="16.0437%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="15.7937%" y="325" width="0.2381%" height="15" fill="rgb(237,96,20)" fg:x="199" fg:w="3"/><text x="16.0437%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="15.7937%" y="309" width="0.2381%" height="15" fill="rgb(239,229,30)" fg:x="199" fg:w="3"/><text x="16.0437%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.9524%" y="293" width="0.0794%" height="15" fill="rgb(219,65,33)" fg:x="201" fg:w="1"/><text x="16.2024%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9524%" y="277" width="0.0794%" height="15" fill="rgb(243,134,7)" fg:x="201" fg:w="1"/><text x="16.2024%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.9524%" y="261" width="0.0794%" height="15" fill="rgb(216,177,54)" fg:x="201" fg:w="1"/><text x="16.2024%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.9524%" y="245" width="0.0794%" height="15" fill="rgb(211,160,20)" fg:x="201" fg:w="1"/><text x="16.2024%" y="255.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="16.0317%" y="437" width="0.0794%" height="15" fill="rgb(239,85,39)" fg:x="202" fg:w="1"/><text x="16.2817%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="16.0317%" y="421" width="0.0794%" height="15" fill="rgb(232,125,22)" fg:x="202" fg:w="1"/><text x="16.2817%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="16.1111%" y="389" width="0.0794%" height="15" fill="rgb(244,57,34)" fg:x="203" fg:w="1"/><text x="16.3611%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.1111%" y="373" width="0.0794%" height="15" fill="rgb(214,203,32)" fg:x="203" fg:w="1"/><text x="16.3611%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="16.1111%" y="357" width="0.0794%" height="15" fill="rgb(207,58,43)" fg:x="203" fg:w="1"/><text x="16.3611%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="16.1111%" y="341" width="0.0794%" height="15" fill="rgb(215,193,15)" fg:x="203" fg:w="1"/><text x="16.3611%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.1111%" y="325" width="0.0794%" height="15" fill="rgb(232,15,44)" fg:x="203" fg:w="1"/><text x="16.3611%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.1111%" y="309" width="0.0794%" height="15" fill="rgb(212,3,48)" fg:x="203" fg:w="1"/><text x="16.3611%" y="319.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="16.1111%" y="293" width="0.0794%" height="15" fill="rgb(218,128,7)" fg:x="203" fg:w="1"/><text x="16.3611%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="16.1111%" y="277" width="0.0794%" height="15" fill="rgb(226,216,39)" fg:x="203" fg:w="1"/><text x="16.3611%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.1111%" y="261" width="0.0794%" height="15" fill="rgb(243,47,51)" fg:x="203" fg:w="1"/><text x="16.3611%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="16.1111%" y="245" width="0.0794%" height="15" fill="rgb(241,183,40)" fg:x="203" fg:w="1"/><text x="16.3611%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="16.1111%" y="229" width="0.0794%" height="15" fill="rgb(231,217,32)" fg:x="203" fg:w="1"/><text x="16.3611%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="16.1111%" y="213" width="0.0794%" height="15" fill="rgb(229,61,38)" fg:x="203" fg:w="1"/><text x="16.3611%" y="223.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="16.1905%" y="373" width="0.0794%" height="15" fill="rgb(225,210,5)" fg:x="204" fg:w="1"/><text x="16.4405%" y="383.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="16.1905%" y="357" width="0.0794%" height="15" fill="rgb(231,79,45)" fg:x="204" fg:w="1"/><text x="16.4405%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="16.1905%" y="341" width="0.0794%" height="15" fill="rgb(224,100,7)" fg:x="204" fg:w="1"/><text x="16.4405%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.1905%" y="325" width="0.0794%" height="15" fill="rgb(241,198,18)" fg:x="204" fg:w="1"/><text x="16.4405%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.1905%" y="309" width="0.0794%" height="15" fill="rgb(252,97,53)" fg:x="204" fg:w="1"/><text x="16.4405%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.1905%" y="293" width="0.0794%" height="15" fill="rgb(220,88,7)" fg:x="204" fg:w="1"/><text x="16.4405%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.1905%" y="277" width="0.0794%" height="15" fill="rgb(213,176,14)" fg:x="204" fg:w="1"/><text x="16.4405%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.1905%" y="261" width="0.0794%" height="15" fill="rgb(246,73,7)" fg:x="204" fg:w="1"/><text x="16.4405%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.1905%" y="245" width="0.0794%" height="15" fill="rgb(245,64,36)" fg:x="204" fg:w="1"/><text x="16.4405%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1905%" y="229" width="0.0794%" height="15" fill="rgb(245,80,10)" fg:x="204" fg:w="1"/><text x="16.4405%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.2698%" y="357" width="0.0794%" height="15" fill="rgb(232,107,50)" fg:x="205" fg:w="1"/><text x="16.5198%" y="367.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.16%)</title><rect x="16.4286%" y="261" width="0.1587%" height="15" fill="rgb(253,3,0)" fg:x="207" fg:w="2"/><text x="16.6786%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="16.5079%" y="245" width="0.0794%" height="15" fill="rgb(212,99,53)" fg:x="208" fg:w="1"/><text x="16.7579%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.5873%" y="261" width="0.0794%" height="15" fill="rgb(249,111,54)" fg:x="209" fg:w="1"/><text x="16.8373%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.48%)</title><rect x="16.4286%" y="293" width="0.4762%" height="15" fill="rgb(249,55,30)" fg:x="207" fg:w="6"/><text x="16.6786%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (6 samples, 0.48%)</title><rect x="16.4286%" y="277" width="0.4762%" height="15" fill="rgb(237,47,42)" fg:x="207" fg:w="6"/><text x="16.6786%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (3 samples, 0.24%)</title><rect x="16.6667%" y="261" width="0.2381%" height="15" fill="rgb(211,20,18)" fg:x="210" fg:w="3"/><text x="16.9167%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="16.7460%" y="245" width="0.1587%" height="15" fill="rgb(231,203,46)" fg:x="211" fg:w="2"/><text x="16.9960%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="16.9048%" y="261" width="0.0794%" height="15" fill="rgb(237,142,3)" fg:x="213" fg:w="1"/><text x="17.1548%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.9048%" y="245" width="0.0794%" height="15" fill="rgb(241,107,1)" fg:x="213" fg:w="1"/><text x="17.1548%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="16.9048%" y="229" width="0.0794%" height="15" fill="rgb(229,83,13)" fg:x="213" fg:w="1"/><text x="17.1548%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9841%" y="261" width="0.0794%" height="15" fill="rgb(241,91,40)" fg:x="214" fg:w="1"/><text x="17.2341%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9841%" y="245" width="0.0794%" height="15" fill="rgb(225,3,45)" fg:x="214" fg:w="1"/><text x="17.2341%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="16.9841%" y="229" width="0.0794%" height="15" fill="rgb(244,223,14)" fg:x="214" fg:w="1"/><text x="17.2341%" y="239.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.79%)</title><rect x="16.3492%" y="341" width="0.7937%" height="15" fill="rgb(224,124,37)" fg:x="206" fg:w="10"/><text x="16.5992%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (10 samples, 0.79%)</title><rect x="16.3492%" y="325" width="0.7937%" height="15" fill="rgb(251,171,30)" fg:x="206" fg:w="10"/><text x="16.5992%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (10 samples, 0.79%)</title><rect x="16.3492%" y="309" width="0.7937%" height="15" fill="rgb(236,46,54)" fg:x="206" fg:w="10"/><text x="16.5992%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (3 samples, 0.24%)</title><rect x="16.9048%" y="293" width="0.2381%" height="15" fill="rgb(245,213,5)" fg:x="213" fg:w="3"/><text x="17.1548%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="16.9048%" y="277" width="0.2381%" height="15" fill="rgb(230,144,27)" fg:x="213" fg:w="3"/><text x="17.1548%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="17.0635%" y="261" width="0.0794%" height="15" fill="rgb(220,86,6)" fg:x="215" fg:w="1"/><text x="17.3135%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 0.87%)</title><rect x="16.3492%" y="357" width="0.8730%" height="15" fill="rgb(240,20,13)" fg:x="206" fg:w="11"/><text x="16.5992%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.1429%" y="341" width="0.0794%" height="15" fill="rgb(217,89,34)" fg:x="216" fg:w="1"/><text x="17.3929%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3810%" y="309" width="0.0794%" height="15" fill="rgb(229,13,5)" fg:x="219" fg:w="1"/><text x="17.6310%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (4 samples, 0.32%)</title><rect x="17.4603%" y="309" width="0.3175%" height="15" fill="rgb(244,67,35)" fg:x="220" fg:w="4"/><text x="17.7103%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="17.4603%" y="293" width="0.3175%" height="15" fill="rgb(221,40,2)" fg:x="220" fg:w="4"/><text x="17.7103%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="17.6984%" y="277" width="0.0794%" height="15" fill="rgb(237,157,21)" fg:x="223" fg:w="1"/><text x="17.9484%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8571%" y="293" width="0.0794%" height="15" fill="rgb(222,94,11)" fg:x="225" fg:w="1"/><text x="18.1071%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9365%" y="293" width="0.0794%" height="15" fill="rgb(249,113,6)" fg:x="226" fg:w="1"/><text x="18.1865%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="18.0159%" y="277" width="0.7143%" height="15" fill="rgb(238,137,36)" fg:x="227" fg:w="9"/><text x="18.2659%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.79%)</title><rect x="18.0159%" y="293" width="0.7937%" height="15" fill="rgb(210,102,26)" fg:x="227" fg:w="10"/><text x="18.2659%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="18.7302%" y="277" width="0.0794%" height="15" fill="rgb(218,30,30)" fg:x="236" fg:w="1"/><text x="18.9802%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.2857%" y="261" width="0.0794%" height="15" fill="rgb(214,67,26)" fg:x="243" fg:w="1"/><text x="19.5357%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="18.8095%" y="277" width="0.6349%" height="15" fill="rgb(251,9,53)" fg:x="237" fg:w="8"/><text x="19.0595%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="19.3651%" y="261" width="0.0794%" height="15" fill="rgb(228,204,25)" fg:x="244" fg:w="1"/><text x="19.6151%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.71%)</title><rect x="18.8095%" y="293" width="0.7143%" height="15" fill="rgb(207,153,8)" fg:x="237" fg:w="9"/><text x="19.0595%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="19.4444%" y="277" width="0.0794%" height="15" fill="rgb(242,9,16)" fg:x="245" fg:w="1"/><text x="19.6944%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="19.4444%" y="261" width="0.0794%" height="15" fill="rgb(217,211,10)" fg:x="245" fg:w="1"/><text x="19.6944%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="19.5238%" y="293" width="0.0794%" height="15" fill="rgb(219,228,52)" fg:x="246" fg:w="1"/><text x="19.7738%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="19.5238%" y="277" width="0.0794%" height="15" fill="rgb(231,92,29)" fg:x="246" fg:w="1"/><text x="19.7738%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="19.5238%" y="261" width="0.0794%" height="15" fill="rgb(232,8,23)" fg:x="246" fg:w="1"/><text x="19.7738%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="19.5238%" y="245" width="0.0794%" height="15" fill="rgb(216,211,34)" fg:x="246" fg:w="1"/><text x="19.7738%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.5238%" y="229" width="0.0794%" height="15" fill="rgb(236,151,0)" fg:x="246" fg:w="1"/><text x="19.7738%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="19.6032%" y="261" width="0.0794%" height="15" fill="rgb(209,168,3)" fg:x="247" fg:w="1"/><text x="19.8532%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.6032%" y="245" width="0.0794%" height="15" fill="rgb(208,129,28)" fg:x="247" fg:w="1"/><text x="19.8532%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="19.9206%" y="229" width="0.1587%" height="15" fill="rgb(229,78,22)" fg:x="251" fg:w="2"/><text x="20.1706%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="20.0794%" y="229" width="0.1587%" height="15" fill="rgb(228,187,13)" fg:x="253" fg:w="2"/><text x="20.3294%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.1587%" y="213" width="0.0794%" height="15" fill="rgb(240,119,24)" fg:x="254" fg:w="1"/><text x="20.4087%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.1587%" y="197" width="0.0794%" height="15" fill="rgb(209,194,42)" fg:x="254" fg:w="1"/><text x="20.4087%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.1587%" y="181" width="0.0794%" height="15" fill="rgb(247,200,46)" fg:x="254" fg:w="1"/><text x="20.4087%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.2381%" y="197" width="0.0794%" height="15" fill="rgb(218,76,16)" fg:x="255" fg:w="1"/><text x="20.4881%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.2381%" y="181" width="0.0794%" height="15" fill="rgb(225,21,48)" fg:x="255" fg:w="1"/><text x="20.4881%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.2381%" y="165" width="0.0794%" height="15" fill="rgb(239,223,50)" fg:x="255" fg:w="1"/><text x="20.4881%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="20.2381%" y="229" width="0.3175%" height="15" fill="rgb(244,45,21)" fg:x="255" fg:w="4"/><text x="20.4881%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="20.2381%" y="213" width="0.3175%" height="15" fill="rgb(232,33,43)" fg:x="255" fg:w="4"/><text x="20.4881%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="20.3175%" y="197" width="0.2381%" height="15" fill="rgb(209,8,3)" fg:x="256" fg:w="3"/><text x="20.5675%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="20.3175%" y="181" width="0.2381%" height="15" fill="rgb(214,25,53)" fg:x="256" fg:w="3"/><text x="20.5675%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="20.3968%" y="165" width="0.1587%" height="15" fill="rgb(254,186,54)" fg:x="257" fg:w="2"/><text x="20.6468%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.3968%" y="149" width="0.1587%" height="15" fill="rgb(208,174,49)" fg:x="257" fg:w="2"/><text x="20.6468%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="20.3968%" y="133" width="0.1587%" height="15" fill="rgb(233,191,51)" fg:x="257" fg:w="2"/><text x="20.6468%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.5556%" y="197" width="0.0794%" height="15" fill="rgb(222,134,10)" fg:x="259" fg:w="1"/><text x="20.8056%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="20.5556%" y="229" width="0.1587%" height="15" fill="rgb(230,226,20)" fg:x="259" fg:w="2"/><text x="20.8056%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="20.5556%" y="213" width="0.1587%" height="15" fill="rgb(251,111,25)" fg:x="259" fg:w="2"/><text x="20.8056%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="20.6349%" y="197" width="0.0794%" height="15" fill="rgb(224,40,46)" fg:x="260" fg:w="1"/><text x="20.8849%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="20.6349%" y="181" width="0.0794%" height="15" fill="rgb(236,108,47)" fg:x="260" fg:w="1"/><text x="20.8849%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.7143%" y="213" width="0.0794%" height="15" fill="rgb(234,93,0)" fg:x="261" fg:w="1"/><text x="20.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.7143%" y="197" width="0.0794%" height="15" fill="rgb(224,213,32)" fg:x="261" fg:w="1"/><text x="20.9643%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (83 samples, 6.59%)</title><rect x="20.7143%" y="229" width="6.5873%" height="15" fill="rgb(251,11,48)" fg:x="261" fg:w="83"/><text x="20.9643%" y="239.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (82 samples, 6.51%)</title><rect x="20.7937%" y="213" width="6.5079%" height="15" fill="rgb(236,173,5)" fg:x="262" fg:w="82"/><text x="21.0437%" y="223.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (82 samples, 6.51%)</title><rect x="20.7937%" y="197" width="6.5079%" height="15" fill="rgb(230,95,12)" fg:x="262" fg:w="82"/><text x="21.0437%" y="207.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="27.3016%" y="229" width="0.2381%" height="15" fill="rgb(232,209,1)" fg:x="344" fg:w="3"/><text x="27.5516%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="27.3810%" y="213" width="0.1587%" height="15" fill="rgb(232,6,1)" fg:x="345" fg:w="2"/><text x="27.6310%" y="223.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="27.5397%" y="229" width="0.0794%" height="15" fill="rgb(210,224,50)" fg:x="347" fg:w="1"/><text x="27.7897%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (105 samples, 8.33%)</title><rect x="19.6032%" y="277" width="8.3333%" height="15" fill="rgb(228,127,35)" fg:x="247" fg:w="105"/><text x="19.8532%" y="287.50">&lt;core::iter:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (104 samples, 8.25%)</title><rect x="19.6825%" y="261" width="8.2540%" height="15" fill="rgb(245,102,45)" fg:x="248" fg:w="104"/><text x="19.9325%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (104 samples, 8.25%)</title><rect x="19.6825%" y="245" width="8.2540%" height="15" fill="rgb(214,1,49)" fg:x="248" fg:w="104"/><text x="19.9325%" y="255.50">regex_autom..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="27.6190%" y="229" width="0.3175%" height="15" fill="rgb(226,163,40)" fg:x="348" fg:w="4"/><text x="27.8690%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="27.8571%" y="213" width="0.0794%" height="15" fill="rgb(239,212,28)" fg:x="351" fg:w="1"/><text x="28.1071%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.8571%" y="197" width="0.0794%" height="15" fill="rgb(220,20,13)" fg:x="351" fg:w="1"/><text x="28.1071%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.9365%" y="277" width="0.0794%" height="15" fill="rgb(210,164,35)" fg:x="352" fg:w="1"/><text x="28.1865%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.1746%" y="261" width="0.0794%" height="15" fill="rgb(248,109,41)" fg:x="355" fg:w="1"/><text x="28.4246%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="28.2540%" y="261" width="0.0794%" height="15" fill="rgb(238,23,50)" fg:x="356" fg:w="1"/><text x="28.5040%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="28.3333%" y="261" width="0.4762%" height="15" fill="rgb(211,48,49)" fg:x="357" fg:w="6"/><text x="28.5833%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.7302%" y="245" width="0.0794%" height="15" fill="rgb(223,36,21)" fg:x="362" fg:w="1"/><text x="28.9802%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.7302%" y="229" width="0.0794%" height="15" fill="rgb(207,123,46)" fg:x="362" fg:w="1"/><text x="28.9802%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7302%" y="213" width="0.0794%" height="15" fill="rgb(240,218,32)" fg:x="362" fg:w="1"/><text x="28.9802%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (11 samples, 0.87%)</title><rect x="28.0159%" y="277" width="0.8730%" height="15" fill="rgb(252,5,43)" fg:x="353" fg:w="11"/><text x="28.2659%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="28.8095%" y="261" width="0.0794%" height="15" fill="rgb(252,84,19)" fg:x="363" fg:w="1"/><text x="29.0595%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8095%" y="245" width="0.0794%" height="15" fill="rgb(243,152,39)" fg:x="363" fg:w="1"/><text x="29.0595%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="28.8889%" y="277" width="0.0794%" height="15" fill="rgb(234,160,15)" fg:x="364" fg:w="1"/><text x="29.1389%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="28.8889%" y="261" width="0.0794%" height="15" fill="rgb(237,34,20)" fg:x="364" fg:w="1"/><text x="29.1389%" y="271.50"></text></g><g><title>regex_syntax::hir::ClassBytes::iter (1 samples, 0.08%)</title><rect x="28.8889%" y="245" width="0.0794%" height="15" fill="rgb(229,97,13)" fg:x="364" fg:w="1"/><text x="29.1389%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (119 samples, 9.44%)</title><rect x="19.6032%" y="293" width="9.4444%" height="15" fill="rgb(234,71,50)" fg:x="247" fg:w="119"/><text x="19.8532%" y="303.50">regex_automata..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="28.9683%" y="277" width="0.0794%" height="15" fill="rgb(253,155,4)" fg:x="365" fg:w="1"/><text x="29.2183%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="28.9683%" y="261" width="0.0794%" height="15" fill="rgb(222,185,37)" fg:x="365" fg:w="1"/><text x="29.2183%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.9683%" y="245" width="0.0794%" height="15" fill="rgb(251,177,13)" fg:x="365" fg:w="1"/><text x="29.2183%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (143 samples, 11.35%)</title><rect x="17.7778%" y="309" width="11.3492%" height="15" fill="rgb(250,179,40)" fg:x="224" fg:w="143"/><text x="18.0278%" y="319.50">regex_automata::m..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="29.0476%" y="293" width="0.0794%" height="15" fill="rgb(242,44,2)" fg:x="366" fg:w="1"/><text x="29.2976%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="29.0476%" y="277" width="0.0794%" height="15" fill="rgb(216,177,13)" fg:x="366" fg:w="1"/><text x="29.2976%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="29.3651%" y="261" width="0.0794%" height="15" fill="rgb(216,106,43)" fg:x="370" fg:w="1"/><text x="29.6151%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="29.1270%" y="309" width="0.3968%" height="15" fill="rgb(216,183,2)" fg:x="367" fg:w="5"/><text x="29.3770%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="29.1270%" y="293" width="0.3968%" height="15" fill="rgb(249,75,3)" fg:x="367" fg:w="5"/><text x="29.3770%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="29.2857%" y="277" width="0.2381%" height="15" fill="rgb(219,67,39)" fg:x="369" fg:w="3"/><text x="29.5357%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="29.4444%" y="261" width="0.0794%" height="15" fill="rgb(253,228,2)" fg:x="371" fg:w="1"/><text x="29.6944%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_open (1 samples, 0.08%)</title><rect x="29.4444%" y="245" width="0.0794%" height="15" fill="rgb(235,138,27)" fg:x="371" fg:w="1"/><text x="29.6944%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (156 samples, 12.38%)</title><rect x="17.2222%" y="357" width="12.3810%" height="15" fill="rgb(236,97,51)" fg:x="217" fg:w="156"/><text x="17.4722%" y="367.50">&lt;regex::regex::str..</text></g><g><title>regex::builders::Builder::build_one_string (156 samples, 12.38%)</title><rect x="17.2222%" y="341" width="12.3810%" height="15" fill="rgb(240,80,30)" fg:x="217" fg:w="156"/><text x="17.4722%" y="351.50">regex::builders::B..</text></g><g><title>regex_automata::meta::regex::Builder::build (156 samples, 12.38%)</title><rect x="17.2222%" y="325" width="12.3810%" height="15" fill="rgb(230,178,19)" fg:x="217" fg:w="156"/><text x="17.4722%" y="335.50">regex_automata::me..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="29.5238%" y="309" width="0.0794%" height="15" fill="rgb(210,190,27)" fg:x="372" fg:w="1"/><text x="29.7738%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.5238%" y="293" width="0.0794%" height="15" fill="rgb(222,107,31)" fg:x="372" fg:w="1"/><text x="29.7738%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="29.5238%" y="277" width="0.0794%" height="15" fill="rgb(216,127,34)" fg:x="372" fg:w="1"/><text x="29.7738%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="29.5238%" y="261" width="0.0794%" height="15" fill="rgb(234,116,52)" fg:x="372" fg:w="1"/><text x="29.7738%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6032%" y="309" width="0.0794%" height="15" fill="rgb(222,124,15)" fg:x="373" fg:w="1"/><text x="29.8532%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="29.6032%" y="325" width="0.1587%" height="15" fill="rgb(231,179,28)" fg:x="373" fg:w="2"/><text x="29.8532%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="29.6825%" y="309" width="0.0794%" height="15" fill="rgb(226,93,45)" fg:x="374" fg:w="1"/><text x="29.9325%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.6825%" y="293" width="0.0794%" height="15" fill="rgb(215,8,51)" fg:x="374" fg:w="1"/><text x="29.9325%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.7619%" y="309" width="0.0794%" height="15" fill="rgb(223,106,5)" fg:x="375" fg:w="1"/><text x="30.0119%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="29.8413%" y="309" width="0.0794%" height="15" fill="rgb(250,191,5)" fg:x="376" fg:w="1"/><text x="30.0913%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="29.6032%" y="357" width="0.3968%" height="15" fill="rgb(242,132,44)" fg:x="373" fg:w="5"/><text x="29.8532%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="29.6032%" y="341" width="0.3968%" height="15" fill="rgb(251,152,29)" fg:x="373" fg:w="5"/><text x="29.8532%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="29.7619%" y="325" width="0.2381%" height="15" fill="rgb(218,179,5)" fg:x="375" fg:w="3"/><text x="30.0119%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="29.9206%" y="309" width="0.0794%" height="15" fill="rgb(227,67,19)" fg:x="377" fg:w="1"/><text x="30.1706%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9206%" y="293" width="0.0794%" height="15" fill="rgb(233,119,31)" fg:x="377" fg:w="1"/><text x="30.1706%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.0000%" y="293" width="0.0794%" height="15" fill="rgb(241,120,22)" fg:x="378" fg:w="1"/><text x="30.2500%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.0000%" y="277" width="0.0794%" height="15" fill="rgb(224,102,30)" fg:x="378" fg:w="1"/><text x="30.2500%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.79%)</title><rect x="30.0794%" y="293" width="0.7937%" height="15" fill="rgb(210,164,37)" fg:x="379" fg:w="10"/><text x="30.3294%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="30.6349%" y="277" width="0.2381%" height="15" fill="rgb(226,191,16)" fg:x="386" fg:w="3"/><text x="30.8849%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.95%)</title><rect x="30.0000%" y="309" width="0.9524%" height="15" fill="rgb(214,40,45)" fg:x="378" fg:w="12"/><text x="30.2500%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="30.8730%" y="293" width="0.0794%" height="15" fill="rgb(244,29,26)" fg:x="389" fg:w="1"/><text x="31.1230%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.8730%" y="277" width="0.0794%" height="15" fill="rgb(216,16,5)" fg:x="389" fg:w="1"/><text x="31.1230%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.8730%" y="261" width="0.0794%" height="15" fill="rgb(249,76,35)" fg:x="389" fg:w="1"/><text x="31.1230%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.8730%" y="245" width="0.0794%" height="15" fill="rgb(207,11,44)" fg:x="389" fg:w="1"/><text x="31.1230%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (186 samples, 14.76%)</title><rect x="16.2698%" y="373" width="14.7619%" height="15" fill="rgb(228,190,49)" fg:x="205" fg:w="186"/><text x="16.5198%" y="383.50">indefinite::helper::Hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.03%)</title><rect x="30.0000%" y="357" width="1.0317%" height="15" fill="rgb(214,173,12)" fg:x="378" fg:w="13"/><text x="30.2500%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.03%)</title><rect x="30.0000%" y="341" width="1.0317%" height="15" fill="rgb(218,26,35)" fg:x="378" fg:w="13"/><text x="30.2500%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.03%)</title><rect x="30.0000%" y="325" width="1.0317%" height="15" fill="rgb(220,200,19)" fg:x="378" fg:w="13"/><text x="30.2500%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="30.9524%" y="309" width="0.0794%" height="15" fill="rgb(239,95,49)" fg:x="390" fg:w="1"/><text x="31.2024%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="30.9524%" y="293" width="0.0794%" height="15" fill="rgb(235,85,53)" fg:x="390" fg:w="1"/><text x="31.2024%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="30.9524%" y="277" width="0.0794%" height="15" fill="rgb(233,133,31)" fg:x="390" fg:w="1"/><text x="31.2024%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.9524%" y="261" width="0.0794%" height="15" fill="rgb(218,25,20)" fg:x="390" fg:w="1"/><text x="31.2024%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="31.1111%" y="277" width="0.0794%" height="15" fill="rgb(252,210,38)" fg:x="392" fg:w="1"/><text x="31.3611%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="31.1111%" y="261" width="0.0794%" height="15" fill="rgb(242,134,21)" fg:x="392" fg:w="1"/><text x="31.3611%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="31.1111%" y="245" width="0.0794%" height="15" fill="rgb(213,28,48)" fg:x="392" fg:w="1"/><text x="31.3611%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.1111%" y="229" width="0.0794%" height="15" fill="rgb(250,196,2)" fg:x="392" fg:w="1"/><text x="31.3611%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.1905%" y="277" width="0.0794%" height="15" fill="rgb(227,5,17)" fg:x="393" fg:w="1"/><text x="31.4405%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="31.0317%" y="309" width="0.3175%" height="15" fill="rgb(221,226,24)" fg:x="391" fg:w="4"/><text x="31.2817%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="31.0317%" y="293" width="0.3175%" height="15" fill="rgb(211,5,48)" fg:x="391" fg:w="4"/><text x="31.2817%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="31.2698%" y="277" width="0.0794%" height="15" fill="rgb(219,150,6)" fg:x="394" fg:w="1"/><text x="31.5198%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (5 samples, 0.40%)</title><rect x="31.3492%" y="277" width="0.3968%" height="15" fill="rgb(251,46,16)" fg:x="395" fg:w="5"/><text x="31.5992%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="31.3492%" y="261" width="0.3968%" height="15" fill="rgb(220,204,40)" fg:x="395" fg:w="5"/><text x="31.5992%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="31.3492%" y="245" width="0.3968%" height="15" fill="rgb(211,85,2)" fg:x="395" fg:w="5"/><text x="31.5992%" y="255.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="31.3492%" y="229" width="0.3968%" height="15" fill="rgb(229,17,7)" fg:x="395" fg:w="5"/><text x="31.5992%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.7460%" y="277" width="0.0794%" height="15" fill="rgb(239,72,28)" fg:x="400" fg:w="1"/><text x="31.9960%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.8254%" y="277" width="0.0794%" height="15" fill="rgb(230,47,54)" fg:x="401" fg:w="1"/><text x="32.0754%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="31.8254%" y="261" width="0.0794%" height="15" fill="rgb(214,50,8)" fg:x="401" fg:w="1"/><text x="32.0754%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (9 samples, 0.71%)</title><rect x="31.3492%" y="309" width="0.7143%" height="15" fill="rgb(216,198,43)" fg:x="395" fg:w="9"/><text x="31.5992%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (9 samples, 0.71%)</title><rect x="31.3492%" y="293" width="0.7143%" height="15" fill="rgb(234,20,35)" fg:x="395" fg:w="9"/><text x="31.5992%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="31.9048%" y="277" width="0.1587%" height="15" fill="rgb(254,45,19)" fg:x="402" fg:w="2"/><text x="32.1548%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="31.9048%" y="261" width="0.1587%" height="15" fill="rgb(219,14,44)" fg:x="402" fg:w="2"/><text x="32.1548%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.3810%" y="277" width="0.1587%" height="15" fill="rgb(217,220,26)" fg:x="408" fg:w="2"/><text x="32.6310%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (24 samples, 1.90%)</title><rect x="32.2222%" y="293" width="1.9048%" height="15" fill="rgb(213,158,28)" fg:x="406" fg:w="24"/><text x="32.4722%" y="303.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (20 samples, 1.59%)</title><rect x="32.5397%" y="277" width="1.5873%" height="15" fill="rgb(252,51,52)" fg:x="410" fg:w="20"/><text x="32.7897%" y="287.50"></text></g><g><title>__libc_free (5 samples, 0.40%)</title><rect x="33.7302%" y="261" width="0.3968%" height="15" fill="rgb(246,89,16)" fg:x="425" fg:w="5"/><text x="33.9802%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="34.1270%" y="277" width="0.0794%" height="15" fill="rgb(216,158,49)" fg:x="430" fg:w="1"/><text x="34.3770%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="34.1270%" y="261" width="0.0794%" height="15" fill="rgb(236,107,19)" fg:x="430" fg:w="1"/><text x="34.3770%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1270%" y="245" width="0.0794%" height="15" fill="rgb(228,185,30)" fg:x="430" fg:w="1"/><text x="34.3770%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="34.1270%" y="293" width="0.3968%" height="15" fill="rgb(246,134,8)" fg:x="430" fg:w="5"/><text x="34.3770%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="34.2063%" y="277" width="0.3175%" height="15" fill="rgb(214,143,50)" fg:x="431" fg:w="4"/><text x="34.4563%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="34.7619%" y="261" width="0.2381%" height="15" fill="rgb(228,75,8)" fg:x="438" fg:w="3"/><text x="35.0119%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="34.7619%" y="245" width="0.2381%" height="15" fill="rgb(207,175,4)" fg:x="438" fg:w="3"/><text x="35.0119%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="34.7619%" y="229" width="0.2381%" height="15" fill="rgb(205,108,24)" fg:x="438" fg:w="3"/><text x="35.0119%" y="239.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="34.7619%" y="213" width="0.2381%" height="15" fill="rgb(244,120,49)" fg:x="438" fg:w="3"/><text x="35.0119%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.4762%" y="229" width="0.0794%" height="15" fill="rgb(223,47,38)" fg:x="447" fg:w="1"/><text x="35.7262%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.4762%" y="213" width="0.0794%" height="15" fill="rgb(229,179,11)" fg:x="447" fg:w="1"/><text x="35.7262%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.4762%" y="197" width="0.0794%" height="15" fill="rgb(231,122,1)" fg:x="447" fg:w="1"/><text x="35.7262%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (8 samples, 0.63%)</title><rect x="35.0000%" y="261" width="0.6349%" height="15" fill="rgb(245,119,9)" fg:x="441" fg:w="8"/><text x="35.2500%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="35.3175%" y="245" width="0.3175%" height="15" fill="rgb(241,163,25)" fg:x="445" fg:w="4"/><text x="35.5675%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.5556%" y="229" width="0.0794%" height="15" fill="rgb(217,214,3)" fg:x="448" fg:w="1"/><text x="35.8056%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (14 samples, 1.11%)</title><rect x="35.6349%" y="261" width="1.1111%" height="15" fill="rgb(240,86,28)" fg:x="449" fg:w="14"/><text x="35.8849%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (14 samples, 1.11%)</title><rect x="35.6349%" y="245" width="1.1111%" height="15" fill="rgb(215,47,9)" fg:x="449" fg:w="14"/><text x="35.8849%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (14 samples, 1.11%)</title><rect x="35.6349%" y="229" width="1.1111%" height="15" fill="rgb(252,25,45)" fg:x="449" fg:w="14"/><text x="35.8849%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (29 samples, 2.30%)</title><rect x="34.5238%" y="293" width="2.3016%" height="15" fill="rgb(251,164,9)" fg:x="435" fg:w="29"/><text x="34.7738%" y="303.50">r..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (29 samples, 2.30%)</title><rect x="34.5238%" y="277" width="2.3016%" height="15" fill="rgb(233,194,0)" fg:x="435" fg:w="29"/><text x="34.7738%" y="287.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::stack_push (1 samples, 0.08%)</title><rect x="36.7460%" y="261" width="0.0794%" height="15" fill="rgb(249,111,24)" fg:x="463" fg:w="1"/><text x="36.9960%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.7460%" y="245" width="0.0794%" height="15" fill="rgb(250,223,3)" fg:x="463" fg:w="1"/><text x="36.9960%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="36.9048%" y="261" width="0.0794%" height="15" fill="rgb(236,178,37)" fg:x="465" fg:w="1"/><text x="37.1548%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="37.0635%" y="245" width="0.1587%" height="15" fill="rgb(241,158,50)" fg:x="467" fg:w="2"/><text x="37.3135%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="37.0635%" y="229" width="0.1587%" height="15" fill="rgb(213,121,41)" fg:x="467" fg:w="2"/><text x="37.3135%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.1429%" y="213" width="0.0794%" height="15" fill="rgb(240,92,3)" fg:x="468" fg:w="1"/><text x="37.3929%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1429%" y="197" width="0.0794%" height="15" fill="rgb(205,123,3)" fg:x="468" fg:w="1"/><text x="37.3929%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="37.2222%" y="197" width="0.0794%" height="15" fill="rgb(205,97,47)" fg:x="469" fg:w="1"/><text x="37.4722%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.2222%" y="181" width="0.0794%" height="15" fill="rgb(247,152,14)" fg:x="469" fg:w="1"/><text x="37.4722%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="38.8095%" y="181" width="0.3175%" height="15" fill="rgb(248,195,53)" fg:x="489" fg:w="4"/><text x="39.0595%" y="191.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="39.1270%" y="181" width="0.1587%" height="15" fill="rgb(226,201,16)" fg:x="493" fg:w="2"/><text x="39.3770%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="39.2857%" y="181" width="0.3968%" height="15" fill="rgb(205,98,0)" fg:x="495" fg:w="5"/><text x="39.5357%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="39.4444%" y="165" width="0.2381%" height="15" fill="rgb(214,191,48)" fg:x="497" fg:w="3"/><text x="39.6944%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="39.4444%" y="149" width="0.2381%" height="15" fill="rgb(237,112,39)" fg:x="497" fg:w="3"/><text x="39.6944%" y="159.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="39.4444%" y="133" width="0.2381%" height="15" fill="rgb(247,203,27)" fg:x="497" fg:w="3"/><text x="39.6944%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="39.6825%" y="181" width="0.0794%" height="15" fill="rgb(235,124,28)" fg:x="500" fg:w="1"/><text x="39.9325%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.6825%" y="165" width="0.0794%" height="15" fill="rgb(208,207,46)" fg:x="500" fg:w="1"/><text x="39.9325%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.6825%" y="149" width="0.0794%" height="15" fill="rgb(234,176,4)" fg:x="500" fg:w="1"/><text x="39.9325%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.6825%" y="133" width="0.0794%" height="15" fill="rgb(230,133,28)" fg:x="500" fg:w="1"/><text x="39.9325%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="40.3968%" y="149" width="0.0794%" height="15" fill="rgb(211,137,40)" fg:x="509" fg:w="1"/><text x="40.6468%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="40.4762%" y="149" width="0.3175%" height="15" fill="rgb(254,35,13)" fg:x="510" fg:w="4"/><text x="40.7262%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="40.4762%" y="133" width="0.3175%" height="15" fill="rgb(225,49,51)" fg:x="510" fg:w="4"/><text x="40.7262%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7143%" y="117" width="0.0794%" height="15" fill="rgb(251,10,15)" fg:x="513" fg:w="1"/><text x="40.9643%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (23 samples, 1.83%)</title><rect x="39.7619%" y="181" width="1.8254%" height="15" fill="rgb(228,207,15)" fg:x="501" fg:w="23"/><text x="40.0119%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (20 samples, 1.59%)</title><rect x="40.0000%" y="165" width="1.5873%" height="15" fill="rgb(241,99,19)" fg:x="504" fg:w="20"/><text x="40.2500%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.79%)</title><rect x="40.7937%" y="149" width="0.7937%" height="15" fill="rgb(207,104,49)" fg:x="514" fg:w="10"/><text x="41.0437%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="41.4286%" y="133" width="0.1587%" height="15" fill="rgb(234,99,18)" fg:x="522" fg:w="2"/><text x="41.6786%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.4286%" y="117" width="0.1587%" height="15" fill="rgb(213,191,49)" fg:x="522" fg:w="2"/><text x="41.6786%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.4286%" y="101" width="0.1587%" height="15" fill="rgb(210,226,19)" fg:x="522" fg:w="2"/><text x="41.6786%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="41.4286%" y="85" width="0.1587%" height="15" fill="rgb(229,97,18)" fg:x="522" fg:w="2"/><text x="41.6786%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (88 samples, 6.98%)</title><rect x="41.5873%" y="181" width="6.9841%" height="15" fill="rgb(211,167,15)" fg:x="524" fg:w="88"/><text x="41.8373%" y="191.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (88 samples, 6.98%)</title><rect x="41.5873%" y="165" width="6.9841%" height="15" fill="rgb(210,169,34)" fg:x="524" fg:w="88"/><text x="41.8373%" y="175.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (88 samples, 6.98%)</title><rect x="41.5873%" y="149" width="6.9841%" height="15" fill="rgb(241,121,31)" fg:x="524" fg:w="88"/><text x="41.8373%" y="159.50">alloc::ve..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="48.5714%" y="181" width="0.3968%" height="15" fill="rgb(232,40,11)" fg:x="612" fg:w="5"/><text x="48.8214%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="48.8095%" y="165" width="0.1587%" height="15" fill="rgb(205,86,26)" fg:x="615" fg:w="2"/><text x="49.0595%" y="175.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="48.9683%" y="181" width="0.1587%" height="15" fill="rgb(231,126,28)" fg:x="617" fg:w="2"/><text x="49.2183%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (164 samples, 13.02%)</title><rect x="36.9048%" y="277" width="13.0159%" height="15" fill="rgb(219,221,18)" fg:x="465" fg:w="164"/><text x="37.1548%" y="287.50">&lt;core::iter::adapter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (163 samples, 12.94%)</title><rect x="36.9841%" y="261" width="12.9365%" height="15" fill="rgb(211,40,0)" fg:x="466" fg:w="163"/><text x="37.2341%" y="271.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (160 samples, 12.70%)</title><rect x="37.2222%" y="245" width="12.6984%" height="15" fill="rgb(239,85,43)" fg:x="469" fg:w="160"/><text x="37.4722%" y="255.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (160 samples, 12.70%)</title><rect x="37.2222%" y="229" width="12.6984%" height="15" fill="rgb(231,55,21)" fg:x="469" fg:w="160"/><text x="37.4722%" y="239.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (160 samples, 12.70%)</title><rect x="37.2222%" y="213" width="12.6984%" height="15" fill="rgb(225,184,43)" fg:x="469" fg:w="160"/><text x="37.4722%" y="223.50">regex_automata::nfa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (159 samples, 12.62%)</title><rect x="37.3016%" y="197" width="12.6190%" height="15" fill="rgb(251,158,41)" fg:x="470" fg:w="159"/><text x="37.5516%" y="207.50">regex_automata::nfa..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.79%)</title><rect x="49.1270%" y="181" width="0.7937%" height="15" fill="rgb(234,159,37)" fg:x="619" fg:w="10"/><text x="49.3770%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="49.6032%" y="165" width="0.3175%" height="15" fill="rgb(216,204,22)" fg:x="625" fg:w="4"/><text x="49.8532%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="49.6825%" y="149" width="0.2381%" height="15" fill="rgb(214,17,3)" fg:x="626" fg:w="3"/><text x="49.9325%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="49.6825%" y="133" width="0.2381%" height="15" fill="rgb(212,111,17)" fg:x="626" fg:w="3"/><text x="49.9325%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.0794%" y="261" width="0.0794%" height="15" fill="rgb(221,157,24)" fg:x="631" fg:w="1"/><text x="50.3294%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="50.1587%" y="261" width="0.1587%" height="15" fill="rgb(252,16,13)" fg:x="632" fg:w="2"/><text x="50.4087%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (18 samples, 1.43%)</title><rect x="50.3175%" y="261" width="1.4286%" height="15" fill="rgb(221,62,2)" fg:x="634" fg:w="18"/><text x="50.5675%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="51.4286%" y="245" width="0.3175%" height="15" fill="rgb(247,87,22)" fg:x="648" fg:w="4"/><text x="51.6786%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="51.4286%" y="229" width="0.3175%" height="15" fill="rgb(215,73,9)" fg:x="648" fg:w="4"/><text x="51.6786%" y="239.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="51.4286%" y="213" width="0.3175%" height="15" fill="rgb(207,175,33)" fg:x="648" fg:w="4"/><text x="51.6786%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="51.7460%" y="261" width="0.4762%" height="15" fill="rgb(243,129,54)" fg:x="652" fg:w="6"/><text x="51.9960%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="52.0635%" y="245" width="0.1587%" height="15" fill="rgb(227,119,45)" fg:x="656" fg:w="2"/><text x="52.3135%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.1429%" y="229" width="0.0794%" height="15" fill="rgb(205,109,36)" fg:x="657" fg:w="1"/><text x="52.3929%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="52.1429%" y="213" width="0.0794%" height="15" fill="rgb(205,6,39)" fg:x="657" fg:w="1"/><text x="52.3929%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="52.2222%" y="261" width="0.0794%" height="15" fill="rgb(221,32,16)" fg:x="658" fg:w="1"/><text x="52.4722%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (256 samples, 20.32%)</title><rect x="32.0635%" y="309" width="20.3175%" height="15" fill="rgb(228,144,50)" fg:x="404" fg:w="256"/><text x="32.3135%" y="319.50">regex_automata::meta::strategy::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (196 samples, 15.56%)</title><rect x="36.8254%" y="293" width="15.5556%" height="15" fill="rgb(229,201,53)" fg:x="464" fg:w="196"/><text x="37.0754%" y="303.50">regex_automata::nfa::tho..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (31 samples, 2.46%)</title><rect x="49.9206%" y="277" width="2.4603%" height="15" fill="rgb(249,153,27)" fg:x="629" fg:w="31"/><text x="50.1706%" y="287.50">re..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="52.3016%" y="261" width="0.0794%" height="15" fill="rgb(227,106,25)" fg:x="659" fg:w="1"/><text x="52.5516%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.3016%" y="245" width="0.0794%" height="15" fill="rgb(230,65,29)" fg:x="659" fg:w="1"/><text x="52.5516%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="52.6190%" y="261" width="0.0794%" height="15" fill="rgb(221,57,46)" fg:x="663" fg:w="1"/><text x="52.8690%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="52.6984%" y="261" width="0.1587%" height="15" fill="rgb(229,161,17)" fg:x="664" fg:w="2"/><text x="52.9484%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="52.6984%" y="245" width="0.1587%" height="15" fill="rgb(222,213,11)" fg:x="664" fg:w="2"/><text x="52.9484%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="52.7778%" y="229" width="0.0794%" height="15" fill="rgb(235,35,13)" fg:x="665" fg:w="1"/><text x="53.0278%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="52.6190%" y="277" width="0.3968%" height="15" fill="rgb(233,158,34)" fg:x="663" fg:w="5"/><text x="52.8690%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="52.8571%" y="261" width="0.1587%" height="15" fill="rgb(215,151,48)" fg:x="666" fg:w="2"/><text x="53.1071%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="52.8571%" y="245" width="0.1587%" height="15" fill="rgb(229,84,14)" fg:x="666" fg:w="2"/><text x="53.1071%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.8571%" y="229" width="0.1587%" height="15" fill="rgb(229,68,14)" fg:x="666" fg:w="2"/><text x="53.1071%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="52.8571%" y="213" width="0.1587%" height="15" fill="rgb(243,106,26)" fg:x="666" fg:w="2"/><text x="53.1071%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (2 samples, 0.16%)</title><rect x="53.0159%" y="277" width="0.1587%" height="15" fill="rgb(206,45,38)" fg:x="668" fg:w="2"/><text x="53.2659%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="53.0952%" y="261" width="0.0794%" height="15" fill="rgb(226,6,15)" fg:x="669" fg:w="1"/><text x="53.3452%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.87%)</title><rect x="52.3810%" y="309" width="0.8730%" height="15" fill="rgb(232,22,54)" fg:x="660" fg:w="11"/><text x="52.6310%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.79%)</title><rect x="52.4603%" y="293" width="0.7937%" height="15" fill="rgb(229,222,32)" fg:x="661" fg:w="10"/><text x="52.7103%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="53.1746%" y="277" width="0.0794%" height="15" fill="rgb(228,62,29)" fg:x="670" fg:w="1"/><text x="53.4246%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="53.1746%" y="261" width="0.0794%" height="15" fill="rgb(251,103,34)" fg:x="670" fg:w="1"/><text x="53.4246%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.4921%" y="245" width="0.0794%" height="15" fill="rgb(233,12,30)" fg:x="674" fg:w="1"/><text x="53.7421%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4921%" y="229" width="0.0794%" height="15" fill="rgb(238,52,0)" fg:x="674" fg:w="1"/><text x="53.7421%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.4921%" y="213" width="0.0794%" height="15" fill="rgb(223,98,5)" fg:x="674" fg:w="1"/><text x="53.7421%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="53.3333%" y="261" width="0.3175%" height="15" fill="rgb(228,75,37)" fg:x="672" fg:w="4"/><text x="53.5833%" y="271.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="53.5714%" y="245" width="0.0794%" height="15" fill="rgb(205,115,49)" fg:x="675" fg:w="1"/><text x="53.8214%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.63%)</title><rect x="53.2540%" y="277" width="0.6349%" height="15" fill="rgb(250,154,43)" fg:x="671" fg:w="8"/><text x="53.5040%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (3 samples, 0.24%)</title><rect x="53.6508%" y="261" width="0.2381%" height="15" fill="rgb(226,43,29)" fg:x="676" fg:w="3"/><text x="53.9008%" y="271.50"></text></g><g><title>regex_syntax::unicode::perl_digit (3 samples, 0.24%)</title><rect x="53.6508%" y="245" width="0.2381%" height="15" fill="rgb(249,228,39)" fg:x="676" fg:w="3"/><text x="53.9008%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="53.7302%" y="229" width="0.1587%" height="15" fill="rgb(216,79,43)" fg:x="677" fg:w="2"/><text x="53.9802%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="54.1270%" y="261" width="0.1587%" height="15" fill="rgb(228,95,12)" fg:x="682" fg:w="2"/><text x="54.3770%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (295 samples, 23.41%)</title><rect x="31.0317%" y="357" width="23.4127%" height="15" fill="rgb(249,221,15)" fg:x="391" fg:w="295"/><text x="31.2817%" y="367.50">&lt;regex::regex::string::Regex as core:..</text></g><g><title>regex::builders::Builder::build_one_string (295 samples, 23.41%)</title><rect x="31.0317%" y="341" width="23.4127%" height="15" fill="rgb(233,34,13)" fg:x="391" fg:w="295"/><text x="31.2817%" y="351.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::build (295 samples, 23.41%)</title><rect x="31.0317%" y="325" width="23.4127%" height="15" fill="rgb(214,103,39)" fg:x="391" fg:w="295"/><text x="31.2817%" y="335.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (15 samples, 1.19%)</title><rect x="53.2540%" y="309" width="1.1905%" height="15" fill="rgb(251,126,39)" fg:x="671" fg:w="15"/><text x="53.5040%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (15 samples, 1.19%)</title><rect x="53.2540%" y="293" width="1.1905%" height="15" fill="rgb(214,216,36)" fg:x="671" fg:w="15"/><text x="53.5040%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (7 samples, 0.56%)</title><rect x="53.8889%" y="277" width="0.5556%" height="15" fill="rgb(220,221,8)" fg:x="679" fg:w="7"/><text x="54.1389%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (2 samples, 0.16%)</title><rect x="54.2857%" y="261" width="0.1587%" height="15" fill="rgb(240,216,3)" fg:x="684" fg:w="2"/><text x="54.5357%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.3651%" y="245" width="0.0794%" height="15" fill="rgb(232,218,17)" fg:x="685" fg:w="1"/><text x="54.6151%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.4444%" y="309" width="0.0794%" height="15" fill="rgb(229,163,45)" fg:x="686" fg:w="1"/><text x="54.6944%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="54.4444%" y="325" width="0.2381%" height="15" fill="rgb(231,110,42)" fg:x="686" fg:w="3"/><text x="54.6944%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="54.5238%" y="309" width="0.1587%" height="15" fill="rgb(208,170,48)" fg:x="687" fg:w="2"/><text x="54.7738%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.5238%" y="293" width="0.1587%" height="15" fill="rgb(239,116,25)" fg:x="687" fg:w="2"/><text x="54.7738%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="54.5238%" y="277" width="0.1587%" height="15" fill="rgb(219,200,50)" fg:x="687" fg:w="2"/><text x="54.7738%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="54.4444%" y="357" width="0.3175%" height="15" fill="rgb(245,200,0)" fg:x="686" fg:w="4"/><text x="54.6944%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="54.4444%" y="341" width="0.3175%" height="15" fill="rgb(245,119,33)" fg:x="686" fg:w="4"/><text x="54.6944%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="54.6825%" y="325" width="0.0794%" height="15" fill="rgb(231,125,12)" fg:x="689" fg:w="1"/><text x="54.9325%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="54.6825%" y="309" width="0.0794%" height="15" fill="rgb(216,96,41)" fg:x="689" fg:w="1"/><text x="54.9325%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="54.8413%" y="293" width="0.0794%" height="15" fill="rgb(248,43,45)" fg:x="691" fg:w="1"/><text x="55.0913%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="54.7619%" y="341" width="0.2381%" height="15" fill="rgb(217,222,7)" fg:x="690" fg:w="3"/><text x="55.0119%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="54.7619%" y="325" width="0.2381%" height="15" fill="rgb(233,28,6)" fg:x="690" fg:w="3"/><text x="55.0119%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="54.7619%" y="309" width="0.2381%" height="15" fill="rgb(231,218,15)" fg:x="690" fg:w="3"/><text x="55.0119%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="54.9206%" y="293" width="0.0794%" height="15" fill="rgb(226,171,48)" fg:x="692" fg:w="1"/><text x="55.1706%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="55.7143%" y="261" width="0.1587%" height="15" fill="rgb(235,201,9)" fg:x="702" fg:w="2"/><text x="55.9643%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.7143%" y="245" width="0.1587%" height="15" fill="rgb(217,80,15)" fg:x="702" fg:w="2"/><text x="55.9643%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.7143%" y="229" width="0.1587%" height="15" fill="rgb(219,152,8)" fg:x="702" fg:w="2"/><text x="55.9643%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="55.8730%" y="261" width="0.0794%" height="15" fill="rgb(243,107,38)" fg:x="704" fg:w="1"/><text x="56.1230%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="55.8730%" y="245" width="0.0794%" height="15" fill="rgb(231,17,5)" fg:x="704" fg:w="1"/><text x="56.1230%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (15 samples, 1.19%)</title><rect x="55.0000%" y="277" width="1.1905%" height="15" fill="rgb(209,25,54)" fg:x="693" fg:w="15"/><text x="55.2500%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="55.9524%" y="261" width="0.2381%" height="15" fill="rgb(219,0,2)" fg:x="705" fg:w="3"/><text x="56.2024%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.27%)</title><rect x="55.0000%" y="293" width="1.2698%" height="15" fill="rgb(246,9,5)" fg:x="693" fg:w="16"/><text x="55.2500%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="56.1905%" y="277" width="0.0794%" height="15" fill="rgb(226,159,4)" fg:x="708" fg:w="1"/><text x="56.4405%" y="287.50"></text></g><g><title>indefinite::rules::number::Number::check (320 samples, 25.40%)</title><rect x="31.0317%" y="373" width="25.3968%" height="15" fill="rgb(219,175,34)" fg:x="391" fg:w="320"/><text x="31.2817%" y="383.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::is_match_at (21 samples, 1.67%)</title><rect x="54.7619%" y="357" width="1.6667%" height="15" fill="rgb(236,10,46)" fg:x="690" fg:w="21"/><text x="55.0119%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (18 samples, 1.43%)</title><rect x="55.0000%" y="341" width="1.4286%" height="15" fill="rgb(240,211,16)" fg:x="693" fg:w="18"/><text x="55.2500%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (18 samples, 1.43%)</title><rect x="55.0000%" y="325" width="1.4286%" height="15" fill="rgb(205,3,43)" fg:x="693" fg:w="18"/><text x="55.2500%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (18 samples, 1.43%)</title><rect x="55.0000%" y="309" width="1.4286%" height="15" fill="rgb(245,7,22)" fg:x="693" fg:w="18"/><text x="55.2500%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="56.2698%" y="293" width="0.1587%" height="15" fill="rgb(239,132,32)" fg:x="709" fg:w="2"/><text x="56.5198%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.4286%" y="325" width="0.0794%" height="15" fill="rgb(228,202,34)" fg:x="711" fg:w="1"/><text x="56.6786%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.6667%" y="293" width="0.0794%" height="15" fill="rgb(254,200,22)" fg:x="714" fg:w="1"/><text x="56.9167%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.7460%" y="293" width="0.0794%" height="15" fill="rgb(219,10,39)" fg:x="715" fg:w="1"/><text x="56.9960%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.7460%" y="277" width="0.0794%" height="15" fill="rgb(226,210,39)" fg:x="715" fg:w="1"/><text x="56.9960%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="56.8254%" y="293" width="0.0794%" height="15" fill="rgb(208,219,16)" fg:x="716" fg:w="1"/><text x="57.0754%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8254%" y="277" width="0.0794%" height="15" fill="rgb(216,158,51)" fg:x="716" fg:w="1"/><text x="57.0754%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="56.8254%" y="261" width="0.0794%" height="15" fill="rgb(233,14,44)" fg:x="716" fg:w="1"/><text x="57.0754%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="56.8254%" y="245" width="0.0794%" height="15" fill="rgb(237,97,39)" fg:x="716" fg:w="1"/><text x="57.0754%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="56.8254%" y="229" width="0.0794%" height="15" fill="rgb(218,198,43)" fg:x="716" fg:w="1"/><text x="57.0754%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.8254%" y="213" width="0.0794%" height="15" fill="rgb(231,104,20)" fg:x="716" fg:w="1"/><text x="57.0754%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.8254%" y="197" width="0.0794%" height="15" fill="rgb(254,36,13)" fg:x="716" fg:w="1"/><text x="57.0754%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.8254%" y="181" width="0.0794%" height="15" fill="rgb(248,14,50)" fg:x="716" fg:w="1"/><text x="57.0754%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="57.0635%" y="261" width="0.0794%" height="15" fill="rgb(217,107,29)" fg:x="719" fg:w="1"/><text x="57.3135%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (11 samples, 0.87%)</title><rect x="56.9048%" y="277" width="0.8730%" height="15" fill="rgb(251,169,33)" fg:x="717" fg:w="11"/><text x="57.1548%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="57.1429%" y="261" width="0.6349%" height="15" fill="rgb(217,108,32)" fg:x="720" fg:w="8"/><text x="57.3929%" y="271.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="57.6190%" y="245" width="0.1587%" height="15" fill="rgb(219,66,42)" fg:x="726" fg:w="2"/><text x="57.8690%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="57.6984%" y="229" width="0.0794%" height="15" fill="rgb(206,180,7)" fg:x="727" fg:w="1"/><text x="57.9484%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="57.7778%" y="261" width="0.0794%" height="15" fill="rgb(208,226,31)" fg:x="728" fg:w="1"/><text x="58.0278%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.2540%" y="229" width="0.0794%" height="15" fill="rgb(218,26,49)" fg:x="734" fg:w="1"/><text x="58.5040%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="57.9365%" y="245" width="0.4762%" height="15" fill="rgb(233,197,48)" fg:x="730" fg:w="6"/><text x="58.1865%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="58.3333%" y="229" width="0.0794%" height="15" fill="rgb(252,181,51)" fg:x="735" fg:w="1"/><text x="58.5833%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (20 samples, 1.59%)</title><rect x="56.9048%" y="293" width="1.5873%" height="15" fill="rgb(253,90,19)" fg:x="717" fg:w="20"/><text x="57.1548%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (9 samples, 0.71%)</title><rect x="57.7778%" y="277" width="0.7143%" height="15" fill="rgb(215,171,30)" fg:x="728" fg:w="9"/><text x="58.0278%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="57.8571%" y="261" width="0.6349%" height="15" fill="rgb(214,222,9)" fg:x="729" fg:w="8"/><text x="58.1071%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="58.4127%" y="245" width="0.0794%" height="15" fill="rgb(223,3,22)" fg:x="736" fg:w="1"/><text x="58.6627%" y="255.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="58.4127%" y="229" width="0.0794%" height="15" fill="rgb(225,196,46)" fg:x="736" fg:w="1"/><text x="58.6627%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="58.8889%" y="245" width="0.1587%" height="15" fill="rgb(209,110,37)" fg:x="742" fg:w="2"/><text x="59.1389%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.63%)</title><rect x="58.7302%" y="261" width="0.6349%" height="15" fill="rgb(249,89,12)" fg:x="740" fg:w="8"/><text x="58.9802%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (4 samples, 0.32%)</title><rect x="59.0476%" y="245" width="0.3175%" height="15" fill="rgb(226,27,33)" fg:x="744" fg:w="4"/><text x="59.2976%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="59.1270%" y="229" width="0.2381%" height="15" fill="rgb(213,82,22)" fg:x="745" fg:w="3"/><text x="59.3770%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="59.1270%" y="213" width="0.2381%" height="15" fill="rgb(248,140,0)" fg:x="745" fg:w="3"/><text x="59.3770%" y="223.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="59.1270%" y="197" width="0.2381%" height="15" fill="rgb(228,106,3)" fg:x="745" fg:w="3"/><text x="59.3770%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (12 samples, 0.95%)</title><rect x="58.4921%" y="293" width="0.9524%" height="15" fill="rgb(209,23,37)" fg:x="737" fg:w="12"/><text x="58.7421%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (12 samples, 0.95%)</title><rect x="58.4921%" y="277" width="0.9524%" height="15" fill="rgb(241,93,50)" fg:x="737" fg:w="12"/><text x="58.7421%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="59.3651%" y="261" width="0.0794%" height="15" fill="rgb(253,46,43)" fg:x="748" fg:w="1"/><text x="59.6151%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="59.4444%" y="261" width="0.3175%" height="15" fill="rgb(226,206,43)" fg:x="749" fg:w="4"/><text x="59.6944%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (4 samples, 0.32%)</title><rect x="59.4444%" y="245" width="0.3175%" height="15" fill="rgb(217,54,7)" fg:x="749" fg:w="4"/><text x="59.6944%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.6825%" y="229" width="0.0794%" height="15" fill="rgb(223,5,52)" fg:x="752" fg:w="1"/><text x="59.9325%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.6825%" y="213" width="0.0794%" height="15" fill="rgb(206,52,46)" fg:x="752" fg:w="1"/><text x="59.9325%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.6825%" y="197" width="0.0794%" height="15" fill="rgb(253,136,11)" fg:x="752" fg:w="1"/><text x="59.9325%" y="207.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="59.8413%" y="245" width="0.0794%" height="15" fill="rgb(208,106,33)" fg:x="754" fg:w="1"/><text x="60.0913%" y="255.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="59.8413%" y="229" width="0.0794%" height="15" fill="rgb(206,54,4)" fg:x="754" fg:w="1"/><text x="60.0913%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.8413%" y="213" width="0.0794%" height="15" fill="rgb(213,3,15)" fg:x="754" fg:w="1"/><text x="60.0913%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (44 samples, 3.49%)</title><rect x="56.5079%" y="309" width="3.4921%" height="15" fill="rgb(252,211,39)" fg:x="712" fg:w="44"/><text x="56.7579%" y="319.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.56%)</title><rect x="59.4444%" y="293" width="0.5556%" height="15" fill="rgb(223,6,36)" fg:x="749" fg:w="7"/><text x="59.6944%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.56%)</title><rect x="59.4444%" y="277" width="0.5556%" height="15" fill="rgb(252,169,45)" fg:x="749" fg:w="7"/><text x="59.6944%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="59.7619%" y="261" width="0.2381%" height="15" fill="rgb(212,48,26)" fg:x="753" fg:w="3"/><text x="60.0119%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="59.9206%" y="245" width="0.0794%" height="15" fill="rgb(251,102,48)" fg:x="755" fg:w="1"/><text x="60.1706%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.9206%" y="229" width="0.0794%" height="15" fill="rgb(243,208,16)" fg:x="755" fg:w="1"/><text x="60.1706%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.9206%" y="213" width="0.0794%" height="15" fill="rgb(219,96,24)" fg:x="755" fg:w="1"/><text x="60.1706%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.9206%" y="197" width="0.0794%" height="15" fill="rgb(219,33,29)" fg:x="755" fg:w="1"/><text x="60.1706%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (46 samples, 3.65%)</title><rect x="56.4286%" y="341" width="3.6508%" height="15" fill="rgb(223,176,5)" fg:x="711" fg:w="46"/><text x="56.6786%" y="351.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (45 samples, 3.57%)</title><rect x="56.5079%" y="325" width="3.5714%" height="15" fill="rgb(228,140,14)" fg:x="712" fg:w="45"/><text x="56.7579%" y="335.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="60.0000%" y="309" width="0.0794%" height="15" fill="rgb(217,179,31)" fg:x="756" fg:w="1"/><text x="60.2500%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="60.0794%" y="309" width="0.0794%" height="15" fill="rgb(230,9,30)" fg:x="757" fg:w="1"/><text x="60.3294%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.0794%" y="293" width="0.0794%" height="15" fill="rgb(230,136,20)" fg:x="757" fg:w="1"/><text x="60.3294%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="60.0794%" y="277" width="0.0794%" height="15" fill="rgb(215,210,22)" fg:x="757" fg:w="1"/><text x="60.3294%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="60.0794%" y="261" width="0.0794%" height="15" fill="rgb(218,43,5)" fg:x="757" fg:w="1"/><text x="60.3294%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="60.0794%" y="245" width="0.0794%" height="15" fill="rgb(216,11,5)" fg:x="757" fg:w="1"/><text x="60.3294%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="60.0794%" y="341" width="0.2381%" height="15" fill="rgb(209,82,29)" fg:x="757" fg:w="3"/><text x="60.3294%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="60.0794%" y="325" width="0.2381%" height="15" fill="rgb(244,115,12)" fg:x="757" fg:w="3"/><text x="60.3294%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="60.1587%" y="309" width="0.1587%" height="15" fill="rgb(222,82,18)" fg:x="758" fg:w="2"/><text x="60.4087%" y="319.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="60.2381%" y="293" width="0.0794%" height="15" fill="rgb(249,227,8)" fg:x="759" fg:w="1"/><text x="60.4881%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.2381%" y="277" width="0.0794%" height="15" fill="rgb(253,141,45)" fg:x="759" fg:w="1"/><text x="60.4881%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.2381%" y="261" width="0.0794%" height="15" fill="rgb(234,184,4)" fg:x="759" fg:w="1"/><text x="60.4881%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.2381%" y="245" width="0.0794%" height="15" fill="rgb(218,194,23)" fg:x="759" fg:w="1"/><text x="60.4881%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.3175%" y="309" width="0.0794%" height="15" fill="rgb(235,66,41)" fg:x="760" fg:w="1"/><text x="60.5675%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="60.3175%" y="293" width="0.0794%" height="15" fill="rgb(245,217,1)" fg:x="760" fg:w="1"/><text x="60.5675%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="60.3175%" y="277" width="0.0794%" height="15" fill="rgb(229,91,1)" fg:x="760" fg:w="1"/><text x="60.5675%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3175%" y="261" width="0.0794%" height="15" fill="rgb(207,101,30)" fg:x="760" fg:w="1"/><text x="60.5675%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="60.3175%" y="341" width="0.1587%" height="15" fill="rgb(223,82,49)" fg:x="760" fg:w="2"/><text x="60.5675%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="60.3175%" y="325" width="0.1587%" height="15" fill="rgb(218,167,17)" fg:x="760" fg:w="2"/><text x="60.5675%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="60.3968%" y="309" width="0.0794%" height="15" fill="rgb(208,103,14)" fg:x="761" fg:w="1"/><text x="60.6468%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="60.3968%" y="293" width="0.0794%" height="15" fill="rgb(238,20,8)" fg:x="761" fg:w="1"/><text x="60.6468%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.3968%" y="277" width="0.0794%" height="15" fill="rgb(218,80,54)" fg:x="761" fg:w="1"/><text x="60.6468%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="60.8730%" y="261" width="0.0794%" height="15" fill="rgb(240,144,17)" fg:x="767" fg:w="1"/><text x="61.1230%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.8730%" y="245" width="0.0794%" height="15" fill="rgb(245,27,50)" fg:x="767" fg:w="1"/><text x="61.1230%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.9524%" y="245" width="0.0794%" height="15" fill="rgb(251,51,7)" fg:x="768" fg:w="1"/><text x="61.2024%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.56%)</title><rect x="60.5556%" y="277" width="0.5556%" height="15" fill="rgb(245,217,29)" fg:x="763" fg:w="7"/><text x="60.8056%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="60.9524%" y="261" width="0.1587%" height="15" fill="rgb(221,176,29)" fg:x="768" fg:w="2"/><text x="61.2024%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.0317%" y="245" width="0.0794%" height="15" fill="rgb(212,180,24)" fg:x="769" fg:w="1"/><text x="61.2817%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.0317%" y="229" width="0.0794%" height="15" fill="rgb(254,24,2)" fg:x="769" fg:w="1"/><text x="61.2817%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.0317%" y="213" width="0.0794%" height="15" fill="rgb(230,100,2)" fg:x="769" fg:w="1"/><text x="61.2817%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (588 samples, 46.67%)</title><rect x="14.5238%" y="453" width="46.6667%" height="15" fill="rgb(219,142,25)" fg:x="183" fg:w="588"/><text x="14.7738%" y="463.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replie..</text></g><g><title>plugins_core::looking::model::qualify_name (568 samples, 45.08%)</title><rect x="16.1111%" y="437" width="45.0794%" height="15" fill="rgb(240,73,43)" fg:x="203" fg:w="568"/><text x="16.3611%" y="447.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (568 samples, 45.08%)</title><rect x="16.1111%" y="421" width="45.0794%" height="15" fill="rgb(214,114,15)" fg:x="203" fg:w="568"/><text x="16.3611%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (568 samples, 45.08%)</title><rect x="16.1111%" y="405" width="45.0794%" height="15" fill="rgb(207,130,4)" fg:x="203" fg:w="568"/><text x="16.3611%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (567 samples, 45.00%)</title><rect x="16.1905%" y="389" width="45.0000%" height="15" fill="rgb(221,25,40)" fg:x="204" fg:w="567"/><text x="16.4405%" y="399.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (60 samples, 4.76%)</title><rect x="56.4286%" y="373" width="4.7619%" height="15" fill="rgb(241,184,7)" fg:x="711" fg:w="60"/><text x="56.6786%" y="383.50">indefi..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (60 samples, 4.76%)</title><rect x="56.4286%" y="357" width="4.7619%" height="15" fill="rgb(235,159,4)" fg:x="711" fg:w="60"/><text x="56.6786%" y="367.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (9 samples, 0.71%)</title><rect x="60.4762%" y="341" width="0.7143%" height="15" fill="rgb(214,87,48)" fg:x="762" fg:w="9"/><text x="60.7262%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="60.5556%" y="325" width="0.6349%" height="15" fill="rgb(246,198,24)" fg:x="763" fg:w="8"/><text x="60.8056%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="60.5556%" y="309" width="0.6349%" height="15" fill="rgb(209,66,40)" fg:x="763" fg:w="8"/><text x="60.8056%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="60.5556%" y="293" width="0.6349%" height="15" fill="rgb(233,147,39)" fg:x="763" fg:w="8"/><text x="60.8056%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="61.1111%" y="277" width="0.0794%" height="15" fill="rgb(231,145,52)" fg:x="770" fg:w="1"/><text x="61.3611%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.1111%" y="261" width="0.0794%" height="15" fill="rgb(206,20,26)" fg:x="770" fg:w="1"/><text x="61.3611%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1111%" y="245" width="0.0794%" height="15" fill="rgb(238,220,4)" fg:x="770" fg:w="1"/><text x="61.3611%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1111%" y="229" width="0.0794%" height="15" fill="rgb(252,195,42)" fg:x="770" fg:w="1"/><text x="61.3611%" y="239.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="61.1905%" y="389" width="0.0794%" height="15" fill="rgb(209,10,6)" fg:x="771" fg:w="1"/><text x="61.4405%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="61.1905%" y="373" width="0.0794%" height="15" fill="rgb(229,3,52)" fg:x="771" fg:w="1"/><text x="61.4405%" y="383.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="61.1905%" y="357" width="0.0794%" height="15" fill="rgb(253,49,37)" fg:x="771" fg:w="1"/><text x="61.4405%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="61.1905%" y="341" width="0.0794%" height="15" fill="rgb(240,103,49)" fg:x="771" fg:w="1"/><text x="61.4405%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="61.1905%" y="325" width="0.0794%" height="15" fill="rgb(250,182,30)" fg:x="771" fg:w="1"/><text x="61.4405%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="61.1905%" y="309" width="0.0794%" height="15" fill="rgb(248,8,30)" fg:x="771" fg:w="1"/><text x="61.4405%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="61.1905%" y="293" width="0.0794%" height="15" fill="rgb(237,120,30)" fg:x="771" fg:w="1"/><text x="61.4405%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.2698%" y="293" width="0.0794%" height="15" fill="rgb(221,146,34)" fg:x="772" fg:w="1"/><text x="61.5198%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="61.2698%" y="277" width="0.0794%" height="15" fill="rgb(242,55,13)" fg:x="772" fg:w="1"/><text x="61.5198%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="61.2698%" y="261" width="0.0794%" height="15" fill="rgb(242,112,31)" fg:x="772" fg:w="1"/><text x="61.5198%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="61.2698%" y="245" width="0.0794%" height="15" fill="rgb(249,192,27)" fg:x="772" fg:w="1"/><text x="61.5198%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="61.2698%" y="229" width="0.0794%" height="15" fill="rgb(208,204,44)" fg:x="772" fg:w="1"/><text x="61.5198%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="61.2698%" y="213" width="0.0794%" height="15" fill="rgb(208,93,54)" fg:x="772" fg:w="1"/><text x="61.5198%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="61.2698%" y="197" width="0.0794%" height="15" fill="rgb(242,1,31)" fg:x="772" fg:w="1"/><text x="61.5198%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="61.2698%" y="181" width="0.0794%" height="15" fill="rgb(241,83,25)" fg:x="772" fg:w="1"/><text x="61.5198%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="61.2698%" y="165" width="0.0794%" height="15" fill="rgb(205,169,50)" fg:x="772" fg:w="1"/><text x="61.5198%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="61.2698%" y="149" width="0.0794%" height="15" fill="rgb(239,186,37)" fg:x="772" fg:w="1"/><text x="61.5198%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.2698%" y="133" width="0.0794%" height="15" fill="rgb(205,221,10)" fg:x="772" fg:w="1"/><text x="61.5198%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.2698%" y="117" width="0.0794%" height="15" fill="rgb(218,196,15)" fg:x="772" fg:w="1"/><text x="61.5198%" y="127.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (3 samples, 0.24%)</title><rect x="61.1905%" y="453" width="0.2381%" height="15" fill="rgb(218,196,35)" fg:x="771" fg:w="3"/><text x="61.4405%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="61.1905%" y="437" width="0.2381%" height="15" fill="rgb(233,63,24)" fg:x="771" fg:w="3"/><text x="61.4405%" y="447.50"></text></g><g><title>kernel::model::entry::Entry::new (3 samples, 0.24%)</title><rect x="61.1905%" y="421" width="0.2381%" height="15" fill="rgb(225,8,4)" fg:x="771" fg:w="3"/><text x="61.4405%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.24%)</title><rect x="61.1905%" y="405" width="0.2381%" height="15" fill="rgb(234,105,35)" fg:x="771" fg:w="3"/><text x="61.4405%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="61.2698%" y="389" width="0.1587%" height="15" fill="rgb(236,21,32)" fg:x="772" fg:w="2"/><text x="61.5198%" y="399.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="61.2698%" y="373" width="0.1587%" height="15" fill="rgb(228,109,6)" fg:x="772" fg:w="2"/><text x="61.5198%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="61.2698%" y="357" width="0.1587%" height="15" fill="rgb(229,215,31)" fg:x="772" fg:w="2"/><text x="61.5198%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="61.2698%" y="341" width="0.1587%" height="15" fill="rgb(221,52,54)" fg:x="772" fg:w="2"/><text x="61.5198%" y="351.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="61.2698%" y="325" width="0.1587%" height="15" fill="rgb(252,129,43)" fg:x="772" fg:w="2"/><text x="61.5198%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="61.2698%" y="309" width="0.1587%" height="15" fill="rgb(248,183,27)" fg:x="772" fg:w="2"/><text x="61.5198%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="61.3492%" y="293" width="0.0794%" height="15" fill="rgb(250,0,22)" fg:x="773" fg:w="1"/><text x="61.5992%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::OpenedScope&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="61.4286%" y="453" width="0.0794%" height="15" fill="rgb(213,166,10)" fg:x="774" fg:w="1"/><text x="61.6786%" y="463.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5079%" y="421" width="0.0794%" height="15" fill="rgb(207,163,36)" fg:x="775" fg:w="1"/><text x="61.7579%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5079%" y="405" width="0.0794%" height="15" fill="rgb(208,122,22)" fg:x="775" fg:w="1"/><text x="61.7579%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="61.5079%" y="389" width="0.0794%" height="15" fill="rgb(207,104,49)" fg:x="775" fg:w="1"/><text x="61.7579%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="61.5079%" y="373" width="0.0794%" height="15" fill="rgb(248,211,50)" fg:x="775" fg:w="1"/><text x="61.7579%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (598 samples, 47.46%)</title><rect x="14.2063%" y="645" width="47.4603%" height="15" fill="rgb(217,13,45)" fg:x="179" fg:w="598"/><text x="14.4563%" y="655.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (598 samples, 47.46%)</title><rect x="14.2063%" y="629" width="47.4603%" height="15" fill="rgb(211,216,49)" fg:x="179" fg:w="598"/><text x="14.4563%" y="639.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (598 samples, 47.46%)</title><rect x="14.2063%" y="613" width="47.4603%" height="15" fill="rgb(221,58,53)" fg:x="179" fg:w="598"/><text x="14.4563%" y="623.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (598 samples, 47.46%)</title><rect x="14.2063%" y="597" width="47.4603%" height="15" fill="rgb(220,112,41)" fg:x="179" fg:w="598"/><text x="14.4563%" y="607.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (598 samples, 47.46%)</title><rect x="14.2063%" y="581" width="47.4603%" height="15" fill="rgb(236,38,28)" fg:x="179" fg:w="598"/><text x="14.4563%" y="591.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (598 samples, 47.46%)</title><rect x="14.2063%" y="565" width="47.4603%" height="15" fill="rgb(227,195,22)" fg:x="179" fg:w="598"/><text x="14.4563%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (598 samples, 47.46%)</title><rect x="14.2063%" y="549" width="47.4603%" height="15" fill="rgb(214,55,33)" fg:x="179" fg:w="598"/><text x="14.4563%" y="559.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (598 samples, 47.46%)</title><rect x="14.2063%" y="533" width="47.4603%" height="15" fill="rgb(248,80,13)" fg:x="179" fg:w="598"/><text x="14.4563%" y="543.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (598 samples, 47.46%)</title><rect x="14.2063%" y="517" width="47.4603%" height="15" fill="rgb(238,52,6)" fg:x="179" fg:w="598"/><text x="14.4563%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (598 samples, 47.46%)</title><rect x="14.2063%" y="501" width="47.4603%" height="15" fill="rgb(224,198,47)" fg:x="179" fg:w="598"/><text x="14.4563%" y="511.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (598 samples, 47.46%)</title><rect x="14.2063%" y="485" width="47.4603%" height="15" fill="rgb(233,171,20)" fg:x="179" fg:w="598"/><text x="14.4563%" y="495.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perfo..</text></g><g><title>plugins_core::looking::model::new_area_observation (597 samples, 47.38%)</title><rect x="14.2857%" y="469" width="47.3810%" height="15" fill="rgb(241,30,25)" fg:x="180" fg:w="597"/><text x="14.5357%" y="479.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="61.5079%" y="453" width="0.1587%" height="15" fill="rgb(207,171,38)" fg:x="775" fg:w="2"/><text x="61.7579%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="61.5079%" y="437" width="0.1587%" height="15" fill="rgb(234,70,1)" fg:x="775" fg:w="2"/><text x="61.7579%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="61.5873%" y="421" width="0.0794%" height="15" fill="rgb(232,178,18)" fg:x="776" fg:w="1"/><text x="61.8373%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="61.5873%" y="405" width="0.0794%" height="15" fill="rgb(241,78,40)" fg:x="776" fg:w="1"/><text x="61.8373%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.5873%" y="389" width="0.0794%" height="15" fill="rgb(222,35,25)" fg:x="776" fg:w="1"/><text x="61.8373%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.6667%" y="613" width="0.0794%" height="15" fill="rgb(207,92,16)" fg:x="777" fg:w="1"/><text x="61.9167%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.9841%" y="549" width="0.0794%" height="15" fill="rgb(216,59,51)" fg:x="781" fg:w="1"/><text x="62.2341%" y="559.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.9841%" y="533" width="0.0794%" height="15" fill="rgb(213,80,28)" fg:x="781" fg:w="1"/><text x="62.2341%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.9841%" y="517" width="0.0794%" height="15" fill="rgb(220,93,7)" fg:x="781" fg:w="1"/><text x="62.2341%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="61.9841%" y="501" width="0.0794%" height="15" fill="rgb(225,24,44)" fg:x="781" fg:w="1"/><text x="62.2341%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="61.9048%" y="565" width="0.2381%" height="15" fill="rgb(243,74,40)" fg:x="780" fg:w="3"/><text x="62.1548%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="62.0635%" y="549" width="0.0794%" height="15" fill="rgb(228,39,7)" fg:x="782" fg:w="1"/><text x="62.3135%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.0635%" y="533" width="0.0794%" height="15" fill="rgb(227,79,8)" fg:x="782" fg:w="1"/><text x="62.3135%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1429%" y="565" width="0.0794%" height="15" fill="rgb(236,58,11)" fg:x="783" fg:w="1"/><text x="62.3929%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (7 samples, 0.56%)</title><rect x="61.7460%" y="613" width="0.5556%" height="15" fill="rgb(249,63,35)" fg:x="778" fg:w="7"/><text x="61.9960%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="61.7460%" y="597" width="0.5556%" height="15" fill="rgb(252,114,16)" fg:x="778" fg:w="7"/><text x="61.9960%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="61.8254%" y="581" width="0.4762%" height="15" fill="rgb(254,151,24)" fg:x="779" fg:w="6"/><text x="62.0754%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="62.2222%" y="565" width="0.0794%" height="15" fill="rgb(253,54,39)" fg:x="784" fg:w="1"/><text x="62.4722%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="62.3016%" y="581" width="0.0794%" height="15" fill="rgb(243,25,45)" fg:x="785" fg:w="1"/><text x="62.5516%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3016%" y="565" width="0.0794%" height="15" fill="rgb(234,134,9)" fg:x="785" fg:w="1"/><text x="62.5516%" y="575.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="62.3810%" y="581" width="0.0794%" height="15" fill="rgb(227,166,31)" fg:x="786" fg:w="1"/><text x="62.6310%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="62.3810%" y="565" width="0.0794%" height="15" fill="rgb(245,143,41)" fg:x="786" fg:w="1"/><text x="62.6310%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.3810%" y="549" width="0.0794%" height="15" fill="rgb(238,181,32)" fg:x="786" fg:w="1"/><text x="62.6310%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="62.3810%" y="533" width="0.0794%" height="15" fill="rgb(224,113,18)" fg:x="786" fg:w="1"/><text x="62.6310%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="62.5397%" y="405" width="0.0794%" height="15" fill="rgb(240,229,28)" fg:x="788" fg:w="1"/><text x="62.7897%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="62.5397%" y="389" width="0.0794%" height="15" fill="rgb(250,185,3)" fg:x="788" fg:w="1"/><text x="62.7897%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="62.5397%" y="373" width="0.0794%" height="15" fill="rgb(212,59,25)" fg:x="788" fg:w="1"/><text x="62.7897%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="62.5397%" y="357" width="0.0794%" height="15" fill="rgb(221,87,20)" fg:x="788" fg:w="1"/><text x="62.7897%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="62.5397%" y="341" width="0.0794%" height="15" fill="rgb(213,74,28)" fg:x="788" fg:w="1"/><text x="62.7897%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="62.5397%" y="325" width="0.0794%" height="15" fill="rgb(224,132,34)" fg:x="788" fg:w="1"/><text x="62.7897%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="62.6190%" y="389" width="0.0794%" height="15" fill="rgb(222,101,24)" fg:x="789" fg:w="1"/><text x="62.8690%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.6190%" y="373" width="0.0794%" height="15" fill="rgb(254,142,4)" fg:x="789" fg:w="1"/><text x="62.8690%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.6190%" y="357" width="0.0794%" height="15" fill="rgb(230,229,49)" fg:x="789" fg:w="1"/><text x="62.8690%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="62.6190%" y="341" width="0.0794%" height="15" fill="rgb(238,70,47)" fg:x="789" fg:w="1"/><text x="62.8690%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="62.6190%" y="325" width="0.0794%" height="15" fill="rgb(231,160,17)" fg:x="789" fg:w="1"/><text x="62.8690%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="62.6190%" y="309" width="0.0794%" height="15" fill="rgb(218,68,53)" fg:x="789" fg:w="1"/><text x="62.8690%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.6190%" y="293" width="0.0794%" height="15" fill="rgb(236,111,10)" fg:x="789" fg:w="1"/><text x="62.8690%" y="303.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="62.5397%" y="453" width="0.2381%" height="15" fill="rgb(224,34,41)" fg:x="788" fg:w="3"/><text x="62.7897%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="62.5397%" y="437" width="0.2381%" height="15" fill="rgb(241,118,19)" fg:x="788" fg:w="3"/><text x="62.7897%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="62.5397%" y="421" width="0.2381%" height="15" fill="rgb(238,129,25)" fg:x="788" fg:w="3"/><text x="62.7897%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="62.6190%" y="405" width="0.1587%" height="15" fill="rgb(238,22,31)" fg:x="789" fg:w="2"/><text x="62.8690%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="62.6984%" y="389" width="0.0794%" height="15" fill="rgb(222,174,48)" fg:x="790" fg:w="1"/><text x="62.9484%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="62.6984%" y="373" width="0.0794%" height="15" fill="rgb(206,152,40)" fg:x="790" fg:w="1"/><text x="62.9484%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.6984%" y="357" width="0.0794%" height="15" fill="rgb(218,99,54)" fg:x="790" fg:w="1"/><text x="62.9484%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="62.5397%" y="517" width="0.3175%" height="15" fill="rgb(220,174,26)" fg:x="788" fg:w="4"/><text x="62.7897%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="62.5397%" y="501" width="0.3175%" height="15" fill="rgb(245,116,9)" fg:x="788" fg:w="4"/><text x="62.7897%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="62.5397%" y="485" width="0.3175%" height="15" fill="rgb(209,72,35)" fg:x="788" fg:w="4"/><text x="62.7897%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="62.5397%" y="469" width="0.3175%" height="15" fill="rgb(226,126,21)" fg:x="788" fg:w="4"/><text x="62.7897%" y="479.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="62.7778%" y="453" width="0.0794%" height="15" fill="rgb(227,192,1)" fg:x="791" fg:w="1"/><text x="63.0278%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="62.7778%" y="437" width="0.0794%" height="15" fill="rgb(237,180,29)" fg:x="791" fg:w="1"/><text x="63.0278%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="62.8571%" y="517" width="0.0794%" height="15" fill="rgb(230,197,35)" fg:x="792" fg:w="1"/><text x="63.1071%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="62.8571%" y="501" width="0.0794%" height="15" fill="rgb(246,193,31)" fg:x="792" fg:w="1"/><text x="63.1071%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.8571%" y="485" width="0.0794%" height="15" fill="rgb(241,36,4)" fg:x="792" fg:w="1"/><text x="63.1071%" y="495.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.9365%" y="485" width="0.1587%" height="15" fill="rgb(241,130,17)" fg:x="793" fg:w="2"/><text x="63.1865%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="62.9365%" y="469" width="0.1587%" height="15" fill="rgb(206,137,32)" fg:x="793" fg:w="2"/><text x="63.1865%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="62.9365%" y="453" width="0.1587%" height="15" fill="rgb(237,228,51)" fg:x="793" fg:w="2"/><text x="63.1865%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.0159%" y="437" width="0.0794%" height="15" fill="rgb(243,6,42)" fg:x="794" fg:w="1"/><text x="63.2659%" y="447.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (8 samples, 0.63%)</title><rect x="62.5397%" y="533" width="0.6349%" height="15" fill="rgb(251,74,28)" fg:x="788" fg:w="8"/><text x="62.7897%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="62.9365%" y="517" width="0.2381%" height="15" fill="rgb(218,20,49)" fg:x="793" fg:w="3"/><text x="63.1865%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="62.9365%" y="501" width="0.2381%" height="15" fill="rgb(238,28,14)" fg:x="793" fg:w="3"/><text x="63.1865%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="63.0952%" y="485" width="0.0794%" height="15" fill="rgb(229,40,46)" fg:x="795" fg:w="1"/><text x="63.3452%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.0952%" y="469" width="0.0794%" height="15" fill="rgb(244,195,20)" fg:x="795" fg:w="1"/><text x="63.3452%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="63.1746%" y="517" width="0.0794%" height="15" fill="rgb(253,56,35)" fg:x="796" fg:w="1"/><text x="63.4246%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.1746%" y="501" width="0.0794%" height="15" fill="rgb(210,149,44)" fg:x="796" fg:w="1"/><text x="63.4246%" y="511.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="63.3333%" y="485" width="0.3968%" height="15" fill="rgb(240,135,12)" fg:x="798" fg:w="5"/><text x="63.5833%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="63.3333%" y="469" width="0.3968%" height="15" fill="rgb(251,24,50)" fg:x="798" fg:w="5"/><text x="63.5833%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="63.4127%" y="453" width="0.3175%" height="15" fill="rgb(243,200,47)" fg:x="799" fg:w="4"/><text x="63.6627%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="63.4127%" y="437" width="0.3175%" height="15" fill="rgb(224,166,26)" fg:x="799" fg:w="4"/><text x="63.6627%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="63.4921%" y="421" width="0.2381%" height="15" fill="rgb(233,0,47)" fg:x="800" fg:w="3"/><text x="63.7421%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="63.4921%" y="405" width="0.2381%" height="15" fill="rgb(253,80,5)" fg:x="800" fg:w="3"/><text x="63.7421%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="63.4921%" y="389" width="0.2381%" height="15" fill="rgb(214,133,25)" fg:x="800" fg:w="3"/><text x="63.7421%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="63.4921%" y="373" width="0.2381%" height="15" fill="rgb(209,27,14)" fg:x="800" fg:w="3"/><text x="63.7421%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="63.4921%" y="357" width="0.2381%" height="15" fill="rgb(219,102,51)" fg:x="800" fg:w="3"/><text x="63.7421%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="63.4921%" y="341" width="0.2381%" height="15" fill="rgb(237,18,16)" fg:x="800" fg:w="3"/><text x="63.7421%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="63.4921%" y="325" width="0.2381%" height="15" fill="rgb(241,85,17)" fg:x="800" fg:w="3"/><text x="63.7421%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="63.4921%" y="309" width="0.2381%" height="15" fill="rgb(236,90,42)" fg:x="800" fg:w="3"/><text x="63.7421%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="63.4921%" y="293" width="0.2381%" height="15" fill="rgb(249,57,21)" fg:x="800" fg:w="3"/><text x="63.7421%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="63.4921%" y="277" width="0.2381%" height="15" fill="rgb(243,12,36)" fg:x="800" fg:w="3"/><text x="63.7421%" y="287.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="63.4921%" y="261" width="0.2381%" height="15" fill="rgb(253,128,47)" fg:x="800" fg:w="3"/><text x="63.7421%" y="271.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="63.4921%" y="245" width="0.2381%" height="15" fill="rgb(207,33,20)" fg:x="800" fg:w="3"/><text x="63.7421%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="63.7302%" y="357" width="0.0794%" height="15" fill="rgb(233,215,35)" fg:x="803" fg:w="1"/><text x="63.9802%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.7302%" y="341" width="0.0794%" height="15" fill="rgb(249,188,52)" fg:x="803" fg:w="1"/><text x="63.9802%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.7302%" y="325" width="0.0794%" height="15" fill="rgb(225,12,32)" fg:x="803" fg:w="1"/><text x="63.9802%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7302%" y="309" width="0.0794%" height="15" fill="rgb(247,98,14)" fg:x="803" fg:w="1"/><text x="63.9802%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7302%" y="293" width="0.0794%" height="15" fill="rgb(247,219,48)" fg:x="803" fg:w="1"/><text x="63.9802%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7302%" y="277" width="0.0794%" height="15" fill="rgb(253,60,48)" fg:x="803" fg:w="1"/><text x="63.9802%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7302%" y="261" width="0.0794%" height="15" fill="rgb(245,15,52)" fg:x="803" fg:w="1"/><text x="63.9802%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.7302%" y="245" width="0.0794%" height="15" fill="rgb(220,133,28)" fg:x="803" fg:w="1"/><text x="63.9802%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.7302%" y="229" width="0.0794%" height="15" fill="rgb(217,180,4)" fg:x="803" fg:w="1"/><text x="63.9802%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.7302%" y="213" width="0.0794%" height="15" fill="rgb(251,24,1)" fg:x="803" fg:w="1"/><text x="63.9802%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.7302%" y="197" width="0.0794%" height="15" fill="rgb(212,185,49)" fg:x="803" fg:w="1"/><text x="63.9802%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.7302%" y="181" width="0.0794%" height="15" fill="rgb(215,175,22)" fg:x="803" fg:w="1"/><text x="63.9802%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.7302%" y="165" width="0.0794%" height="15" fill="rgb(250,205,14)" fg:x="803" fg:w="1"/><text x="63.9802%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.7302%" y="149" width="0.0794%" height="15" fill="rgb(225,211,22)" fg:x="803" fg:w="1"/><text x="63.9802%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.7302%" y="133" width="0.0794%" height="15" fill="rgb(251,179,42)" fg:x="803" fg:w="1"/><text x="63.9802%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.7302%" y="117" width="0.0794%" height="15" fill="rgb(208,216,51)" fg:x="803" fg:w="1"/><text x="63.9802%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.7302%" y="101" width="0.0794%" height="15" fill="rgb(235,36,11)" fg:x="803" fg:w="1"/><text x="63.9802%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.7302%" y="85" width="0.0794%" height="15" fill="rgb(213,189,28)" fg:x="803" fg:w="1"/><text x="63.9802%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.7302%" y="69" width="0.0794%" height="15" fill="rgb(227,203,42)" fg:x="803" fg:w="1"/><text x="63.9802%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.8095%" y="261" width="0.0794%" height="15" fill="rgb(244,72,36)" fg:x="804" fg:w="1"/><text x="64.0595%" y="271.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (3 samples, 0.24%)</title><rect x="63.7302%" y="389" width="0.2381%" height="15" fill="rgb(213,53,17)" fg:x="803" fg:w="3"/><text x="63.9802%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="63.7302%" y="373" width="0.2381%" height="15" fill="rgb(207,167,3)" fg:x="803" fg:w="3"/><text x="63.9802%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="63.8095%" y="357" width="0.1587%" height="15" fill="rgb(216,98,30)" fg:x="804" fg:w="2"/><text x="64.0595%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="63.8095%" y="341" width="0.1587%" height="15" fill="rgb(236,123,15)" fg:x="804" fg:w="2"/><text x="64.0595%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="63.8095%" y="325" width="0.1587%" height="15" fill="rgb(248,81,50)" fg:x="804" fg:w="2"/><text x="64.0595%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.8095%" y="309" width="0.1587%" height="15" fill="rgb(214,120,4)" fg:x="804" fg:w="2"/><text x="64.0595%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.8095%" y="293" width="0.1587%" height="15" fill="rgb(208,179,34)" fg:x="804" fg:w="2"/><text x="64.0595%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.8095%" y="277" width="0.1587%" height="15" fill="rgb(227,140,7)" fg:x="804" fg:w="2"/><text x="64.0595%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.8889%" y="261" width="0.0794%" height="15" fill="rgb(214,22,6)" fg:x="805" fg:w="1"/><text x="64.1389%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.8889%" y="245" width="0.0794%" height="15" fill="rgb(207,137,27)" fg:x="805" fg:w="1"/><text x="64.1389%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.8889%" y="229" width="0.0794%" height="15" fill="rgb(210,8,46)" fg:x="805" fg:w="1"/><text x="64.1389%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.8889%" y="213" width="0.0794%" height="15" fill="rgb(240,16,54)" fg:x="805" fg:w="1"/><text x="64.1389%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.8889%" y="197" width="0.0794%" height="15" fill="rgb(211,209,29)" fg:x="805" fg:w="1"/><text x="64.1389%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.8889%" y="181" width="0.0794%" height="15" fill="rgb(226,228,24)" fg:x="805" fg:w="1"/><text x="64.1389%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.8889%" y="165" width="0.0794%" height="15" fill="rgb(222,84,9)" fg:x="805" fg:w="1"/><text x="64.1389%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.8889%" y="149" width="0.0794%" height="15" fill="rgb(234,203,30)" fg:x="805" fg:w="1"/><text x="64.1389%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.8889%" y="133" width="0.0794%" height="15" fill="rgb(238,109,14)" fg:x="805" fg:w="1"/><text x="64.1389%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.8889%" y="117" width="0.0794%" height="15" fill="rgb(233,206,34)" fg:x="805" fg:w="1"/><text x="64.1389%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.8889%" y="101" width="0.0794%" height="15" fill="rgb(220,167,47)" fg:x="805" fg:w="1"/><text x="64.1389%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.8889%" y="85" width="0.0794%" height="15" fill="rgb(238,105,10)" fg:x="805" fg:w="1"/><text x="64.1389%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.9683%" y="373" width="0.0794%" height="15" fill="rgb(213,227,17)" fg:x="806" fg:w="1"/><text x="64.2183%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0476%" y="341" width="0.0794%" height="15" fill="rgb(217,132,38)" fg:x="807" fg:w="1"/><text x="64.2976%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0476%" y="325" width="0.0794%" height="15" fill="rgb(242,146,4)" fg:x="807" fg:w="1"/><text x="64.2976%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0476%" y="309" width="0.0794%" height="15" fill="rgb(212,61,9)" fg:x="807" fg:w="1"/><text x="64.2976%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0476%" y="293" width="0.0794%" height="15" fill="rgb(247,126,22)" fg:x="807" fg:w="1"/><text x="64.2976%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="64.0476%" y="277" width="0.0794%" height="15" fill="rgb(220,196,2)" fg:x="807" fg:w="1"/><text x="64.2976%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0476%" y="261" width="0.0794%" height="15" fill="rgb(208,46,4)" fg:x="807" fg:w="1"/><text x="64.2976%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="63.9683%" y="389" width="0.2381%" height="15" fill="rgb(252,104,46)" fg:x="806" fg:w="3"/><text x="64.2183%" y="399.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="64.0476%" y="373" width="0.1587%" height="15" fill="rgb(237,152,48)" fg:x="807" fg:w="2"/><text x="64.2976%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="64.0476%" y="357" width="0.1587%" height="15" fill="rgb(221,59,37)" fg:x="807" fg:w="2"/><text x="64.2976%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.1270%" y="341" width="0.0794%" height="15" fill="rgb(209,202,51)" fg:x="808" fg:w="1"/><text x="64.3770%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1270%" y="325" width="0.0794%" height="15" fill="rgb(228,81,30)" fg:x="808" fg:w="1"/><text x="64.3770%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="64.1270%" y="309" width="0.0794%" height="15" fill="rgb(227,42,39)" fg:x="808" fg:w="1"/><text x="64.3770%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1270%" y="293" width="0.0794%" height="15" fill="rgb(221,26,2)" fg:x="808" fg:w="1"/><text x="64.3770%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.1270%" y="277" width="0.0794%" height="15" fill="rgb(254,61,31)" fg:x="808" fg:w="1"/><text x="64.3770%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.1270%" y="261" width="0.0794%" height="15" fill="rgb(222,173,38)" fg:x="808" fg:w="1"/><text x="64.3770%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.2063%" y="325" width="0.0794%" height="15" fill="rgb(218,50,12)" fg:x="809" fg:w="1"/><text x="64.4563%" y="335.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="64.2063%" y="309" width="0.0794%" height="15" fill="rgb(223,88,40)" fg:x="809" fg:w="1"/><text x="64.4563%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.2857%" y="293" width="0.0794%" height="15" fill="rgb(237,54,19)" fg:x="810" fg:w="1"/><text x="64.5357%" y="303.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.3651%" y="229" width="0.0794%" height="15" fill="rgb(251,129,25)" fg:x="811" fg:w="1"/><text x="64.6151%" y="239.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="64.3651%" y="213" width="0.0794%" height="15" fill="rgb(238,97,19)" fg:x="811" fg:w="1"/><text x="64.6151%" y="223.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="64.2063%" y="373" width="0.4762%" height="15" fill="rgb(240,169,18)" fg:x="809" fg:w="6"/><text x="64.4563%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.48%)</title><rect x="64.2063%" y="357" width="0.4762%" height="15" fill="rgb(230,187,49)" fg:x="809" fg:w="6"/><text x="64.4563%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="64.2063%" y="341" width="0.4762%" height="15" fill="rgb(209,44,26)" fg:x="809" fg:w="6"/><text x="64.4563%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (5 samples, 0.40%)</title><rect x="64.2857%" y="325" width="0.3968%" height="15" fill="rgb(244,0,6)" fg:x="810" fg:w="5"/><text x="64.5357%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="64.2857%" y="309" width="0.3968%" height="15" fill="rgb(248,18,21)" fg:x="810" fg:w="5"/><text x="64.5357%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.3651%" y="293" width="0.3175%" height="15" fill="rgb(245,180,19)" fg:x="811" fg:w="4"/><text x="64.6151%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.3651%" y="277" width="0.3175%" height="15" fill="rgb(252,118,36)" fg:x="811" fg:w="4"/><text x="64.6151%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.3651%" y="261" width="0.3175%" height="15" fill="rgb(210,224,19)" fg:x="811" fg:w="4"/><text x="64.6151%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.3651%" y="245" width="0.3175%" height="15" fill="rgb(218,30,24)" fg:x="811" fg:w="4"/><text x="64.6151%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (3 samples, 0.24%)</title><rect x="64.4444%" y="229" width="0.2381%" height="15" fill="rgb(219,75,50)" fg:x="812" fg:w="3"/><text x="64.6944%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.4444%" y="213" width="0.2381%" height="15" fill="rgb(234,72,50)" fg:x="812" fg:w="3"/><text x="64.6944%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.6032%" y="197" width="0.0794%" height="15" fill="rgb(219,100,48)" fg:x="814" fg:w="1"/><text x="64.8532%" y="207.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="64.6032%" y="181" width="0.0794%" height="15" fill="rgb(253,5,41)" fg:x="814" fg:w="1"/><text x="64.8532%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.7619%" y="309" width="0.0794%" height="15" fill="rgb(247,181,11)" fg:x="816" fg:w="1"/><text x="65.0119%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="64.7619%" y="293" width="0.0794%" height="15" fill="rgb(222,223,25)" fg:x="816" fg:w="1"/><text x="65.0119%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.7619%" y="277" width="0.0794%" height="15" fill="rgb(214,198,28)" fg:x="816" fg:w="1"/><text x="65.0119%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.8413%" y="229" width="0.0794%" height="15" fill="rgb(230,46,43)" fg:x="817" fg:w="1"/><text x="65.0913%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8413%" y="213" width="0.0794%" height="15" fill="rgb(233,65,53)" fg:x="817" fg:w="1"/><text x="65.0913%" y="223.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (16 samples, 1.27%)</title><rect x="63.7302%" y="485" width="1.2698%" height="15" fill="rgb(221,121,27)" fg:x="803" fg:w="16"/><text x="63.9802%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (16 samples, 1.27%)</title><rect x="63.7302%" y="469" width="1.2698%" height="15" fill="rgb(247,70,47)" fg:x="803" fg:w="16"/><text x="63.9802%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 1.27%)</title><rect x="63.7302%" y="453" width="1.2698%" height="15" fill="rgb(228,85,35)" fg:x="803" fg:w="16"/><text x="63.9802%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (16 samples, 1.27%)</title><rect x="63.7302%" y="437" width="1.2698%" height="15" fill="rgb(209,50,18)" fg:x="803" fg:w="16"/><text x="63.9802%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (16 samples, 1.27%)</title><rect x="63.7302%" y="421" width="1.2698%" height="15" fill="rgb(250,19,35)" fg:x="803" fg:w="16"/><text x="63.9802%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.27%)</title><rect x="63.7302%" y="405" width="1.2698%" height="15" fill="rgb(253,107,29)" fg:x="803" fg:w="16"/><text x="63.9802%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_str (10 samples, 0.79%)</title><rect x="64.2063%" y="389" width="0.7937%" height="15" fill="rgb(252,179,29)" fg:x="809" fg:w="10"/><text x="64.4563%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="64.6825%" y="373" width="0.3175%" height="15" fill="rgb(238,194,6)" fg:x="815" fg:w="4"/><text x="64.9325%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.6825%" y="357" width="0.3175%" height="15" fill="rgb(238,164,29)" fg:x="815" fg:w="4"/><text x="64.9325%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="64.6825%" y="341" width="0.3175%" height="15" fill="rgb(224,25,9)" fg:x="815" fg:w="4"/><text x="64.9325%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.6825%" y="325" width="0.3175%" height="15" fill="rgb(244,153,23)" fg:x="815" fg:w="4"/><text x="64.9325%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.8413%" y="309" width="0.1587%" height="15" fill="rgb(212,203,14)" fg:x="817" fg:w="2"/><text x="65.0913%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.8413%" y="293" width="0.1587%" height="15" fill="rgb(220,164,20)" fg:x="817" fg:w="2"/><text x="65.0913%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.8413%" y="277" width="0.1587%" height="15" fill="rgb(222,203,48)" fg:x="817" fg:w="2"/><text x="65.0913%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.8413%" y="261" width="0.1587%" height="15" fill="rgb(215,159,22)" fg:x="817" fg:w="2"/><text x="65.0913%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.8413%" y="245" width="0.1587%" height="15" fill="rgb(216,183,47)" fg:x="817" fg:w="2"/><text x="65.0913%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.9206%" y="229" width="0.0794%" height="15" fill="rgb(229,195,25)" fg:x="818" fg:w="1"/><text x="65.1706%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.9206%" y="213" width="0.0794%" height="15" fill="rgb(224,132,51)" fg:x="818" fg:w="1"/><text x="65.1706%" y="223.50"></text></g><g><title>plugins_core::tools::get_contained_keys (25 samples, 1.98%)</title><rect x="63.1746%" y="533" width="1.9841%" height="15" fill="rgb(240,63,7)" fg:x="796" fg:w="25"/><text x="63.4246%" y="543.50">p..</text></g><g><title>kernel::model::entry::Entry::scope (24 samples, 1.90%)</title><rect x="63.2540%" y="517" width="1.9048%" height="15" fill="rgb(249,182,41)" fg:x="797" fg:w="24"/><text x="63.5040%" y="527.50">k..</text></g><g><title>kernel::model::scopes::Scopes::load_scope (24 samples, 1.90%)</title><rect x="63.2540%" y="501" width="1.9048%" height="15" fill="rgb(243,47,26)" fg:x="797" fg:w="24"/><text x="63.5040%" y="511.50">k..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="65.0000%" y="485" width="0.1587%" height="15" fill="rgb(233,48,2)" fg:x="819" fg:w="2"/><text x="65.2500%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="65.0000%" y="469" width="0.1587%" height="15" fill="rgb(244,165,34)" fg:x="819" fg:w="2"/><text x="65.2500%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="65.0000%" y="453" width="0.1587%" height="15" fill="rgb(207,89,7)" fg:x="819" fg:w="2"/><text x="65.2500%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="65.0000%" y="437" width="0.1587%" height="15" fill="rgb(244,117,36)" fg:x="819" fg:w="2"/><text x="65.2500%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.0794%" y="421" width="0.0794%" height="15" fill="rgb(226,144,34)" fg:x="820" fg:w="1"/><text x="65.3294%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.86%)</title><rect x="62.4603%" y="565" width="2.8571%" height="15" fill="rgb(213,23,19)" fg:x="787" fg:w="36"/><text x="62.7103%" y="575.50">&lt;a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 2.86%)</title><rect x="62.4603%" y="549" width="2.8571%" height="15" fill="rgb(217,75,12)" fg:x="787" fg:w="36"/><text x="62.7103%" y="559.50">&lt;c..</text></g><g><title>plugins_core::tools::get_occupant_keys (2 samples, 0.16%)</title><rect x="65.1587%" y="533" width="0.1587%" height="15" fill="rgb(224,159,17)" fg:x="821" fg:w="2"/><text x="65.4087%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="65.1587%" y="517" width="0.1587%" height="15" fill="rgb(217,118,1)" fg:x="821" fg:w="2"/><text x="65.4087%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.2381%" y="501" width="0.0794%" height="15" fill="rgb(232,180,48)" fg:x="822" fg:w="1"/><text x="65.4881%" y="511.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2381%" y="485" width="0.0794%" height="15" fill="rgb(230,27,33)" fg:x="822" fg:w="1"/><text x="65.4881%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2381%" y="469" width="0.0794%" height="15" fill="rgb(205,31,21)" fg:x="822" fg:w="1"/><text x="65.4881%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2381%" y="453" width="0.0794%" height="15" fill="rgb(253,59,4)" fg:x="822" fg:w="1"/><text x="65.4881%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.2381%" y="437" width="0.0794%" height="15" fill="rgb(224,201,9)" fg:x="822" fg:w="1"/><text x="65.4881%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2381%" y="421" width="0.0794%" height="15" fill="rgb(229,206,30)" fg:x="822" fg:w="1"/><text x="65.4881%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.2381%" y="405" width="0.0794%" height="15" fill="rgb(212,67,47)" fg:x="822" fg:w="1"/><text x="65.4881%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.2381%" y="389" width="0.0794%" height="15" fill="rgb(211,96,50)" fg:x="822" fg:w="1"/><text x="65.4881%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.2381%" y="373" width="0.0794%" height="15" fill="rgb(252,114,18)" fg:x="822" fg:w="1"/><text x="65.4881%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.2381%" y="357" width="0.0794%" height="15" fill="rgb(223,58,37)" fg:x="822" fg:w="1"/><text x="65.4881%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2381%" y="341" width="0.0794%" height="15" fill="rgb(237,70,4)" fg:x="822" fg:w="1"/><text x="65.4881%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.2381%" y="325" width="0.0794%" height="15" fill="rgb(244,85,46)" fg:x="822" fg:w="1"/><text x="65.4881%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.2381%" y="309" width="0.0794%" height="15" fill="rgb(223,39,52)" fg:x="822" fg:w="1"/><text x="65.4881%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.2381%" y="293" width="0.0794%" height="15" fill="rgb(218,200,14)" fg:x="822" fg:w="1"/><text x="65.4881%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.2381%" y="277" width="0.0794%" height="15" fill="rgb(208,171,16)" fg:x="822" fg:w="1"/><text x="65.4881%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.2381%" y="261" width="0.0794%" height="15" fill="rgb(234,200,18)" fg:x="822" fg:w="1"/><text x="65.4881%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.2381%" y="245" width="0.0794%" height="15" fill="rgb(228,45,11)" fg:x="822" fg:w="1"/><text x="65.4881%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.3968%" y="517" width="0.0794%" height="15" fill="rgb(237,182,11)" fg:x="824" fg:w="1"/><text x="65.6468%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="65.3968%" y="501" width="0.0794%" height="15" fill="rgb(241,175,49)" fg:x="824" fg:w="1"/><text x="65.6468%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="65.3968%" y="485" width="0.0794%" height="15" fill="rgb(247,38,35)" fg:x="824" fg:w="1"/><text x="65.6468%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="65.3968%" y="469" width="0.0794%" height="15" fill="rgb(228,39,49)" fg:x="824" fg:w="1"/><text x="65.6468%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="65.3968%" y="453" width="0.0794%" height="15" fill="rgb(226,101,26)" fg:x="824" fg:w="1"/><text x="65.6468%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.3968%" y="437" width="0.0794%" height="15" fill="rgb(206,141,19)" fg:x="824" fg:w="1"/><text x="65.6468%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="65.3968%" y="421" width="0.0794%" height="15" fill="rgb(211,200,13)" fg:x="824" fg:w="1"/><text x="65.6468%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="65.3968%" y="405" width="0.0794%" height="15" fill="rgb(241,121,6)" fg:x="824" fg:w="1"/><text x="65.6468%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="65.3968%" y="389" width="0.0794%" height="15" fill="rgb(234,221,29)" fg:x="824" fg:w="1"/><text x="65.6468%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="65.3968%" y="373" width="0.0794%" height="15" fill="rgb(229,136,5)" fg:x="824" fg:w="1"/><text x="65.6468%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="65.3968%" y="357" width="0.0794%" height="15" fill="rgb(238,36,11)" fg:x="824" fg:w="1"/><text x="65.6468%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="65.4762%" y="517" width="0.0794%" height="15" fill="rgb(251,55,41)" fg:x="825" fg:w="1"/><text x="65.7262%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="65.4762%" y="501" width="0.0794%" height="15" fill="rgb(242,34,40)" fg:x="825" fg:w="1"/><text x="65.7262%" y="511.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="65.4762%" y="485" width="0.0794%" height="15" fill="rgb(215,42,17)" fg:x="825" fg:w="1"/><text x="65.7262%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.4762%" y="469" width="0.0794%" height="15" fill="rgb(207,44,46)" fg:x="825" fg:w="1"/><text x="65.7262%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="65.8730%" y="277" width="0.0794%" height="15" fill="rgb(211,206,28)" fg:x="830" fg:w="1"/><text x="66.1230%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="65.8730%" y="261" width="0.0794%" height="15" fill="rgb(237,167,16)" fg:x="830" fg:w="1"/><text x="66.1230%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="65.8730%" y="245" width="0.0794%" height="15" fill="rgb(233,66,6)" fg:x="830" fg:w="1"/><text x="66.1230%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="65.8730%" y="229" width="0.0794%" height="15" fill="rgb(246,123,29)" fg:x="830" fg:w="1"/><text x="66.1230%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="65.7937%" y="341" width="0.3175%" height="15" fill="rgb(209,62,40)" fg:x="829" fg:w="4"/><text x="66.0437%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.32%)</title><rect x="65.7937%" y="325" width="0.3175%" height="15" fill="rgb(218,4,25)" fg:x="829" fg:w="4"/><text x="66.0437%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="65.7937%" y="309" width="0.3175%" height="15" fill="rgb(253,91,49)" fg:x="829" fg:w="4"/><text x="66.0437%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="65.7937%" y="293" width="0.3175%" height="15" fill="rgb(228,155,29)" fg:x="829" fg:w="4"/><text x="66.0437%" y="303.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="65.9524%" y="277" width="0.1587%" height="15" fill="rgb(243,57,37)" fg:x="831" fg:w="2"/><text x="66.2024%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.9524%" y="261" width="0.1587%" height="15" fill="rgb(244,167,17)" fg:x="831" fg:w="2"/><text x="66.2024%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="66.1111%" y="261" width="0.0794%" height="15" fill="rgb(207,181,38)" fg:x="833" fg:w="1"/><text x="66.3611%" y="271.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (7 samples, 0.56%)</title><rect x="65.7937%" y="357" width="0.5556%" height="15" fill="rgb(211,8,23)" fg:x="829" fg:w="7"/><text x="66.0437%" y="367.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="66.1111%" y="341" width="0.2381%" height="15" fill="rgb(235,11,44)" fg:x="833" fg:w="3"/><text x="66.3611%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="66.1111%" y="325" width="0.2381%" height="15" fill="rgb(248,18,52)" fg:x="833" fg:w="3"/><text x="66.3611%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (3 samples, 0.24%)</title><rect x="66.1111%" y="309" width="0.2381%" height="15" fill="rgb(208,4,7)" fg:x="833" fg:w="3"/><text x="66.3611%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="66.1111%" y="293" width="0.2381%" height="15" fill="rgb(240,17,39)" fg:x="833" fg:w="3"/><text x="66.3611%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.24%)</title><rect x="66.1111%" y="277" width="0.2381%" height="15" fill="rgb(207,170,3)" fg:x="833" fg:w="3"/><text x="66.3611%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.1905%" y="261" width="0.1587%" height="15" fill="rgb(236,100,52)" fg:x="834" fg:w="2"/><text x="66.4405%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.2698%" y="245" width="0.0794%" height="15" fill="rgb(246,78,51)" fg:x="835" fg:w="1"/><text x="66.5198%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.3492%" y="357" width="0.0794%" height="15" fill="rgb(211,17,15)" fg:x="836" fg:w="1"/><text x="66.5992%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.3492%" y="341" width="0.0794%" height="15" fill="rgb(209,59,46)" fg:x="836" fg:w="1"/><text x="66.5992%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="66.5079%" y="341" width="0.0794%" height="15" fill="rgb(210,92,25)" fg:x="838" fg:w="1"/><text x="66.7579%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (12 samples, 0.95%)</title><rect x="65.7143%" y="373" width="0.9524%" height="15" fill="rgb(238,174,52)" fg:x="828" fg:w="12"/><text x="65.9643%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.24%)</title><rect x="66.4286%" y="357" width="0.2381%" height="15" fill="rgb(230,73,7)" fg:x="837" fg:w="3"/><text x="66.6786%" y="367.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.5873%" y="341" width="0.0794%" height="15" fill="rgb(243,124,40)" fg:x="839" fg:w="1"/><text x="66.8373%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (13 samples, 1.03%)</title><rect x="65.7143%" y="389" width="1.0317%" height="15" fill="rgb(244,170,11)" fg:x="828" fg:w="13"/><text x="65.9643%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="66.6667%" y="373" width="0.0794%" height="15" fill="rgb(207,114,54)" fg:x="840" fg:w="1"/><text x="66.9167%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.6667%" y="357" width="0.0794%" height="15" fill="rgb(205,42,20)" fg:x="840" fg:w="1"/><text x="66.9167%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (15 samples, 1.19%)</title><rect x="65.6349%" y="405" width="1.1905%" height="15" fill="rgb(230,30,28)" fg:x="827" fg:w="15"/><text x="65.8849%" y="415.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.7460%" y="389" width="0.0794%" height="15" fill="rgb(205,73,54)" fg:x="841" fg:w="1"/><text x="66.9960%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="66.7460%" y="373" width="0.0794%" height="15" fill="rgb(254,227,23)" fg:x="841" fg:w="1"/><text x="66.9960%" y="383.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="66.7460%" y="357" width="0.0794%" height="15" fill="rgb(228,202,34)" fg:x="841" fg:w="1"/><text x="66.9960%" y="367.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (18 samples, 1.43%)</title><rect x="65.5556%" y="453" width="1.4286%" height="15" fill="rgb(222,225,37)" fg:x="826" fg:w="18"/><text x="65.8056%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (18 samples, 1.43%)</title><rect x="65.5556%" y="437" width="1.4286%" height="15" fill="rgb(221,14,54)" fg:x="826" fg:w="18"/><text x="65.8056%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 1.43%)</title><rect x="65.5556%" y="421" width="1.4286%" height="15" fill="rgb(254,102,2)" fg:x="826" fg:w="18"/><text x="65.8056%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.8254%" y="405" width="0.1587%" height="15" fill="rgb(232,104,17)" fg:x="842" fg:w="2"/><text x="67.0754%" y="415.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="66.8254%" y="389" width="0.1587%" height="15" fill="rgb(250,220,14)" fg:x="842" fg:w="2"/><text x="67.0754%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="66.9048%" y="373" width="0.0794%" height="15" fill="rgb(241,158,9)" fg:x="843" fg:w="1"/><text x="67.1548%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (20 samples, 1.59%)</title><rect x="65.5556%" y="501" width="1.5873%" height="15" fill="rgb(246,9,43)" fg:x="826" fg:w="20"/><text x="65.8056%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.59%)</title><rect x="65.5556%" y="485" width="1.5873%" height="15" fill="rgb(206,73,33)" fg:x="826" fg:w="20"/><text x="65.8056%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.59%)</title><rect x="65.5556%" y="469" width="1.5873%" height="15" fill="rgb(222,79,8)" fg:x="826" fg:w="20"/><text x="65.8056%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="66.9841%" y="453" width="0.1587%" height="15" fill="rgb(234,8,54)" fg:x="844" fg:w="2"/><text x="67.2341%" y="463.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0635%" y="437" width="0.0794%" height="15" fill="rgb(209,134,38)" fg:x="845" fg:w="1"/><text x="67.3135%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.3016%" y="453" width="0.0794%" height="15" fill="rgb(230,127,29)" fg:x="848" fg:w="1"/><text x="67.5516%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.3810%" y="453" width="0.0794%" height="15" fill="rgb(242,44,41)" fg:x="849" fg:w="1"/><text x="67.6310%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="67.4603%" y="453" width="0.0794%" height="15" fill="rgb(222,56,43)" fg:x="850" fg:w="1"/><text x="67.7103%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.4603%" y="437" width="0.0794%" height="15" fill="rgb(238,39,47)" fg:x="850" fg:w="1"/><text x="67.7103%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4603%" y="421" width="0.0794%" height="15" fill="rgb(226,79,43)" fg:x="850" fg:w="1"/><text x="67.7103%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4603%" y="405" width="0.0794%" height="15" fill="rgb(242,105,53)" fg:x="850" fg:w="1"/><text x="67.7103%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.4603%" y="389" width="0.0794%" height="15" fill="rgb(251,132,46)" fg:x="850" fg:w="1"/><text x="67.7103%" y="399.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5397%" y="453" width="0.0794%" height="15" fill="rgb(231,77,14)" fg:x="851" fg:w="1"/><text x="67.7897%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.5397%" y="437" width="0.0794%" height="15" fill="rgb(240,135,9)" fg:x="851" fg:w="1"/><text x="67.7897%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5397%" y="421" width="0.0794%" height="15" fill="rgb(248,109,14)" fg:x="851" fg:w="1"/><text x="67.7897%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="67.6190%" y="453" width="0.0794%" height="15" fill="rgb(227,146,52)" fg:x="852" fg:w="1"/><text x="67.8690%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.6190%" y="437" width="0.0794%" height="15" fill="rgb(232,54,3)" fg:x="852" fg:w="1"/><text x="67.8690%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="67.9365%" y="373" width="0.0794%" height="15" fill="rgb(229,201,43)" fg:x="856" fg:w="1"/><text x="68.1865%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="67.9365%" y="405" width="0.1587%" height="15" fill="rgb(252,161,33)" fg:x="856" fg:w="2"/><text x="68.1865%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="67.9365%" y="389" width="0.1587%" height="15" fill="rgb(226,146,40)" fg:x="856" fg:w="2"/><text x="68.1865%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.0159%" y="373" width="0.0794%" height="15" fill="rgb(219,47,25)" fg:x="857" fg:w="1"/><text x="68.2659%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.0952%" y="309" width="0.0794%" height="15" fill="rgb(250,135,13)" fg:x="858" fg:w="1"/><text x="68.3452%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1746%" y="277" width="0.0794%" height="15" fill="rgb(219,229,18)" fg:x="859" fg:w="1"/><text x="68.4246%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.1746%" y="261" width="0.0794%" height="15" fill="rgb(217,152,27)" fg:x="859" fg:w="1"/><text x="68.4246%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1746%" y="245" width="0.0794%" height="15" fill="rgb(225,71,47)" fg:x="859" fg:w="1"/><text x="68.4246%" y="255.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.0952%" y="357" width="0.2381%" height="15" fill="rgb(220,139,14)" fg:x="858" fg:w="3"/><text x="68.3452%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="68.0952%" y="341" width="0.2381%" height="15" fill="rgb(247,54,32)" fg:x="858" fg:w="3"/><text x="68.3452%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="68.0952%" y="325" width="0.2381%" height="15" fill="rgb(252,131,39)" fg:x="858" fg:w="3"/><text x="68.3452%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.1746%" y="309" width="0.1587%" height="15" fill="rgb(210,108,39)" fg:x="859" fg:w="2"/><text x="68.4246%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.1746%" y="293" width="0.1587%" height="15" fill="rgb(205,23,29)" fg:x="859" fg:w="2"/><text x="68.4246%" y="303.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="68.2540%" y="277" width="0.0794%" height="15" fill="rgb(246,139,46)" fg:x="860" fg:w="1"/><text x="68.5040%" y="287.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="68.0952%" y="389" width="0.3175%" height="15" fill="rgb(250,81,26)" fg:x="858" fg:w="4"/><text x="68.3452%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="68.0952%" y="373" width="0.3175%" height="15" fill="rgb(214,104,7)" fg:x="858" fg:w="4"/><text x="68.3452%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3333%" y="357" width="0.0794%" height="15" fill="rgb(233,189,8)" fg:x="861" fg:w="1"/><text x="68.5833%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (694 samples, 55.08%)</title><rect x="13.4127%" y="661" width="55.0794%" height="15" fill="rgb(228,141,17)" fg:x="169" fg:w="694"/><text x="13.6627%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (86 samples, 6.83%)</title><rect x="61.6667%" y="645" width="6.8254%" height="15" fill="rgb(247,157,1)" fg:x="777" fg:w="86"/><text x="61.9167%" y="655.50">kernel::p..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (86 samples, 6.83%)</title><rect x="61.6667%" y="629" width="6.8254%" height="15" fill="rgb(249,225,5)" fg:x="777" fg:w="86"/><text x="61.9167%" y="639.50">&lt;plugins_..</text></g><g><title>plugins_rpc::querying::have_surroundings (78 samples, 6.19%)</title><rect x="62.3016%" y="613" width="6.1905%" height="15" fill="rgb(242,55,13)" fg:x="785" fg:w="78"/><text x="62.5516%" y="623.50">plugins_..</text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (78 samples, 6.19%)</title><rect x="62.3016%" y="597" width="6.1905%" height="15" fill="rgb(230,49,50)" fg:x="785" fg:w="78"/><text x="62.5516%" y="607.50">&lt;plugins..</text></g><g><title>core::iter::adapters::try_process (76 samples, 6.03%)</title><rect x="62.4603%" y="581" width="6.0317%" height="15" fill="rgb(241,111,38)" fg:x="787" fg:w="76"/><text x="62.7103%" y="591.50">core::it..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (40 samples, 3.17%)</title><rect x="65.3175%" y="565" width="3.1746%" height="15" fill="rgb(252,155,4)" fg:x="823" fg:w="40"/><text x="65.5675%" y="575.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 3.10%)</title><rect x="65.3968%" y="549" width="3.0952%" height="15" fill="rgb(212,69,32)" fg:x="824" fg:w="39"/><text x="65.6468%" y="559.50">&lt;co..</text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (39 samples, 3.10%)</title><rect x="65.3968%" y="533" width="3.0952%" height="15" fill="rgb(243,107,47)" fg:x="824" fg:w="39"/><text x="65.6468%" y="543.50">plu..</text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (37 samples, 2.94%)</title><rect x="65.5556%" y="517" width="2.9365%" height="15" fill="rgb(247,130,12)" fg:x="826" fg:w="37"/><text x="65.8056%" y="527.50">&lt;r..</text></g><g><title>kernel::model::EntityPtr::to_json_value (17 samples, 1.35%)</title><rect x="67.1429%" y="501" width="1.3492%" height="15" fill="rgb(233,74,16)" fg:x="846" fg:w="17"/><text x="67.3929%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.35%)</title><rect x="67.1429%" y="485" width="1.3492%" height="15" fill="rgb(208,58,18)" fg:x="846" fg:w="17"/><text x="67.3929%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.27%)</title><rect x="67.2222%" y="469" width="1.2698%" height="15" fill="rgb(242,225,1)" fg:x="847" fg:w="16"/><text x="67.4722%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (10 samples, 0.79%)</title><rect x="67.6984%" y="453" width="0.7937%" height="15" fill="rgb(249,39,40)" fg:x="853" fg:w="10"/><text x="67.9484%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.79%)</title><rect x="67.6984%" y="437" width="0.7937%" height="15" fill="rgb(207,72,44)" fg:x="853" fg:w="10"/><text x="67.9484%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.71%)</title><rect x="67.7778%" y="421" width="0.7143%" height="15" fill="rgb(215,193,12)" fg:x="854" fg:w="9"/><text x="68.0278%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="68.0952%" y="405" width="0.3968%" height="15" fill="rgb(248,41,39)" fg:x="858" fg:w="5"/><text x="68.3452%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.4127%" y="389" width="0.0794%" height="15" fill="rgb(253,85,4)" fg:x="862" fg:w="1"/><text x="68.6627%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="68.4921%" y="629" width="0.0794%" height="15" fill="rgb(243,70,31)" fg:x="863" fg:w="1"/><text x="68.7421%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="68.4921%" y="613" width="0.0794%" height="15" fill="rgb(253,195,26)" fg:x="863" fg:w="1"/><text x="68.7421%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.4921%" y="597" width="0.0794%" height="15" fill="rgb(243,42,11)" fg:x="863" fg:w="1"/><text x="68.7421%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.4921%" y="581" width="0.0794%" height="15" fill="rgb(239,66,17)" fg:x="863" fg:w="1"/><text x="68.7421%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.4921%" y="565" width="0.0794%" height="15" fill="rgb(217,132,21)" fg:x="863" fg:w="1"/><text x="68.7421%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4921%" y="549" width="0.0794%" height="15" fill="rgb(252,202,21)" fg:x="863" fg:w="1"/><text x="68.7421%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4921%" y="533" width="0.0794%" height="15" fill="rgb(233,98,36)" fg:x="863" fg:w="1"/><text x="68.7421%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4921%" y="517" width="0.0794%" height="15" fill="rgb(216,153,54)" fg:x="863" fg:w="1"/><text x="68.7421%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4921%" y="501" width="0.0794%" height="15" fill="rgb(250,99,7)" fg:x="863" fg:w="1"/><text x="68.7421%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.4921%" y="485" width="0.0794%" height="15" fill="rgb(207,56,50)" fg:x="863" fg:w="1"/><text x="68.7421%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4921%" y="469" width="0.0794%" height="15" fill="rgb(244,61,34)" fg:x="863" fg:w="1"/><text x="68.7421%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.4921%" y="453" width="0.0794%" height="15" fill="rgb(241,50,38)" fg:x="863" fg:w="1"/><text x="68.7421%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.4921%" y="437" width="0.0794%" height="15" fill="rgb(212,166,30)" fg:x="863" fg:w="1"/><text x="68.7421%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="68.5714%" y="613" width="0.0794%" height="15" fill="rgb(249,127,32)" fg:x="864" fg:w="1"/><text x="68.8214%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5714%" y="597" width="0.0794%" height="15" fill="rgb(209,103,0)" fg:x="864" fg:w="1"/><text x="68.8214%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5714%" y="581" width="0.0794%" height="15" fill="rgb(238,209,51)" fg:x="864" fg:w="1"/><text x="68.8214%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5714%" y="565" width="0.0794%" height="15" fill="rgb(237,56,23)" fg:x="864" fg:w="1"/><text x="68.8214%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.5714%" y="549" width="0.0794%" height="15" fill="rgb(215,153,46)" fg:x="864" fg:w="1"/><text x="68.8214%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.5714%" y="533" width="0.0794%" height="15" fill="rgb(224,49,31)" fg:x="864" fg:w="1"/><text x="68.8214%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.7302%" y="581" width="0.0794%" height="15" fill="rgb(250,18,42)" fg:x="866" fg:w="1"/><text x="68.9802%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.7302%" y="565" width="0.0794%" height="15" fill="rgb(215,176,39)" fg:x="866" fg:w="1"/><text x="68.9802%" y="575.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.7302%" y="549" width="0.0794%" height="15" fill="rgb(223,77,29)" fg:x="866" fg:w="1"/><text x="68.9802%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.7302%" y="533" width="0.0794%" height="15" fill="rgb(234,94,52)" fg:x="866" fg:w="1"/><text x="68.9802%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7302%" y="517" width="0.0794%" height="15" fill="rgb(220,154,50)" fg:x="866" fg:w="1"/><text x="68.9802%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.7302%" y="501" width="0.0794%" height="15" fill="rgb(212,11,10)" fg:x="866" fg:w="1"/><text x="68.9802%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7302%" y="485" width="0.0794%" height="15" fill="rgb(205,166,19)" fg:x="866" fg:w="1"/><text x="68.9802%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.7302%" y="469" width="0.0794%" height="15" fill="rgb(244,198,16)" fg:x="866" fg:w="1"/><text x="68.9802%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7302%" y="453" width="0.0794%" height="15" fill="rgb(219,69,12)" fg:x="866" fg:w="1"/><text x="68.9802%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.7302%" y="437" width="0.0794%" height="15" fill="rgb(245,30,7)" fg:x="866" fg:w="1"/><text x="68.9802%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.7302%" y="421" width="0.0794%" height="15" fill="rgb(218,221,48)" fg:x="866" fg:w="1"/><text x="68.9802%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="68.4921%" y="661" width="0.3968%" height="15" fill="rgb(216,66,15)" fg:x="863" fg:w="5"/><text x="68.7421%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="68.4921%" y="645" width="0.3968%" height="15" fill="rgb(226,122,50)" fg:x="863" fg:w="5"/><text x="68.7421%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="68.5714%" y="629" width="0.3175%" height="15" fill="rgb(239,156,16)" fg:x="864" fg:w="4"/><text x="68.8214%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="68.6508%" y="613" width="0.2381%" height="15" fill="rgb(224,27,38)" fg:x="865" fg:w="3"/><text x="68.9008%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.6508%" y="597" width="0.2381%" height="15" fill="rgb(224,39,27)" fg:x="865" fg:w="3"/><text x="68.9008%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.8095%" y="581" width="0.0794%" height="15" fill="rgb(215,92,29)" fg:x="867" fg:w="1"/><text x="69.0595%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.8095%" y="565" width="0.0794%" height="15" fill="rgb(207,159,16)" fg:x="867" fg:w="1"/><text x="69.0595%" y="575.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="68.9683%" y="613" width="0.0794%" height="15" fill="rgb(238,163,47)" fg:x="869" fg:w="1"/><text x="69.2183%" y="623.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="69.0476%" y="597" width="0.0794%" height="15" fill="rgb(219,91,49)" fg:x="870" fg:w="1"/><text x="69.2976%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0476%" y="581" width="0.0794%" height="15" fill="rgb(227,167,31)" fg:x="870" fg:w="1"/><text x="69.2976%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0476%" y="565" width="0.0794%" height="15" fill="rgb(234,80,54)" fg:x="870" fg:w="1"/><text x="69.2976%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0476%" y="549" width="0.0794%" height="15" fill="rgb(212,114,2)" fg:x="870" fg:w="1"/><text x="69.2976%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0476%" y="533" width="0.0794%" height="15" fill="rgb(234,50,24)" fg:x="870" fg:w="1"/><text x="69.2976%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0476%" y="517" width="0.0794%" height="15" fill="rgb(221,68,8)" fg:x="870" fg:w="1"/><text x="69.2976%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="68.9683%" y="645" width="0.4762%" height="15" fill="rgb(254,180,31)" fg:x="869" fg:w="6"/><text x="69.2183%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="68.9683%" y="629" width="0.4762%" height="15" fill="rgb(247,130,50)" fg:x="869" fg:w="6"/><text x="69.2183%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_str (5 samples, 0.40%)</title><rect x="69.0476%" y="613" width="0.3968%" height="15" fill="rgb(211,109,4)" fg:x="870" fg:w="5"/><text x="69.2976%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="69.1270%" y="597" width="0.3175%" height="15" fill="rgb(238,50,21)" fg:x="871" fg:w="4"/><text x="69.3770%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2857%" y="581" width="0.1587%" height="15" fill="rgb(225,57,45)" fg:x="873" fg:w="2"/><text x="69.5357%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.3651%" y="565" width="0.0794%" height="15" fill="rgb(209,196,50)" fg:x="874" fg:w="1"/><text x="69.6151%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3651%" y="549" width="0.0794%" height="15" fill="rgb(242,140,13)" fg:x="874" fg:w="1"/><text x="69.6151%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.3651%" y="533" width="0.0794%" height="15" fill="rgb(217,111,7)" fg:x="874" fg:w="1"/><text x="69.6151%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.3651%" y="517" width="0.0794%" height="15" fill="rgb(253,193,51)" fg:x="874" fg:w="1"/><text x="69.6151%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (8 samples, 0.63%)</title><rect x="68.8889%" y="661" width="0.6349%" height="15" fill="rgb(252,70,29)" fg:x="868" fg:w="8"/><text x="69.1389%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="69.4444%" y="645" width="0.0794%" height="15" fill="rgb(232,127,12)" fg:x="875" fg:w="1"/><text x="69.6944%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="69.4444%" y="629" width="0.0794%" height="15" fill="rgb(211,180,21)" fg:x="875" fg:w="1"/><text x="69.6944%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.4444%" y="613" width="0.0794%" height="15" fill="rgb(229,72,13)" fg:x="875" fg:w="1"/><text x="69.6944%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.4444%" y="597" width="0.0794%" height="15" fill="rgb(240,211,49)" fg:x="875" fg:w="1"/><text x="69.6944%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.4444%" y="581" width="0.0794%" height="15" fill="rgb(219,149,40)" fg:x="875" fg:w="1"/><text x="69.6944%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="69.4444%" y="565" width="0.0794%" height="15" fill="rgb(210,127,46)" fg:x="875" fg:w="1"/><text x="69.6944%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="69.4444%" y="549" width="0.0794%" height="15" fill="rgb(220,106,7)" fg:x="875" fg:w="1"/><text x="69.6944%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="69.4444%" y="533" width="0.0794%" height="15" fill="rgb(249,31,22)" fg:x="875" fg:w="1"/><text x="69.6944%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="69.4444%" y="517" width="0.0794%" height="15" fill="rgb(253,1,49)" fg:x="875" fg:w="1"/><text x="69.6944%" y="527.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="69.4444%" y="501" width="0.0794%" height="15" fill="rgb(227,144,33)" fg:x="875" fg:w="1"/><text x="69.6944%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.6032%" y="581" width="0.0794%" height="15" fill="rgb(249,163,44)" fg:x="877" fg:w="1"/><text x="69.8532%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6032%" y="565" width="0.0794%" height="15" fill="rgb(234,15,39)" fg:x="877" fg:w="1"/><text x="69.8532%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.6032%" y="549" width="0.0794%" height="15" fill="rgb(207,66,16)" fg:x="877" fg:w="1"/><text x="69.8532%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.6032%" y="533" width="0.0794%" height="15" fill="rgb(233,112,24)" fg:x="877" fg:w="1"/><text x="69.8532%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.6032%" y="517" width="0.0794%" height="15" fill="rgb(230,90,22)" fg:x="877" fg:w="1"/><text x="69.8532%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.6032%" y="501" width="0.0794%" height="15" fill="rgb(229,61,13)" fg:x="877" fg:w="1"/><text x="69.8532%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6032%" y="485" width="0.0794%" height="15" fill="rgb(225,57,24)" fg:x="877" fg:w="1"/><text x="69.8532%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.6032%" y="469" width="0.0794%" height="15" fill="rgb(208,169,48)" fg:x="877" fg:w="1"/><text x="69.8532%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.6032%" y="453" width="0.0794%" height="15" fill="rgb(244,218,51)" fg:x="877" fg:w="1"/><text x="69.8532%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.6032%" y="437" width="0.0794%" height="15" fill="rgb(214,148,10)" fg:x="877" fg:w="1"/><text x="69.8532%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.6032%" y="421" width="0.0794%" height="15" fill="rgb(225,174,27)" fg:x="877" fg:w="1"/><text x="69.8532%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.6032%" y="405" width="0.0794%" height="15" fill="rgb(230,96,26)" fg:x="877" fg:w="1"/><text x="69.8532%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.6032%" y="389" width="0.0794%" height="15" fill="rgb(232,10,30)" fg:x="877" fg:w="1"/><text x="69.8532%" y="399.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="69.5238%" y="613" width="0.2381%" height="15" fill="rgb(222,8,50)" fg:x="876" fg:w="3"/><text x="69.7738%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.6032%" y="597" width="0.1587%" height="15" fill="rgb(213,81,27)" fg:x="877" fg:w="2"/><text x="69.8532%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="69.6825%" y="581" width="0.0794%" height="15" fill="rgb(245,50,10)" fg:x="878" fg:w="1"/><text x="69.9325%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (880 samples, 69.84%)</title><rect x="0.0000%" y="725" width="69.8413%" height="15" fill="rgb(216,100,18)" fg:x="0" fg:w="880"/><text x="0.2500%" y="735.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (880 samples, 69.84%)</title><rect x="0.0000%" y="709" width="69.8413%" height="15" fill="rgb(236,147,54)" fg:x="0" fg:w="880"/><text x="0.2500%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (880 samples, 69.84%)</title><rect x="0.0000%" y="693" width="69.8413%" height="15" fill="rgb(205,143,26)" fg:x="0" fg:w="880"/><text x="0.2500%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (711 samples, 56.43%)</title><rect x="13.4127%" y="677" width="56.4286%" height="15" fill="rgb(236,26,9)" fg:x="169" fg:w="711"/><text x="13.6627%" y="687.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::users::model::username_to_key (4 samples, 0.32%)</title><rect x="69.5238%" y="661" width="0.3175%" height="15" fill="rgb(221,165,53)" fg:x="876" fg:w="4"/><text x="69.7738%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope (4 samples, 0.32%)</title><rect x="69.5238%" y="645" width="0.3175%" height="15" fill="rgb(214,110,17)" fg:x="876" fg:w="4"/><text x="69.7738%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="69.5238%" y="629" width="0.3175%" height="15" fill="rgb(237,197,12)" fg:x="876" fg:w="4"/><text x="69.7738%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.7619%" y="613" width="0.0794%" height="15" fill="rgb(205,84,17)" fg:x="879" fg:w="1"/><text x="70.0119%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.7619%" y="597" width="0.0794%" height="15" fill="rgb(237,18,45)" fg:x="879" fg:w="1"/><text x="70.0119%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.7619%" y="581" width="0.0794%" height="15" fill="rgb(221,87,14)" fg:x="879" fg:w="1"/><text x="70.0119%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.8413%" y="565" width="0.0794%" height="15" fill="rgb(238,186,15)" fg:x="880" fg:w="1"/><text x="70.0913%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="69.8413%" y="581" width="0.1587%" height="15" fill="rgb(208,115,11)" fg:x="880" fg:w="2"/><text x="70.0913%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.9206%" y="565" width="0.0794%" height="15" fill="rgb(254,175,0)" fg:x="881" fg:w="1"/><text x="70.1706%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.9206%" y="549" width="0.0794%" height="15" fill="rgb(227,24,42)" fg:x="881" fg:w="1"/><text x="70.1706%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.9206%" y="533" width="0.0794%" height="15" fill="rgb(223,211,37)" fg:x="881" fg:w="1"/><text x="70.1706%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9206%" y="517" width="0.0794%" height="15" fill="rgb(235,49,27)" fg:x="881" fg:w="1"/><text x="70.1706%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.9206%" y="501" width="0.0794%" height="15" fill="rgb(254,97,51)" fg:x="881" fg:w="1"/><text x="70.1706%" y="511.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.8413%" y="677" width="0.2381%" height="15" fill="rgb(249,51,40)" fg:x="880" fg:w="3"/><text x="70.0913%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (3 samples, 0.24%)</title><rect x="69.8413%" y="661" width="0.2381%" height="15" fill="rgb(210,128,45)" fg:x="880" fg:w="3"/><text x="70.0913%" y="671.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.8413%" y="645" width="0.2381%" height="15" fill="rgb(224,137,50)" fg:x="880" fg:w="3"/><text x="70.0913%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="69.8413%" y="629" width="0.2381%" height="15" fill="rgb(242,15,9)" fg:x="880" fg:w="3"/><text x="70.0913%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.8413%" y="613" width="0.2381%" height="15" fill="rgb(233,187,41)" fg:x="880" fg:w="3"/><text x="70.0913%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="69.8413%" y="597" width="0.2381%" height="15" fill="rgb(227,2,29)" fg:x="880" fg:w="3"/><text x="70.0913%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.0000%" y="581" width="0.0794%" height="15" fill="rgb(222,70,3)" fg:x="882" fg:w="1"/><text x="70.2500%" y="591.50"></text></g><g><title>engine::session::Session::set_session (1 samples, 0.08%)</title><rect x="70.0794%" y="629" width="0.0794%" height="15" fill="rgb(213,11,42)" fg:x="883" fg:w="1"/><text x="70.3294%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="70.1587%" y="597" width="0.0794%" height="15" fill="rgb(225,150,9)" fg:x="884" fg:w="1"/><text x="70.4087%" y="607.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (6 samples, 0.48%)</title><rect x="70.1587%" y="629" width="0.4762%" height="15" fill="rgb(230,162,45)" fg:x="884" fg:w="6"/><text x="70.4087%" y="639.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.48%)</title><rect x="70.1587%" y="613" width="0.4762%" height="15" fill="rgb(222,14,52)" fg:x="884" fg:w="6"/><text x="70.4087%" y="623.50"></text></g><g><title>libloading::os::unix::Library::open (5 samples, 0.40%)</title><rect x="70.2381%" y="597" width="0.3968%" height="15" fill="rgb(254,198,14)" fg:x="885" fg:w="5"/><text x="70.4881%" y="607.50"></text></g><g><title>dlopen (5 samples, 0.40%)</title><rect x="70.2381%" y="581" width="0.3968%" height="15" fill="rgb(220,217,30)" fg:x="885" fg:w="5"/><text x="70.4881%" y="591.50"></text></g><g><title>_dl_catch_error (5 samples, 0.40%)</title><rect x="70.2381%" y="565" width="0.3968%" height="15" fill="rgb(215,146,41)" fg:x="885" fg:w="5"/><text x="70.4881%" y="575.50"></text></g><g><title>_dl_catch_exception (5 samples, 0.40%)</title><rect x="70.2381%" y="549" width="0.3968%" height="15" fill="rgb(217,27,36)" fg:x="885" fg:w="5"/><text x="70.4881%" y="559.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="70.3175%" y="533" width="0.3175%" height="15" fill="rgb(219,218,39)" fg:x="886" fg:w="4"/><text x="70.5675%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="70.3175%" y="517" width="0.3175%" height="15" fill="rgb(219,4,42)" fg:x="886" fg:w="4"/><text x="70.5675%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.6349%" y="613" width="0.0794%" height="15" fill="rgb(249,119,36)" fg:x="890" fg:w="1"/><text x="70.8849%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.71%)</title><rect x="70.0794%" y="677" width="0.7143%" height="15" fill="rgb(209,23,33)" fg:x="883" fg:w="9"/><text x="70.3294%" y="687.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.71%)</title><rect x="70.0794%" y="661" width="0.7143%" height="15" fill="rgb(211,10,0)" fg:x="883" fg:w="9"/><text x="70.3294%" y="671.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.71%)</title><rect x="70.0794%" y="645" width="0.7143%" height="15" fill="rgb(208,99,37)" fg:x="883" fg:w="9"/><text x="70.3294%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="70.6349%" y="629" width="0.1587%" height="15" fill="rgb(213,132,31)" fg:x="890" fg:w="2"/><text x="70.8849%" y="639.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="70.7143%" y="613" width="0.0794%" height="15" fill="rgb(243,129,40)" fg:x="891" fg:w="1"/><text x="70.9643%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.7143%" y="597" width="0.0794%" height="15" fill="rgb(210,66,33)" fg:x="891" fg:w="1"/><text x="70.9643%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="70.7143%" y="581" width="0.0794%" height="15" fill="rgb(209,189,4)" fg:x="891" fg:w="1"/><text x="70.9643%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="70.7143%" y="565" width="0.0794%" height="15" fill="rgb(214,107,37)" fg:x="891" fg:w="1"/><text x="70.9643%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="70.7143%" y="549" width="0.0794%" height="15" fill="rgb(245,88,54)" fg:x="891" fg:w="1"/><text x="70.9643%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.7937%" y="661" width="0.0794%" height="15" fill="rgb(205,146,20)" fg:x="892" fg:w="1"/><text x="71.0437%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.0317%" y="565" width="0.0794%" height="15" fill="rgb(220,161,25)" fg:x="895" fg:w="1"/><text x="71.2817%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.0317%" y="549" width="0.0794%" height="15" fill="rgb(215,152,15)" fg:x="895" fg:w="1"/><text x="71.2817%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.0317%" y="533" width="0.0794%" height="15" fill="rgb(233,192,44)" fg:x="895" fg:w="1"/><text x="71.2817%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.0317%" y="517" width="0.0794%" height="15" fill="rgb(240,170,46)" fg:x="895" fg:w="1"/><text x="71.2817%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.0317%" y="501" width="0.0794%" height="15" fill="rgb(207,104,33)" fg:x="895" fg:w="1"/><text x="71.2817%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.0317%" y="485" width="0.0794%" height="15" fill="rgb(219,21,39)" fg:x="895" fg:w="1"/><text x="71.2817%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.0317%" y="469" width="0.0794%" height="15" fill="rgb(214,133,29)" fg:x="895" fg:w="1"/><text x="71.2817%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.0317%" y="453" width="0.0794%" height="15" fill="rgb(226,93,6)" fg:x="895" fg:w="1"/><text x="71.2817%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.1111%" y="533" width="0.0794%" height="15" fill="rgb(252,222,34)" fg:x="896" fg:w="1"/><text x="71.3611%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.1111%" y="517" width="0.0794%" height="15" fill="rgb(252,92,48)" fg:x="896" fg:w="1"/><text x="71.3611%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (3 samples, 0.24%)</title><rect x="71.0317%" y="581" width="0.2381%" height="15" fill="rgb(245,223,24)" fg:x="895" fg:w="3"/><text x="71.2817%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1111%" y="565" width="0.1587%" height="15" fill="rgb(205,176,3)" fg:x="896" fg:w="2"/><text x="71.3611%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.1111%" y="549" width="0.1587%" height="15" fill="rgb(235,151,15)" fg:x="896" fg:w="2"/><text x="71.3611%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1905%" y="533" width="0.0794%" height="15" fill="rgb(237,209,11)" fg:x="897" fg:w="1"/><text x="71.4405%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.1905%" y="517" width="0.0794%" height="15" fill="rgb(243,227,24)" fg:x="897" fg:w="1"/><text x="71.4405%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.1905%" y="501" width="0.0794%" height="15" fill="rgb(239,193,16)" fg:x="897" fg:w="1"/><text x="71.4405%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.1905%" y="485" width="0.0794%" height="15" fill="rgb(231,27,9)" fg:x="897" fg:w="1"/><text x="71.4405%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="581" width="0.0794%" height="15" fill="rgb(219,169,10)" fg:x="898" fg:w="1"/><text x="71.5198%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="565" width="0.0794%" height="15" fill="rgb(244,229,43)" fg:x="898" fg:w="1"/><text x="71.5198%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="549" width="0.0794%" height="15" fill="rgb(254,38,20)" fg:x="898" fg:w="1"/><text x="71.5198%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="533" width="0.0794%" height="15" fill="rgb(250,47,30)" fg:x="898" fg:w="1"/><text x="71.5198%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="517" width="0.0794%" height="15" fill="rgb(224,124,36)" fg:x="898" fg:w="1"/><text x="71.5198%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="501" width="0.0794%" height="15" fill="rgb(246,68,51)" fg:x="898" fg:w="1"/><text x="71.5198%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.2698%" y="485" width="0.0794%" height="15" fill="rgb(253,43,49)" fg:x="898" fg:w="1"/><text x="71.5198%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2698%" y="469" width="0.0794%" height="15" fill="rgb(219,54,36)" fg:x="898" fg:w="1"/><text x="71.5198%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="71.3492%" y="485" width="0.0794%" height="15" fill="rgb(227,133,34)" fg:x="899" fg:w="1"/><text x="71.5992%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3492%" y="469" width="0.0794%" height="15" fill="rgb(247,227,15)" fg:x="899" fg:w="1"/><text x="71.5992%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.3492%" y="453" width="0.0794%" height="15" fill="rgb(229,96,14)" fg:x="899" fg:w="1"/><text x="71.5992%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.3492%" y="437" width="0.0794%" height="15" fill="rgb(220,79,17)" fg:x="899" fg:w="1"/><text x="71.5992%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.3492%" y="421" width="0.0794%" height="15" fill="rgb(205,131,53)" fg:x="899" fg:w="1"/><text x="71.5992%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="71.4286%" y="469" width="0.0794%" height="15" fill="rgb(209,50,29)" fg:x="900" fg:w="1"/><text x="71.6786%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="71.4286%" y="453" width="0.0794%" height="15" fill="rgb(245,86,46)" fg:x="900" fg:w="1"/><text x="71.6786%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="71.3492%" y="501" width="0.2381%" height="15" fill="rgb(235,66,46)" fg:x="899" fg:w="3"/><text x="71.5992%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="71.4286%" y="485" width="0.1587%" height="15" fill="rgb(232,148,31)" fg:x="900" fg:w="2"/><text x="71.6786%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5079%" y="469" width="0.0794%" height="15" fill="rgb(217,149,8)" fg:x="901" fg:w="1"/><text x="71.7579%" y="479.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.79%)</title><rect x="70.8730%" y="661" width="0.7937%" height="15" fill="rgb(209,183,11)" fg:x="893" fg:w="10"/><text x="71.1230%" y="671.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.79%)</title><rect x="70.8730%" y="645" width="0.7937%" height="15" fill="rgb(208,55,20)" fg:x="893" fg:w="10"/><text x="71.1230%" y="655.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.79%)</title><rect x="70.8730%" y="629" width="0.7937%" height="15" fill="rgb(218,39,14)" fg:x="893" fg:w="10"/><text x="71.1230%" y="639.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (9 samples, 0.71%)</title><rect x="70.9524%" y="613" width="0.7143%" height="15" fill="rgb(216,169,33)" fg:x="894" fg:w="9"/><text x="71.2024%" y="623.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (8 samples, 0.63%)</title><rect x="71.0317%" y="597" width="0.6349%" height="15" fill="rgb(233,80,24)" fg:x="895" fg:w="8"/><text x="71.2817%" y="607.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="71.3492%" y="581" width="0.3175%" height="15" fill="rgb(213,179,31)" fg:x="899" fg:w="4"/><text x="71.5992%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (4 samples, 0.32%)</title><rect x="71.3492%" y="565" width="0.3175%" height="15" fill="rgb(209,19,5)" fg:x="899" fg:w="4"/><text x="71.5992%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="71.3492%" y="549" width="0.3175%" height="15" fill="rgb(219,18,35)" fg:x="899" fg:w="4"/><text x="71.5992%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="71.3492%" y="533" width="0.3175%" height="15" fill="rgb(209,169,16)" fg:x="899" fg:w="4"/><text x="71.5992%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="71.3492%" y="517" width="0.3175%" height="15" fill="rgb(245,90,51)" fg:x="899" fg:w="4"/><text x="71.5992%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="71.5873%" y="501" width="0.0794%" height="15" fill="rgb(220,99,45)" fg:x="902" fg:w="1"/><text x="71.8373%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5873%" y="485" width="0.0794%" height="15" fill="rgb(249,89,25)" fg:x="902" fg:w="1"/><text x="71.8373%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="71.6667%" y="645" width="0.0794%" height="15" fill="rgb(239,193,0)" fg:x="903" fg:w="1"/><text x="71.9167%" y="655.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="71.6667%" y="629" width="0.0794%" height="15" fill="rgb(231,126,1)" fg:x="903" fg:w="1"/><text x="71.9167%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="71.6667%" y="613" width="0.0794%" height="15" fill="rgb(243,166,3)" fg:x="903" fg:w="1"/><text x="71.9167%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.6667%" y="597" width="0.0794%" height="15" fill="rgb(223,22,34)" fg:x="903" fg:w="1"/><text x="71.9167%" y="607.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6667%" y="581" width="0.0794%" height="15" fill="rgb(251,52,51)" fg:x="903" fg:w="1"/><text x="71.9167%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6667%" y="565" width="0.0794%" height="15" fill="rgb(221,165,28)" fg:x="903" fg:w="1"/><text x="71.9167%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.6667%" y="549" width="0.0794%" height="15" fill="rgb(218,121,47)" fg:x="903" fg:w="1"/><text x="71.9167%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6667%" y="533" width="0.0794%" height="15" fill="rgb(209,120,9)" fg:x="903" fg:w="1"/><text x="71.9167%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6667%" y="517" width="0.0794%" height="15" fill="rgb(236,68,12)" fg:x="903" fg:w="1"/><text x="71.9167%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6667%" y="501" width="0.0794%" height="15" fill="rgb(225,194,26)" fg:x="903" fg:w="1"/><text x="71.9167%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6667%" y="485" width="0.0794%" height="15" fill="rgb(231,84,39)" fg:x="903" fg:w="1"/><text x="71.9167%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6667%" y="469" width="0.0794%" height="15" fill="rgb(210,11,45)" fg:x="903" fg:w="1"/><text x="71.9167%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6667%" y="453" width="0.0794%" height="15" fill="rgb(224,54,52)" fg:x="903" fg:w="1"/><text x="71.9167%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6667%" y="437" width="0.0794%" height="15" fill="rgb(238,102,14)" fg:x="903" fg:w="1"/><text x="71.9167%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6667%" y="421" width="0.0794%" height="15" fill="rgb(243,160,52)" fg:x="903" fg:w="1"/><text x="71.9167%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6667%" y="405" width="0.0794%" height="15" fill="rgb(216,114,19)" fg:x="903" fg:w="1"/><text x="71.9167%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6667%" y="389" width="0.0794%" height="15" fill="rgb(244,166,37)" fg:x="903" fg:w="1"/><text x="71.9167%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6667%" y="373" width="0.0794%" height="15" fill="rgb(246,29,44)" fg:x="903" fg:w="1"/><text x="71.9167%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6667%" y="357" width="0.0794%" height="15" fill="rgb(215,56,53)" fg:x="903" fg:w="1"/><text x="71.9167%" y="367.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="71.7460%" y="629" width="0.0794%" height="15" fill="rgb(217,60,2)" fg:x="904" fg:w="1"/><text x="71.9960%" y="639.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="71.7460%" y="613" width="0.0794%" height="15" fill="rgb(207,26,24)" fg:x="904" fg:w="1"/><text x="71.9960%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="71.7460%" y="597" width="0.0794%" height="15" fill="rgb(252,210,15)" fg:x="904" fg:w="1"/><text x="71.9960%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.7460%" y="581" width="0.0794%" height="15" fill="rgb(253,209,26)" fg:x="904" fg:w="1"/><text x="71.9960%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.7460%" y="565" width="0.0794%" height="15" fill="rgb(238,170,14)" fg:x="904" fg:w="1"/><text x="71.9960%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7460%" y="549" width="0.0794%" height="15" fill="rgb(216,178,15)" fg:x="904" fg:w="1"/><text x="71.9960%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7460%" y="533" width="0.0794%" height="15" fill="rgb(250,197,2)" fg:x="904" fg:w="1"/><text x="71.9960%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7460%" y="517" width="0.0794%" height="15" fill="rgb(212,70,42)" fg:x="904" fg:w="1"/><text x="71.9960%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="71.6667%" y="661" width="0.2381%" height="15" fill="rgb(227,213,9)" fg:x="903" fg:w="3"/><text x="71.9167%" y="671.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="71.7460%" y="645" width="0.1587%" height="15" fill="rgb(245,99,25)" fg:x="904" fg:w="2"/><text x="71.9960%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="71.8254%" y="629" width="0.0794%" height="15" fill="rgb(250,82,29)" fg:x="905" fg:w="1"/><text x="72.0754%" y="639.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="71.8254%" y="613" width="0.0794%" height="15" fill="rgb(241,226,54)" fg:x="905" fg:w="1"/><text x="72.0754%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="71.8254%" y="597" width="0.0794%" height="15" fill="rgb(221,99,41)" fg:x="905" fg:w="1"/><text x="72.0754%" y="607.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="71.9048%" y="613" width="0.0794%" height="15" fill="rgb(213,90,21)" fg:x="906" fg:w="1"/><text x="72.1548%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.9048%" y="597" width="0.0794%" height="15" fill="rgb(205,208,24)" fg:x="906" fg:w="1"/><text x="72.1548%" y="607.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="71.9048%" y="581" width="0.0794%" height="15" fill="rgb(246,31,12)" fg:x="906" fg:w="1"/><text x="72.1548%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (2 samples, 0.16%)</title><rect x="71.9048%" y="661" width="0.1587%" height="15" fill="rgb(213,154,6)" fg:x="906" fg:w="2"/><text x="72.1548%" y="671.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="71.9048%" y="645" width="0.1587%" height="15" fill="rgb(222,163,29)" fg:x="906" fg:w="2"/><text x="72.1548%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="71.9048%" y="629" width="0.1587%" height="15" fill="rgb(227,201,8)" fg:x="906" fg:w="2"/><text x="72.1548%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="71.9841%" y="613" width="0.0794%" height="15" fill="rgb(233,9,32)" fg:x="907" fg:w="1"/><text x="72.2341%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="71.9841%" y="597" width="0.0794%" height="15" fill="rgb(217,54,24)" fg:x="907" fg:w="1"/><text x="72.2341%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9841%" y="581" width="0.0794%" height="15" fill="rgb(235,192,0)" fg:x="907" fg:w="1"/><text x="72.2341%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9841%" y="565" width="0.0794%" height="15" fill="rgb(235,45,9)" fg:x="907" fg:w="1"/><text x="72.2341%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9841%" y="549" width="0.0794%" height="15" fill="rgb(246,42,40)" fg:x="907" fg:w="1"/><text x="72.2341%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9841%" y="533" width="0.0794%" height="15" fill="rgb(248,111,24)" fg:x="907" fg:w="1"/><text x="72.2341%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="71.9841%" y="517" width="0.0794%" height="15" fill="rgb(249,65,22)" fg:x="907" fg:w="1"/><text x="72.2341%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9841%" y="501" width="0.0794%" height="15" fill="rgb(238,111,51)" fg:x="907" fg:w="1"/><text x="72.2341%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9841%" y="485" width="0.0794%" height="15" fill="rgb(250,118,22)" fg:x="907" fg:w="1"/><text x="72.2341%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9841%" y="469" width="0.0794%" height="15" fill="rgb(234,84,26)" fg:x="907" fg:w="1"/><text x="72.2341%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="71.9841%" y="453" width="0.0794%" height="15" fill="rgb(243,172,12)" fg:x="907" fg:w="1"/><text x="72.2341%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="71.9841%" y="437" width="0.0794%" height="15" fill="rgb(236,150,49)" fg:x="907" fg:w="1"/><text x="72.2341%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="71.9841%" y="421" width="0.0794%" height="15" fill="rgb(225,197,26)" fg:x="907" fg:w="1"/><text x="72.2341%" y="431.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="71.9841%" y="405" width="0.0794%" height="15" fill="rgb(214,17,42)" fg:x="907" fg:w="1"/><text x="72.2341%" y="415.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="71.9841%" y="389" width="0.0794%" height="15" fill="rgb(224,165,40)" fg:x="907" fg:w="1"/><text x="72.2341%" y="399.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="72.0635%" y="597" width="0.0794%" height="15" fill="rgb(246,100,4)" fg:x="908" fg:w="1"/><text x="72.3135%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="72.0635%" y="581" width="0.0794%" height="15" fill="rgb(222,103,0)" fg:x="908" fg:w="1"/><text x="72.3135%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.0635%" y="565" width="0.0794%" height="15" fill="rgb(227,189,26)" fg:x="908" fg:w="1"/><text x="72.3135%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="72.0635%" y="549" width="0.0794%" height="15" fill="rgb(214,202,17)" fg:x="908" fg:w="1"/><text x="72.3135%" y="559.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="72.0635%" y="533" width="0.0794%" height="15" fill="rgb(229,111,3)" fg:x="908" fg:w="1"/><text x="72.3135%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0635%" y="517" width="0.0794%" height="15" fill="rgb(229,172,15)" fg:x="908" fg:w="1"/><text x="72.3135%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0635%" y="501" width="0.0794%" height="15" fill="rgb(230,224,35)" fg:x="908" fg:w="1"/><text x="72.3135%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0635%" y="485" width="0.0794%" height="15" fill="rgb(251,141,6)" fg:x="908" fg:w="1"/><text x="72.3135%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0635%" y="469" width="0.0794%" height="15" fill="rgb(225,208,6)" fg:x="908" fg:w="1"/><text x="72.3135%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0635%" y="453" width="0.0794%" height="15" fill="rgb(246,181,16)" fg:x="908" fg:w="1"/><text x="72.3135%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="72.0635%" y="645" width="0.2381%" height="15" fill="rgb(227,129,36)" fg:x="908" fg:w="3"/><text x="72.3135%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="72.0635%" y="629" width="0.2381%" height="15" fill="rgb(248,117,24)" fg:x="908" fg:w="3"/><text x="72.3135%" y="639.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="72.0635%" y="613" width="0.2381%" height="15" fill="rgb(214,185,35)" fg:x="908" fg:w="3"/><text x="72.3135%" y="623.50"></text></g><g><title>plugins_core::build::Build::leads_to (2 samples, 0.16%)</title><rect x="72.1429%" y="597" width="0.1587%" height="15" fill="rgb(236,150,34)" fg:x="909" fg:w="2"/><text x="72.3929%" y="607.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="72.1429%" y="581" width="0.1587%" height="15" fill="rgb(243,228,27)" fg:x="909" fg:w="2"/><text x="72.3929%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="72.1429%" y="565" width="0.1587%" height="15" fill="rgb(245,77,44)" fg:x="909" fg:w="2"/><text x="72.3929%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="72.1429%" y="549" width="0.1587%" height="15" fill="rgb(235,214,42)" fg:x="909" fg:w="2"/><text x="72.3929%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.1429%" y="533" width="0.1587%" height="15" fill="rgb(221,74,3)" fg:x="909" fg:w="2"/><text x="72.3929%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="72.1429%" y="517" width="0.1587%" height="15" fill="rgb(206,121,29)" fg:x="909" fg:w="2"/><text x="72.3929%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="72.1429%" y="501" width="0.1587%" height="15" fill="rgb(249,131,53)" fg:x="909" fg:w="2"/><text x="72.3929%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.1429%" y="485" width="0.1587%" height="15" fill="rgb(236,170,29)" fg:x="909" fg:w="2"/><text x="72.3929%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="72.1429%" y="469" width="0.1587%" height="15" fill="rgb(247,96,15)" fg:x="909" fg:w="2"/><text x="72.3929%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2222%" y="453" width="0.0794%" height="15" fill="rgb(211,210,7)" fg:x="910" fg:w="1"/><text x="72.4722%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.2222%" y="437" width="0.0794%" height="15" fill="rgb(240,88,50)" fg:x="910" fg:w="1"/><text x="72.4722%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2222%" y="421" width="0.0794%" height="15" fill="rgb(209,229,26)" fg:x="910" fg:w="1"/><text x="72.4722%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.2222%" y="405" width="0.0794%" height="15" fill="rgb(210,68,23)" fg:x="910" fg:w="1"/><text x="72.4722%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.2222%" y="389" width="0.0794%" height="15" fill="rgb(229,180,13)" fg:x="910" fg:w="1"/><text x="72.4722%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.2222%" y="373" width="0.0794%" height="15" fill="rgb(236,53,44)" fg:x="910" fg:w="1"/><text x="72.4722%" y="383.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.2222%" y="357" width="0.0794%" height="15" fill="rgb(244,214,29)" fg:x="910" fg:w="1"/><text x="72.4722%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2222%" y="341" width="0.0794%" height="15" fill="rgb(220,75,29)" fg:x="910" fg:w="1"/><text x="72.4722%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.2222%" y="325" width="0.0794%" height="15" fill="rgb(214,183,37)" fg:x="910" fg:w="1"/><text x="72.4722%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.2222%" y="309" width="0.0794%" height="15" fill="rgb(239,117,29)" fg:x="910" fg:w="1"/><text x="72.4722%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.2222%" y="293" width="0.0794%" height="15" fill="rgb(237,171,35)" fg:x="910" fg:w="1"/><text x="72.4722%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.2222%" y="277" width="0.0794%" height="15" fill="rgb(229,178,53)" fg:x="910" fg:w="1"/><text x="72.4722%" y="287.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.2222%" y="261" width="0.0794%" height="15" fill="rgb(210,102,19)" fg:x="910" fg:w="1"/><text x="72.4722%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2222%" y="245" width="0.0794%" height="15" fill="rgb(235,127,22)" fg:x="910" fg:w="1"/><text x="72.4722%" y="255.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="72.3016%" y="629" width="0.0794%" height="15" fill="rgb(244,31,31)" fg:x="911" fg:w="1"/><text x="72.5516%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3016%" y="613" width="0.0794%" height="15" fill="rgb(231,43,21)" fg:x="911" fg:w="1"/><text x="72.5516%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3016%" y="597" width="0.0794%" height="15" fill="rgb(217,131,35)" fg:x="911" fg:w="1"/><text x="72.5516%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="72.3016%" y="581" width="0.0794%" height="15" fill="rgb(221,149,4)" fg:x="911" fg:w="1"/><text x="72.5516%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3016%" y="565" width="0.0794%" height="15" fill="rgb(232,170,28)" fg:x="911" fg:w="1"/><text x="72.5516%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.3810%" y="517" width="0.0794%" height="15" fill="rgb(238,56,10)" fg:x="912" fg:w="1"/><text x="72.6310%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.3810%" y="501" width="0.0794%" height="15" fill="rgb(235,196,14)" fg:x="912" fg:w="1"/><text x="72.6310%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.3810%" y="485" width="0.0794%" height="15" fill="rgb(216,45,48)" fg:x="912" fg:w="1"/><text x="72.6310%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.3810%" y="469" width="0.0794%" height="15" fill="rgb(238,213,17)" fg:x="912" fg:w="1"/><text x="72.6310%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="72.4603%" y="501" width="0.0794%" height="15" fill="rgb(212,13,2)" fg:x="913" fg:w="1"/><text x="72.7103%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.4603%" y="485" width="0.0794%" height="15" fill="rgb(240,114,20)" fg:x="913" fg:w="1"/><text x="72.7103%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.4603%" y="469" width="0.0794%" height="15" fill="rgb(228,41,40)" fg:x="913" fg:w="1"/><text x="72.7103%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.4603%" y="453" width="0.0794%" height="15" fill="rgb(244,132,35)" fg:x="913" fg:w="1"/><text x="72.7103%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.5397%" y="485" width="0.0794%" height="15" fill="rgb(253,189,4)" fg:x="914" fg:w="1"/><text x="72.7897%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="72.5397%" y="501" width="0.2381%" height="15" fill="rgb(224,37,19)" fg:x="914" fg:w="3"/><text x="72.7897%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="72.6190%" y="485" width="0.1587%" height="15" fill="rgb(235,223,18)" fg:x="915" fg:w="2"/><text x="72.8690%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6984%" y="469" width="0.0794%" height="15" fill="rgb(235,163,25)" fg:x="916" fg:w="1"/><text x="72.9484%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="72.6984%" y="453" width="0.0794%" height="15" fill="rgb(217,145,28)" fg:x="916" fg:w="1"/><text x="72.9484%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.6984%" y="437" width="0.0794%" height="15" fill="rgb(223,223,32)" fg:x="916" fg:w="1"/><text x="72.9484%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.6984%" y="421" width="0.0794%" height="15" fill="rgb(227,189,39)" fg:x="916" fg:w="1"/><text x="72.9484%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.48%)</title><rect x="72.3810%" y="549" width="0.4762%" height="15" fill="rgb(248,10,22)" fg:x="912" fg:w="6"/><text x="72.6310%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="72.3810%" y="533" width="0.4762%" height="15" fill="rgb(248,46,39)" fg:x="912" fg:w="6"/><text x="72.6310%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="72.4603%" y="517" width="0.3968%" height="15" fill="rgb(248,113,48)" fg:x="913" fg:w="5"/><text x="72.7103%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.7778%" y="501" width="0.0794%" height="15" fill="rgb(245,16,25)" fg:x="917" fg:w="1"/><text x="73.0278%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.7778%" y="485" width="0.0794%" height="15" fill="rgb(249,152,16)" fg:x="917" fg:w="1"/><text x="73.0278%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7778%" y="469" width="0.0794%" height="15" fill="rgb(250,16,1)" fg:x="917" fg:w="1"/><text x="73.0278%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8571%" y="549" width="0.0794%" height="15" fill="rgb(249,138,3)" fg:x="918" fg:w="1"/><text x="73.1071%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.8571%" y="533" width="0.0794%" height="15" fill="rgb(227,71,41)" fg:x="918" fg:w="1"/><text x="73.1071%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.8571%" y="517" width="0.0794%" height="15" fill="rgb(209,184,23)" fg:x="918" fg:w="1"/><text x="73.1071%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.8571%" y="501" width="0.0794%" height="15" fill="rgb(223,215,31)" fg:x="918" fg:w="1"/><text x="73.1071%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.9365%" y="437" width="0.1587%" height="15" fill="rgb(210,146,28)" fg:x="919" fg:w="2"/><text x="73.1865%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.9365%" y="421" width="0.1587%" height="15" fill="rgb(209,183,41)" fg:x="919" fg:w="2"/><text x="73.1865%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.0159%" y="405" width="0.0794%" height="15" fill="rgb(209,224,45)" fg:x="920" fg:w="1"/><text x="73.2659%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.0159%" y="389" width="0.0794%" height="15" fill="rgb(224,209,51)" fg:x="920" fg:w="1"/><text x="73.2659%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0159%" y="373" width="0.0794%" height="15" fill="rgb(223,17,39)" fg:x="920" fg:w="1"/><text x="73.2659%" y="383.50"></text></g><g><title>engine::session::Session::flush (11 samples, 0.87%)</title><rect x="72.3016%" y="645" width="0.8730%" height="15" fill="rgb(234,204,37)" fg:x="911" fg:w="11"/><text x="72.5516%" y="655.50"></text></g><g><title>engine::session::Session::save_changes (10 samples, 0.79%)</title><rect x="72.3810%" y="629" width="0.7937%" height="15" fill="rgb(236,120,5)" fg:x="912" fg:w="10"/><text x="72.6310%" y="639.50"></text></g><g><title>engine::session::state::State::close (10 samples, 0.79%)</title><rect x="72.3810%" y="613" width="0.7937%" height="15" fill="rgb(248,97,27)" fg:x="912" fg:w="10"/><text x="72.6310%" y="623.50"></text></g><g><title>engine::session::state::State::flush_entities (10 samples, 0.79%)</title><rect x="72.3810%" y="597" width="0.7937%" height="15" fill="rgb(240,66,17)" fg:x="912" fg:w="10"/><text x="72.6310%" y="607.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (10 samples, 0.79%)</title><rect x="72.3810%" y="581" width="0.7937%" height="15" fill="rgb(210,79,3)" fg:x="912" fg:w="10"/><text x="72.6310%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (10 samples, 0.79%)</title><rect x="72.3810%" y="565" width="0.7937%" height="15" fill="rgb(214,176,27)" fg:x="912" fg:w="10"/><text x="72.6310%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="72.9365%" y="549" width="0.2381%" height="15" fill="rgb(235,185,3)" fg:x="919" fg:w="3"/><text x="73.1865%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="72.9365%" y="533" width="0.2381%" height="15" fill="rgb(227,24,12)" fg:x="919" fg:w="3"/><text x="73.1865%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="72.9365%" y="517" width="0.2381%" height="15" fill="rgb(252,169,48)" fg:x="919" fg:w="3"/><text x="73.1865%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="72.9365%" y="501" width="0.2381%" height="15" fill="rgb(212,65,1)" fg:x="919" fg:w="3"/><text x="73.1865%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (3 samples, 0.24%)</title><rect x="72.9365%" y="485" width="0.2381%" height="15" fill="rgb(242,39,24)" fg:x="919" fg:w="3"/><text x="73.1865%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.9365%" y="469" width="0.2381%" height="15" fill="rgb(249,32,23)" fg:x="919" fg:w="3"/><text x="73.1865%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.9365%" y="453" width="0.2381%" height="15" fill="rgb(251,195,23)" fg:x="919" fg:w="3"/><text x="73.1865%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0952%" y="437" width="0.0794%" height="15" fill="rgb(236,174,8)" fg:x="921" fg:w="1"/><text x="73.3452%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.1746%" y="629" width="0.0794%" height="15" fill="rgb(220,197,8)" fg:x="922" fg:w="1"/><text x="73.4246%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="73.1746%" y="613" width="0.0794%" height="15" fill="rgb(240,108,37)" fg:x="922" fg:w="1"/><text x="73.4246%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="73.1746%" y="597" width="0.0794%" height="15" fill="rgb(232,176,24)" fg:x="922" fg:w="1"/><text x="73.4246%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="73.1746%" y="581" width="0.0794%" height="15" fill="rgb(243,35,29)" fg:x="922" fg:w="1"/><text x="73.4246%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="73.1746%" y="565" width="0.0794%" height="15" fill="rgb(210,37,18)" fg:x="922" fg:w="1"/><text x="73.4246%" y="575.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="73.1746%" y="549" width="0.0794%" height="15" fill="rgb(224,184,40)" fg:x="922" fg:w="1"/><text x="73.4246%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.1746%" y="533" width="0.0794%" height="15" fill="rgb(236,39,29)" fg:x="922" fg:w="1"/><text x="73.4246%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.1746%" y="517" width="0.0794%" height="15" fill="rgb(232,48,39)" fg:x="922" fg:w="1"/><text x="73.4246%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="73.2540%" y="629" width="0.0794%" height="15" fill="rgb(236,34,42)" fg:x="923" fg:w="1"/><text x="73.5040%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2540%" y="613" width="0.0794%" height="15" fill="rgb(243,106,37)" fg:x="923" fg:w="1"/><text x="73.5040%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;plugins_core::carrying::model::Containing&gt;&gt; (1 samples, 0.08%)</title><rect x="73.3333%" y="613" width="0.0794%" height="15" fill="rgb(218,96,6)" fg:x="924" fg:w="1"/><text x="73.5833%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="73.3333%" y="597" width="0.0794%" height="15" fill="rgb(235,130,12)" fg:x="924" fg:w="1"/><text x="73.5833%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.3333%" y="581" width="0.0794%" height="15" fill="rgb(231,95,0)" fg:x="924" fg:w="1"/><text x="73.5833%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="73.4127%" y="613" width="0.0794%" height="15" fill="rgb(228,12,23)" fg:x="925" fg:w="1"/><text x="73.6627%" y="623.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="73.4127%" y="597" width="0.0794%" height="15" fill="rgb(216,12,1)" fg:x="925" fg:w="1"/><text x="73.6627%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="73.4127%" y="581" width="0.0794%" height="15" fill="rgb(219,59,3)" fg:x="925" fg:w="1"/><text x="73.6627%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.4127%" y="565" width="0.0794%" height="15" fill="rgb(215,208,46)" fg:x="925" fg:w="1"/><text x="73.6627%" y="575.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.4127%" y="549" width="0.0794%" height="15" fill="rgb(254,224,29)" fg:x="925" fg:w="1"/><text x="73.6627%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4127%" y="533" width="0.0794%" height="15" fill="rgb(232,14,29)" fg:x="925" fg:w="1"/><text x="73.6627%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4127%" y="517" width="0.0794%" height="15" fill="rgb(208,45,52)" fg:x="925" fg:w="1"/><text x="73.6627%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4127%" y="501" width="0.0794%" height="15" fill="rgb(234,191,28)" fg:x="925" fg:w="1"/><text x="73.6627%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4127%" y="485" width="0.0794%" height="15" fill="rgb(244,67,43)" fg:x="925" fg:w="1"/><text x="73.6627%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4127%" y="469" width="0.0794%" height="15" fill="rgb(236,189,24)" fg:x="925" fg:w="1"/><text x="73.6627%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4127%" y="453" width="0.0794%" height="15" fill="rgb(239,214,33)" fg:x="925" fg:w="1"/><text x="73.6627%" y="463.50"></text></g><g><title>plugins_core::build::Build::holding (5 samples, 0.40%)</title><rect x="73.1746%" y="645" width="0.3968%" height="15" fill="rgb(226,176,41)" fg:x="922" fg:w="5"/><text x="73.4246%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="73.3333%" y="629" width="0.2381%" height="15" fill="rgb(248,47,8)" fg:x="924" fg:w="3"/><text x="73.5833%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="73.4921%" y="613" width="0.0794%" height="15" fill="rgb(218,81,44)" fg:x="926" fg:w="1"/><text x="73.7421%" y="623.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4921%" y="597" width="0.0794%" height="15" fill="rgb(213,98,6)" fg:x="926" fg:w="1"/><text x="73.7421%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4921%" y="581" width="0.0794%" height="15" fill="rgb(222,85,22)" fg:x="926" fg:w="1"/><text x="73.7421%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.4921%" y="565" width="0.0794%" height="15" fill="rgb(239,46,39)" fg:x="926" fg:w="1"/><text x="73.7421%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.4921%" y="549" width="0.0794%" height="15" fill="rgb(237,12,29)" fg:x="926" fg:w="1"/><text x="73.7421%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.4921%" y="533" width="0.0794%" height="15" fill="rgb(214,77,8)" fg:x="926" fg:w="1"/><text x="73.7421%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.4921%" y="517" width="0.0794%" height="15" fill="rgb(217,168,37)" fg:x="926" fg:w="1"/><text x="73.7421%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4921%" y="501" width="0.0794%" height="15" fill="rgb(221,217,23)" fg:x="926" fg:w="1"/><text x="73.7421%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.4921%" y="485" width="0.0794%" height="15" fill="rgb(243,229,36)" fg:x="926" fg:w="1"/><text x="73.7421%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.4921%" y="469" width="0.0794%" height="15" fill="rgb(251,163,40)" fg:x="926" fg:w="1"/><text x="73.7421%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.4921%" y="453" width="0.0794%" height="15" fill="rgb(237,222,12)" fg:x="926" fg:w="1"/><text x="73.7421%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.4921%" y="437" width="0.0794%" height="15" fill="rgb(248,132,6)" fg:x="926" fg:w="1"/><text x="73.7421%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.4921%" y="421" width="0.0794%" height="15" fill="rgb(227,167,50)" fg:x="926" fg:w="1"/><text x="73.7421%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.4921%" y="405" width="0.0794%" height="15" fill="rgb(242,84,37)" fg:x="926" fg:w="1"/><text x="73.7421%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.5714%" y="629" width="0.0794%" height="15" fill="rgb(212,4,50)" fg:x="927" fg:w="1"/><text x="73.8214%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.5714%" y="613" width="0.0794%" height="15" fill="rgb(230,228,32)" fg:x="927" fg:w="1"/><text x="73.8214%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.5714%" y="597" width="0.0794%" height="15" fill="rgb(248,217,23)" fg:x="927" fg:w="1"/><text x="73.8214%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.5714%" y="581" width="0.0794%" height="15" fill="rgb(238,197,32)" fg:x="927" fg:w="1"/><text x="73.8214%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.5714%" y="565" width="0.0794%" height="15" fill="rgb(236,106,1)" fg:x="927" fg:w="1"/><text x="73.8214%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5714%" y="549" width="0.0794%" height="15" fill="rgb(219,228,13)" fg:x="927" fg:w="1"/><text x="73.8214%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5714%" y="533" width="0.0794%" height="15" fill="rgb(238,30,35)" fg:x="927" fg:w="1"/><text x="73.8214%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.5714%" y="517" width="0.0794%" height="15" fill="rgb(236,70,23)" fg:x="927" fg:w="1"/><text x="73.8214%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="73.6508%" y="613" width="0.0794%" height="15" fill="rgb(249,104,48)" fg:x="928" fg:w="1"/><text x="73.9008%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7302%" y="597" width="0.0794%" height="15" fill="rgb(254,117,50)" fg:x="929" fg:w="1"/><text x="73.9802%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.7302%" y="581" width="0.0794%" height="15" fill="rgb(223,152,4)" fg:x="929" fg:w="1"/><text x="73.9802%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="73.7302%" y="565" width="0.0794%" height="15" fill="rgb(245,6,2)" fg:x="929" fg:w="1"/><text x="73.9802%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (23 samples, 1.83%)</title><rect x="72.0635%" y="661" width="1.8254%" height="15" fill="rgb(249,150,24)" fg:x="908" fg:w="23"/><text x="72.3135%" y="671.50">p..</text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="73.5714%" y="645" width="0.3175%" height="15" fill="rgb(228,185,42)" fg:x="927" fg:w="4"/><text x="73.8214%" y="655.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.24%)</title><rect x="73.6508%" y="629" width="0.2381%" height="15" fill="rgb(226,39,33)" fg:x="928" fg:w="3"/><text x="73.9008%" y="639.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (2 samples, 0.16%)</title><rect x="73.7302%" y="613" width="0.1587%" height="15" fill="rgb(221,166,19)" fg:x="929" fg:w="2"/><text x="73.9802%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8095%" y="597" width="0.0794%" height="15" fill="rgb(209,109,2)" fg:x="930" fg:w="1"/><text x="74.0595%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8095%" y="581" width="0.0794%" height="15" fill="rgb(252,216,26)" fg:x="930" fg:w="1"/><text x="74.0595%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="73.8095%" y="565" width="0.0794%" height="15" fill="rgb(227,173,36)" fg:x="930" fg:w="1"/><text x="74.0595%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.8095%" y="549" width="0.0794%" height="15" fill="rgb(209,90,7)" fg:x="930" fg:w="1"/><text x="74.0595%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.8095%" y="533" width="0.0794%" height="15" fill="rgb(250,194,11)" fg:x="930" fg:w="1"/><text x="74.0595%" y="543.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="73.8889%" y="661" width="0.0794%" height="15" fill="rgb(220,72,50)" fg:x="931" fg:w="1"/><text x="74.1389%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.8889%" y="645" width="0.0794%" height="15" fill="rgb(222,106,48)" fg:x="931" fg:w="1"/><text x="74.1389%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="73.9683%" y="645" width="0.0794%" height="15" fill="rgb(216,220,45)" fg:x="932" fg:w="1"/><text x="74.2183%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="73.9683%" y="629" width="0.0794%" height="15" fill="rgb(234,112,18)" fg:x="932" fg:w="1"/><text x="74.2183%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9683%" y="613" width="0.0794%" height="15" fill="rgb(206,179,9)" fg:x="932" fg:w="1"/><text x="74.2183%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="73.9683%" y="597" width="0.0794%" height="15" fill="rgb(215,115,40)" fg:x="932" fg:w="1"/><text x="74.2183%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9683%" y="581" width="0.0794%" height="15" fill="rgb(222,69,34)" fg:x="932" fg:w="1"/><text x="74.2183%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9683%" y="565" width="0.0794%" height="15" fill="rgb(209,161,10)" fg:x="932" fg:w="1"/><text x="74.2183%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.9683%" y="549" width="0.0794%" height="15" fill="rgb(217,6,38)" fg:x="932" fg:w="1"/><text x="74.2183%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9683%" y="533" width="0.0794%" height="15" fill="rgb(229,229,48)" fg:x="932" fg:w="1"/><text x="74.2183%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.9683%" y="517" width="0.0794%" height="15" fill="rgb(225,21,28)" fg:x="932" fg:w="1"/><text x="74.2183%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9683%" y="501" width="0.0794%" height="15" fill="rgb(206,33,13)" fg:x="932" fg:w="1"/><text x="74.2183%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9683%" y="485" width="0.0794%" height="15" fill="rgb(242,178,17)" fg:x="932" fg:w="1"/><text x="74.2183%" y="495.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (42 samples, 3.33%)</title><rect x="70.7937%" y="677" width="3.3333%" height="15" fill="rgb(220,162,5)" fg:x="892" fg:w="42"/><text x="71.0437%" y="687.50">&lt;te..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (2 samples, 0.16%)</title><rect x="73.9683%" y="661" width="0.1587%" height="15" fill="rgb(210,33,43)" fg:x="932" fg:w="2"/><text x="74.2183%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="74.0476%" y="645" width="0.0794%" height="15" fill="rgb(216,116,54)" fg:x="933" fg:w="1"/><text x="74.2976%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="74.0476%" y="629" width="0.0794%" height="15" fill="rgb(249,92,24)" fg:x="933" fg:w="1"/><text x="74.2976%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.0476%" y="613" width="0.0794%" height="15" fill="rgb(231,189,14)" fg:x="933" fg:w="1"/><text x="74.2976%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="74.1270%" y="677" width="0.0794%" height="15" fill="rgb(230,8,41)" fg:x="934" fg:w="1"/><text x="74.3770%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="74.2063%" y="613" width="0.0794%" height="15" fill="rgb(249,7,27)" fg:x="935" fg:w="1"/><text x="74.4563%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="74.2063%" y="597" width="0.0794%" height="15" fill="rgb(232,86,5)" fg:x="935" fg:w="1"/><text x="74.4563%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.2063%" y="581" width="0.0794%" height="15" fill="rgb(224,175,18)" fg:x="935" fg:w="1"/><text x="74.4563%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3651%" y="565" width="0.1587%" height="15" fill="rgb(220,129,12)" fg:x="937" fg:w="2"/><text x="74.6151%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.4444%" y="549" width="0.0794%" height="15" fill="rgb(210,19,36)" fg:x="938" fg:w="1"/><text x="74.6944%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="74.2857%" y="597" width="0.3175%" height="15" fill="rgb(219,96,14)" fg:x="936" fg:w="4"/><text x="74.5357%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="74.3651%" y="581" width="0.2381%" height="15" fill="rgb(249,106,1)" fg:x="937" fg:w="3"/><text x="74.6151%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="74.5238%" y="565" width="0.0794%" height="15" fill="rgb(249,155,20)" fg:x="939" fg:w="1"/><text x="74.7738%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="74.5238%" y="549" width="0.0794%" height="15" fill="rgb(244,168,9)" fg:x="939" fg:w="1"/><text x="74.7738%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.5238%" y="533" width="0.0794%" height="15" fill="rgb(216,23,50)" fg:x="939" fg:w="1"/><text x="74.7738%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="74.5238%" y="517" width="0.0794%" height="15" fill="rgb(224,219,20)" fg:x="939" fg:w="1"/><text x="74.7738%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6032%" y="597" width="0.0794%" height="15" fill="rgb(222,156,15)" fg:x="940" fg:w="1"/><text x="74.8532%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.6032%" y="581" width="0.0794%" height="15" fill="rgb(231,97,17)" fg:x="940" fg:w="1"/><text x="74.8532%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.6032%" y="565" width="0.0794%" height="15" fill="rgb(218,70,48)" fg:x="940" fg:w="1"/><text x="74.8532%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6032%" y="549" width="0.0794%" height="15" fill="rgb(212,196,52)" fg:x="940" fg:w="1"/><text x="74.8532%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.6825%" y="517" width="0.0794%" height="15" fill="rgb(243,203,18)" fg:x="941" fg:w="1"/><text x="74.9325%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.7619%" y="501" width="0.0794%" height="15" fill="rgb(252,125,41)" fg:x="942" fg:w="1"/><text x="75.0119%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="74.8413%" y="485" width="0.1587%" height="15" fill="rgb(223,180,33)" fg:x="943" fg:w="2"/><text x="75.0913%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="74.8413%" y="469" width="0.1587%" height="15" fill="rgb(254,159,46)" fg:x="943" fg:w="2"/><text x="75.0913%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.8413%" y="453" width="0.1587%" height="15" fill="rgb(254,38,10)" fg:x="943" fg:w="2"/><text x="75.0913%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="74.6825%" y="565" width="0.3968%" height="15" fill="rgb(208,217,32)" fg:x="941" fg:w="5"/><text x="74.9325%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="74.6825%" y="549" width="0.3968%" height="15" fill="rgb(221,120,13)" fg:x="941" fg:w="5"/><text x="74.9325%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="74.6825%" y="533" width="0.3968%" height="15" fill="rgb(246,54,52)" fg:x="941" fg:w="5"/><text x="74.9325%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="74.7619%" y="517" width="0.3175%" height="15" fill="rgb(242,34,25)" fg:x="942" fg:w="4"/><text x="75.0119%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="74.8413%" y="501" width="0.2381%" height="15" fill="rgb(247,209,9)" fg:x="943" fg:w="3"/><text x="75.0913%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0000%" y="485" width="0.0794%" height="15" fill="rgb(228,71,26)" fg:x="945" fg:w="1"/><text x="75.2500%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.0000%" y="469" width="0.0794%" height="15" fill="rgb(222,145,49)" fg:x="945" fg:w="1"/><text x="75.2500%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0000%" y="453" width="0.0794%" height="15" fill="rgb(218,121,17)" fg:x="945" fg:w="1"/><text x="75.2500%" y="463.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.63%)</title><rect x="74.6825%" y="581" width="0.6349%" height="15" fill="rgb(244,50,7)" fg:x="941" fg:w="8"/><text x="74.9325%" y="591.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="75.0794%" y="565" width="0.2381%" height="15" fill="rgb(246,229,37)" fg:x="946" fg:w="3"/><text x="75.3294%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="75.0794%" y="549" width="0.2381%" height="15" fill="rgb(225,18,5)" fg:x="946" fg:w="3"/><text x="75.3294%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="75.1587%" y="533" width="0.1587%" height="15" fill="rgb(213,204,8)" fg:x="947" fg:w="2"/><text x="75.4087%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.2381%" y="517" width="0.0794%" height="15" fill="rgb(238,103,6)" fg:x="948" fg:w="1"/><text x="75.4881%" y="527.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="75.2381%" y="501" width="0.0794%" height="15" fill="rgb(222,25,35)" fg:x="948" fg:w="1"/><text x="75.4881%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="75.2381%" y="485" width="0.0794%" height="15" fill="rgb(213,203,35)" fg:x="948" fg:w="1"/><text x="75.4881%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3175%" y="549" width="0.0794%" height="15" fill="rgb(221,79,53)" fg:x="949" fg:w="1"/><text x="75.5675%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="75.3968%" y="549" width="0.0794%" height="15" fill="rgb(243,200,35)" fg:x="950" fg:w="1"/><text x="75.6468%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="75.3968%" y="533" width="0.0794%" height="15" fill="rgb(248,60,25)" fg:x="950" fg:w="1"/><text x="75.6468%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.3968%" y="517" width="0.0794%" height="15" fill="rgb(227,53,46)" fg:x="950" fg:w="1"/><text x="75.6468%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="75.4762%" y="549" width="0.1587%" height="15" fill="rgb(216,120,32)" fg:x="951" fg:w="2"/><text x="75.7262%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="75.4762%" y="533" width="0.1587%" height="15" fill="rgb(220,134,1)" fg:x="951" fg:w="2"/><text x="75.7262%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="75.4762%" y="517" width="0.1587%" height="15" fill="rgb(237,168,5)" fg:x="951" fg:w="2"/><text x="75.7262%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="75.3175%" y="581" width="0.4762%" height="15" fill="rgb(231,100,33)" fg:x="949" fg:w="6"/><text x="75.5675%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="75.3175%" y="565" width="0.4762%" height="15" fill="rgb(236,177,47)" fg:x="949" fg:w="6"/><text x="75.5675%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="75.6349%" y="549" width="0.1587%" height="15" fill="rgb(235,7,49)" fg:x="953" fg:w="2"/><text x="75.8849%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="75.7143%" y="533" width="0.0794%" height="15" fill="rgb(232,119,22)" fg:x="954" fg:w="1"/><text x="75.9643%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="75.7143%" y="517" width="0.0794%" height="15" fill="rgb(254,73,53)" fg:x="954" fg:w="1"/><text x="75.9643%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="75.7143%" y="501" width="0.0794%" height="15" fill="rgb(251,35,20)" fg:x="954" fg:w="1"/><text x="75.9643%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7937%" y="437" width="0.0794%" height="15" fill="rgb(241,119,20)" fg:x="955" fg:w="1"/><text x="76.0437%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7937%" y="421" width="0.0794%" height="15" fill="rgb(207,102,14)" fg:x="955" fg:w="1"/><text x="76.0437%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7937%" y="405" width="0.0794%" height="15" fill="rgb(248,201,50)" fg:x="955" fg:w="1"/><text x="76.0437%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7937%" y="389" width="0.0794%" height="15" fill="rgb(222,185,44)" fg:x="955" fg:w="1"/><text x="76.0437%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7937%" y="373" width="0.0794%" height="15" fill="rgb(218,107,18)" fg:x="955" fg:w="1"/><text x="76.0437%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="75.7937%" y="357" width="0.0794%" height="15" fill="rgb(237,177,39)" fg:x="955" fg:w="1"/><text x="76.0437%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="75.7937%" y="341" width="0.0794%" height="15" fill="rgb(246,69,6)" fg:x="955" fg:w="1"/><text x="76.0437%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.7937%" y="325" width="0.0794%" height="15" fill="rgb(234,208,37)" fg:x="955" fg:w="1"/><text x="76.0437%" y="335.50"></text></g><g><title>engine::session::Session::close (22 samples, 1.75%)</title><rect x="74.2063%" y="677" width="1.7460%" height="15" fill="rgb(225,4,6)" fg:x="935" fg:w="22"/><text x="74.4563%" y="687.50"></text></g><g><title>engine::session::state::State::close (22 samples, 1.75%)</title><rect x="74.2063%" y="661" width="1.7460%" height="15" fill="rgb(233,45,0)" fg:x="935" fg:w="22"/><text x="74.4563%" y="671.50"></text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.75%)</title><rect x="74.2063%" y="645" width="1.7460%" height="15" fill="rgb(226,136,5)" fg:x="935" fg:w="22"/><text x="74.4563%" y="655.50"></text></g><g><title>engine::session::internal::Entities::foreach_entity_mut (22 samples, 1.75%)</title><rect x="74.2063%" y="629" width="1.7460%" height="15" fill="rgb(211,91,47)" fg:x="935" fg:w="22"/><text x="74.4563%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.67%)</title><rect x="74.2857%" y="613" width="1.6667%" height="15" fill="rgb(242,88,51)" fg:x="936" fg:w="21"/><text x="74.5357%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.27%)</title><rect x="74.6825%" y="597" width="1.2698%" height="15" fill="rgb(230,91,28)" fg:x="941" fg:w="16"/><text x="74.9325%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="75.7937%" y="581" width="0.1587%" height="15" fill="rgb(254,186,29)" fg:x="955" fg:w="2"/><text x="76.0437%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.7937%" y="565" width="0.1587%" height="15" fill="rgb(238,6,4)" fg:x="955" fg:w="2"/><text x="76.0437%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7937%" y="549" width="0.1587%" height="15" fill="rgb(221,151,16)" fg:x="955" fg:w="2"/><text x="76.0437%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7937%" y="533" width="0.1587%" height="15" fill="rgb(251,143,52)" fg:x="955" fg:w="2"/><text x="76.0437%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7937%" y="517" width="0.1587%" height="15" fill="rgb(206,90,15)" fg:x="955" fg:w="2"/><text x="76.0437%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7937%" y="501" width="0.1587%" height="15" fill="rgb(218,35,8)" fg:x="955" fg:w="2"/><text x="76.0437%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7937%" y="485" width="0.1587%" height="15" fill="rgb(239,215,6)" fg:x="955" fg:w="2"/><text x="76.0437%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.7937%" y="469" width="0.1587%" height="15" fill="rgb(245,116,39)" fg:x="955" fg:w="2"/><text x="76.0437%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="75.7937%" y="453" width="0.1587%" height="15" fill="rgb(242,65,28)" fg:x="955" fg:w="2"/><text x="76.0437%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.8730%" y="437" width="0.0794%" height="15" fill="rgb(252,132,53)" fg:x="956" fg:w="1"/><text x="76.1230%" y="447.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="75.9524%" y="629" width="0.1587%" height="15" fill="rgb(224,159,50)" fg:x="957" fg:w="2"/><text x="76.2024%" y="639.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="75.9524%" y="613" width="0.1587%" height="15" fill="rgb(224,93,4)" fg:x="957" fg:w="2"/><text x="76.2024%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="75.9524%" y="597" width="0.1587%" height="15" fill="rgb(208,81,34)" fg:x="957" fg:w="2"/><text x="76.2024%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="75.9524%" y="581" width="0.1587%" height="15" fill="rgb(233,92,54)" fg:x="957" fg:w="2"/><text x="76.2024%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="75.9524%" y="565" width="0.1587%" height="15" fill="rgb(237,21,14)" fg:x="957" fg:w="2"/><text x="76.2024%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="75.9524%" y="549" width="0.1587%" height="15" fill="rgb(249,128,51)" fg:x="957" fg:w="2"/><text x="76.2024%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="75.9524%" y="533" width="0.1587%" height="15" fill="rgb(223,129,24)" fg:x="957" fg:w="2"/><text x="76.2024%" y="543.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="75.9524%" y="517" width="0.1587%" height="15" fill="rgb(231,168,25)" fg:x="957" fg:w="2"/><text x="76.2024%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.9524%" y="501" width="0.1587%" height="15" fill="rgb(224,39,20)" fg:x="957" fg:w="2"/><text x="76.2024%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="75.9524%" y="485" width="0.1587%" height="15" fill="rgb(225,152,53)" fg:x="957" fg:w="2"/><text x="76.2024%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="75.9524%" y="469" width="0.1587%" height="15" fill="rgb(252,17,24)" fg:x="957" fg:w="2"/><text x="76.2024%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="76.0317%" y="453" width="0.0794%" height="15" fill="rgb(250,114,30)" fg:x="958" fg:w="1"/><text x="76.2817%" y="463.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="76.1111%" y="629" width="0.0794%" height="15" fill="rgb(229,5,4)" fg:x="959" fg:w="1"/><text x="76.3611%" y="639.50"></text></g><g><title>kernel::model::entry::EntryResolver::world (1 samples, 0.08%)</title><rect x="76.1111%" y="613" width="0.0794%" height="15" fill="rgb(225,176,49)" fg:x="959" fg:w="1"/><text x="76.3611%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (1 samples, 0.08%)</title><rect x="76.1111%" y="597" width="0.0794%" height="15" fill="rgb(224,221,49)" fg:x="959" fg:w="1"/><text x="76.3611%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (1 samples, 0.08%)</title><rect x="76.1111%" y="581" width="0.0794%" height="15" fill="rgb(253,169,27)" fg:x="959" fg:w="1"/><text x="76.3611%" y="591.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="76.1111%" y="565" width="0.0794%" height="15" fill="rgb(211,206,16)" fg:x="959" fg:w="1"/><text x="76.3611%" y="575.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (4 samples, 0.32%)</title><rect x="75.9524%" y="645" width="0.3175%" height="15" fill="rgb(244,87,35)" fg:x="957" fg:w="4"/><text x="76.2024%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="76.1905%" y="629" width="0.0794%" height="15" fill="rgb(246,28,10)" fg:x="960" fg:w="1"/><text x="76.4405%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="76.1905%" y="613" width="0.0794%" height="15" fill="rgb(229,12,44)" fg:x="960" fg:w="1"/><text x="76.4405%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.1905%" y="597" width="0.0794%" height="15" fill="rgb(210,145,37)" fg:x="960" fg:w="1"/><text x="76.4405%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="76.2698%" y="597" width="0.0794%" height="15" fill="rgb(227,112,52)" fg:x="961" fg:w="1"/><text x="76.5198%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4286%" y="389" width="0.0794%" height="15" fill="rgb(238,155,34)" fg:x="963" fg:w="1"/><text x="76.6786%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4286%" y="373" width="0.0794%" height="15" fill="rgb(239,226,36)" fg:x="963" fg:w="1"/><text x="76.6786%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="76.4286%" y="357" width="0.0794%" height="15" fill="rgb(230,16,23)" fg:x="963" fg:w="1"/><text x="76.6786%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4286%" y="341" width="0.0794%" height="15" fill="rgb(236,171,36)" fg:x="963" fg:w="1"/><text x="76.6786%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="76.4286%" y="325" width="0.0794%" height="15" fill="rgb(221,22,14)" fg:x="963" fg:w="1"/><text x="76.6786%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="76.4286%" y="309" width="0.0794%" height="15" fill="rgb(242,43,11)" fg:x="963" fg:w="1"/><text x="76.6786%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="76.4286%" y="293" width="0.0794%" height="15" fill="rgb(232,69,23)" fg:x="963" fg:w="1"/><text x="76.6786%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="76.4286%" y="277" width="0.0794%" height="15" fill="rgb(216,180,54)" fg:x="963" fg:w="1"/><text x="76.6786%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4286%" y="261" width="0.0794%" height="15" fill="rgb(216,5,24)" fg:x="963" fg:w="1"/><text x="76.6786%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="76.4286%" y="245" width="0.0794%" height="15" fill="rgb(225,89,9)" fg:x="963" fg:w="1"/><text x="76.6786%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="76.4286%" y="229" width="0.0794%" height="15" fill="rgb(243,75,33)" fg:x="963" fg:w="1"/><text x="76.6786%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="76.4286%" y="213" width="0.0794%" height="15" fill="rgb(247,141,45)" fg:x="963" fg:w="1"/><text x="76.6786%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="76.4286%" y="197" width="0.0794%" height="15" fill="rgb(232,177,36)" fg:x="963" fg:w="1"/><text x="76.6786%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="76.4286%" y="181" width="0.0794%" height="15" fill="rgb(219,125,36)" fg:x="963" fg:w="1"/><text x="76.6786%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.4286%" y="165" width="0.0794%" height="15" fill="rgb(227,94,9)" fg:x="963" fg:w="1"/><text x="76.6786%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (3 samples, 0.24%)</title><rect x="76.3492%" y="437" width="0.2381%" height="15" fill="rgb(240,34,52)" fg:x="962" fg:w="3"/><text x="76.5992%" y="447.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="76.3492%" y="421" width="0.2381%" height="15" fill="rgb(216,45,12)" fg:x="962" fg:w="3"/><text x="76.5992%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="76.3492%" y="405" width="0.2381%" height="15" fill="rgb(246,21,19)" fg:x="962" fg:w="3"/><text x="76.5992%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (1 samples, 0.08%)</title><rect x="76.5079%" y="389" width="0.0794%" height="15" fill="rgb(213,98,42)" fg:x="964" fg:w="1"/><text x="76.7579%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.5079%" y="373" width="0.0794%" height="15" fill="rgb(250,136,47)" fg:x="964" fg:w="1"/><text x="76.7579%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5079%" y="357" width="0.0794%" height="15" fill="rgb(251,124,27)" fg:x="964" fg:w="1"/><text x="76.7579%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.5079%" y="341" width="0.0794%" height="15" fill="rgb(229,180,14)" fg:x="964" fg:w="1"/><text x="76.7579%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5079%" y="325" width="0.0794%" height="15" fill="rgb(245,216,25)" fg:x="964" fg:w="1"/><text x="76.7579%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="76.5873%" y="437" width="0.0794%" height="15" fill="rgb(251,43,5)" fg:x="965" fg:w="1"/><text x="76.8373%" y="447.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="76.5873%" y="421" width="0.0794%" height="15" fill="rgb(250,128,24)" fg:x="965" fg:w="1"/><text x="76.8373%" y="431.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="76.5873%" y="405" width="0.0794%" height="15" fill="rgb(217,117,27)" fg:x="965" fg:w="1"/><text x="76.8373%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="76.5873%" y="389" width="0.0794%" height="15" fill="rgb(245,147,4)" fg:x="965" fg:w="1"/><text x="76.8373%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="76.5873%" y="373" width="0.0794%" height="15" fill="rgb(242,201,35)" fg:x="965" fg:w="1"/><text x="76.8373%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="76.5873%" y="357" width="0.0794%" height="15" fill="rgb(218,181,1)" fg:x="965" fg:w="1"/><text x="76.8373%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.9841%" y="261" width="0.0794%" height="15" fill="rgb(222,6,29)" fg:x="970" fg:w="1"/><text x="77.2341%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.9841%" y="245" width="0.0794%" height="15" fill="rgb(208,186,3)" fg:x="970" fg:w="1"/><text x="77.2341%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.9841%" y="229" width="0.0794%" height="15" fill="rgb(216,36,26)" fg:x="970" fg:w="1"/><text x="77.2341%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="76.7460%" y="357" width="0.3968%" height="15" fill="rgb(248,201,23)" fg:x="967" fg:w="5"/><text x="76.9960%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="76.7460%" y="341" width="0.3968%" height="15" fill="rgb(251,170,31)" fg:x="967" fg:w="5"/><text x="76.9960%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (4 samples, 0.32%)</title><rect x="76.8254%" y="325" width="0.3175%" height="15" fill="rgb(207,110,25)" fg:x="968" fg:w="4"/><text x="77.0754%" y="335.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (4 samples, 0.32%)</title><rect x="76.8254%" y="309" width="0.3175%" height="15" fill="rgb(250,54,15)" fg:x="968" fg:w="4"/><text x="77.0754%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="76.8254%" y="293" width="0.3175%" height="15" fill="rgb(227,68,33)" fg:x="968" fg:w="4"/><text x="77.0754%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="76.9048%" y="277" width="0.2381%" height="15" fill="rgb(238,34,41)" fg:x="969" fg:w="3"/><text x="77.1548%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="77.0635%" y="261" width="0.0794%" height="15" fill="rgb(220,11,15)" fg:x="971" fg:w="1"/><text x="77.3135%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2222%" y="309" width="0.0794%" height="15" fill="rgb(246,111,35)" fg:x="973" fg:w="1"/><text x="77.4722%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="77.3016%" y="309" width="0.0794%" height="15" fill="rgb(209,88,53)" fg:x="974" fg:w="1"/><text x="77.5516%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.3016%" y="293" width="0.0794%" height="15" fill="rgb(231,185,47)" fg:x="974" fg:w="1"/><text x="77.5516%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.3016%" y="277" width="0.0794%" height="15" fill="rgb(233,154,1)" fg:x="974" fg:w="1"/><text x="77.5516%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (5 samples, 0.40%)</title><rect x="77.4603%" y="293" width="0.3968%" height="15" fill="rgb(225,15,46)" fg:x="976" fg:w="5"/><text x="77.7103%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (5 samples, 0.40%)</title><rect x="77.4603%" y="277" width="0.3968%" height="15" fill="rgb(211,135,41)" fg:x="976" fg:w="5"/><text x="77.7103%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="77.8571%" y="293" width="0.0794%" height="15" fill="rgb(208,54,0)" fg:x="981" fg:w="1"/><text x="78.1071%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="77.8571%" y="277" width="0.0794%" height="15" fill="rgb(244,136,14)" fg:x="981" fg:w="1"/><text x="78.1071%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="77.8571%" y="261" width="0.0794%" height="15" fill="rgb(241,56,14)" fg:x="981" fg:w="1"/><text x="78.1071%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="77.8571%" y="245" width="0.0794%" height="15" fill="rgb(205,80,24)" fg:x="981" fg:w="1"/><text x="78.1071%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="77.9365%" y="293" width="0.0794%" height="15" fill="rgb(220,57,4)" fg:x="982" fg:w="1"/><text x="78.1865%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="77.9365%" y="277" width="0.0794%" height="15" fill="rgb(226,193,50)" fg:x="982" fg:w="1"/><text x="78.1865%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="77.9365%" y="261" width="0.0794%" height="15" fill="rgb(231,168,22)" fg:x="982" fg:w="1"/><text x="78.1865%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="78.0952%" y="261" width="0.0794%" height="15" fill="rgb(254,215,14)" fg:x="984" fg:w="1"/><text x="78.3452%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.2540%" y="229" width="0.0794%" height="15" fill="rgb(211,115,16)" fg:x="986" fg:w="1"/><text x="78.5040%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="78.3333%" y="229" width="0.0794%" height="15" fill="rgb(236,210,16)" fg:x="987" fg:w="1"/><text x="78.5833%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="78.4127%" y="197" width="0.2381%" height="15" fill="rgb(221,94,12)" fg:x="988" fg:w="3"/><text x="78.6627%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="78.4127%" y="181" width="0.2381%" height="15" fill="rgb(235,218,49)" fg:x="988" fg:w="3"/><text x="78.6627%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="78.4127%" y="165" width="0.2381%" height="15" fill="rgb(217,114,14)" fg:x="988" fg:w="3"/><text x="78.6627%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="78.4127%" y="229" width="0.3175%" height="15" fill="rgb(216,145,22)" fg:x="988" fg:w="4"/><text x="78.6627%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="78.4127%" y="213" width="0.3175%" height="15" fill="rgb(217,112,39)" fg:x="988" fg:w="4"/><text x="78.6627%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="78.6508%" y="197" width="0.0794%" height="15" fill="rgb(225,85,32)" fg:x="991" fg:w="1"/><text x="78.9008%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 3.65%)</title><rect x="78.0952%" y="277" width="3.6508%" height="15" fill="rgb(245,209,47)" fg:x="984" fg:w="46"/><text x="78.3452%" y="287.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (45 samples, 3.57%)</title><rect x="78.1746%" y="261" width="3.5714%" height="15" fill="rgb(218,220,15)" fg:x="985" fg:w="45"/><text x="78.4246%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (45 samples, 3.57%)</title><rect x="78.1746%" y="245" width="3.5714%" height="15" fill="rgb(222,202,31)" fg:x="985" fg:w="45"/><text x="78.4246%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (38 samples, 3.02%)</title><rect x="78.7302%" y="229" width="3.0159%" height="15" fill="rgb(243,203,4)" fg:x="992" fg:w="38"/><text x="78.9802%" y="239.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (38 samples, 3.02%)</title><rect x="78.7302%" y="213" width="3.0159%" height="15" fill="rgb(237,92,17)" fg:x="992" fg:w="38"/><text x="78.9802%" y="223.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (38 samples, 3.02%)</title><rect x="78.7302%" y="197" width="3.0159%" height="15" fill="rgb(231,119,7)" fg:x="992" fg:w="38"/><text x="78.9802%" y="207.50">all..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="81.8254%" y="261" width="0.1587%" height="15" fill="rgb(237,82,41)" fg:x="1031" fg:w="2"/><text x="82.0754%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="81.7460%" y="277" width="0.3968%" height="15" fill="rgb(226,81,48)" fg:x="1030" fg:w="5"/><text x="81.9960%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="81.9841%" y="261" width="0.1587%" height="15" fill="rgb(234,70,51)" fg:x="1033" fg:w="2"/><text x="82.2341%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (53 samples, 4.21%)</title><rect x="78.0159%" y="293" width="4.2063%" height="15" fill="rgb(251,86,4)" fg:x="983" fg:w="53"/><text x="78.2659%" y="303.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="82.1429%" y="277" width="0.0794%" height="15" fill="rgb(244,144,28)" fg:x="1035" fg:w="1"/><text x="82.3929%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="82.1429%" y="261" width="0.0794%" height="15" fill="rgb(232,161,39)" fg:x="1035" fg:w="1"/><text x="82.3929%" y="271.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="82.2222%" y="293" width="0.0794%" height="15" fill="rgb(247,34,51)" fg:x="1036" fg:w="1"/><text x="82.4722%" y="303.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="82.2222%" y="277" width="0.0794%" height="15" fill="rgb(225,132,2)" fg:x="1036" fg:w="1"/><text x="82.4722%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (64 samples, 5.08%)</title><rect x="77.3810%" y="309" width="5.0794%" height="15" fill="rgb(209,159,44)" fg:x="975" fg:w="64"/><text x="77.6310%" y="319.50">regex_..</text></g><g><title>regex_automata::util::prefilter::suffixes (2 samples, 0.16%)</title><rect x="82.3016%" y="293" width="0.1587%" height="15" fill="rgb(251,214,1)" fg:x="1037" fg:w="2"/><text x="82.5516%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="82.4603%" y="261" width="0.0794%" height="15" fill="rgb(247,84,47)" fg:x="1039" fg:w="1"/><text x="82.7103%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.4603%" y="245" width="0.0794%" height="15" fill="rgb(240,111,43)" fg:x="1039" fg:w="1"/><text x="82.7103%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.4603%" y="229" width="0.0794%" height="15" fill="rgb(215,214,35)" fg:x="1039" fg:w="1"/><text x="82.7103%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.4603%" y="213" width="0.0794%" height="15" fill="rgb(248,207,23)" fg:x="1039" fg:w="1"/><text x="82.7103%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="82.5397%" y="261" width="0.0794%" height="15" fill="rgb(214,186,4)" fg:x="1040" fg:w="1"/><text x="82.7897%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="82.5397%" y="245" width="0.0794%" height="15" fill="rgb(220,133,22)" fg:x="1040" fg:w="1"/><text x="82.7897%" y="255.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::into_item (1 samples, 0.08%)</title><rect x="82.6190%" y="245" width="0.0794%" height="15" fill="rgb(239,134,19)" fg:x="1041" fg:w="1"/><text x="82.8690%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="82.6190%" y="261" width="0.1587%" height="15" fill="rgb(250,140,9)" fg:x="1041" fg:w="2"/><text x="82.8690%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="82.6984%" y="245" width="0.0794%" height="15" fill="rgb(225,59,14)" fg:x="1042" fg:w="1"/><text x="82.9484%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="82.4603%" y="277" width="0.3968%" height="15" fill="rgb(214,152,51)" fg:x="1039" fg:w="5"/><text x="82.7103%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="82.7778%" y="261" width="0.0794%" height="15" fill="rgb(251,227,43)" fg:x="1043" fg:w="1"/><text x="83.0278%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.7778%" y="245" width="0.0794%" height="15" fill="rgb(241,96,17)" fg:x="1043" fg:w="1"/><text x="83.0278%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.7778%" y="229" width="0.0794%" height="15" fill="rgb(234,198,43)" fg:x="1043" fg:w="1"/><text x="83.0278%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.7778%" y="213" width="0.0794%" height="15" fill="rgb(220,108,29)" fg:x="1043" fg:w="1"/><text x="83.0278%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (73 samples, 5.79%)</title><rect x="77.1429%" y="357" width="5.7937%" height="15" fill="rgb(226,163,33)" fg:x="972" fg:w="73"/><text x="77.3929%" y="367.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (73 samples, 5.79%)</title><rect x="77.1429%" y="341" width="5.7937%" height="15" fill="rgb(205,194,45)" fg:x="972" fg:w="73"/><text x="77.3929%" y="351.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (73 samples, 5.79%)</title><rect x="77.1429%" y="325" width="5.7937%" height="15" fill="rgb(206,143,44)" fg:x="972" fg:w="73"/><text x="77.3929%" y="335.50">regex_a..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="82.4603%" y="309" width="0.4762%" height="15" fill="rgb(236,136,36)" fg:x="1039" fg:w="6"/><text x="82.7103%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="82.4603%" y="293" width="0.4762%" height="15" fill="rgb(249,172,42)" fg:x="1039" fg:w="6"/><text x="82.7103%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.8571%" y="277" width="0.0794%" height="15" fill="rgb(216,139,23)" fg:x="1044" fg:w="1"/><text x="83.1071%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="82.9365%" y="357" width="0.0794%" height="15" fill="rgb(207,166,20)" fg:x="1045" fg:w="1"/><text x="83.1865%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="82.9365%" y="341" width="0.0794%" height="15" fill="rgb(210,209,22)" fg:x="1045" fg:w="1"/><text x="83.1865%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.9365%" y="325" width="0.0794%" height="15" fill="rgb(232,118,20)" fg:x="1045" fg:w="1"/><text x="83.1865%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="82.9365%" y="309" width="0.0794%" height="15" fill="rgb(238,113,42)" fg:x="1045" fg:w="1"/><text x="83.1865%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.1746%" y="277" width="0.0794%" height="15" fill="rgb(231,42,5)" fg:x="1048" fg:w="1"/><text x="83.4246%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.1746%" y="261" width="0.0794%" height="15" fill="rgb(243,166,24)" fg:x="1048" fg:w="1"/><text x="83.4246%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.1746%" y="245" width="0.0794%" height="15" fill="rgb(237,226,12)" fg:x="1048" fg:w="1"/><text x="83.4246%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2540%" y="277" width="0.0794%" height="15" fill="rgb(229,133,24)" fg:x="1049" fg:w="1"/><text x="83.5040%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.2540%" y="261" width="0.0794%" height="15" fill="rgb(238,33,43)" fg:x="1049" fg:w="1"/><text x="83.5040%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="83.0159%" y="293" width="0.3968%" height="15" fill="rgb(227,59,38)" fg:x="1046" fg:w="5"/><text x="83.2659%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="83.3333%" y="277" width="0.0794%" height="15" fill="rgb(230,97,0)" fg:x="1050" fg:w="1"/><text x="83.5833%" y="287.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (85 samples, 6.75%)</title><rect x="76.7460%" y="373" width="6.7460%" height="15" fill="rgb(250,173,50)" fg:x="967" fg:w="85"/><text x="76.9960%" y="383.50">indefinit..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="83.0159%" y="357" width="0.4762%" height="15" fill="rgb(240,15,50)" fg:x="1046" fg:w="6"/><text x="83.2659%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="83.0159%" y="341" width="0.4762%" height="15" fill="rgb(221,93,22)" fg:x="1046" fg:w="6"/><text x="83.2659%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="83.0159%" y="325" width="0.4762%" height="15" fill="rgb(245,180,53)" fg:x="1046" fg:w="6"/><text x="83.2659%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="83.0159%" y="309" width="0.4762%" height="15" fill="rgb(231,88,51)" fg:x="1046" fg:w="6"/><text x="83.2659%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="83.4127%" y="293" width="0.0794%" height="15" fill="rgb(240,58,21)" fg:x="1051" fg:w="1"/><text x="83.6627%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.6508%" y="277" width="0.0794%" height="15" fill="rgb(237,21,10)" fg:x="1054" fg:w="1"/><text x="83.9008%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="83.7302%" y="277" width="0.0794%" height="15" fill="rgb(218,43,11)" fg:x="1055" fg:w="1"/><text x="83.9802%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.7302%" y="261" width="0.0794%" height="15" fill="rgb(218,221,29)" fg:x="1055" fg:w="1"/><text x="83.9802%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="83.5714%" y="309" width="0.3175%" height="15" fill="rgb(214,118,42)" fg:x="1053" fg:w="4"/><text x="83.8214%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="83.5714%" y="293" width="0.3175%" height="15" fill="rgb(251,200,26)" fg:x="1053" fg:w="4"/><text x="83.8214%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="83.8095%" y="277" width="0.0794%" height="15" fill="rgb(237,101,39)" fg:x="1056" fg:w="1"/><text x="84.0595%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.8095%" y="261" width="0.0794%" height="15" fill="rgb(251,117,11)" fg:x="1056" fg:w="1"/><text x="84.0595%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.8095%" y="245" width="0.0794%" height="15" fill="rgb(216,223,23)" fg:x="1056" fg:w="1"/><text x="84.0595%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9683%" y="293" width="0.0794%" height="15" fill="rgb(251,54,12)" fg:x="1058" fg:w="1"/><text x="84.2183%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (7 samples, 0.56%)</title><rect x="84.0476%" y="293" width="0.5556%" height="15" fill="rgb(254,176,54)" fg:x="1059" fg:w="7"/><text x="84.2976%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.56%)</title><rect x="84.0476%" y="277" width="0.5556%" height="15" fill="rgb(210,32,8)" fg:x="1059" fg:w="7"/><text x="84.2976%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="84.6032%" y="277" width="0.3175%" height="15" fill="rgb(235,52,38)" fg:x="1066" fg:w="4"/><text x="84.8532%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="84.8413%" y="261" width="0.0794%" height="15" fill="rgb(231,4,44)" fg:x="1069" fg:w="1"/><text x="85.0913%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.8413%" y="245" width="0.0794%" height="15" fill="rgb(249,2,32)" fg:x="1069" fg:w="1"/><text x="85.0913%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.8413%" y="229" width="0.0794%" height="15" fill="rgb(224,65,26)" fg:x="1069" fg:w="1"/><text x="85.0913%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8413%" y="213" width="0.0794%" height="15" fill="rgb(250,73,40)" fg:x="1069" fg:w="1"/><text x="85.0913%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (6 samples, 0.48%)</title><rect x="84.6032%" y="293" width="0.4762%" height="15" fill="rgb(253,177,16)" fg:x="1066" fg:w="6"/><text x="84.8532%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="84.9206%" y="277" width="0.1587%" height="15" fill="rgb(217,32,34)" fg:x="1070" fg:w="2"/><text x="85.1706%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (2 samples, 0.16%)</title><rect x="84.9206%" y="261" width="0.1587%" height="15" fill="rgb(212,7,10)" fg:x="1070" fg:w="2"/><text x="85.1706%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.5556%" y="229" width="0.0794%" height="15" fill="rgb(245,89,8)" fg:x="1078" fg:w="1"/><text x="85.8056%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (7 samples, 0.56%)</title><rect x="85.2381%" y="261" width="0.5556%" height="15" fill="rgb(237,16,53)" fg:x="1074" fg:w="7"/><text x="85.4881%" y="271.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (4 samples, 0.32%)</title><rect x="85.4762%" y="245" width="0.3175%" height="15" fill="rgb(250,204,30)" fg:x="1077" fg:w="4"/><text x="85.7262%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="85.6349%" y="229" width="0.1587%" height="15" fill="rgb(208,77,27)" fg:x="1079" fg:w="2"/><text x="85.8849%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (14 samples, 1.11%)</title><rect x="85.0794%" y="293" width="1.1111%" height="15" fill="rgb(250,204,28)" fg:x="1072" fg:w="14"/><text x="85.3294%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (13 samples, 1.03%)</title><rect x="85.1587%" y="277" width="1.0317%" height="15" fill="rgb(244,63,21)" fg:x="1073" fg:w="13"/><text x="85.4087%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.40%)</title><rect x="85.7937%" y="261" width="0.3968%" height="15" fill="rgb(236,85,44)" fg:x="1081" fg:w="5"/><text x="86.0437%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="85.7937%" y="245" width="0.3968%" height="15" fill="rgb(215,98,4)" fg:x="1081" fg:w="5"/><text x="86.0437%" y="255.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="85.7937%" y="229" width="0.3968%" height="15" fill="rgb(235,38,11)" fg:x="1081" fg:w="5"/><text x="86.0437%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="86.1905%" y="245" width="0.0794%" height="15" fill="rgb(254,186,25)" fg:x="1086" fg:w="1"/><text x="86.4405%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="86.1905%" y="229" width="0.0794%" height="15" fill="rgb(225,55,31)" fg:x="1086" fg:w="1"/><text x="86.4405%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="86.1905%" y="213" width="0.0794%" height="15" fill="rgb(211,15,21)" fg:x="1086" fg:w="1"/><text x="86.4405%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.1905%" y="197" width="0.0794%" height="15" fill="rgb(215,187,41)" fg:x="1086" fg:w="1"/><text x="86.4405%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.9048%" y="181" width="0.0794%" height="15" fill="rgb(248,69,32)" fg:x="1095" fg:w="1"/><text x="87.1548%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="86.9841%" y="181" width="0.0794%" height="15" fill="rgb(252,102,52)" fg:x="1096" fg:w="1"/><text x="87.2341%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="87.0635%" y="181" width="0.0794%" height="15" fill="rgb(253,140,32)" fg:x="1097" fg:w="1"/><text x="87.3135%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.3810%" y="149" width="0.0794%" height="15" fill="rgb(216,56,42)" fg:x="1101" fg:w="1"/><text x="87.6310%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="87.4603%" y="149" width="0.1587%" height="15" fill="rgb(216,184,14)" fg:x="1102" fg:w="2"/><text x="87.7103%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5397%" y="133" width="0.0794%" height="15" fill="rgb(237,187,27)" fg:x="1103" fg:w="1"/><text x="87.7897%" y="143.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="87.5397%" y="117" width="0.0794%" height="15" fill="rgb(219,65,3)" fg:x="1103" fg:w="1"/><text x="87.7897%" y="127.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="87.5397%" y="101" width="0.0794%" height="15" fill="rgb(245,83,25)" fg:x="1103" fg:w="1"/><text x="87.7897%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (11 samples, 0.87%)</title><rect x="87.1429%" y="181" width="0.8730%" height="15" fill="rgb(214,205,45)" fg:x="1098" fg:w="11"/><text x="87.3929%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.87%)</title><rect x="87.1429%" y="165" width="0.8730%" height="15" fill="rgb(241,20,18)" fg:x="1098" fg:w="11"/><text x="87.3929%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="87.6190%" y="149" width="0.3968%" height="15" fill="rgb(232,163,23)" fg:x="1104" fg:w="5"/><text x="87.8690%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="87.9365%" y="133" width="0.0794%" height="15" fill="rgb(214,5,46)" fg:x="1108" fg:w="1"/><text x="88.1865%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="87.9365%" y="117" width="0.0794%" height="15" fill="rgb(229,78,17)" fg:x="1108" fg:w="1"/><text x="88.1865%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.9365%" y="101" width="0.0794%" height="15" fill="rgb(248,89,10)" fg:x="1108" fg:w="1"/><text x="88.1865%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.9365%" y="85" width="0.0794%" height="15" fill="rgb(248,54,15)" fg:x="1108" fg:w="1"/><text x="88.1865%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (27 samples, 2.14%)</title><rect x="88.0159%" y="181" width="2.1429%" height="15" fill="rgb(223,116,6)" fg:x="1109" fg:w="27"/><text x="88.2659%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (27 samples, 2.14%)</title><rect x="88.0159%" y="165" width="2.1429%" height="15" fill="rgb(205,125,38)" fg:x="1109" fg:w="27"/><text x="88.2659%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (27 samples, 2.14%)</title><rect x="88.0159%" y="149" width="2.1429%" height="15" fill="rgb(251,78,38)" fg:x="1109" fg:w="27"/><text x="88.2659%" y="159.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="90.1587%" y="181" width="0.2381%" height="15" fill="rgb(253,78,28)" fg:x="1136" fg:w="3"/><text x="90.4087%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="90.3968%" y="181" width="0.1587%" height="15" fill="rgb(209,120,3)" fg:x="1139" fg:w="2"/><text x="90.6468%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (60 samples, 4.76%)</title><rect x="86.2698%" y="213" width="4.7619%" height="15" fill="rgb(238,229,9)" fg:x="1087" fg:w="60"/><text x="86.5198%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (60 samples, 4.76%)</title><rect x="86.2698%" y="197" width="4.7619%" height="15" fill="rgb(253,159,18)" fg:x="1087" fg:w="60"/><text x="86.5198%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (6 samples, 0.48%)</title><rect x="90.5556%" y="181" width="0.4762%" height="15" fill="rgb(244,42,34)" fg:x="1141" fg:w="6"/><text x="90.8056%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="90.7937%" y="165" width="0.2381%" height="15" fill="rgb(224,8,7)" fg:x="1144" fg:w="3"/><text x="91.0437%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="90.7937%" y="149" width="0.2381%" height="15" fill="rgb(210,201,45)" fg:x="1144" fg:w="3"/><text x="91.0437%" y="159.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="90.7937%" y="133" width="0.2381%" height="15" fill="rgb(252,185,21)" fg:x="1144" fg:w="3"/><text x="91.0437%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (62 samples, 4.92%)</title><rect x="86.1905%" y="277" width="4.9206%" height="15" fill="rgb(223,131,1)" fg:x="1086" fg:w="62"/><text x="86.4405%" y="287.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 4.92%)</title><rect x="86.1905%" y="261" width="4.9206%" height="15" fill="rgb(245,141,16)" fg:x="1086" fg:w="62"/><text x="86.4405%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (61 samples, 4.84%)</title><rect x="86.2698%" y="245" width="4.8413%" height="15" fill="rgb(229,55,45)" fg:x="1087" fg:w="61"/><text x="86.5198%" y="255.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.84%)</title><rect x="86.2698%" y="229" width="4.8413%" height="15" fill="rgb(208,92,15)" fg:x="1087" fg:w="61"/><text x="86.5198%" y="239.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_bounded (1 samples, 0.08%)</title><rect x="91.0317%" y="213" width="0.0794%" height="15" fill="rgb(234,185,47)" fg:x="1147" fg:w="1"/><text x="91.2817%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="91.1905%" y="261" width="0.3175%" height="15" fill="rgb(253,104,50)" fg:x="1149" fg:w="4"/><text x="91.4405%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.3492%" y="245" width="0.1587%" height="15" fill="rgb(205,70,7)" fg:x="1151" fg:w="2"/><text x="91.5992%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.3492%" y="229" width="0.1587%" height="15" fill="rgb(240,178,43)" fg:x="1151" fg:w="2"/><text x="91.5992%" y="239.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="91.3492%" y="213" width="0.1587%" height="15" fill="rgb(214,112,2)" fg:x="1151" fg:w="2"/><text x="91.5992%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (97 samples, 7.70%)</title><rect x="83.8889%" y="309" width="7.6984%" height="15" fill="rgb(206,46,17)" fg:x="1057" fg:w="97"/><text x="84.1389%" y="319.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (68 samples, 5.40%)</title><rect x="86.1905%" y="293" width="5.3968%" height="15" fill="rgb(225,220,16)" fg:x="1086" fg:w="68"/><text x="86.4405%" y="303.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="91.1111%" y="277" width="0.4762%" height="15" fill="rgb(238,65,40)" fg:x="1148" fg:w="6"/><text x="91.3611%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="91.5079%" y="261" width="0.0794%" height="15" fill="rgb(230,151,21)" fg:x="1153" fg:w="1"/><text x="91.7579%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="91.6667%" y="261" width="0.0794%" height="15" fill="rgb(218,58,49)" fg:x="1155" fg:w="1"/><text x="91.9167%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="91.6667%" y="245" width="0.0794%" height="15" fill="rgb(219,179,14)" fg:x="1155" fg:w="1"/><text x="91.9167%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="91.6667%" y="229" width="0.0794%" height="15" fill="rgb(223,72,1)" fg:x="1155" fg:w="1"/><text x="91.9167%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="91.5873%" y="277" width="0.2381%" height="15" fill="rgb(238,126,10)" fg:x="1154" fg:w="3"/><text x="91.8373%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="91.7460%" y="261" width="0.0794%" height="15" fill="rgb(224,206,38)" fg:x="1156" fg:w="1"/><text x="91.9960%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.7460%" y="245" width="0.0794%" height="15" fill="rgb(212,201,54)" fg:x="1156" fg:w="1"/><text x="91.9960%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7460%" y="229" width="0.0794%" height="15" fill="rgb(218,154,48)" fg:x="1156" fg:w="1"/><text x="91.9960%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="91.8254%" y="277" width="0.0794%" height="15" fill="rgb(232,93,24)" fg:x="1157" fg:w="1"/><text x="92.0754%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.8254%" y="261" width="0.0794%" height="15" fill="rgb(245,30,21)" fg:x="1157" fg:w="1"/><text x="92.0754%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="91.9048%" y="277" width="0.0794%" height="15" fill="rgb(242,148,29)" fg:x="1158" fg:w="1"/><text x="92.1548%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="91.5873%" y="309" width="0.5556%" height="15" fill="rgb(244,153,54)" fg:x="1154" fg:w="7"/><text x="91.8373%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="91.5873%" y="293" width="0.5556%" height="15" fill="rgb(252,87,22)" fg:x="1154" fg:w="7"/><text x="91.8373%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="91.9841%" y="277" width="0.1587%" height="15" fill="rgb(210,51,29)" fg:x="1159" fg:w="2"/><text x="92.2341%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.0635%" y="261" width="0.0794%" height="15" fill="rgb(242,136,47)" fg:x="1160" fg:w="1"/><text x="92.3135%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="92.1429%" y="261" width="0.0794%" height="15" fill="rgb(238,68,4)" fg:x="1161" fg:w="1"/><text x="92.3929%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="92.1429%" y="277" width="0.1587%" height="15" fill="rgb(242,161,30)" fg:x="1161" fg:w="2"/><text x="92.3929%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="92.2222%" y="261" width="0.0794%" height="15" fill="rgb(218,58,44)" fg:x="1162" fg:w="1"/><text x="92.4722%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.2222%" y="245" width="0.0794%" height="15" fill="rgb(252,125,32)" fg:x="1162" fg:w="1"/><text x="92.4722%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.2222%" y="229" width="0.0794%" height="15" fill="rgb(219,178,0)" fg:x="1162" fg:w="1"/><text x="92.4722%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.2222%" y="213" width="0.0794%" height="15" fill="rgb(213,152,7)" fg:x="1162" fg:w="1"/><text x="92.4722%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="92.3016%" y="277" width="0.0794%" height="15" fill="rgb(249,109,34)" fg:x="1163" fg:w="1"/><text x="92.5516%" y="287.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (113 samples, 8.97%)</title><rect x="83.4921%" y="357" width="8.9683%" height="15" fill="rgb(232,96,21)" fg:x="1052" fg:w="113"/><text x="83.7421%" y="367.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (113 samples, 8.97%)</title><rect x="83.4921%" y="341" width="8.9683%" height="15" fill="rgb(228,27,39)" fg:x="1052" fg:w="113"/><text x="83.7421%" y="351.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (113 samples, 8.97%)</title><rect x="83.4921%" y="325" width="8.9683%" height="15" fill="rgb(211,182,52)" fg:x="1052" fg:w="113"/><text x="83.7421%" y="335.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="92.1429%" y="309" width="0.3175%" height="15" fill="rgb(234,178,38)" fg:x="1161" fg:w="4"/><text x="92.3929%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="92.1429%" y="293" width="0.3175%" height="15" fill="rgb(221,111,3)" fg:x="1161" fg:w="4"/><text x="92.3929%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="92.3810%" y="277" width="0.0794%" height="15" fill="rgb(228,175,21)" fg:x="1164" fg:w="1"/><text x="92.6310%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="92.3810%" y="261" width="0.0794%" height="15" fill="rgb(228,174,43)" fg:x="1164" fg:w="1"/><text x="92.6310%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3810%" y="245" width="0.0794%" height="15" fill="rgb(211,191,0)" fg:x="1164" fg:w="1"/><text x="92.6310%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3810%" y="229" width="0.0794%" height="15" fill="rgb(253,117,3)" fg:x="1164" fg:w="1"/><text x="92.6310%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.3810%" y="213" width="0.0794%" height="15" fill="rgb(241,127,19)" fg:x="1164" fg:w="1"/><text x="92.6310%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.4603%" y="309" width="0.0794%" height="15" fill="rgb(218,103,12)" fg:x="1165" fg:w="1"/><text x="92.7103%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="92.4603%" y="357" width="0.1587%" height="15" fill="rgb(236,214,43)" fg:x="1165" fg:w="2"/><text x="92.7103%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="92.4603%" y="341" width="0.1587%" height="15" fill="rgb(244,144,19)" fg:x="1165" fg:w="2"/><text x="92.7103%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="92.4603%" y="325" width="0.1587%" height="15" fill="rgb(246,188,10)" fg:x="1165" fg:w="2"/><text x="92.7103%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="92.5397%" y="309" width="0.0794%" height="15" fill="rgb(212,193,33)" fg:x="1166" fg:w="1"/><text x="92.7897%" y="319.50"></text></g><g><title>regex_automata::dfa::onepass::Cache::new (1 samples, 0.08%)</title><rect x="92.6190%" y="293" width="0.0794%" height="15" fill="rgb(241,51,29)" fg:x="1167" fg:w="1"/><text x="92.8690%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.8571%" y="261" width="0.0794%" height="15" fill="rgb(211,58,19)" fg:x="1170" fg:w="1"/><text x="93.1071%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.8571%" y="245" width="0.0794%" height="15" fill="rgb(229,111,26)" fg:x="1170" fg:w="1"/><text x="93.1071%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.8571%" y="229" width="0.0794%" height="15" fill="rgb(213,115,40)" fg:x="1170" fg:w="1"/><text x="93.1071%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="92.6984%" y="277" width="0.4762%" height="15" fill="rgb(209,56,44)" fg:x="1168" fg:w="6"/><text x="92.9484%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="92.9365%" y="261" width="0.2381%" height="15" fill="rgb(230,108,32)" fg:x="1171" fg:w="3"/><text x="93.1865%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (123 samples, 9.76%)</title><rect x="83.4921%" y="373" width="9.7619%" height="15" fill="rgb(216,165,31)" fg:x="1052" fg:w="123"/><text x="83.7421%" y="383.50">indefinite::ru..</text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.63%)</title><rect x="92.6190%" y="357" width="0.6349%" height="15" fill="rgb(218,122,21)" fg:x="1167" fg:w="8"/><text x="92.8690%" y="367.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="92.6190%" y="341" width="0.6349%" height="15" fill="rgb(223,224,47)" fg:x="1167" fg:w="8"/><text x="92.8690%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="92.6190%" y="325" width="0.6349%" height="15" fill="rgb(238,102,44)" fg:x="1167" fg:w="8"/><text x="92.8690%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="92.6190%" y="309" width="0.6349%" height="15" fill="rgb(236,46,40)" fg:x="1167" fg:w="8"/><text x="92.8690%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.56%)</title><rect x="92.6984%" y="293" width="0.5556%" height="15" fill="rgb(247,202,50)" fg:x="1168" fg:w="7"/><text x="92.9484%" y="303.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="93.1746%" y="277" width="0.0794%" height="15" fill="rgb(209,99,20)" fg:x="1174" fg:w="1"/><text x="93.4246%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.4127%" y="293" width="0.0794%" height="15" fill="rgb(252,27,34)" fg:x="1177" fg:w="1"/><text x="93.6627%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.4127%" y="277" width="0.0794%" height="15" fill="rgb(215,206,23)" fg:x="1177" fg:w="1"/><text x="93.6627%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.4127%" y="261" width="0.0794%" height="15" fill="rgb(212,135,36)" fg:x="1177" fg:w="1"/><text x="93.6627%" y="271.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="93.4921%" y="293" width="0.0794%" height="15" fill="rgb(240,189,1)" fg:x="1178" fg:w="1"/><text x="93.7421%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="93.6508%" y="277" width="0.0794%" height="15" fill="rgb(242,56,20)" fg:x="1180" fg:w="1"/><text x="93.9008%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.6508%" y="261" width="0.0794%" height="15" fill="rgb(247,132,33)" fg:x="1180" fg:w="1"/><text x="93.9008%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="93.7302%" y="277" width="0.2381%" height="15" fill="rgb(208,149,11)" fg:x="1181" fg:w="3"/><text x="93.9802%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="93.8095%" y="261" width="0.1587%" height="15" fill="rgb(211,33,11)" fg:x="1182" fg:w="2"/><text x="94.0595%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="93.9683%" y="277" width="0.0794%" height="15" fill="rgb(221,29,38)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="93.9683%" y="261" width="0.0794%" height="15" fill="rgb(206,182,49)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="93.9683%" y="245" width="0.0794%" height="15" fill="rgb(216,140,1)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="93.9683%" y="229" width="0.0794%" height="15" fill="rgb(232,57,40)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.9683%" y="213" width="0.0794%" height="15" fill="rgb(224,186,18)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.9683%" y="197" width="0.0794%" height="15" fill="rgb(215,121,11)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.9683%" y="181" width="0.0794%" height="15" fill="rgb(245,147,10)" fg:x="1184" fg:w="1"/><text x="94.2183%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="94.0476%" y="261" width="0.0794%" height="15" fill="rgb(238,153,13)" fg:x="1185" fg:w="1"/><text x="94.2976%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="94.0476%" y="245" width="0.0794%" height="15" fill="rgb(233,108,0)" fg:x="1185" fg:w="1"/><text x="94.2976%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.0476%" y="229" width="0.0794%" height="15" fill="rgb(212,157,17)" fg:x="1185" fg:w="1"/><text x="94.2976%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="94.0476%" y="213" width="0.0794%" height="15" fill="rgb(225,213,38)" fg:x="1185" fg:w="1"/><text x="94.2976%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="94.2063%" y="245" width="0.1587%" height="15" fill="rgb(248,16,11)" fg:x="1187" fg:w="2"/><text x="94.4563%" y="255.50"></text></g><g><title>regex_automata::meta::strategy::new (14 samples, 1.11%)</title><rect x="93.5714%" y="293" width="1.1111%" height="15" fill="rgb(241,33,4)" fg:x="1179" fg:w="14"/><text x="93.8214%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (8 samples, 0.63%)</title><rect x="94.0476%" y="277" width="0.6349%" height="15" fill="rgb(222,26,43)" fg:x="1185" fg:w="8"/><text x="94.2976%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (7 samples, 0.56%)</title><rect x="94.1270%" y="261" width="0.5556%" height="15" fill="rgb(243,29,36)" fg:x="1186" fg:w="7"/><text x="94.3770%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="94.3651%" y="245" width="0.3175%" height="15" fill="rgb(241,9,27)" fg:x="1189" fg:w="4"/><text x="94.6151%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="94.6032%" y="229" width="0.0794%" height="15" fill="rgb(205,117,26)" fg:x="1192" fg:w="1"/><text x="94.8532%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="94.7619%" y="245" width="0.1587%" height="15" fill="rgb(209,80,39)" fg:x="1194" fg:w="2"/><text x="95.0119%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.8413%" y="229" width="0.0794%" height="15" fill="rgb(239,155,6)" fg:x="1195" fg:w="1"/><text x="95.0913%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.8413%" y="213" width="0.0794%" height="15" fill="rgb(212,104,12)" fg:x="1195" fg:w="1"/><text x="95.0913%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.8413%" y="197" width="0.0794%" height="15" fill="rgb(234,204,3)" fg:x="1195" fg:w="1"/><text x="95.0913%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.48%)</title><rect x="94.6825%" y="261" width="0.4762%" height="15" fill="rgb(251,218,7)" fg:x="1193" fg:w="6"/><text x="94.9325%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="94.9206%" y="245" width="0.2381%" height="15" fill="rgb(221,81,32)" fg:x="1196" fg:w="3"/><text x="95.1706%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (2 samples, 0.16%)</title><rect x="95.0000%" y="229" width="0.1587%" height="15" fill="rgb(214,152,26)" fg:x="1197" fg:w="2"/><text x="95.2500%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="95.0794%" y="213" width="0.0794%" height="15" fill="rgb(223,22,3)" fg:x="1198" fg:w="1"/><text x="95.3294%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="95.0794%" y="197" width="0.0794%" height="15" fill="rgb(207,174,7)" fg:x="1198" fg:w="1"/><text x="95.3294%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.56%)</title><rect x="94.6825%" y="293" width="0.5556%" height="15" fill="rgb(224,19,52)" fg:x="1193" fg:w="7"/><text x="94.9325%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.56%)</title><rect x="94.6825%" y="277" width="0.5556%" height="15" fill="rgb(228,24,14)" fg:x="1193" fg:w="7"/><text x="94.9325%" y="287.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.1587%" y="261" width="0.0794%" height="15" fill="rgb(230,153,43)" fg:x="1199" fg:w="1"/><text x="95.4087%" y="271.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (24 samples, 1.90%)</title><rect x="93.4127%" y="341" width="1.9048%" height="15" fill="rgb(231,106,12)" fg:x="1177" fg:w="24"/><text x="93.6627%" y="351.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (24 samples, 1.90%)</title><rect x="93.4127%" y="325" width="1.9048%" height="15" fill="rgb(215,92,2)" fg:x="1177" fg:w="24"/><text x="93.6627%" y="335.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (24 samples, 1.90%)</title><rect x="93.4127%" y="309" width="1.9048%" height="15" fill="rgb(249,143,25)" fg:x="1177" fg:w="24"/><text x="93.6627%" y="319.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="95.2381%" y="293" width="0.0794%" height="15" fill="rgb(252,7,35)" fg:x="1200" fg:w="1"/><text x="95.4881%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.2381%" y="277" width="0.0794%" height="15" fill="rgb(216,69,40)" fg:x="1200" fg:w="1"/><text x="95.4881%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.2381%" y="261" width="0.0794%" height="15" fill="rgb(240,36,33)" fg:x="1200" fg:w="1"/><text x="95.4881%" y="271.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.2381%" y="245" width="0.0794%" height="15" fill="rgb(231,128,14)" fg:x="1200" fg:w="1"/><text x="95.4881%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="95.3175%" y="309" width="0.0794%" height="15" fill="rgb(245,143,14)" fg:x="1201" fg:w="1"/><text x="95.5675%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.3175%" y="293" width="0.0794%" height="15" fill="rgb(222,130,28)" fg:x="1201" fg:w="1"/><text x="95.5675%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.3175%" y="277" width="0.0794%" height="15" fill="rgb(212,10,48)" fg:x="1201" fg:w="1"/><text x="95.5675%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.3175%" y="261" width="0.0794%" height="15" fill="rgb(254,118,45)" fg:x="1201" fg:w="1"/><text x="95.5675%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="95.3175%" y="341" width="0.1587%" height="15" fill="rgb(228,6,45)" fg:x="1201" fg:w="2"/><text x="95.5675%" y="351.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="95.3175%" y="325" width="0.1587%" height="15" fill="rgb(241,18,35)" fg:x="1201" fg:w="2"/><text x="95.5675%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.3968%" y="309" width="0.0794%" height="15" fill="rgb(227,214,53)" fg:x="1202" fg:w="1"/><text x="95.6468%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="95.4762%" y="341" width="0.0794%" height="15" fill="rgb(224,107,51)" fg:x="1203" fg:w="1"/><text x="95.7262%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="95.4762%" y="325" width="0.0794%" height="15" fill="rgb(248,60,28)" fg:x="1203" fg:w="1"/><text x="95.7262%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.4762%" y="309" width="0.0794%" height="15" fill="rgb(249,101,23)" fg:x="1203" fg:w="1"/><text x="95.7262%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.4762%" y="293" width="0.0794%" height="15" fill="rgb(228,51,19)" fg:x="1203" fg:w="1"/><text x="95.7262%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="95.5556%" y="277" width="0.0794%" height="15" fill="rgb(213,20,6)" fg:x="1204" fg:w="1"/><text x="95.8056%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="95.5556%" y="261" width="0.0794%" height="15" fill="rgb(212,124,10)" fg:x="1204" fg:w="1"/><text x="95.8056%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.7143%" y="229" width="0.0794%" height="15" fill="rgb(248,3,40)" fg:x="1206" fg:w="1"/><text x="95.9643%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.7143%" y="213" width="0.0794%" height="15" fill="rgb(223,178,23)" fg:x="1206" fg:w="1"/><text x="95.9643%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="95.7143%" y="261" width="0.1587%" height="15" fill="rgb(240,132,45)" fg:x="1206" fg:w="2"/><text x="95.9643%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.7143%" y="245" width="0.1587%" height="15" fill="rgb(245,164,36)" fg:x="1206" fg:w="2"/><text x="95.9643%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.7937%" y="229" width="0.0794%" height="15" fill="rgb(231,188,53)" fg:x="1207" fg:w="1"/><text x="96.0437%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (34 samples, 2.70%)</title><rect x="93.2540%" y="357" width="2.6984%" height="15" fill="rgb(237,198,39)" fg:x="1175" fg:w="34"/><text x="93.5040%" y="367.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (5 samples, 0.40%)</title><rect x="95.5556%" y="341" width="0.3968%" height="15" fill="rgb(223,120,35)" fg:x="1204" fg:w="5"/><text x="95.8056%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (5 samples, 0.40%)</title><rect x="95.5556%" y="325" width="0.3968%" height="15" fill="rgb(253,107,49)" fg:x="1204" fg:w="5"/><text x="95.8056%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (5 samples, 0.40%)</title><rect x="95.5556%" y="309" width="0.3968%" height="15" fill="rgb(216,44,31)" fg:x="1204" fg:w="5"/><text x="95.8056%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="95.5556%" y="293" width="0.3968%" height="15" fill="rgb(253,87,21)" fg:x="1204" fg:w="5"/><text x="95.8056%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.32%)</title><rect x="95.6349%" y="277" width="0.3175%" height="15" fill="rgb(226,18,2)" fg:x="1205" fg:w="4"/><text x="95.8849%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="95.8730%" y="261" width="0.0794%" height="15" fill="rgb(216,8,46)" fg:x="1208" fg:w="1"/><text x="96.1230%" y="271.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (249 samples, 19.76%)</title><rect x="76.3492%" y="453" width="19.7619%" height="15" fill="rgb(226,140,39)" fg:x="962" fg:w="249"/><text x="76.5992%" y="463.50">&lt;&amp;kernel::model::entry::Entry a..</text></g><g><title>plugins_core::looking::model::qualify_name (245 samples, 19.44%)</title><rect x="76.6667%" y="437" width="19.4444%" height="15" fill="rgb(221,194,54)" fg:x="966" fg:w="245"/><text x="76.9167%" y="447.50">plugins_core::looking::model::..</text></g><g><title>indefinite::indefinite (244 samples, 19.37%)</title><rect x="76.7460%" y="421" width="19.3651%" height="15" fill="rgb(213,92,11)" fg:x="967" fg:w="244"/><text x="76.9960%" y="431.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (244 samples, 19.37%)</title><rect x="76.7460%" y="405" width="19.3651%" height="15" fill="rgb(229,162,46)" fg:x="967" fg:w="244"/><text x="76.9960%" y="415.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (244 samples, 19.37%)</title><rect x="76.7460%" y="389" width="19.3651%" height="15" fill="rgb(214,111,36)" fg:x="967" fg:w="244"/><text x="76.9960%" y="399.50">indefinite::methods::apply_rul..</text></g><g><title>indefinite::rules::other::Other::run (36 samples, 2.86%)</title><rect x="93.2540%" y="373" width="2.8571%" height="15" fill="rgb(207,6,21)" fg:x="1175" fg:w="36"/><text x="93.5040%" y="383.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="95.9524%" y="357" width="0.1587%" height="15" fill="rgb(213,127,38)" fg:x="1209" fg:w="2"/><text x="96.2024%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (253 samples, 20.08%)</title><rect x="76.2698%" y="645" width="20.0794%" height="15" fill="rgb(238,118,32)" fg:x="961" fg:w="253"/><text x="76.5198%" y="655.50">&lt;engine::session::Session as ker..</text></g><g><title>kernel::plugins::mw::apply_middleware (253 samples, 20.08%)</title><rect x="76.2698%" y="629" width="20.0794%" height="15" fill="rgb(240,139,39)" fg:x="961" fg:w="253"/><text x="76.5198%" y="639.50">kernel::plugins::mw::apply_middl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (253 samples, 20.08%)</title><rect x="76.2698%" y="613" width="20.0794%" height="15" fill="rgb(235,10,37)" fg:x="961" fg:w="253"/><text x="76.5198%" y="623.50">kernel::plugins::mw::MiddlewareN..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (252 samples, 20.00%)</title><rect x="76.3492%" y="597" width="20.0000%" height="15" fill="rgb(249,171,38)" fg:x="962" fg:w="252"/><text x="76.5992%" y="607.50">&lt;plugins_dynlib::DynamicMiddlew..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (252 samples, 20.00%)</title><rect x="76.3492%" y="581" width="20.0000%" height="15" fill="rgb(242,144,32)" fg:x="962" fg:w="252"/><text x="76.5992%" y="591.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (252 samples, 20.00%)</title><rect x="76.3492%" y="565" width="20.0000%" height="15" fill="rgb(217,117,21)" fg:x="962" fg:w="252"/><text x="76.5992%" y="575.50">core::ops::function::FnOnce::ca..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (252 samples, 20.00%)</title><rect x="76.3492%" y="549" width="20.0000%" height="15" fill="rgb(249,87,1)" fg:x="962" fg:w="252"/><text x="76.5992%" y="559.50">kernel::plugins::mw::Middleware..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (252 samples, 20.00%)</title><rect x="76.3492%" y="533" width="20.0000%" height="15" fill="rgb(248,196,48)" fg:x="962" fg:w="252"/><text x="76.5992%" y="543.50">core::ops::function::FnOnce::ca..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (252 samples, 20.00%)</title><rect x="76.3492%" y="517" width="20.0000%" height="15" fill="rgb(251,206,33)" fg:x="962" fg:w="252"/><text x="76.5992%" y="527.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (252 samples, 20.00%)</title><rect x="76.3492%" y="501" width="20.0000%" height="15" fill="rgb(232,141,28)" fg:x="962" fg:w="252"/><text x="76.5992%" y="511.50">&lt;engine::session::state::State ..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (252 samples, 20.00%)</title><rect x="76.3492%" y="485" width="20.0000%" height="15" fill="rgb(209,167,14)" fg:x="962" fg:w="252"/><text x="76.5992%" y="495.50">&lt;plugins_core::looking::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (252 samples, 20.00%)</title><rect x="76.3492%" y="469" width="20.0000%" height="15" fill="rgb(225,11,50)" fg:x="962" fg:w="252"/><text x="76.5992%" y="479.50">plugins_core::looking::model::n..</text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="96.1111%" y="453" width="0.2381%" height="15" fill="rgb(209,50,20)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="96.1111%" y="437" width="0.2381%" height="15" fill="rgb(212,17,46)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="96.1111%" y="421" width="0.2381%" height="15" fill="rgb(216,101,39)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="96.1111%" y="405" width="0.2381%" height="15" fill="rgb(212,228,48)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="96.1111%" y="389" width="0.2381%" height="15" fill="rgb(250,6,50)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="399.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="96.1111%" y="373" width="0.2381%" height="15" fill="rgb(250,160,48)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="383.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="96.1111%" y="357" width="0.2381%" height="15" fill="rgb(244,216,33)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="96.1111%" y="341" width="0.2381%" height="15" fill="rgb(207,157,5)" fg:x="1211" fg:w="3"/><text x="96.3611%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="96.1905%" y="325" width="0.1587%" height="15" fill="rgb(228,199,8)" fg:x="1212" fg:w="2"/><text x="96.4405%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="96.2698%" y="309" width="0.0794%" height="15" fill="rgb(227,80,20)" fg:x="1213" fg:w="1"/><text x="96.5198%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.2698%" y="293" width="0.0794%" height="15" fill="rgb(222,9,33)" fg:x="1213" fg:w="1"/><text x="96.5198%" y="303.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3492%" y="549" width="0.0794%" height="15" fill="rgb(239,44,28)" fg:x="1214" fg:w="1"/><text x="96.5992%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3492%" y="533" width="0.0794%" height="15" fill="rgb(249,187,43)" fg:x="1214" fg:w="1"/><text x="96.5992%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.3492%" y="565" width="0.1587%" height="15" fill="rgb(216,141,28)" fg:x="1214" fg:w="2"/><text x="96.5992%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4286%" y="549" width="0.0794%" height="15" fill="rgb(230,154,53)" fg:x="1215" fg:w="1"/><text x="96.6786%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;dynlib_sys::DynMessage&gt; (3 samples, 0.24%)</title><rect x="96.3492%" y="613" width="0.2381%" height="15" fill="rgb(227,82,4)" fg:x="1214" fg:w="3"/><text x="96.5992%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.3492%" y="597" width="0.2381%" height="15" fill="rgb(220,107,16)" fg:x="1214" fg:w="3"/><text x="96.5992%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="96.3492%" y="581" width="0.2381%" height="15" fill="rgb(207,187,2)" fg:x="1214" fg:w="3"/><text x="96.5992%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;rpc_proto::JsonValue&gt; (1 samples, 0.08%)</title><rect x="96.5079%" y="565" width="0.0794%" height="15" fill="rgb(210,162,52)" fg:x="1216" fg:w="1"/><text x="96.7579%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="96.5873%" y="581" width="0.0794%" height="15" fill="rgb(217,216,49)" fg:x="1217" fg:w="1"/><text x="96.8373%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="96.5873%" y="565" width="0.0794%" height="15" fill="rgb(218,146,49)" fg:x="1217" fg:w="1"/><text x="96.8373%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="96.7460%" y="405" width="0.0794%" height="15" fill="rgb(216,55,40)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="415.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="96.7460%" y="389" width="0.0794%" height="15" fill="rgb(208,196,21)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="96.7460%" y="373" width="0.0794%" height="15" fill="rgb(242,117,42)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="383.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="96.7460%" y="357" width="0.0794%" height="15" fill="rgb(210,11,23)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="367.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="96.7460%" y="341" width="0.0794%" height="15" fill="rgb(217,110,2)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7460%" y="325" width="0.0794%" height="15" fill="rgb(229,77,54)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7460%" y="309" width="0.0794%" height="15" fill="rgb(218,53,16)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.7460%" y="293" width="0.0794%" height="15" fill="rgb(215,38,13)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7460%" y="277" width="0.0794%" height="15" fill="rgb(235,42,18)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="96.7460%" y="261" width="0.0794%" height="15" fill="rgb(219,66,54)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="96.7460%" y="245" width="0.0794%" height="15" fill="rgb(222,205,4)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="96.7460%" y="229" width="0.0794%" height="15" fill="rgb(227,213,46)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="96.7460%" y="213" width="0.0794%" height="15" fill="rgb(250,145,42)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7460%" y="197" width="0.0794%" height="15" fill="rgb(219,15,2)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="96.7460%" y="181" width="0.0794%" height="15" fill="rgb(231,181,52)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="96.7460%" y="165" width="0.0794%" height="15" fill="rgb(235,1,42)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="96.7460%" y="149" width="0.0794%" height="15" fill="rgb(249,88,27)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="96.7460%" y="133" width="0.0794%" height="15" fill="rgb(235,145,16)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="96.7460%" y="117" width="0.0794%" height="15" fill="rgb(237,114,19)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7460%" y="101" width="0.0794%" height="15" fill="rgb(238,51,50)" fg:x="1219" fg:w="1"/><text x="96.9960%" y="111.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="96.8254%" y="405" width="0.0794%" height="15" fill="rgb(205,194,25)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="415.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="96.8254%" y="389" width="0.0794%" height="15" fill="rgb(215,203,17)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="399.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="96.8254%" y="373" width="0.0794%" height="15" fill="rgb(233,112,49)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8254%" y="357" width="0.0794%" height="15" fill="rgb(241,130,26)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8254%" y="341" width="0.0794%" height="15" fill="rgb(252,223,19)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="96.8254%" y="325" width="0.0794%" height="15" fill="rgb(211,95,25)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.8254%" y="309" width="0.0794%" height="15" fill="rgb(251,182,27)" fg:x="1220" fg:w="1"/><text x="97.0754%" y="319.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="96.6667%" y="517" width="0.3175%" height="15" fill="rgb(238,24,4)" fg:x="1218" fg:w="4"/><text x="96.9167%" y="527.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys::{{closure}} (4 samples, 0.32%)</title><rect x="96.6667%" y="501" width="0.3175%" height="15" fill="rgb(224,220,25)" fg:x="1218" fg:w="4"/><text x="96.9167%" y="511.50"></text></g><g><title>kernel::model::entry::Entry::maybe_scope (4 samples, 0.32%)</title><rect x="96.6667%" y="485" width="0.3175%" height="15" fill="rgb(239,133,26)" fg:x="1218" fg:w="4"/><text x="96.9167%" y="495.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="96.7460%" y="469" width="0.2381%" height="15" fill="rgb(211,94,48)" fg:x="1219" fg:w="3"/><text x="96.9960%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="96.7460%" y="453" width="0.2381%" height="15" fill="rgb(239,87,6)" fg:x="1219" fg:w="3"/><text x="96.9960%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="96.7460%" y="437" width="0.2381%" height="15" fill="rgb(227,62,0)" fg:x="1219" fg:w="3"/><text x="96.9960%" y="447.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="96.7460%" y="421" width="0.2381%" height="15" fill="rgb(211,226,4)" fg:x="1219" fg:w="3"/><text x="96.9960%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_str (1 samples, 0.08%)</title><rect x="96.9048%" y="405" width="0.0794%" height="15" fill="rgb(253,38,52)" fg:x="1221" fg:w="1"/><text x="97.1548%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9048%" y="389" width="0.0794%" height="15" fill="rgb(229,126,40)" fg:x="1221" fg:w="1"/><text x="97.1548%" y="399.50"></text></g><g><title>plugins_core::tools::get_adjacent_keys (5 samples, 0.40%)</title><rect x="96.6667%" y="533" width="0.3968%" height="15" fill="rgb(229,165,44)" fg:x="1218" fg:w="5"/><text x="96.9167%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="96.9841%" y="517" width="0.0794%" height="15" fill="rgb(247,95,47)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="96.9841%" y="501" width="0.0794%" height="15" fill="rgb(216,140,30)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9841%" y="485" width="0.0794%" height="15" fill="rgb(246,214,8)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9841%" y="469" width="0.0794%" height="15" fill="rgb(227,224,15)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="96.9841%" y="453" width="0.0794%" height="15" fill="rgb(233,175,4)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="96.9841%" y="437" width="0.0794%" height="15" fill="rgb(221,66,45)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="96.9841%" y="421" width="0.0794%" height="15" fill="rgb(221,178,18)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="96.9841%" y="405" width="0.0794%" height="15" fill="rgb(213,81,29)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="96.9841%" y="389" width="0.0794%" height="15" fill="rgb(220,89,49)" fg:x="1222" fg:w="1"/><text x="97.2341%" y="399.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as core::convert::Into&lt;kernel::model::entity::EntityRef&gt;&gt;::into (1 samples, 0.08%)</title><rect x="97.0635%" y="421" width="0.0794%" height="15" fill="rgb(227,60,33)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0635%" y="405" width="0.0794%" height="15" fill="rgb(205,113,12)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.0635%" y="389" width="0.0794%" height="15" fill="rgb(211,32,1)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.0635%" y="373" width="0.0794%" height="15" fill="rgb(246,2,12)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.0635%" y="357" width="0.0794%" height="15" fill="rgb(243,37,27)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.0635%" y="341" width="0.0794%" height="15" fill="rgb(248,211,31)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.0635%" y="325" width="0.0794%" height="15" fill="rgb(242,146,47)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.0635%" y="309" width="0.0794%" height="15" fill="rgb(206,70,20)" fg:x="1223" fg:w="1"/><text x="97.3135%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1429%" y="309" width="0.0794%" height="15" fill="rgb(215,10,51)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.1429%" y="293" width="0.0794%" height="15" fill="rgb(243,178,53)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1429%" y="277" width="0.0794%" height="15" fill="rgb(233,221,20)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.1429%" y="261" width="0.0794%" height="15" fill="rgb(218,95,35)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.1429%" y="245" width="0.0794%" height="15" fill="rgb(229,13,5)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.1429%" y="229" width="0.0794%" height="15" fill="rgb(252,164,30)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.1429%" y="213" width="0.0794%" height="15" fill="rgb(232,68,36)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1429%" y="197" width="0.0794%" height="15" fill="rgb(219,59,54)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.1429%" y="181" width="0.0794%" height="15" fill="rgb(250,92,33)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.1429%" y="165" width="0.0794%" height="15" fill="rgb(229,162,54)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.1429%" y="149" width="0.0794%" height="15" fill="rgb(244,114,52)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.1429%" y="133" width="0.0794%" height="15" fill="rgb(212,211,43)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.1429%" y="117" width="0.0794%" height="15" fill="rgb(226,147,8)" fg:x="1224" fg:w="1"/><text x="97.3929%" y="127.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (2 samples, 0.16%)</title><rect x="97.1429%" y="389" width="0.1587%" height="15" fill="rgb(226,23,13)" fg:x="1224" fg:w="2"/><text x="97.3929%" y="399.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="97.1429%" y="373" width="0.1587%" height="15" fill="rgb(240,63,4)" fg:x="1224" fg:w="2"/><text x="97.3929%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="97.1429%" y="357" width="0.1587%" height="15" fill="rgb(221,1,32)" fg:x="1224" fg:w="2"/><text x="97.3929%" y="367.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="97.1429%" y="341" width="0.1587%" height="15" fill="rgb(242,117,10)" fg:x="1224" fg:w="2"/><text x="97.3929%" y="351.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="97.1429%" y="325" width="0.1587%" height="15" fill="rgb(249,172,44)" fg:x="1224" fg:w="2"/><text x="97.3929%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2222%" y="309" width="0.0794%" height="15" fill="rgb(244,46,45)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2222%" y="293" width="0.0794%" height="15" fill="rgb(206,43,17)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2222%" y="277" width="0.0794%" height="15" fill="rgb(239,218,39)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2222%" y="261" width="0.0794%" height="15" fill="rgb(208,169,54)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.2222%" y="245" width="0.0794%" height="15" fill="rgb(247,25,42)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2222%" y="229" width="0.0794%" height="15" fill="rgb(226,23,31)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.2222%" y="213" width="0.0794%" height="15" fill="rgb(247,16,28)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.2222%" y="197" width="0.0794%" height="15" fill="rgb(231,147,38)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.2222%" y="181" width="0.0794%" height="15" fill="rgb(253,81,48)" fg:x="1225" fg:w="1"/><text x="97.4722%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="97.3016%" y="389" width="0.0794%" height="15" fill="rgb(249,222,43)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="97.3016%" y="373" width="0.0794%" height="15" fill="rgb(221,3,27)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="383.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="97.3016%" y="357" width="0.0794%" height="15" fill="rgb(228,180,5)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3016%" y="341" width="0.0794%" height="15" fill="rgb(227,131,42)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3016%" y="325" width="0.0794%" height="15" fill="rgb(212,3,39)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.3016%" y="309" width="0.0794%" height="15" fill="rgb(226,45,5)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3016%" y="293" width="0.0794%" height="15" fill="rgb(215,167,45)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.3016%" y="277" width="0.0794%" height="15" fill="rgb(250,218,53)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.3016%" y="261" width="0.0794%" height="15" fill="rgb(207,140,0)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.3016%" y="245" width="0.0794%" height="15" fill="rgb(238,133,51)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.3016%" y="229" width="0.0794%" height="15" fill="rgb(218,203,53)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="97.3016%" y="213" width="0.0794%" height="15" fill="rgb(226,184,25)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="97.3016%" y="197" width="0.0794%" height="15" fill="rgb(231,121,21)" fg:x="1226" fg:w="1"/><text x="97.5516%" y="207.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="97.3810%" y="373" width="0.0794%" height="15" fill="rgb(251,14,34)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3810%" y="357" width="0.0794%" height="15" fill="rgb(249,193,11)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3810%" y="341" width="0.0794%" height="15" fill="rgb(220,172,37)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3810%" y="325" width="0.0794%" height="15" fill="rgb(231,229,43)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3810%" y="309" width="0.0794%" height="15" fill="rgb(250,161,5)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3810%" y="293" width="0.0794%" height="15" fill="rgb(218,225,18)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3810%" y="277" width="0.0794%" height="15" fill="rgb(245,45,42)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3810%" y="261" width="0.0794%" height="15" fill="rgb(211,115,1)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3810%" y="245" width="0.0794%" height="15" fill="rgb(248,133,52)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.3810%" y="229" width="0.0794%" height="15" fill="rgb(238,100,21)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.3810%" y="213" width="0.0794%" height="15" fill="rgb(247,144,11)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.3810%" y="197" width="0.0794%" height="15" fill="rgb(206,164,16)" fg:x="1227" fg:w="1"/><text x="97.6310%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.4603%" y="293" width="0.0794%" height="15" fill="rgb(222,34,3)" fg:x="1228" fg:w="1"/><text x="97.7103%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.4603%" y="277" width="0.0794%" height="15" fill="rgb(248,82,4)" fg:x="1228" fg:w="1"/><text x="97.7103%" y="287.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="97.4603%" y="261" width="0.0794%" height="15" fill="rgb(228,81,46)" fg:x="1228" fg:w="1"/><text x="97.7103%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.03%)</title><rect x="96.6667%" y="565" width="1.0317%" height="15" fill="rgb(227,67,47)" fg:x="1218" fg:w="13"/><text x="96.9167%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (13 samples, 1.03%)</title><rect x="96.6667%" y="549" width="1.0317%" height="15" fill="rgb(215,93,53)" fg:x="1218" fg:w="13"/><text x="96.9167%" y="559.50"></text></g><g><title>plugins_core::tools::get_contained_keys (8 samples, 0.63%)</title><rect x="97.0635%" y="533" width="0.6349%" height="15" fill="rgb(248,194,39)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="543.50"></text></g><g><title>kernel::model::entry::Entry::scope (8 samples, 0.63%)</title><rect x="97.0635%" y="517" width="0.6349%" height="15" fill="rgb(215,5,19)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (8 samples, 0.63%)</title><rect x="97.0635%" y="501" width="0.6349%" height="15" fill="rgb(226,215,51)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="511.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (8 samples, 0.63%)</title><rect x="97.0635%" y="485" width="0.6349%" height="15" fill="rgb(225,56,26)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (8 samples, 0.63%)</title><rect x="97.0635%" y="469" width="0.6349%" height="15" fill="rgb(222,75,29)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.63%)</title><rect x="97.0635%" y="453" width="0.6349%" height="15" fill="rgb(236,139,6)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="463.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (8 samples, 0.63%)</title><rect x="97.0635%" y="437" width="0.6349%" height="15" fill="rgb(223,137,36)" fg:x="1223" fg:w="8"/><text x="97.3135%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (7 samples, 0.56%)</title><rect x="97.1429%" y="421" width="0.5556%" height="15" fill="rgb(226,99,2)" fg:x="1224" fg:w="7"/><text x="97.3929%" y="431.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.56%)</title><rect x="97.1429%" y="405" width="0.5556%" height="15" fill="rgb(206,133,23)" fg:x="1224" fg:w="7"/><text x="97.3929%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_str (4 samples, 0.32%)</title><rect x="97.3810%" y="389" width="0.3175%" height="15" fill="rgb(243,173,15)" fg:x="1227" fg:w="4"/><text x="97.6310%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.4603%" y="373" width="0.2381%" height="15" fill="rgb(228,69,28)" fg:x="1228" fg:w="3"/><text x="97.7103%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.4603%" y="357" width="0.2381%" height="15" fill="rgb(212,51,22)" fg:x="1228" fg:w="3"/><text x="97.7103%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="97.4603%" y="341" width="0.2381%" height="15" fill="rgb(227,113,0)" fg:x="1228" fg:w="3"/><text x="97.7103%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.4603%" y="325" width="0.2381%" height="15" fill="rgb(252,84,27)" fg:x="1228" fg:w="3"/><text x="97.7103%" y="335.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="97.4603%" y="309" width="0.2381%" height="15" fill="rgb(223,145,39)" fg:x="1228" fg:w="3"/><text x="97.7103%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.5397%" y="293" width="0.1587%" height="15" fill="rgb(239,219,30)" fg:x="1229" fg:w="2"/><text x="97.7897%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.5397%" y="277" width="0.1587%" height="15" fill="rgb(224,196,39)" fg:x="1229" fg:w="2"/><text x="97.7897%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="97.5397%" y="261" width="0.1587%" height="15" fill="rgb(205,35,43)" fg:x="1229" fg:w="2"/><text x="97.7897%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.5397%" y="245" width="0.1587%" height="15" fill="rgb(228,201,21)" fg:x="1229" fg:w="2"/><text x="97.7897%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.5397%" y="229" width="0.1587%" height="15" fill="rgb(237,118,16)" fg:x="1229" fg:w="2"/><text x="97.7897%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.6190%" y="213" width="0.0794%" height="15" fill="rgb(241,17,19)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6190%" y="197" width="0.0794%" height="15" fill="rgb(214,10,25)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6190%" y="181" width="0.0794%" height="15" fill="rgb(238,37,29)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.6190%" y="165" width="0.0794%" height="15" fill="rgb(253,83,25)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6190%" y="149" width="0.0794%" height="15" fill="rgb(234,192,12)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6190%" y="133" width="0.0794%" height="15" fill="rgb(241,216,45)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.6190%" y="117" width="0.0794%" height="15" fill="rgb(242,22,33)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="127.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.6190%" y="101" width="0.0794%" height="15" fill="rgb(231,105,49)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.6190%" y="85" width="0.0794%" height="15" fill="rgb(218,204,15)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="97.6190%" y="69" width="0.0794%" height="15" fill="rgb(235,138,41)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="79.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.6190%" y="53" width="0.0794%" height="15" fill="rgb(246,0,9)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="63.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.6190%" y="37" width="0.0794%" height="15" fill="rgb(210,74,4)" fg:x="1230" fg:w="1"/><text x="97.8690%" y="47.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.6984%" y="373" width="0.0794%" height="15" fill="rgb(250,60,41)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.6984%" y="357" width="0.0794%" height="15" fill="rgb(220,115,12)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="367.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.6984%" y="341" width="0.0794%" height="15" fill="rgb(237,100,13)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.6984%" y="325" width="0.0794%" height="15" fill="rgb(213,55,26)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.6984%" y="309" width="0.0794%" height="15" fill="rgb(216,17,4)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.6984%" y="293" width="0.0794%" height="15" fill="rgb(220,153,47)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.6984%" y="277" width="0.0794%" height="15" fill="rgb(215,131,9)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.6984%" y="261" width="0.0794%" height="15" fill="rgb(233,46,42)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6984%" y="245" width="0.0794%" height="15" fill="rgb(226,86,7)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="97.6984%" y="229" width="0.0794%" height="15" fill="rgb(239,226,21)" fg:x="1231" fg:w="1"/><text x="97.9484%" y="239.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (2 samples, 0.16%)</title><rect x="97.6984%" y="517" width="0.1587%" height="15" fill="rgb(244,137,22)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="527.50"></text></g><g><title>kernel::model::entry::Entry::new (2 samples, 0.16%)</title><rect x="97.6984%" y="501" width="0.1587%" height="15" fill="rgb(211,139,35)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="511.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="97.6984%" y="485" width="0.1587%" height="15" fill="rgb(214,62,50)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="495.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="97.6984%" y="469" width="0.1587%" height="15" fill="rgb(212,113,44)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="479.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="97.6984%" y="453" width="0.1587%" height="15" fill="rgb(226,150,43)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="97.6984%" y="437" width="0.1587%" height="15" fill="rgb(250,71,37)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="447.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="97.6984%" y="421" width="0.1587%" height="15" fill="rgb(219,76,19)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_fmt (2 samples, 0.16%)</title><rect x="97.6984%" y="405" width="0.1587%" height="15" fill="rgb(250,39,11)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="415.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="97.6984%" y="389" width="0.1587%" height="15" fill="rgb(230,64,31)" fg:x="1231" fg:w="2"/><text x="97.9484%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="97.7778%" y="373" width="0.0794%" height="15" fill="rgb(208,222,23)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.7778%" y="357" width="0.0794%" height="15" fill="rgb(227,125,18)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="97.7778%" y="341" width="0.0794%" height="15" fill="rgb(234,210,9)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="351.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="97.7778%" y="325" width="0.0794%" height="15" fill="rgb(217,127,24)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="97.7778%" y="309" width="0.0794%" height="15" fill="rgb(239,141,48)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="97.7778%" y="293" width="0.0794%" height="15" fill="rgb(227,109,8)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="97.7778%" y="277" width="0.0794%" height="15" fill="rgb(235,184,23)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.7778%" y="261" width="0.0794%" height="15" fill="rgb(227,226,48)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="97.7778%" y="245" width="0.0794%" height="15" fill="rgb(206,150,11)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.7778%" y="229" width="0.0794%" height="15" fill="rgb(254,2,33)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="97.7778%" y="213" width="0.0794%" height="15" fill="rgb(243,160,20)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.7778%" y="197" width="0.0794%" height="15" fill="rgb(218,208,30)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="97.7778%" y="181" width="0.0794%" height="15" fill="rgb(224,120,49)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="191.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="97.7778%" y="165" width="0.0794%" height="15" fill="rgb(246,12,2)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="175.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="97.7778%" y="149" width="0.0794%" height="15" fill="rgb(236,117,3)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.7778%" y="133" width="0.0794%" height="15" fill="rgb(216,128,52)" fg:x="1232" fg:w="1"/><text x="98.0278%" y="143.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (6 samples, 0.48%)</title><rect x="98.0159%" y="453" width="0.4762%" height="15" fill="rgb(246,145,19)" fg:x="1235" fg:w="6"/><text x="98.2659%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="98.0952%" y="437" width="0.3968%" height="15" fill="rgb(222,11,46)" fg:x="1236" fg:w="5"/><text x="98.3452%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.40%)</title><rect x="98.0952%" y="421" width="0.3968%" height="15" fill="rgb(245,82,36)" fg:x="1236" fg:w="5"/><text x="98.3452%" y="431.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (4 samples, 0.32%)</title><rect x="98.1746%" y="405" width="0.3175%" height="15" fill="rgb(250,73,51)" fg:x="1237" fg:w="4"/><text x="98.4246%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.3333%" y="389" width="0.1587%" height="15" fill="rgb(221,189,23)" fg:x="1239" fg:w="2"/><text x="98.5833%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.3333%" y="373" width="0.1587%" height="15" fill="rgb(210,33,7)" fg:x="1239" fg:w="2"/><text x="98.5833%" y="383.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (2 samples, 0.16%)</title><rect x="98.3333%" y="357" width="0.1587%" height="15" fill="rgb(210,107,22)" fg:x="1239" fg:w="2"/><text x="98.5833%" y="367.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.3333%" y="341" width="0.1587%" height="15" fill="rgb(222,116,37)" fg:x="1239" fg:w="2"/><text x="98.5833%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.16%)</title><rect x="98.3333%" y="325" width="0.1587%" height="15" fill="rgb(254,17,48)" fg:x="1239" fg:w="2"/><text x="98.5833%" y="335.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.4127%" y="309" width="0.0794%" height="15" fill="rgb(224,36,32)" fg:x="1240" fg:w="1"/><text x="98.6627%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4127%" y="293" width="0.0794%" height="15" fill="rgb(232,90,46)" fg:x="1240" fg:w="1"/><text x="98.6627%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.4127%" y="277" width="0.0794%" height="15" fill="rgb(241,66,40)" fg:x="1240" fg:w="1"/><text x="98.6627%" y="287.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (1 samples, 0.08%)</title><rect x="98.4127%" y="261" width="0.0794%" height="15" fill="rgb(249,184,29)" fg:x="1240" fg:w="1"/><text x="98.6627%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.4127%" y="245" width="0.0794%" height="15" fill="rgb(231,181,1)" fg:x="1240" fg:w="1"/><text x="98.6627%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.4127%" y="229" width="0.0794%" height="15" fill="rgb(224,94,2)" fg:x="1240" fg:w="1"/><text x="98.6627%" y="239.50"></text></g><g><title>&lt;rpc_proto::JsonValue as core::convert::From&lt;serde_json::value::Value&gt;&gt;::from (9 samples, 0.71%)</title><rect x="97.8571%" y="501" width="0.7143%" height="15" fill="rgb(229,170,15)" fg:x="1233" fg:w="9"/><text x="98.1071%" y="511.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="97.8571%" y="485" width="0.7143%" height="15" fill="rgb(240,127,35)" fg:x="1233" fg:w="9"/><text x="98.1071%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.63%)</title><rect x="97.9365%" y="469" width="0.6349%" height="15" fill="rgb(248,196,34)" fg:x="1234" fg:w="8"/><text x="98.1865%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.4921%" y="453" width="0.0794%" height="15" fill="rgb(236,137,7)" fg:x="1241" fg:w="1"/><text x="98.7421%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.4921%" y="437" width="0.0794%" height="15" fill="rgb(235,127,16)" fg:x="1241" fg:w="1"/><text x="98.7421%" y="447.50"></text></g><g><title>alloc::alloc::box_free (1 samples, 0.08%)</title><rect x="98.4921%" y="421" width="0.0794%" height="15" fill="rgb(250,192,54)" fg:x="1241" fg:w="1"/><text x="98.7421%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.7302%" y="421" width="0.0794%" height="15" fill="rgb(218,98,20)" fg:x="1244" fg:w="1"/><text x="98.9802%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.7302%" y="453" width="0.1587%" height="15" fill="rgb(230,176,47)" fg:x="1244" fg:w="2"/><text x="98.9802%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="98.7302%" y="437" width="0.1587%" height="15" fill="rgb(244,2,33)" fg:x="1244" fg:w="2"/><text x="98.9802%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.8095%" y="421" width="0.0794%" height="15" fill="rgb(231,100,17)" fg:x="1245" fg:w="1"/><text x="99.0595%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="98.8889%" y="453" width="0.0794%" height="15" fill="rgb(245,23,12)" fg:x="1246" fg:w="1"/><text x="99.1389%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="98.8889%" y="437" width="0.0794%" height="15" fill="rgb(249,55,22)" fg:x="1246" fg:w="1"/><text x="99.1389%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="98.9683%" y="405" width="0.0794%" height="15" fill="rgb(207,134,9)" fg:x="1247" fg:w="1"/><text x="99.2183%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="98.9683%" y="389" width="0.0794%" height="15" fill="rgb(218,134,0)" fg:x="1247" fg:w="1"/><text x="99.2183%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="98.9683%" y="373" width="0.0794%" height="15" fill="rgb(213,212,33)" fg:x="1247" fg:w="1"/><text x="99.2183%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9683%" y="357" width="0.0794%" height="15" fill="rgb(252,106,18)" fg:x="1247" fg:w="1"/><text x="99.2183%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9683%" y="341" width="0.0794%" height="15" fill="rgb(208,126,42)" fg:x="1247" fg:w="1"/><text x="99.2183%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="98.9683%" y="325" width="0.0794%" height="15" fill="rgb(246,175,29)" fg:x="1247" fg:w="1"/><text x="99.2183%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="99.0476%" y="325" width="0.0794%" height="15" fill="rgb(215,13,50)" fg:x="1248" fg:w="1"/><text x="99.2976%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="99.0476%" y="357" width="0.1587%" height="15" fill="rgb(216,172,15)" fg:x="1248" fg:w="2"/><text x="99.2976%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="99.0476%" y="341" width="0.1587%" height="15" fill="rgb(212,103,13)" fg:x="1248" fg:w="2"/><text x="99.2976%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="99.1270%" y="325" width="0.0794%" height="15" fill="rgb(231,171,36)" fg:x="1249" fg:w="1"/><text x="99.3770%" y="335.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="99.1270%" y="309" width="0.0794%" height="15" fill="rgb(250,123,20)" fg:x="1249" fg:w="1"/><text x="99.3770%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.1270%" y="293" width="0.0794%" height="15" fill="rgb(212,53,50)" fg:x="1249" fg:w="1"/><text x="99.3770%" y="303.50"></text></g><g><title>&lt;rpc_proto::Json as core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt;&gt;::try_from (18 samples, 1.43%)</title><rect x="97.8571%" y="517" width="1.4286%" height="15" fill="rgb(243,54,12)" fg:x="1233" fg:w="18"/><text x="98.1071%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::to_json_value (9 samples, 0.71%)</title><rect x="98.5714%" y="501" width="0.7143%" height="15" fill="rgb(234,101,34)" fg:x="1242" fg:w="9"/><text x="98.8214%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="98.5714%" y="485" width="0.7143%" height="15" fill="rgb(254,67,22)" fg:x="1242" fg:w="9"/><text x="98.8214%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.71%)</title><rect x="98.5714%" y="469" width="0.7143%" height="15" fill="rgb(250,35,47)" fg:x="1242" fg:w="9"/><text x="98.8214%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="98.9683%" y="453" width="0.3175%" height="15" fill="rgb(226,126,38)" fg:x="1247" fg:w="4"/><text x="99.2183%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="98.9683%" y="437" width="0.3175%" height="15" fill="rgb(216,138,53)" fg:x="1247" fg:w="4"/><text x="99.2183%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="98.9683%" y="421" width="0.3175%" height="15" fill="rgb(246,199,43)" fg:x="1247" fg:w="4"/><text x="99.2183%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="99.0476%" y="405" width="0.2381%" height="15" fill="rgb(232,125,11)" fg:x="1248" fg:w="3"/><text x="99.2976%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="99.0476%" y="389" width="0.2381%" height="15" fill="rgb(218,219,45)" fg:x="1248" fg:w="3"/><text x="99.2976%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="99.0476%" y="373" width="0.2381%" height="15" fill="rgb(216,102,54)" fg:x="1248" fg:w="3"/><text x="99.2976%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2063%" y="357" width="0.0794%" height="15" fill="rgb(250,228,7)" fg:x="1250" fg:w="1"/><text x="99.4563%" y="367.50"></text></g><g><title>&lt;plugins_rpc::sessions::SessionServices as plugins_rpc::sessions::Services&gt;::lookup (35 samples, 2.78%)</title><rect x="96.5873%" y="597" width="2.7778%" height="15" fill="rgb(226,125,25)" fg:x="1217" fg:w="35"/><text x="96.8373%" y="607.50">&lt;p..</text></g><g><title>core::iter::adapters::try_process (34 samples, 2.70%)</title><rect x="96.6667%" y="581" width="2.6984%" height="15" fill="rgb(224,165,27)" fg:x="1218" fg:w="34"/><text x="96.9167%" y="591.50">co..</text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (21 samples, 1.67%)</title><rect x="97.6984%" y="565" width="1.6667%" height="15" fill="rgb(233,86,3)" fg:x="1231" fg:w="21"/><text x="97.9484%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (21 samples, 1.67%)</title><rect x="97.6984%" y="549" width="1.6667%" height="15" fill="rgb(228,116,20)" fg:x="1231" fg:w="21"/><text x="97.9484%" y="559.50"></text></g><g><title>plugins_rpc::sessions::SessionServices::lookup_one (21 samples, 1.67%)</title><rect x="97.6984%" y="533" width="1.6667%" height="15" fill="rgb(209,192,17)" fg:x="1231" fg:w="21"/><text x="97.9484%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="99.2857%" y="517" width="0.0794%" height="15" fill="rgb(224,88,34)" fg:x="1251" fg:w="1"/><text x="99.5357%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="99.2857%" y="501" width="0.0794%" height="15" fill="rgb(233,38,6)" fg:x="1251" fg:w="1"/><text x="99.5357%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (296 samples, 23.49%)</title><rect x="75.9524%" y="661" width="23.4921%" height="15" fill="rgb(212,59,30)" fg:x="957" fg:w="296"/><text x="76.2024%" y="671.50">&lt;engine::session::Session as kernel::..</text></g><g><title>kernel::plugins::SessionPlugins::have_surroundings (39 samples, 3.10%)</title><rect x="96.3492%" y="645" width="3.0952%" height="15" fill="rgb(213,80,3)" fg:x="1214" fg:w="39"/><text x="96.5992%" y="655.50">ker..</text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::have_surroundings (39 samples, 3.10%)</title><rect x="96.3492%" y="629" width="3.0952%" height="15" fill="rgb(251,178,7)" fg:x="1214" fg:w="39"/><text x="96.5992%" y="639.50">&lt;pl..</text></g><g><title>plugins_rpc::querying::have_surroundings (36 samples, 2.86%)</title><rect x="96.5873%" y="613" width="2.8571%" height="15" fill="rgb(213,154,26)" fg:x="1217" fg:w="36"/><text x="96.8373%" y="623.50">pl..</text></g><g><title>&lt;rpc_proto::Surroundings as core::convert::TryFrom&lt;&amp;kernel::surround::Surroundings&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="99.3651%" y="597" width="0.0794%" height="15" fill="rgb(238,165,49)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="99.3651%" y="581" width="0.0794%" height="15" fill="rgb(248,91,46)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="591.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.3651%" y="565" width="0.0794%" height="15" fill="rgb(244,21,52)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.3651%" y="549" width="0.0794%" height="15" fill="rgb(247,122,20)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.3651%" y="533" width="0.0794%" height="15" fill="rgb(218,27,9)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.3651%" y="517" width="0.0794%" height="15" fill="rgb(246,7,6)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="99.3651%" y="501" width="0.0794%" height="15" fill="rgb(227,135,54)" fg:x="1252" fg:w="1"/><text x="99.6151%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.4444%" y="629" width="0.0794%" height="15" fill="rgb(247,14,11)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.4444%" y="613" width="0.0794%" height="15" fill="rgb(206,149,34)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="99.4444%" y="597" width="0.0794%" height="15" fill="rgb(227,228,4)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4444%" y="581" width="0.0794%" height="15" fill="rgb(238,218,28)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4444%" y="565" width="0.0794%" height="15" fill="rgb(252,86,40)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4444%" y="549" width="0.0794%" height="15" fill="rgb(251,225,11)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.4444%" y="533" width="0.0794%" height="15" fill="rgb(206,46,49)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.4444%" y="517" width="0.0794%" height="15" fill="rgb(245,128,24)" fg:x="1253" fg:w="1"/><text x="99.6944%" y="527.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.5238%" y="613" width="0.0794%" height="15" fill="rgb(219,177,34)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5238%" y="597" width="0.0794%" height="15" fill="rgb(218,60,48)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5238%" y="581" width="0.0794%" height="15" fill="rgb(221,11,5)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5238%" y="565" width="0.0794%" height="15" fill="rgb(220,148,13)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5238%" y="549" width="0.0794%" height="15" fill="rgb(210,16,3)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5238%" y="533" width="0.0794%" height="15" fill="rgb(236,80,2)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5238%" y="517" width="0.0794%" height="15" fill="rgb(239,129,19)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5238%" y="501" width="0.0794%" height="15" fill="rgb(220,106,35)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5238%" y="485" width="0.0794%" height="15" fill="rgb(252,139,45)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5238%" y="469" width="0.0794%" height="15" fill="rgb(229,8,36)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5238%" y="453" width="0.0794%" height="15" fill="rgb(230,126,33)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.5238%" y="437" width="0.0794%" height="15" fill="rgb(239,140,21)" fg:x="1254" fg:w="1"/><text x="99.7738%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="99.4444%" y="661" width="0.2381%" height="15" fill="rgb(254,104,9)" fg:x="1253" fg:w="3"/><text x="99.6944%" y="671.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.4444%" y="645" width="0.2381%" height="15" fill="rgb(239,52,14)" fg:x="1253" fg:w="3"/><text x="99.6944%" y="655.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="99.5238%" y="629" width="0.1587%" height="15" fill="rgb(208,227,44)" fg:x="1254" fg:w="2"/><text x="99.7738%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6032%" y="613" width="0.0794%" height="15" fill="rgb(246,18,19)" fg:x="1255" fg:w="1"/><text x="99.8532%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6032%" y="597" width="0.0794%" height="15" fill="rgb(235,228,25)" fg:x="1255" fg:w="1"/><text x="99.8532%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.6032%" y="581" width="0.0794%" height="15" fill="rgb(240,156,20)" fg:x="1255" fg:w="1"/><text x="99.8532%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.6032%" y="565" width="0.0794%" height="15" fill="rgb(224,8,20)" fg:x="1255" fg:w="1"/><text x="99.8532%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.6825%" y="533" width="0.0794%" height="15" fill="rgb(214,12,52)" fg:x="1256" fg:w="1"/><text x="99.9325%" y="543.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="99.6825%" y="645" width="0.1587%" height="15" fill="rgb(211,220,47)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="655.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="99.6825%" y="629" width="0.1587%" height="15" fill="rgb(250,173,5)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_str (2 samples, 0.16%)</title><rect x="99.6825%" y="613" width="0.1587%" height="15" fill="rgb(250,125,52)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6825%" y="597" width="0.1587%" height="15" fill="rgb(209,133,18)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6825%" y="581" width="0.1587%" height="15" fill="rgb(216,173,22)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6825%" y="565" width="0.1587%" height="15" fill="rgb(205,3,22)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6825%" y="549" width="0.1587%" height="15" fill="rgb(248,22,20)" fg:x="1256" fg:w="2"/><text x="99.9325%" y="559.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7619%" y="533" width="0.0794%" height="15" fill="rgb(233,6,29)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7619%" y="517" width="0.0794%" height="15" fill="rgb(240,22,54)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7619%" y="501" width="0.0794%" height="15" fill="rgb(231,133,32)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7619%" y="485" width="0.0794%" height="15" fill="rgb(248,193,4)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7619%" y="469" width="0.0794%" height="15" fill="rgb(211,178,46)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7619%" y="453" width="0.0794%" height="15" fill="rgb(224,5,42)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7619%" y="437" width="0.0794%" height="15" fill="rgb(239,176,25)" fg:x="1257" fg:w="1"/><text x="100.0119%" y="447.50"></text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (379 samples, 30.08%)</title><rect x="69.8413%" y="725" width="30.0794%" height="15" fill="rgb(245,187,50)" fg:x="880" fg:w="379"/><text x="70.0913%" y="735.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterio..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (379 samples, 30.08%)</title><rect x="69.8413%" y="709" width="30.0794%" height="15" fill="rgb(248,24,15)" fg:x="880" fg:w="379"/><text x="70.0913%" y="719.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (379 samples, 30.08%)</title><rect x="69.8413%" y="693" width="30.0794%" height="15" fill="rgb(205,166,13)" fg:x="880" fg:w="379"/><text x="70.0913%" y="703.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (302 samples, 23.97%)</title><rect x="75.9524%" y="677" width="23.9683%" height="15" fill="rgb(208,114,23)" fg:x="957" fg:w="302"/><text x="76.2024%" y="687.50">engine::session::Session::evaluate_and..</text></g><g><title>&lt;engine::session::Session as kernel::model::entry::EntryResolver&gt;::entry (3 samples, 0.24%)</title><rect x="99.6825%" y="661" width="0.2381%" height="15" fill="rgb(239,127,18)" fg:x="1256" fg:w="3"/><text x="99.9325%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="99.8413%" y="645" width="0.0794%" height="15" fill="rgb(219,154,28)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="655.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="99.8413%" y="629" width="0.0794%" height="15" fill="rgb(225,157,23)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="639.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8413%" y="613" width="0.0794%" height="15" fill="rgb(219,8,6)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8413%" y="597" width="0.0794%" height="15" fill="rgb(212,47,6)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="607.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="99.8413%" y="581" width="0.0794%" height="15" fill="rgb(224,190,4)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8413%" y="565" width="0.0794%" height="15" fill="rgb(239,183,29)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="575.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="99.8413%" y="549" width="0.0794%" height="15" fill="rgb(213,57,7)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8413%" y="533" width="0.0794%" height="15" fill="rgb(216,148,1)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8413%" y="517" width="0.0794%" height="15" fill="rgb(236,182,29)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8413%" y="501" width="0.0794%" height="15" fill="rgb(244,120,48)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="99.8413%" y="485" width="0.0794%" height="15" fill="rgb(206,71,34)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="99.8413%" y="469" width="0.0794%" height="15" fill="rgb(242,32,6)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="99.8413%" y="453" width="0.0794%" height="15" fill="rgb(241,35,3)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="99.8413%" y="437" width="0.0794%" height="15" fill="rgb(222,62,19)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.8413%" y="421" width="0.0794%" height="15" fill="rgb(223,110,41)" fg:x="1258" fg:w="1"/><text x="100.0913%" y="431.50"></text></g><g><title>all (1,260 samples, 100%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(208,224,4)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="1039.50"></text></g><g><title>simple-484c7248 (1,260 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(241,137,19)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="1023.50">simple-484c7248</text></g><g><title>_start (1,260 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(244,24,17)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="1007.50">_start</text></g><g><title>__libc_start_main (1,260 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(245,178,49)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="991.50">__libc_start_main</text></g><g><title>main (1,260 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(219,160,38)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="975.50">main</text></g><g><title>std::rt::lang_start_internal (1,260 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(228,137,14)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,260 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(237,134,11)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,260 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(211,126,44)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,260 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(226,171,33)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,260 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(253,99,13)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="895.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,260 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(244,48,7)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="879.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,260 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(244,217,54)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="863.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,260 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(224,15,18)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="847.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,260 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(244,99,12)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="831.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,260 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(233,226,8)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="815.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,260 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(229,211,3)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="799.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,260 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(216,140,21)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="783.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,260 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(234,122,30)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="767.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,260 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(236,25,46)" fg:x="0" fg:w="1260"/><text x="0.2500%" y="751.50">criterion::routine::Routine::profile</text></g><g><title>&lt;pprof::criterion::PProfProfiler as criterion::profiler::Profiler&gt;::stop_profiling (1 samples, 0.08%)</title><rect x="99.9206%" y="725" width="0.0794%" height="15" fill="rgb(217,52,54)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="735.50"></text></g><g><title>std::fs::OpenOptions::_open (1 samples, 0.08%)</title><rect x="99.9206%" y="709" width="0.0794%" height="15" fill="rgb(222,29,26)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="719.50"></text></g><g><title>std::sys::unix::fs::File::open (1 samples, 0.08%)</title><rect x="99.9206%" y="693" width="0.0794%" height="15" fill="rgb(216,177,29)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="703.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="99.9206%" y="677" width="0.0794%" height="15" fill="rgb(247,136,51)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="687.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="99.9206%" y="661" width="0.0794%" height="15" fill="rgb(231,47,47)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="671.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (1 samples, 0.08%)</title><rect x="99.9206%" y="645" width="0.0794%" height="15" fill="rgb(211,192,36)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="655.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.08%)</title><rect x="99.9206%" y="629" width="0.0794%" height="15" fill="rgb(229,156,32)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="639.50"></text></g><g><title>std::sys::unix::cvt_r (1 samples, 0.08%)</title><rect x="99.9206%" y="613" width="0.0794%" height="15" fill="rgb(248,213,20)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="623.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (1 samples, 0.08%)</title><rect x="99.9206%" y="597" width="0.0794%" height="15" fill="rgb(217,64,7)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="607.50"></text></g><g><title>__open (1 samples, 0.08%)</title><rect x="99.9206%" y="581" width="0.0794%" height="15" fill="rgb(232,142,8)" fg:x="1259" fg:w="1"/><text x="100.1706%" y="591.50"></text></g></svg></svg>