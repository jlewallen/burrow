<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1030" onload="init(evt)" viewBox="0 0 1200 1030" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1030" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1013.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1013.00"> </text><svg id="frames" x="10" width="1180" total_samples="1223"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="581" width="0.0818%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="0.0000%" y="613" width="0.1635%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0000%" y="597" width="0.1635%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_dynlib::DynamicPlugin&gt; (1 samples, 0.08%)</title><rect x="0.0818%" y="581" width="0.0818%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3318%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0818%" y="565" width="0.0818%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3318%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.3271%" y="517" width="0.1635%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="0.5771%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.25%)</title><rect x="0.4906%" y="517" width="0.2453%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="3"/><text x="0.7406%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5724%" y="501" width="0.1635%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="2"/><text x="0.8224%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.8177%" y="501" width="0.0818%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="1.0677%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.9812%" y="485" width="0.0818%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="1"/><text x="1.2312%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.9812%" y="469" width="0.0818%" height="15" fill="rgb(250,228,42)" fg:x="12" fg:w="1"/><text x="1.2312%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.90%)</title><rect x="0.2453%" y="549" width="0.8994%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="11"/><text x="0.4953%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.82%)</title><rect x="0.3271%" y="533" width="0.8177%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="10"/><text x="0.5771%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="0.7359%" y="517" width="0.4088%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="5"/><text x="0.9859%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="0.8994%" y="501" width="0.2453%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="3"/><text x="1.1494%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0630%" y="485" width="0.0818%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="1"/><text x="1.3130%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3900%" y="517" width="0.0818%" height="15" fill="rgb(225,20,46)" fg:x="17" fg:w="1"/><text x="1.6400%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4718%" y="517" width="0.0818%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="1"/><text x="1.7218%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.4718%" y="501" width="0.0818%" height="15" fill="rgb(221,200,47)" fg:x="18" fg:w="1"/><text x="1.7218%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="1.6353%" y="501" width="0.0818%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="1.8853%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6353%" y="485" width="0.0818%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="1"/><text x="1.8853%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6353%" y="469" width="0.0818%" height="15" fill="rgb(235,183,28)" fg:x="20" fg:w="1"/><text x="1.8853%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.7171%" y="501" width="0.0818%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="1"/><text x="1.9671%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7171%" y="485" width="0.0818%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="1.9671%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.65%)</title><rect x="1.3083%" y="533" width="0.6541%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="8"/><text x="1.5583%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.5536%" y="517" width="0.4088%" height="15" fill="rgb(249,31,29)" fg:x="19" fg:w="5"/><text x="1.8036%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="1.7989%" y="501" width="0.1635%" height="15" fill="rgb(225,111,53)" fg:x="22" fg:w="2"/><text x="2.0489%" y="511.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.7989%" y="485" width="0.1635%" height="15" fill="rgb(238,160,17)" fg:x="22" fg:w="2"/><text x="2.0489%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.88%)</title><rect x="0.1635%" y="597" width="1.8806%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="23"/><text x="0.4135%" y="607.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (23 samples, 1.88%)</title><rect x="0.1635%" y="581" width="1.8806%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="23"/><text x="0.4135%" y="591.50">c..</text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.88%)</title><rect x="0.1635%" y="565" width="1.8806%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="23"/><text x="0.4135%" y="575.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.90%)</title><rect x="1.1447%" y="549" width="0.8994%" height="15" fill="rgb(229,88,8)" fg:x="14" fg:w="11"/><text x="1.3947%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="1.9624%" y="533" width="0.0818%" height="15" fill="rgb(213,181,19)" fg:x="24" fg:w="1"/><text x="2.2124%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (26 samples, 2.13%)</title><rect x="0.0000%" y="629" width="2.1259%" height="15" fill="rgb(254,191,54)" fg:x="0" fg:w="26"/><text x="0.2500%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (24 samples, 1.96%)</title><rect x="0.1635%" y="613" width="1.9624%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="24"/><text x="0.4135%" y="623.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0442%" y="597" width="0.0818%" height="15" fill="rgb(233,36,39)" fg:x="25" fg:w="1"/><text x="2.2942%" y="607.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.1259%" y="565" width="0.0818%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="1"/><text x="2.3759%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="2.2895%" y="533" width="0.0818%" height="15" fill="rgb(245,192,40)" fg:x="28" fg:w="1"/><text x="2.5395%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="2.2895%" y="517" width="0.0818%" height="15" fill="rgb(238,167,29)" fg:x="28" fg:w="1"/><text x="2.5395%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="2.2895%" y="501" width="0.0818%" height="15" fill="rgb(232,182,51)" fg:x="28" fg:w="1"/><text x="2.5395%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="2.2895%" y="485" width="0.0818%" height="15" fill="rgb(231,60,39)" fg:x="28" fg:w="1"/><text x="2.5395%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2895%" y="469" width="0.0818%" height="15" fill="rgb(208,69,12)" fg:x="28" fg:w="1"/><text x="2.5395%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2895%" y="453" width="0.0818%" height="15" fill="rgb(235,93,37)" fg:x="28" fg:w="1"/><text x="2.5395%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="2.2895%" y="437" width="0.0818%" height="15" fill="rgb(213,116,39)" fg:x="28" fg:w="1"/><text x="2.5395%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="2.2895%" y="421" width="0.0818%" height="15" fill="rgb(222,207,29)" fg:x="28" fg:w="1"/><text x="2.5395%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="2.2895%" y="405" width="0.0818%" height="15" fill="rgb(206,96,30)" fg:x="28" fg:w="1"/><text x="2.5395%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="2.2895%" y="389" width="0.0818%" height="15" fill="rgb(218,138,4)" fg:x="28" fg:w="1"/><text x="2.5395%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.2895%" y="373" width="0.0818%" height="15" fill="rgb(250,191,14)" fg:x="28" fg:w="1"/><text x="2.5395%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="2.2895%" y="357" width="0.0818%" height="15" fill="rgb(239,60,40)" fg:x="28" fg:w="1"/><text x="2.5395%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.2895%" y="341" width="0.0818%" height="15" fill="rgb(206,27,48)" fg:x="28" fg:w="1"/><text x="2.5395%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="2.2895%" y="325" width="0.0818%" height="15" fill="rgb(225,35,8)" fg:x="28" fg:w="1"/><text x="2.5395%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.2895%" y="309" width="0.0818%" height="15" fill="rgb(250,213,24)" fg:x="28" fg:w="1"/><text x="2.5395%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.2895%" y="293" width="0.0818%" height="15" fill="rgb(247,123,22)" fg:x="28" fg:w="1"/><text x="2.5395%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.2895%" y="277" width="0.0818%" height="15" fill="rgb(231,138,38)" fg:x="28" fg:w="1"/><text x="2.5395%" y="287.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.2895%" y="261" width="0.0818%" height="15" fill="rgb(231,145,46)" fg:x="28" fg:w="1"/><text x="2.5395%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.2895%" y="245" width="0.0818%" height="15" fill="rgb(251,118,11)" fg:x="28" fg:w="1"/><text x="2.5395%" y="255.50"></text></g><g><title>__asprintf (2 samples, 0.16%)</title><rect x="2.3712%" y="501" width="0.1635%" height="15" fill="rgb(217,147,25)" fg:x="29" fg:w="2"/><text x="2.6212%" y="511.50"></text></g><g><title>_IO_default_xsputn (1 samples, 0.08%)</title><rect x="2.4530%" y="485" width="0.0818%" height="15" fill="rgb(247,81,37)" fg:x="30" fg:w="1"/><text x="2.7030%" y="495.50"></text></g><g><title>dlerror (3 samples, 0.25%)</title><rect x="2.3712%" y="517" width="0.2453%" height="15" fill="rgb(209,12,38)" fg:x="29" fg:w="3"/><text x="2.6212%" y="527.50"></text></g><g><title>__tfind (1 samples, 0.08%)</title><rect x="2.5348%" y="501" width="0.0818%" height="15" fill="rgb(227,1,9)" fg:x="31" fg:w="1"/><text x="2.7848%" y="511.50"></text></g><g><title>dlopen (10 samples, 0.82%)</title><rect x="2.6165%" y="517" width="0.8177%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="10"/><text x="2.8665%" y="527.50"></text></g><g><title>_dl_catch_error (10 samples, 0.82%)</title><rect x="2.6165%" y="501" width="0.8177%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="10"/><text x="2.8665%" y="511.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.82%)</title><rect x="2.6165%" y="485" width="0.8177%" height="15" fill="rgb(210,229,1)" fg:x="32" fg:w="10"/><text x="2.8665%" y="495.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.82%)</title><rect x="2.6165%" y="469" width="0.8177%" height="15" fill="rgb(222,148,37)" fg:x="32" fg:w="10"/><text x="2.8665%" y="479.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.82%)</title><rect x="2.6165%" y="453" width="0.8177%" height="15" fill="rgb(234,67,33)" fg:x="32" fg:w="10"/><text x="2.8665%" y="463.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="3.3524%" y="437" width="0.0818%" height="15" fill="rgb(247,98,35)" fg:x="41" fg:w="1"/><text x="3.6024%" y="447.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (16 samples, 1.31%)</title><rect x="2.2077%" y="549" width="1.3083%" height="15" fill="rgb(247,138,52)" fg:x="27" fg:w="16"/><text x="2.4577%" y="559.50"></text></g><g><title>libloading::safe::Library::new (14 samples, 1.14%)</title><rect x="2.3712%" y="533" width="1.1447%" height="15" fill="rgb(213,79,30)" fg:x="29" fg:w="14"/><text x="2.6212%" y="543.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="3.4342%" y="517" width="0.0818%" height="15" fill="rgb(246,177,23)" fg:x="42" fg:w="1"/><text x="3.6842%" y="527.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="3.4342%" y="501" width="0.0818%" height="15" fill="rgb(230,62,27)" fg:x="42" fg:w="1"/><text x="3.6842%" y="511.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="3.4342%" y="485" width="0.0818%" height="15" fill="rgb(216,154,8)" fg:x="42" fg:w="1"/><text x="3.6842%" y="495.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="3.4342%" y="469" width="0.0818%" height="15" fill="rgb(244,35,45)" fg:x="42" fg:w="1"/><text x="3.6842%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (17 samples, 1.39%)</title><rect x="2.2077%" y="565" width="1.3900%" height="15" fill="rgb(251,115,12)" fg:x="27" fg:w="17"/><text x="2.4577%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="3.5159%" y="549" width="0.0818%" height="15" fill="rgb(240,54,50)" fg:x="43" fg:w="1"/><text x="3.7659%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="3.5977%" y="533" width="0.0818%" height="15" fill="rgb(233,84,52)" fg:x="44" fg:w="1"/><text x="3.8477%" y="543.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.64%)</title><rect x="2.1259%" y="581" width="1.6353%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="20"/><text x="2.3759%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="3.5977%" y="565" width="0.1635%" height="15" fill="rgb(249,43,39)" fg:x="44" fg:w="2"/><text x="3.8477%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="3.5977%" y="549" width="0.1635%" height="15" fill="rgb(209,38,44)" fg:x="44" fg:w="2"/><text x="3.8477%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.6795%" y="533" width="0.0818%" height="15" fill="rgb(236,212,23)" fg:x="45" fg:w="1"/><text x="3.9295%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (21 samples, 1.72%)</title><rect x="2.1259%" y="629" width="1.7171%" height="15" fill="rgb(242,79,21)" fg:x="26" fg:w="21"/><text x="2.3759%" y="639.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (21 samples, 1.72%)</title><rect x="2.1259%" y="613" width="1.7171%" height="15" fill="rgb(211,96,35)" fg:x="26" fg:w="21"/><text x="2.3759%" y="623.50"></text></g><g><title>engine::session::Session::new (21 samples, 1.72%)</title><rect x="2.1259%" y="597" width="1.7171%" height="15" fill="rgb(253,215,40)" fg:x="26" fg:w="21"/><text x="2.3759%" y="607.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="3.7612%" y="581" width="0.0818%" height="15" fill="rgb(211,81,21)" fg:x="46" fg:w="1"/><text x="4.0112%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.7612%" y="565" width="0.0818%" height="15" fill="rgb(208,190,38)" fg:x="46" fg:w="1"/><text x="4.0112%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.8430%" y="613" width="0.0818%" height="15" fill="rgb(235,213,38)" fg:x="47" fg:w="1"/><text x="4.0930%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="3.8430%" y="597" width="0.0818%" height="15" fill="rgb(237,122,38)" fg:x="47" fg:w="1"/><text x="4.0930%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8430%" y="581" width="0.0818%" height="15" fill="rgb(244,218,35)" fg:x="47" fg:w="1"/><text x="4.0930%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.8430%" y="565" width="0.0818%" height="15" fill="rgb(240,68,47)" fg:x="47" fg:w="1"/><text x="4.0930%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.8430%" y="549" width="0.0818%" height="15" fill="rgb(210,16,53)" fg:x="47" fg:w="1"/><text x="4.0930%" y="559.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="3.9248%" y="597" width="0.0818%" height="15" fill="rgb(235,124,12)" fg:x="48" fg:w="1"/><text x="4.1748%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.9248%" y="581" width="0.0818%" height="15" fill="rgb(224,169,11)" fg:x="48" fg:w="1"/><text x="4.1748%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.9248%" y="565" width="0.0818%" height="15" fill="rgb(250,166,2)" fg:x="48" fg:w="1"/><text x="4.1748%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="4.0883%" y="517" width="0.0818%" height="15" fill="rgb(242,216,29)" fg:x="50" fg:w="1"/><text x="4.3383%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="4.0883%" y="501" width="0.0818%" height="15" fill="rgb(230,116,27)" fg:x="50" fg:w="1"/><text x="4.3383%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="4.0883%" y="485" width="0.0818%" height="15" fill="rgb(228,99,48)" fg:x="50" fg:w="1"/><text x="4.3383%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="4.0883%" y="469" width="0.0818%" height="15" fill="rgb(253,11,6)" fg:x="50" fg:w="1"/><text x="4.3383%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.0883%" y="453" width="0.0818%" height="15" fill="rgb(247,143,39)" fg:x="50" fg:w="1"/><text x="4.3383%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.0883%" y="437" width="0.0818%" height="15" fill="rgb(236,97,10)" fg:x="50" fg:w="1"/><text x="4.3383%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.0883%" y="421" width="0.0818%" height="15" fill="rgb(233,208,19)" fg:x="50" fg:w="1"/><text x="4.3383%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.0883%" y="405" width="0.0818%" height="15" fill="rgb(216,164,2)" fg:x="50" fg:w="1"/><text x="4.3383%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.1701%" y="501" width="0.0818%" height="15" fill="rgb(220,129,5)" fg:x="51" fg:w="1"/><text x="4.4201%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="4.2518%" y="485" width="0.0818%" height="15" fill="rgb(242,17,10)" fg:x="52" fg:w="1"/><text x="4.5018%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.2518%" y="469" width="0.0818%" height="15" fill="rgb(242,107,0)" fg:x="52" fg:w="1"/><text x="4.5018%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="4.2518%" y="501" width="0.1635%" height="15" fill="rgb(251,28,31)" fg:x="52" fg:w="2"/><text x="4.5018%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.3336%" y="485" width="0.0818%" height="15" fill="rgb(233,223,10)" fg:x="53" fg:w="1"/><text x="4.5836%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.3336%" y="469" width="0.0818%" height="15" fill="rgb(215,21,27)" fg:x="53" fg:w="1"/><text x="4.5836%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="4.4971%" y="485" width="0.0818%" height="15" fill="rgb(232,23,21)" fg:x="55" fg:w="1"/><text x="4.7471%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.4971%" y="469" width="0.0818%" height="15" fill="rgb(244,5,23)" fg:x="55" fg:w="1"/><text x="4.7471%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.4971%" y="453" width="0.0818%" height="15" fill="rgb(226,81,46)" fg:x="55" fg:w="1"/><text x="4.7471%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="4.4971%" y="437" width="0.0818%" height="15" fill="rgb(247,70,30)" fg:x="55" fg:w="1"/><text x="4.7471%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="4.5789%" y="485" width="0.4088%" height="15" fill="rgb(212,68,19)" fg:x="56" fg:w="5"/><text x="4.8289%" y="495.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="4.7424%" y="469" width="0.2453%" height="15" fill="rgb(240,187,13)" fg:x="58" fg:w="3"/><text x="4.9924%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="4.9060%" y="453" width="0.0818%" height="15" fill="rgb(223,113,26)" fg:x="60" fg:w="1"/><text x="5.1560%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.0695%" y="437" width="0.0818%" height="15" fill="rgb(206,192,2)" fg:x="62" fg:w="1"/><text x="5.3195%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="5.0695%" y="469" width="0.2453%" height="15" fill="rgb(241,108,4)" fg:x="62" fg:w="3"/><text x="5.3195%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="5.0695%" y="453" width="0.2453%" height="15" fill="rgb(247,173,49)" fg:x="62" fg:w="3"/><text x="5.3195%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.1513%" y="437" width="0.1635%" height="15" fill="rgb(224,114,35)" fg:x="63" fg:w="2"/><text x="5.4013%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.1513%" y="421" width="0.1635%" height="15" fill="rgb(245,159,27)" fg:x="63" fg:w="2"/><text x="5.4013%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.2330%" y="405" width="0.0818%" height="15" fill="rgb(245,172,44)" fg:x="64" fg:w="1"/><text x="5.4830%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.2330%" y="389" width="0.0818%" height="15" fill="rgb(236,23,11)" fg:x="64" fg:w="1"/><text x="5.4830%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.2330%" y="373" width="0.0818%" height="15" fill="rgb(205,117,38)" fg:x="64" fg:w="1"/><text x="5.4830%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="5.3148%" y="469" width="0.2453%" height="15" fill="rgb(237,72,25)" fg:x="65" fg:w="3"/><text x="5.5648%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.3966%" y="453" width="0.1635%" height="15" fill="rgb(244,70,9)" fg:x="66" fg:w="2"/><text x="5.6466%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.3966%" y="437" width="0.1635%" height="15" fill="rgb(217,125,39)" fg:x="66" fg:w="2"/><text x="5.6466%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.3966%" y="421" width="0.1635%" height="15" fill="rgb(235,36,10)" fg:x="66" fg:w="2"/><text x="5.6466%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.4783%" y="405" width="0.0818%" height="15" fill="rgb(251,123,47)" fg:x="67" fg:w="1"/><text x="5.7283%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.4783%" y="389" width="0.0818%" height="15" fill="rgb(221,13,13)" fg:x="67" fg:w="1"/><text x="5.7283%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.5601%" y="437" width="0.0818%" height="15" fill="rgb(238,131,9)" fg:x="68" fg:w="1"/><text x="5.8101%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.5601%" y="421" width="0.0818%" height="15" fill="rgb(211,50,8)" fg:x="68" fg:w="1"/><text x="5.8101%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5601%" y="405" width="0.0818%" height="15" fill="rgb(245,182,24)" fg:x="68" fg:w="1"/><text x="5.8101%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5601%" y="389" width="0.0818%" height="15" fill="rgb(242,14,37)" fg:x="68" fg:w="1"/><text x="5.8101%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5601%" y="373" width="0.0818%" height="15" fill="rgb(246,228,12)" fg:x="68" fg:w="1"/><text x="5.8101%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5601%" y="357" width="0.0818%" height="15" fill="rgb(213,55,15)" fg:x="68" fg:w="1"/><text x="5.8101%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5601%" y="341" width="0.0818%" height="15" fill="rgb(209,9,3)" fg:x="68" fg:w="1"/><text x="5.8101%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.90%)</title><rect x="4.9877%" y="485" width="0.8994%" height="15" fill="rgb(230,59,30)" fg:x="61" fg:w="11"/><text x="5.2377%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="5.5601%" y="469" width="0.3271%" height="15" fill="rgb(209,121,21)" fg:x="68" fg:w="4"/><text x="5.8101%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="5.5601%" y="453" width="0.3271%" height="15" fill="rgb(220,109,13)" fg:x="68" fg:w="4"/><text x="5.8101%" y="463.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="5.6419%" y="437" width="0.2453%" height="15" fill="rgb(232,18,1)" fg:x="69" fg:w="3"/><text x="5.8919%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.7236%" y="421" width="0.1635%" height="15" fill="rgb(215,41,42)" fg:x="70" fg:w="2"/><text x="5.9736%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.80%)</title><rect x="4.1701%" y="517" width="1.7989%" height="15" fill="rgb(224,123,36)" fg:x="51" fg:w="22"/><text x="4.4201%" y="527.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.55%)</title><rect x="4.4154%" y="501" width="1.5536%" height="15" fill="rgb(240,125,3)" fg:x="54" fg:w="19"/><text x="4.6654%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8872%" y="485" width="0.0818%" height="15" fill="rgb(205,98,50)" fg:x="72" fg:w="1"/><text x="6.1372%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8872%" y="469" width="0.0818%" height="15" fill="rgb(205,185,37)" fg:x="72" fg:w="1"/><text x="6.1372%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.8872%" y="453" width="0.0818%" height="15" fill="rgb(238,207,15)" fg:x="72" fg:w="1"/><text x="6.1372%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.8872%" y="437" width="0.0818%" height="15" fill="rgb(213,199,42)" fg:x="72" fg:w="1"/><text x="6.1372%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.8872%" y="421" width="0.0818%" height="15" fill="rgb(235,201,11)" fg:x="72" fg:w="1"/><text x="6.1372%" y="431.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="5.8872%" y="405" width="0.0818%" height="15" fill="rgb(207,46,11)" fg:x="72" fg:w="1"/><text x="6.1372%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.9689%" y="453" width="0.0818%" height="15" fill="rgb(241,35,35)" fg:x="73" fg:w="1"/><text x="6.2189%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="6.0507%" y="437" width="0.0818%" height="15" fill="rgb(243,32,47)" fg:x="74" fg:w="1"/><text x="6.3007%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="6.0507%" y="421" width="0.0818%" height="15" fill="rgb(247,202,23)" fg:x="74" fg:w="1"/><text x="6.3007%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.0507%" y="405" width="0.0818%" height="15" fill="rgb(219,102,11)" fg:x="74" fg:w="1"/><text x="6.3007%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="5.9689%" y="517" width="0.2453%" height="15" fill="rgb(243,110,44)" fg:x="73" fg:w="3"/><text x="6.2189%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.25%)</title><rect x="5.9689%" y="501" width="0.2453%" height="15" fill="rgb(222,74,54)" fg:x="73" fg:w="3"/><text x="6.2189%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="5.9689%" y="485" width="0.2453%" height="15" fill="rgb(216,99,12)" fg:x="73" fg:w="3"/><text x="6.2189%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="5.9689%" y="469" width="0.2453%" height="15" fill="rgb(226,22,26)" fg:x="73" fg:w="3"/><text x="6.2189%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="6.0507%" y="453" width="0.1635%" height="15" fill="rgb(217,163,10)" fg:x="74" fg:w="2"/><text x="6.3007%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="6.1325%" y="437" width="0.0818%" height="15" fill="rgb(213,25,53)" fg:x="75" fg:w="1"/><text x="6.3825%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="6.1325%" y="421" width="0.0818%" height="15" fill="rgb(252,105,26)" fg:x="75" fg:w="1"/><text x="6.3825%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.1325%" y="405" width="0.0818%" height="15" fill="rgb(220,39,43)" fg:x="75" fg:w="1"/><text x="6.3825%" y="415.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.2142%" y="501" width="0.0818%" height="15" fill="rgb(229,68,48)" fg:x="76" fg:w="1"/><text x="6.4642%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2960%" y="469" width="0.0818%" height="15" fill="rgb(252,8,32)" fg:x="77" fg:w="1"/><text x="6.5460%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3778%" y="469" width="0.0818%" height="15" fill="rgb(223,20,43)" fg:x="78" fg:w="1"/><text x="6.6278%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.3778%" y="453" width="0.0818%" height="15" fill="rgb(229,81,49)" fg:x="78" fg:w="1"/><text x="6.6278%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3778%" y="437" width="0.0818%" height="15" fill="rgb(236,28,36)" fg:x="78" fg:w="1"/><text x="6.6278%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.3778%" y="421" width="0.0818%" height="15" fill="rgb(249,185,26)" fg:x="78" fg:w="1"/><text x="6.6278%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="6.4595%" y="469" width="0.0818%" height="15" fill="rgb(249,174,33)" fg:x="79" fg:w="1"/><text x="6.7095%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="6.4595%" y="453" width="0.0818%" height="15" fill="rgb(233,201,37)" fg:x="79" fg:w="1"/><text x="6.7095%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.4595%" y="437" width="0.0818%" height="15" fill="rgb(221,78,26)" fg:x="79" fg:w="1"/><text x="6.7095%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.7048%" y="421" width="0.0818%" height="15" fill="rgb(250,127,30)" fg:x="82" fg:w="1"/><text x="6.9548%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7048%" y="405" width="0.0818%" height="15" fill="rgb(230,49,44)" fg:x="82" fg:w="1"/><text x="6.9548%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.7048%" y="389" width="0.0818%" height="15" fill="rgb(229,67,23)" fg:x="82" fg:w="1"/><text x="6.9548%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7048%" y="373" width="0.0818%" height="15" fill="rgb(249,83,47)" fg:x="82" fg:w="1"/><text x="6.9548%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.7048%" y="357" width="0.0818%" height="15" fill="rgb(215,43,3)" fg:x="82" fg:w="1"/><text x="6.9548%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.7048%" y="341" width="0.0818%" height="15" fill="rgb(238,154,13)" fg:x="82" fg:w="1"/><text x="6.9548%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="6.7866%" y="405" width="0.0818%" height="15" fill="rgb(219,56,2)" fg:x="83" fg:w="1"/><text x="7.0366%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.7866%" y="389" width="0.0818%" height="15" fill="rgb(233,0,4)" fg:x="83" fg:w="1"/><text x="7.0366%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="6.7866%" y="373" width="0.0818%" height="15" fill="rgb(235,30,7)" fg:x="83" fg:w="1"/><text x="7.0366%" y="383.50"></text></g><g><title>engine::session::Session::flush (37 samples, 3.03%)</title><rect x="3.9248%" y="613" width="3.0253%" height="15" fill="rgb(250,79,13)" fg:x="48" fg:w="37"/><text x="4.1748%" y="623.50">eng..</text></g><g><title>engine::session::state::State::close (36 samples, 2.94%)</title><rect x="4.0065%" y="597" width="2.9436%" height="15" fill="rgb(211,146,34)" fg:x="49" fg:w="36"/><text x="4.2565%" y="607.50">en..</text></g><g><title>engine::session::state::State::flush_entities (35 samples, 2.86%)</title><rect x="4.0883%" y="581" width="2.8618%" height="15" fill="rgb(228,22,38)" fg:x="50" fg:w="35"/><text x="4.3383%" y="591.50">en..</text></g><g><title>core::iter::adapters::try_process (35 samples, 2.86%)</title><rect x="4.0883%" y="565" width="2.8618%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="35"/><text x="4.3383%" y="575.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 2.86%)</title><rect x="4.0883%" y="549" width="2.8618%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="35"/><text x="4.3383%" y="559.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (35 samples, 2.86%)</title><rect x="4.0883%" y="533" width="2.8618%" height="15" fill="rgb(215,215,53)" fg:x="50" fg:w="35"/><text x="4.3383%" y="543.50">en..</text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.74%)</title><rect x="6.2142%" y="517" width="0.7359%" height="15" fill="rgb(223,4,10)" fg:x="76" fg:w="9"/><text x="6.4642%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.65%)</title><rect x="6.2960%" y="501" width="0.6541%" height="15" fill="rgb(234,103,6)" fg:x="77" fg:w="8"/><text x="6.5460%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="6.2960%" y="485" width="0.6541%" height="15" fill="rgb(227,97,0)" fg:x="77" fg:w="8"/><text x="6.5460%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="6.5413%" y="469" width="0.4088%" height="15" fill="rgb(234,150,53)" fg:x="80" fg:w="5"/><text x="6.7913%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="6.6231%" y="453" width="0.3271%" height="15" fill="rgb(228,201,54)" fg:x="81" fg:w="4"/><text x="6.8731%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="6.6231%" y="437" width="0.3271%" height="15" fill="rgb(222,22,37)" fg:x="81" fg:w="4"/><text x="6.8731%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="6.7866%" y="421" width="0.1635%" height="15" fill="rgb(237,53,32)" fg:x="83" fg:w="2"/><text x="7.0366%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8684%" y="405" width="0.0818%" height="15" fill="rgb(233,25,53)" fg:x="84" fg:w="1"/><text x="7.1184%" y="415.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="6.9501%" y="613" width="0.0818%" height="15" fill="rgb(210,40,34)" fg:x="85" fg:w="1"/><text x="7.2001%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="6.9501%" y="597" width="0.0818%" height="15" fill="rgb(241,220,44)" fg:x="85" fg:w="1"/><text x="7.2001%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="6.9501%" y="581" width="0.0818%" height="15" fill="rgb(235,28,35)" fg:x="85" fg:w="1"/><text x="7.2001%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="6.9501%" y="565" width="0.0818%" height="15" fill="rgb(210,56,17)" fg:x="85" fg:w="1"/><text x="7.2001%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.9501%" y="549" width="0.0818%" height="15" fill="rgb(224,130,29)" fg:x="85" fg:w="1"/><text x="7.2001%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9501%" y="533" width="0.0818%" height="15" fill="rgb(235,212,8)" fg:x="85" fg:w="1"/><text x="7.2001%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="6.9501%" y="517" width="0.0818%" height="15" fill="rgb(223,33,50)" fg:x="85" fg:w="1"/><text x="7.2001%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="6.9501%" y="501" width="0.0818%" height="15" fill="rgb(219,149,13)" fg:x="85" fg:w="1"/><text x="7.2001%" y="511.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="6.9501%" y="485" width="0.0818%" height="15" fill="rgb(250,156,29)" fg:x="85" fg:w="1"/><text x="7.2001%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="7.0319%" y="565" width="0.0818%" height="15" fill="rgb(216,193,19)" fg:x="86" fg:w="1"/><text x="7.2819%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="7.0319%" y="549" width="0.0818%" height="15" fill="rgb(216,135,14)" fg:x="86" fg:w="1"/><text x="7.2819%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.0319%" y="533" width="0.0818%" height="15" fill="rgb(241,47,5)" fg:x="86" fg:w="1"/><text x="7.2819%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="7.0319%" y="517" width="0.0818%" height="15" fill="rgb(233,42,35)" fg:x="86" fg:w="1"/><text x="7.2819%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.1137%" y="549" width="0.0818%" height="15" fill="rgb(231,13,6)" fg:x="87" fg:w="1"/><text x="7.3637%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1137%" y="533" width="0.0818%" height="15" fill="rgb(207,181,40)" fg:x="87" fg:w="1"/><text x="7.3637%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.25%)</title><rect x="7.0319%" y="581" width="0.2453%" height="15" fill="rgb(254,173,49)" fg:x="86" fg:w="3"/><text x="7.2819%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="7.1137%" y="565" width="0.1635%" height="15" fill="rgb(221,1,38)" fg:x="87" fg:w="2"/><text x="7.3637%" y="575.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1954%" y="549" width="0.0818%" height="15" fill="rgb(206,124,46)" fg:x="88" fg:w="1"/><text x="7.4454%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1954%" y="533" width="0.0818%" height="15" fill="rgb(249,21,11)" fg:x="88" fg:w="1"/><text x="7.4454%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="7.1954%" y="517" width="0.0818%" height="15" fill="rgb(222,201,40)" fg:x="88" fg:w="1"/><text x="7.4454%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.1954%" y="501" width="0.0818%" height="15" fill="rgb(235,61,29)" fg:x="88" fg:w="1"/><text x="7.4454%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.1954%" y="485" width="0.0818%" height="15" fill="rgb(219,207,3)" fg:x="88" fg:w="1"/><text x="7.4454%" y="495.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2772%" y="533" width="0.0818%" height="15" fill="rgb(222,56,46)" fg:x="89" fg:w="1"/><text x="7.5272%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="7.2772%" y="517" width="0.0818%" height="15" fill="rgb(239,76,54)" fg:x="89" fg:w="1"/><text x="7.5272%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.2772%" y="501" width="0.0818%" height="15" fill="rgb(231,124,27)" fg:x="89" fg:w="1"/><text x="7.5272%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2772%" y="485" width="0.0818%" height="15" fill="rgb(249,195,6)" fg:x="89" fg:w="1"/><text x="7.5272%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.2772%" y="469" width="0.0818%" height="15" fill="rgb(237,174,47)" fg:x="89" fg:w="1"/><text x="7.5272%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.2772%" y="453" width="0.0818%" height="15" fill="rgb(206,201,31)" fg:x="89" fg:w="1"/><text x="7.5272%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="7.2772%" y="565" width="0.1635%" height="15" fill="rgb(231,57,52)" fg:x="89" fg:w="2"/><text x="7.5272%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="7.2772%" y="549" width="0.1635%" height="15" fill="rgb(248,177,22)" fg:x="89" fg:w="2"/><text x="7.5272%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="7.3590%" y="533" width="0.0818%" height="15" fill="rgb(215,211,37)" fg:x="90" fg:w="1"/><text x="7.6090%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="7.3590%" y="517" width="0.0818%" height="15" fill="rgb(241,128,51)" fg:x="90" fg:w="1"/><text x="7.6090%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.3590%" y="501" width="0.0818%" height="15" fill="rgb(227,165,31)" fg:x="90" fg:w="1"/><text x="7.6090%" y="511.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.4407%" y="565" width="0.0818%" height="15" fill="rgb(228,167,24)" fg:x="91" fg:w="1"/><text x="7.6907%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="7.6043%" y="533" width="0.0818%" height="15" fill="rgb(228,143,12)" fg:x="93" fg:w="1"/><text x="7.8543%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.6043%" y="517" width="0.0818%" height="15" fill="rgb(249,149,8)" fg:x="93" fg:w="1"/><text x="7.8543%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="7.6043%" y="501" width="0.0818%" height="15" fill="rgb(243,35,44)" fg:x="93" fg:w="1"/><text x="7.8543%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="7.6043%" y="485" width="0.0818%" height="15" fill="rgb(246,89,9)" fg:x="93" fg:w="1"/><text x="7.8543%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.74%)</title><rect x="7.0319%" y="597" width="0.7359%" height="15" fill="rgb(233,213,13)" fg:x="86" fg:w="9"/><text x="7.2819%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="7.2772%" y="581" width="0.4906%" height="15" fill="rgb(233,141,41)" fg:x="89" fg:w="6"/><text x="7.5272%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.25%)</title><rect x="7.5225%" y="565" width="0.2453%" height="15" fill="rgb(239,167,4)" fg:x="92" fg:w="3"/><text x="7.7725%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="7.5225%" y="549" width="0.2453%" height="15" fill="rgb(209,217,16)" fg:x="92" fg:w="3"/><text x="7.7725%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="7.6860%" y="533" width="0.0818%" height="15" fill="rgb(219,88,35)" fg:x="94" fg:w="1"/><text x="7.9360%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="7.6860%" y="517" width="0.0818%" height="15" fill="rgb(220,193,23)" fg:x="94" fg:w="1"/><text x="7.9360%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="7.6860%" y="501" width="0.0818%" height="15" fill="rgb(230,90,52)" fg:x="94" fg:w="1"/><text x="7.9360%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.6860%" y="485" width="0.0818%" height="15" fill="rgb(252,106,19)" fg:x="94" fg:w="1"/><text x="7.9360%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.7678%" y="597" width="0.0818%" height="15" fill="rgb(206,74,20)" fg:x="95" fg:w="1"/><text x="8.0178%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7678%" y="581" width="0.0818%" height="15" fill="rgb(230,138,44)" fg:x="95" fg:w="1"/><text x="8.0178%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7678%" y="565" width="0.0818%" height="15" fill="rgb(235,182,43)" fg:x="95" fg:w="1"/><text x="8.0178%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.7678%" y="549" width="0.0818%" height="15" fill="rgb(242,16,51)" fg:x="95" fg:w="1"/><text x="8.0178%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.8496%" y="549" width="0.1635%" height="15" fill="rgb(248,9,4)" fg:x="96" fg:w="2"/><text x="8.0996%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9313%" y="533" width="0.0818%" height="15" fill="rgb(210,31,22)" fg:x="97" fg:w="1"/><text x="8.1813%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.9313%" y="517" width="0.0818%" height="15" fill="rgb(239,54,39)" fg:x="97" fg:w="1"/><text x="8.1813%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9313%" y="501" width="0.0818%" height="15" fill="rgb(230,99,41)" fg:x="97" fg:w="1"/><text x="8.1813%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="8.0131%" y="485" width="0.0818%" height="15" fill="rgb(253,106,12)" fg:x="98" fg:w="1"/><text x="8.2631%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.0131%" y="469" width="0.0818%" height="15" fill="rgb(213,46,41)" fg:x="98" fg:w="1"/><text x="8.2631%" y="479.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.14%)</title><rect x="7.0319%" y="613" width="1.1447%" height="15" fill="rgb(215,133,35)" fg:x="86" fg:w="14"/><text x="7.2819%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.33%)</title><rect x="7.8496%" y="597" width="0.3271%" height="15" fill="rgb(213,28,5)" fg:x="96" fg:w="4"/><text x="8.0996%" y="607.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="7.8496%" y="581" width="0.3271%" height="15" fill="rgb(215,77,49)" fg:x="96" fg:w="4"/><text x="8.0996%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="7.8496%" y="565" width="0.3271%" height="15" fill="rgb(248,100,22)" fg:x="96" fg:w="4"/><text x="8.0996%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="8.0131%" y="549" width="0.1635%" height="15" fill="rgb(208,67,9)" fg:x="98" fg:w="2"/><text x="8.2631%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.0131%" y="533" width="0.1635%" height="15" fill="rgb(219,133,21)" fg:x="98" fg:w="2"/><text x="8.2631%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="8.0131%" y="517" width="0.1635%" height="15" fill="rgb(246,46,29)" fg:x="98" fg:w="2"/><text x="8.2631%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="8.0131%" y="501" width="0.1635%" height="15" fill="rgb(246,185,52)" fg:x="98" fg:w="2"/><text x="8.2631%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.0948%" y="485" width="0.0818%" height="15" fill="rgb(252,136,11)" fg:x="99" fg:w="1"/><text x="8.3448%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.0948%" y="469" width="0.0818%" height="15" fill="rgb(219,138,53)" fg:x="99" fg:w="1"/><text x="8.3448%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="8.0948%" y="453" width="0.0818%" height="15" fill="rgb(211,51,23)" fg:x="99" fg:w="1"/><text x="8.3448%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="8.1766%" y="613" width="0.0818%" height="15" fill="rgb(247,221,28)" fg:x="100" fg:w="1"/><text x="8.4266%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="8.1766%" y="597" width="0.0818%" height="15" fill="rgb(251,222,45)" fg:x="100" fg:w="1"/><text x="8.4266%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="8.1766%" y="581" width="0.0818%" height="15" fill="rgb(217,162,53)" fg:x="100" fg:w="1"/><text x="8.4266%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1766%" y="565" width="0.0818%" height="15" fill="rgb(229,93,14)" fg:x="100" fg:w="1"/><text x="8.4266%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2584%" y="533" width="0.0818%" height="15" fill="rgb(209,67,49)" fg:x="101" fg:w="1"/><text x="8.5084%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="8.2584%" y="549" width="0.1635%" height="15" fill="rgb(213,87,29)" fg:x="101" fg:w="2"/><text x="8.5084%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.3401%" y="533" width="0.0818%" height="15" fill="rgb(205,151,52)" fg:x="102" fg:w="1"/><text x="8.5901%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.3401%" y="517" width="0.0818%" height="15" fill="rgb(253,215,39)" fg:x="102" fg:w="1"/><text x="8.5901%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3401%" y="501" width="0.0818%" height="15" fill="rgb(221,220,41)" fg:x="102" fg:w="1"/><text x="8.5901%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3401%" y="485" width="0.0818%" height="15" fill="rgb(218,133,21)" fg:x="102" fg:w="1"/><text x="8.5901%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.3401%" y="469" width="0.0818%" height="15" fill="rgb(221,193,43)" fg:x="102" fg:w="1"/><text x="8.5901%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="8.2584%" y="581" width="0.2453%" height="15" fill="rgb(240,128,52)" fg:x="101" fg:w="3"/><text x="8.5084%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="8.2584%" y="565" width="0.2453%" height="15" fill="rgb(253,114,12)" fg:x="101" fg:w="3"/><text x="8.5084%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="8.4219%" y="549" width="0.0818%" height="15" fill="rgb(215,223,47)" fg:x="103" fg:w="1"/><text x="8.6719%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.4219%" y="533" width="0.0818%" height="15" fill="rgb(248,225,23)" fg:x="103" fg:w="1"/><text x="8.6719%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.4219%" y="517" width="0.0818%" height="15" fill="rgb(250,108,0)" fg:x="103" fg:w="1"/><text x="8.6719%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4219%" y="501" width="0.0818%" height="15" fill="rgb(228,208,7)" fg:x="103" fg:w="1"/><text x="8.6719%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.4219%" y="485" width="0.0818%" height="15" fill="rgb(244,45,10)" fg:x="103" fg:w="1"/><text x="8.6719%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5037%" y="533" width="0.0818%" height="15" fill="rgb(207,125,25)" fg:x="104" fg:w="1"/><text x="8.7537%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.5037%" y="517" width="0.0818%" height="15" fill="rgb(210,195,18)" fg:x="104" fg:w="1"/><text x="8.7537%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5037%" y="501" width="0.0818%" height="15" fill="rgb(249,80,12)" fg:x="104" fg:w="1"/><text x="8.7537%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="8.5037%" y="549" width="0.1635%" height="15" fill="rgb(221,65,9)" fg:x="104" fg:w="2"/><text x="8.7537%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5854%" y="533" width="0.0818%" height="15" fill="rgb(235,49,36)" fg:x="105" fg:w="1"/><text x="8.8354%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.5854%" y="517" width="0.0818%" height="15" fill="rgb(225,32,20)" fg:x="105" fg:w="1"/><text x="8.8354%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.5854%" y="501" width="0.0818%" height="15" fill="rgb(215,141,46)" fg:x="105" fg:w="1"/><text x="8.8354%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.5854%" y="485" width="0.0818%" height="15" fill="rgb(250,160,47)" fg:x="105" fg:w="1"/><text x="8.8354%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.5854%" y="469" width="0.0818%" height="15" fill="rgb(216,222,40)" fg:x="105" fg:w="1"/><text x="8.8354%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.5854%" y="453" width="0.0818%" height="15" fill="rgb(234,217,39)" fg:x="105" fg:w="1"/><text x="8.8354%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.5854%" y="437" width="0.0818%" height="15" fill="rgb(207,178,40)" fg:x="105" fg:w="1"/><text x="8.8354%" y="447.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="8.5037%" y="565" width="0.2453%" height="15" fill="rgb(221,136,13)" fg:x="104" fg:w="3"/><text x="8.7537%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6672%" y="549" width="0.0818%" height="15" fill="rgb(249,199,10)" fg:x="106" fg:w="1"/><text x="8.9172%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6672%" y="533" width="0.0818%" height="15" fill="rgb(249,222,13)" fg:x="106" fg:w="1"/><text x="8.9172%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6672%" y="517" width="0.0818%" height="15" fill="rgb(244,185,38)" fg:x="106" fg:w="1"/><text x="8.9172%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6672%" y="501" width="0.0818%" height="15" fill="rgb(236,202,9)" fg:x="106" fg:w="1"/><text x="8.9172%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.6672%" y="485" width="0.0818%" height="15" fill="rgb(250,229,37)" fg:x="106" fg:w="1"/><text x="8.9172%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.6672%" y="469" width="0.0818%" height="15" fill="rgb(206,174,23)" fg:x="106" fg:w="1"/><text x="8.9172%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="8.6672%" y="453" width="0.0818%" height="15" fill="rgb(211,33,43)" fg:x="106" fg:w="1"/><text x="8.9172%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.6672%" y="437" width="0.0818%" height="15" fill="rgb(245,58,50)" fg:x="106" fg:w="1"/><text x="8.9172%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.7490%" y="533" width="0.0818%" height="15" fill="rgb(244,68,36)" fg:x="107" fg:w="1"/><text x="8.9990%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.7490%" y="517" width="0.0818%" height="15" fill="rgb(232,229,15)" fg:x="107" fg:w="1"/><text x="8.9990%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.7490%" y="501" width="0.0818%" height="15" fill="rgb(254,30,23)" fg:x="107" fg:w="1"/><text x="8.9990%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7490%" y="485" width="0.0818%" height="15" fill="rgb(235,160,14)" fg:x="107" fg:w="1"/><text x="8.9990%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7490%" y="469" width="0.0818%" height="15" fill="rgb(212,155,44)" fg:x="107" fg:w="1"/><text x="8.9990%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.7490%" y="453" width="0.0818%" height="15" fill="rgb(226,2,50)" fg:x="107" fg:w="1"/><text x="8.9990%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7490%" y="437" width="0.0818%" height="15" fill="rgb(234,177,6)" fg:x="107" fg:w="1"/><text x="8.9990%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="8.7490%" y="421" width="0.0818%" height="15" fill="rgb(217,24,9)" fg:x="107" fg:w="1"/><text x="8.9990%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="8.7490%" y="405" width="0.0818%" height="15" fill="rgb(220,13,46)" fg:x="107" fg:w="1"/><text x="8.9990%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="8.7490%" y="389" width="0.0818%" height="15" fill="rgb(239,221,27)" fg:x="107" fg:w="1"/><text x="8.9990%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="8.7490%" y="373" width="0.0818%" height="15" fill="rgb(222,198,25)" fg:x="107" fg:w="1"/><text x="8.9990%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="8.7490%" y="357" width="0.0818%" height="15" fill="rgb(211,99,13)" fg:x="107" fg:w="1"/><text x="8.9990%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="8.7490%" y="341" width="0.0818%" height="15" fill="rgb(232,111,31)" fg:x="107" fg:w="1"/><text x="8.9990%" y="351.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (9 samples, 0.74%)</title><rect x="8.2584%" y="613" width="0.7359%" height="15" fill="rgb(245,82,37)" fg:x="101" fg:w="9"/><text x="8.5084%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (9 samples, 0.74%)</title><rect x="8.2584%" y="597" width="0.7359%" height="15" fill="rgb(227,149,46)" fg:x="101" fg:w="9"/><text x="8.5084%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (6 samples, 0.49%)</title><rect x="8.5037%" y="581" width="0.4906%" height="15" fill="rgb(218,36,50)" fg:x="104" fg:w="6"/><text x="8.7537%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.25%)</title><rect x="8.7490%" y="565" width="0.2453%" height="15" fill="rgb(226,80,48)" fg:x="107" fg:w="3"/><text x="8.9990%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.25%)</title><rect x="8.7490%" y="549" width="0.2453%" height="15" fill="rgb(238,224,15)" fg:x="107" fg:w="3"/><text x="8.9990%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="8.8307%" y="533" width="0.1635%" height="15" fill="rgb(241,136,10)" fg:x="108" fg:w="2"/><text x="9.0807%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9125%" y="517" width="0.0818%" height="15" fill="rgb(208,32,45)" fg:x="109" fg:w="1"/><text x="9.1625%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.9125%" y="501" width="0.0818%" height="15" fill="rgb(207,135,9)" fg:x="109" fg:w="1"/><text x="9.1625%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.9125%" y="485" width="0.0818%" height="15" fill="rgb(206,86,44)" fg:x="109" fg:w="1"/><text x="9.1625%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9125%" y="469" width="0.0818%" height="15" fill="rgb(245,177,15)" fg:x="109" fg:w="1"/><text x="9.1625%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9125%" y="453" width="0.0818%" height="15" fill="rgb(206,64,50)" fg:x="109" fg:w="1"/><text x="9.1625%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.0760%" y="597" width="0.0818%" height="15" fill="rgb(234,36,40)" fg:x="111" fg:w="1"/><text x="9.3260%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="9.0760%" y="581" width="0.0818%" height="15" fill="rgb(213,64,8)" fg:x="111" fg:w="1"/><text x="9.3260%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.0760%" y="565" width="0.0818%" height="15" fill="rgb(210,75,36)" fg:x="111" fg:w="1"/><text x="9.3260%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.0760%" y="549" width="0.0818%" height="15" fill="rgb(229,88,21)" fg:x="111" fg:w="1"/><text x="9.3260%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0760%" y="533" width="0.0818%" height="15" fill="rgb(252,204,47)" fg:x="111" fg:w="1"/><text x="9.3260%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.0760%" y="517" width="0.0818%" height="15" fill="rgb(208,77,27)" fg:x="111" fg:w="1"/><text x="9.3260%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::build::Build&gt; (1 samples, 0.08%)</title><rect x="9.1578%" y="597" width="0.0818%" height="15" fill="rgb(221,76,26)" fg:x="112" fg:w="1"/><text x="9.4078%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="9.3213%" y="533" width="0.1635%" height="15" fill="rgb(225,139,18)" fg:x="114" fg:w="2"/><text x="9.5713%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="9.3213%" y="517" width="0.1635%" height="15" fill="rgb(230,137,11)" fg:x="114" fg:w="2"/><text x="9.5713%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4031%" y="501" width="0.0818%" height="15" fill="rgb(212,28,1)" fg:x="115" fg:w="1"/><text x="9.6531%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="9.4849%" y="485" width="0.0818%" height="15" fill="rgb(248,164,17)" fg:x="116" fg:w="1"/><text x="9.7349%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="9.4849%" y="469" width="0.0818%" height="15" fill="rgb(222,171,42)" fg:x="116" fg:w="1"/><text x="9.7349%" y="479.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="9.4849%" y="453" width="0.0818%" height="15" fill="rgb(243,84,45)" fg:x="116" fg:w="1"/><text x="9.7349%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="9.4849%" y="437" width="0.0818%" height="15" fill="rgb(252,49,23)" fg:x="116" fg:w="1"/><text x="9.7349%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.5666%" y="453" width="0.0818%" height="15" fill="rgb(215,19,7)" fg:x="117" fg:w="1"/><text x="9.8166%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="9.5666%" y="469" width="0.1635%" height="15" fill="rgb(238,81,41)" fg:x="117" fg:w="2"/><text x="9.8166%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.6484%" y="453" width="0.0818%" height="15" fill="rgb(210,199,37)" fg:x="118" fg:w="1"/><text x="9.8984%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.8119%" y="453" width="0.0818%" height="15" fill="rgb(244,192,49)" fg:x="120" fg:w="1"/><text x="10.0619%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8119%" y="437" width="0.0818%" height="15" fill="rgb(226,211,11)" fg:x="120" fg:w="1"/><text x="10.0619%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.8119%" y="421" width="0.0818%" height="15" fill="rgb(236,162,54)" fg:x="120" fg:w="1"/><text x="10.0619%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.8119%" y="405" width="0.0818%" height="15" fill="rgb(220,229,9)" fg:x="120" fg:w="1"/><text x="10.0619%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.8119%" y="389" width="0.0818%" height="15" fill="rgb(250,87,22)" fg:x="120" fg:w="1"/><text x="10.0619%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.8119%" y="373" width="0.0818%" height="15" fill="rgb(239,43,17)" fg:x="120" fg:w="1"/><text x="10.0619%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="10.1390%" y="437" width="0.0818%" height="15" fill="rgb(231,177,25)" fg:x="124" fg:w="1"/><text x="10.3890%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.2208%" y="389" width="0.0818%" height="15" fill="rgb(219,179,1)" fg:x="125" fg:w="1"/><text x="10.4708%" y="399.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.2208%" y="373" width="0.0818%" height="15" fill="rgb(238,219,53)" fg:x="125" fg:w="1"/><text x="10.4708%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3025%" y="389" width="0.0818%" height="15" fill="rgb(232,167,36)" fg:x="126" fg:w="1"/><text x="10.5525%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="10.3025%" y="373" width="0.0818%" height="15" fill="rgb(244,19,51)" fg:x="126" fg:w="1"/><text x="10.5525%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.25%)</title><rect x="10.2208%" y="437" width="0.2453%" height="15" fill="rgb(224,6,22)" fg:x="125" fg:w="3"/><text x="10.4708%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="10.2208%" y="421" width="0.2453%" height="15" fill="rgb(224,145,5)" fg:x="125" fg:w="3"/><text x="10.4708%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="10.2208%" y="405" width="0.2453%" height="15" fill="rgb(234,130,49)" fg:x="125" fg:w="3"/><text x="10.4708%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3843%" y="389" width="0.0818%" height="15" fill="rgb(254,6,2)" fg:x="127" fg:w="1"/><text x="10.6343%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3843%" y="373" width="0.0818%" height="15" fill="rgb(208,96,46)" fg:x="127" fg:w="1"/><text x="10.6343%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.41%)</title><rect x="10.4661%" y="437" width="0.4088%" height="15" fill="rgb(239,3,39)" fg:x="128" fg:w="5"/><text x="10.7161%" y="447.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="10.4661%" y="421" width="0.4088%" height="15" fill="rgb(233,210,1)" fg:x="128" fg:w="5"/><text x="10.7161%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.25%)</title><rect x="10.6296%" y="405" width="0.2453%" height="15" fill="rgb(244,137,37)" fg:x="130" fg:w="3"/><text x="10.8796%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.7931%" y="389" width="0.0818%" height="15" fill="rgb(240,136,2)" fg:x="132" fg:w="1"/><text x="11.0431%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (6 samples, 0.49%)</title><rect x="10.8749%" y="421" width="0.4906%" height="15" fill="rgb(239,18,37)" fg:x="133" fg:w="6"/><text x="11.1249%" y="431.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="10.9567%" y="405" width="0.4088%" height="15" fill="rgb(218,185,22)" fg:x="134" fg:w="5"/><text x="11.2067%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.41%)</title><rect x="10.9567%" y="389" width="0.4088%" height="15" fill="rgb(225,218,4)" fg:x="134" fg:w="5"/><text x="11.2067%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.33%)</title><rect x="11.0384%" y="373" width="0.3271%" height="15" fill="rgb(230,182,32)" fg:x="135" fg:w="4"/><text x="11.2884%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="11.1202%" y="357" width="0.2453%" height="15" fill="rgb(242,56,43)" fg:x="136" fg:w="3"/><text x="11.3702%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.25%)</title><rect x="11.1202%" y="341" width="0.2453%" height="15" fill="rgb(233,99,24)" fg:x="136" fg:w="3"/><text x="11.3702%" y="351.50"></text></g><g><title>realloc (3 samples, 0.25%)</title><rect x="11.1202%" y="325" width="0.2453%" height="15" fill="rgb(234,209,42)" fg:x="136" fg:w="3"/><text x="11.3702%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="11.4473%" y="405" width="0.1635%" height="15" fill="rgb(227,7,12)" fg:x="140" fg:w="2"/><text x="11.6973%" y="415.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.4473%" y="389" width="0.1635%" height="15" fill="rgb(245,203,43)" fg:x="140" fg:w="2"/><text x="11.6973%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.4473%" y="373" width="0.1635%" height="15" fill="rgb(238,205,33)" fg:x="140" fg:w="2"/><text x="11.6973%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.4473%" y="357" width="0.1635%" height="15" fill="rgb(231,56,7)" fg:x="140" fg:w="2"/><text x="11.6973%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="11.4473%" y="341" width="0.1635%" height="15" fill="rgb(244,186,29)" fg:x="140" fg:w="2"/><text x="11.6973%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="11.4473%" y="325" width="0.1635%" height="15" fill="rgb(234,111,31)" fg:x="140" fg:w="2"/><text x="11.6973%" y="335.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="11.4473%" y="309" width="0.1635%" height="15" fill="rgb(241,149,10)" fg:x="140" fg:w="2"/><text x="11.6973%" y="319.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="11.3655%" y="421" width="0.4088%" height="15" fill="rgb(249,206,44)" fg:x="139" fg:w="5"/><text x="11.6155%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="11.6108%" y="405" width="0.1635%" height="15" fill="rgb(251,153,30)" fg:x="142" fg:w="2"/><text x="11.8608%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="11.6926%" y="389" width="0.0818%" height="15" fill="rgb(239,152,38)" fg:x="143" fg:w="1"/><text x="11.9426%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.6926%" y="373" width="0.0818%" height="15" fill="rgb(249,139,47)" fg:x="143" fg:w="1"/><text x="11.9426%" y="383.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (29 samples, 2.37%)</title><rect x="9.5666%" y="485" width="2.3712%" height="15" fill="rgb(244,64,35)" fg:x="117" fg:w="29"/><text x="9.8166%" y="495.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (27 samples, 2.21%)</title><rect x="9.7302%" y="469" width="2.2077%" height="15" fill="rgb(216,46,15)" fg:x="119" fg:w="27"/><text x="9.9802%" y="479.50">s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (25 samples, 2.04%)</title><rect x="9.8937%" y="453" width="2.0442%" height="15" fill="rgb(250,74,19)" fg:x="121" fg:w="25"/><text x="10.1437%" y="463.50">s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="10.8749%" y="437" width="1.0630%" height="15" fill="rgb(249,42,33)" fg:x="133" fg:w="13"/><text x="11.1249%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.7743%" y="421" width="0.1635%" height="15" fill="rgb(242,149,17)" fg:x="144" fg:w="2"/><text x="12.0243%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.7743%" y="405" width="0.1635%" height="15" fill="rgb(244,29,21)" fg:x="144" fg:w="2"/><text x="12.0243%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.7743%" y="389" width="0.1635%" height="15" fill="rgb(220,130,37)" fg:x="144" fg:w="2"/><text x="12.0243%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.9379%" y="453" width="0.0818%" height="15" fill="rgb(211,67,2)" fg:x="146" fg:w="1"/><text x="12.1879%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="12.0196%" y="437" width="0.0818%" height="15" fill="rgb(235,68,52)" fg:x="147" fg:w="1"/><text x="12.2696%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.0196%" y="421" width="0.0818%" height="15" fill="rgb(246,142,3)" fg:x="147" fg:w="1"/><text x="12.2696%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.1014%" y="421" width="0.0818%" height="15" fill="rgb(241,25,7)" fg:x="148" fg:w="1"/><text x="12.3514%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="12.1832%" y="421" width="0.1635%" height="15" fill="rgb(242,119,39)" fg:x="149" fg:w="2"/><text x="12.4332%" y="431.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="12.1832%" y="405" width="0.1635%" height="15" fill="rgb(241,98,45)" fg:x="149" fg:w="2"/><text x="12.4332%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="11.9379%" y="485" width="0.4906%" height="15" fill="rgb(254,28,30)" fg:x="146" fg:w="6"/><text x="12.1879%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="11.9379%" y="469" width="0.4906%" height="15" fill="rgb(241,142,54)" fg:x="146" fg:w="6"/><text x="12.1879%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="12.0196%" y="453" width="0.4088%" height="15" fill="rgb(222,85,15)" fg:x="147" fg:w="5"/><text x="12.2696%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="12.1014%" y="437" width="0.3271%" height="15" fill="rgb(210,85,47)" fg:x="148" fg:w="4"/><text x="12.3514%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.3467%" y="421" width="0.0818%" height="15" fill="rgb(224,206,25)" fg:x="151" fg:w="1"/><text x="12.5967%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.3467%" y="405" width="0.0818%" height="15" fill="rgb(243,201,19)" fg:x="151" fg:w="1"/><text x="12.5967%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="12.5102%" y="437" width="0.0818%" height="15" fill="rgb(236,59,4)" fg:x="153" fg:w="1"/><text x="12.7602%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="12.5102%" y="421" width="0.0818%" height="15" fill="rgb(254,179,45)" fg:x="153" fg:w="1"/><text x="12.7602%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="12.5920%" y="405" width="0.0818%" height="15" fill="rgb(226,14,10)" fg:x="154" fg:w="1"/><text x="12.8420%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.6738%" y="357" width="0.0818%" height="15" fill="rgb(244,27,41)" fg:x="155" fg:w="1"/><text x="12.9238%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.6738%" y="389" width="0.1635%" height="15" fill="rgb(235,35,32)" fg:x="155" fg:w="2"/><text x="12.9238%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="12.6738%" y="373" width="0.1635%" height="15" fill="rgb(218,68,31)" fg:x="155" fg:w="2"/><text x="12.9238%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.7555%" y="357" width="0.0818%" height="15" fill="rgb(207,120,37)" fg:x="156" fg:w="1"/><text x="13.0055%" y="367.50"></text></g><g><title>engine::session::Session::flush (46 samples, 3.76%)</title><rect x="9.2396%" y="597" width="3.7612%" height="15" fill="rgb(227,98,0)" fg:x="113" fg:w="46"/><text x="9.4896%" y="607.50">engi..</text></g><g><title>engine::session::Session::save_changes (46 samples, 3.76%)</title><rect x="9.2396%" y="581" width="3.7612%" height="15" fill="rgb(207,7,3)" fg:x="113" fg:w="46"/><text x="9.4896%" y="591.50">engi..</text></g><g><title>engine::session::state::State::close (45 samples, 3.68%)</title><rect x="9.3213%" y="565" width="3.6795%" height="15" fill="rgb(206,98,19)" fg:x="114" fg:w="45"/><text x="9.5713%" y="575.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (45 samples, 3.68%)</title><rect x="9.3213%" y="549" width="3.6795%" height="15" fill="rgb(217,5,26)" fg:x="114" fg:w="45"/><text x="9.5713%" y="559.50">engi..</text></g><g><title>core::iter::adapters::try_process (43 samples, 3.52%)</title><rect x="9.4849%" y="533" width="3.5159%" height="15" fill="rgb(235,190,38)" fg:x="116" fg:w="43"/><text x="9.7349%" y="543.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 3.52%)</title><rect x="9.4849%" y="517" width="3.5159%" height="15" fill="rgb(247,86,24)" fg:x="116" fg:w="43"/><text x="9.7349%" y="527.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (43 samples, 3.52%)</title><rect x="9.4849%" y="501" width="3.5159%" height="15" fill="rgb(205,101,16)" fg:x="116" fg:w="43"/><text x="9.7349%" y="511.50">eng..</text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="12.4285%" y="485" width="0.5724%" height="15" fill="rgb(246,168,33)" fg:x="152" fg:w="7"/><text x="12.6785%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="12.4285%" y="469" width="0.5724%" height="15" fill="rgb(231,114,1)" fg:x="152" fg:w="7"/><text x="12.6785%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="12.5102%" y="453" width="0.4906%" height="15" fill="rgb(207,184,53)" fg:x="153" fg:w="6"/><text x="12.7602%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="12.5920%" y="437" width="0.4088%" height="15" fill="rgb(224,95,51)" fg:x="154" fg:w="5"/><text x="12.8420%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.41%)</title><rect x="12.5920%" y="421" width="0.4088%" height="15" fill="rgb(212,188,45)" fg:x="154" fg:w="5"/><text x="12.8420%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="12.6738%" y="405" width="0.3271%" height="15" fill="rgb(223,154,38)" fg:x="155" fg:w="4"/><text x="12.9238%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="12.8373%" y="389" width="0.1635%" height="15" fill="rgb(251,22,52)" fg:x="157" fg:w="2"/><text x="13.0873%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.9191%" y="373" width="0.0818%" height="15" fill="rgb(229,209,22)" fg:x="158" fg:w="1"/><text x="13.1691%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="12.9191%" y="357" width="0.0818%" height="15" fill="rgb(234,138,34)" fg:x="158" fg:w="1"/><text x="13.1691%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="12.9191%" y="341" width="0.0818%" height="15" fill="rgb(212,95,11)" fg:x="158" fg:w="1"/><text x="13.1691%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9191%" y="325" width="0.0818%" height="15" fill="rgb(240,179,47)" fg:x="158" fg:w="1"/><text x="13.1691%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.9191%" y="309" width="0.0818%" height="15" fill="rgb(240,163,11)" fg:x="158" fg:w="1"/><text x="13.1691%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9191%" y="293" width="0.0818%" height="15" fill="rgb(236,37,12)" fg:x="158" fg:w="1"/><text x="13.1691%" y="303.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="13.0008%" y="597" width="0.0818%" height="15" fill="rgb(232,164,16)" fg:x="159" fg:w="1"/><text x="13.2508%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="13.0008%" y="581" width="0.0818%" height="15" fill="rgb(244,205,15)" fg:x="159" fg:w="1"/><text x="13.2508%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="13.0008%" y="565" width="0.0818%" height="15" fill="rgb(223,117,47)" fg:x="159" fg:w="1"/><text x="13.2508%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.0008%" y="549" width="0.0818%" height="15" fill="rgb(244,107,35)" fg:x="159" fg:w="1"/><text x="13.2508%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.0008%" y="533" width="0.0818%" height="15" fill="rgb(205,140,8)" fg:x="159" fg:w="1"/><text x="13.2508%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.0008%" y="517" width="0.0818%" height="15" fill="rgb(228,84,46)" fg:x="159" fg:w="1"/><text x="13.2508%" y="527.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="13.0008%" y="501" width="0.0818%" height="15" fill="rgb(254,188,9)" fg:x="159" fg:w="1"/><text x="13.2508%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="13.0008%" y="485" width="0.0818%" height="15" fill="rgb(206,112,54)" fg:x="159" fg:w="1"/><text x="13.2508%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0008%" y="469" width="0.0818%" height="15" fill="rgb(216,84,49)" fg:x="159" fg:w="1"/><text x="13.2508%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.0008%" y="453" width="0.0818%" height="15" fill="rgb(214,194,35)" fg:x="159" fg:w="1"/><text x="13.2508%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.0008%" y="437" width="0.0818%" height="15" fill="rgb(249,28,3)" fg:x="159" fg:w="1"/><text x="13.2508%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.0826%" y="581" width="0.0818%" height="15" fill="rgb(222,56,52)" fg:x="160" fg:w="1"/><text x="13.3326%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.0826%" y="565" width="0.0818%" height="15" fill="rgb(245,217,50)" fg:x="160" fg:w="1"/><text x="13.3326%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.0826%" y="549" width="0.0818%" height="15" fill="rgb(213,201,24)" fg:x="160" fg:w="1"/><text x="13.3326%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.0826%" y="533" width="0.0818%" height="15" fill="rgb(248,116,28)" fg:x="160" fg:w="1"/><text x="13.3326%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.0826%" y="517" width="0.0818%" height="15" fill="rgb(219,72,43)" fg:x="160" fg:w="1"/><text x="13.3326%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.0826%" y="501" width="0.0818%" height="15" fill="rgb(209,138,14)" fg:x="160" fg:w="1"/><text x="13.3326%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.0826%" y="485" width="0.0818%" height="15" fill="rgb(222,18,33)" fg:x="160" fg:w="1"/><text x="13.3326%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.0826%" y="469" width="0.0818%" height="15" fill="rgb(213,199,7)" fg:x="160" fg:w="1"/><text x="13.3326%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.0826%" y="453" width="0.0818%" height="15" fill="rgb(250,110,10)" fg:x="160" fg:w="1"/><text x="13.3326%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.0826%" y="437" width="0.0818%" height="15" fill="rgb(248,123,6)" fg:x="160" fg:w="1"/><text x="13.3326%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.0826%" y="421" width="0.0818%" height="15" fill="rgb(206,91,31)" fg:x="160" fg:w="1"/><text x="13.3326%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.0826%" y="405" width="0.0818%" height="15" fill="rgb(211,154,13)" fg:x="160" fg:w="1"/><text x="13.3326%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="13.1643%" y="565" width="0.0818%" height="15" fill="rgb(225,148,7)" fg:x="161" fg:w="1"/><text x="13.4143%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.1643%" y="549" width="0.0818%" height="15" fill="rgb(220,160,43)" fg:x="161" fg:w="1"/><text x="13.4143%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="13.1643%" y="533" width="0.0818%" height="15" fill="rgb(213,52,39)" fg:x="161" fg:w="1"/><text x="13.4143%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.1643%" y="517" width="0.0818%" height="15" fill="rgb(243,137,7)" fg:x="161" fg:w="1"/><text x="13.4143%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.2461%" y="565" width="0.0818%" height="15" fill="rgb(230,79,13)" fg:x="162" fg:w="1"/><text x="13.4961%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="13.3279%" y="565" width="0.0818%" height="15" fill="rgb(247,105,23)" fg:x="163" fg:w="1"/><text x="13.5779%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.3279%" y="549" width="0.0818%" height="15" fill="rgb(223,179,41)" fg:x="163" fg:w="1"/><text x="13.5779%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="13.3279%" y="533" width="0.0818%" height="15" fill="rgb(218,9,34)" fg:x="163" fg:w="1"/><text x="13.5779%" y="543.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="13.4096%" y="517" width="0.0818%" height="15" fill="rgb(222,106,8)" fg:x="164" fg:w="1"/><text x="13.6596%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4096%" y="501" width="0.0818%" height="15" fill="rgb(211,220,0)" fg:x="164" fg:w="1"/><text x="13.6596%" y="511.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.4914%" y="517" width="0.0818%" height="15" fill="rgb(229,52,16)" fg:x="165" fg:w="1"/><text x="13.7414%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="13.4914%" y="501" width="0.0818%" height="15" fill="rgb(212,155,18)" fg:x="165" fg:w="1"/><text x="13.7414%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4914%" y="485" width="0.0818%" height="15" fill="rgb(242,21,14)" fg:x="165" fg:w="1"/><text x="13.7414%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4914%" y="469" width="0.0818%" height="15" fill="rgb(222,19,48)" fg:x="165" fg:w="1"/><text x="13.7414%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.4914%" y="453" width="0.0818%" height="15" fill="rgb(232,45,27)" fg:x="165" fg:w="1"/><text x="13.7414%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4914%" y="437" width="0.0818%" height="15" fill="rgb(249,103,42)" fg:x="165" fg:w="1"/><text x="13.7414%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="13.4914%" y="421" width="0.0818%" height="15" fill="rgb(246,81,33)" fg:x="165" fg:w="1"/><text x="13.7414%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="13.4914%" y="405" width="0.0818%" height="15" fill="rgb(252,33,42)" fg:x="165" fg:w="1"/><text x="13.7414%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="13.4914%" y="389" width="0.0818%" height="15" fill="rgb(209,212,41)" fg:x="165" fg:w="1"/><text x="13.7414%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="13.4914%" y="373" width="0.0818%" height="15" fill="rgb(207,154,6)" fg:x="165" fg:w="1"/><text x="13.7414%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4914%" y="357" width="0.0818%" height="15" fill="rgb(223,64,47)" fg:x="165" fg:w="1"/><text x="13.7414%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="13.4914%" y="341" width="0.0818%" height="15" fill="rgb(211,161,38)" fg:x="165" fg:w="1"/><text x="13.7414%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="13.4914%" y="325" width="0.0818%" height="15" fill="rgb(219,138,40)" fg:x="165" fg:w="1"/><text x="13.7414%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="13.4914%" y="309" width="0.0818%" height="15" fill="rgb(241,228,46)" fg:x="165" fg:w="1"/><text x="13.7414%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="13.4914%" y="293" width="0.0818%" height="15" fill="rgb(223,209,38)" fg:x="165" fg:w="1"/><text x="13.7414%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="13.4914%" y="277" width="0.0818%" height="15" fill="rgb(236,164,45)" fg:x="165" fg:w="1"/><text x="13.7414%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.4914%" y="261" width="0.0818%" height="15" fill="rgb(231,15,5)" fg:x="165" fg:w="1"/><text x="13.7414%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5732%" y="469" width="0.0818%" height="15" fill="rgb(252,35,15)" fg:x="166" fg:w="1"/><text x="13.8232%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.5732%" y="453" width="0.0818%" height="15" fill="rgb(248,181,18)" fg:x="166" fg:w="1"/><text x="13.8232%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.5732%" y="437" width="0.0818%" height="15" fill="rgb(233,39,42)" fg:x="166" fg:w="1"/><text x="13.8232%" y="447.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.33%)</title><rect x="13.4096%" y="549" width="0.3271%" height="15" fill="rgb(238,110,33)" fg:x="164" fg:w="4"/><text x="13.6596%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.33%)</title><rect x="13.4096%" y="533" width="0.3271%" height="15" fill="rgb(233,195,10)" fg:x="164" fg:w="4"/><text x="13.6596%" y="543.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="13.5732%" y="517" width="0.1635%" height="15" fill="rgb(254,105,3)" fg:x="166" fg:w="2"/><text x="13.8232%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="13.5732%" y="501" width="0.1635%" height="15" fill="rgb(221,225,9)" fg:x="166" fg:w="2"/><text x="13.8232%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.5732%" y="485" width="0.1635%" height="15" fill="rgb(224,227,45)" fg:x="166" fg:w="2"/><text x="13.8232%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.6549%" y="469" width="0.0818%" height="15" fill="rgb(229,198,43)" fg:x="167" fg:w="1"/><text x="13.9049%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6549%" y="453" width="0.0818%" height="15" fill="rgb(206,209,35)" fg:x="167" fg:w="1"/><text x="13.9049%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.6549%" y="437" width="0.0818%" height="15" fill="rgb(245,195,53)" fg:x="167" fg:w="1"/><text x="13.9049%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="13.6549%" y="421" width="0.0818%" height="15" fill="rgb(240,92,26)" fg:x="167" fg:w="1"/><text x="13.9049%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="13.7367%" y="549" width="0.0818%" height="15" fill="rgb(207,40,23)" fg:x="168" fg:w="1"/><text x="13.9867%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.7367%" y="533" width="0.0818%" height="15" fill="rgb(223,111,35)" fg:x="168" fg:w="1"/><text x="13.9867%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.7367%" y="517" width="0.0818%" height="15" fill="rgb(229,147,28)" fg:x="168" fg:w="1"/><text x="13.9867%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.74%)</title><rect x="13.1643%" y="581" width="0.7359%" height="15" fill="rgb(211,29,28)" fg:x="161" fg:w="9"/><text x="13.4143%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.49%)</title><rect x="13.4096%" y="565" width="0.4906%" height="15" fill="rgb(228,72,33)" fg:x="164" fg:w="6"/><text x="13.6596%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.8185%" y="549" width="0.0818%" height="15" fill="rgb(205,214,31)" fg:x="169" fg:w="1"/><text x="14.0685%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.8185%" y="533" width="0.0818%" height="15" fill="rgb(224,111,15)" fg:x="169" fg:w="1"/><text x="14.0685%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.8185%" y="517" width="0.0818%" height="15" fill="rgb(253,21,26)" fg:x="169" fg:w="1"/><text x="14.0685%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9002%" y="565" width="0.0818%" height="15" fill="rgb(245,139,43)" fg:x="170" fg:w="1"/><text x="14.1502%" y="575.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="13.9820%" y="565" width="0.0818%" height="15" fill="rgb(252,170,7)" fg:x="171" fg:w="1"/><text x="14.2320%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.06%)</title><rect x="13.0826%" y="597" width="1.0630%" height="15" fill="rgb(231,118,14)" fg:x="160" fg:w="13"/><text x="13.3326%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="13.9002%" y="581" width="0.2453%" height="15" fill="rgb(238,83,0)" fg:x="170" fg:w="3"/><text x="14.1502%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.0638%" y="565" width="0.0818%" height="15" fill="rgb(221,39,39)" fg:x="172" fg:w="1"/><text x="14.3138%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="14.1455%" y="533" width="0.0818%" height="15" fill="rgb(222,119,46)" fg:x="173" fg:w="1"/><text x="14.3955%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (2 samples, 0.16%)</title><rect x="14.1455%" y="597" width="0.1635%" height="15" fill="rgb(222,165,49)" fg:x="173" fg:w="2"/><text x="14.3955%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="14.1455%" y="581" width="0.1635%" height="15" fill="rgb(219,113,52)" fg:x="173" fg:w="2"/><text x="14.3955%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.1455%" y="565" width="0.1635%" height="15" fill="rgb(214,7,15)" fg:x="173" fg:w="2"/><text x="14.3955%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="14.1455%" y="549" width="0.1635%" height="15" fill="rgb(235,32,4)" fg:x="173" fg:w="2"/><text x="14.3955%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.2273%" y="533" width="0.0818%" height="15" fill="rgb(238,90,54)" fg:x="174" fg:w="1"/><text x="14.4773%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.3091%" y="533" width="0.0818%" height="15" fill="rgb(213,208,19)" fg:x="175" fg:w="1"/><text x="14.5591%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="14.3091%" y="517" width="0.0818%" height="15" fill="rgb(233,156,4)" fg:x="175" fg:w="1"/><text x="14.5591%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="14.3091%" y="501" width="0.0818%" height="15" fill="rgb(207,194,5)" fg:x="175" fg:w="1"/><text x="14.5591%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3091%" y="485" width="0.0818%" height="15" fill="rgb(206,111,30)" fg:x="175" fg:w="1"/><text x="14.5591%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3091%" y="469" width="0.0818%" height="15" fill="rgb(243,70,54)" fg:x="175" fg:w="1"/><text x="14.5591%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.3091%" y="453" width="0.0818%" height="15" fill="rgb(242,28,8)" fg:x="175" fg:w="1"/><text x="14.5591%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3091%" y="437" width="0.0818%" height="15" fill="rgb(219,106,18)" fg:x="175" fg:w="1"/><text x="14.5591%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.3091%" y="421" width="0.0818%" height="15" fill="rgb(244,222,10)" fg:x="175" fg:w="1"/><text x="14.5591%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.3091%" y="405" width="0.0818%" height="15" fill="rgb(236,179,52)" fg:x="175" fg:w="1"/><text x="14.5591%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.3091%" y="389" width="0.0818%" height="15" fill="rgb(213,23,39)" fg:x="175" fg:w="1"/><text x="14.5591%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.3091%" y="373" width="0.0818%" height="15" fill="rgb(238,48,10)" fg:x="175" fg:w="1"/><text x="14.5591%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3091%" y="357" width="0.0818%" height="15" fill="rgb(251,196,23)" fg:x="175" fg:w="1"/><text x="14.5591%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.3091%" y="341" width="0.0818%" height="15" fill="rgb(250,152,24)" fg:x="175" fg:w="1"/><text x="14.5591%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.3091%" y="325" width="0.0818%" height="15" fill="rgb(209,150,17)" fg:x="175" fg:w="1"/><text x="14.5591%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.3091%" y="309" width="0.0818%" height="15" fill="rgb(234,202,34)" fg:x="175" fg:w="1"/><text x="14.5591%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.3091%" y="293" width="0.0818%" height="15" fill="rgb(253,148,53)" fg:x="175" fg:w="1"/><text x="14.5591%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.3091%" y="277" width="0.0818%" height="15" fill="rgb(218,129,16)" fg:x="175" fg:w="1"/><text x="14.5591%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.3091%" y="261" width="0.0818%" height="15" fill="rgb(216,85,19)" fg:x="175" fg:w="1"/><text x="14.5591%" y="271.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="14.3091%" y="565" width="0.1635%" height="15" fill="rgb(235,228,7)" fg:x="175" fg:w="2"/><text x="14.5591%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="14.3091%" y="549" width="0.1635%" height="15" fill="rgb(245,175,0)" fg:x="175" fg:w="2"/><text x="14.5591%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="14.3908%" y="533" width="0.0818%" height="15" fill="rgb(208,168,36)" fg:x="176" fg:w="1"/><text x="14.6408%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (3 samples, 0.25%)</title><rect x="14.3091%" y="597" width="0.2453%" height="15" fill="rgb(246,171,24)" fg:x="175" fg:w="3"/><text x="14.5591%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (3 samples, 0.25%)</title><rect x="14.3091%" y="581" width="0.2453%" height="15" fill="rgb(215,142,24)" fg:x="175" fg:w="3"/><text x="14.5591%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="14.4726%" y="565" width="0.0818%" height="15" fill="rgb(250,187,7)" fg:x="177" fg:w="1"/><text x="14.7226%" y="575.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4726%" y="549" width="0.0818%" height="15" fill="rgb(228,66,33)" fg:x="177" fg:w="1"/><text x="14.7226%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.4726%" y="533" width="0.0818%" height="15" fill="rgb(234,215,21)" fg:x="177" fg:w="1"/><text x="14.7226%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="14.4726%" y="517" width="0.0818%" height="15" fill="rgb(222,191,20)" fg:x="177" fg:w="1"/><text x="14.7226%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="14.4726%" y="501" width="0.0818%" height="15" fill="rgb(245,79,54)" fg:x="177" fg:w="1"/><text x="14.7226%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.4726%" y="485" width="0.0818%" height="15" fill="rgb(240,10,37)" fg:x="177" fg:w="1"/><text x="14.7226%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.5544%" y="565" width="0.0818%" height="15" fill="rgb(214,192,32)" fg:x="178" fg:w="1"/><text x="14.8044%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="14.5544%" y="549" width="0.0818%" height="15" fill="rgb(209,36,54)" fg:x="178" fg:w="1"/><text x="14.8044%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.5544%" y="533" width="0.0818%" height="15" fill="rgb(220,10,11)" fg:x="178" fg:w="1"/><text x="14.8044%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.6361%" y="533" width="0.0818%" height="15" fill="rgb(221,106,17)" fg:x="179" fg:w="1"/><text x="14.8861%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.25%)</title><rect x="14.5544%" y="581" width="0.2453%" height="15" fill="rgb(251,142,44)" fg:x="178" fg:w="3"/><text x="14.8044%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="14.6361%" y="565" width="0.1635%" height="15" fill="rgb(238,13,15)" fg:x="179" fg:w="2"/><text x="14.8861%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.6361%" y="549" width="0.1635%" height="15" fill="rgb(208,107,27)" fg:x="179" fg:w="2"/><text x="14.8861%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="14.7179%" y="533" width="0.0818%" height="15" fill="rgb(205,136,37)" fg:x="180" fg:w="1"/><text x="14.9679%" y="543.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="14.7179%" y="517" width="0.0818%" height="15" fill="rgb(250,205,27)" fg:x="180" fg:w="1"/><text x="14.9679%" y="527.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="14.7179%" y="501" width="0.0818%" height="15" fill="rgb(210,80,43)" fg:x="180" fg:w="1"/><text x="14.9679%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7997%" y="501" width="0.0818%" height="15" fill="rgb(247,160,36)" fg:x="181" fg:w="1"/><text x="15.0497%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.7997%" y="485" width="0.0818%" height="15" fill="rgb(234,13,49)" fg:x="181" fg:w="1"/><text x="15.0497%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (5 samples, 0.41%)</title><rect x="14.5544%" y="597" width="0.4088%" height="15" fill="rgb(234,122,0)" fg:x="178" fg:w="5"/><text x="14.8044%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="14.7997%" y="581" width="0.1635%" height="15" fill="rgb(207,146,38)" fg:x="181" fg:w="2"/><text x="15.0497%" y="591.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (2 samples, 0.16%)</title><rect x="14.7997%" y="565" width="0.1635%" height="15" fill="rgb(207,177,25)" fg:x="181" fg:w="2"/><text x="15.0497%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="14.7997%" y="549" width="0.1635%" height="15" fill="rgb(211,178,42)" fg:x="181" fg:w="2"/><text x="15.0497%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="14.7997%" y="533" width="0.1635%" height="15" fill="rgb(230,69,54)" fg:x="181" fg:w="2"/><text x="15.0497%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (2 samples, 0.16%)</title><rect x="14.7997%" y="517" width="0.1635%" height="15" fill="rgb(214,135,41)" fg:x="181" fg:w="2"/><text x="15.0497%" y="527.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="14.8814%" y="501" width="0.0818%" height="15" fill="rgb(237,67,25)" fg:x="182" fg:w="1"/><text x="15.1314%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="14.8814%" y="485" width="0.0818%" height="15" fill="rgb(222,189,50)" fg:x="182" fg:w="1"/><text x="15.1314%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.8814%" y="469" width="0.0818%" height="15" fill="rgb(245,148,34)" fg:x="182" fg:w="1"/><text x="15.1314%" y="479.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="14.9632%" y="581" width="0.0818%" height="15" fill="rgb(222,29,6)" fg:x="183" fg:w="1"/><text x="15.2132%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="14.9632%" y="565" width="0.0818%" height="15" fill="rgb(221,189,43)" fg:x="183" fg:w="1"/><text x="15.2132%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="14.9632%" y="549" width="0.0818%" height="15" fill="rgb(207,36,27)" fg:x="183" fg:w="1"/><text x="15.2132%" y="559.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="14.9632%" y="533" width="0.0818%" height="15" fill="rgb(217,90,24)" fg:x="183" fg:w="1"/><text x="15.2132%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="14.9632%" y="517" width="0.0818%" height="15" fill="rgb(224,66,35)" fg:x="183" fg:w="1"/><text x="15.2132%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="14.9632%" y="501" width="0.0818%" height="15" fill="rgb(221,13,50)" fg:x="183" fg:w="1"/><text x="15.2132%" y="511.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="15.0450%" y="581" width="0.0818%" height="15" fill="rgb(236,68,49)" fg:x="184" fg:w="1"/><text x="15.2950%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0450%" y="565" width="0.0818%" height="15" fill="rgb(229,146,28)" fg:x="184" fg:w="1"/><text x="15.2950%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.0450%" y="549" width="0.0818%" height="15" fill="rgb(225,31,38)" fg:x="184" fg:w="1"/><text x="15.2950%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0450%" y="533" width="0.0818%" height="15" fill="rgb(250,208,3)" fg:x="184" fg:w="1"/><text x="15.2950%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0450%" y="517" width="0.0818%" height="15" fill="rgb(246,54,23)" fg:x="184" fg:w="1"/><text x="15.2950%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.0450%" y="501" width="0.0818%" height="15" fill="rgb(243,76,11)" fg:x="184" fg:w="1"/><text x="15.2950%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.1267%" y="565" width="0.0818%" height="15" fill="rgb(245,21,50)" fg:x="185" fg:w="1"/><text x="15.3767%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.1267%" y="549" width="0.0818%" height="15" fill="rgb(228,9,43)" fg:x="185" fg:w="1"/><text x="15.3767%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1267%" y="533" width="0.0818%" height="15" fill="rgb(208,100,47)" fg:x="185" fg:w="1"/><text x="15.3767%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.1267%" y="517" width="0.0818%" height="15" fill="rgb(232,26,8)" fg:x="185" fg:w="1"/><text x="15.3767%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1267%" y="501" width="0.0818%" height="15" fill="rgb(216,166,38)" fg:x="185" fg:w="1"/><text x="15.3767%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="15.1267%" y="485" width="0.0818%" height="15" fill="rgb(251,202,51)" fg:x="185" fg:w="1"/><text x="15.3767%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.1267%" y="469" width="0.0818%" height="15" fill="rgb(254,216,34)" fg:x="185" fg:w="1"/><text x="15.3767%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.1267%" y="453" width="0.0818%" height="15" fill="rgb(251,32,27)" fg:x="185" fg:w="1"/><text x="15.3767%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.2085%" y="485" width="0.0818%" height="15" fill="rgb(208,127,28)" fg:x="186" fg:w="1"/><text x="15.4585%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.2085%" y="469" width="0.0818%" height="15" fill="rgb(224,137,22)" fg:x="186" fg:w="1"/><text x="15.4585%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="15.2085%" y="453" width="0.0818%" height="15" fill="rgb(254,70,32)" fg:x="186" fg:w="1"/><text x="15.4585%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.2085%" y="437" width="0.0818%" height="15" fill="rgb(229,75,37)" fg:x="186" fg:w="1"/><text x="15.4585%" y="447.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="14.9632%" y="597" width="0.4088%" height="15" fill="rgb(252,64,23)" fg:x="183" fg:w="5"/><text x="15.2132%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="15.1267%" y="581" width="0.2453%" height="15" fill="rgb(232,162,48)" fg:x="185" fg:w="3"/><text x="15.3767%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="15.2085%" y="565" width="0.1635%" height="15" fill="rgb(246,160,12)" fg:x="186" fg:w="2"/><text x="15.4585%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="15.2085%" y="549" width="0.1635%" height="15" fill="rgb(247,166,0)" fg:x="186" fg:w="2"/><text x="15.4585%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="15.2085%" y="533" width="0.1635%" height="15" fill="rgb(249,219,21)" fg:x="186" fg:w="2"/><text x="15.4585%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="15.2085%" y="517" width="0.1635%" height="15" fill="rgb(205,209,3)" fg:x="186" fg:w="2"/><text x="15.4585%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="15.2085%" y="501" width="0.1635%" height="15" fill="rgb(243,44,1)" fg:x="186" fg:w="2"/><text x="15.4585%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.2903%" y="485" width="0.0818%" height="15" fill="rgb(206,159,16)" fg:x="187" fg:w="1"/><text x="15.5403%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2903%" y="469" width="0.0818%" height="15" fill="rgb(244,77,30)" fg:x="187" fg:w="1"/><text x="15.5403%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.2903%" y="453" width="0.0818%" height="15" fill="rgb(218,69,12)" fg:x="187" fg:w="1"/><text x="15.5403%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2903%" y="437" width="0.0818%" height="15" fill="rgb(212,87,7)" fg:x="187" fg:w="1"/><text x="15.5403%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="15.2903%" y="421" width="0.0818%" height="15" fill="rgb(245,114,25)" fg:x="187" fg:w="1"/><text x="15.5403%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="15.2903%" y="405" width="0.0818%" height="15" fill="rgb(210,61,42)" fg:x="187" fg:w="1"/><text x="15.5403%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.2903%" y="389" width="0.0818%" height="15" fill="rgb(211,52,33)" fg:x="187" fg:w="1"/><text x="15.5403%" y="399.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (79 samples, 6.46%)</title><rect x="8.9943%" y="613" width="6.4595%" height="15" fill="rgb(234,58,33)" fg:x="110" fg:w="79"/><text x="9.2443%" y="623.50">plugins_..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="15.3720%" y="597" width="0.0818%" height="15" fill="rgb(220,115,36)" fg:x="188" fg:w="1"/><text x="15.6220%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="15.3720%" y="581" width="0.0818%" height="15" fill="rgb(243,153,54)" fg:x="188" fg:w="1"/><text x="15.6220%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="15.4538%" y="613" width="0.0818%" height="15" fill="rgb(251,47,18)" fg:x="189" fg:w="1"/><text x="15.7038%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="15.4538%" y="597" width="0.0818%" height="15" fill="rgb(242,102,42)" fg:x="189" fg:w="1"/><text x="15.7038%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="15.4538%" y="581" width="0.0818%" height="15" fill="rgb(234,31,38)" fg:x="189" fg:w="1"/><text x="15.7038%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="15.4538%" y="565" width="0.0818%" height="15" fill="rgb(221,117,51)" fg:x="189" fg:w="1"/><text x="15.7038%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.4538%" y="549" width="0.0818%" height="15" fill="rgb(212,20,18)" fg:x="189" fg:w="1"/><text x="15.7038%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.4538%" y="533" width="0.0818%" height="15" fill="rgb(245,133,36)" fg:x="189" fg:w="1"/><text x="15.7038%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.4538%" y="517" width="0.0818%" height="15" fill="rgb(212,6,19)" fg:x="189" fg:w="1"/><text x="15.7038%" y="527.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.4538%" y="501" width="0.0818%" height="15" fill="rgb(218,1,36)" fg:x="189" fg:w="1"/><text x="15.7038%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="15.5356%" y="581" width="0.0818%" height="15" fill="rgb(246,84,54)" fg:x="190" fg:w="1"/><text x="15.7856%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="15.5356%" y="565" width="0.0818%" height="15" fill="rgb(242,110,6)" fg:x="190" fg:w="1"/><text x="15.7856%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="15.5356%" y="549" width="0.0818%" height="15" fill="rgb(214,47,5)" fg:x="190" fg:w="1"/><text x="15.7856%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="15.5356%" y="533" width="0.0818%" height="15" fill="rgb(218,159,25)" fg:x="190" fg:w="1"/><text x="15.7856%" y="543.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="15.6173%" y="581" width="0.0818%" height="15" fill="rgb(215,211,28)" fg:x="191" fg:w="1"/><text x="15.8673%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="15.6173%" y="565" width="0.0818%" height="15" fill="rgb(238,59,32)" fg:x="191" fg:w="1"/><text x="15.8673%" y="575.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="15.6991%" y="549" width="0.0818%" height="15" fill="rgb(226,82,3)" fg:x="192" fg:w="1"/><text x="15.9491%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="15.7809%" y="485" width="0.0818%" height="15" fill="rgb(240,164,32)" fg:x="193" fg:w="1"/><text x="16.0309%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="15.7809%" y="469" width="0.0818%" height="15" fill="rgb(232,46,7)" fg:x="193" fg:w="1"/><text x="16.0309%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="15.7809%" y="453" width="0.0818%" height="15" fill="rgb(229,129,53)" fg:x="193" fg:w="1"/><text x="16.0309%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="15.7809%" y="533" width="0.1635%" height="15" fill="rgb(234,188,29)" fg:x="193" fg:w="2"/><text x="16.0309%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="15.7809%" y="517" width="0.1635%" height="15" fill="rgb(246,141,4)" fg:x="193" fg:w="2"/><text x="16.0309%" y="527.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="15.7809%" y="501" width="0.1635%" height="15" fill="rgb(229,23,39)" fg:x="193" fg:w="2"/><text x="16.0309%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="15.8626%" y="485" width="0.0818%" height="15" fill="rgb(206,12,3)" fg:x="194" fg:w="1"/><text x="16.1126%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.8626%" y="469" width="0.0818%" height="15" fill="rgb(252,226,20)" fg:x="194" fg:w="1"/><text x="16.1126%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="15.8626%" y="453" width="0.0818%" height="15" fill="rgb(216,123,35)" fg:x="194" fg:w="1"/><text x="16.1126%" y="463.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="15.8626%" y="437" width="0.0818%" height="15" fill="rgb(212,68,40)" fg:x="194" fg:w="1"/><text x="16.1126%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.8626%" y="421" width="0.0818%" height="15" fill="rgb(254,125,32)" fg:x="194" fg:w="1"/><text x="16.1126%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8626%" y="405" width="0.0818%" height="15" fill="rgb(253,97,22)" fg:x="194" fg:w="1"/><text x="16.1126%" y="415.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="15.9444%" y="501" width="0.0818%" height="15" fill="rgb(241,101,14)" fg:x="195" fg:w="1"/><text x="16.1944%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9444%" y="485" width="0.0818%" height="15" fill="rgb(238,103,29)" fg:x="195" fg:w="1"/><text x="16.1944%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9444%" y="469" width="0.0818%" height="15" fill="rgb(233,195,47)" fg:x="195" fg:w="1"/><text x="16.1944%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="15.6991%" y="565" width="0.4088%" height="15" fill="rgb(246,218,30)" fg:x="192" fg:w="5"/><text x="15.9491%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="15.7809%" y="549" width="0.3271%" height="15" fill="rgb(219,145,47)" fg:x="193" fg:w="4"/><text x="16.0309%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.9444%" y="533" width="0.1635%" height="15" fill="rgb(243,12,26)" fg:x="195" fg:w="2"/><text x="16.1944%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="15.9444%" y="517" width="0.1635%" height="15" fill="rgb(214,87,16)" fg:x="195" fg:w="2"/><text x="16.1944%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.0262%" y="501" width="0.0818%" height="15" fill="rgb(208,99,42)" fg:x="196" fg:w="1"/><text x="16.2762%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0262%" y="485" width="0.0818%" height="15" fill="rgb(253,99,2)" fg:x="196" fg:w="1"/><text x="16.2762%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="16.1079%" y="565" width="0.1635%" height="15" fill="rgb(220,168,23)" fg:x="197" fg:w="2"/><text x="16.3579%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.1897%" y="549" width="0.0818%" height="15" fill="rgb(242,38,24)" fg:x="198" fg:w="1"/><text x="16.4397%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (10 samples, 0.82%)</title><rect x="15.5356%" y="613" width="0.8177%" height="15" fill="rgb(225,182,9)" fg:x="190" fg:w="10"/><text x="15.7856%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (10 samples, 0.82%)</title><rect x="15.5356%" y="597" width="0.8177%" height="15" fill="rgb(243,178,37)" fg:x="190" fg:w="10"/><text x="15.7856%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.65%)</title><rect x="15.6991%" y="581" width="0.6541%" height="15" fill="rgb(232,139,19)" fg:x="192" fg:w="8"/><text x="15.9491%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="16.2715%" y="565" width="0.0818%" height="15" fill="rgb(225,201,24)" fg:x="199" fg:w="1"/><text x="16.5215%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.2715%" y="549" width="0.0818%" height="15" fill="rgb(221,47,46)" fg:x="199" fg:w="1"/><text x="16.5215%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.2715%" y="533" width="0.0818%" height="15" fill="rgb(249,23,13)" fg:x="199" fg:w="1"/><text x="16.5215%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2715%" y="517" width="0.0818%" height="15" fill="rgb(219,9,5)" fg:x="199" fg:w="1"/><text x="16.5215%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.2715%" y="501" width="0.0818%" height="15" fill="rgb(254,171,16)" fg:x="199" fg:w="1"/><text x="16.5215%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2715%" y="485" width="0.0818%" height="15" fill="rgb(230,171,20)" fg:x="199" fg:w="1"/><text x="16.5215%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.3532%" y="597" width="0.1635%" height="15" fill="rgb(210,71,41)" fg:x="200" fg:w="2"/><text x="16.6032%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.3532%" y="581" width="0.1635%" height="15" fill="rgb(206,173,20)" fg:x="200" fg:w="2"/><text x="16.6032%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="16.4350%" y="565" width="0.0818%" height="15" fill="rgb(233,88,34)" fg:x="201" fg:w="1"/><text x="16.6850%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="16.4350%" y="549" width="0.0818%" height="15" fill="rgb(223,209,46)" fg:x="201" fg:w="1"/><text x="16.6850%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.4350%" y="533" width="0.0818%" height="15" fill="rgb(250,43,18)" fg:x="201" fg:w="1"/><text x="16.6850%" y="543.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="16.5168%" y="581" width="0.1635%" height="15" fill="rgb(208,13,10)" fg:x="202" fg:w="2"/><text x="16.7668%" y="591.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="16.5985%" y="565" width="0.0818%" height="15" fill="rgb(212,200,36)" fg:x="203" fg:w="1"/><text x="16.8485%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5985%" y="549" width="0.0818%" height="15" fill="rgb(225,90,30)" fg:x="203" fg:w="1"/><text x="16.8485%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.6803%" y="581" width="0.0818%" height="15" fill="rgb(236,182,39)" fg:x="204" fg:w="1"/><text x="16.9303%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.6803%" y="565" width="0.0818%" height="15" fill="rgb(212,144,35)" fg:x="204" fg:w="1"/><text x="16.9303%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.6803%" y="549" width="0.0818%" height="15" fill="rgb(228,63,44)" fg:x="204" fg:w="1"/><text x="16.9303%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6803%" y="533" width="0.0818%" height="15" fill="rgb(228,109,6)" fg:x="204" fg:w="1"/><text x="16.9303%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.6803%" y="517" width="0.0818%" height="15" fill="rgb(238,117,24)" fg:x="204" fg:w="1"/><text x="16.9303%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.6803%" y="501" width="0.0818%" height="15" fill="rgb(242,26,26)" fg:x="204" fg:w="1"/><text x="16.9303%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (4 samples, 0.33%)</title><rect x="16.5168%" y="597" width="0.3271%" height="15" fill="rgb(221,92,48)" fg:x="202" fg:w="4"/><text x="16.7668%" y="607.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="16.7621%" y="581" width="0.0818%" height="15" fill="rgb(209,209,32)" fg:x="205" fg:w="1"/><text x="17.0121%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.7621%" y="565" width="0.0818%" height="15" fill="rgb(221,70,22)" fg:x="205" fg:w="1"/><text x="17.0121%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="16.8438%" y="597" width="0.0818%" height="15" fill="rgb(248,145,5)" fg:x="206" fg:w="1"/><text x="17.0938%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9256%" y="581" width="0.0818%" height="15" fill="rgb(226,116,26)" fg:x="207" fg:w="1"/><text x="17.1756%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.9256%" y="565" width="0.0818%" height="15" fill="rgb(244,5,17)" fg:x="207" fg:w="1"/><text x="17.1756%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.9256%" y="549" width="0.0818%" height="15" fill="rgb(252,159,33)" fg:x="207" fg:w="1"/><text x="17.1756%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.9256%" y="533" width="0.0818%" height="15" fill="rgb(206,71,0)" fg:x="207" fg:w="1"/><text x="17.1756%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.9256%" y="517" width="0.0818%" height="15" fill="rgb(233,118,54)" fg:x="207" fg:w="1"/><text x="17.1756%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9256%" y="501" width="0.0818%" height="15" fill="rgb(234,83,48)" fg:x="207" fg:w="1"/><text x="17.1756%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.9256%" y="485" width="0.0818%" height="15" fill="rgb(228,3,54)" fg:x="207" fg:w="1"/><text x="17.1756%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.9256%" y="469" width="0.0818%" height="15" fill="rgb(226,155,13)" fg:x="207" fg:w="1"/><text x="17.1756%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.9256%" y="453" width="0.0818%" height="15" fill="rgb(241,28,37)" fg:x="207" fg:w="1"/><text x="17.1756%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.9256%" y="437" width="0.0818%" height="15" fill="rgb(233,93,10)" fg:x="207" fg:w="1"/><text x="17.1756%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.9256%" y="421" width="0.0818%" height="15" fill="rgb(225,113,19)" fg:x="207" fg:w="1"/><text x="17.1756%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9256%" y="405" width="0.0818%" height="15" fill="rgb(241,2,18)" fg:x="207" fg:w="1"/><text x="17.1756%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="17.0074%" y="565" width="0.0818%" height="15" fill="rgb(228,207,21)" fg:x="208" fg:w="1"/><text x="17.2574%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.0074%" y="549" width="0.0818%" height="15" fill="rgb(213,211,35)" fg:x="208" fg:w="1"/><text x="17.2574%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.0074%" y="533" width="0.0818%" height="15" fill="rgb(209,83,10)" fg:x="208" fg:w="1"/><text x="17.2574%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.0074%" y="517" width="0.0818%" height="15" fill="rgb(209,164,1)" fg:x="208" fg:w="1"/><text x="17.2574%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0074%" y="501" width="0.0818%" height="15" fill="rgb(213,184,43)" fg:x="208" fg:w="1"/><text x="17.2574%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.0074%" y="485" width="0.0818%" height="15" fill="rgb(231,61,34)" fg:x="208" fg:w="1"/><text x="17.2574%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.0074%" y="469" width="0.0818%" height="15" fill="rgb(235,75,3)" fg:x="208" fg:w="1"/><text x="17.2574%" y="479.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="17.0891%" y="565" width="0.0818%" height="15" fill="rgb(220,106,47)" fg:x="209" fg:w="1"/><text x="17.3391%" y="575.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="17.0891%" y="549" width="0.0818%" height="15" fill="rgb(210,196,33)" fg:x="209" fg:w="1"/><text x="17.3391%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.0891%" y="533" width="0.0818%" height="15" fill="rgb(229,154,42)" fg:x="209" fg:w="1"/><text x="17.3391%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="17.1709%" y="549" width="0.0818%" height="15" fill="rgb(228,114,26)" fg:x="210" fg:w="1"/><text x="17.4209%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="17.1709%" y="533" width="0.0818%" height="15" fill="rgb(208,144,1)" fg:x="210" fg:w="1"/><text x="17.4209%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.1709%" y="517" width="0.0818%" height="15" fill="rgb(239,112,37)" fg:x="210" fg:w="1"/><text x="17.4209%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.1709%" y="501" width="0.0818%" height="15" fill="rgb(210,96,50)" fg:x="210" fg:w="1"/><text x="17.4209%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1709%" y="485" width="0.0818%" height="15" fill="rgb(222,178,2)" fg:x="210" fg:w="1"/><text x="17.4209%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.1709%" y="469" width="0.0818%" height="15" fill="rgb(226,74,18)" fg:x="210" fg:w="1"/><text x="17.4209%" y="479.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="17.2527%" y="549" width="0.0818%" height="15" fill="rgb(225,67,54)" fg:x="211" fg:w="1"/><text x="17.5027%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.2527%" y="533" width="0.0818%" height="15" fill="rgb(251,92,32)" fg:x="211" fg:w="1"/><text x="17.5027%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="17.2527%" y="517" width="0.0818%" height="15" fill="rgb(228,149,22)" fg:x="211" fg:w="1"/><text x="17.5027%" y="527.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="17.2527%" y="501" width="0.0818%" height="15" fill="rgb(243,54,13)" fg:x="211" fg:w="1"/><text x="17.5027%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.3344%" y="517" width="0.0818%" height="15" fill="rgb(243,180,28)" fg:x="212" fg:w="1"/><text x="17.5844%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.4162%" y="517" width="0.0818%" height="15" fill="rgb(208,167,24)" fg:x="213" fg:w="1"/><text x="17.6662%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="17.4980%" y="517" width="0.1635%" height="15" fill="rgb(245,73,45)" fg:x="214" fg:w="2"/><text x="17.7480%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="17.4980%" y="501" width="0.1635%" height="15" fill="rgb(237,203,48)" fg:x="214" fg:w="2"/><text x="17.7480%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="17.4980%" y="485" width="0.1635%" height="15" fill="rgb(211,197,16)" fg:x="214" fg:w="2"/><text x="17.7480%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.57%)</title><rect x="17.1709%" y="565" width="0.5724%" height="15" fill="rgb(243,99,51)" fg:x="210" fg:w="7"/><text x="17.4209%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="17.3344%" y="549" width="0.4088%" height="15" fill="rgb(215,123,29)" fg:x="212" fg:w="5"/><text x="17.5844%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="17.3344%" y="533" width="0.4088%" height="15" fill="rgb(239,186,37)" fg:x="212" fg:w="5"/><text x="17.5844%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6615%" y="517" width="0.0818%" height="15" fill="rgb(252,136,39)" fg:x="216" fg:w="1"/><text x="17.9115%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.6615%" y="501" width="0.0818%" height="15" fill="rgb(223,213,32)" fg:x="216" fg:w="1"/><text x="17.9115%" y="511.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="17.6615%" y="485" width="0.0818%" height="15" fill="rgb(233,115,5)" fg:x="216" fg:w="1"/><text x="17.9115%" y="495.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="17.6615%" y="469" width="0.0818%" height="15" fill="rgb(207,226,44)" fg:x="216" fg:w="1"/><text x="17.9115%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.82%)</title><rect x="17.0074%" y="581" width="0.8177%" height="15" fill="rgb(208,126,0)" fg:x="208" fg:w="10"/><text x="17.2574%" y="591.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="17.7433%" y="565" width="0.0818%" height="15" fill="rgb(244,66,21)" fg:x="217" fg:w="1"/><text x="17.9933%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.8250%" y="565" width="0.0818%" height="15" fill="rgb(222,97,12)" fg:x="218" fg:w="1"/><text x="18.0750%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.9068%" y="533" width="0.0818%" height="15" fill="rgb(219,213,19)" fg:x="219" fg:w="1"/><text x="18.1568%" y="543.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (174 samples, 14.23%)</title><rect x="3.8430%" y="629" width="14.2273%" height="15" fill="rgb(252,169,30)" fg:x="47" fg:w="174"/><text x="4.0930%" y="639.50">&lt;tests::HoldingKeyInVe..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (21 samples, 1.72%)</title><rect x="16.3532%" y="613" width="1.7171%" height="15" fill="rgb(206,32,51)" fg:x="200" fg:w="21"/><text x="16.6032%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.14%)</title><rect x="16.9256%" y="597" width="1.1447%" height="15" fill="rgb(250,172,42)" fg:x="207" fg:w="14"/><text x="17.1756%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="17.8250%" y="581" width="0.2453%" height="15" fill="rgb(209,34,43)" fg:x="218" fg:w="3"/><text x="18.0750%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.9068%" y="565" width="0.1635%" height="15" fill="rgb(223,11,35)" fg:x="219" fg:w="2"/><text x="18.1568%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.9068%" y="549" width="0.1635%" height="15" fill="rgb(251,219,26)" fg:x="219" fg:w="2"/><text x="18.1568%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.9886%" y="533" width="0.0818%" height="15" fill="rgb(231,119,3)" fg:x="220" fg:w="1"/><text x="18.2386%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9886%" y="517" width="0.0818%" height="15" fill="rgb(216,97,11)" fg:x="220" fg:w="1"/><text x="18.2386%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.9886%" y="501" width="0.0818%" height="15" fill="rgb(223,59,9)" fg:x="220" fg:w="1"/><text x="18.2386%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9886%" y="485" width="0.0818%" height="15" fill="rgb(233,93,31)" fg:x="220" fg:w="1"/><text x="18.2386%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.9886%" y="469" width="0.0818%" height="15" fill="rgb(239,81,33)" fg:x="220" fg:w="1"/><text x="18.2386%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.9886%" y="453" width="0.0818%" height="15" fill="rgb(213,120,34)" fg:x="220" fg:w="1"/><text x="18.2386%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.0703%" y="613" width="0.0818%" height="15" fill="rgb(243,49,53)" fg:x="221" fg:w="1"/><text x="18.3203%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (2 samples, 0.16%)</title><rect x="18.0703%" y="629" width="0.1635%" height="15" fill="rgb(247,216,33)" fg:x="221" fg:w="2"/><text x="18.3203%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1521%" y="613" width="0.0818%" height="15" fill="rgb(226,26,14)" fg:x="222" fg:w="1"/><text x="18.4021%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="18.1521%" y="597" width="0.0818%" height="15" fill="rgb(215,49,53)" fg:x="222" fg:w="1"/><text x="18.4021%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.1521%" y="581" width="0.0818%" height="15" fill="rgb(245,162,40)" fg:x="222" fg:w="1"/><text x="18.4021%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.1521%" y="565" width="0.0818%" height="15" fill="rgb(229,68,17)" fg:x="222" fg:w="1"/><text x="18.4021%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="18.3156%" y="613" width="0.0818%" height="15" fill="rgb(213,182,10)" fg:x="224" fg:w="1"/><text x="18.5656%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="18.3156%" y="597" width="0.0818%" height="15" fill="rgb(245,125,30)" fg:x="224" fg:w="1"/><text x="18.5656%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.3156%" y="581" width="0.0818%" height="15" fill="rgb(232,202,2)" fg:x="224" fg:w="1"/><text x="18.5656%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.3156%" y="565" width="0.0818%" height="15" fill="rgb(237,140,51)" fg:x="224" fg:w="1"/><text x="18.5656%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="18.3156%" y="549" width="0.0818%" height="15" fill="rgb(236,157,25)" fg:x="224" fg:w="1"/><text x="18.5656%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="18.3156%" y="533" width="0.0818%" height="15" fill="rgb(219,209,0)" fg:x="224" fg:w="1"/><text x="18.5656%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="18.3156%" y="517" width="0.0818%" height="15" fill="rgb(240,116,54)" fg:x="224" fg:w="1"/><text x="18.5656%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="18.3156%" y="501" width="0.0818%" height="15" fill="rgb(216,10,36)" fg:x="224" fg:w="1"/><text x="18.5656%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="18.3156%" y="485" width="0.0818%" height="15" fill="rgb(222,72,44)" fg:x="224" fg:w="1"/><text x="18.5656%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="18.3156%" y="469" width="0.0818%" height="15" fill="rgb(232,159,9)" fg:x="224" fg:w="1"/><text x="18.5656%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.3156%" y="453" width="0.0818%" height="15" fill="rgb(210,39,32)" fg:x="224" fg:w="1"/><text x="18.5656%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.3156%" y="437" width="0.0818%" height="15" fill="rgb(216,194,45)" fg:x="224" fg:w="1"/><text x="18.5656%" y="447.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="18.3156%" y="421" width="0.0818%" height="15" fill="rgb(218,18,35)" fg:x="224" fg:w="1"/><text x="18.5656%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="18.3156%" y="405" width="0.0818%" height="15" fill="rgb(207,83,51)" fg:x="224" fg:w="1"/><text x="18.5656%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="18.3156%" y="389" width="0.0818%" height="15" fill="rgb(225,63,43)" fg:x="224" fg:w="1"/><text x="18.5656%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="18.3156%" y="373" width="0.0818%" height="15" fill="rgb(207,57,36)" fg:x="224" fg:w="1"/><text x="18.5656%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.3156%" y="357" width="0.0818%" height="15" fill="rgb(216,99,33)" fg:x="224" fg:w="1"/><text x="18.5656%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="18.3156%" y="341" width="0.0818%" height="15" fill="rgb(225,42,16)" fg:x="224" fg:w="1"/><text x="18.5656%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.4791%" y="581" width="0.0818%" height="15" fill="rgb(220,201,45)" fg:x="226" fg:w="1"/><text x="18.7291%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.5609%" y="581" width="0.0818%" height="15" fill="rgb(225,33,4)" fg:x="227" fg:w="1"/><text x="18.8109%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="18.5609%" y="565" width="0.0818%" height="15" fill="rgb(224,33,50)" fg:x="227" fg:w="1"/><text x="18.8109%" y="575.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="18.5609%" y="549" width="0.0818%" height="15" fill="rgb(246,198,51)" fg:x="227" fg:w="1"/><text x="18.8109%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="18.8062%" y="517" width="0.0818%" height="15" fill="rgb(205,22,4)" fg:x="230" fg:w="1"/><text x="19.0562%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="18.8062%" y="501" width="0.0818%" height="15" fill="rgb(206,3,8)" fg:x="230" fg:w="1"/><text x="19.0562%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.8062%" y="485" width="0.0818%" height="15" fill="rgb(251,23,15)" fg:x="230" fg:w="1"/><text x="19.0562%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.8062%" y="469" width="0.0818%" height="15" fill="rgb(252,88,28)" fg:x="230" fg:w="1"/><text x="19.0562%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="18.8062%" y="453" width="0.0818%" height="15" fill="rgb(212,127,14)" fg:x="230" fg:w="1"/><text x="19.0562%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="18.9697%" y="501" width="0.2453%" height="15" fill="rgb(247,145,37)" fg:x="232" fg:w="3"/><text x="19.2197%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="19.1333%" y="485" width="0.0818%" height="15" fill="rgb(209,117,53)" fg:x="234" fg:w="1"/><text x="19.3833%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.1333%" y="469" width="0.0818%" height="15" fill="rgb(212,90,42)" fg:x="234" fg:w="1"/><text x="19.3833%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.1333%" y="453" width="0.0818%" height="15" fill="rgb(218,164,37)" fg:x="234" fg:w="1"/><text x="19.3833%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="19.1333%" y="437" width="0.0818%" height="15" fill="rgb(246,65,34)" fg:x="234" fg:w="1"/><text x="19.3833%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="19.1333%" y="421" width="0.0818%" height="15" fill="rgb(231,100,33)" fg:x="234" fg:w="1"/><text x="19.3833%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="19.1333%" y="405" width="0.0818%" height="15" fill="rgb(228,126,14)" fg:x="234" fg:w="1"/><text x="19.3833%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.2150%" y="485" width="0.0818%" height="15" fill="rgb(215,173,21)" fg:x="235" fg:w="1"/><text x="19.4650%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="19.2968%" y="485" width="0.1635%" height="15" fill="rgb(210,6,40)" fg:x="236" fg:w="2"/><text x="19.5468%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="19.4603%" y="469" width="0.2453%" height="15" fill="rgb(212,48,18)" fg:x="238" fg:w="3"/><text x="19.7103%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="19.4603%" y="453" width="0.2453%" height="15" fill="rgb(230,214,11)" fg:x="238" fg:w="3"/><text x="19.7103%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="19.6239%" y="437" width="0.0818%" height="15" fill="rgb(254,105,39)" fg:x="240" fg:w="1"/><text x="19.8739%" y="447.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="19.6239%" y="421" width="0.0818%" height="15" fill="rgb(245,158,5)" fg:x="240" fg:w="1"/><text x="19.8739%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="19.7056%" y="453" width="0.0818%" height="15" fill="rgb(249,208,11)" fg:x="241" fg:w="1"/><text x="19.9556%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="19.7056%" y="469" width="0.4906%" height="15" fill="rgb(210,39,28)" fg:x="241" fg:w="6"/><text x="19.9556%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="19.7874%" y="453" width="0.4088%" height="15" fill="rgb(211,56,53)" fg:x="242" fg:w="5"/><text x="20.0374%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="19.9509%" y="437" width="0.2453%" height="15" fill="rgb(226,201,30)" fg:x="244" fg:w="3"/><text x="20.2009%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="20.0327%" y="421" width="0.1635%" height="15" fill="rgb(239,101,34)" fg:x="245" fg:w="2"/><text x="20.2827%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.1145%" y="405" width="0.0818%" height="15" fill="rgb(226,209,5)" fg:x="246" fg:w="1"/><text x="20.3645%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.1145%" y="389" width="0.0818%" height="15" fill="rgb(250,105,47)" fg:x="246" fg:w="1"/><text x="20.3645%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.82%)</title><rect x="19.4603%" y="485" width="0.8177%" height="15" fill="rgb(230,72,3)" fg:x="238" fg:w="10"/><text x="19.7103%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.1962%" y="469" width="0.0818%" height="15" fill="rgb(232,218,39)" fg:x="247" fg:w="1"/><text x="20.4462%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.1962%" y="453" width="0.0818%" height="15" fill="rgb(248,166,6)" fg:x="247" fg:w="1"/><text x="20.4462%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="20.1962%" y="437" width="0.0818%" height="15" fill="rgb(247,89,20)" fg:x="247" fg:w="1"/><text x="20.4462%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="19.2150%" y="501" width="1.1447%" height="15" fill="rgb(248,130,54)" fg:x="235" fg:w="14"/><text x="19.4650%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.2780%" y="485" width="0.0818%" height="15" fill="rgb(234,196,4)" fg:x="248" fg:w="1"/><text x="20.5280%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.55%)</title><rect x="18.8880%" y="517" width="1.5536%" height="15" fill="rgb(250,143,31)" fg:x="231" fg:w="19"/><text x="19.1380%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.3598%" y="501" width="0.0818%" height="15" fill="rgb(211,110,34)" fg:x="249" fg:w="1"/><text x="20.6098%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (22 samples, 1.80%)</title><rect x="18.7244%" y="533" width="1.7989%" height="15" fill="rgb(215,124,48)" fg:x="229" fg:w="22"/><text x="18.9744%" y="543.50">&lt;..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="20.4415%" y="517" width="0.0818%" height="15" fill="rgb(216,46,13)" fg:x="250" fg:w="1"/><text x="20.6915%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="20.4415%" y="501" width="0.0818%" height="15" fill="rgb(205,184,25)" fg:x="250" fg:w="1"/><text x="20.6915%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.5233%" y="501" width="0.0818%" height="15" fill="rgb(228,1,10)" fg:x="251" fg:w="1"/><text x="20.7733%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8504%" y="437" width="0.0818%" height="15" fill="rgb(213,116,27)" fg:x="255" fg:w="1"/><text x="21.1004%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="20.5233%" y="533" width="0.4906%" height="15" fill="rgb(241,95,50)" fg:x="251" fg:w="6"/><text x="20.7733%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="20.5233%" y="517" width="0.4906%" height="15" fill="rgb(238,48,32)" fg:x="251" fg:w="6"/><text x="20.7733%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="20.6051%" y="501" width="0.4088%" height="15" fill="rgb(235,113,49)" fg:x="252" fg:w="5"/><text x="20.8551%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="20.6868%" y="485" width="0.3271%" height="15" fill="rgb(205,127,43)" fg:x="253" fg:w="4"/><text x="20.9368%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="20.7686%" y="469" width="0.2453%" height="15" fill="rgb(250,162,2)" fg:x="254" fg:w="3"/><text x="21.0186%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="20.8504%" y="453" width="0.1635%" height="15" fill="rgb(220,13,41)" fg:x="255" fg:w="2"/><text x="21.1004%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.9321%" y="437" width="0.0818%" height="15" fill="rgb(249,221,25)" fg:x="256" fg:w="1"/><text x="21.1821%" y="447.50"></text></g><g><title>__libc_free (4 samples, 0.33%)</title><rect x="21.0957%" y="469" width="0.3271%" height="15" fill="rgb(215,208,19)" fg:x="258" fg:w="4"/><text x="21.3457%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.4227%" y="469" width="0.0818%" height="15" fill="rgb(236,175,2)" fg:x="262" fg:w="1"/><text x="21.6727%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.4227%" y="453" width="0.0818%" height="15" fill="rgb(241,52,2)" fg:x="262" fg:w="1"/><text x="21.6727%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.5863%" y="453" width="0.0818%" height="15" fill="rgb(248,140,14)" fg:x="264" fg:w="1"/><text x="21.8363%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.6680%" y="453" width="0.0818%" height="15" fill="rgb(253,22,42)" fg:x="265" fg:w="1"/><text x="21.9180%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8316%" y="437" width="0.0818%" height="15" fill="rgb(234,61,47)" fg:x="267" fg:w="1"/><text x="22.0816%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.9951%" y="421" width="0.0818%" height="15" fill="rgb(208,226,15)" fg:x="269" fg:w="1"/><text x="22.2451%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9951%" y="405" width="0.0818%" height="15" fill="rgb(217,221,4)" fg:x="269" fg:w="1"/><text x="22.2451%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 1.14%)</title><rect x="21.0957%" y="501" width="1.1447%" height="15" fill="rgb(212,174,34)" fg:x="258" fg:w="14"/><text x="21.3457%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (14 samples, 1.14%)</title><rect x="21.0957%" y="485" width="1.1447%" height="15" fill="rgb(253,83,4)" fg:x="258" fg:w="14"/><text x="21.3457%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.74%)</title><rect x="21.5045%" y="469" width="0.7359%" height="15" fill="rgb(250,195,49)" fg:x="263" fg:w="9"/><text x="21.7545%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="21.7498%" y="453" width="0.4906%" height="15" fill="rgb(241,192,25)" fg:x="266" fg:w="6"/><text x="21.9998%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="21.9133%" y="437" width="0.3271%" height="15" fill="rgb(208,124,10)" fg:x="268" fg:w="4"/><text x="22.1633%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="22.0769%" y="421" width="0.1635%" height="15" fill="rgb(222,33,0)" fg:x="270" fg:w="2"/><text x="22.3269%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="22.1586%" y="405" width="0.0818%" height="15" fill="rgb(234,209,28)" fg:x="271" fg:w="1"/><text x="22.4086%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.1586%" y="389" width="0.0818%" height="15" fill="rgb(224,11,23)" fg:x="271" fg:w="1"/><text x="22.4086%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.25%)</title><rect x="22.2404%" y="469" width="0.2453%" height="15" fill="rgb(232,99,1)" fg:x="272" fg:w="3"/><text x="22.4904%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.25%)</title><rect x="22.2404%" y="453" width="0.2453%" height="15" fill="rgb(237,95,45)" fg:x="272" fg:w="3"/><text x="22.4904%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.4039%" y="437" width="0.0818%" height="15" fill="rgb(208,109,11)" fg:x="274" fg:w="1"/><text x="22.6539%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="22.4039%" y="421" width="0.0818%" height="15" fill="rgb(216,190,48)" fg:x="274" fg:w="1"/><text x="22.6539%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (4 samples, 0.33%)</title><rect x="22.2404%" y="485" width="0.3271%" height="15" fill="rgb(251,171,36)" fg:x="272" fg:w="4"/><text x="22.4904%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="22.4857%" y="469" width="0.0818%" height="15" fill="rgb(230,62,22)" fg:x="275" fg:w="1"/><text x="22.7357%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (20 samples, 1.64%)</title><rect x="21.0139%" y="517" width="1.6353%" height="15" fill="rgb(225,114,35)" fg:x="257" fg:w="20"/><text x="21.2639%" y="527.50"></text></g><g><title>treediff::diff::diff (5 samples, 0.41%)</title><rect x="22.2404%" y="501" width="0.4088%" height="15" fill="rgb(215,118,42)" fg:x="272" fg:w="5"/><text x="22.4904%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="22.5675%" y="485" width="0.0818%" height="15" fill="rgb(243,119,21)" fg:x="276" fg:w="1"/><text x="22.8175%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.5675%" y="469" width="0.0818%" height="15" fill="rgb(252,177,53)" fg:x="276" fg:w="1"/><text x="22.8175%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.5675%" y="453" width="0.0818%" height="15" fill="rgb(237,209,29)" fg:x="276" fg:w="1"/><text x="22.8175%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.49%)</title><rect x="22.6492%" y="485" width="0.4906%" height="15" fill="rgb(212,65,23)" fg:x="277" fg:w="6"/><text x="22.8992%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.33%)</title><rect x="22.8128%" y="469" width="0.3271%" height="15" fill="rgb(230,222,46)" fg:x="279" fg:w="4"/><text x="23.0628%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.25%)</title><rect x="22.8945%" y="453" width="0.2453%" height="15" fill="rgb(215,135,32)" fg:x="280" fg:w="3"/><text x="23.1445%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="23.1398%" y="485" width="0.0818%" height="15" fill="rgb(246,101,22)" fg:x="283" fg:w="1"/><text x="23.3898%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="23.1398%" y="469" width="0.0818%" height="15" fill="rgb(206,107,13)" fg:x="283" fg:w="1"/><text x="23.3898%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.3034%" y="453" width="0.0818%" height="15" fill="rgb(250,100,44)" fg:x="285" fg:w="1"/><text x="23.5534%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.25%)</title><rect x="23.2216%" y="485" width="0.2453%" height="15" fill="rgb(231,147,38)" fg:x="284" fg:w="3"/><text x="23.4716%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.3034%" y="469" width="0.1635%" height="15" fill="rgb(229,8,40)" fg:x="285" fg:w="2"/><text x="23.5534%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.3851%" y="453" width="0.0818%" height="15" fill="rgb(221,135,30)" fg:x="286" fg:w="1"/><text x="23.6351%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6304%" y="437" width="0.0818%" height="15" fill="rgb(249,193,18)" fg:x="289" fg:w="1"/><text x="23.8804%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.6304%" y="421" width="0.0818%" height="15" fill="rgb(209,133,39)" fg:x="289" fg:w="1"/><text x="23.8804%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.6304%" y="405" width="0.0818%" height="15" fill="rgb(232,100,14)" fg:x="289" fg:w="1"/><text x="23.8804%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="23.7122%" y="389" width="0.1635%" height="15" fill="rgb(224,185,1)" fg:x="290" fg:w="2"/><text x="23.9622%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.7939%" y="373" width="0.0818%" height="15" fill="rgb(223,139,8)" fg:x="291" fg:w="1"/><text x="24.0439%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="23.7939%" y="357" width="0.0818%" height="15" fill="rgb(232,213,38)" fg:x="291" fg:w="1"/><text x="24.0439%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="23.7122%" y="405" width="0.2453%" height="15" fill="rgb(207,94,22)" fg:x="290" fg:w="3"/><text x="23.9622%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="23.8757%" y="389" width="0.0818%" height="15" fill="rgb(219,183,54)" fg:x="292" fg:w="1"/><text x="24.1257%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.8757%" y="373" width="0.0818%" height="15" fill="rgb(216,185,54)" fg:x="292" fg:w="1"/><text x="24.1257%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.8757%" y="357" width="0.0818%" height="15" fill="rgb(254,217,39)" fg:x="292" fg:w="1"/><text x="24.1257%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.8757%" y="341" width="0.0818%" height="15" fill="rgb(240,178,23)" fg:x="292" fg:w="1"/><text x="24.1257%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.8757%" y="325" width="0.0818%" height="15" fill="rgb(218,11,47)" fg:x="292" fg:w="1"/><text x="24.1257%" y="335.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.33%)</title><rect x="23.7122%" y="437" width="0.3271%" height="15" fill="rgb(218,51,51)" fg:x="290" fg:w="4"/><text x="23.9622%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.33%)</title><rect x="23.7122%" y="421" width="0.3271%" height="15" fill="rgb(238,126,27)" fg:x="290" fg:w="4"/><text x="23.9622%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.9575%" y="405" width="0.0818%" height="15" fill="rgb(249,202,22)" fg:x="293" fg:w="1"/><text x="24.2075%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.3663%" y="421" width="0.0818%" height="15" fill="rgb(254,195,49)" fg:x="298" fg:w="1"/><text x="24.6163%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.4481%" y="405" width="0.0818%" height="15" fill="rgb(208,123,14)" fg:x="299" fg:w="1"/><text x="24.6981%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.4481%" y="389" width="0.0818%" height="15" fill="rgb(224,200,8)" fg:x="299" fg:w="1"/><text x="24.6981%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.4481%" y="373" width="0.0818%" height="15" fill="rgb(217,61,36)" fg:x="299" fg:w="1"/><text x="24.6981%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.5298%" y="389" width="0.0818%" height="15" fill="rgb(206,35,45)" fg:x="300" fg:w="1"/><text x="24.7798%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="24.4481%" y="421" width="0.2453%" height="15" fill="rgb(217,65,33)" fg:x="299" fg:w="3"/><text x="24.6981%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="24.5298%" y="405" width="0.1635%" height="15" fill="rgb(222,158,48)" fg:x="300" fg:w="2"/><text x="24.7798%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="24.6116%" y="389" width="0.0818%" height="15" fill="rgb(254,2,54)" fg:x="301" fg:w="1"/><text x="24.8616%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6116%" y="373" width="0.0818%" height="15" fill="rgb(250,143,38)" fg:x="301" fg:w="1"/><text x="24.8616%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.6116%" y="357" width="0.0818%" height="15" fill="rgb(248,25,0)" fg:x="301" fg:w="1"/><text x="24.8616%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.6116%" y="341" width="0.0818%" height="15" fill="rgb(206,152,27)" fg:x="301" fg:w="1"/><text x="24.8616%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (15 samples, 1.23%)</title><rect x="23.6304%" y="453" width="1.2265%" height="15" fill="rgb(240,77,30)" fg:x="289" fg:w="15"/><text x="23.8804%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.82%)</title><rect x="24.0392%" y="437" width="0.8177%" height="15" fill="rgb(231,5,3)" fg:x="294" fg:w="10"/><text x="24.2892%" y="447.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="24.6934%" y="421" width="0.1635%" height="15" fill="rgb(207,226,32)" fg:x="302" fg:w="2"/><text x="24.9434%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.47%)</title><rect x="23.4669%" y="469" width="1.4718%" height="15" fill="rgb(222,207,47)" fg:x="287" fg:w="18"/><text x="23.7169%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="24.8569%" y="453" width="0.0818%" height="15" fill="rgb(229,115,45)" fg:x="304" fg:w="1"/><text x="25.1069%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.8569%" y="437" width="0.0818%" height="15" fill="rgb(224,191,6)" fg:x="304" fg:w="1"/><text x="25.1069%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (29 samples, 2.37%)</title><rect x="22.6492%" y="517" width="2.3712%" height="15" fill="rgb(230,227,24)" fg:x="277" fg:w="29"/><text x="22.8992%" y="527.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (29 samples, 2.37%)</title><rect x="22.6492%" y="501" width="2.3712%" height="15" fill="rgb(228,80,19)" fg:x="277" fg:w="29"/><text x="22.8992%" y="511.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (19 samples, 1.55%)</title><rect x="23.4669%" y="485" width="1.5536%" height="15" fill="rgb(247,229,0)" fg:x="287" fg:w="19"/><text x="23.7169%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="24.9387%" y="469" width="0.0818%" height="15" fill="rgb(237,194,15)" fg:x="305" fg:w="1"/><text x="25.1887%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="25.1840%" y="325" width="0.1635%" height="15" fill="rgb(219,203,20)" fg:x="308" fg:w="2"/><text x="25.4340%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.2657%" y="309" width="0.0818%" height="15" fill="rgb(234,128,8)" fg:x="309" fg:w="1"/><text x="25.5157%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="25.1840%" y="357" width="0.3271%" height="15" fill="rgb(248,202,8)" fg:x="308" fg:w="4"/><text x="25.4340%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="25.1840%" y="341" width="0.3271%" height="15" fill="rgb(206,104,37)" fg:x="308" fg:w="4"/><text x="25.4340%" y="351.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="25.3475%" y="325" width="0.1635%" height="15" fill="rgb(223,8,27)" fg:x="310" fg:w="2"/><text x="25.5975%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.4293%" y="309" width="0.0818%" height="15" fill="rgb(216,217,28)" fg:x="311" fg:w="1"/><text x="25.6793%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="25.1840%" y="389" width="0.4088%" height="15" fill="rgb(249,199,1)" fg:x="308" fg:w="5"/><text x="25.4340%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="25.1840%" y="373" width="0.4088%" height="15" fill="rgb(240,85,17)" fg:x="308" fg:w="5"/><text x="25.4340%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="25.5110%" y="357" width="0.0818%" height="15" fill="rgb(206,108,45)" fg:x="312" fg:w="1"/><text x="25.7610%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5110%" y="341" width="0.0818%" height="15" fill="rgb(245,210,41)" fg:x="312" fg:w="1"/><text x="25.7610%" y="351.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.25%)</title><rect x="25.5928%" y="373" width="0.2453%" height="15" fill="rgb(206,13,37)" fg:x="313" fg:w="3"/><text x="25.8428%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.90%)</title><rect x="25.0204%" y="421" width="0.8994%" height="15" fill="rgb(250,61,18)" fg:x="306" fg:w="11"/><text x="25.2704%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (11 samples, 0.90%)</title><rect x="25.0204%" y="405" width="0.8994%" height="15" fill="rgb(235,172,48)" fg:x="306" fg:w="11"/><text x="25.2704%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (4 samples, 0.33%)</title><rect x="25.5928%" y="389" width="0.3271%" height="15" fill="rgb(249,201,17)" fg:x="313" fg:w="4"/><text x="25.8428%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.8381%" y="373" width="0.0818%" height="15" fill="rgb(219,208,6)" fg:x="316" fg:w="1"/><text x="26.0881%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.25%)</title><rect x="25.9199%" y="421" width="0.2453%" height="15" fill="rgb(248,31,23)" fg:x="317" fg:w="3"/><text x="26.1699%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="26.0016%" y="405" width="0.1635%" height="15" fill="rgb(245,15,42)" fg:x="318" fg:w="2"/><text x="26.2516%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 1.23%)</title><rect x="25.0204%" y="453" width="1.2265%" height="15" fill="rgb(222,217,39)" fg:x="306" fg:w="15"/><text x="25.2704%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.23%)</title><rect x="25.0204%" y="437" width="1.2265%" height="15" fill="rgb(210,219,27)" fg:x="306" fg:w="15"/><text x="25.2704%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1652%" y="421" width="0.0818%" height="15" fill="rgb(252,166,36)" fg:x="320" fg:w="1"/><text x="26.4152%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.1652%" y="405" width="0.0818%" height="15" fill="rgb(245,132,34)" fg:x="320" fg:w="1"/><text x="26.4152%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.1652%" y="389" width="0.0818%" height="15" fill="rgb(236,54,3)" fg:x="320" fg:w="1"/><text x="26.4152%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="26.2469%" y="453" width="0.0818%" height="15" fill="rgb(241,173,43)" fg:x="321" fg:w="1"/><text x="26.4969%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="26.2469%" y="437" width="0.0818%" height="15" fill="rgb(215,190,9)" fg:x="321" fg:w="1"/><text x="26.4969%" y="447.50"></text></g><g><title>engine::session::state::State::close (100 samples, 8.18%)</title><rect x="18.3974%" y="613" width="8.1766%" height="15" fill="rgb(242,101,16)" fg:x="225" fg:w="100"/><text x="18.6474%" y="623.50">engine::ses..</text></g><g><title>engine::session::state::State::flush_entities (99 samples, 8.09%)</title><rect x="18.4791%" y="597" width="8.0948%" height="15" fill="rgb(223,190,21)" fg:x="226" fg:w="99"/><text x="18.7291%" y="607.50">engine::ses..</text></g><g><title>core::iter::adapters::try_process (97 samples, 7.93%)</title><rect x="18.6427%" y="581" width="7.9313%" height="15" fill="rgb(215,228,25)" fg:x="228" fg:w="97"/><text x="18.8927%" y="591.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (97 samples, 7.93%)</title><rect x="18.6427%" y="565" width="7.9313%" height="15" fill="rgb(225,36,22)" fg:x="228" fg:w="97"/><text x="18.8927%" y="575.50">&lt;alloc::vec..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (97 samples, 7.93%)</title><rect x="18.6427%" y="549" width="7.9313%" height="15" fill="rgb(251,106,46)" fg:x="228" fg:w="97"/><text x="18.8927%" y="559.50">engine::ses..</text></g><g><title>kernel::model::any_entity_changes (68 samples, 5.56%)</title><rect x="21.0139%" y="533" width="5.5601%" height="15" fill="rgb(208,90,1)" fg:x="257" fg:w="68"/><text x="21.2639%" y="543.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (19 samples, 1.55%)</title><rect x="25.0204%" y="517" width="1.5536%" height="15" fill="rgb(243,10,4)" fg:x="306" fg:w="19"/><text x="25.2704%" y="527.50"></text></g><g><title>serde_json::de::from_trait (19 samples, 1.55%)</title><rect x="25.0204%" y="501" width="1.5536%" height="15" fill="rgb(212,137,27)" fg:x="306" fg:w="19"/><text x="25.2704%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (19 samples, 1.55%)</title><rect x="25.0204%" y="485" width="1.5536%" height="15" fill="rgb(231,220,49)" fg:x="306" fg:w="19"/><text x="25.2704%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (19 samples, 1.55%)</title><rect x="25.0204%" y="469" width="1.5536%" height="15" fill="rgb(237,96,20)" fg:x="306" fg:w="19"/><text x="25.2704%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="26.3287%" y="453" width="0.2453%" height="15" fill="rgb(239,229,30)" fg:x="322" fg:w="3"/><text x="26.5787%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.4922%" y="437" width="0.0818%" height="15" fill="rgb(219,65,33)" fg:x="324" fg:w="1"/><text x="26.7422%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="26.4922%" y="421" width="0.0818%" height="15" fill="rgb(243,134,7)" fg:x="324" fg:w="1"/><text x="26.7422%" y="431.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="26.5740%" y="613" width="0.0818%" height="15" fill="rgb(216,177,54)" fg:x="325" fg:w="1"/><text x="26.8240%" y="623.50"></text></g><g><title>engine::session::Session::close (104 samples, 8.50%)</title><rect x="18.2339%" y="629" width="8.5037%" height="15" fill="rgb(211,160,20)" fg:x="223" fg:w="104"/><text x="18.4839%" y="639.50">engine::sess..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="26.6558%" y="613" width="0.0818%" height="15" fill="rgb(239,85,39)" fg:x="326" fg:w="1"/><text x="26.9058%" y="623.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="26.6558%" y="597" width="0.0818%" height="15" fill="rgb(232,125,22)" fg:x="326" fg:w="1"/><text x="26.9058%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="26.6558%" y="581" width="0.0818%" height="15" fill="rgb(244,57,34)" fg:x="326" fg:w="1"/><text x="26.9058%" y="591.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="26.6558%" y="565" width="0.0818%" height="15" fill="rgb(214,203,32)" fg:x="326" fg:w="1"/><text x="26.9058%" y="575.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="26.6558%" y="549" width="0.0818%" height="15" fill="rgb(207,58,43)" fg:x="326" fg:w="1"/><text x="26.9058%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="26.7375%" y="485" width="0.1635%" height="15" fill="rgb(215,193,15)" fg:x="327" fg:w="2"/><text x="26.9875%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="26.7375%" y="469" width="0.1635%" height="15" fill="rgb(232,15,44)" fg:x="327" fg:w="2"/><text x="26.9875%" y="479.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="26.7375%" y="453" width="0.1635%" height="15" fill="rgb(212,3,48)" fg:x="327" fg:w="2"/><text x="26.9875%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="26.7375%" y="501" width="0.3271%" height="15" fill="rgb(218,128,7)" fg:x="327" fg:w="4"/><text x="26.9875%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="26.9011%" y="485" width="0.1635%" height="15" fill="rgb(226,216,39)" fg:x="329" fg:w="2"/><text x="27.1511%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="26.9011%" y="469" width="0.1635%" height="15" fill="rgb(243,47,51)" fg:x="329" fg:w="2"/><text x="27.1511%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="26.9828%" y="453" width="0.0818%" height="15" fill="rgb(241,183,40)" fg:x="330" fg:w="1"/><text x="27.2328%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="26.9828%" y="437" width="0.0818%" height="15" fill="rgb(231,217,32)" fg:x="330" fg:w="1"/><text x="27.2328%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.0646%" y="405" width="0.0818%" height="15" fill="rgb(229,61,38)" fg:x="331" fg:w="1"/><text x="27.3146%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="27.0646%" y="389" width="0.0818%" height="15" fill="rgb(225,210,5)" fg:x="331" fg:w="1"/><text x="27.3146%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0646%" y="373" width="0.0818%" height="15" fill="rgb(231,79,45)" fg:x="331" fg:w="1"/><text x="27.3146%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.0646%" y="437" width="0.1635%" height="15" fill="rgb(224,100,7)" fg:x="331" fg:w="2"/><text x="27.3146%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="27.0646%" y="421" width="0.1635%" height="15" fill="rgb(241,198,18)" fg:x="331" fg:w="2"/><text x="27.3146%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.1464%" y="405" width="0.0818%" height="15" fill="rgb(252,97,53)" fg:x="332" fg:w="1"/><text x="27.3964%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="27.1464%" y="389" width="0.0818%" height="15" fill="rgb(220,88,7)" fg:x="332" fg:w="1"/><text x="27.3964%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="27.1464%" y="373" width="0.0818%" height="15" fill="rgb(213,176,14)" fg:x="332" fg:w="1"/><text x="27.3964%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="27.1464%" y="357" width="0.0818%" height="15" fill="rgb(246,73,7)" fg:x="332" fg:w="1"/><text x="27.3964%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="27.1464%" y="341" width="0.0818%" height="15" fill="rgb(245,64,36)" fg:x="332" fg:w="1"/><text x="27.3964%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.1464%" y="325" width="0.0818%" height="15" fill="rgb(245,80,10)" fg:x="332" fg:w="1"/><text x="27.3964%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="27.1464%" y="309" width="0.0818%" height="15" fill="rgb(232,107,50)" fg:x="332" fg:w="1"/><text x="27.3964%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="27.1464%" y="293" width="0.0818%" height="15" fill="rgb(253,3,0)" fg:x="332" fg:w="1"/><text x="27.3964%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="27.1464%" y="277" width="0.0818%" height="15" fill="rgb(212,99,53)" fg:x="332" fg:w="1"/><text x="27.3964%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="27.1464%" y="261" width="0.0818%" height="15" fill="rgb(249,111,54)" fg:x="332" fg:w="1"/><text x="27.3964%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="27.1464%" y="245" width="0.0818%" height="15" fill="rgb(249,55,30)" fg:x="332" fg:w="1"/><text x="27.3964%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.1464%" y="229" width="0.0818%" height="15" fill="rgb(237,47,42)" fg:x="332" fg:w="1"/><text x="27.3964%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.3099%" y="309" width="0.0818%" height="15" fill="rgb(211,20,18)" fg:x="334" fg:w="1"/><text x="27.5599%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.3099%" y="293" width="0.0818%" height="15" fill="rgb(231,203,46)" fg:x="334" fg:w="1"/><text x="27.5599%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.3099%" y="277" width="0.0818%" height="15" fill="rgb(237,142,3)" fg:x="334" fg:w="1"/><text x="27.5599%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.3099%" y="261" width="0.0818%" height="15" fill="rgb(241,107,1)" fg:x="334" fg:w="1"/><text x="27.5599%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="27.3099%" y="245" width="0.0818%" height="15" fill="rgb(229,83,13)" fg:x="334" fg:w="1"/><text x="27.5599%" y="255.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="27.3917%" y="309" width="0.1635%" height="15" fill="rgb(241,91,40)" fg:x="335" fg:w="2"/><text x="27.6417%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.3917%" y="293" width="0.1635%" height="15" fill="rgb(225,3,45)" fg:x="335" fg:w="2"/><text x="27.6417%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="27.3917%" y="277" width="0.1635%" height="15" fill="rgb(244,223,14)" fg:x="335" fg:w="2"/><text x="27.6417%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="27.3917%" y="261" width="0.1635%" height="15" fill="rgb(224,124,37)" fg:x="335" fg:w="2"/><text x="27.6417%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.3917%" y="245" width="0.1635%" height="15" fill="rgb(251,171,30)" fg:x="335" fg:w="2"/><text x="27.6417%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="27.3099%" y="389" width="0.3271%" height="15" fill="rgb(236,46,54)" fg:x="334" fg:w="4"/><text x="27.5599%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="27.3099%" y="373" width="0.3271%" height="15" fill="rgb(245,213,5)" fg:x="334" fg:w="4"/><text x="27.5599%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.33%)</title><rect x="27.3099%" y="357" width="0.3271%" height="15" fill="rgb(230,144,27)" fg:x="334" fg:w="4"/><text x="27.5599%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="27.3099%" y="341" width="0.3271%" height="15" fill="rgb(220,86,6)" fg:x="334" fg:w="4"/><text x="27.5599%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="27.3099%" y="325" width="0.3271%" height="15" fill="rgb(240,20,13)" fg:x="334" fg:w="4"/><text x="27.5599%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="27.5552%" y="309" width="0.0818%" height="15" fill="rgb(217,89,34)" fg:x="337" fg:w="1"/><text x="27.8052%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="27.7187%" y="357" width="0.0818%" height="15" fill="rgb(229,13,5)" fg:x="339" fg:w="1"/><text x="27.9687%" y="367.50"></text></g><g><title>kernel::model::entity::Entity::from_value (8 samples, 0.65%)</title><rect x="27.2281%" y="437" width="0.6541%" height="15" fill="rgb(244,67,35)" fg:x="333" fg:w="8"/><text x="27.4781%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (8 samples, 0.65%)</title><rect x="27.2281%" y="421" width="0.6541%" height="15" fill="rgb(221,40,2)" fg:x="333" fg:w="8"/><text x="27.4781%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="27.2281%" y="405" width="0.6541%" height="15" fill="rgb(237,157,21)" fg:x="333" fg:w="8"/><text x="27.4781%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="27.6370%" y="389" width="0.2453%" height="15" fill="rgb(222,94,11)" fg:x="338" fg:w="3"/><text x="27.8870%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="27.6370%" y="373" width="0.2453%" height="15" fill="rgb(249,113,6)" fg:x="338" fg:w="3"/><text x="27.8870%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8005%" y="357" width="0.0818%" height="15" fill="rgb(238,137,36)" fg:x="340" fg:w="1"/><text x="28.0505%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (15 samples, 1.23%)</title><rect x="26.7375%" y="533" width="1.2265%" height="15" fill="rgb(210,102,26)" fg:x="327" fg:w="15"/><text x="26.9875%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (15 samples, 1.23%)</title><rect x="26.7375%" y="517" width="1.2265%" height="15" fill="rgb(218,30,30)" fg:x="327" fg:w="15"/><text x="26.9875%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.90%)</title><rect x="27.0646%" y="501" width="0.8994%" height="15" fill="rgb(214,67,26)" fg:x="331" fg:w="11"/><text x="27.3146%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.90%)</title><rect x="27.0646%" y="485" width="0.8994%" height="15" fill="rgb(251,9,53)" fg:x="331" fg:w="11"/><text x="27.3146%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.90%)</title><rect x="27.0646%" y="469" width="0.8994%" height="15" fill="rgb(228,204,25)" fg:x="331" fg:w="11"/><text x="27.3146%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.90%)</title><rect x="27.0646%" y="453" width="0.8994%" height="15" fill="rgb(207,153,8)" fg:x="331" fg:w="11"/><text x="27.3146%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="27.8823%" y="437" width="0.0818%" height="15" fill="rgb(242,9,16)" fg:x="341" fg:w="1"/><text x="28.1323%" y="447.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="27.8823%" y="421" width="0.0818%" height="15" fill="rgb(217,211,10)" fg:x="341" fg:w="1"/><text x="28.1323%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.8823%" y="405" width="0.0818%" height="15" fill="rgb(219,228,52)" fg:x="341" fg:w="1"/><text x="28.1323%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.8823%" y="389" width="0.0818%" height="15" fill="rgb(231,92,29)" fg:x="341" fg:w="1"/><text x="28.1323%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.8823%" y="373" width="0.0818%" height="15" fill="rgb(232,8,23)" fg:x="341" fg:w="1"/><text x="28.1323%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.8823%" y="357" width="0.0818%" height="15" fill="rgb(216,211,34)" fg:x="341" fg:w="1"/><text x="28.1323%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="27.8823%" y="341" width="0.0818%" height="15" fill="rgb(236,151,0)" fg:x="341" fg:w="1"/><text x="28.1323%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="27.8823%" y="325" width="0.0818%" height="15" fill="rgb(209,168,3)" fg:x="341" fg:w="1"/><text x="28.1323%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.25%)</title><rect x="28.2093%" y="325" width="0.2453%" height="15" fill="rgb(208,129,28)" fg:x="345" fg:w="3"/><text x="28.4593%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.2911%" y="309" width="0.1635%" height="15" fill="rgb(229,78,22)" fg:x="346" fg:w="2"/><text x="28.5411%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.3729%" y="293" width="0.0818%" height="15" fill="rgb(228,187,13)" fg:x="347" fg:w="1"/><text x="28.6229%" y="303.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.33%)</title><rect x="28.4546%" y="325" width="0.3271%" height="15" fill="rgb(240,119,24)" fg:x="348" fg:w="4"/><text x="28.7046%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.25%)</title><rect x="28.5364%" y="309" width="0.2453%" height="15" fill="rgb(209,194,42)" fg:x="349" fg:w="3"/><text x="28.7864%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.6182%" y="293" width="0.1635%" height="15" fill="rgb(247,200,46)" fg:x="350" fg:w="2"/><text x="28.8682%" y="303.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.6182%" y="277" width="0.1635%" height="15" fill="rgb(218,76,16)" fg:x="350" fg:w="2"/><text x="28.8682%" y="287.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="28.6999%" y="261" width="0.0818%" height="15" fill="rgb(225,21,48)" fg:x="351" fg:w="1"/><text x="28.9499%" y="271.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (8 samples, 0.65%)</title><rect x="28.2093%" y="389" width="0.6541%" height="15" fill="rgb(239,223,50)" fg:x="345" fg:w="8"/><text x="28.4593%" y="399.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (8 samples, 0.65%)</title><rect x="28.2093%" y="373" width="0.6541%" height="15" fill="rgb(244,45,21)" fg:x="345" fg:w="8"/><text x="28.4593%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (8 samples, 0.65%)</title><rect x="28.2093%" y="357" width="0.6541%" height="15" fill="rgb(232,33,43)" fg:x="345" fg:w="8"/><text x="28.4593%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.65%)</title><rect x="28.2093%" y="341" width="0.6541%" height="15" fill="rgb(209,8,3)" fg:x="345" fg:w="8"/><text x="28.4593%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="28.7817%" y="325" width="0.0818%" height="15" fill="rgb(214,25,53)" fg:x="352" fg:w="1"/><text x="29.0317%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="28.7817%" y="309" width="0.0818%" height="15" fill="rgb(254,186,54)" fg:x="352" fg:w="1"/><text x="29.0317%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.7817%" y="293" width="0.0818%" height="15" fill="rgb(208,174,49)" fg:x="352" fg:w="1"/><text x="29.0317%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.7817%" y="277" width="0.0818%" height="15" fill="rgb(233,191,51)" fg:x="352" fg:w="1"/><text x="29.0317%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.1905%" y="341" width="0.0818%" height="15" fill="rgb(222,134,10)" fg:x="357" fg:w="1"/><text x="29.4405%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.1905%" y="325" width="0.0818%" height="15" fill="rgb(230,226,20)" fg:x="357" fg:w="1"/><text x="29.4405%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="29.2723%" y="309" width="0.0818%" height="15" fill="rgb(251,111,25)" fg:x="358" fg:w="1"/><text x="29.5223%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.2723%" y="293" width="0.0818%" height="15" fill="rgb(224,40,46)" fg:x="358" fg:w="1"/><text x="29.5223%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="29.1905%" y="357" width="0.2453%" height="15" fill="rgb(236,108,47)" fg:x="357" fg:w="3"/><text x="29.4405%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="29.2723%" y="341" width="0.1635%" height="15" fill="rgb(234,93,0)" fg:x="358" fg:w="2"/><text x="29.5223%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="29.2723%" y="325" width="0.1635%" height="15" fill="rgb(224,213,32)" fg:x="358" fg:w="2"/><text x="29.5223%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.3540%" y="309" width="0.0818%" height="15" fill="rgb(251,11,48)" fg:x="359" fg:w="1"/><text x="29.6040%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="29.3540%" y="293" width="0.0818%" height="15" fill="rgb(236,173,5)" fg:x="359" fg:w="1"/><text x="29.6040%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="29.3540%" y="277" width="0.0818%" height="15" fill="rgb(230,95,12)" fg:x="359" fg:w="1"/><text x="29.6040%" y="287.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (2 samples, 0.16%)</title><rect x="29.4358%" y="357" width="0.1635%" height="15" fill="rgb(232,209,1)" fg:x="360" fg:w="2"/><text x="29.6858%" y="367.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="29.5176%" y="341" width="0.0818%" height="15" fill="rgb(232,6,1)" fg:x="361" fg:w="1"/><text x="29.7676%" y="351.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="29.5176%" y="325" width="0.0818%" height="15" fill="rgb(210,224,50)" fg:x="361" fg:w="1"/><text x="29.7676%" y="335.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="29.5176%" y="309" width="0.0818%" height="15" fill="rgb(228,127,35)" fg:x="361" fg:w="1"/><text x="29.7676%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="29.5176%" y="293" width="0.0818%" height="15" fill="rgb(245,102,45)" fg:x="361" fg:w="1"/><text x="29.7676%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="29.5176%" y="277" width="0.0818%" height="15" fill="rgb(214,1,49)" fg:x="361" fg:w="1"/><text x="29.7676%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.5176%" y="261" width="0.0818%" height="15" fill="rgb(226,163,40)" fg:x="361" fg:w="1"/><text x="29.7676%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5176%" y="245" width="0.0818%" height="15" fill="rgb(239,212,28)" fg:x="361" fg:w="1"/><text x="29.7676%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.6811%" y="309" width="0.1635%" height="15" fill="rgb(220,20,13)" fg:x="363" fg:w="2"/><text x="29.9311%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="29.6811%" y="293" width="0.1635%" height="15" fill="rgb(210,164,35)" fg:x="363" fg:w="2"/><text x="29.9311%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="29.7629%" y="277" width="0.0818%" height="15" fill="rgb(248,109,41)" fg:x="364" fg:w="1"/><text x="30.0129%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.7629%" y="261" width="0.0818%" height="15" fill="rgb(238,23,50)" fg:x="364" fg:w="1"/><text x="30.0129%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="29.7629%" y="245" width="0.0818%" height="15" fill="rgb(211,48,49)" fg:x="364" fg:w="1"/><text x="30.0129%" y="255.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="29.7629%" y="229" width="0.0818%" height="15" fill="rgb(223,36,21)" fg:x="364" fg:w="1"/><text x="30.0129%" y="239.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="29.7629%" y="213" width="0.0818%" height="15" fill="rgb(207,123,46)" fg:x="364" fg:w="1"/><text x="30.0129%" y="223.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="29.7629%" y="197" width="0.0818%" height="15" fill="rgb(240,218,32)" fg:x="364" fg:w="1"/><text x="30.0129%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.7629%" y="181" width="0.0818%" height="15" fill="rgb(252,5,43)" fg:x="364" fg:w="1"/><text x="30.0129%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="29.7629%" y="165" width="0.0818%" height="15" fill="rgb(252,84,19)" fg:x="364" fg:w="1"/><text x="30.0129%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="29.7629%" y="149" width="0.0818%" height="15" fill="rgb(243,152,39)" fg:x="364" fg:w="1"/><text x="30.0129%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="29.7629%" y="133" width="0.0818%" height="15" fill="rgb(234,160,15)" fg:x="364" fg:w="1"/><text x="30.0129%" y="143.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="29.7629%" y="117" width="0.0818%" height="15" fill="rgb(237,34,20)" fg:x="364" fg:w="1"/><text x="30.0129%" y="127.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="29.7629%" y="101" width="0.0818%" height="15" fill="rgb(229,97,13)" fg:x="364" fg:w="1"/><text x="30.0129%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.7629%" y="85" width="0.0818%" height="15" fill="rgb(234,71,50)" fg:x="364" fg:w="1"/><text x="30.0129%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.9264%" y="245" width="0.0818%" height="15" fill="rgb(253,155,4)" fg:x="366" fg:w="1"/><text x="30.1764%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.0082%" y="245" width="0.0818%" height="15" fill="rgb(222,185,37)" fg:x="367" fg:w="1"/><text x="30.2582%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.0082%" y="229" width="0.0818%" height="15" fill="rgb(251,177,13)" fg:x="367" fg:w="1"/><text x="30.2582%" y="239.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (8 samples, 0.65%)</title><rect x="29.5993%" y="357" width="0.6541%" height="15" fill="rgb(250,179,40)" fg:x="362" fg:w="8"/><text x="29.8493%" y="367.50"></text></g><g><title>kernel::model::props::load_props (7 samples, 0.57%)</title><rect x="29.6811%" y="341" width="0.5724%" height="15" fill="rgb(242,44,2)" fg:x="363" fg:w="7"/><text x="29.9311%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="29.6811%" y="325" width="0.5724%" height="15" fill="rgb(216,177,13)" fg:x="363" fg:w="7"/><text x="29.9311%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (5 samples, 0.41%)</title><rect x="29.8446%" y="309" width="0.4088%" height="15" fill="rgb(216,106,43)" fg:x="365" fg:w="5"/><text x="30.0946%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="29.9264%" y="293" width="0.3271%" height="15" fill="rgb(216,183,2)" fg:x="366" fg:w="4"/><text x="30.1764%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.33%)</title><rect x="29.9264%" y="277" width="0.3271%" height="15" fill="rgb(249,75,3)" fg:x="366" fg:w="4"/><text x="30.1764%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="29.9264%" y="261" width="0.3271%" height="15" fill="rgb(219,67,39)" fg:x="366" fg:w="4"/><text x="30.1764%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="30.0899%" y="245" width="0.1635%" height="15" fill="rgb(253,228,2)" fg:x="368" fg:w="2"/><text x="30.3399%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.0899%" y="229" width="0.1635%" height="15" fill="rgb(235,138,27)" fg:x="368" fg:w="2"/><text x="30.3399%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="30.3352%" y="341" width="0.1635%" height="15" fill="rgb(236,97,51)" fg:x="371" fg:w="2"/><text x="30.5852%" y="351.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="30.3352%" y="325" width="0.1635%" height="15" fill="rgb(240,80,30)" fg:x="371" fg:w="2"/><text x="30.5852%" y="335.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="30.4988%" y="341" width="0.0818%" height="15" fill="rgb(230,178,19)" fg:x="373" fg:w="1"/><text x="30.7488%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.5805%" y="245" width="0.0818%" height="15" fill="rgb(210,190,27)" fg:x="374" fg:w="1"/><text x="30.8305%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="30.5805%" y="229" width="0.0818%" height="15" fill="rgb(222,107,31)" fg:x="374" fg:w="1"/><text x="30.8305%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.6623%" y="245" width="0.0818%" height="15" fill="rgb(216,127,34)" fg:x="375" fg:w="1"/><text x="30.9123%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="30.6623%" y="229" width="0.0818%" height="15" fill="rgb(234,116,52)" fg:x="375" fg:w="1"/><text x="30.9123%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="30.6623%" y="213" width="0.0818%" height="15" fill="rgb(222,124,15)" fg:x="375" fg:w="1"/><text x="30.9123%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.65%)</title><rect x="30.2535%" y="357" width="0.6541%" height="15" fill="rgb(231,179,28)" fg:x="370" fg:w="8"/><text x="30.5035%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="30.5805%" y="341" width="0.3271%" height="15" fill="rgb(226,93,45)" fg:x="374" fg:w="4"/><text x="30.8305%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="30.5805%" y="325" width="0.3271%" height="15" fill="rgb(215,8,51)" fg:x="374" fg:w="4"/><text x="30.8305%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.33%)</title><rect x="30.5805%" y="309" width="0.3271%" height="15" fill="rgb(223,106,5)" fg:x="374" fg:w="4"/><text x="30.8305%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="30.5805%" y="293" width="0.3271%" height="15" fill="rgb(250,191,5)" fg:x="374" fg:w="4"/><text x="30.8305%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.33%)</title><rect x="30.5805%" y="277" width="0.3271%" height="15" fill="rgb(242,132,44)" fg:x="374" fg:w="4"/><text x="30.8305%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="30.5805%" y="261" width="0.3271%" height="15" fill="rgb(251,152,29)" fg:x="374" fg:w="4"/><text x="30.8305%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="30.7441%" y="245" width="0.1635%" height="15" fill="rgb(218,179,5)" fg:x="376" fg:w="2"/><text x="30.9941%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="30.7441%" y="229" width="0.1635%" height="15" fill="rgb(227,67,19)" fg:x="376" fg:w="2"/><text x="30.9941%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="30.9076%" y="325" width="0.0818%" height="15" fill="rgb(233,119,31)" fg:x="378" fg:w="1"/><text x="31.1576%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="30.9076%" y="309" width="0.0818%" height="15" fill="rgb(241,120,22)" fg:x="378" fg:w="1"/><text x="31.1576%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="30.9894%" y="261" width="0.1635%" height="15" fill="rgb(224,102,30)" fg:x="379" fg:w="2"/><text x="31.2394%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.0711%" y="245" width="0.0818%" height="15" fill="rgb(210,164,37)" fg:x="380" fg:w="1"/><text x="31.3211%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.0711%" y="229" width="0.0818%" height="15" fill="rgb(226,191,16)" fg:x="380" fg:w="1"/><text x="31.3211%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.0711%" y="213" width="0.0818%" height="15" fill="rgb(214,40,45)" fg:x="380" fg:w="1"/><text x="31.3211%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.0711%" y="197" width="0.0818%" height="15" fill="rgb(244,29,26)" fg:x="380" fg:w="1"/><text x="31.3211%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.0711%" y="181" width="0.0818%" height="15" fill="rgb(216,16,5)" fg:x="380" fg:w="1"/><text x="31.3211%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.0711%" y="165" width="0.0818%" height="15" fill="rgb(249,76,35)" fg:x="380" fg:w="1"/><text x="31.3211%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.0711%" y="149" width="0.0818%" height="15" fill="rgb(207,11,44)" fg:x="380" fg:w="1"/><text x="31.3211%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.0711%" y="133" width="0.0818%" height="15" fill="rgb(228,190,49)" fg:x="380" fg:w="1"/><text x="31.3211%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.0711%" y="117" width="0.0818%" height="15" fill="rgb(214,173,12)" fg:x="380" fg:w="1"/><text x="31.3211%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.0711%" y="101" width="0.0818%" height="15" fill="rgb(218,26,35)" fg:x="380" fg:w="1"/><text x="31.3211%" y="111.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.0711%" y="85" width="0.0818%" height="15" fill="rgb(220,200,19)" fg:x="380" fg:w="1"/><text x="31.3211%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0711%" y="69" width="0.0818%" height="15" fill="rgb(239,95,49)" fg:x="380" fg:w="1"/><text x="31.3211%" y="79.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="30.9894%" y="293" width="0.2453%" height="15" fill="rgb(235,85,53)" fg:x="379" fg:w="3"/><text x="31.2394%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="30.9894%" y="277" width="0.2453%" height="15" fill="rgb(233,133,31)" fg:x="379" fg:w="3"/><text x="31.2394%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.1529%" y="261" width="0.0818%" height="15" fill="rgb(218,25,20)" fg:x="381" fg:w="1"/><text x="31.4029%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="31.2347%" y="293" width="0.0818%" height="15" fill="rgb(252,210,38)" fg:x="382" fg:w="1"/><text x="31.4847%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.2347%" y="277" width="0.0818%" height="15" fill="rgb(242,134,21)" fg:x="382" fg:w="1"/><text x="31.4847%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (3 samples, 0.25%)</title><rect x="31.3164%" y="229" width="0.2453%" height="15" fill="rgb(213,28,48)" fg:x="383" fg:w="3"/><text x="31.5664%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="31.3982%" y="213" width="0.1635%" height="15" fill="rgb(250,196,2)" fg:x="384" fg:w="2"/><text x="31.6482%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="31.4800%" y="197" width="0.0818%" height="15" fill="rgb(227,5,17)" fg:x="385" fg:w="1"/><text x="31.7300%" y="207.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (6 samples, 0.49%)</title><rect x="31.3164%" y="293" width="0.4906%" height="15" fill="rgb(221,226,24)" fg:x="383" fg:w="6"/><text x="31.5664%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="31.3164%" y="277" width="0.4906%" height="15" fill="rgb(211,5,48)" fg:x="383" fg:w="6"/><text x="31.5664%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (6 samples, 0.49%)</title><rect x="31.3164%" y="261" width="0.4906%" height="15" fill="rgb(219,150,6)" fg:x="383" fg:w="6"/><text x="31.5664%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="31.3164%" y="245" width="0.4906%" height="15" fill="rgb(251,46,16)" fg:x="383" fg:w="6"/><text x="31.5664%" y="255.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.25%)</title><rect x="31.5617%" y="229" width="0.2453%" height="15" fill="rgb(220,204,40)" fg:x="386" fg:w="3"/><text x="31.8117%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="31.5617%" y="213" width="0.2453%" height="15" fill="rgb(211,85,2)" fg:x="386" fg:w="3"/><text x="31.8117%" y="223.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="31.7253%" y="197" width="0.0818%" height="15" fill="rgb(229,17,7)" fg:x="388" fg:w="1"/><text x="31.9753%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (11 samples, 0.90%)</title><rect x="30.9894%" y="309" width="0.8994%" height="15" fill="rgb(239,72,28)" fg:x="379" fg:w="11"/><text x="31.2394%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScope&lt;T&gt;::new (1 samples, 0.08%)</title><rect x="31.8070%" y="293" width="0.0818%" height="15" fill="rgb(230,47,54)" fg:x="389" fg:w="1"/><text x="32.0570%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (13 samples, 1.06%)</title><rect x="30.9076%" y="357" width="1.0630%" height="15" fill="rgb(214,50,8)" fg:x="378" fg:w="13"/><text x="31.1576%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (13 samples, 1.06%)</title><rect x="30.9076%" y="341" width="1.0630%" height="15" fill="rgb(216,198,43)" fg:x="378" fg:w="13"/><text x="31.1576%" y="351.50"></text></g><g><title>kernel::model::props::load_props (12 samples, 0.98%)</title><rect x="30.9894%" y="325" width="0.9812%" height="15" fill="rgb(234,20,35)" fg:x="379" fg:w="12"/><text x="31.2394%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.8888%" y="309" width="0.0818%" height="15" fill="rgb(254,45,19)" fg:x="390" fg:w="1"/><text x="32.1388%" y="319.50"></text></g><g><title>kernel::model::EntityPtr::key (2 samples, 0.16%)</title><rect x="31.9706%" y="357" width="0.1635%" height="15" fill="rgb(219,14,44)" fg:x="391" fg:w="2"/><text x="32.2206%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.0523%" y="341" width="0.0818%" height="15" fill="rgb(217,220,26)" fg:x="392" fg:w="1"/><text x="32.3023%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="32.0523%" y="325" width="0.0818%" height="15" fill="rgb(213,158,28)" fg:x="392" fg:w="1"/><text x="32.3023%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="32.0523%" y="309" width="0.0818%" height="15" fill="rgb(252,51,52)" fg:x="392" fg:w="1"/><text x="32.3023%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="32.0523%" y="293" width="0.0818%" height="15" fill="rgb(246,89,16)" fg:x="392" fg:w="1"/><text x="32.3023%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="32.0523%" y="277" width="0.0818%" height="15" fill="rgb(216,158,49)" fg:x="392" fg:w="1"/><text x="32.3023%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="32.0523%" y="261" width="0.0818%" height="15" fill="rgb(236,107,19)" fg:x="392" fg:w="1"/><text x="32.3023%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="32.0523%" y="245" width="0.0818%" height="15" fill="rgb(228,185,30)" fg:x="392" fg:w="1"/><text x="32.3023%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="32.0523%" y="229" width="0.0818%" height="15" fill="rgb(246,134,8)" fg:x="392" fg:w="1"/><text x="32.3023%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="32.0523%" y="213" width="0.0818%" height="15" fill="rgb(214,143,50)" fg:x="392" fg:w="1"/><text x="32.3023%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="32.0523%" y="197" width="0.0818%" height="15" fill="rgb(228,75,8)" fg:x="392" fg:w="1"/><text x="32.3023%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="32.0523%" y="181" width="0.0818%" height="15" fill="rgb(207,175,4)" fg:x="392" fg:w="1"/><text x="32.3023%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.0523%" y="165" width="0.0818%" height="15" fill="rgb(205,108,24)" fg:x="392" fg:w="1"/><text x="32.3023%" y="175.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="32.2976%" y="309" width="0.0818%" height="15" fill="rgb(244,120,49)" fg:x="395" fg:w="1"/><text x="32.5476%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="32.2976%" y="293" width="0.0818%" height="15" fill="rgb(223,47,38)" fg:x="395" fg:w="1"/><text x="32.5476%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="32.3794%" y="277" width="0.0818%" height="15" fill="rgb(229,179,11)" fg:x="396" fg:w="1"/><text x="32.6294%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.3794%" y="261" width="0.0818%" height="15" fill="rgb(231,122,1)" fg:x="396" fg:w="1"/><text x="32.6294%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.3794%" y="245" width="0.0818%" height="15" fill="rgb(245,119,9)" fg:x="396" fg:w="1"/><text x="32.6294%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.3794%" y="229" width="0.0818%" height="15" fill="rgb(241,163,25)" fg:x="396" fg:w="1"/><text x="32.6294%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (4 samples, 0.33%)</title><rect x="32.4612%" y="197" width="0.3271%" height="15" fill="rgb(217,214,3)" fg:x="397" fg:w="4"/><text x="32.7112%" y="207.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="32.6247%" y="181" width="0.1635%" height="15" fill="rgb(240,86,28)" fg:x="399" fg:w="2"/><text x="32.8747%" y="191.50"></text></g><g><title>regex_automata::util::determinize::state::State::iter_nfa_state_ids (1 samples, 0.08%)</title><rect x="32.7065%" y="165" width="0.0818%" height="15" fill="rgb(215,47,9)" fg:x="400" fg:w="1"/><text x="32.9565%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.49%)</title><rect x="32.4612%" y="277" width="0.4906%" height="15" fill="rgb(252,25,45)" fg:x="397" fg:w="6"/><text x="32.7112%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="32.4612%" y="261" width="0.4906%" height="15" fill="rgb(251,164,9)" fg:x="397" fg:w="6"/><text x="32.7112%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (6 samples, 0.49%)</title><rect x="32.4612%" y="245" width="0.4906%" height="15" fill="rgb(233,194,0)" fg:x="397" fg:w="6"/><text x="32.7112%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (6 samples, 0.49%)</title><rect x="32.4612%" y="229" width="0.4906%" height="15" fill="rgb(249,111,24)" fg:x="397" fg:w="6"/><text x="32.7112%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (6 samples, 0.49%)</title><rect x="32.4612%" y="213" width="0.4906%" height="15" fill="rgb(250,223,3)" fg:x="397" fg:w="6"/><text x="32.7112%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="32.7882%" y="197" width="0.1635%" height="15" fill="rgb(236,178,37)" fg:x="401" fg:w="2"/><text x="33.0382%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.8700%" y="181" width="0.0818%" height="15" fill="rgb(241,158,50)" fg:x="402" fg:w="1"/><text x="33.1200%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9518%" y="277" width="0.0818%" height="15" fill="rgb(213,121,41)" fg:x="403" fg:w="1"/><text x="33.2018%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="33.0335%" y="277" width="0.0818%" height="15" fill="rgb(240,92,3)" fg:x="404" fg:w="1"/><text x="33.2835%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="33.0335%" y="261" width="0.0818%" height="15" fill="rgb(205,123,3)" fg:x="404" fg:w="1"/><text x="33.2835%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.0335%" y="245" width="0.0818%" height="15" fill="rgb(205,97,47)" fg:x="404" fg:w="1"/><text x="33.2835%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.0335%" y="229" width="0.0818%" height="15" fill="rgb(247,152,14)" fg:x="404" fg:w="1"/><text x="33.2835%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.0335%" y="213" width="0.0818%" height="15" fill="rgb(248,195,53)" fg:x="404" fg:w="1"/><text x="33.2835%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.25%)</title><rect x="33.1153%" y="229" width="0.2453%" height="15" fill="rgb(226,201,16)" fg:x="405" fg:w="3"/><text x="33.3653%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="33.1153%" y="213" width="0.2453%" height="15" fill="rgb(205,98,0)" fg:x="405" fg:w="3"/><text x="33.3653%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="33.2788%" y="197" width="0.0818%" height="15" fill="rgb(214,191,48)" fg:x="407" fg:w="1"/><text x="33.5288%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="33.4424%" y="213" width="0.1635%" height="15" fill="rgb(237,112,39)" fg:x="409" fg:w="2"/><text x="33.6924%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.14%)</title><rect x="33.6059%" y="213" width="1.1447%" height="15" fill="rgb(247,203,27)" fg:x="411" fg:w="14"/><text x="33.8559%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.14%)</title><rect x="33.6059%" y="197" width="1.1447%" height="15" fill="rgb(235,124,28)" fg:x="411" fg:w="14"/><text x="33.8559%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="34.5871%" y="181" width="0.1635%" height="15" fill="rgb(208,207,46)" fg:x="423" fg:w="2"/><text x="34.8371%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="34.7506%" y="213" width="0.3271%" height="15" fill="rgb(234,176,4)" fg:x="425" fg:w="4"/><text x="35.0006%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.33%)</title><rect x="34.7506%" y="197" width="0.3271%" height="15" fill="rgb(230,133,28)" fg:x="425" fg:w="4"/><text x="35.0006%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="34.9959%" y="181" width="0.0818%" height="15" fill="rgb(211,137,40)" fg:x="428" fg:w="1"/><text x="35.2459%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="35.0777%" y="213" width="0.1635%" height="15" fill="rgb(254,35,13)" fg:x="429" fg:w="2"/><text x="35.3277%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="35.1594%" y="197" width="0.0818%" height="15" fill="rgb(225,49,51)" fg:x="430" fg:w="1"/><text x="35.4094%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="35.1594%" y="181" width="0.0818%" height="15" fill="rgb(251,10,15)" fg:x="430" fg:w="1"/><text x="35.4094%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="35.1594%" y="165" width="0.0818%" height="15" fill="rgb(228,207,15)" fg:x="430" fg:w="1"/><text x="35.4094%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.1594%" y="149" width="0.0818%" height="15" fill="rgb(241,99,19)" fg:x="430" fg:w="1"/><text x="35.4094%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.1594%" y="133" width="0.0818%" height="15" fill="rgb(207,104,49)" fg:x="430" fg:w="1"/><text x="35.4094%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1594%" y="117" width="0.0818%" height="15" fill="rgb(234,99,18)" fg:x="430" fg:w="1"/><text x="35.4094%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="35.2412%" y="165" width="0.0818%" height="15" fill="rgb(213,191,49)" fg:x="431" fg:w="1"/><text x="35.4912%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="35.3230%" y="165" width="0.0818%" height="15" fill="rgb(210,226,19)" fg:x="432" fg:w="1"/><text x="35.5730%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="35.8136%" y="149" width="0.1635%" height="15" fill="rgb(229,97,18)" fg:x="438" fg:w="2"/><text x="36.0636%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.8953%" y="133" width="0.0818%" height="15" fill="rgb(211,167,15)" fg:x="439" fg:w="1"/><text x="36.1453%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.8953%" y="117" width="0.0818%" height="15" fill="rgb(210,169,34)" fg:x="439" fg:w="1"/><text x="36.1453%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.8953%" y="101" width="0.0818%" height="15" fill="rgb(241,121,31)" fg:x="439" fg:w="1"/><text x="36.1453%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.0589%" y="117" width="0.0818%" height="15" fill="rgb(232,40,11)" fg:x="441" fg:w="1"/><text x="36.3089%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.0589%" y="101" width="0.0818%" height="15" fill="rgb(205,86,26)" fg:x="441" fg:w="1"/><text x="36.3089%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.0589%" y="85" width="0.0818%" height="15" fill="rgb(231,126,28)" fg:x="441" fg:w="1"/><text x="36.3089%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.25%)</title><rect x="35.9771%" y="149" width="0.2453%" height="15" fill="rgb(219,221,18)" fg:x="440" fg:w="3"/><text x="36.2271%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="36.0589%" y="133" width="0.1635%" height="15" fill="rgb(211,40,0)" fg:x="441" fg:w="2"/><text x="36.3089%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="36.1406%" y="117" width="0.0818%" height="15" fill="rgb(239,85,43)" fg:x="442" fg:w="1"/><text x="36.3906%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.1406%" y="101" width="0.0818%" height="15" fill="rgb(231,55,21)" fg:x="442" fg:w="1"/><text x="36.3906%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="36.2224%" y="117" width="0.0818%" height="15" fill="rgb(225,184,43)" fg:x="443" fg:w="1"/><text x="36.4724%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="36.2224%" y="101" width="0.0818%" height="15" fill="rgb(251,158,41)" fg:x="443" fg:w="1"/><text x="36.4724%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.2224%" y="85" width="0.0818%" height="15" fill="rgb(234,159,37)" fg:x="443" fg:w="1"/><text x="36.4724%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="36.2224%" y="149" width="0.1635%" height="15" fill="rgb(216,204,22)" fg:x="443" fg:w="2"/><text x="36.4724%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="36.2224%" y="133" width="0.1635%" height="15" fill="rgb(214,17,3)" fg:x="443" fg:w="2"/><text x="36.4724%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="36.3042%" y="117" width="0.0818%" height="15" fill="rgb(212,111,17)" fg:x="444" fg:w="1"/><text x="36.5542%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3859%" y="117" width="0.0818%" height="15" fill="rgb(221,157,24)" fg:x="445" fg:w="1"/><text x="36.6359%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (71 samples, 5.81%)</title><rect x="36.3859%" y="149" width="5.8054%" height="15" fill="rgb(252,16,13)" fg:x="445" fg:w="71"/><text x="36.6359%" y="159.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (71 samples, 5.81%)</title><rect x="36.3859%" y="133" width="5.8054%" height="15" fill="rgb(221,62,2)" fg:x="445" fg:w="71"/><text x="36.6359%" y="143.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (70 samples, 5.72%)</title><rect x="36.4677%" y="117" width="5.7236%" height="15" fill="rgb(247,87,22)" fg:x="446" fg:w="70"/><text x="36.7177%" y="127.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.25%)</title><rect x="42.1913%" y="149" width="0.2453%" height="15" fill="rgb(215,73,9)" fg:x="516" fg:w="3"/><text x="42.4413%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (89 samples, 7.28%)</title><rect x="35.2412%" y="197" width="7.2772%" height="15" fill="rgb(207,175,33)" fg:x="431" fg:w="89"/><text x="35.4912%" y="207.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (89 samples, 7.28%)</title><rect x="35.2412%" y="181" width="7.2772%" height="15" fill="rgb(243,129,54)" fg:x="431" fg:w="89"/><text x="35.4912%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (87 samples, 7.11%)</title><rect x="35.4047%" y="165" width="7.1137%" height="15" fill="rgb(227,119,45)" fg:x="433" fg:w="87"/><text x="35.6547%" y="175.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="42.4366%" y="149" width="0.0818%" height="15" fill="rgb(205,109,36)" fg:x="519" fg:w="1"/><text x="42.6866%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.4366%" y="133" width="0.0818%" height="15" fill="rgb(205,6,39)" fg:x="519" fg:w="1"/><text x="42.6866%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.5184%" y="181" width="0.0818%" height="15" fill="rgb(221,32,16)" fg:x="520" fg:w="1"/><text x="42.7684%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="42.6002%" y="181" width="0.1635%" height="15" fill="rgb(228,144,50)" fg:x="521" fg:w="2"/><text x="42.8502%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.6819%" y="165" width="0.0818%" height="15" fill="rgb(229,201,53)" fg:x="522" fg:w="1"/><text x="42.9319%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.6819%" y="149" width="0.0818%" height="15" fill="rgb(249,153,27)" fg:x="522" fg:w="1"/><text x="42.9319%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="42.5184%" y="197" width="0.3271%" height="15" fill="rgb(227,106,25)" fg:x="520" fg:w="4"/><text x="42.7684%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="42.7637%" y="181" width="0.0818%" height="15" fill="rgb(230,65,29)" fg:x="523" fg:w="1"/><text x="43.0137%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="42.8455%" y="197" width="0.0818%" height="15" fill="rgb(221,57,46)" fg:x="524" fg:w="1"/><text x="43.0955%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (95 samples, 7.77%)</title><rect x="35.2412%" y="213" width="7.7678%" height="15" fill="rgb(229,161,17)" fg:x="431" fg:w="95"/><text x="35.4912%" y="223.50">regex_autom..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="42.9272%" y="197" width="0.0818%" height="15" fill="rgb(222,213,11)" fg:x="525" fg:w="1"/><text x="43.1772%" y="207.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="43.0090%" y="213" width="0.0818%" height="15" fill="rgb(235,35,13)" fg:x="526" fg:w="1"/><text x="43.2590%" y="223.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="43.0090%" y="197" width="0.0818%" height="15" fill="rgb(233,158,34)" fg:x="526" fg:w="1"/><text x="43.2590%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (120 samples, 9.81%)</title><rect x="33.3606%" y="229" width="9.8119%" height="15" fill="rgb(215,151,48)" fg:x="408" fg:w="120"/><text x="33.6106%" y="239.50">regex_automata..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="43.0908%" y="213" width="0.0818%" height="15" fill="rgb(229,84,14)" fg:x="527" fg:w="1"/><text x="43.3408%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.74%)</title><rect x="43.1725%" y="229" width="0.7359%" height="15" fill="rgb(229,68,14)" fg:x="528" fg:w="9"/><text x="43.4225%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.74%)</title><rect x="43.1725%" y="213" width="0.7359%" height="15" fill="rgb(243,106,26)" fg:x="528" fg:w="9"/><text x="43.4225%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (8 samples, 0.65%)</title><rect x="43.2543%" y="197" width="0.6541%" height="15" fill="rgb(206,45,38)" fg:x="529" fg:w="8"/><text x="43.5043%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (7 samples, 0.57%)</title><rect x="43.3361%" y="181" width="0.5724%" height="15" fill="rgb(226,6,15)" fg:x="530" fg:w="7"/><text x="43.5861%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.41%)</title><rect x="43.4996%" y="165" width="0.4088%" height="15" fill="rgb(232,22,54)" fg:x="532" fg:w="5"/><text x="43.7496%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.41%)</title><rect x="43.4996%" y="149" width="0.4088%" height="15" fill="rgb(229,222,32)" fg:x="532" fg:w="5"/><text x="43.7496%" y="159.50"></text></g><g><title>__libc_malloc (5 samples, 0.41%)</title><rect x="43.4996%" y="133" width="0.4088%" height="15" fill="rgb(228,62,29)" fg:x="532" fg:w="5"/><text x="43.7496%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (134 samples, 10.96%)</title><rect x="33.1153%" y="277" width="10.9567%" height="15" fill="rgb(251,103,34)" fg:x="405" fg:w="134"/><text x="33.3653%" y="287.50">regex::regex::st..</text></g><g><title>regex::builders::Builder::build_one_string (134 samples, 10.96%)</title><rect x="33.1153%" y="261" width="10.9567%" height="15" fill="rgb(233,12,30)" fg:x="405" fg:w="134"/><text x="33.3653%" y="271.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::build (134 samples, 10.96%)</title><rect x="33.1153%" y="245" width="10.9567%" height="15" fill="rgb(238,52,0)" fg:x="405" fg:w="134"/><text x="33.3653%" y="255.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="43.9084%" y="229" width="0.1635%" height="15" fill="rgb(223,98,5)" fg:x="537" fg:w="2"/><text x="44.1584%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="43.9084%" y="213" width="0.1635%" height="15" fill="rgb(228,75,37)" fg:x="537" fg:w="2"/><text x="44.1584%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="43.9902%" y="197" width="0.0818%" height="15" fill="rgb(205,115,49)" fg:x="538" fg:w="1"/><text x="44.2402%" y="207.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="43.9902%" y="181" width="0.0818%" height="15" fill="rgb(250,154,43)" fg:x="538" fg:w="1"/><text x="44.2402%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="44.3173%" y="165" width="0.0818%" height="15" fill="rgb(226,43,29)" fg:x="542" fg:w="1"/><text x="44.5673%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.25%)</title><rect x="44.2355%" y="197" width="0.2453%" height="15" fill="rgb(249,228,39)" fg:x="541" fg:w="3"/><text x="44.4855%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="44.3173%" y="181" width="0.1635%" height="15" fill="rgb(216,79,43)" fg:x="542" fg:w="2"/><text x="44.5673%" y="191.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="44.3990%" y="165" width="0.0818%" height="15" fill="rgb(228,95,12)" fg:x="543" fg:w="1"/><text x="44.6490%" y="175.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="44.0720%" y="213" width="0.5724%" height="15" fill="rgb(249,221,15)" fg:x="539" fg:w="7"/><text x="44.3220%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="44.4808%" y="197" width="0.1635%" height="15" fill="rgb(233,34,13)" fg:x="544" fg:w="2"/><text x="44.7308%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="44.0720%" y="229" width="0.6541%" height="15" fill="rgb(214,103,39)" fg:x="539" fg:w="8"/><text x="44.3220%" y="239.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="44.6443%" y="213" width="0.0818%" height="15" fill="rgb(251,126,39)" fg:x="546" fg:w="1"/><text x="44.8943%" y="223.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (153 samples, 12.51%)</title><rect x="32.3794%" y="293" width="12.5102%" height="15" fill="rgb(214,216,36)" fg:x="396" fg:w="153"/><text x="32.6294%" y="303.50">indefinite::helper:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.82%)</title><rect x="44.0720%" y="277" width="0.8177%" height="15" fill="rgb(220,221,8)" fg:x="539" fg:w="10"/><text x="44.3220%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.82%)</title><rect x="44.0720%" y="261" width="0.8177%" height="15" fill="rgb(240,216,3)" fg:x="539" fg:w="10"/><text x="44.3220%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.82%)</title><rect x="44.0720%" y="245" width="0.8177%" height="15" fill="rgb(232,218,17)" fg:x="539" fg:w="10"/><text x="44.3220%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (2 samples, 0.16%)</title><rect x="44.7261%" y="229" width="0.1635%" height="15" fill="rgb(229,163,45)" fg:x="547" fg:w="2"/><text x="44.9761%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="44.7261%" y="213" width="0.1635%" height="15" fill="rgb(231,110,42)" fg:x="547" fg:w="2"/><text x="44.9761%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="44.7261%" y="197" width="0.1635%" height="15" fill="rgb(208,170,48)" fg:x="547" fg:w="2"/><text x="44.9761%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.8896%" y="245" width="0.0818%" height="15" fill="rgb(239,116,25)" fg:x="549" fg:w="1"/><text x="45.1396%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="44.9714%" y="229" width="0.0818%" height="15" fill="rgb(219,200,50)" fg:x="550" fg:w="1"/><text x="45.2214%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.9714%" y="213" width="0.0818%" height="15" fill="rgb(245,200,0)" fg:x="550" fg:w="1"/><text x="45.2214%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="45.0531%" y="229" width="0.0818%" height="15" fill="rgb(245,119,33)" fg:x="551" fg:w="1"/><text x="45.3031%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.33%)</title><rect x="44.8896%" y="277" width="0.3271%" height="15" fill="rgb(231,125,12)" fg:x="549" fg:w="4"/><text x="45.1396%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (4 samples, 0.33%)</title><rect x="44.8896%" y="261" width="0.3271%" height="15" fill="rgb(216,96,41)" fg:x="549" fg:w="4"/><text x="45.1396%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="44.9714%" y="245" width="0.2453%" height="15" fill="rgb(248,43,45)" fg:x="550" fg:w="3"/><text x="45.2214%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="45.1349%" y="229" width="0.0818%" height="15" fill="rgb(217,222,7)" fg:x="552" fg:w="1"/><text x="45.3849%" y="239.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="45.1349%" y="213" width="0.0818%" height="15" fill="rgb(233,28,6)" fg:x="552" fg:w="1"/><text x="45.3849%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.1349%" y="197" width="0.0818%" height="15" fill="rgb(231,218,15)" fg:x="552" fg:w="1"/><text x="45.3849%" y="207.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="45.2167%" y="261" width="0.1635%" height="15" fill="rgb(226,171,48)" fg:x="553" fg:w="2"/><text x="45.4667%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="45.2167%" y="245" width="0.1635%" height="15" fill="rgb(235,201,9)" fg:x="553" fg:w="2"/><text x="45.4667%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="45.2984%" y="229" width="0.0818%" height="15" fill="rgb(217,80,15)" fg:x="554" fg:w="1"/><text x="45.5484%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="45.2984%" y="213" width="0.0818%" height="15" fill="rgb(219,152,8)" fg:x="554" fg:w="1"/><text x="45.5484%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.0343%" y="181" width="0.0818%" height="15" fill="rgb(243,107,38)" fg:x="563" fg:w="1"/><text x="46.2843%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.0343%" y="165" width="0.0818%" height="15" fill="rgb(231,17,5)" fg:x="563" fg:w="1"/><text x="46.2843%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.0343%" y="149" width="0.0818%" height="15" fill="rgb(209,25,54)" fg:x="563" fg:w="1"/><text x="46.2843%" y="159.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.06%)</title><rect x="45.2167%" y="277" width="1.0630%" height="15" fill="rgb(219,0,2)" fg:x="553" fg:w="13"/><text x="45.4667%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.90%)</title><rect x="45.3802%" y="261" width="0.8994%" height="15" fill="rgb(246,9,5)" fg:x="555" fg:w="11"/><text x="45.6302%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.90%)</title><rect x="45.3802%" y="245" width="0.8994%" height="15" fill="rgb(226,159,4)" fg:x="555" fg:w="11"/><text x="45.6302%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.90%)</title><rect x="45.3802%" y="229" width="0.8994%" height="15" fill="rgb(219,175,34)" fg:x="555" fg:w="11"/><text x="45.6302%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.82%)</title><rect x="45.4620%" y="213" width="0.8177%" height="15" fill="rgb(236,10,46)" fg:x="556" fg:w="10"/><text x="45.7120%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.82%)</title><rect x="45.4620%" y="197" width="0.8177%" height="15" fill="rgb(240,211,16)" fg:x="556" fg:w="10"/><text x="45.7120%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="46.1161%" y="181" width="0.1635%" height="15" fill="rgb(205,3,43)" fg:x="564" fg:w="2"/><text x="46.3661%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="46.1979%" y="165" width="0.0818%" height="15" fill="rgb(245,7,22)" fg:x="565" fg:w="1"/><text x="46.4479%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="46.1979%" y="149" width="0.0818%" height="15" fill="rgb(239,132,32)" fg:x="565" fg:w="1"/><text x="46.4479%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="46.2796%" y="229" width="0.2453%" height="15" fill="rgb(228,202,34)" fg:x="566" fg:w="3"/><text x="46.5296%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="46.2796%" y="213" width="0.2453%" height="15" fill="rgb(254,200,22)" fg:x="566" fg:w="3"/><text x="46.5296%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="46.3614%" y="197" width="0.1635%" height="15" fill="rgb(219,10,39)" fg:x="567" fg:w="2"/><text x="46.6114%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.4432%" y="181" width="0.0818%" height="15" fill="rgb(226,210,39)" fg:x="568" fg:w="1"/><text x="46.6932%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.5249%" y="229" width="0.0818%" height="15" fill="rgb(208,219,16)" fg:x="569" fg:w="1"/><text x="46.7749%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="46.6885%" y="197" width="0.0818%" height="15" fill="rgb(216,158,51)" fg:x="571" fg:w="1"/><text x="46.9385%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="46.6885%" y="181" width="0.0818%" height="15" fill="rgb(233,14,44)" fg:x="571" fg:w="1"/><text x="46.9385%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="46.6885%" y="165" width="0.0818%" height="15" fill="rgb(237,97,39)" fg:x="571" fg:w="1"/><text x="46.9385%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.33%)</title><rect x="46.6067%" y="229" width="0.3271%" height="15" fill="rgb(218,198,43)" fg:x="570" fg:w="4"/><text x="46.8567%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="46.6067%" y="213" width="0.3271%" height="15" fill="rgb(231,104,20)" fg:x="570" fg:w="4"/><text x="46.8567%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="46.7702%" y="197" width="0.1635%" height="15" fill="rgb(254,36,13)" fg:x="572" fg:w="2"/><text x="47.0202%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="46.7702%" y="181" width="0.1635%" height="15" fill="rgb(248,14,50)" fg:x="572" fg:w="2"/><text x="47.0202%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="46.7702%" y="165" width="0.1635%" height="15" fill="rgb(217,107,29)" fg:x="572" fg:w="2"/><text x="47.0202%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="46.7702%" y="149" width="0.1635%" height="15" fill="rgb(251,169,33)" fg:x="572" fg:w="2"/><text x="47.0202%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="46.7702%" y="133" width="0.1635%" height="15" fill="rgb(217,108,32)" fg:x="572" fg:w="2"/><text x="47.0202%" y="143.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="46.7702%" y="117" width="0.1635%" height="15" fill="rgb(219,66,42)" fg:x="572" fg:w="2"/><text x="47.0202%" y="127.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="46.9338%" y="229" width="0.0818%" height="15" fill="rgb(206,180,7)" fg:x="574" fg:w="1"/><text x="47.1838%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (24 samples, 1.96%)</title><rect x="47.0155%" y="213" width="1.9624%" height="15" fill="rgb(208,226,31)" fg:x="575" fg:w="24"/><text x="47.2655%" y="223.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.88%)</title><rect x="47.0973%" y="197" width="1.8806%" height="15" fill="rgb(218,26,49)" fg:x="576" fg:w="23"/><text x="47.3473%" y="207.50">c..</text></g><g><title>__libc_free (3 samples, 0.25%)</title><rect x="48.7326%" y="181" width="0.2453%" height="15" fill="rgb(233,197,48)" fg:x="596" fg:w="3"/><text x="48.9826%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="48.9779%" y="213" width="0.1635%" height="15" fill="rgb(252,181,51)" fg:x="599" fg:w="2"/><text x="49.2279%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="48.9779%" y="197" width="0.1635%" height="15" fill="rgb(253,90,19)" fg:x="599" fg:w="2"/><text x="49.2279%" y="207.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="49.0597%" y="181" width="0.0818%" height="15" fill="rgb(215,171,30)" fg:x="600" fg:w="1"/><text x="49.3097%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.4685%" y="181" width="0.0818%" height="15" fill="rgb(214,222,9)" fg:x="605" fg:w="1"/><text x="49.7185%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="49.5503%" y="181" width="0.0818%" height="15" fill="rgb(223,3,22)" fg:x="606" fg:w="1"/><text x="49.8003%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.5503%" y="165" width="0.0818%" height="15" fill="rgb(225,196,46)" fg:x="606" fg:w="1"/><text x="49.8003%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.5503%" y="149" width="0.0818%" height="15" fill="rgb(209,110,37)" fg:x="606" fg:w="1"/><text x="49.8003%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.5503%" y="133" width="0.0818%" height="15" fill="rgb(249,89,12)" fg:x="606" fg:w="1"/><text x="49.8003%" y="143.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="49.6321%" y="181" width="0.0818%" height="15" fill="rgb(226,27,33)" fg:x="607" fg:w="1"/><text x="49.8821%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="49.6321%" y="165" width="0.0818%" height="15" fill="rgb(213,82,22)" fg:x="607" fg:w="1"/><text x="49.8821%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.6321%" y="149" width="0.0818%" height="15" fill="rgb(248,140,0)" fg:x="607" fg:w="1"/><text x="49.8821%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.6321%" y="133" width="0.0818%" height="15" fill="rgb(228,106,3)" fg:x="607" fg:w="1"/><text x="49.8821%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.6321%" y="117" width="0.0818%" height="15" fill="rgb(209,23,37)" fg:x="607" fg:w="1"/><text x="49.8821%" y="127.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (12 samples, 0.98%)</title><rect x="49.1415%" y="213" width="0.9812%" height="15" fill="rgb(241,93,50)" fg:x="601" fg:w="12"/><text x="49.3915%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (12 samples, 0.98%)</title><rect x="49.1415%" y="197" width="0.9812%" height="15" fill="rgb(253,46,43)" fg:x="601" fg:w="12"/><text x="49.3915%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="49.7138%" y="181" width="0.4088%" height="15" fill="rgb(226,206,43)" fg:x="608" fg:w="5"/><text x="49.9638%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.41%)</title><rect x="49.7138%" y="165" width="0.4088%" height="15" fill="rgb(217,54,7)" fg:x="608" fg:w="5"/><text x="49.9638%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.41%)</title><rect x="49.7138%" y="149" width="0.4088%" height="15" fill="rgb(223,5,52)" fg:x="608" fg:w="5"/><text x="49.9638%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="50.2044%" y="149" width="0.0818%" height="15" fill="rgb(206,52,46)" fg:x="614" fg:w="1"/><text x="50.4544%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="50.6950%" y="101" width="0.1635%" height="15" fill="rgb(253,136,11)" fg:x="620" fg:w="2"/><text x="50.9450%" y="111.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.8585%" y="101" width="0.1635%" height="15" fill="rgb(208,106,33)" fg:x="622" fg:w="2"/><text x="51.1085%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.25%)</title><rect x="51.0221%" y="101" width="0.2453%" height="15" fill="rgb(206,54,4)" fg:x="624" fg:w="3"/><text x="51.2721%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.25%)</title><rect x="51.2674%" y="101" width="0.2453%" height="15" fill="rgb(213,3,15)" fg:x="627" fg:w="3"/><text x="51.5174%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.3491%" y="85" width="0.1635%" height="15" fill="rgb(252,211,39)" fg:x="628" fg:w="2"/><text x="51.5991%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.3491%" y="69" width="0.1635%" height="15" fill="rgb(223,6,36)" fg:x="628" fg:w="2"/><text x="51.5991%" y="79.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="51.3491%" y="53" width="0.1635%" height="15" fill="rgb(252,169,45)" fg:x="628" fg:w="2"/><text x="51.5991%" y="63.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.9215%" y="37" width="0.1635%" height="15" fill="rgb(212,48,26)" fg:x="635" fg:w="2"/><text x="52.1715%" y="47.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.57%)</title><rect x="51.8397%" y="69" width="0.5724%" height="15" fill="rgb(251,102,48)" fg:x="634" fg:w="7"/><text x="52.0897%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.57%)</title><rect x="51.8397%" y="53" width="0.5724%" height="15" fill="rgb(243,208,16)" fg:x="634" fg:w="7"/><text x="52.0897%" y="63.50"></text></g><g><title>realloc (4 samples, 0.33%)</title><rect x="52.0850%" y="37" width="0.3271%" height="15" fill="rgb(219,96,24)" fg:x="637" fg:w="4"/><text x="52.3350%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (19 samples, 1.55%)</title><rect x="51.5127%" y="101" width="1.5536%" height="15" fill="rgb(219,33,29)" fg:x="630" fg:w="19"/><text x="51.7627%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (19 samples, 1.55%)</title><rect x="51.5127%" y="85" width="1.5536%" height="15" fill="rgb(223,176,5)" fg:x="630" fg:w="19"/><text x="51.7627%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (8 samples, 0.65%)</title><rect x="52.4121%" y="69" width="0.6541%" height="15" fill="rgb(228,140,14)" fg:x="641" fg:w="8"/><text x="52.6621%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.9845%" y="53" width="0.0818%" height="15" fill="rgb(217,179,31)" fg:x="648" fg:w="1"/><text x="53.2345%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="53.0662%" y="101" width="0.0818%" height="15" fill="rgb(230,9,30)" fg:x="649" fg:w="1"/><text x="53.3162%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="53.0662%" y="85" width="0.0818%" height="15" fill="rgb(230,136,20)" fg:x="649" fg:w="1"/><text x="53.3162%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="53.0662%" y="69" width="0.0818%" height="15" fill="rgb(215,210,22)" fg:x="649" fg:w="1"/><text x="53.3162%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="53.0662%" y="53" width="0.0818%" height="15" fill="rgb(218,43,5)" fg:x="649" fg:w="1"/><text x="53.3162%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.1480%" y="85" width="0.0818%" height="15" fill="rgb(216,11,5)" fg:x="650" fg:w="1"/><text x="53.3980%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.1480%" y="69" width="0.0818%" height="15" fill="rgb(209,82,29)" fg:x="650" fg:w="1"/><text x="53.3980%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.1480%" y="53" width="0.0818%" height="15" fill="rgb(244,115,12)" fg:x="650" fg:w="1"/><text x="53.3980%" y="63.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (73 samples, 5.97%)</title><rect x="53.1480%" y="101" width="5.9689%" height="15" fill="rgb(222,82,18)" fg:x="650" fg:w="73"/><text x="53.3980%" y="111.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (72 samples, 5.89%)</title><rect x="53.2298%" y="85" width="5.8872%" height="15" fill="rgb(249,227,8)" fg:x="651" fg:w="72"/><text x="53.4798%" y="95.50">regex_a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (72 samples, 5.89%)</title><rect x="53.2298%" y="69" width="5.8872%" height="15" fill="rgb(253,141,45)" fg:x="651" fg:w="72"/><text x="53.4798%" y="79.50">alloc::..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.33%)</title><rect x="59.1169%" y="101" width="0.3271%" height="15" fill="rgb(234,184,4)" fg:x="723" fg:w="4"/><text x="59.3669%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.3622%" y="85" width="0.0818%" height="15" fill="rgb(218,194,23)" fg:x="726" fg:w="1"/><text x="59.6122%" y="95.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="59.4440%" y="101" width="0.0818%" height="15" fill="rgb(235,66,41)" fg:x="727" fg:w="1"/><text x="59.6940%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (118 samples, 9.65%)</title><rect x="50.2044%" y="197" width="9.6484%" height="15" fill="rgb(245,217,1)" fg:x="614" fg:w="118"/><text x="50.4544%" y="207.50">&lt;core::iter::a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (118 samples, 9.65%)</title><rect x="50.2044%" y="181" width="9.6484%" height="15" fill="rgb(229,91,1)" fg:x="614" fg:w="118"/><text x="50.4544%" y="191.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (118 samples, 9.65%)</title><rect x="50.2044%" y="165" width="9.6484%" height="15" fill="rgb(207,101,30)" fg:x="614" fg:w="118"/><text x="50.4544%" y="175.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (117 samples, 9.57%)</title><rect x="50.2862%" y="149" width="9.5666%" height="15" fill="rgb(223,82,49)" fg:x="615" fg:w="117"/><text x="50.5362%" y="159.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (117 samples, 9.57%)</title><rect x="50.2862%" y="133" width="9.5666%" height="15" fill="rgb(218,167,17)" fg:x="615" fg:w="117"/><text x="50.5362%" y="143.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (117 samples, 9.57%)</title><rect x="50.2862%" y="117" width="9.5666%" height="15" fill="rgb(208,103,14)" fg:x="615" fg:w="117"/><text x="50.5362%" y="127.50">regex_automata..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.33%)</title><rect x="59.5258%" y="101" width="0.3271%" height="15" fill="rgb(238,20,8)" fg:x="728" fg:w="4"/><text x="59.7758%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.6893%" y="85" width="0.1635%" height="15" fill="rgb(218,80,54)" fg:x="730" fg:w="2"/><text x="59.9393%" y="95.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.6893%" y="69" width="0.1635%" height="15" fill="rgb(240,144,17)" fg:x="730" fg:w="2"/><text x="59.9393%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7711%" y="53" width="0.0818%" height="15" fill="rgb(245,27,50)" fg:x="731" fg:w="1"/><text x="60.0211%" y="63.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="60.1799%" y="181" width="0.0818%" height="15" fill="rgb(251,51,7)" fg:x="736" fg:w="1"/><text x="60.4299%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="60.2617%" y="181" width="0.0818%" height="15" fill="rgb(245,217,29)" fg:x="737" fg:w="1"/><text x="60.5117%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3434%" y="181" width="0.0818%" height="15" fill="rgb(221,176,29)" fg:x="738" fg:w="1"/><text x="60.5934%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.9975%" y="133" width="0.0818%" height="15" fill="rgb(212,180,24)" fg:x="746" fg:w="1"/><text x="61.2475%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.74%)</title><rect x="60.4252%" y="181" width="0.7359%" height="15" fill="rgb(254,24,2)" fg:x="739" fg:w="9"/><text x="60.6752%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.25%)</title><rect x="60.9158%" y="165" width="0.2453%" height="15" fill="rgb(230,100,2)" fg:x="745" fg:w="3"/><text x="61.1658%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.9975%" y="149" width="0.1635%" height="15" fill="rgb(219,142,25)" fg:x="746" fg:w="2"/><text x="61.2475%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.0793%" y="133" width="0.0818%" height="15" fill="rgb(240,73,43)" fg:x="747" fg:w="1"/><text x="61.3293%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.57%)</title><rect x="61.1611%" y="181" width="0.5724%" height="15" fill="rgb(214,114,15)" fg:x="748" fg:w="7"/><text x="61.4111%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (181 samples, 14.80%)</title><rect x="47.0155%" y="229" width="14.7997%" height="15" fill="rgb(207,130,4)" fg:x="575" fg:w="181"/><text x="47.2655%" y="239.50">regex_automata::meta::s..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (143 samples, 11.69%)</title><rect x="50.1226%" y="213" width="11.6926%" height="15" fill="rgb(221,25,40)" fg:x="613" fg:w="143"/><text x="50.3726%" y="223.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (24 samples, 1.96%)</title><rect x="59.8528%" y="197" width="1.9624%" height="15" fill="rgb(241,184,7)" fg:x="732" fg:w="24"/><text x="60.1028%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="61.7334%" y="181" width="0.0818%" height="15" fill="rgb(235,159,4)" fg:x="755" fg:w="1"/><text x="61.9834%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="61.8970%" y="181" width="0.0818%" height="15" fill="rgb(214,87,48)" fg:x="757" fg:w="1"/><text x="62.1470%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="61.8970%" y="197" width="0.1635%" height="15" fill="rgb(246,198,24)" fg:x="757" fg:w="2"/><text x="62.1470%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="61.9787%" y="181" width="0.0818%" height="15" fill="rgb(209,66,40)" fg:x="758" fg:w="1"/><text x="62.2287%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.9787%" y="165" width="0.0818%" height="15" fill="rgb(233,147,39)" fg:x="758" fg:w="1"/><text x="62.2287%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.9787%" y="149" width="0.0818%" height="15" fill="rgb(231,145,52)" fg:x="758" fg:w="1"/><text x="62.2287%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.9787%" y="133" width="0.0818%" height="15" fill="rgb(206,20,26)" fg:x="758" fg:w="1"/><text x="62.2287%" y="143.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_uncounted_repetition (1 samples, 0.08%)</title><rect x="62.0605%" y="197" width="0.0818%" height="15" fill="rgb(238,220,4)" fg:x="759" fg:w="1"/><text x="62.3105%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="62.1423%" y="197" width="0.0818%" height="15" fill="rgb(252,195,42)" fg:x="760" fg:w="1"/><text x="62.3923%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.1423%" y="181" width="0.0818%" height="15" fill="rgb(209,10,6)" fg:x="760" fg:w="1"/><text x="62.3923%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="62.2240%" y="197" width="0.0818%" height="15" fill="rgb(229,3,52)" fg:x="761" fg:w="1"/><text x="62.4740%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="62.2240%" y="181" width="0.0818%" height="15" fill="rgb(253,49,37)" fg:x="761" fg:w="1"/><text x="62.4740%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.57%)</title><rect x="61.8152%" y="229" width="0.5724%" height="15" fill="rgb(240,103,49)" fg:x="756" fg:w="7"/><text x="62.0652%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.57%)</title><rect x="61.8152%" y="213" width="0.5724%" height="15" fill="rgb(250,182,30)" fg:x="756" fg:w="7"/><text x="62.0652%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="62.3058%" y="197" width="0.0818%" height="15" fill="rgb(248,8,30)" fg:x="762" fg:w="1"/><text x="62.5558%" y="207.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="62.3058%" y="181" width="0.0818%" height="15" fill="rgb(237,120,30)" fg:x="762" fg:w="1"/><text x="62.5558%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.4693%" y="181" width="0.0818%" height="15" fill="rgb(221,146,34)" fg:x="764" fg:w="1"/><text x="62.7193%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.4693%" y="165" width="0.0818%" height="15" fill="rgb(242,55,13)" fg:x="764" fg:w="1"/><text x="62.7193%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.4693%" y="149" width="0.0818%" height="15" fill="rgb(242,112,31)" fg:x="764" fg:w="1"/><text x="62.7193%" y="159.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="62.5511%" y="181" width="0.1635%" height="15" fill="rgb(249,192,27)" fg:x="765" fg:w="2"/><text x="62.8011%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="62.6329%" y="165" width="0.0818%" height="15" fill="rgb(208,204,44)" fg:x="766" fg:w="1"/><text x="62.8829%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.6329%" y="149" width="0.0818%" height="15" fill="rgb(208,93,54)" fg:x="766" fg:w="1"/><text x="62.8829%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="62.6329%" y="133" width="0.0818%" height="15" fill="rgb(242,1,31)" fg:x="766" fg:w="1"/><text x="62.8829%" y="143.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.33%)</title><rect x="62.4693%" y="197" width="0.3271%" height="15" fill="rgb(241,83,25)" fg:x="764" fg:w="4"/><text x="62.7193%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="62.7146%" y="181" width="0.0818%" height="15" fill="rgb(205,169,50)" fg:x="767" fg:w="1"/><text x="62.9646%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.7146%" y="165" width="0.0818%" height="15" fill="rgb(239,186,37)" fg:x="767" fg:w="1"/><text x="62.9646%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.7964%" y="165" width="0.0818%" height="15" fill="rgb(205,221,10)" fg:x="768" fg:w="1"/><text x="63.0464%" y="175.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="62.7964%" y="181" width="0.1635%" height="15" fill="rgb(218,196,15)" fg:x="768" fg:w="2"/><text x="63.0464%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="62.8782%" y="165" width="0.0818%" height="15" fill="rgb(218,196,35)" fg:x="769" fg:w="1"/><text x="63.1282%" y="175.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="62.8782%" y="149" width="0.0818%" height="15" fill="rgb(233,63,24)" fg:x="769" fg:w="1"/><text x="63.1282%" y="159.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="62.9599%" y="181" width="0.0818%" height="15" fill="rgb(225,8,4)" fg:x="770" fg:w="1"/><text x="63.2099%" y="191.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (206 samples, 16.84%)</title><rect x="46.2796%" y="245" width="16.8438%" height="15" fill="rgb(234,105,35)" fg:x="566" fg:w="206"/><text x="46.5296%" y="255.50">regex_automata::meta::rege..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.74%)</title><rect x="62.3876%" y="229" width="0.7359%" height="15" fill="rgb(236,21,32)" fg:x="763" fg:w="9"/><text x="62.6376%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.74%)</title><rect x="62.3876%" y="213" width="0.7359%" height="15" fill="rgb(228,109,6)" fg:x="763" fg:w="9"/><text x="62.6376%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.33%)</title><rect x="62.7964%" y="197" width="0.3271%" height="15" fill="rgb(229,215,31)" fg:x="768" fg:w="4"/><text x="63.0464%" y="207.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="63.0417%" y="181" width="0.0818%" height="15" fill="rgb(221,52,54)" fg:x="771" fg:w="1"/><text x="63.2917%" y="191.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.0417%" y="165" width="0.0818%" height="15" fill="rgb(252,129,43)" fg:x="771" fg:w="1"/><text x="63.2917%" y="175.50"></text></g><g><title>indefinite::rules::number::Number::check (224 samples, 18.32%)</title><rect x="44.8896%" y="293" width="18.3156%" height="15" fill="rgb(248,183,27)" fg:x="549" fg:w="224"/><text x="45.1396%" y="303.50">indefinite::rules::number::Nu..</text></g><g><title>regex::regex::string::Regex::new (207 samples, 16.93%)</title><rect x="46.2796%" y="277" width="16.9256%" height="15" fill="rgb(250,0,22)" fg:x="566" fg:w="207"/><text x="46.5296%" y="287.50">regex::regex::string::Rege..</text></g><g><title>regex::builders::Builder::build_one_string (207 samples, 16.93%)</title><rect x="46.2796%" y="261" width="16.9256%" height="15" fill="rgb(213,166,10)" fg:x="566" fg:w="207"/><text x="46.5296%" y="271.50">regex::builders::Builder::..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="63.1235%" y="245" width="0.0818%" height="15" fill="rgb(207,163,36)" fg:x="772" fg:w="1"/><text x="63.3735%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="63.2052%" y="261" width="0.1635%" height="15" fill="rgb(208,122,22)" fg:x="773" fg:w="2"/><text x="63.4552%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="63.2052%" y="245" width="0.1635%" height="15" fill="rgb(207,104,49)" fg:x="773" fg:w="2"/><text x="63.4552%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="63.2052%" y="229" width="0.1635%" height="15" fill="rgb(248,211,50)" fg:x="773" fg:w="2"/><text x="63.4552%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="63.2052%" y="213" width="0.1635%" height="15" fill="rgb(217,13,45)" fg:x="773" fg:w="2"/><text x="63.4552%" y="223.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.2870%" y="197" width="0.0818%" height="15" fill="rgb(211,216,49)" fg:x="774" fg:w="1"/><text x="63.5370%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.3688%" y="229" width="0.0818%" height="15" fill="rgb(221,58,53)" fg:x="775" fg:w="1"/><text x="63.6188%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.6141%" y="213" width="0.0818%" height="15" fill="rgb(220,112,41)" fg:x="778" fg:w="1"/><text x="63.8641%" y="223.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="63.6958%" y="213" width="0.0818%" height="15" fill="rgb(236,38,28)" fg:x="779" fg:w="1"/><text x="63.9458%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="63.8594%" y="197" width="0.0818%" height="15" fill="rgb(227,195,22)" fg:x="781" fg:w="1"/><text x="64.1094%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="64.0229%" y="181" width="0.1635%" height="15" fill="rgb(214,55,33)" fg:x="783" fg:w="2"/><text x="64.2729%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.33%)</title><rect x="63.9411%" y="197" width="0.3271%" height="15" fill="rgb(248,80,13)" fg:x="782" fg:w="4"/><text x="64.1911%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.1864%" y="181" width="0.0818%" height="15" fill="rgb(238,52,6)" fg:x="785" fg:w="1"/><text x="64.4364%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="64.1864%" y="165" width="0.0818%" height="15" fill="rgb(224,198,47)" fg:x="785" fg:w="1"/><text x="64.4364%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="64.1864%" y="149" width="0.0818%" height="15" fill="rgb(233,171,20)" fg:x="785" fg:w="1"/><text x="64.4364%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.3500%" y="165" width="0.0818%" height="15" fill="rgb(241,30,25)" fg:x="787" fg:w="1"/><text x="64.6000%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (5 samples, 0.41%)</title><rect x="64.2682%" y="197" width="0.4088%" height="15" fill="rgb(207,171,38)" fg:x="786" fg:w="5"/><text x="64.5182%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="64.2682%" y="181" width="0.4088%" height="15" fill="rgb(234,70,1)" fg:x="786" fg:w="5"/><text x="64.5182%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="64.4317%" y="165" width="0.2453%" height="15" fill="rgb(232,178,18)" fg:x="788" fg:w="3"/><text x="64.6817%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (12 samples, 0.98%)</title><rect x="63.7776%" y="213" width="0.9812%" height="15" fill="rgb(241,78,40)" fg:x="780" fg:w="12"/><text x="64.0276%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="64.6770%" y="197" width="0.0818%" height="15" fill="rgb(222,35,25)" fg:x="791" fg:w="1"/><text x="64.9270%" y="207.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="64.8406%" y="165" width="0.0818%" height="15" fill="rgb(207,92,16)" fg:x="793" fg:w="1"/><text x="65.0906%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.8406%" y="149" width="0.0818%" height="15" fill="rgb(216,59,51)" fg:x="793" fg:w="1"/><text x="65.0906%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.8406%" y="133" width="0.0818%" height="15" fill="rgb(213,80,28)" fg:x="793" fg:w="1"/><text x="65.0906%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.8406%" y="117" width="0.0818%" height="15" fill="rgb(220,93,7)" fg:x="793" fg:w="1"/><text x="65.0906%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="64.7588%" y="181" width="0.2453%" height="15" fill="rgb(225,24,44)" fg:x="792" fg:w="3"/><text x="65.0088%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="64.9223%" y="165" width="0.0818%" height="15" fill="rgb(243,74,40)" fg:x="794" fg:w="1"/><text x="65.1723%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.9223%" y="149" width="0.0818%" height="15" fill="rgb(228,39,7)" fg:x="794" fg:w="1"/><text x="65.1723%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.9223%" y="133" width="0.0818%" height="15" fill="rgb(227,79,8)" fg:x="794" fg:w="1"/><text x="65.1723%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.9223%" y="117" width="0.0818%" height="15" fill="rgb(236,58,11)" fg:x="794" fg:w="1"/><text x="65.1723%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.33%)</title><rect x="64.7588%" y="213" width="0.3271%" height="15" fill="rgb(249,63,35)" fg:x="792" fg:w="4"/><text x="65.0088%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.33%)</title><rect x="64.7588%" y="197" width="0.3271%" height="15" fill="rgb(252,114,16)" fg:x="792" fg:w="4"/><text x="65.0088%" y="207.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.0041%" y="181" width="0.0818%" height="15" fill="rgb(254,151,24)" fg:x="795" fg:w="1"/><text x="65.2541%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="65.0041%" y="165" width="0.0818%" height="15" fill="rgb(253,54,39)" fg:x="795" fg:w="1"/><text x="65.2541%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (22 samples, 1.80%)</title><rect x="63.3688%" y="261" width="1.7989%" height="15" fill="rgb(243,25,45)" fg:x="775" fg:w="22"/><text x="63.6188%" y="271.50">r..</text></g><g><title>regex::builders::Builder::build_one_string (22 samples, 1.80%)</title><rect x="63.3688%" y="245" width="1.7989%" height="15" fill="rgb(234,134,9)" fg:x="775" fg:w="22"/><text x="63.6188%" y="255.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (21 samples, 1.72%)</title><rect x="63.4505%" y="229" width="1.7171%" height="15" fill="rgb(227,166,31)" fg:x="776" fg:w="21"/><text x="63.7005%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="65.0859%" y="213" width="0.0818%" height="15" fill="rgb(245,143,41)" fg:x="796" fg:w="1"/><text x="65.3359%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="65.0859%" y="197" width="0.0818%" height="15" fill="rgb(238,181,32)" fg:x="796" fg:w="1"/><text x="65.3359%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="65.0859%" y="181" width="0.0818%" height="15" fill="rgb(224,113,18)" fg:x="796" fg:w="1"/><text x="65.3359%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="65.0859%" y="165" width="0.0818%" height="15" fill="rgb(240,229,28)" fg:x="796" fg:w="1"/><text x="65.3359%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.4129%" y="181" width="0.0818%" height="15" fill="rgb(250,185,3)" fg:x="800" fg:w="1"/><text x="65.6629%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4129%" y="165" width="0.0818%" height="15" fill="rgb(212,59,25)" fg:x="800" fg:w="1"/><text x="65.6629%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.4129%" y="149" width="0.0818%" height="15" fill="rgb(221,87,20)" fg:x="800" fg:w="1"/><text x="65.6629%" y="159.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="65.1676%" y="213" width="0.4906%" height="15" fill="rgb(213,74,28)" fg:x="797" fg:w="6"/><text x="65.4176%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="65.1676%" y="197" width="0.4906%" height="15" fill="rgb(224,132,34)" fg:x="797" fg:w="6"/><text x="65.4176%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="65.4947%" y="181" width="0.1635%" height="15" fill="rgb(222,101,24)" fg:x="801" fg:w="2"/><text x="65.7447%" y="191.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (31 samples, 2.53%)</title><rect x="63.2052%" y="277" width="2.5348%" height="15" fill="rgb(254,142,4)" fg:x="773" fg:w="31"/><text x="63.4552%" y="287.50">in..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="65.1676%" y="261" width="0.5724%" height="15" fill="rgb(230,229,49)" fg:x="797" fg:w="7"/><text x="65.4176%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="65.1676%" y="245" width="0.5724%" height="15" fill="rgb(238,70,47)" fg:x="797" fg:w="7"/><text x="65.4176%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="65.1676%" y="229" width="0.5724%" height="15" fill="rgb(231,160,17)" fg:x="797" fg:w="7"/><text x="65.4176%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="65.6582%" y="213" width="0.0818%" height="15" fill="rgb(218,68,53)" fg:x="803" fg:w="1"/><text x="65.9082%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="65.6582%" y="197" width="0.0818%" height="15" fill="rgb(236,111,10)" fg:x="803" fg:w="1"/><text x="65.9082%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (451 samples, 36.88%)</title><rect x="29.0270%" y="373" width="36.8765%" height="15" fill="rgb(224,34,41)" fg:x="355" fg:w="451"/><text x="29.2770%" y="383.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (413 samples, 33.77%)</title><rect x="32.1341%" y="357" width="33.7694%" height="15" fill="rgb(241,118,19)" fg:x="393" fg:w="413"/><text x="32.3841%" y="367.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (413 samples, 33.77%)</title><rect x="32.1341%" y="341" width="33.7694%" height="15" fill="rgb(238,129,25)" fg:x="393" fg:w="413"/><text x="32.3841%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (412 samples, 33.69%)</title><rect x="32.2159%" y="325" width="33.6877%" height="15" fill="rgb(238,22,31)" fg:x="394" fg:w="412"/><text x="32.4659%" y="335.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (410 samples, 33.52%)</title><rect x="32.3794%" y="309" width="33.5241%" height="15" fill="rgb(222,174,48)" fg:x="396" fg:w="410"/><text x="32.6294%" y="319.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (33 samples, 2.70%)</title><rect x="63.2052%" y="293" width="2.6983%" height="15" fill="rgb(206,152,40)" fg:x="773" fg:w="33"/><text x="63.4552%" y="303.50">in..</text></g><g><title>indefinite::irregular::Irregular::check (2 samples, 0.16%)</title><rect x="65.7400%" y="277" width="0.1635%" height="15" fill="rgb(218,99,54)" fg:x="804" fg:w="2"/><text x="65.9900%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="65.9035%" y="357" width="0.0818%" height="15" fill="rgb(220,174,26)" fg:x="806" fg:w="1"/><text x="66.1535%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="66.1488%" y="325" width="0.1635%" height="15" fill="rgb(245,116,9)" fg:x="809" fg:w="2"/><text x="66.3988%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="66.1488%" y="309" width="0.1635%" height="15" fill="rgb(209,72,35)" fg:x="809" fg:w="2"/><text x="66.3988%" y="319.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="66.2306%" y="293" width="0.0818%" height="15" fill="rgb(226,126,21)" fg:x="810" fg:w="1"/><text x="66.4806%" y="303.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="66.2306%" y="277" width="0.0818%" height="15" fill="rgb(227,192,1)" fg:x="810" fg:w="1"/><text x="66.4806%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.2306%" y="261" width="0.0818%" height="15" fill="rgb(237,180,29)" fg:x="810" fg:w="1"/><text x="66.4806%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.2306%" y="245" width="0.0818%" height="15" fill="rgb(230,197,35)" fg:x="810" fg:w="1"/><text x="66.4806%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="66.2306%" y="229" width="0.0818%" height="15" fill="rgb(246,193,31)" fg:x="810" fg:w="1"/><text x="66.4806%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.2306%" y="213" width="0.0818%" height="15" fill="rgb(241,36,4)" fg:x="810" fg:w="1"/><text x="66.4806%" y="223.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="65.9035%" y="373" width="0.4906%" height="15" fill="rgb(241,130,17)" fg:x="806" fg:w="6"/><text x="66.1535%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="65.9853%" y="357" width="0.4088%" height="15" fill="rgb(206,137,32)" fg:x="807" fg:w="5"/><text x="66.2353%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="65.9853%" y="341" width="0.4088%" height="15" fill="rgb(237,228,51)" fg:x="807" fg:w="5"/><text x="66.2353%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="66.3123%" y="325" width="0.0818%" height="15" fill="rgb(243,6,42)" fg:x="811" fg:w="1"/><text x="66.5623%" y="335.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="66.3941%" y="325" width="0.0818%" height="15" fill="rgb(251,74,28)" fg:x="812" fg:w="1"/><text x="66.6441%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.3941%" y="309" width="0.0818%" height="15" fill="rgb(218,20,49)" fg:x="812" fg:w="1"/><text x="66.6441%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.3941%" y="293" width="0.0818%" height="15" fill="rgb(238,28,14)" fg:x="812" fg:w="1"/><text x="66.6441%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.3941%" y="277" width="0.0818%" height="15" fill="rgb(229,40,46)" fg:x="812" fg:w="1"/><text x="66.6441%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.3941%" y="261" width="0.0818%" height="15" fill="rgb(244,195,20)" fg:x="812" fg:w="1"/><text x="66.6441%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.3941%" y="245" width="0.0818%" height="15" fill="rgb(253,56,35)" fg:x="812" fg:w="1"/><text x="66.6441%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.3941%" y="229" width="0.0818%" height="15" fill="rgb(210,149,44)" fg:x="812" fg:w="1"/><text x="66.6441%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.3941%" y="213" width="0.0818%" height="15" fill="rgb(240,135,12)" fg:x="812" fg:w="1"/><text x="66.6441%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.3941%" y="197" width="0.0818%" height="15" fill="rgb(251,24,50)" fg:x="812" fg:w="1"/><text x="66.6441%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.3941%" y="181" width="0.0818%" height="15" fill="rgb(243,200,47)" fg:x="812" fg:w="1"/><text x="66.6441%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.3941%" y="165" width="0.0818%" height="15" fill="rgb(224,166,26)" fg:x="812" fg:w="1"/><text x="66.6441%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.3941%" y="149" width="0.0818%" height="15" fill="rgb(233,0,47)" fg:x="812" fg:w="1"/><text x="66.6441%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.3941%" y="133" width="0.0818%" height="15" fill="rgb(253,80,5)" fg:x="812" fg:w="1"/><text x="66.6441%" y="143.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4759%" y="261" width="0.0818%" height="15" fill="rgb(214,133,25)" fg:x="813" fg:w="1"/><text x="66.7259%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.4759%" y="245" width="0.0818%" height="15" fill="rgb(209,27,14)" fg:x="813" fg:w="1"/><text x="66.7259%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4759%" y="229" width="0.0818%" height="15" fill="rgb(219,102,51)" fg:x="813" fg:w="1"/><text x="66.7259%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.4759%" y="213" width="0.0818%" height="15" fill="rgb(237,18,16)" fg:x="813" fg:w="1"/><text x="66.7259%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.4759%" y="197" width="0.0818%" height="15" fill="rgb(241,85,17)" fg:x="813" fg:w="1"/><text x="66.7259%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.4759%" y="181" width="0.0818%" height="15" fill="rgb(236,90,42)" fg:x="813" fg:w="1"/><text x="66.7259%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.4759%" y="165" width="0.0818%" height="15" fill="rgb(249,57,21)" fg:x="813" fg:w="1"/><text x="66.7259%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4759%" y="149" width="0.0818%" height="15" fill="rgb(243,12,36)" fg:x="813" fg:w="1"/><text x="66.7259%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.4759%" y="133" width="0.0818%" height="15" fill="rgb(253,128,47)" fg:x="813" fg:w="1"/><text x="66.7259%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.4759%" y="117" width="0.0818%" height="15" fill="rgb(207,33,20)" fg:x="813" fg:w="1"/><text x="66.7259%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.4759%" y="101" width="0.0818%" height="15" fill="rgb(233,215,35)" fg:x="813" fg:w="1"/><text x="66.7259%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.4759%" y="85" width="0.0818%" height="15" fill="rgb(249,188,52)" fg:x="813" fg:w="1"/><text x="66.7259%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.4759%" y="69" width="0.0818%" height="15" fill="rgb(225,12,32)" fg:x="813" fg:w="1"/><text x="66.7259%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4759%" y="53" width="0.0818%" height="15" fill="rgb(247,98,14)" fg:x="813" fg:w="1"/><text x="66.7259%" y="63.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.4759%" y="309" width="0.1635%" height="15" fill="rgb(247,219,48)" fg:x="813" fg:w="2"/><text x="66.7259%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.4759%" y="293" width="0.1635%" height="15" fill="rgb(253,60,48)" fg:x="813" fg:w="2"/><text x="66.7259%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="66.4759%" y="277" width="0.1635%" height="15" fill="rgb(245,15,52)" fg:x="813" fg:w="2"/><text x="66.7259%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.5576%" y="261" width="0.0818%" height="15" fill="rgb(220,133,28)" fg:x="814" fg:w="1"/><text x="66.8076%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="66.5576%" y="245" width="0.0818%" height="15" fill="rgb(217,180,4)" fg:x="814" fg:w="1"/><text x="66.8076%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.5576%" y="229" width="0.0818%" height="15" fill="rgb(251,24,1)" fg:x="814" fg:w="1"/><text x="66.8076%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="66.5576%" y="213" width="0.0818%" height="15" fill="rgb(212,185,49)" fg:x="814" fg:w="1"/><text x="66.8076%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="66.5576%" y="197" width="0.0818%" height="15" fill="rgb(215,175,22)" fg:x="814" fg:w="1"/><text x="66.8076%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="66.5576%" y="181" width="0.0818%" height="15" fill="rgb(250,205,14)" fg:x="814" fg:w="1"/><text x="66.8076%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="66.5576%" y="165" width="0.0818%" height="15" fill="rgb(225,211,22)" fg:x="814" fg:w="1"/><text x="66.8076%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.5576%" y="149" width="0.0818%" height="15" fill="rgb(251,179,42)" fg:x="814" fg:w="1"/><text x="66.8076%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="66.5576%" y="133" width="0.0818%" height="15" fill="rgb(208,216,51)" fg:x="814" fg:w="1"/><text x="66.8076%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="66.5576%" y="117" width="0.0818%" height="15" fill="rgb(235,36,11)" fg:x="814" fg:w="1"/><text x="66.8076%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="66.5576%" y="101" width="0.0818%" height="15" fill="rgb(213,189,28)" fg:x="814" fg:w="1"/><text x="66.8076%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="66.5576%" y="85" width="0.0818%" height="15" fill="rgb(227,203,42)" fg:x="814" fg:w="1"/><text x="66.8076%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="66.5576%" y="69" width="0.0818%" height="15" fill="rgb(244,72,36)" fg:x="814" fg:w="1"/><text x="66.8076%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.5576%" y="53" width="0.0818%" height="15" fill="rgb(213,53,17)" fg:x="814" fg:w="1"/><text x="66.8076%" y="63.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.7212%" y="149" width="0.0818%" height="15" fill="rgb(207,167,3)" fg:x="816" fg:w="1"/><text x="66.9712%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.7212%" y="133" width="0.0818%" height="15" fill="rgb(216,98,30)" fg:x="816" fg:w="1"/><text x="66.9712%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="66.7212%" y="117" width="0.0818%" height="15" fill="rgb(236,123,15)" fg:x="816" fg:w="1"/><text x="66.9712%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.7212%" y="213" width="0.1635%" height="15" fill="rgb(248,81,50)" fg:x="816" fg:w="2"/><text x="66.9712%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.7212%" y="197" width="0.1635%" height="15" fill="rgb(214,120,4)" fg:x="816" fg:w="2"/><text x="66.9712%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.7212%" y="181" width="0.1635%" height="15" fill="rgb(208,179,34)" fg:x="816" fg:w="2"/><text x="66.9712%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.7212%" y="165" width="0.1635%" height="15" fill="rgb(227,140,7)" fg:x="816" fg:w="2"/><text x="66.9712%" y="175.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="66.8029%" y="149" width="0.0818%" height="15" fill="rgb(214,22,6)" fg:x="817" fg:w="1"/><text x="67.0529%" y="159.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.33%)</title><rect x="66.6394%" y="309" width="0.3271%" height="15" fill="rgb(207,137,27)" fg:x="815" fg:w="4"/><text x="66.8894%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.33%)</title><rect x="66.6394%" y="293" width="0.3271%" height="15" fill="rgb(210,8,46)" fg:x="815" fg:w="4"/><text x="66.8894%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="66.6394%" y="277" width="0.3271%" height="15" fill="rgb(240,16,54)" fg:x="815" fg:w="4"/><text x="66.8894%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.33%)</title><rect x="66.6394%" y="261" width="0.3271%" height="15" fill="rgb(211,209,29)" fg:x="815" fg:w="4"/><text x="66.8894%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.33%)</title><rect x="66.6394%" y="245" width="0.3271%" height="15" fill="rgb(226,228,24)" fg:x="815" fg:w="4"/><text x="66.8894%" y="255.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.25%)</title><rect x="66.7212%" y="229" width="0.2453%" height="15" fill="rgb(222,84,9)" fg:x="816" fg:w="3"/><text x="66.9712%" y="239.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8847%" y="213" width="0.0818%" height="15" fill="rgb(234,203,30)" fg:x="818" fg:w="1"/><text x="67.1347%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8847%" y="197" width="0.0818%" height="15" fill="rgb(238,109,14)" fg:x="818" fg:w="1"/><text x="67.1347%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.8847%" y="181" width="0.0818%" height="15" fill="rgb(233,206,34)" fg:x="818" fg:w="1"/><text x="67.1347%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8847%" y="165" width="0.0818%" height="15" fill="rgb(220,167,47)" fg:x="818" fg:w="1"/><text x="67.1347%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8847%" y="149" width="0.0818%" height="15" fill="rgb(238,105,10)" fg:x="818" fg:w="1"/><text x="67.1347%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.8847%" y="133" width="0.0818%" height="15" fill="rgb(213,227,17)" fg:x="818" fg:w="1"/><text x="67.1347%" y="143.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="66.8847%" y="117" width="0.0818%" height="15" fill="rgb(217,132,38)" fg:x="818" fg:w="1"/><text x="67.1347%" y="127.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="66.8847%" y="101" width="0.0818%" height="15" fill="rgb(242,146,4)" fg:x="818" fg:w="1"/><text x="67.1347%" y="111.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="66.8847%" y="85" width="0.0818%" height="15" fill="rgb(212,61,9)" fg:x="818" fg:w="1"/><text x="67.1347%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="66.9665%" y="117" width="0.0818%" height="15" fill="rgb(247,126,22)" fg:x="819" fg:w="1"/><text x="67.2165%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="66.9665%" y="149" width="0.1635%" height="15" fill="rgb(220,196,2)" fg:x="819" fg:w="2"/><text x="67.2165%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="66.9665%" y="133" width="0.1635%" height="15" fill="rgb(208,46,4)" fg:x="819" fg:w="2"/><text x="67.2165%" y="143.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0482%" y="117" width="0.0818%" height="15" fill="rgb(252,104,46)" fg:x="820" fg:w="1"/><text x="67.2982%" y="127.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.0482%" y="101" width="0.0818%" height="15" fill="rgb(237,152,48)" fg:x="820" fg:w="1"/><text x="67.2982%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.0482%" y="85" width="0.0818%" height="15" fill="rgb(221,59,37)" fg:x="820" fg:w="1"/><text x="67.2982%" y="95.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="66.9665%" y="245" width="0.2453%" height="15" fill="rgb(209,202,51)" fg:x="819" fg:w="3"/><text x="67.2165%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="66.9665%" y="229" width="0.2453%" height="15" fill="rgb(228,81,30)" fg:x="819" fg:w="3"/><text x="67.2165%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="66.9665%" y="213" width="0.2453%" height="15" fill="rgb(227,42,39)" fg:x="819" fg:w="3"/><text x="67.2165%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="66.9665%" y="197" width="0.2453%" height="15" fill="rgb(221,26,2)" fg:x="819" fg:w="3"/><text x="67.2165%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="66.9665%" y="181" width="0.2453%" height="15" fill="rgb(254,61,31)" fg:x="819" fg:w="3"/><text x="67.2165%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="66.9665%" y="165" width="0.2453%" height="15" fill="rgb(222,173,38)" fg:x="819" fg:w="3"/><text x="67.2165%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="67.1300%" y="149" width="0.0818%" height="15" fill="rgb(218,50,12)" fg:x="821" fg:w="1"/><text x="67.3800%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1300%" y="133" width="0.0818%" height="15" fill="rgb(223,88,40)" fg:x="821" fg:w="1"/><text x="67.3800%" y="143.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (10 samples, 0.82%)</title><rect x="66.4759%" y="325" width="0.8177%" height="15" fill="rgb(237,54,19)" fg:x="813" fg:w="10"/><text x="66.7259%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="66.9665%" y="309" width="0.3271%" height="15" fill="rgb(251,129,25)" fg:x="819" fg:w="4"/><text x="67.2165%" y="319.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="66.9665%" y="293" width="0.3271%" height="15" fill="rgb(238,97,19)" fg:x="819" fg:w="4"/><text x="67.2165%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="66.9665%" y="277" width="0.3271%" height="15" fill="rgb(240,169,18)" fg:x="819" fg:w="4"/><text x="67.2165%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="66.9665%" y="261" width="0.3271%" height="15" fill="rgb(230,187,49)" fg:x="819" fg:w="4"/><text x="67.2165%" y="271.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2118%" y="245" width="0.0818%" height="15" fill="rgb(209,44,26)" fg:x="822" fg:w="1"/><text x="67.4618%" y="255.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.2118%" y="229" width="0.0818%" height="15" fill="rgb(244,0,6)" fg:x="822" fg:w="1"/><text x="67.4618%" y="239.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.2118%" y="213" width="0.0818%" height="15" fill="rgb(248,18,21)" fg:x="822" fg:w="1"/><text x="67.4618%" y="223.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.98%)</title><rect x="66.3941%" y="373" width="0.9812%" height="15" fill="rgb(245,180,19)" fg:x="812" fg:w="12"/><text x="66.6441%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.98%)</title><rect x="66.3941%" y="357" width="0.9812%" height="15" fill="rgb(252,118,36)" fg:x="812" fg:w="12"/><text x="66.6441%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.98%)</title><rect x="66.3941%" y="341" width="0.9812%" height="15" fill="rgb(210,224,19)" fg:x="812" fg:w="12"/><text x="66.6441%" y="351.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="67.2935%" y="325" width="0.0818%" height="15" fill="rgb(218,30,24)" fg:x="823" fg:w="1"/><text x="67.5435%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="67.3753%" y="373" width="0.0818%" height="15" fill="rgb(219,75,50)" fg:x="824" fg:w="1"/><text x="67.6253%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.3753%" y="357" width="0.0818%" height="15" fill="rgb(234,72,50)" fg:x="824" fg:w="1"/><text x="67.6253%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.3753%" y="341" width="0.0818%" height="15" fill="rgb(219,100,48)" fg:x="824" fg:w="1"/><text x="67.6253%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.3753%" y="325" width="0.0818%" height="15" fill="rgb(253,5,41)" fg:x="824" fg:w="1"/><text x="67.6253%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.4571%" y="373" width="0.0818%" height="15" fill="rgb(247,181,11)" fg:x="825" fg:w="1"/><text x="67.7071%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.4571%" y="357" width="0.0818%" height="15" fill="rgb(222,223,25)" fg:x="825" fg:w="1"/><text x="67.7071%" y="367.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (500 samples, 40.88%)</title><rect x="26.7375%" y="597" width="40.8831%" height="15" fill="rgb(214,198,28)" fg:x="327" fg:w="500"/><text x="26.9875%" y="607.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (500 samples, 40.88%)</title><rect x="26.7375%" y="581" width="40.8831%" height="15" fill="rgb(230,46,43)" fg:x="327" fg:w="500"/><text x="26.9875%" y="591.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (500 samples, 40.88%)</title><rect x="26.7375%" y="565" width="40.8831%" height="15" fill="rgb(233,65,53)" fg:x="327" fg:w="500"/><text x="26.9875%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (500 samples, 40.88%)</title><rect x="26.7375%" y="549" width="40.8831%" height="15" fill="rgb(221,121,27)" fg:x="327" fg:w="500"/><text x="26.9875%" y="559.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (485 samples, 39.66%)</title><rect x="27.9640%" y="533" width="39.6566%" height="15" fill="rgb(247,70,47)" fg:x="342" fg:w="485"/><text x="28.2140%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (484 samples, 39.57%)</title><rect x="28.0458%" y="517" width="39.5748%" height="15" fill="rgb(228,85,35)" fg:x="343" fg:w="484"/><text x="28.2958%" y="527.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middle..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (484 samples, 39.57%)</title><rect x="28.0458%" y="501" width="39.5748%" height="15" fill="rgb(209,50,18)" fg:x="343" fg:w="484"/><text x="28.2958%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (484 samples, 39.57%)</title><rect x="28.0458%" y="485" width="39.5748%" height="15" fill="rgb(250,19,35)" fg:x="343" fg:w="484"/><text x="28.2958%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (484 samples, 39.57%)</title><rect x="28.0458%" y="469" width="39.5748%" height="15" fill="rgb(253,107,29)" fg:x="343" fg:w="484"/><text x="28.2958%" y="479.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (484 samples, 39.57%)</title><rect x="28.0458%" y="453" width="39.5748%" height="15" fill="rgb(252,179,29)" fg:x="343" fg:w="484"/><text x="28.2958%" y="463.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (484 samples, 39.57%)</title><rect x="28.0458%" y="437" width="39.5748%" height="15" fill="rgb(238,194,6)" fg:x="343" fg:w="484"/><text x="28.2958%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::ca..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (484 samples, 39.57%)</title><rect x="28.0458%" y="421" width="39.5748%" height="15" fill="rgb(238,164,29)" fg:x="343" fg:w="484"/><text x="28.2958%" y="431.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;::pe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (483 samples, 39.49%)</title><rect x="28.1276%" y="405" width="39.4930%" height="15" fill="rgb(224,25,9)" fg:x="344" fg:w="483"/><text x="28.3776%" y="415.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::..</text></g><g><title>plugins_core::looking::model::new_area_observation (474 samples, 38.76%)</title><rect x="28.8635%" y="389" width="38.7572%" height="15" fill="rgb(244,153,23)" fg:x="353" fg:w="474"/><text x="29.1135%" y="399.50">plugins_core::looking::model::new_area_observation</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="67.5388%" y="373" width="0.0818%" height="15" fill="rgb(212,203,14)" fg:x="826" fg:w="1"/><text x="67.7888%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="67.5388%" y="357" width="0.0818%" height="15" fill="rgb(220,164,20)" fg:x="826" fg:w="1"/><text x="67.7888%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5388%" y="341" width="0.0818%" height="15" fill="rgb(222,203,48)" fg:x="826" fg:w="1"/><text x="67.7888%" y="351.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.25%)</title><rect x="67.6206%" y="597" width="0.2453%" height="15" fill="rgb(215,159,22)" fg:x="827" fg:w="3"/><text x="67.8706%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="67.6206%" y="581" width="0.2453%" height="15" fill="rgb(216,183,47)" fg:x="827" fg:w="3"/><text x="67.8706%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="67.6206%" y="565" width="0.2453%" height="15" fill="rgb(229,195,25)" fg:x="827" fg:w="3"/><text x="67.8706%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="67.6206%" y="549" width="0.2453%" height="15" fill="rgb(224,132,51)" fg:x="827" fg:w="3"/><text x="67.8706%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="67.6206%" y="533" width="0.2453%" height="15" fill="rgb(240,63,7)" fg:x="827" fg:w="3"/><text x="67.8706%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="67.6206%" y="517" width="0.2453%" height="15" fill="rgb(249,182,41)" fg:x="827" fg:w="3"/><text x="67.8706%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.7841%" y="501" width="0.0818%" height="15" fill="rgb(243,47,26)" fg:x="829" fg:w="1"/><text x="68.0341%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="67.7841%" y="485" width="0.0818%" height="15" fill="rgb(233,48,2)" fg:x="829" fg:w="1"/><text x="68.0341%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="67.7841%" y="469" width="0.0818%" height="15" fill="rgb(244,165,34)" fg:x="829" fg:w="1"/><text x="68.0341%" y="479.50"></text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::ParsesActions&gt;::try_parse_action (2 samples, 0.16%)</title><rect x="67.8659%" y="597" width="0.1635%" height="15" fill="rgb(207,89,7)" fg:x="830" fg:w="2"/><text x="68.1159%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="67.9477%" y="581" width="0.0818%" height="15" fill="rgb(244,117,36)" fg:x="831" fg:w="1"/><text x="68.1977%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::base::DomainError&gt; (1 samples, 0.08%)</title><rect x="68.0294%" y="597" width="0.0818%" height="15" fill="rgb(226,144,34)" fg:x="832" fg:w="1"/><text x="68.2794%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1112%" y="517" width="0.0818%" height="15" fill="rgb(213,23,19)" fg:x="833" fg:w="1"/><text x="68.3612%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1112%" y="501" width="0.0818%" height="15" fill="rgb(217,75,12)" fg:x="833" fg:w="1"/><text x="68.3612%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.1112%" y="485" width="0.0818%" height="15" fill="rgb(224,159,17)" fg:x="833" fg:w="1"/><text x="68.3612%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1112%" y="469" width="0.0818%" height="15" fill="rgb(217,118,1)" fg:x="833" fg:w="1"/><text x="68.3612%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1112%" y="453" width="0.0818%" height="15" fill="rgb(232,180,48)" fg:x="833" fg:w="1"/><text x="68.3612%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1112%" y="437" width="0.0818%" height="15" fill="rgb(230,27,33)" fg:x="833" fg:w="1"/><text x="68.3612%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1112%" y="421" width="0.0818%" height="15" fill="rgb(205,31,21)" fg:x="833" fg:w="1"/><text x="68.3612%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1112%" y="405" width="0.0818%" height="15" fill="rgb(253,59,4)" fg:x="833" fg:w="1"/><text x="68.3612%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1112%" y="389" width="0.0818%" height="15" fill="rgb(224,201,9)" fg:x="833" fg:w="1"/><text x="68.3612%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1112%" y="373" width="0.0818%" height="15" fill="rgb(229,206,30)" fg:x="833" fg:w="1"/><text x="68.3612%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1112%" y="357" width="0.0818%" height="15" fill="rgb(212,67,47)" fg:x="833" fg:w="1"/><text x="68.3612%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1112%" y="341" width="0.0818%" height="15" fill="rgb(211,96,50)" fg:x="833" fg:w="1"/><text x="68.3612%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1112%" y="325" width="0.0818%" height="15" fill="rgb(252,114,18)" fg:x="833" fg:w="1"/><text x="68.3612%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1112%" y="309" width="0.0818%" height="15" fill="rgb(223,58,37)" fg:x="833" fg:w="1"/><text x="68.3612%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1112%" y="293" width="0.0818%" height="15" fill="rgb(237,70,4)" fg:x="833" fg:w="1"/><text x="68.3612%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1112%" y="549" width="0.1635%" height="15" fill="rgb(244,85,46)" fg:x="833" fg:w="2"/><text x="68.3612%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.1112%" y="533" width="0.1635%" height="15" fill="rgb(223,39,52)" fg:x="833" fg:w="2"/><text x="68.3612%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1930%" y="517" width="0.0818%" height="15" fill="rgb(218,200,14)" fg:x="834" fg:w="1"/><text x="68.4430%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.2747%" y="453" width="0.1635%" height="15" fill="rgb(208,171,16)" fg:x="835" fg:w="2"/><text x="68.5247%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.2747%" y="437" width="0.1635%" height="15" fill="rgb(234,200,18)" fg:x="835" fg:w="2"/><text x="68.5247%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="68.2747%" y="421" width="0.1635%" height="15" fill="rgb(228,45,11)" fg:x="835" fg:w="2"/><text x="68.5247%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.2747%" y="405" width="0.1635%" height="15" fill="rgb(237,182,11)" fg:x="835" fg:w="2"/><text x="68.5247%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="68.2747%" y="389" width="0.1635%" height="15" fill="rgb(241,175,49)" fg:x="835" fg:w="2"/><text x="68.5247%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="68.2747%" y="373" width="0.1635%" height="15" fill="rgb(247,38,35)" fg:x="835" fg:w="2"/><text x="68.5247%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="68.2747%" y="357" width="0.1635%" height="15" fill="rgb(228,39,49)" fg:x="835" fg:w="2"/><text x="68.5247%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="68.2747%" y="341" width="0.1635%" height="15" fill="rgb(226,101,26)" fg:x="835" fg:w="2"/><text x="68.5247%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.2747%" y="325" width="0.1635%" height="15" fill="rgb(206,141,19)" fg:x="835" fg:w="2"/><text x="68.5247%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="68.2747%" y="309" width="0.1635%" height="15" fill="rgb(211,200,13)" fg:x="835" fg:w="2"/><text x="68.5247%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="68.2747%" y="293" width="0.1635%" height="15" fill="rgb(241,121,6)" fg:x="835" fg:w="2"/><text x="68.5247%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="68.2747%" y="277" width="0.1635%" height="15" fill="rgb(234,221,29)" fg:x="835" fg:w="2"/><text x="68.5247%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="68.2747%" y="261" width="0.1635%" height="15" fill="rgb(229,136,5)" fg:x="835" fg:w="2"/><text x="68.5247%" y="271.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="68.2747%" y="245" width="0.1635%" height="15" fill="rgb(238,36,11)" fg:x="835" fg:w="2"/><text x="68.5247%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.3565%" y="229" width="0.0818%" height="15" fill="rgb(251,55,41)" fg:x="836" fg:w="1"/><text x="68.6065%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="68.4383%" y="405" width="0.0818%" height="15" fill="rgb(242,34,40)" fg:x="837" fg:w="1"/><text x="68.6883%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="68.4383%" y="389" width="0.0818%" height="15" fill="rgb(215,42,17)" fg:x="837" fg:w="1"/><text x="68.6883%" y="399.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="68.4383%" y="373" width="0.0818%" height="15" fill="rgb(207,44,46)" fg:x="837" fg:w="1"/><text x="68.6883%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.4383%" y="357" width="0.0818%" height="15" fill="rgb(211,206,28)" fg:x="837" fg:w="1"/><text x="68.6883%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="68.5200%" y="309" width="0.0818%" height="15" fill="rgb(237,167,16)" fg:x="838" fg:w="1"/><text x="68.7700%" y="319.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="68.5200%" y="293" width="0.0818%" height="15" fill="rgb(233,66,6)" fg:x="838" fg:w="1"/><text x="68.7700%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="68.5200%" y="277" width="0.0818%" height="15" fill="rgb(246,123,29)" fg:x="838" fg:w="1"/><text x="68.7700%" y="287.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="68.5200%" y="261" width="0.0818%" height="15" fill="rgb(209,62,40)" fg:x="838" fg:w="1"/><text x="68.7700%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="68.5200%" y="245" width="0.0818%" height="15" fill="rgb(218,4,25)" fg:x="838" fg:w="1"/><text x="68.7700%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="68.5200%" y="229" width="0.0818%" height="15" fill="rgb(253,91,49)" fg:x="838" fg:w="1"/><text x="68.7700%" y="239.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="68.5200%" y="213" width="0.0818%" height="15" fill="rgb(228,155,29)" fg:x="838" fg:w="1"/><text x="68.7700%" y="223.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="68.5200%" y="197" width="0.0818%" height="15" fill="rgb(243,57,37)" fg:x="838" fg:w="1"/><text x="68.7700%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.33%)</title><rect x="68.4383%" y="453" width="0.3271%" height="15" fill="rgb(244,167,17)" fg:x="837" fg:w="4"/><text x="68.6883%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.33%)</title><rect x="68.4383%" y="437" width="0.3271%" height="15" fill="rgb(207,181,38)" fg:x="837" fg:w="4"/><text x="68.6883%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.33%)</title><rect x="68.4383%" y="421" width="0.3271%" height="15" fill="rgb(211,8,23)" fg:x="837" fg:w="4"/><text x="68.6883%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="68.5200%" y="405" width="0.2453%" height="15" fill="rgb(235,11,44)" fg:x="838" fg:w="3"/><text x="68.7700%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="68.5200%" y="389" width="0.2453%" height="15" fill="rgb(248,18,52)" fg:x="838" fg:w="3"/><text x="68.7700%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (3 samples, 0.25%)</title><rect x="68.5200%" y="373" width="0.2453%" height="15" fill="rgb(208,4,7)" fg:x="838" fg:w="3"/><text x="68.7700%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (3 samples, 0.25%)</title><rect x="68.5200%" y="357" width="0.2453%" height="15" fill="rgb(240,17,39)" fg:x="838" fg:w="3"/><text x="68.7700%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (3 samples, 0.25%)</title><rect x="68.5200%" y="341" width="0.2453%" height="15" fill="rgb(207,170,3)" fg:x="838" fg:w="3"/><text x="68.7700%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (3 samples, 0.25%)</title><rect x="68.5200%" y="325" width="0.2453%" height="15" fill="rgb(236,100,52)" fg:x="838" fg:w="3"/><text x="68.7700%" y="335.50"></text></g><g><title>serde_json::error::make_error (2 samples, 0.16%)</title><rect x="68.6018%" y="309" width="0.1635%" height="15" fill="rgb(246,78,51)" fg:x="839" fg:w="2"/><text x="68.8518%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="68.6836%" y="293" width="0.0818%" height="15" fill="rgb(211,17,15)" fg:x="840" fg:w="1"/><text x="68.9336%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.6836%" y="277" width="0.0818%" height="15" fill="rgb(209,59,46)" fg:x="840" fg:w="1"/><text x="68.9336%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="68.7653%" y="405" width="0.0818%" height="15" fill="rgb(210,92,25)" fg:x="841" fg:w="1"/><text x="69.0153%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.7653%" y="389" width="0.0818%" height="15" fill="rgb(238,174,52)" fg:x="841" fg:w="1"/><text x="69.0153%" y="399.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.7653%" y="373" width="0.0818%" height="15" fill="rgb(230,73,7)" fg:x="841" fg:w="1"/><text x="69.0153%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.65%)</title><rect x="68.2747%" y="501" width="0.6541%" height="15" fill="rgb(243,124,40)" fg:x="835" fg:w="8"/><text x="68.5247%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.65%)</title><rect x="68.2747%" y="485" width="0.6541%" height="15" fill="rgb(244,170,11)" fg:x="835" fg:w="8"/><text x="68.5247%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="68.2747%" y="469" width="0.6541%" height="15" fill="rgb(207,114,54)" fg:x="835" fg:w="8"/><text x="68.5247%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.7653%" y="453" width="0.1635%" height="15" fill="rgb(205,42,20)" fg:x="841" fg:w="2"/><text x="69.0153%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.7653%" y="437" width="0.1635%" height="15" fill="rgb(230,30,28)" fg:x="841" fg:w="2"/><text x="69.0153%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.7653%" y="421" width="0.1635%" height="15" fill="rgb(205,73,54)" fg:x="841" fg:w="2"/><text x="69.0153%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.8471%" y="405" width="0.0818%" height="15" fill="rgb(254,227,23)" fg:x="842" fg:w="1"/><text x="69.0971%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.8471%" y="389" width="0.0818%" height="15" fill="rgb(228,202,34)" fg:x="842" fg:w="1"/><text x="69.0971%" y="399.50"></text></g><g><title>engine::session::internal::Added::find_refs (11 samples, 0.90%)</title><rect x="68.1112%" y="581" width="0.8994%" height="15" fill="rgb(222,225,37)" fg:x="833" fg:w="11"/><text x="68.3612%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (11 samples, 0.90%)</title><rect x="68.1112%" y="565" width="0.8994%" height="15" fill="rgb(221,14,54)" fg:x="833" fg:w="11"/><text x="68.3612%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.74%)</title><rect x="68.2747%" y="549" width="0.7359%" height="15" fill="rgb(254,102,2)" fg:x="835" fg:w="9"/><text x="68.5247%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.74%)</title><rect x="68.2747%" y="533" width="0.7359%" height="15" fill="rgb(232,104,17)" fg:x="835" fg:w="9"/><text x="68.5247%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.74%)</title><rect x="68.2747%" y="517" width="0.7359%" height="15" fill="rgb(250,220,14)" fg:x="835" fg:w="9"/><text x="68.5247%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.9289%" y="501" width="0.0818%" height="15" fill="rgb(241,158,9)" fg:x="843" fg:w="1"/><text x="69.1789%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.9289%" y="485" width="0.0818%" height="15" fill="rgb(246,9,43)" fg:x="843" fg:w="1"/><text x="69.1789%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9289%" y="469" width="0.0818%" height="15" fill="rgb(206,73,33)" fg:x="843" fg:w="1"/><text x="69.1789%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.9289%" y="453" width="0.0818%" height="15" fill="rgb(222,79,8)" fg:x="843" fg:w="1"/><text x="69.1789%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.9289%" y="437" width="0.0818%" height="15" fill="rgb(234,8,54)" fg:x="843" fg:w="1"/><text x="69.1789%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.9289%" y="421" width="0.0818%" height="15" fill="rgb(209,134,38)" fg:x="843" fg:w="1"/><text x="69.1789%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0106%" y="565" width="0.0818%" height="15" fill="rgb(230,127,29)" fg:x="844" fg:w="1"/><text x="69.2606%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0106%" y="549" width="0.0818%" height="15" fill="rgb(242,44,41)" fg:x="844" fg:w="1"/><text x="69.2606%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.0924%" y="565" width="0.0818%" height="15" fill="rgb(222,56,43)" fg:x="845" fg:w="1"/><text x="69.3424%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.0924%" y="549" width="0.0818%" height="15" fill="rgb(238,39,47)" fg:x="845" fg:w="1"/><text x="69.3424%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="69.0924%" y="533" width="0.0818%" height="15" fill="rgb(226,79,43)" fg:x="845" fg:w="1"/><text x="69.3424%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0924%" y="517" width="0.0818%" height="15" fill="rgb(242,105,53)" fg:x="845" fg:w="1"/><text x="69.3424%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0924%" y="501" width="0.0818%" height="15" fill="rgb(251,132,46)" fg:x="845" fg:w="1"/><text x="69.3424%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0924%" y="485" width="0.0818%" height="15" fill="rgb(231,77,14)" fg:x="845" fg:w="1"/><text x="69.3424%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0924%" y="469" width="0.0818%" height="15" fill="rgb(240,135,9)" fg:x="845" fg:w="1"/><text x="69.3424%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.0924%" y="453" width="0.0818%" height="15" fill="rgb(248,109,14)" fg:x="845" fg:w="1"/><text x="69.3424%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.0924%" y="437" width="0.0818%" height="15" fill="rgb(227,146,52)" fg:x="845" fg:w="1"/><text x="69.3424%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.0924%" y="421" width="0.0818%" height="15" fill="rgb(232,54,3)" fg:x="845" fg:w="1"/><text x="69.3424%" y="431.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.1742%" y="565" width="0.0818%" height="15" fill="rgb(229,201,43)" fg:x="846" fg:w="1"/><text x="69.4242%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.1742%" y="549" width="0.0818%" height="15" fill="rgb(252,161,33)" fg:x="846" fg:w="1"/><text x="69.4242%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.1742%" y="533" width="0.0818%" height="15" fill="rgb(226,146,40)" fg:x="846" fg:w="1"/><text x="69.4242%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="69.1742%" y="517" width="0.0818%" height="15" fill="rgb(219,47,25)" fg:x="846" fg:w="1"/><text x="69.4242%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.2559%" y="469" width="0.0818%" height="15" fill="rgb(250,135,13)" fg:x="847" fg:w="1"/><text x="69.5059%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.2559%" y="453" width="0.0818%" height="15" fill="rgb(219,229,18)" fg:x="847" fg:w="1"/><text x="69.5059%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.2559%" y="437" width="0.0818%" height="15" fill="rgb(217,152,27)" fg:x="847" fg:w="1"/><text x="69.5059%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.2559%" y="421" width="0.0818%" height="15" fill="rgb(225,71,47)" fg:x="847" fg:w="1"/><text x="69.5059%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.2559%" y="405" width="0.0818%" height="15" fill="rgb(220,139,14)" fg:x="847" fg:w="1"/><text x="69.5059%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="69.2559%" y="565" width="0.1635%" height="15" fill="rgb(247,54,32)" fg:x="847" fg:w="2"/><text x="69.5059%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.2559%" y="549" width="0.1635%" height="15" fill="rgb(252,131,39)" fg:x="847" fg:w="2"/><text x="69.5059%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2559%" y="533" width="0.1635%" height="15" fill="rgb(210,108,39)" fg:x="847" fg:w="2"/><text x="69.5059%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="69.2559%" y="517" width="0.1635%" height="15" fill="rgb(205,23,29)" fg:x="847" fg:w="2"/><text x="69.5059%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.2559%" y="501" width="0.1635%" height="15" fill="rgb(246,139,46)" fg:x="847" fg:w="2"/><text x="69.5059%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.2559%" y="485" width="0.1635%" height="15" fill="rgb(250,81,26)" fg:x="847" fg:w="2"/><text x="69.5059%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.3377%" y="469" width="0.0818%" height="15" fill="rgb(214,104,7)" fg:x="848" fg:w="1"/><text x="69.5877%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.3377%" y="453" width="0.0818%" height="15" fill="rgb(233,189,8)" fg:x="848" fg:w="1"/><text x="69.5877%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.4195%" y="405" width="0.0818%" height="15" fill="rgb(228,141,17)" fg:x="849" fg:w="1"/><text x="69.6695%" y="415.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.47%)</title><rect x="68.1112%" y="597" width="1.4718%" height="15" fill="rgb(247,157,1)" fg:x="833" fg:w="18"/><text x="68.3612%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="69.0106%" y="581" width="0.5724%" height="15" fill="rgb(249,225,5)" fg:x="844" fg:w="7"/><text x="69.2606%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="69.4195%" y="565" width="0.1635%" height="15" fill="rgb(242,55,13)" fg:x="849" fg:w="2"/><text x="69.6695%" y="575.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="69.4195%" y="549" width="0.1635%" height="15" fill="rgb(230,49,50)" fg:x="849" fg:w="2"/><text x="69.6695%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.4195%" y="533" width="0.1635%" height="15" fill="rgb(241,111,38)" fg:x="849" fg:w="2"/><text x="69.6695%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4195%" y="517" width="0.1635%" height="15" fill="rgb(252,155,4)" fg:x="849" fg:w="2"/><text x="69.6695%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.4195%" y="501" width="0.1635%" height="15" fill="rgb(212,69,32)" fg:x="849" fg:w="2"/><text x="69.6695%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4195%" y="485" width="0.1635%" height="15" fill="rgb(243,107,47)" fg:x="849" fg:w="2"/><text x="69.6695%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.4195%" y="469" width="0.1635%" height="15" fill="rgb(247,130,12)" fg:x="849" fg:w="2"/><text x="69.6695%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4195%" y="453" width="0.1635%" height="15" fill="rgb(233,74,16)" fg:x="849" fg:w="2"/><text x="69.6695%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.4195%" y="437" width="0.1635%" height="15" fill="rgb(208,58,18)" fg:x="849" fg:w="2"/><text x="69.6695%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="69.4195%" y="421" width="0.1635%" height="15" fill="rgb(242,225,1)" fg:x="849" fg:w="2"/><text x="69.6695%" y="431.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="69.5012%" y="405" width="0.0818%" height="15" fill="rgb(249,39,40)" fg:x="850" fg:w="1"/><text x="69.7512%" y="415.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="69.5012%" y="389" width="0.0818%" height="15" fill="rgb(207,72,44)" fg:x="850" fg:w="1"/><text x="69.7512%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7465%" y="501" width="0.0818%" height="15" fill="rgb(215,193,12)" fg:x="853" fg:w="1"/><text x="69.9965%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.7465%" y="485" width="0.0818%" height="15" fill="rgb(248,41,39)" fg:x="853" fg:w="1"/><text x="69.9965%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.7465%" y="469" width="0.0818%" height="15" fill="rgb(253,85,4)" fg:x="853" fg:w="1"/><text x="69.9965%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7465%" y="533" width="0.1635%" height="15" fill="rgb(243,70,31)" fg:x="853" fg:w="2"/><text x="69.9965%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7465%" y="517" width="0.1635%" height="15" fill="rgb(253,195,26)" fg:x="853" fg:w="2"/><text x="69.9965%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8283%" y="501" width="0.0818%" height="15" fill="rgb(243,42,11)" fg:x="854" fg:w="1"/><text x="70.0783%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.25%)</title><rect x="69.7465%" y="549" width="0.2453%" height="15" fill="rgb(239,66,17)" fg:x="853" fg:w="3"/><text x="69.9965%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9101%" y="533" width="0.0818%" height="15" fill="rgb(217,132,21)" fg:x="855" fg:w="1"/><text x="70.1601%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9101%" y="517" width="0.0818%" height="15" fill="rgb(252,202,21)" fg:x="855" fg:w="1"/><text x="70.1601%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.9101%" y="501" width="0.0818%" height="15" fill="rgb(233,98,36)" fg:x="855" fg:w="1"/><text x="70.1601%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.9101%" y="485" width="0.0818%" height="15" fill="rgb(216,153,54)" fg:x="855" fg:w="1"/><text x="70.1601%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.9101%" y="469" width="0.0818%" height="15" fill="rgb(250,99,7)" fg:x="855" fg:w="1"/><text x="70.1601%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9101%" y="453" width="0.0818%" height="15" fill="rgb(207,56,50)" fg:x="855" fg:w="1"/><text x="70.1601%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9101%" y="437" width="0.0818%" height="15" fill="rgb(244,61,34)" fg:x="855" fg:w="1"/><text x="70.1601%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.9101%" y="421" width="0.0818%" height="15" fill="rgb(241,50,38)" fg:x="855" fg:w="1"/><text x="70.1601%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.9101%" y="405" width="0.0818%" height="15" fill="rgb(212,166,30)" fg:x="855" fg:w="1"/><text x="70.1601%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.9101%" y="389" width="0.0818%" height="15" fill="rgb(249,127,32)" fg:x="855" fg:w="1"/><text x="70.1601%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.9101%" y="373" width="0.0818%" height="15" fill="rgb(209,103,0)" fg:x="855" fg:w="1"/><text x="70.1601%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9101%" y="357" width="0.0818%" height="15" fill="rgb(238,209,51)" fg:x="855" fg:w="1"/><text x="70.1601%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="69.9918%" y="549" width="0.1635%" height="15" fill="rgb(237,56,23)" fg:x="856" fg:w="2"/><text x="70.2418%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="69.9918%" y="533" width="0.1635%" height="15" fill="rgb(215,153,46)" fg:x="856" fg:w="2"/><text x="70.2418%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="69.9918%" y="517" width="0.1635%" height="15" fill="rgb(224,49,31)" fg:x="856" fg:w="2"/><text x="70.2418%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.9918%" y="501" width="0.1635%" height="15" fill="rgb(250,18,42)" fg:x="856" fg:w="2"/><text x="70.2418%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9918%" y="485" width="0.1635%" height="15" fill="rgb(215,176,39)" fg:x="856" fg:w="2"/><text x="70.2418%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.9918%" y="469" width="0.1635%" height="15" fill="rgb(223,77,29)" fg:x="856" fg:w="2"/><text x="70.2418%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9918%" y="453" width="0.1635%" height="15" fill="rgb(234,94,52)" fg:x="856" fg:w="2"/><text x="70.2418%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.9918%" y="437" width="0.1635%" height="15" fill="rgb(220,154,50)" fg:x="856" fg:w="2"/><text x="70.2418%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9918%" y="421" width="0.1635%" height="15" fill="rgb(212,11,10)" fg:x="856" fg:w="2"/><text x="70.2418%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.0736%" y="405" width="0.0818%" height="15" fill="rgb(205,166,19)" fg:x="857" fg:w="1"/><text x="70.3236%" y="415.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.1554%" y="549" width="0.0818%" height="15" fill="rgb(244,198,16)" fg:x="858" fg:w="1"/><text x="70.4054%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1554%" y="533" width="0.0818%" height="15" fill="rgb(219,69,12)" fg:x="858" fg:w="1"/><text x="70.4054%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.1554%" y="517" width="0.0818%" height="15" fill="rgb(245,30,7)" fg:x="858" fg:w="1"/><text x="70.4054%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.1554%" y="501" width="0.0818%" height="15" fill="rgb(218,221,48)" fg:x="858" fg:w="1"/><text x="70.4054%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1554%" y="485" width="0.0818%" height="15" fill="rgb(216,66,15)" fg:x="858" fg:w="1"/><text x="70.4054%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="70.2371%" y="549" width="0.0818%" height="15" fill="rgb(226,122,50)" fg:x="859" fg:w="1"/><text x="70.4871%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="70.3189%" y="549" width="0.1635%" height="15" fill="rgb(239,156,16)" fg:x="860" fg:w="2"/><text x="70.5689%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.3189%" y="533" width="0.1635%" height="15" fill="rgb(224,27,38)" fg:x="860" fg:w="2"/><text x="70.5689%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3189%" y="517" width="0.1635%" height="15" fill="rgb(224,39,27)" fg:x="860" fg:w="2"/><text x="70.5689%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="70.3189%" y="501" width="0.1635%" height="15" fill="rgb(215,92,29)" fg:x="860" fg:w="2"/><text x="70.5689%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3189%" y="485" width="0.1635%" height="15" fill="rgb(207,159,16)" fg:x="860" fg:w="2"/><text x="70.5689%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="70.3189%" y="469" width="0.1635%" height="15" fill="rgb(238,163,47)" fg:x="860" fg:w="2"/><text x="70.5689%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3189%" y="453" width="0.1635%" height="15" fill="rgb(219,91,49)" fg:x="860" fg:w="2"/><text x="70.5689%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3189%" y="437" width="0.1635%" height="15" fill="rgb(227,167,31)" fg:x="860" fg:w="2"/><text x="70.5689%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="70.3189%" y="421" width="0.1635%" height="15" fill="rgb(234,80,54)" fg:x="860" fg:w="2"/><text x="70.5689%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3189%" y="405" width="0.1635%" height="15" fill="rgb(212,114,2)" fg:x="860" fg:w="2"/><text x="70.5689%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="70.3189%" y="389" width="0.1635%" height="15" fill="rgb(234,50,24)" fg:x="860" fg:w="2"/><text x="70.5689%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4824%" y="453" width="0.0818%" height="15" fill="rgb(221,68,8)" fg:x="862" fg:w="1"/><text x="70.7324%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4824%" y="437" width="0.0818%" height="15" fill="rgb(254,180,31)" fg:x="862" fg:w="1"/><text x="70.7324%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4824%" y="421" width="0.0818%" height="15" fill="rgb(247,130,50)" fg:x="862" fg:w="1"/><text x="70.7324%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4824%" y="405" width="0.0818%" height="15" fill="rgb(211,109,4)" fg:x="862" fg:w="1"/><text x="70.7324%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.4824%" y="389" width="0.0818%" height="15" fill="rgb(238,50,21)" fg:x="862" fg:w="1"/><text x="70.7324%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4824%" y="373" width="0.0818%" height="15" fill="rgb(225,57,45)" fg:x="862" fg:w="1"/><text x="70.7324%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.5642%" y="453" width="0.0818%" height="15" fill="rgb(209,196,50)" fg:x="863" fg:w="1"/><text x="70.8142%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="70.5642%" y="437" width="0.0818%" height="15" fill="rgb(242,140,13)" fg:x="863" fg:w="1"/><text x="70.8142%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="70.4824%" y="485" width="0.2453%" height="15" fill="rgb(217,111,7)" fg:x="862" fg:w="3"/><text x="70.7324%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="70.4824%" y="469" width="0.2453%" height="15" fill="rgb(253,193,51)" fg:x="862" fg:w="3"/><text x="70.7324%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6460%" y="453" width="0.0818%" height="15" fill="rgb(252,70,29)" fg:x="864" fg:w="1"/><text x="70.8960%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.6460%" y="437" width="0.0818%" height="15" fill="rgb(232,127,12)" fg:x="864" fg:w="1"/><text x="70.8960%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.6460%" y="421" width="0.0818%" height="15" fill="rgb(211,180,21)" fg:x="864" fg:w="1"/><text x="70.8960%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (866 samples, 70.81%)</title><rect x="0.0000%" y="677" width="70.8095%" height="15" fill="rgb(229,72,13)" fg:x="0" fg:w="866"/><text x="0.2500%" y="687.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (866 samples, 70.81%)</title><rect x="0.0000%" y="661" width="70.8095%" height="15" fill="rgb(240,211,49)" fg:x="0" fg:w="866"/><text x="0.2500%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (866 samples, 70.81%)</title><rect x="0.0000%" y="645" width="70.8095%" height="15" fill="rgb(219,149,40)" fg:x="0" fg:w="866"/><text x="0.2500%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (539 samples, 44.07%)</title><rect x="26.7375%" y="629" width="44.0720%" height="15" fill="rgb(210,127,46)" fg:x="327" fg:w="539"/><text x="26.9875%" y="639.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (539 samples, 44.07%)</title><rect x="26.7375%" y="613" width="44.0720%" height="15" fill="rgb(220,106,7)" fg:x="327" fg:w="539"/><text x="26.9875%" y="623.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (15 samples, 1.23%)</title><rect x="69.5830%" y="597" width="1.2265%" height="15" fill="rgb(249,31,22)" fg:x="851" fg:w="15"/><text x="69.8330%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (15 samples, 1.23%)</title><rect x="69.5830%" y="581" width="1.2265%" height="15" fill="rgb(253,1,49)" fg:x="851" fg:w="15"/><text x="69.8330%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.23%)</title><rect x="69.5830%" y="565" width="1.2265%" height="15" fill="rgb(227,144,33)" fg:x="851" fg:w="15"/><text x="69.8330%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.33%)</title><rect x="70.4824%" y="549" width="0.3271%" height="15" fill="rgb(249,163,44)" fg:x="862" fg:w="4"/><text x="70.7324%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.33%)</title><rect x="70.4824%" y="533" width="0.3271%" height="15" fill="rgb(234,15,39)" fg:x="862" fg:w="4"/><text x="70.7324%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="70.4824%" y="517" width="0.3271%" height="15" fill="rgb(207,66,16)" fg:x="862" fg:w="4"/><text x="70.7324%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="70.4824%" y="501" width="0.3271%" height="15" fill="rgb(233,112,24)" fg:x="862" fg:w="4"/><text x="70.7324%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="70.7277%" y="485" width="0.0818%" height="15" fill="rgb(230,90,22)" fg:x="865" fg:w="1"/><text x="70.9777%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.8913%" y="629" width="0.0818%" height="15" fill="rgb(229,61,13)" fg:x="867" fg:w="1"/><text x="71.1413%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="70.8913%" y="613" width="0.0818%" height="15" fill="rgb(225,57,24)" fg:x="867" fg:w="1"/><text x="71.1413%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.8913%" y="597" width="0.0818%" height="15" fill="rgb(208,169,48)" fg:x="867" fg:w="1"/><text x="71.1413%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.8913%" y="581" width="0.0818%" height="15" fill="rgb(244,218,51)" fg:x="867" fg:w="1"/><text x="71.1413%" y="591.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.25%)</title><rect x="71.0548%" y="613" width="0.2453%" height="15" fill="rgb(214,148,10)" fg:x="869" fg:w="3"/><text x="71.3048%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.1365%" y="597" width="0.1635%" height="15" fill="rgb(225,174,27)" fg:x="870" fg:w="2"/><text x="71.3865%" y="607.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="71.1365%" y="581" width="0.1635%" height="15" fill="rgb(230,96,26)" fg:x="870" fg:w="2"/><text x="71.3865%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3001%" y="501" width="0.0818%" height="15" fill="rgb(232,10,30)" fg:x="872" fg:w="1"/><text x="71.5501%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.33%)</title><rect x="71.3001%" y="549" width="0.3271%" height="15" fill="rgb(222,8,50)" fg:x="872" fg:w="4"/><text x="71.5501%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="71.3001%" y="533" width="0.3271%" height="15" fill="rgb(213,81,27)" fg:x="872" fg:w="4"/><text x="71.5501%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.33%)</title><rect x="71.3001%" y="517" width="0.3271%" height="15" fill="rgb(245,50,10)" fg:x="872" fg:w="4"/><text x="71.5501%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.25%)</title><rect x="71.3818%" y="501" width="0.2453%" height="15" fill="rgb(216,100,18)" fg:x="873" fg:w="3"/><text x="71.6318%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.5454%" y="485" width="0.0818%" height="15" fill="rgb(236,147,54)" fg:x="875" fg:w="1"/><text x="71.7954%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.5454%" y="469" width="0.0818%" height="15" fill="rgb(205,143,26)" fg:x="875" fg:w="1"/><text x="71.7954%" y="479.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.82%)</title><rect x="70.9730%" y="629" width="0.8177%" height="15" fill="rgb(236,26,9)" fg:x="868" fg:w="10"/><text x="71.2230%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (6 samples, 0.49%)</title><rect x="71.3001%" y="613" width="0.4906%" height="15" fill="rgb(221,165,53)" fg:x="872" fg:w="6"/><text x="71.5501%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="71.3001%" y="597" width="0.4906%" height="15" fill="rgb(214,110,17)" fg:x="872" fg:w="6"/><text x="71.5501%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (6 samples, 0.49%)</title><rect x="71.3001%" y="581" width="0.4906%" height="15" fill="rgb(237,197,12)" fg:x="872" fg:w="6"/><text x="71.5501%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.49%)</title><rect x="71.3001%" y="565" width="0.4906%" height="15" fill="rgb(205,84,17)" fg:x="872" fg:w="6"/><text x="71.5501%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.6271%" y="549" width="0.1635%" height="15" fill="rgb(237,18,45)" fg:x="876" fg:w="2"/><text x="71.8771%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.6271%" y="533" width="0.1635%" height="15" fill="rgb(221,87,14)" fg:x="876" fg:w="2"/><text x="71.8771%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7089%" y="517" width="0.0818%" height="15" fill="rgb(238,186,15)" fg:x="877" fg:w="1"/><text x="71.9589%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="71.7089%" y="501" width="0.0818%" height="15" fill="rgb(208,115,11)" fg:x="877" fg:w="1"/><text x="71.9589%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.7089%" y="485" width="0.0818%" height="15" fill="rgb(254,175,0)" fg:x="877" fg:w="1"/><text x="71.9589%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7089%" y="469" width="0.0818%" height="15" fill="rgb(227,24,42)" fg:x="877" fg:w="1"/><text x="71.9589%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.7907%" y="533" width="0.0818%" height="15" fill="rgb(223,211,37)" fg:x="878" fg:w="1"/><text x="72.0407%" y="543.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="71.8724%" y="517" width="0.0818%" height="15" fill="rgb(235,49,27)" fg:x="879" fg:w="1"/><text x="72.1224%" y="527.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (6 samples, 0.49%)</title><rect x="71.7907%" y="549" width="0.4906%" height="15" fill="rgb(254,97,51)" fg:x="878" fg:w="6"/><text x="72.0407%" y="559.50"></text></g><g><title>libloading::safe::Library::new (5 samples, 0.41%)</title><rect x="71.8724%" y="533" width="0.4088%" height="15" fill="rgb(249,51,40)" fg:x="879" fg:w="5"/><text x="72.1224%" y="543.50"></text></g><g><title>dlopen (4 samples, 0.33%)</title><rect x="71.9542%" y="517" width="0.3271%" height="15" fill="rgb(210,128,45)" fg:x="880" fg:w="4"/><text x="72.2042%" y="527.50"></text></g><g><title>_dl_catch_error (4 samples, 0.33%)</title><rect x="71.9542%" y="501" width="0.3271%" height="15" fill="rgb(224,137,50)" fg:x="880" fg:w="4"/><text x="72.2042%" y="511.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="71.9542%" y="485" width="0.3271%" height="15" fill="rgb(242,15,9)" fg:x="880" fg:w="4"/><text x="72.2042%" y="495.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="71.9542%" y="469" width="0.3271%" height="15" fill="rgb(233,187,41)" fg:x="880" fg:w="4"/><text x="72.2042%" y="479.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.33%)</title><rect x="71.9542%" y="453" width="0.3271%" height="15" fill="rgb(227,2,29)" fg:x="880" fg:w="4"/><text x="72.2042%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.65%)</title><rect x="71.7907%" y="565" width="0.6541%" height="15" fill="rgb(222,70,3)" fg:x="878" fg:w="8"/><text x="72.0407%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="72.2813%" y="549" width="0.1635%" height="15" fill="rgb(213,11,42)" fg:x="884" fg:w="2"/><text x="72.5313%" y="559.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="72.2813%" y="533" width="0.1635%" height="15" fill="rgb(225,150,9)" fg:x="884" fg:w="2"/><text x="72.5313%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (9 samples, 0.74%)</title><rect x="71.7907%" y="629" width="0.7359%" height="15" fill="rgb(230,162,45)" fg:x="878" fg:w="9"/><text x="72.0407%" y="639.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (9 samples, 0.74%)</title><rect x="71.7907%" y="613" width="0.7359%" height="15" fill="rgb(222,14,52)" fg:x="878" fg:w="9"/><text x="72.0407%" y="623.50"></text></g><g><title>engine::session::Session::new (9 samples, 0.74%)</title><rect x="71.7907%" y="597" width="0.7359%" height="15" fill="rgb(254,198,14)" fg:x="878" fg:w="9"/><text x="72.0407%" y="607.50"></text></g><g><title>engine::session::Session::initialize (9 samples, 0.74%)</title><rect x="71.7907%" y="581" width="0.7359%" height="15" fill="rgb(220,217,30)" fg:x="878" fg:w="9"/><text x="72.0407%" y="591.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="72.4448%" y="565" width="0.0818%" height="15" fill="rgb(215,146,41)" fg:x="886" fg:w="1"/><text x="72.6948%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.4448%" y="549" width="0.0818%" height="15" fill="rgb(217,27,36)" fg:x="886" fg:w="1"/><text x="72.6948%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="72.4448%" y="533" width="0.0818%" height="15" fill="rgb(219,218,39)" fg:x="886" fg:w="1"/><text x="72.6948%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="72.4448%" y="517" width="0.0818%" height="15" fill="rgb(219,4,42)" fg:x="886" fg:w="1"/><text x="72.6948%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.4448%" y="501" width="0.0818%" height="15" fill="rgb(249,119,36)" fg:x="886" fg:w="1"/><text x="72.6948%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.6083%" y="613" width="0.0818%" height="15" fill="rgb(209,23,33)" fg:x="888" fg:w="1"/><text x="72.8583%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="72.6083%" y="597" width="0.0818%" height="15" fill="rgb(211,10,0)" fg:x="888" fg:w="1"/><text x="72.8583%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.6083%" y="581" width="0.0818%" height="15" fill="rgb(208,99,37)" fg:x="888" fg:w="1"/><text x="72.8583%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="72.6901%" y="565" width="0.0818%" height="15" fill="rgb(213,132,31)" fg:x="889" fg:w="1"/><text x="72.9401%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="72.7719%" y="501" width="0.0818%" height="15" fill="rgb(243,129,40)" fg:x="890" fg:w="1"/><text x="73.0219%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.7719%" y="485" width="0.0818%" height="15" fill="rgb(210,66,33)" fg:x="890" fg:w="1"/><text x="73.0219%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="72.7719%" y="469" width="0.0818%" height="15" fill="rgb(209,189,4)" fg:x="890" fg:w="1"/><text x="73.0219%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="72.7719%" y="453" width="0.0818%" height="15" fill="rgb(214,107,37)" fg:x="890" fg:w="1"/><text x="73.0219%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="72.7719%" y="437" width="0.0818%" height="15" fill="rgb(245,88,54)" fg:x="890" fg:w="1"/><text x="73.0219%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="72.8536%" y="485" width="0.0818%" height="15" fill="rgb(205,146,20)" fg:x="891" fg:w="1"/><text x="73.1036%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.25%)</title><rect x="72.9354%" y="469" width="0.2453%" height="15" fill="rgb(220,161,25)" fg:x="892" fg:w="3"/><text x="73.1854%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.25%)</title><rect x="72.9354%" y="453" width="0.2453%" height="15" fill="rgb(215,152,15)" fg:x="892" fg:w="3"/><text x="73.1854%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="73.0172%" y="437" width="0.1635%" height="15" fill="rgb(233,192,44)" fg:x="893" fg:w="2"/><text x="73.2672%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.0989%" y="421" width="0.0818%" height="15" fill="rgb(240,170,46)" fg:x="894" fg:w="1"/><text x="73.3489%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="73.2625%" y="437" width="0.0818%" height="15" fill="rgb(207,104,33)" fg:x="896" fg:w="1"/><text x="73.5125%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.2625%" y="421" width="0.0818%" height="15" fill="rgb(219,21,39)" fg:x="896" fg:w="1"/><text x="73.5125%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.2625%" y="405" width="0.0818%" height="15" fill="rgb(214,133,29)" fg:x="896" fg:w="1"/><text x="73.5125%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="73.2625%" y="389" width="0.0818%" height="15" fill="rgb(226,93,6)" fg:x="896" fg:w="1"/><text x="73.5125%" y="399.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="72.7719%" y="517" width="0.6541%" height="15" fill="rgb(252,222,34)" fg:x="890" fg:w="8"/><text x="73.0219%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="72.8536%" y="501" width="0.5724%" height="15" fill="rgb(252,92,48)" fg:x="891" fg:w="7"/><text x="73.1036%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="72.9354%" y="485" width="0.4906%" height="15" fill="rgb(245,223,24)" fg:x="892" fg:w="6"/><text x="73.1854%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="73.1807%" y="469" width="0.2453%" height="15" fill="rgb(205,176,3)" fg:x="895" fg:w="3"/><text x="73.4307%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="73.1807%" y="453" width="0.2453%" height="15" fill="rgb(235,151,15)" fg:x="895" fg:w="3"/><text x="73.4307%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="73.3442%" y="437" width="0.0818%" height="15" fill="rgb(237,209,11)" fg:x="897" fg:w="1"/><text x="73.5942%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="73.3442%" y="421" width="0.0818%" height="15" fill="rgb(243,227,24)" fg:x="897" fg:w="1"/><text x="73.5942%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="73.4260%" y="469" width="0.1635%" height="15" fill="rgb(239,193,16)" fg:x="898" fg:w="2"/><text x="73.6760%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.5078%" y="453" width="0.0818%" height="15" fill="rgb(231,27,9)" fg:x="899" fg:w="1"/><text x="73.7578%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="73.5895%" y="469" width="0.0818%" height="15" fill="rgb(219,169,10)" fg:x="900" fg:w="1"/><text x="73.8395%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="73.5895%" y="453" width="0.0818%" height="15" fill="rgb(244,229,43)" fg:x="900" fg:w="1"/><text x="73.8395%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5895%" y="437" width="0.0818%" height="15" fill="rgb(254,38,20)" fg:x="900" fg:w="1"/><text x="73.8395%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.6713%" y="421" width="0.0818%" height="15" fill="rgb(250,47,30)" fg:x="901" fg:w="1"/><text x="73.9213%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="73.6713%" y="405" width="0.0818%" height="15" fill="rgb(224,124,36)" fg:x="901" fg:w="1"/><text x="73.9213%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.6713%" y="389" width="0.0818%" height="15" fill="rgb(246,68,51)" fg:x="901" fg:w="1"/><text x="73.9213%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="73.7531%" y="405" width="0.0818%" height="15" fill="rgb(253,43,49)" fg:x="902" fg:w="1"/><text x="74.0031%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="73.6713%" y="437" width="0.2453%" height="15" fill="rgb(219,54,36)" fg:x="901" fg:w="3"/><text x="73.9213%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="73.7531%" y="421" width="0.1635%" height="15" fill="rgb(227,133,34)" fg:x="902" fg:w="2"/><text x="74.0031%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="73.8348%" y="405" width="0.0818%" height="15" fill="rgb(247,227,15)" fg:x="903" fg:w="1"/><text x="74.0848%" y="415.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="73.8348%" y="389" width="0.0818%" height="15" fill="rgb(229,96,14)" fg:x="903" fg:w="1"/><text x="74.0848%" y="399.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.31%)</title><rect x="72.6901%" y="613" width="1.3083%" height="15" fill="rgb(220,79,17)" fg:x="889" fg:w="16"/><text x="72.9401%" y="623.50"></text></g><g><title>engine::session::state::State::close (16 samples, 1.31%)</title><rect x="72.6901%" y="597" width="1.3083%" height="15" fill="rgb(205,131,53)" fg:x="889" fg:w="16"/><text x="72.9401%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (16 samples, 1.31%)</title><rect x="72.6901%" y="581" width="1.3083%" height="15" fill="rgb(209,50,29)" fg:x="889" fg:w="16"/><text x="72.9401%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (15 samples, 1.23%)</title><rect x="72.7719%" y="565" width="1.2265%" height="15" fill="rgb(245,86,46)" fg:x="890" fg:w="15"/><text x="73.0219%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.23%)</title><rect x="72.7719%" y="549" width="1.2265%" height="15" fill="rgb(235,66,46)" fg:x="890" fg:w="15"/><text x="73.0219%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (15 samples, 1.23%)</title><rect x="72.7719%" y="533" width="1.2265%" height="15" fill="rgb(232,148,31)" fg:x="890" fg:w="15"/><text x="73.0219%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (7 samples, 0.57%)</title><rect x="73.4260%" y="517" width="0.5724%" height="15" fill="rgb(217,149,8)" fg:x="898" fg:w="7"/><text x="73.6760%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="73.4260%" y="501" width="0.5724%" height="15" fill="rgb(209,183,11)" fg:x="898" fg:w="7"/><text x="73.6760%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.57%)</title><rect x="73.4260%" y="485" width="0.5724%" height="15" fill="rgb(208,55,20)" fg:x="898" fg:w="7"/><text x="73.6760%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.33%)</title><rect x="73.6713%" y="469" width="0.3271%" height="15" fill="rgb(218,39,14)" fg:x="901" fg:w="4"/><text x="73.9213%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="73.6713%" y="453" width="0.3271%" height="15" fill="rgb(216,169,33)" fg:x="901" fg:w="4"/><text x="73.9213%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="73.9166%" y="437" width="0.0818%" height="15" fill="rgb(233,80,24)" fg:x="904" fg:w="1"/><text x="74.1666%" y="447.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="73.9984%" y="613" width="0.0818%" height="15" fill="rgb(213,179,31)" fg:x="905" fg:w="1"/><text x="74.2484%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="73.9984%" y="597" width="0.0818%" height="15" fill="rgb(209,19,5)" fg:x="905" fg:w="1"/><text x="74.2484%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="73.9984%" y="581" width="0.0818%" height="15" fill="rgb(219,18,35)" fg:x="905" fg:w="1"/><text x="74.2484%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="73.9984%" y="565" width="0.0818%" height="15" fill="rgb(209,169,16)" fg:x="905" fg:w="1"/><text x="74.2484%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9984%" y="549" width="0.0818%" height="15" fill="rgb(245,90,51)" fg:x="905" fg:w="1"/><text x="74.2484%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9984%" y="533" width="0.0818%" height="15" fill="rgb(220,99,45)" fg:x="905" fg:w="1"/><text x="74.2484%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9984%" y="517" width="0.0818%" height="15" fill="rgb(249,89,25)" fg:x="905" fg:w="1"/><text x="74.2484%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9984%" y="501" width="0.0818%" height="15" fill="rgb(239,193,0)" fg:x="905" fg:w="1"/><text x="74.2484%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9984%" y="485" width="0.0818%" height="15" fill="rgb(231,126,1)" fg:x="905" fg:w="1"/><text x="74.2484%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9984%" y="469" width="0.0818%" height="15" fill="rgb(243,166,3)" fg:x="905" fg:w="1"/><text x="74.2484%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9984%" y="453" width="0.0818%" height="15" fill="rgb(223,22,34)" fg:x="905" fg:w="1"/><text x="74.2484%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9984%" y="437" width="0.0818%" height="15" fill="rgb(251,52,51)" fg:x="905" fg:w="1"/><text x="74.2484%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9984%" y="421" width="0.0818%" height="15" fill="rgb(221,165,28)" fg:x="905" fg:w="1"/><text x="74.2484%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9984%" y="405" width="0.0818%" height="15" fill="rgb(218,121,47)" fg:x="905" fg:w="1"/><text x="74.2484%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9984%" y="389" width="0.0818%" height="15" fill="rgb(209,120,9)" fg:x="905" fg:w="1"/><text x="74.2484%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9984%" y="373" width="0.0818%" height="15" fill="rgb(236,68,12)" fg:x="905" fg:w="1"/><text x="74.2484%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9984%" y="357" width="0.0818%" height="15" fill="rgb(225,194,26)" fg:x="905" fg:w="1"/><text x="74.2484%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.1619%" y="533" width="0.0818%" height="15" fill="rgb(231,84,39)" fg:x="907" fg:w="1"/><text x="74.4119%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.1619%" y="517" width="0.0818%" height="15" fill="rgb(210,11,45)" fg:x="907" fg:w="1"/><text x="74.4119%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1619%" y="501" width="0.0818%" height="15" fill="rgb(224,54,52)" fg:x="907" fg:w="1"/><text x="74.4119%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1619%" y="485" width="0.0818%" height="15" fill="rgb(238,102,14)" fg:x="907" fg:w="1"/><text x="74.4119%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1619%" y="469" width="0.0818%" height="15" fill="rgb(243,160,52)" fg:x="907" fg:w="1"/><text x="74.4119%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1619%" y="453" width="0.0818%" height="15" fill="rgb(216,114,19)" fg:x="907" fg:w="1"/><text x="74.4119%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.1619%" y="437" width="0.0818%" height="15" fill="rgb(244,166,37)" fg:x="907" fg:w="1"/><text x="74.4119%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.1619%" y="421" width="0.0818%" height="15" fill="rgb(246,29,44)" fg:x="907" fg:w="1"/><text x="74.4119%" y="431.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="74.1619%" y="565" width="0.1635%" height="15" fill="rgb(215,56,53)" fg:x="907" fg:w="2"/><text x="74.4119%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="74.1619%" y="549" width="0.1635%" height="15" fill="rgb(217,60,2)" fg:x="907" fg:w="2"/><text x="74.4119%" y="559.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="74.2437%" y="533" width="0.0818%" height="15" fill="rgb(207,26,24)" fg:x="908" fg:w="1"/><text x="74.4937%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2437%" y="517" width="0.0818%" height="15" fill="rgb(252,210,15)" fg:x="908" fg:w="1"/><text x="74.4937%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="74.3254%" y="533" width="0.0818%" height="15" fill="rgb(253,209,26)" fg:x="909" fg:w="1"/><text x="74.5754%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="74.3254%" y="517" width="0.0818%" height="15" fill="rgb(238,170,14)" fg:x="909" fg:w="1"/><text x="74.5754%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.33%)</title><rect x="74.1619%" y="597" width="0.3271%" height="15" fill="rgb(216,178,15)" fg:x="907" fg:w="4"/><text x="74.4119%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="74.1619%" y="581" width="0.3271%" height="15" fill="rgb(250,197,2)" fg:x="907" fg:w="4"/><text x="74.4119%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="74.3254%" y="565" width="0.1635%" height="15" fill="rgb(212,70,42)" fg:x="909" fg:w="2"/><text x="74.5754%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="74.3254%" y="549" width="0.1635%" height="15" fill="rgb(227,213,9)" fg:x="909" fg:w="2"/><text x="74.5754%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="74.4072%" y="533" width="0.0818%" height="15" fill="rgb(245,99,25)" fg:x="910" fg:w="1"/><text x="74.6572%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.4072%" y="517" width="0.0818%" height="15" fill="rgb(250,82,29)" fg:x="910" fg:w="1"/><text x="74.6572%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="74.4072%" y="501" width="0.0818%" height="15" fill="rgb(241,226,54)" fg:x="910" fg:w="1"/><text x="74.6572%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="74.0801%" y="613" width="0.4906%" height="15" fill="rgb(221,99,41)" fg:x="906" fg:w="6"/><text x="74.3301%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="74.4890%" y="597" width="0.0818%" height="15" fill="rgb(213,90,21)" fg:x="911" fg:w="1"/><text x="74.7390%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.4890%" y="581" width="0.0818%" height="15" fill="rgb(205,208,24)" fg:x="911" fg:w="1"/><text x="74.7390%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.4890%" y="565" width="0.0818%" height="15" fill="rgb(246,31,12)" fg:x="911" fg:w="1"/><text x="74.7390%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4890%" y="549" width="0.0818%" height="15" fill="rgb(213,154,6)" fg:x="911" fg:w="1"/><text x="74.7390%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.4890%" y="533" width="0.0818%" height="15" fill="rgb(222,163,29)" fg:x="911" fg:w="1"/><text x="74.7390%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4890%" y="517" width="0.0818%" height="15" fill="rgb(227,201,8)" fg:x="911" fg:w="1"/><text x="74.7390%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="74.5707%" y="613" width="0.0818%" height="15" fill="rgb(233,9,32)" fg:x="912" fg:w="1"/><text x="74.8207%" y="623.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="74.5707%" y="597" width="0.0818%" height="15" fill="rgb(217,54,24)" fg:x="912" fg:w="1"/><text x="74.8207%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.5707%" y="581" width="0.0818%" height="15" fill="rgb(235,192,0)" fg:x="912" fg:w="1"/><text x="74.8207%" y="591.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="74.5707%" y="565" width="0.0818%" height="15" fill="rgb(235,45,9)" fg:x="912" fg:w="1"/><text x="74.8207%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.5707%" y="549" width="0.0818%" height="15" fill="rgb(246,42,40)" fg:x="912" fg:w="1"/><text x="74.8207%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.5707%" y="533" width="0.0818%" height="15" fill="rgb(248,111,24)" fg:x="912" fg:w="1"/><text x="74.8207%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6525%" y="549" width="0.0818%" height="15" fill="rgb(249,65,22)" fg:x="913" fg:w="1"/><text x="74.9025%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6525%" y="533" width="0.0818%" height="15" fill="rgb(238,111,51)" fg:x="913" fg:w="1"/><text x="74.9025%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.6525%" y="517" width="0.0818%" height="15" fill="rgb(250,118,22)" fg:x="913" fg:w="1"/><text x="74.9025%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6525%" y="501" width="0.0818%" height="15" fill="rgb(234,84,26)" fg:x="913" fg:w="1"/><text x="74.9025%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.6525%" y="485" width="0.0818%" height="15" fill="rgb(243,172,12)" fg:x="913" fg:w="1"/><text x="74.9025%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.6525%" y="469" width="0.0818%" height="15" fill="rgb(236,150,49)" fg:x="913" fg:w="1"/><text x="74.9025%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.6525%" y="453" width="0.0818%" height="15" fill="rgb(225,197,26)" fg:x="913" fg:w="1"/><text x="74.9025%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.6525%" y="437" width="0.0818%" height="15" fill="rgb(214,17,42)" fg:x="913" fg:w="1"/><text x="74.9025%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.6525%" y="421" width="0.0818%" height="15" fill="rgb(224,165,40)" fg:x="913" fg:w="1"/><text x="74.9025%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.6525%" y="405" width="0.0818%" height="15" fill="rgb(246,100,4)" fg:x="913" fg:w="1"/><text x="74.9025%" y="415.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="74.6525%" y="565" width="0.1635%" height="15" fill="rgb(222,103,0)" fg:x="913" fg:w="2"/><text x="74.9025%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7343%" y="549" width="0.0818%" height="15" fill="rgb(227,189,26)" fg:x="914" fg:w="1"/><text x="74.9843%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7343%" y="533" width="0.0818%" height="15" fill="rgb(214,202,17)" fg:x="914" fg:w="1"/><text x="74.9843%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7343%" y="517" width="0.0818%" height="15" fill="rgb(229,111,3)" fg:x="914" fg:w="1"/><text x="74.9843%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7343%" y="501" width="0.0818%" height="15" fill="rgb(229,172,15)" fg:x="914" fg:w="1"/><text x="74.9843%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.7343%" y="485" width="0.0818%" height="15" fill="rgb(230,224,35)" fg:x="914" fg:w="1"/><text x="74.9843%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.7343%" y="469" width="0.0818%" height="15" fill="rgb(251,141,6)" fg:x="914" fg:w="1"/><text x="74.9843%" y="479.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.25%)</title><rect x="74.6525%" y="581" width="0.2453%" height="15" fill="rgb(225,208,6)" fg:x="913" fg:w="3"/><text x="74.9025%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="74.8160%" y="565" width="0.0818%" height="15" fill="rgb(246,181,16)" fg:x="915" fg:w="1"/><text x="75.0660%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="74.8160%" y="549" width="0.0818%" height="15" fill="rgb(227,129,36)" fg:x="915" fg:w="1"/><text x="75.0660%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="74.8160%" y="533" width="0.0818%" height="15" fill="rgb(248,117,24)" fg:x="915" fg:w="1"/><text x="75.0660%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="74.8160%" y="517" width="0.0818%" height="15" fill="rgb(214,185,35)" fg:x="915" fg:w="1"/><text x="75.0660%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.8160%" y="501" width="0.0818%" height="15" fill="rgb(236,150,34)" fg:x="915" fg:w="1"/><text x="75.0660%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8978%" y="565" width="0.0818%" height="15" fill="rgb(243,228,27)" fg:x="916" fg:w="1"/><text x="75.1478%" y="575.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (5 samples, 0.41%)</title><rect x="74.6525%" y="613" width="0.4088%" height="15" fill="rgb(245,77,44)" fg:x="913" fg:w="5"/><text x="74.9025%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.41%)</title><rect x="74.6525%" y="597" width="0.4088%" height="15" fill="rgb(235,214,42)" fg:x="913" fg:w="5"/><text x="74.9025%" y="607.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="74.8978%" y="581" width="0.1635%" height="15" fill="rgb(221,74,3)" fg:x="916" fg:w="2"/><text x="75.1478%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="74.9796%" y="565" width="0.0818%" height="15" fill="rgb(206,121,29)" fg:x="917" fg:w="1"/><text x="75.2296%" y="575.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9796%" y="549" width="0.0818%" height="15" fill="rgb(249,131,53)" fg:x="917" fg:w="1"/><text x="75.2296%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9796%" y="533" width="0.0818%" height="15" fill="rgb(236,170,29)" fg:x="917" fg:w="1"/><text x="75.2296%" y="543.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="74.9796%" y="517" width="0.0818%" height="15" fill="rgb(247,96,15)" fg:x="917" fg:w="1"/><text x="75.2296%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="74.9796%" y="501" width="0.0818%" height="15" fill="rgb(211,210,7)" fg:x="917" fg:w="1"/><text x="75.2296%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.9796%" y="485" width="0.0818%" height="15" fill="rgb(240,88,50)" fg:x="917" fg:w="1"/><text x="75.2296%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0613%" y="517" width="0.0818%" height="15" fill="rgb(209,229,26)" fg:x="918" fg:w="1"/><text x="75.3113%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.0613%" y="597" width="0.1635%" height="15" fill="rgb(210,68,23)" fg:x="918" fg:w="2"/><text x="75.3113%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.0613%" y="581" width="0.1635%" height="15" fill="rgb(229,180,13)" fg:x="918" fg:w="2"/><text x="75.3113%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="75.0613%" y="565" width="0.1635%" height="15" fill="rgb(236,53,44)" fg:x="918" fg:w="2"/><text x="75.3113%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0613%" y="549" width="0.1635%" height="15" fill="rgb(244,214,29)" fg:x="918" fg:w="2"/><text x="75.3113%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.0613%" y="533" width="0.1635%" height="15" fill="rgb(220,75,29)" fg:x="918" fg:w="2"/><text x="75.3113%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.1431%" y="517" width="0.0818%" height="15" fill="rgb(214,183,37)" fg:x="919" fg:w="1"/><text x="75.3931%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="75.2249%" y="597" width="0.0818%" height="15" fill="rgb(239,117,29)" fg:x="920" fg:w="1"/><text x="75.4749%" y="607.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="75.2249%" y="581" width="0.0818%" height="15" fill="rgb(237,171,35)" fg:x="920" fg:w="1"/><text x="75.4749%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.2249%" y="565" width="0.0818%" height="15" fill="rgb(229,178,53)" fg:x="920" fg:w="1"/><text x="75.4749%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="75.2249%" y="549" width="0.0818%" height="15" fill="rgb(210,102,19)" fg:x="920" fg:w="1"/><text x="75.4749%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="75.3066%" y="517" width="0.0818%" height="15" fill="rgb(235,127,22)" fg:x="921" fg:w="1"/><text x="75.5566%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3066%" y="501" width="0.0818%" height="15" fill="rgb(244,31,31)" fg:x="921" fg:w="1"/><text x="75.5566%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.3066%" y="485" width="0.0818%" height="15" fill="rgb(231,43,21)" fg:x="921" fg:w="1"/><text x="75.5566%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3066%" y="469" width="0.0818%" height="15" fill="rgb(217,131,35)" fg:x="921" fg:w="1"/><text x="75.5566%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3066%" y="453" width="0.0818%" height="15" fill="rgb(221,149,4)" fg:x="921" fg:w="1"/><text x="75.5566%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="75.3066%" y="437" width="0.0818%" height="15" fill="rgb(232,170,28)" fg:x="921" fg:w="1"/><text x="75.5566%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="75.3066%" y="597" width="0.1635%" height="15" fill="rgb(238,56,10)" fg:x="921" fg:w="2"/><text x="75.5566%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="75.3066%" y="581" width="0.1635%" height="15" fill="rgb(235,196,14)" fg:x="921" fg:w="2"/><text x="75.5566%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="75.3066%" y="565" width="0.1635%" height="15" fill="rgb(216,45,48)" fg:x="921" fg:w="2"/><text x="75.5566%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="75.3066%" y="549" width="0.1635%" height="15" fill="rgb(238,213,17)" fg:x="921" fg:w="2"/><text x="75.5566%" y="559.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="75.3066%" y="533" width="0.1635%" height="15" fill="rgb(212,13,2)" fg:x="921" fg:w="2"/><text x="75.5566%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="75.3884%" y="517" width="0.0818%" height="15" fill="rgb(240,114,20)" fg:x="922" fg:w="1"/><text x="75.6384%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="75.3884%" y="501" width="0.0818%" height="15" fill="rgb(228,41,40)" fg:x="922" fg:w="1"/><text x="75.6384%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="75.3884%" y="485" width="0.0818%" height="15" fill="rgb(244,132,35)" fg:x="922" fg:w="1"/><text x="75.6384%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3884%" y="469" width="0.0818%" height="15" fill="rgb(253,189,4)" fg:x="922" fg:w="1"/><text x="75.6384%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3884%" y="453" width="0.0818%" height="15" fill="rgb(224,37,19)" fg:x="922" fg:w="1"/><text x="75.6384%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="75.3884%" y="437" width="0.0818%" height="15" fill="rgb(235,223,18)" fg:x="922" fg:w="1"/><text x="75.6384%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="75.3884%" y="421" width="0.0818%" height="15" fill="rgb(235,163,25)" fg:x="922" fg:w="1"/><text x="75.6384%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="75.4702%" y="597" width="0.0818%" height="15" fill="rgb(217,145,28)" fg:x="923" fg:w="1"/><text x="75.7202%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.4702%" y="581" width="0.0818%" height="15" fill="rgb(223,223,32)" fg:x="923" fg:w="1"/><text x="75.7202%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.5519%" y="469" width="0.1635%" height="15" fill="rgb(227,189,39)" fg:x="924" fg:w="2"/><text x="75.8019%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.5519%" y="453" width="0.1635%" height="15" fill="rgb(248,10,22)" fg:x="924" fg:w="2"/><text x="75.8019%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.5519%" y="437" width="0.1635%" height="15" fill="rgb(248,46,39)" fg:x="924" fg:w="2"/><text x="75.8019%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="75.5519%" y="421" width="0.1635%" height="15" fill="rgb(248,113,48)" fg:x="924" fg:w="2"/><text x="75.8019%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.6337%" y="405" width="0.0818%" height="15" fill="rgb(245,16,25)" fg:x="925" fg:w="1"/><text x="75.8837%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.6337%" y="389" width="0.0818%" height="15" fill="rgb(249,152,16)" fg:x="925" fg:w="1"/><text x="75.8837%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.6337%" y="373" width="0.0818%" height="15" fill="rgb(250,16,1)" fg:x="925" fg:w="1"/><text x="75.8837%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.6337%" y="357" width="0.0818%" height="15" fill="rgb(249,138,3)" fg:x="925" fg:w="1"/><text x="75.8837%" y="367.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="75.7155%" y="421" width="0.0818%" height="15" fill="rgb(227,71,41)" fg:x="926" fg:w="1"/><text x="75.9655%" y="431.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="75.7155%" y="405" width="0.0818%" height="15" fill="rgb(209,184,23)" fg:x="926" fg:w="1"/><text x="75.9655%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.7972%" y="405" width="0.0818%" height="15" fill="rgb(223,215,31)" fg:x="927" fg:w="1"/><text x="76.0472%" y="415.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.7972%" y="389" width="0.0818%" height="15" fill="rgb(210,146,28)" fg:x="927" fg:w="1"/><text x="76.0472%" y="399.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.7972%" y="373" width="0.0818%" height="15" fill="rgb(209,183,41)" fg:x="927" fg:w="1"/><text x="76.0472%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.7972%" y="357" width="0.0818%" height="15" fill="rgb(209,224,45)" fg:x="927" fg:w="1"/><text x="76.0472%" y="367.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="75.7972%" y="421" width="0.1635%" height="15" fill="rgb(224,209,51)" fg:x="927" fg:w="2"/><text x="76.0472%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="75.8790%" y="405" width="0.0818%" height="15" fill="rgb(223,17,39)" fg:x="928" fg:w="1"/><text x="76.1290%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="75.8790%" y="389" width="0.0818%" height="15" fill="rgb(234,204,37)" fg:x="928" fg:w="1"/><text x="76.1290%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.33%)</title><rect x="75.7155%" y="437" width="0.3271%" height="15" fill="rgb(236,120,5)" fg:x="926" fg:w="4"/><text x="75.9655%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="75.9608%" y="421" width="0.0818%" height="15" fill="rgb(248,97,27)" fg:x="929" fg:w="1"/><text x="76.2108%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="75.7155%" y="469" width="0.4906%" height="15" fill="rgb(240,66,17)" fg:x="926" fg:w="6"/><text x="75.9655%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="75.7155%" y="453" width="0.4906%" height="15" fill="rgb(210,79,3)" fg:x="926" fg:w="6"/><text x="75.9655%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.0425%" y="437" width="0.1635%" height="15" fill="rgb(214,176,27)" fg:x="930" fg:w="2"/><text x="76.2925%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.74%)</title><rect x="75.5519%" y="485" width="0.7359%" height="15" fill="rgb(235,185,3)" fg:x="924" fg:w="9"/><text x="75.8019%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.2061%" y="469" width="0.0818%" height="15" fill="rgb(227,24,12)" fg:x="932" fg:w="1"/><text x="76.4561%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.2061%" y="453" width="0.0818%" height="15" fill="rgb(252,169,48)" fg:x="932" fg:w="1"/><text x="76.4561%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.2061%" y="437" width="0.0818%" height="15" fill="rgb(212,65,1)" fg:x="932" fg:w="1"/><text x="76.4561%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.2061%" y="421" width="0.0818%" height="15" fill="rgb(242,39,24)" fg:x="932" fg:w="1"/><text x="76.4561%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.2061%" y="405" width="0.0818%" height="15" fill="rgb(249,32,23)" fg:x="932" fg:w="1"/><text x="76.4561%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.2061%" y="389" width="0.0818%" height="15" fill="rgb(251,195,23)" fg:x="932" fg:w="1"/><text x="76.4561%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2878%" y="485" width="0.0818%" height="15" fill="rgb(236,174,8)" fg:x="933" fg:w="1"/><text x="76.5378%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="76.2878%" y="469" width="0.0818%" height="15" fill="rgb(220,197,8)" fg:x="933" fg:w="1"/><text x="76.5378%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2878%" y="453" width="0.0818%" height="15" fill="rgb(240,108,37)" fg:x="933" fg:w="1"/><text x="76.5378%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2878%" y="437" width="0.0818%" height="15" fill="rgb(232,176,24)" fg:x="933" fg:w="1"/><text x="76.5378%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.2878%" y="421" width="0.0818%" height="15" fill="rgb(243,35,29)" fg:x="933" fg:w="1"/><text x="76.5378%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2878%" y="405" width="0.0818%" height="15" fill="rgb(210,37,18)" fg:x="933" fg:w="1"/><text x="76.5378%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="76.3696%" y="437" width="0.1635%" height="15" fill="rgb(224,184,40)" fg:x="934" fg:w="2"/><text x="76.6196%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.4513%" y="421" width="0.0818%" height="15" fill="rgb(236,39,29)" fg:x="935" fg:w="1"/><text x="76.7013%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="76.5331%" y="437" width="0.0818%" height="15" fill="rgb(232,48,39)" fg:x="936" fg:w="1"/><text x="76.7831%" y="447.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="76.6149%" y="437" width="0.0818%" height="15" fill="rgb(236,34,42)" fg:x="937" fg:w="1"/><text x="76.8649%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="76.6149%" y="421" width="0.0818%" height="15" fill="rgb(243,106,37)" fg:x="937" fg:w="1"/><text x="76.8649%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="76.6966%" y="389" width="0.1635%" height="15" fill="rgb(218,96,6)" fg:x="938" fg:w="2"/><text x="76.9466%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.6966%" y="373" width="0.1635%" height="15" fill="rgb(235,130,12)" fg:x="938" fg:w="2"/><text x="76.9466%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.6966%" y="357" width="0.1635%" height="15" fill="rgb(231,95,0)" fg:x="938" fg:w="2"/><text x="76.9466%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.7784%" y="341" width="0.0818%" height="15" fill="rgb(228,12,23)" fg:x="939" fg:w="1"/><text x="77.0284%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="76.6966%" y="421" width="0.3271%" height="15" fill="rgb(216,12,1)" fg:x="938" fg:w="4"/><text x="76.9466%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.33%)</title><rect x="76.6966%" y="405" width="0.3271%" height="15" fill="rgb(219,59,3)" fg:x="938" fg:w="4"/><text x="76.9466%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.8602%" y="389" width="0.1635%" height="15" fill="rgb(215,208,46)" fg:x="940" fg:w="2"/><text x="77.1102%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="76.9419%" y="373" width="0.0818%" height="15" fill="rgb(254,224,29)" fg:x="941" fg:w="1"/><text x="77.1919%" y="383.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.55%)</title><rect x="75.5519%" y="597" width="1.5536%" height="15" fill="rgb(232,14,29)" fg:x="924" fg:w="19"/><text x="75.8019%" y="607.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.55%)</title><rect x="75.5519%" y="581" width="1.5536%" height="15" fill="rgb(208,45,52)" fg:x="924" fg:w="19"/><text x="75.8019%" y="591.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.55%)</title><rect x="75.5519%" y="565" width="1.5536%" height="15" fill="rgb(234,191,28)" fg:x="924" fg:w="19"/><text x="75.8019%" y="575.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.55%)</title><rect x="75.5519%" y="549" width="1.5536%" height="15" fill="rgb(244,67,43)" fg:x="924" fg:w="19"/><text x="75.8019%" y="559.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.55%)</title><rect x="75.5519%" y="533" width="1.5536%" height="15" fill="rgb(236,189,24)" fg:x="924" fg:w="19"/><text x="75.8019%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.55%)</title><rect x="75.5519%" y="517" width="1.5536%" height="15" fill="rgb(239,214,33)" fg:x="924" fg:w="19"/><text x="75.8019%" y="527.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.55%)</title><rect x="75.5519%" y="501" width="1.5536%" height="15" fill="rgb(226,176,41)" fg:x="924" fg:w="19"/><text x="75.8019%" y="511.50"></text></g><g><title>kernel::model::any_entity_changes (9 samples, 0.74%)</title><rect x="76.3696%" y="485" width="0.7359%" height="15" fill="rgb(248,47,8)" fg:x="934" fg:w="9"/><text x="76.6196%" y="495.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.74%)</title><rect x="76.3696%" y="469" width="0.7359%" height="15" fill="rgb(218,81,44)" fg:x="934" fg:w="9"/><text x="76.6196%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.74%)</title><rect x="76.3696%" y="453" width="0.7359%" height="15" fill="rgb(213,98,6)" fg:x="934" fg:w="9"/><text x="76.6196%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="76.6966%" y="437" width="0.4088%" height="15" fill="rgb(222,85,22)" fg:x="938" fg:w="5"/><text x="76.9466%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.0237%" y="421" width="0.0818%" height="15" fill="rgb(239,46,39)" fg:x="942" fg:w="1"/><text x="77.2737%" y="431.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.1055%" y="565" width="0.0818%" height="15" fill="rgb(237,12,29)" fg:x="943" fg:w="1"/><text x="77.3555%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1055%" y="549" width="0.0818%" height="15" fill="rgb(214,77,8)" fg:x="943" fg:w="1"/><text x="77.3555%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.1055%" y="533" width="0.0818%" height="15" fill="rgb(217,168,37)" fg:x="943" fg:w="1"/><text x="77.3555%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1055%" y="517" width="0.0818%" height="15" fill="rgb(221,217,23)" fg:x="943" fg:w="1"/><text x="77.3555%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1055%" y="501" width="0.0818%" height="15" fill="rgb(243,229,36)" fg:x="943" fg:w="1"/><text x="77.3555%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1055%" y="485" width="0.0818%" height="15" fill="rgb(251,163,40)" fg:x="943" fg:w="1"/><text x="77.3555%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1055%" y="469" width="0.0818%" height="15" fill="rgb(237,222,12)" fg:x="943" fg:w="1"/><text x="77.3555%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.1055%" y="453" width="0.0818%" height="15" fill="rgb(248,132,6)" fg:x="943" fg:w="1"/><text x="77.3555%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.1055%" y="437" width="0.0818%" height="15" fill="rgb(227,167,50)" fg:x="943" fg:w="1"/><text x="77.3555%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1872%" y="437" width="0.0818%" height="15" fill="rgb(242,84,37)" fg:x="944" fg:w="1"/><text x="77.4372%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.1872%" y="421" width="0.0818%" height="15" fill="rgb(212,4,50)" fg:x="944" fg:w="1"/><text x="77.4372%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.1872%" y="405" width="0.0818%" height="15" fill="rgb(230,228,32)" fg:x="944" fg:w="1"/><text x="77.4372%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.1872%" y="389" width="0.0818%" height="15" fill="rgb(248,217,23)" fg:x="944" fg:w="1"/><text x="77.4372%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.1872%" y="373" width="0.0818%" height="15" fill="rgb(238,197,32)" fg:x="944" fg:w="1"/><text x="77.4372%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1872%" y="357" width="0.0818%" height="15" fill="rgb(236,106,1)" fg:x="944" fg:w="1"/><text x="77.4372%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.1872%" y="341" width="0.0818%" height="15" fill="rgb(219,228,13)" fg:x="944" fg:w="1"/><text x="77.4372%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.1872%" y="325" width="0.0818%" height="15" fill="rgb(238,30,35)" fg:x="944" fg:w="1"/><text x="77.4372%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.1872%" y="309" width="0.0818%" height="15" fill="rgb(236,70,23)" fg:x="944" fg:w="1"/><text x="77.4372%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.1872%" y="293" width="0.0818%" height="15" fill="rgb(249,104,48)" fg:x="944" fg:w="1"/><text x="77.4372%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.1872%" y="277" width="0.0818%" height="15" fill="rgb(254,117,50)" fg:x="944" fg:w="1"/><text x="77.4372%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.1872%" y="261" width="0.0818%" height="15" fill="rgb(223,152,4)" fg:x="944" fg:w="1"/><text x="77.4372%" y="271.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="77.1872%" y="549" width="0.1635%" height="15" fill="rgb(245,6,2)" fg:x="944" fg:w="2"/><text x="77.4372%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="77.1872%" y="533" width="0.1635%" height="15" fill="rgb(249,150,24)" fg:x="944" fg:w="2"/><text x="77.4372%" y="543.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="77.1872%" y="517" width="0.1635%" height="15" fill="rgb(228,185,42)" fg:x="944" fg:w="2"/><text x="77.4372%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="77.1872%" y="501" width="0.1635%" height="15" fill="rgb(226,39,33)" fg:x="944" fg:w="2"/><text x="77.4372%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.1872%" y="485" width="0.1635%" height="15" fill="rgb(221,166,19)" fg:x="944" fg:w="2"/><text x="77.4372%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.1872%" y="469" width="0.1635%" height="15" fill="rgb(209,109,2)" fg:x="944" fg:w="2"/><text x="77.4372%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="77.1872%" y="453" width="0.1635%" height="15" fill="rgb(252,216,26)" fg:x="944" fg:w="2"/><text x="77.4372%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.2690%" y="437" width="0.0818%" height="15" fill="rgb(227,173,36)" fg:x="945" fg:w="1"/><text x="77.5190%" y="447.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="77.3508%" y="549" width="0.0818%" height="15" fill="rgb(209,90,7)" fg:x="946" fg:w="1"/><text x="77.6008%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.3508%" y="533" width="0.0818%" height="15" fill="rgb(250,194,11)" fg:x="946" fg:w="1"/><text x="77.6008%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="77.3508%" y="517" width="0.0818%" height="15" fill="rgb(220,72,50)" fg:x="946" fg:w="1"/><text x="77.6008%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.41%)</title><rect x="77.1055%" y="581" width="0.4088%" height="15" fill="rgb(222,106,48)" fg:x="943" fg:w="5"/><text x="77.3555%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.33%)</title><rect x="77.1872%" y="565" width="0.3271%" height="15" fill="rgb(216,220,45)" fg:x="944" fg:w="4"/><text x="77.4372%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4325%" y="549" width="0.0818%" height="15" fill="rgb(234,112,18)" fg:x="947" fg:w="1"/><text x="77.6825%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.4325%" y="533" width="0.0818%" height="15" fill="rgb(206,179,9)" fg:x="947" fg:w="1"/><text x="77.6825%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.4325%" y="517" width="0.0818%" height="15" fill="rgb(215,115,40)" fg:x="947" fg:w="1"/><text x="77.6825%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.49%)</title><rect x="77.1055%" y="597" width="0.4906%" height="15" fill="rgb(222,69,34)" fg:x="943" fg:w="6"/><text x="77.3555%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.5143%" y="581" width="0.0818%" height="15" fill="rgb(209,161,10)" fg:x="948" fg:w="1"/><text x="77.7643%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.5143%" y="565" width="0.0818%" height="15" fill="rgb(217,6,38)" fg:x="948" fg:w="1"/><text x="77.7643%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.5143%" y="549" width="0.0818%" height="15" fill="rgb(229,229,48)" fg:x="948" fg:w="1"/><text x="77.7643%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5143%" y="533" width="0.0818%" height="15" fill="rgb(225,21,28)" fg:x="948" fg:w="1"/><text x="77.7643%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5143%" y="517" width="0.0818%" height="15" fill="rgb(206,33,13)" fg:x="948" fg:w="1"/><text x="77.7643%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5143%" y="501" width="0.0818%" height="15" fill="rgb(242,178,17)" fg:x="948" fg:w="1"/><text x="77.7643%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5143%" y="485" width="0.0818%" height="15" fill="rgb(220,162,5)" fg:x="948" fg:w="1"/><text x="77.7643%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.5143%" y="469" width="0.0818%" height="15" fill="rgb(210,33,43)" fg:x="948" fg:w="1"/><text x="77.7643%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.5143%" y="453" width="0.0818%" height="15" fill="rgb(216,116,54)" fg:x="948" fg:w="1"/><text x="77.7643%" y="463.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (1 samples, 0.08%)</title><rect x="77.5961%" y="597" width="0.0818%" height="15" fill="rgb(249,92,24)" fg:x="949" fg:w="1"/><text x="77.8461%" y="607.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="77.5961%" y="581" width="0.0818%" height="15" fill="rgb(231,189,14)" fg:x="949" fg:w="1"/><text x="77.8461%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.5961%" y="565" width="0.0818%" height="15" fill="rgb(230,8,41)" fg:x="949" fg:w="1"/><text x="77.8461%" y="575.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="77.5961%" y="549" width="0.0818%" height="15" fill="rgb(249,7,27)" fg:x="949" fg:w="1"/><text x="77.8461%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.5961%" y="533" width="0.0818%" height="15" fill="rgb(232,86,5)" fg:x="949" fg:w="1"/><text x="77.8461%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.5961%" y="517" width="0.0818%" height="15" fill="rgb(224,175,18)" fg:x="949" fg:w="1"/><text x="77.8461%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6778%" y="485" width="0.0818%" height="15" fill="rgb(220,129,12)" fg:x="950" fg:w="1"/><text x="77.9278%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6778%" y="469" width="0.0818%" height="15" fill="rgb(210,19,36)" fg:x="950" fg:w="1"/><text x="77.9278%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.6778%" y="453" width="0.0818%" height="15" fill="rgb(219,96,14)" fg:x="950" fg:w="1"/><text x="77.9278%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6778%" y="437" width="0.0818%" height="15" fill="rgb(249,106,1)" fg:x="950" fg:w="1"/><text x="77.9278%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.6778%" y="421" width="0.0818%" height="15" fill="rgb(249,155,20)" fg:x="950" fg:w="1"/><text x="77.9278%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.6778%" y="405" width="0.0818%" height="15" fill="rgb(244,168,9)" fg:x="950" fg:w="1"/><text x="77.9278%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.6778%" y="389" width="0.0818%" height="15" fill="rgb(216,23,50)" fg:x="950" fg:w="1"/><text x="77.9278%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.6778%" y="373" width="0.0818%" height="15" fill="rgb(224,219,20)" fg:x="950" fg:w="1"/><text x="77.9278%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6778%" y="357" width="0.0818%" height="15" fill="rgb(222,156,15)" fg:x="950" fg:w="1"/><text x="77.9278%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.6778%" y="341" width="0.0818%" height="15" fill="rgb(231,97,17)" fg:x="950" fg:w="1"/><text x="77.9278%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.6778%" y="325" width="0.0818%" height="15" fill="rgb(218,70,48)" fg:x="950" fg:w="1"/><text x="77.9278%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.6778%" y="309" width="0.0818%" height="15" fill="rgb(212,196,52)" fg:x="950" fg:w="1"/><text x="77.9278%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.6778%" y="293" width="0.0818%" height="15" fill="rgb(243,203,18)" fg:x="950" fg:w="1"/><text x="77.9278%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.6778%" y="277" width="0.0818%" height="15" fill="rgb(252,125,41)" fg:x="950" fg:w="1"/><text x="77.9278%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.6778%" y="261" width="0.0818%" height="15" fill="rgb(223,180,33)" fg:x="950" fg:w="1"/><text x="77.9278%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="77.7596%" y="421" width="0.0818%" height="15" fill="rgb(254,159,46)" fg:x="951" fg:w="1"/><text x="78.0096%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="77.7596%" y="405" width="0.0818%" height="15" fill="rgb(254,38,10)" fg:x="951" fg:w="1"/><text x="78.0096%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.7596%" y="389" width="0.0818%" height="15" fill="rgb(208,217,32)" fg:x="951" fg:w="1"/><text x="78.0096%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.25%)</title><rect x="77.6778%" y="533" width="0.2453%" height="15" fill="rgb(221,120,13)" fg:x="950" fg:w="3"/><text x="77.9278%" y="543.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.25%)</title><rect x="77.6778%" y="517" width="0.2453%" height="15" fill="rgb(246,54,52)" fg:x="950" fg:w="3"/><text x="77.9278%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="77.6778%" y="501" width="0.2453%" height="15" fill="rgb(242,34,25)" fg:x="950" fg:w="3"/><text x="77.9278%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="77.7596%" y="485" width="0.1635%" height="15" fill="rgb(247,209,9)" fg:x="951" fg:w="2"/><text x="78.0096%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.7596%" y="469" width="0.1635%" height="15" fill="rgb(228,71,26)" fg:x="951" fg:w="2"/><text x="78.0096%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="77.7596%" y="453" width="0.1635%" height="15" fill="rgb(222,145,49)" fg:x="951" fg:w="2"/><text x="78.0096%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="77.7596%" y="437" width="0.1635%" height="15" fill="rgb(218,121,17)" fg:x="951" fg:w="2"/><text x="78.0096%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="77.8414%" y="421" width="0.0818%" height="15" fill="rgb(244,50,7)" fg:x="952" fg:w="1"/><text x="78.0914%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="77.8414%" y="405" width="0.0818%" height="15" fill="rgb(246,229,37)" fg:x="952" fg:w="1"/><text x="78.0914%" y="415.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.33%)</title><rect x="77.6778%" y="597" width="0.3271%" height="15" fill="rgb(225,18,5)" fg:x="950" fg:w="4"/><text x="77.9278%" y="607.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.33%)</title><rect x="77.6778%" y="581" width="0.3271%" height="15" fill="rgb(213,204,8)" fg:x="950" fg:w="4"/><text x="77.9278%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.33%)</title><rect x="77.6778%" y="565" width="0.3271%" height="15" fill="rgb(238,103,6)" fg:x="950" fg:w="4"/><text x="77.9278%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.33%)</title><rect x="77.6778%" y="549" width="0.3271%" height="15" fill="rgb(222,25,35)" fg:x="950" fg:w="4"/><text x="77.9278%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.9231%" y="533" width="0.0818%" height="15" fill="rgb(213,203,35)" fg:x="953" fg:w="1"/><text x="78.1731%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9231%" y="517" width="0.0818%" height="15" fill="rgb(221,79,53)" fg:x="953" fg:w="1"/><text x="78.1731%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="78.0049%" y="597" width="0.0818%" height="15" fill="rgb(243,200,35)" fg:x="954" fg:w="1"/><text x="78.2549%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="78.0049%" y="581" width="0.0818%" height="15" fill="rgb(248,60,25)" fg:x="954" fg:w="1"/><text x="78.2549%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0049%" y="565" width="0.0818%" height="15" fill="rgb(227,53,46)" fg:x="954" fg:w="1"/><text x="78.2549%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0049%" y="549" width="0.0818%" height="15" fill="rgb(216,120,32)" fg:x="954" fg:w="1"/><text x="78.2549%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="78.0867%" y="581" width="0.0818%" height="15" fill="rgb(220,134,1)" fg:x="955" fg:w="1"/><text x="78.3367%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="78.0867%" y="565" width="0.0818%" height="15" fill="rgb(237,168,5)" fg:x="955" fg:w="1"/><text x="78.3367%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="78.0867%" y="549" width="0.0818%" height="15" fill="rgb(231,100,33)" fg:x="955" fg:w="1"/><text x="78.3367%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.0867%" y="533" width="0.0818%" height="15" fill="rgb(236,177,47)" fg:x="955" fg:w="1"/><text x="78.3367%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.0867%" y="517" width="0.0818%" height="15" fill="rgb(235,7,49)" fg:x="955" fg:w="1"/><text x="78.3367%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0867%" y="501" width="0.0818%" height="15" fill="rgb(232,119,22)" fg:x="955" fg:w="1"/><text x="78.3367%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.0867%" y="485" width="0.0818%" height="15" fill="rgb(254,73,53)" fg:x="955" fg:w="1"/><text x="78.3367%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.0867%" y="469" width="0.0818%" height="15" fill="rgb(251,35,20)" fg:x="955" fg:w="1"/><text x="78.3367%" y="479.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (40 samples, 3.27%)</title><rect x="75.0613%" y="613" width="3.2706%" height="15" fill="rgb(241,119,20)" fg:x="918" fg:w="40"/><text x="75.3113%" y="623.50">plu..</text></g><g><title>plugins_core::tools::set_container (3 samples, 0.25%)</title><rect x="78.0867%" y="597" width="0.2453%" height="15" fill="rgb(207,102,14)" fg:x="955" fg:w="3"/><text x="78.3367%" y="607.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="78.1684%" y="581" width="0.1635%" height="15" fill="rgb(248,201,50)" fg:x="956" fg:w="2"/><text x="78.4184%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="78.1684%" y="565" width="0.1635%" height="15" fill="rgb(222,185,44)" fg:x="956" fg:w="2"/><text x="78.4184%" y="575.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="78.1684%" y="549" width="0.1635%" height="15" fill="rgb(218,107,18)" fg:x="956" fg:w="2"/><text x="78.4184%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="78.1684%" y="533" width="0.1635%" height="15" fill="rgb(237,177,39)" fg:x="956" fg:w="2"/><text x="78.4184%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.2502%" y="517" width="0.0818%" height="15" fill="rgb(246,69,6)" fg:x="957" fg:w="1"/><text x="78.5002%" y="527.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.2502%" y="501" width="0.0818%" height="15" fill="rgb(234,208,37)" fg:x="957" fg:w="1"/><text x="78.5002%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.2502%" y="485" width="0.0818%" height="15" fill="rgb(225,4,6)" fg:x="957" fg:w="1"/><text x="78.5002%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2502%" y="469" width="0.0818%" height="15" fill="rgb(233,45,0)" fg:x="957" fg:w="1"/><text x="78.5002%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="78.2502%" y="453" width="0.0818%" height="15" fill="rgb(226,136,5)" fg:x="957" fg:w="1"/><text x="78.5002%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="78.2502%" y="437" width="0.0818%" height="15" fill="rgb(211,91,47)" fg:x="957" fg:w="1"/><text x="78.5002%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.2502%" y="421" width="0.0818%" height="15" fill="rgb(242,88,51)" fg:x="957" fg:w="1"/><text x="78.5002%" y="431.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="78.3320%" y="613" width="0.0818%" height="15" fill="rgb(230,91,28)" fg:x="958" fg:w="1"/><text x="78.5820%" y="623.50"></text></g><g><title>plugins_core::build::Build::new (1 samples, 0.08%)</title><rect x="78.3320%" y="597" width="0.0818%" height="15" fill="rgb(254,186,29)" fg:x="958" fg:w="1"/><text x="78.5820%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="78.3320%" y="581" width="0.0818%" height="15" fill="rgb(238,6,4)" fg:x="958" fg:w="1"/><text x="78.5820%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="78.3320%" y="565" width="0.0818%" height="15" fill="rgb(221,151,16)" fg:x="958" fg:w="1"/><text x="78.5820%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3320%" y="549" width="0.0818%" height="15" fill="rgb(251,143,52)" fg:x="958" fg:w="1"/><text x="78.5820%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="78.5773%" y="581" width="0.0818%" height="15" fill="rgb(206,90,15)" fg:x="961" fg:w="1"/><text x="78.8273%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="78.5773%" y="565" width="0.0818%" height="15" fill="rgb(218,35,8)" fg:x="961" fg:w="1"/><text x="78.8273%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="78.5773%" y="549" width="0.0818%" height="15" fill="rgb(239,215,6)" fg:x="961" fg:w="1"/><text x="78.8273%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.5773%" y="533" width="0.0818%" height="15" fill="rgb(245,116,39)" fg:x="961" fg:w="1"/><text x="78.8273%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="78.6590%" y="533" width="0.0818%" height="15" fill="rgb(242,65,28)" fg:x="962" fg:w="1"/><text x="78.9090%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="78.6590%" y="517" width="0.0818%" height="15" fill="rgb(252,132,53)" fg:x="962" fg:w="1"/><text x="78.9090%" y="527.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="78.6590%" y="501" width="0.0818%" height="15" fill="rgb(224,159,50)" fg:x="962" fg:w="1"/><text x="78.9090%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="78.6590%" y="485" width="0.0818%" height="15" fill="rgb(224,93,4)" fg:x="962" fg:w="1"/><text x="78.9090%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.6590%" y="469" width="0.0818%" height="15" fill="rgb(208,81,34)" fg:x="962" fg:w="1"/><text x="78.9090%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.6590%" y="453" width="0.0818%" height="15" fill="rgb(233,92,54)" fg:x="962" fg:w="1"/><text x="78.9090%" y="463.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="78.6590%" y="437" width="0.0818%" height="15" fill="rgb(237,21,14)" fg:x="962" fg:w="1"/><text x="78.9090%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.6590%" y="421" width="0.0818%" height="15" fill="rgb(249,128,51)" fg:x="962" fg:w="1"/><text x="78.9090%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6590%" y="405" width="0.0818%" height="15" fill="rgb(223,129,24)" fg:x="962" fg:w="1"/><text x="78.9090%" y="415.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (5 samples, 0.41%)</title><rect x="78.4137%" y="613" width="0.4088%" height="15" fill="rgb(231,168,25)" fg:x="959" fg:w="5"/><text x="78.6637%" y="623.50"></text></g><g><title>plugins_core::build::QuickThing::make (4 samples, 0.33%)</title><rect x="78.4955%" y="597" width="0.3271%" height="15" fill="rgb(224,39,20)" fg:x="960" fg:w="4"/><text x="78.7455%" y="607.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="78.6590%" y="581" width="0.1635%" height="15" fill="rgb(225,152,53)" fg:x="962" fg:w="2"/><text x="78.9090%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="78.6590%" y="565" width="0.1635%" height="15" fill="rgb(252,17,24)" fg:x="962" fg:w="2"/><text x="78.9090%" y="575.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="78.6590%" y="549" width="0.1635%" height="15" fill="rgb(250,114,30)" fg:x="962" fg:w="2"/><text x="78.9090%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7408%" y="533" width="0.0818%" height="15" fill="rgb(229,5,4)" fg:x="963" fg:w="1"/><text x="78.9908%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.7408%" y="517" width="0.0818%" height="15" fill="rgb(225,176,49)" fg:x="963" fg:w="1"/><text x="78.9908%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7408%" y="501" width="0.0818%" height="15" fill="rgb(224,221,49)" fg:x="963" fg:w="1"/><text x="78.9908%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="78.7408%" y="485" width="0.0818%" height="15" fill="rgb(253,169,27)" fg:x="963" fg:w="1"/><text x="78.9908%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.7408%" y="469" width="0.0818%" height="15" fill="rgb(211,206,16)" fg:x="963" fg:w="1"/><text x="78.9908%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="78.8226%" y="597" width="0.0818%" height="15" fill="rgb(244,87,35)" fg:x="964" fg:w="1"/><text x="79.0726%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.8226%" y="581" width="0.0818%" height="15" fill="rgb(246,28,10)" fg:x="964" fg:w="1"/><text x="79.0726%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.8226%" y="565" width="0.0818%" height="15" fill="rgb(229,12,44)" fg:x="964" fg:w="1"/><text x="79.0726%" y="575.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="78.9043%" y="597" width="0.0818%" height="15" fill="rgb(210,145,37)" fg:x="965" fg:w="1"/><text x="79.1543%" y="607.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="78.9043%" y="581" width="0.0818%" height="15" fill="rgb(227,112,52)" fg:x="965" fg:w="1"/><text x="79.1543%" y="591.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="78.9043%" y="565" width="0.0818%" height="15" fill="rgb(238,155,34)" fg:x="965" fg:w="1"/><text x="79.1543%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.9861%" y="581" width="0.0818%" height="15" fill="rgb(239,226,36)" fg:x="966" fg:w="1"/><text x="79.2361%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.0679%" y="565" width="0.0818%" height="15" fill="rgb(230,16,23)" fg:x="967" fg:w="1"/><text x="79.3179%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.0679%" y="549" width="0.0818%" height="15" fill="rgb(236,171,36)" fg:x="967" fg:w="1"/><text x="79.3179%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.0679%" y="533" width="0.0818%" height="15" fill="rgb(221,22,14)" fg:x="967" fg:w="1"/><text x="79.3179%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0679%" y="517" width="0.0818%" height="15" fill="rgb(242,43,11)" fg:x="967" fg:w="1"/><text x="79.3179%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0679%" y="501" width="0.0818%" height="15" fill="rgb(232,69,23)" fg:x="967" fg:w="1"/><text x="79.3179%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0679%" y="485" width="0.0818%" height="15" fill="rgb(216,180,54)" fg:x="967" fg:w="1"/><text x="79.3179%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0679%" y="469" width="0.0818%" height="15" fill="rgb(216,5,24)" fg:x="967" fg:w="1"/><text x="79.3179%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.0679%" y="453" width="0.0818%" height="15" fill="rgb(225,89,9)" fg:x="967" fg:w="1"/><text x="79.3179%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0679%" y="437" width="0.0818%" height="15" fill="rgb(243,75,33)" fg:x="967" fg:w="1"/><text x="79.3179%" y="447.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (82 samples, 6.70%)</title><rect x="72.5266%" y="629" width="6.7048%" height="15" fill="rgb(247,141,45)" fg:x="887" fg:w="82"/><text x="72.7766%" y="639.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (5 samples, 0.41%)</title><rect x="78.8226%" y="613" width="0.4088%" height="15" fill="rgb(232,177,36)" fg:x="964" fg:w="5"/><text x="79.0726%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.25%)</title><rect x="78.9861%" y="597" width="0.2453%" height="15" fill="rgb(219,125,36)" fg:x="966" fg:w="3"/><text x="79.2361%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="79.0679%" y="581" width="0.1635%" height="15" fill="rgb(227,94,9)" fg:x="967" fg:w="2"/><text x="79.3179%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="79.1496%" y="565" width="0.0818%" height="15" fill="rgb(240,34,52)" fg:x="968" fg:w="1"/><text x="79.3996%" y="575.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.1496%" y="549" width="0.0818%" height="15" fill="rgb(216,45,12)" fg:x="968" fg:w="1"/><text x="79.3996%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.1496%" y="533" width="0.0818%" height="15" fill="rgb(246,21,19)" fg:x="968" fg:w="1"/><text x="79.3996%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.1496%" y="517" width="0.0818%" height="15" fill="rgb(213,98,42)" fg:x="968" fg:w="1"/><text x="79.3996%" y="527.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="79.3132%" y="613" width="0.0818%" height="15" fill="rgb(250,136,47)" fg:x="970" fg:w="1"/><text x="79.5632%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3132%" y="597" width="0.0818%" height="15" fill="rgb(251,124,27)" fg:x="970" fg:w="1"/><text x="79.5632%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.3132%" y="581" width="0.0818%" height="15" fill="rgb(229,180,14)" fg:x="970" fg:w="1"/><text x="79.5632%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.3132%" y="565" width="0.0818%" height="15" fill="rgb(245,216,25)" fg:x="970" fg:w="1"/><text x="79.5632%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.3132%" y="549" width="0.0818%" height="15" fill="rgb(251,43,5)" fg:x="970" fg:w="1"/><text x="79.5632%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.3132%" y="533" width="0.0818%" height="15" fill="rgb(250,128,24)" fg:x="970" fg:w="1"/><text x="79.5632%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3132%" y="517" width="0.0818%" height="15" fill="rgb(217,117,27)" fg:x="970" fg:w="1"/><text x="79.5632%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="79.3132%" y="501" width="0.0818%" height="15" fill="rgb(245,147,4)" fg:x="970" fg:w="1"/><text x="79.5632%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="79.3132%" y="485" width="0.0818%" height="15" fill="rgb(242,201,35)" fg:x="970" fg:w="1"/><text x="79.5632%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="79.3132%" y="469" width="0.0818%" height="15" fill="rgb(218,181,1)" fg:x="970" fg:w="1"/><text x="79.5632%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="79.3132%" y="453" width="0.0818%" height="15" fill="rgb(222,6,29)" fg:x="970" fg:w="1"/><text x="79.5632%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="79.3132%" y="437" width="0.0818%" height="15" fill="rgb(208,186,3)" fg:x="970" fg:w="1"/><text x="79.5632%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.3132%" y="421" width="0.0818%" height="15" fill="rgb(216,36,26)" fg:x="970" fg:w="1"/><text x="79.5632%" y="431.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="79.3949%" y="613" width="0.0818%" height="15" fill="rgb(248,201,23)" fg:x="971" fg:w="1"/><text x="79.6449%" y="623.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="79.3949%" y="597" width="0.0818%" height="15" fill="rgb(251,170,31)" fg:x="971" fg:w="1"/><text x="79.6449%" y="607.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.3949%" y="581" width="0.0818%" height="15" fill="rgb(207,110,25)" fg:x="971" fg:w="1"/><text x="79.6449%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.3949%" y="565" width="0.0818%" height="15" fill="rgb(250,54,15)" fg:x="971" fg:w="1"/><text x="79.6449%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="79.3949%" y="549" width="0.0818%" height="15" fill="rgb(227,68,33)" fg:x="971" fg:w="1"/><text x="79.6449%" y="559.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="79.3949%" y="533" width="0.0818%" height="15" fill="rgb(238,34,41)" fg:x="971" fg:w="1"/><text x="79.6449%" y="543.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="79.3949%" y="517" width="0.0818%" height="15" fill="rgb(220,11,15)" fg:x="971" fg:w="1"/><text x="79.6449%" y="527.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="79.3949%" y="501" width="0.0818%" height="15" fill="rgb(246,111,35)" fg:x="971" fg:w="1"/><text x="79.6449%" y="511.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="79.3949%" y="485" width="0.0818%" height="15" fill="rgb(209,88,53)" fg:x="971" fg:w="1"/><text x="79.6449%" y="495.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="79.3949%" y="469" width="0.0818%" height="15" fill="rgb(231,185,47)" fg:x="971" fg:w="1"/><text x="79.6449%" y="479.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="79.3949%" y="453" width="0.0818%" height="15" fill="rgb(233,154,1)" fg:x="971" fg:w="1"/><text x="79.6449%" y="463.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="79.3949%" y="437" width="0.0818%" height="15" fill="rgb(225,15,46)" fg:x="971" fg:w="1"/><text x="79.6449%" y="447.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.4767%" y="581" width="0.0818%" height="15" fill="rgb(211,135,41)" fg:x="972" fg:w="1"/><text x="79.7267%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.4767%" y="565" width="0.0818%" height="15" fill="rgb(208,54,0)" fg:x="972" fg:w="1"/><text x="79.7267%" y="575.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="79.4767%" y="549" width="0.0818%" height="15" fill="rgb(244,136,14)" fg:x="972" fg:w="1"/><text x="79.7267%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.5585%" y="517" width="0.0818%" height="15" fill="rgb(241,56,14)" fg:x="973" fg:w="1"/><text x="79.8085%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.5585%" y="501" width="0.0818%" height="15" fill="rgb(205,80,24)" fg:x="973" fg:w="1"/><text x="79.8085%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.5585%" y="485" width="0.0818%" height="15" fill="rgb(220,57,4)" fg:x="973" fg:w="1"/><text x="79.8085%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.5585%" y="469" width="0.0818%" height="15" fill="rgb(226,193,50)" fg:x="973" fg:w="1"/><text x="79.8085%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.6402%" y="501" width="0.0818%" height="15" fill="rgb(231,168,22)" fg:x="974" fg:w="1"/><text x="79.8902%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6402%" y="485" width="0.0818%" height="15" fill="rgb(254,215,14)" fg:x="974" fg:w="1"/><text x="79.8902%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6402%" y="469" width="0.0818%" height="15" fill="rgb(211,115,16)" fg:x="974" fg:w="1"/><text x="79.8902%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.6402%" y="453" width="0.0818%" height="15" fill="rgb(236,210,16)" fg:x="974" fg:w="1"/><text x="79.8902%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="79.8038%" y="485" width="0.1635%" height="15" fill="rgb(221,94,12)" fg:x="976" fg:w="2"/><text x="80.0538%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="79.8038%" y="469" width="0.1635%" height="15" fill="rgb(235,218,49)" fg:x="976" fg:w="2"/><text x="80.0538%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.8855%" y="453" width="0.0818%" height="15" fill="rgb(217,114,14)" fg:x="977" fg:w="1"/><text x="80.1355%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.8855%" y="437" width="0.0818%" height="15" fill="rgb(216,145,22)" fg:x="977" fg:w="1"/><text x="80.1355%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.0491%" y="469" width="0.0818%" height="15" fill="rgb(217,112,39)" fg:x="979" fg:w="1"/><text x="80.2991%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0491%" y="453" width="0.0818%" height="15" fill="rgb(225,85,32)" fg:x="979" fg:w="1"/><text x="80.2991%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.0491%" y="437" width="0.0818%" height="15" fill="rgb(245,209,47)" fg:x="979" fg:w="1"/><text x="80.2991%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0491%" y="421" width="0.0818%" height="15" fill="rgb(218,220,15)" fg:x="979" fg:w="1"/><text x="80.2991%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.65%)</title><rect x="79.5585%" y="533" width="0.6541%" height="15" fill="rgb(222,202,31)" fg:x="973" fg:w="8"/><text x="79.8085%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="79.6402%" y="517" width="0.5724%" height="15" fill="rgb(243,203,4)" fg:x="974" fg:w="7"/><text x="79.8902%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="79.7220%" y="501" width="0.4906%" height="15" fill="rgb(237,92,17)" fg:x="975" fg:w="6"/><text x="79.9720%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.25%)</title><rect x="79.9673%" y="485" width="0.2453%" height="15" fill="rgb(231,119,7)" fg:x="978" fg:w="3"/><text x="80.2173%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.1308%" y="469" width="0.0818%" height="15" fill="rgb(237,82,41)" fg:x="980" fg:w="1"/><text x="80.3808%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.1308%" y="453" width="0.0818%" height="15" fill="rgb(226,81,48)" fg:x="980" fg:w="1"/><text x="80.3808%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.1308%" y="437" width="0.0818%" height="15" fill="rgb(234,70,51)" fg:x="980" fg:w="1"/><text x="80.3808%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.1308%" y="421" width="0.0818%" height="15" fill="rgb(251,86,4)" fg:x="980" fg:w="1"/><text x="80.3808%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.1308%" y="405" width="0.0818%" height="15" fill="rgb(244,144,28)" fg:x="980" fg:w="1"/><text x="80.3808%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.1308%" y="389" width="0.0818%" height="15" fill="rgb(232,161,39)" fg:x="980" fg:w="1"/><text x="80.3808%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.1308%" y="373" width="0.0818%" height="15" fill="rgb(247,34,51)" fg:x="980" fg:w="1"/><text x="80.3808%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.1308%" y="357" width="0.0818%" height="15" fill="rgb(225,132,2)" fg:x="980" fg:w="1"/><text x="80.3808%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.2126%" y="501" width="0.0818%" height="15" fill="rgb(209,159,44)" fg:x="981" fg:w="1"/><text x="80.4626%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2126%" y="485" width="0.0818%" height="15" fill="rgb(251,214,1)" fg:x="981" fg:w="1"/><text x="80.4626%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.2126%" y="533" width="0.1635%" height="15" fill="rgb(247,84,47)" fg:x="981" fg:w="2"/><text x="80.4626%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.2126%" y="517" width="0.1635%" height="15" fill="rgb(240,111,43)" fg:x="981" fg:w="2"/><text x="80.4626%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.2944%" y="501" width="0.0818%" height="15" fill="rgb(215,214,35)" fg:x="982" fg:w="1"/><text x="80.5444%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.2944%" y="485" width="0.0818%" height="15" fill="rgb(248,207,23)" fg:x="982" fg:w="1"/><text x="80.5444%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.2944%" y="469" width="0.0818%" height="15" fill="rgb(214,186,4)" fg:x="982" fg:w="1"/><text x="80.5444%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="80.2944%" y="453" width="0.0818%" height="15" fill="rgb(220,133,22)" fg:x="982" fg:w="1"/><text x="80.5444%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="80.2944%" y="437" width="0.0818%" height="15" fill="rgb(239,134,19)" fg:x="982" fg:w="1"/><text x="80.5444%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.2944%" y="421" width="0.0818%" height="15" fill="rgb(250,140,9)" fg:x="982" fg:w="1"/><text x="80.5444%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.3761%" y="501" width="0.0818%" height="15" fill="rgb(225,59,14)" fg:x="983" fg:w="1"/><text x="80.6261%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4579%" y="501" width="0.1635%" height="15" fill="rgb(214,152,51)" fg:x="984" fg:w="2"/><text x="80.7079%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.4579%" y="485" width="0.1635%" height="15" fill="rgb(251,227,43)" fg:x="984" fg:w="2"/><text x="80.7079%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4579%" y="469" width="0.1635%" height="15" fill="rgb(241,96,17)" fg:x="984" fg:w="2"/><text x="80.7079%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4579%" y="453" width="0.1635%" height="15" fill="rgb(234,198,43)" fg:x="984" fg:w="2"/><text x="80.7079%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.4579%" y="437" width="0.1635%" height="15" fill="rgb(220,108,29)" fg:x="984" fg:w="2"/><text x="80.7079%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.5397%" y="421" width="0.0818%" height="15" fill="rgb(226,163,33)" fg:x="985" fg:w="1"/><text x="80.7897%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.5397%" y="405" width="0.0818%" height="15" fill="rgb(205,194,45)" fg:x="985" fg:w="1"/><text x="80.7897%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.6214%" y="485" width="0.0818%" height="15" fill="rgb(206,143,44)" fg:x="986" fg:w="1"/><text x="80.8714%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.6214%" y="469" width="0.0818%" height="15" fill="rgb(236,136,36)" fg:x="986" fg:w="1"/><text x="80.8714%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.6214%" y="453" width="0.0818%" height="15" fill="rgb(249,172,42)" fg:x="986" fg:w="1"/><text x="80.8714%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.6214%" y="437" width="0.0818%" height="15" fill="rgb(216,139,23)" fg:x="986" fg:w="1"/><text x="80.8714%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="80.6214%" y="421" width="0.0818%" height="15" fill="rgb(207,166,20)" fg:x="986" fg:w="1"/><text x="80.8714%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.7032%" y="485" width="0.0818%" height="15" fill="rgb(210,209,22)" fg:x="987" fg:w="1"/><text x="80.9532%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (6 samples, 0.49%)</title><rect x="80.3761%" y="517" width="0.4906%" height="15" fill="rgb(232,118,20)" fg:x="983" fg:w="6"/><text x="80.6261%" y="527.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.25%)</title><rect x="80.6214%" y="501" width="0.2453%" height="15" fill="rgb(238,113,42)" fg:x="986" fg:w="3"/><text x="80.8714%" y="511.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="80.7850%" y="485" width="0.0818%" height="15" fill="rgb(231,42,5)" fg:x="988" fg:w="1"/><text x="81.0350%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7850%" y="469" width="0.0818%" height="15" fill="rgb(243,166,24)" fg:x="988" fg:w="1"/><text x="81.0350%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.9485%" y="485" width="0.0818%" height="15" fill="rgb(237,226,12)" fg:x="990" fg:w="1"/><text x="81.1985%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.0303%" y="485" width="0.0818%" height="15" fill="rgb(229,133,24)" fg:x="991" fg:w="1"/><text x="81.2803%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.0303%" y="469" width="0.0818%" height="15" fill="rgb(238,33,43)" fg:x="991" fg:w="1"/><text x="81.2803%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.0303%" y="453" width="0.0818%" height="15" fill="rgb(227,59,38)" fg:x="991" fg:w="1"/><text x="81.2803%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.1938%" y="437" width="0.0818%" height="15" fill="rgb(230,97,0)" fg:x="993" fg:w="1"/><text x="81.4438%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="81.1938%" y="421" width="0.0818%" height="15" fill="rgb(250,173,50)" fg:x="993" fg:w="1"/><text x="81.4438%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.1938%" y="405" width="0.0818%" height="15" fill="rgb(240,15,50)" fg:x="993" fg:w="1"/><text x="81.4438%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.2756%" y="421" width="0.0818%" height="15" fill="rgb(221,93,22)" fg:x="994" fg:w="1"/><text x="81.5256%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.2756%" y="405" width="0.0818%" height="15" fill="rgb(245,180,53)" fg:x="994" fg:w="1"/><text x="81.5256%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="81.2756%" y="389" width="0.0818%" height="15" fill="rgb(231,88,51)" fg:x="994" fg:w="1"/><text x="81.5256%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.25%)</title><rect x="81.1938%" y="453" width="0.2453%" height="15" fill="rgb(240,58,21)" fg:x="993" fg:w="3"/><text x="81.4438%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="81.2756%" y="437" width="0.1635%" height="15" fill="rgb(237,21,10)" fg:x="994" fg:w="2"/><text x="81.5256%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3573%" y="421" width="0.0818%" height="15" fill="rgb(218,43,11)" fg:x="995" fg:w="1"/><text x="81.6073%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.33%)</title><rect x="81.1938%" y="469" width="0.3271%" height="15" fill="rgb(218,221,29)" fg:x="993" fg:w="4"/><text x="81.4438%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.4391%" y="453" width="0.0818%" height="15" fill="rgb(214,118,42)" fg:x="996" fg:w="1"/><text x="81.6891%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.4391%" y="437" width="0.0818%" height="15" fill="rgb(251,200,26)" fg:x="996" fg:w="1"/><text x="81.6891%" y="447.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.74%)</title><rect x="80.8667%" y="517" width="0.7359%" height="15" fill="rgb(237,101,39)" fg:x="989" fg:w="9"/><text x="81.1167%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.74%)</title><rect x="80.8667%" y="501" width="0.7359%" height="15" fill="rgb(251,117,11)" fg:x="989" fg:w="9"/><text x="81.1167%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_map (6 samples, 0.49%)</title><rect x="81.1120%" y="485" width="0.4906%" height="15" fill="rgb(216,223,23)" fg:x="992" fg:w="6"/><text x="81.3620%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5209%" y="469" width="0.0818%" height="15" fill="rgb(251,54,12)" fg:x="997" fg:w="1"/><text x="81.7709%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5209%" y="453" width="0.0818%" height="15" fill="rgb(254,176,54)" fg:x="997" fg:w="1"/><text x="81.7709%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.5209%" y="437" width="0.0818%" height="15" fill="rgb(210,32,8)" fg:x="997" fg:w="1"/><text x="81.7709%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="81.6026%" y="421" width="0.0818%" height="15" fill="rgb(235,52,38)" fg:x="998" fg:w="1"/><text x="81.8526%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="81.6026%" y="405" width="0.0818%" height="15" fill="rgb(231,4,44)" fg:x="998" fg:w="1"/><text x="81.8526%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.33%)</title><rect x="81.6026%" y="453" width="0.3271%" height="15" fill="rgb(249,2,32)" fg:x="998" fg:w="4"/><text x="81.8526%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.33%)</title><rect x="81.6026%" y="437" width="0.3271%" height="15" fill="rgb(224,65,26)" fg:x="998" fg:w="4"/><text x="81.8526%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.25%)</title><rect x="81.6844%" y="421" width="0.2453%" height="15" fill="rgb(250,73,40)" fg:x="999" fg:w="3"/><text x="81.9344%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8479%" y="405" width="0.0818%" height="15" fill="rgb(253,177,16)" fg:x="1001" fg:w="1"/><text x="82.0979%" y="415.50"></text></g><g><title>engine::session::state::State::close (31 samples, 2.53%)</title><rect x="79.4767%" y="613" width="2.5348%" height="15" fill="rgb(217,32,34)" fg:x="972" fg:w="31"/><text x="79.7267%" y="623.50">en..</text></g><g><title>engine::session::state::State::flush_entities (31 samples, 2.53%)</title><rect x="79.4767%" y="597" width="2.5348%" height="15" fill="rgb(212,7,10)" fg:x="972" fg:w="31"/><text x="79.7267%" y="607.50">en..</text></g><g><title>core::iter::adapters::try_process (30 samples, 2.45%)</title><rect x="79.5585%" y="581" width="2.4530%" height="15" fill="rgb(245,89,8)" fg:x="973" fg:w="30"/><text x="79.8085%" y="591.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 2.45%)</title><rect x="79.5585%" y="565" width="2.4530%" height="15" fill="rgb(237,16,53)" fg:x="973" fg:w="30"/><text x="79.8085%" y="575.50">&lt;a..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (30 samples, 2.45%)</title><rect x="79.5585%" y="549" width="2.4530%" height="15" fill="rgb(250,204,30)" fg:x="973" fg:w="30"/><text x="79.8085%" y="559.50">en..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.64%)</title><rect x="80.3761%" y="533" width="1.6353%" height="15" fill="rgb(208,77,27)" fg:x="983" fg:w="20"/><text x="80.6261%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="81.6026%" y="517" width="0.4088%" height="15" fill="rgb(250,204,28)" fg:x="998" fg:w="5"/><text x="81.8526%" y="527.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="81.6026%" y="501" width="0.4088%" height="15" fill="rgb(244,63,21)" fg:x="998" fg:w="5"/><text x="81.8526%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="81.6026%" y="485" width="0.4088%" height="15" fill="rgb(236,85,44)" fg:x="998" fg:w="5"/><text x="81.8526%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="81.6026%" y="469" width="0.4088%" height="15" fill="rgb(215,98,4)" fg:x="998" fg:w="5"/><text x="81.8526%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="81.9297%" y="453" width="0.0818%" height="15" fill="rgb(235,38,11)" fg:x="1002" fg:w="1"/><text x="82.1797%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9297%" y="437" width="0.0818%" height="15" fill="rgb(254,186,25)" fg:x="1002" fg:w="1"/><text x="82.1797%" y="447.50"></text></g><g><title>engine::session::Session::close (35 samples, 2.86%)</title><rect x="79.2314%" y="629" width="2.8618%" height="15" fill="rgb(225,55,31)" fg:x="969" fg:w="35"/><text x="79.4814%" y="639.50">en..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="82.0114%" y="613" width="0.0818%" height="15" fill="rgb(211,15,21)" fg:x="1003" fg:w="1"/><text x="82.2614%" y="623.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="82.0114%" y="597" width="0.0818%" height="15" fill="rgb(215,187,41)" fg:x="1003" fg:w="1"/><text x="82.2614%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="82.0114%" y="581" width="0.0818%" height="15" fill="rgb(248,69,32)" fg:x="1003" fg:w="1"/><text x="82.2614%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.0932%" y="549" width="0.0818%" height="15" fill="rgb(252,102,52)" fg:x="1004" fg:w="1"/><text x="82.3432%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="82.1750%" y="501" width="0.0818%" height="15" fill="rgb(253,140,32)" fg:x="1005" fg:w="1"/><text x="82.4250%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.2567%" y="357" width="0.0818%" height="15" fill="rgb(216,56,42)" fg:x="1006" fg:w="1"/><text x="82.5067%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="82.2567%" y="341" width="0.0818%" height="15" fill="rgb(216,184,14)" fg:x="1006" fg:w="1"/><text x="82.5067%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="82.2567%" y="325" width="0.0818%" height="15" fill="rgb(237,187,27)" fg:x="1006" fg:w="1"/><text x="82.5067%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.3385%" y="341" width="0.0818%" height="15" fill="rgb(219,65,3)" fg:x="1007" fg:w="1"/><text x="82.5885%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.3385%" y="325" width="0.0818%" height="15" fill="rgb(245,83,25)" fg:x="1007" fg:w="1"/><text x="82.5885%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.3385%" y="309" width="0.0818%" height="15" fill="rgb(214,205,45)" fg:x="1007" fg:w="1"/><text x="82.5885%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.3385%" y="293" width="0.0818%" height="15" fill="rgb(241,20,18)" fg:x="1007" fg:w="1"/><text x="82.5885%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="82.3385%" y="277" width="0.0818%" height="15" fill="rgb(232,163,23)" fg:x="1007" fg:w="1"/><text x="82.5885%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="82.3385%" y="261" width="0.0818%" height="15" fill="rgb(214,5,46)" fg:x="1007" fg:w="1"/><text x="82.5885%" y="271.50"></text></g><g><title>kernel::model::entity::Entity::from_value (3 samples, 0.25%)</title><rect x="82.2567%" y="437" width="0.2453%" height="15" fill="rgb(229,78,17)" fg:x="1006" fg:w="3"/><text x="82.5067%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.25%)</title><rect x="82.2567%" y="421" width="0.2453%" height="15" fill="rgb(248,89,10)" fg:x="1006" fg:w="3"/><text x="82.5067%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="82.2567%" y="405" width="0.2453%" height="15" fill="rgb(248,54,15)" fg:x="1006" fg:w="3"/><text x="82.5067%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.25%)</title><rect x="82.2567%" y="389" width="0.2453%" height="15" fill="rgb(223,116,6)" fg:x="1006" fg:w="3"/><text x="82.5067%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="82.2567%" y="373" width="0.2453%" height="15" fill="rgb(205,125,38)" fg:x="1006" fg:w="3"/><text x="82.5067%" y="383.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="82.3385%" y="357" width="0.1635%" height="15" fill="rgb(251,78,38)" fg:x="1007" fg:w="2"/><text x="82.5885%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4203%" y="341" width="0.0818%" height="15" fill="rgb(253,78,28)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.4203%" y="325" width="0.0818%" height="15" fill="rgb(209,120,3)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="82.4203%" y="309" width="0.0818%" height="15" fill="rgb(238,229,9)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="319.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="82.4203%" y="293" width="0.0818%" height="15" fill="rgb(253,159,18)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="82.4203%" y="277" width="0.0818%" height="15" fill="rgb(244,42,34)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.4203%" y="261" width="0.0818%" height="15" fill="rgb(224,8,7)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.4203%" y="245" width="0.0818%" height="15" fill="rgb(210,201,45)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="82.4203%" y="229" width="0.0818%" height="15" fill="rgb(252,185,21)" fg:x="1008" fg:w="1"/><text x="82.6703%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.5020%" y="341" width="0.0818%" height="15" fill="rgb(223,131,1)" fg:x="1009" fg:w="1"/><text x="82.7520%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.5020%" y="325" width="0.0818%" height="15" fill="rgb(245,141,16)" fg:x="1009" fg:w="1"/><text x="82.7520%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="82.5020%" y="309" width="0.0818%" height="15" fill="rgb(229,55,45)" fg:x="1009" fg:w="1"/><text x="82.7520%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="82.5020%" y="293" width="0.0818%" height="15" fill="rgb(208,92,15)" fg:x="1009" fg:w="1"/><text x="82.7520%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="82.5020%" y="373" width="0.1635%" height="15" fill="rgb(234,185,47)" fg:x="1009" fg:w="2"/><text x="82.7520%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="82.5020%" y="357" width="0.1635%" height="15" fill="rgb(253,104,50)" fg:x="1009" fg:w="2"/><text x="82.7520%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.5838%" y="341" width="0.0818%" height="15" fill="rgb(205,70,7)" fg:x="1010" fg:w="1"/><text x="82.8338%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.57%)</title><rect x="82.1750%" y="533" width="0.5724%" height="15" fill="rgb(240,178,43)" fg:x="1005" fg:w="7"/><text x="82.4250%" y="543.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (7 samples, 0.57%)</title><rect x="82.1750%" y="517" width="0.5724%" height="15" fill="rgb(214,112,2)" fg:x="1005" fg:w="7"/><text x="82.4250%" y="527.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.49%)</title><rect x="82.2567%" y="501" width="0.4906%" height="15" fill="rgb(206,46,17)" fg:x="1006" fg:w="6"/><text x="82.5067%" y="511.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.49%)</title><rect x="82.2567%" y="485" width="0.4906%" height="15" fill="rgb(225,220,16)" fg:x="1006" fg:w="6"/><text x="82.5067%" y="495.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="82.2567%" y="469" width="0.4906%" height="15" fill="rgb(238,65,40)" fg:x="1006" fg:w="6"/><text x="82.5067%" y="479.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="82.2567%" y="453" width="0.4906%" height="15" fill="rgb(230,151,21)" fg:x="1006" fg:w="6"/><text x="82.5067%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="82.5020%" y="437" width="0.2453%" height="15" fill="rgb(218,58,49)" fg:x="1009" fg:w="3"/><text x="82.7520%" y="447.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="82.5020%" y="421" width="0.2453%" height="15" fill="rgb(219,179,14)" fg:x="1009" fg:w="3"/><text x="82.7520%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="82.5020%" y="405" width="0.2453%" height="15" fill="rgb(223,72,1)" fg:x="1009" fg:w="3"/><text x="82.7520%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="82.5020%" y="389" width="0.2453%" height="15" fill="rgb(238,126,10)" fg:x="1009" fg:w="3"/><text x="82.7520%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.6656%" y="373" width="0.0818%" height="15" fill="rgb(224,206,38)" fg:x="1011" fg:w="1"/><text x="82.9156%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6656%" y="357" width="0.0818%" height="15" fill="rgb(212,201,54)" fg:x="1011" fg:w="1"/><text x="82.9156%" y="367.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (1 samples, 0.08%)</title><rect x="82.8291%" y="373" width="0.0818%" height="15" fill="rgb(218,154,48)" fg:x="1013" fg:w="1"/><text x="83.0791%" y="383.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8291%" y="357" width="0.0818%" height="15" fill="rgb(232,93,24)" fg:x="1013" fg:w="1"/><text x="83.0791%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.8291%" y="341" width="0.0818%" height="15" fill="rgb(245,30,21)" fg:x="1013" fg:w="1"/><text x="83.0791%" y="351.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="82.8291%" y="325" width="0.0818%" height="15" fill="rgb(242,148,29)" fg:x="1013" fg:w="1"/><text x="83.0791%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.8291%" y="309" width="0.0818%" height="15" fill="rgb(244,153,54)" fg:x="1013" fg:w="1"/><text x="83.0791%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.8291%" y="293" width="0.0818%" height="15" fill="rgb(252,87,22)" fg:x="1013" fg:w="1"/><text x="83.0791%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (2 samples, 0.16%)</title><rect x="82.8291%" y="389" width="0.1635%" height="15" fill="rgb(210,51,29)" fg:x="1013" fg:w="2"/><text x="83.0791%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="82.9109%" y="373" width="0.0818%" height="15" fill="rgb(242,136,47)" fg:x="1014" fg:w="1"/><text x="83.1609%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="82.9109%" y="357" width="0.0818%" height="15" fill="rgb(238,68,4)" fg:x="1014" fg:w="1"/><text x="83.1609%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="83.0744%" y="357" width="0.1635%" height="15" fill="rgb(242,161,30)" fg:x="1016" fg:w="2"/><text x="83.3244%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="83.0744%" y="341" width="0.1635%" height="15" fill="rgb(218,58,44)" fg:x="1016" fg:w="2"/><text x="83.3244%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="83.2379%" y="341" width="0.0818%" height="15" fill="rgb(252,125,32)" fg:x="1018" fg:w="1"/><text x="83.4879%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.2379%" y="325" width="0.0818%" height="15" fill="rgb(219,178,0)" fg:x="1018" fg:w="1"/><text x="83.4879%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="83.3197%" y="309" width="0.0818%" height="15" fill="rgb(213,152,7)" fg:x="1019" fg:w="1"/><text x="83.5697%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="83.3197%" y="293" width="0.0818%" height="15" fill="rgb(249,109,34)" fg:x="1019" fg:w="1"/><text x="83.5697%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.4832%" y="245" width="0.0818%" height="15" fill="rgb(232,96,21)" fg:x="1021" fg:w="1"/><text x="83.7332%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (5 samples, 0.41%)</title><rect x="83.2379%" y="357" width="0.4088%" height="15" fill="rgb(228,27,39)" fg:x="1018" fg:w="5"/><text x="83.4879%" y="367.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.33%)</title><rect x="83.3197%" y="341" width="0.3271%" height="15" fill="rgb(211,182,52)" fg:x="1019" fg:w="4"/><text x="83.5697%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.33%)</title><rect x="83.3197%" y="325" width="0.3271%" height="15" fill="rgb(234,178,38)" fg:x="1019" fg:w="4"/><text x="83.5697%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.25%)</title><rect x="83.4015%" y="309" width="0.2453%" height="15" fill="rgb(221,111,3)" fg:x="1020" fg:w="3"/><text x="83.6515%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.25%)</title><rect x="83.4015%" y="293" width="0.2453%" height="15" fill="rgb(228,175,21)" fg:x="1020" fg:w="3"/><text x="83.6515%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="83.4832%" y="277" width="0.1635%" height="15" fill="rgb(228,174,43)" fg:x="1021" fg:w="2"/><text x="83.7332%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="83.4832%" y="261" width="0.1635%" height="15" fill="rgb(211,191,0)" fg:x="1021" fg:w="2"/><text x="83.7332%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.5650%" y="245" width="0.0818%" height="15" fill="rgb(253,117,3)" fg:x="1022" fg:w="1"/><text x="83.8150%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.5650%" y="229" width="0.0818%" height="15" fill="rgb(241,127,19)" fg:x="1022" fg:w="1"/><text x="83.8150%" y="239.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="83.6468%" y="341" width="0.0818%" height="15" fill="rgb(218,103,12)" fg:x="1023" fg:w="1"/><text x="83.8968%" y="351.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.6468%" y="325" width="0.0818%" height="15" fill="rgb(236,214,43)" fg:x="1023" fg:w="1"/><text x="83.8968%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="83.6468%" y="357" width="0.1635%" height="15" fill="rgb(244,144,19)" fg:x="1023" fg:w="2"/><text x="83.8968%" y="367.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="83.7285%" y="341" width="0.0818%" height="15" fill="rgb(246,188,10)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="83.7285%" y="325" width="0.0818%" height="15" fill="rgb(212,193,33)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.7285%" y="309" width="0.0818%" height="15" fill="rgb(241,51,29)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.7285%" y="293" width="0.0818%" height="15" fill="rgb(211,58,19)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.7285%" y="277" width="0.0818%" height="15" fill="rgb(229,111,26)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.7285%" y="261" width="0.0818%" height="15" fill="rgb(213,115,40)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="83.7285%" y="245" width="0.0818%" height="15" fill="rgb(209,56,44)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.7285%" y="229" width="0.0818%" height="15" fill="rgb(230,108,32)" fg:x="1024" fg:w="1"/><text x="83.9785%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="83.8103%" y="357" width="0.0818%" height="15" fill="rgb(216,165,31)" fg:x="1025" fg:w="1"/><text x="84.0603%" y="367.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="83.9738%" y="309" width="0.0818%" height="15" fill="rgb(218,122,21)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.9738%" y="293" width="0.0818%" height="15" fill="rgb(223,224,47)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="83.9738%" y="277" width="0.0818%" height="15" fill="rgb(238,102,44)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="83.9738%" y="261" width="0.0818%" height="15" fill="rgb(236,46,40)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="271.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.9738%" y="245" width="0.0818%" height="15" fill="rgb(247,202,50)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="83.9738%" y="229" width="0.0818%" height="15" fill="rgb(209,99,20)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="239.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="83.9738%" y="213" width="0.0818%" height="15" fill="rgb(252,27,34)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="83.9738%" y="197" width="0.0818%" height="15" fill="rgb(215,206,23)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="83.9738%" y="181" width="0.0818%" height="15" fill="rgb(212,135,36)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="83.9738%" y="165" width="0.0818%" height="15" fill="rgb(240,189,1)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="83.9738%" y="149" width="0.0818%" height="15" fill="rgb(242,56,20)" fg:x="1027" fg:w="1"/><text x="84.2238%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="84.0556%" y="277" width="0.0818%" height="15" fill="rgb(247,132,33)" fg:x="1028" fg:w="1"/><text x="84.3056%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.0556%" y="261" width="0.0818%" height="15" fill="rgb(208,149,11)" fg:x="1028" fg:w="1"/><text x="84.3056%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="84.1374%" y="277" width="0.0818%" height="15" fill="rgb(211,33,11)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="84.1374%" y="261" width="0.0818%" height="15" fill="rgb(221,29,38)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (1 samples, 0.08%)</title><rect x="84.1374%" y="245" width="0.0818%" height="15" fill="rgb(206,182,49)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="255.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (1 samples, 0.08%)</title><rect x="84.1374%" y="229" width="0.0818%" height="15" fill="rgb(216,140,1)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="239.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="84.1374%" y="213" width="0.0818%" height="15" fill="rgb(232,57,40)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="84.1374%" y="197" width="0.0818%" height="15" fill="rgb(224,186,18)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="84.1374%" y="181" width="0.0818%" height="15" fill="rgb(215,121,11)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="84.1374%" y="165" width="0.0818%" height="15" fill="rgb(245,147,10)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.1374%" y="149" width="0.0818%" height="15" fill="rgb(238,153,13)" fg:x="1029" fg:w="1"/><text x="84.3874%" y="159.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="84.2191%" y="277" width="0.0818%" height="15" fill="rgb(233,108,0)" fg:x="1030" fg:w="1"/><text x="84.4691%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="84.2191%" y="261" width="0.0818%" height="15" fill="rgb(212,157,17)" fg:x="1030" fg:w="1"/><text x="84.4691%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="84.2191%" y="245" width="0.0818%" height="15" fill="rgb(225,213,38)" fg:x="1030" fg:w="1"/><text x="84.4691%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="84.2191%" y="229" width="0.0818%" height="15" fill="rgb(248,16,11)" fg:x="1030" fg:w="1"/><text x="84.4691%" y="239.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.2191%" y="213" width="0.0818%" height="15" fill="rgb(241,33,4)" fg:x="1030" fg:w="1"/><text x="84.4691%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="84.3827%" y="229" width="0.0818%" height="15" fill="rgb(222,26,43)" fg:x="1032" fg:w="1"/><text x="84.6327%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="84.4644%" y="229" width="0.0818%" height="15" fill="rgb(243,29,36)" fg:x="1033" fg:w="1"/><text x="84.7144%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="84.4644%" y="213" width="0.0818%" height="15" fill="rgb(241,9,27)" fg:x="1033" fg:w="1"/><text x="84.7144%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="84.4644%" y="197" width="0.0818%" height="15" fill="rgb(205,117,26)" fg:x="1033" fg:w="1"/><text x="84.7144%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.74%)</title><rect x="84.5462%" y="213" width="0.7359%" height="15" fill="rgb(209,80,39)" fg:x="1034" fg:w="9"/><text x="84.7962%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.74%)</title><rect x="84.5462%" y="197" width="0.7359%" height="15" fill="rgb(239,155,6)" fg:x="1034" fg:w="9"/><text x="84.7962%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="85.2821%" y="213" width="0.0818%" height="15" fill="rgb(212,104,12)" fg:x="1043" fg:w="1"/><text x="85.5321%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="85.2821%" y="197" width="0.0818%" height="15" fill="rgb(234,204,3)" fg:x="1043" fg:w="1"/><text x="85.5321%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="85.3639%" y="213" width="0.0818%" height="15" fill="rgb(251,218,7)" fg:x="1044" fg:w="1"/><text x="85.6139%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.4456%" y="181" width="0.0818%" height="15" fill="rgb(221,81,32)" fg:x="1045" fg:w="1"/><text x="85.6956%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.4456%" y="165" width="0.0818%" height="15" fill="rgb(214,152,26)" fg:x="1045" fg:w="1"/><text x="85.6956%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.6092%" y="149" width="0.0818%" height="15" fill="rgb(223,22,3)" fg:x="1047" fg:w="1"/><text x="85.8592%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="85.6909%" y="149" width="0.0818%" height="15" fill="rgb(207,174,7)" fg:x="1048" fg:w="1"/><text x="85.9409%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="85.6909%" y="133" width="0.0818%" height="15" fill="rgb(224,19,52)" fg:x="1048" fg:w="1"/><text x="85.9409%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.6909%" y="117" width="0.0818%" height="15" fill="rgb(228,24,14)" fg:x="1048" fg:w="1"/><text x="85.9409%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.6909%" y="101" width="0.0818%" height="15" fill="rgb(230,153,43)" fg:x="1048" fg:w="1"/><text x="85.9409%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.96%)</title><rect x="85.7727%" y="149" width="1.9624%" height="15" fill="rgb(231,106,12)" fg:x="1049" fg:w="24"/><text x="86.0227%" y="159.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.96%)</title><rect x="85.7727%" y="133" width="1.9624%" height="15" fill="rgb(215,92,2)" fg:x="1049" fg:w="24"/><text x="86.0227%" y="143.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.96%)</title><rect x="85.7727%" y="117" width="1.9624%" height="15" fill="rgb(249,143,25)" fg:x="1049" fg:w="24"/><text x="86.0227%" y="127.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.37%)</title><rect x="85.4456%" y="197" width="2.3712%" height="15" fill="rgb(252,7,35)" fg:x="1045" fg:w="29"/><text x="85.6956%" y="207.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.29%)</title><rect x="85.5274%" y="181" width="2.2895%" height="15" fill="rgb(216,69,40)" fg:x="1046" fg:w="28"/><text x="85.7774%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.29%)</title><rect x="85.5274%" y="165" width="2.2895%" height="15" fill="rgb(240,36,33)" fg:x="1046" fg:w="28"/><text x="85.7774%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="87.7351%" y="149" width="0.0818%" height="15" fill="rgb(231,128,14)" fg:x="1073" fg:w="1"/><text x="87.9851%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="87.8168%" y="181" width="0.1635%" height="15" fill="rgb(245,143,14)" fg:x="1074" fg:w="2"/><text x="88.0668%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="87.9804%" y="181" width="0.0818%" height="15" fill="rgb(222,130,28)" fg:x="1076" fg:w="1"/><text x="88.2304%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.9804%" y="165" width="0.0818%" height="15" fill="rgb(212,10,48)" fg:x="1076" fg:w="1"/><text x="88.2304%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (34 samples, 2.78%)</title><rect x="85.4456%" y="213" width="2.7800%" height="15" fill="rgb(254,118,45)" fg:x="1045" fg:w="34"/><text x="85.6956%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.41%)</title><rect x="87.8168%" y="197" width="0.4088%" height="15" fill="rgb(228,6,45)" fg:x="1074" fg:w="5"/><text x="88.0668%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="88.0621%" y="181" width="0.1635%" height="15" fill="rgb(241,18,35)" fg:x="1077" fg:w="2"/><text x="88.3121%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="88.1439%" y="165" width="0.0818%" height="15" fill="rgb(227,214,53)" fg:x="1078" fg:w="1"/><text x="88.3939%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.1439%" y="149" width="0.0818%" height="15" fill="rgb(224,107,51)" fg:x="1078" fg:w="1"/><text x="88.3939%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.1439%" y="133" width="0.0818%" height="15" fill="rgb(248,60,28)" fg:x="1078" fg:w="1"/><text x="88.3939%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (46 samples, 3.76%)</title><rect x="84.5462%" y="229" width="3.7612%" height="15" fill="rgb(249,101,23)" fg:x="1034" fg:w="46"/><text x="84.7962%" y="239.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="88.2257%" y="213" width="0.0818%" height="15" fill="rgb(228,51,19)" fg:x="1079" fg:w="1"/><text x="88.4757%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="88.3074%" y="181" width="0.0818%" height="15" fill="rgb(213,20,6)" fg:x="1080" fg:w="1"/><text x="88.5574%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="88.3892%" y="181" width="0.0818%" height="15" fill="rgb(212,124,10)" fg:x="1081" fg:w="1"/><text x="88.6392%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (1 samples, 0.08%)</title><rect x="88.3892%" y="165" width="0.0818%" height="15" fill="rgb(248,3,40)" fg:x="1081" fg:w="1"/><text x="88.6392%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (1 samples, 0.08%)</title><rect x="88.3892%" y="149" width="0.0818%" height="15" fill="rgb(223,178,23)" fg:x="1081" fg:w="1"/><text x="88.6392%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="88.3892%" y="133" width="0.0818%" height="15" fill="rgb(240,132,45)" fg:x="1081" fg:w="1"/><text x="88.6392%" y="143.50"></text></g><g><title>regex::regex::string::Regex::new (52 samples, 4.25%)</title><rect x="84.3009%" y="277" width="4.2518%" height="15" fill="rgb(245,164,36)" fg:x="1031" fg:w="52"/><text x="84.5509%" y="287.50">regex..</text></g><g><title>regex::builders::Builder::build_one_string (52 samples, 4.25%)</title><rect x="84.3009%" y="261" width="4.2518%" height="15" fill="rgb(231,188,53)" fg:x="1031" fg:w="52"/><text x="84.5509%" y="271.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (51 samples, 4.17%)</title><rect x="84.3827%" y="245" width="4.1701%" height="15" fill="rgb(237,198,39)" fg:x="1032" fg:w="51"/><text x="84.6327%" y="255.50">regex..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="88.3074%" y="229" width="0.2453%" height="15" fill="rgb(223,120,35)" fg:x="1080" fg:w="3"/><text x="88.5574%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="88.3074%" y="213" width="0.2453%" height="15" fill="rgb(253,107,49)" fg:x="1080" fg:w="3"/><text x="88.5574%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.25%)</title><rect x="88.3074%" y="197" width="0.2453%" height="15" fill="rgb(216,44,31)" fg:x="1080" fg:w="3"/><text x="88.5574%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="88.4710%" y="181" width="0.0818%" height="15" fill="rgb(253,87,21)" fg:x="1082" fg:w="1"/><text x="88.7210%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.4710%" y="165" width="0.0818%" height="15" fill="rgb(226,18,2)" fg:x="1082" fg:w="1"/><text x="88.7210%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.4710%" y="149" width="0.0818%" height="15" fill="rgb(216,8,46)" fg:x="1082" fg:w="1"/><text x="88.7210%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.4710%" y="133" width="0.0818%" height="15" fill="rgb(226,140,39)" fg:x="1082" fg:w="1"/><text x="88.7210%" y="143.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (59 samples, 4.82%)</title><rect x="84.0556%" y="293" width="4.8242%" height="15" fill="rgb(221,194,54)" fg:x="1028" fg:w="59"/><text x="84.3056%" y="303.50">indefi..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="88.5527%" y="277" width="0.3271%" height="15" fill="rgb(213,92,11)" fg:x="1083" fg:w="4"/><text x="88.8027%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="88.5527%" y="261" width="0.3271%" height="15" fill="rgb(229,162,46)" fg:x="1083" fg:w="4"/><text x="88.8027%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="88.5527%" y="245" width="0.3271%" height="15" fill="rgb(214,111,36)" fg:x="1083" fg:w="4"/><text x="88.8027%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.33%)</title><rect x="88.5527%" y="229" width="0.3271%" height="15" fill="rgb(207,6,21)" fg:x="1083" fg:w="4"/><text x="88.8027%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (4 samples, 0.33%)</title><rect x="88.5527%" y="213" width="0.3271%" height="15" fill="rgb(213,127,38)" fg:x="1083" fg:w="4"/><text x="88.8027%" y="223.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="88.7980%" y="197" width="0.0818%" height="15" fill="rgb(238,118,32)" fg:x="1086" fg:w="1"/><text x="89.0480%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.7980%" y="181" width="0.0818%" height="15" fill="rgb(240,139,39)" fg:x="1086" fg:w="1"/><text x="89.0480%" y="191.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="88.8798%" y="261" width="0.0818%" height="15" fill="rgb(235,10,37)" fg:x="1087" fg:w="1"/><text x="89.1298%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="88.8798%" y="245" width="0.0818%" height="15" fill="rgb(249,171,38)" fg:x="1087" fg:w="1"/><text x="89.1298%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="88.8798%" y="229" width="0.0818%" height="15" fill="rgb(242,144,32)" fg:x="1087" fg:w="1"/><text x="89.1298%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="89.1251%" y="181" width="0.0818%" height="15" fill="rgb(217,117,21)" fg:x="1090" fg:w="1"/><text x="89.3751%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.1251%" y="165" width="0.0818%" height="15" fill="rgb(249,87,1)" fg:x="1090" fg:w="1"/><text x="89.3751%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.1251%" y="149" width="0.0818%" height="15" fill="rgb(248,196,48)" fg:x="1090" fg:w="1"/><text x="89.3751%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="89.2069%" y="181" width="0.0818%" height="15" fill="rgb(251,206,33)" fg:x="1091" fg:w="1"/><text x="89.4569%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.2069%" y="165" width="0.0818%" height="15" fill="rgb(232,141,28)" fg:x="1091" fg:w="1"/><text x="89.4569%" y="175.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="89.2886%" y="181" width="0.0818%" height="15" fill="rgb(209,167,14)" fg:x="1092" fg:w="1"/><text x="89.5386%" y="191.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (8 samples, 0.65%)</title><rect x="88.8798%" y="277" width="0.6541%" height="15" fill="rgb(225,11,50)" fg:x="1087" fg:w="8"/><text x="89.1298%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.57%)</title><rect x="88.9616%" y="261" width="0.5724%" height="15" fill="rgb(209,50,20)" fg:x="1088" fg:w="7"/><text x="89.2116%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.57%)</title><rect x="88.9616%" y="245" width="0.5724%" height="15" fill="rgb(212,17,46)" fg:x="1088" fg:w="7"/><text x="89.2116%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.57%)</title><rect x="88.9616%" y="229" width="0.5724%" height="15" fill="rgb(216,101,39)" fg:x="1088" fg:w="7"/><text x="89.2116%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.57%)</title><rect x="88.9616%" y="213" width="0.5724%" height="15" fill="rgb(212,228,48)" fg:x="1088" fg:w="7"/><text x="89.2116%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.57%)</title><rect x="88.9616%" y="197" width="0.5724%" height="15" fill="rgb(250,6,50)" fg:x="1088" fg:w="7"/><text x="89.2116%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="89.3704%" y="181" width="0.1635%" height="15" fill="rgb(250,160,48)" fg:x="1093" fg:w="2"/><text x="89.6204%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.5339%" y="229" width="0.0818%" height="15" fill="rgb(244,216,33)" fg:x="1095" fg:w="1"/><text x="89.7839%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="89.5339%" y="213" width="0.0818%" height="15" fill="rgb(207,157,5)" fg:x="1095" fg:w="1"/><text x="89.7839%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.5339%" y="197" width="0.0818%" height="15" fill="rgb(228,199,8)" fg:x="1095" fg:w="1"/><text x="89.7839%" y="207.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="89.6157%" y="229" width="0.0818%" height="15" fill="rgb(227,80,20)" fg:x="1096" fg:w="1"/><text x="89.8657%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.6975%" y="197" width="0.0818%" height="15" fill="rgb(222,9,33)" fg:x="1097" fg:w="1"/><text x="89.9475%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (8 samples, 0.65%)</title><rect x="89.6975%" y="213" width="0.6541%" height="15" fill="rgb(239,44,28)" fg:x="1097" fg:w="8"/><text x="89.9475%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.57%)</title><rect x="89.7792%" y="197" width="0.5724%" height="15" fill="rgb(249,187,43)" fg:x="1098" fg:w="7"/><text x="90.0292%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.2698%" y="181" width="0.0818%" height="15" fill="rgb(216,141,28)" fg:x="1104" fg:w="1"/><text x="90.5198%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="90.3516%" y="213" width="0.1635%" height="15" fill="rgb(230,154,53)" fg:x="1105" fg:w="2"/><text x="90.6016%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="90.3516%" y="197" width="0.1635%" height="15" fill="rgb(227,82,4)" fg:x="1105" fg:w="2"/><text x="90.6016%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.5969%" y="181" width="0.0818%" height="15" fill="rgb(220,107,16)" fg:x="1108" fg:w="1"/><text x="90.8469%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="90.6787%" y="181" width="0.1635%" height="15" fill="rgb(207,187,2)" fg:x="1109" fg:w="2"/><text x="90.9287%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="90.7604%" y="165" width="0.0818%" height="15" fill="rgb(210,162,52)" fg:x="1110" fg:w="1"/><text x="91.0104%" y="175.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.41%)</title><rect x="90.5151%" y="213" width="0.4088%" height="15" fill="rgb(217,216,49)" fg:x="1107" fg:w="5"/><text x="90.7651%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.41%)</title><rect x="90.5151%" y="197" width="0.4088%" height="15" fill="rgb(218,146,49)" fg:x="1107" fg:w="5"/><text x="90.7651%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="90.8422%" y="181" width="0.0818%" height="15" fill="rgb(216,55,40)" fg:x="1111" fg:w="1"/><text x="91.0922%" y="191.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="90.8422%" y="165" width="0.0818%" height="15" fill="rgb(208,196,21)" fg:x="1111" fg:w="1"/><text x="91.0922%" y="175.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="90.8422%" y="149" width="0.0818%" height="15" fill="rgb(242,117,42)" fg:x="1111" fg:w="1"/><text x="91.0922%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="91.0057%" y="149" width="0.0818%" height="15" fill="rgb(210,11,23)" fg:x="1113" fg:w="1"/><text x="91.2557%" y="159.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="91.4146%" y="101" width="0.1635%" height="15" fill="rgb(217,110,2)" fg:x="1118" fg:w="2"/><text x="91.6646%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.5781%" y="101" width="0.0818%" height="15" fill="rgb(229,77,54)" fg:x="1120" fg:w="1"/><text x="91.8281%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.6599%" y="69" width="0.0818%" height="15" fill="rgb(218,53,16)" fg:x="1121" fg:w="1"/><text x="91.9099%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.33%)</title><rect x="91.6599%" y="101" width="0.3271%" height="15" fill="rgb(215,38,13)" fg:x="1121" fg:w="4"/><text x="91.9099%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.33%)</title><rect x="91.6599%" y="85" width="0.3271%" height="15" fill="rgb(235,42,18)" fg:x="1121" fg:w="4"/><text x="91.9099%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.25%)</title><rect x="91.7416%" y="69" width="0.2453%" height="15" fill="rgb(219,66,54)" fg:x="1122" fg:w="3"/><text x="91.9916%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (34 samples, 2.78%)</title><rect x="91.9869%" y="101" width="2.7800%" height="15" fill="rgb(222,205,4)" fg:x="1125" fg:w="34"/><text x="92.2369%" y="111.50">re..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (34 samples, 2.78%)</title><rect x="91.9869%" y="85" width="2.7800%" height="15" fill="rgb(227,213,46)" fg:x="1125" fg:w="34"/><text x="92.2369%" y="95.50">re..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (34 samples, 2.78%)</title><rect x="91.9869%" y="69" width="2.7800%" height="15" fill="rgb(250,145,42)" fg:x="1125" fg:w="34"/><text x="92.2369%" y="79.50">al..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="94.7670%" y="101" width="0.0818%" height="15" fill="rgb(219,15,2)" fg:x="1159" fg:w="1"/><text x="95.0170%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (49 samples, 4.01%)</title><rect x="91.0057%" y="197" width="4.0065%" height="15" fill="rgb(231,181,52)" fg:x="1113" fg:w="49"/><text x="91.2557%" y="207.50">&lt;cor..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (49 samples, 4.01%)</title><rect x="91.0057%" y="181" width="4.0065%" height="15" fill="rgb(235,1,42)" fg:x="1113" fg:w="49"/><text x="91.2557%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (49 samples, 4.01%)</title><rect x="91.0057%" y="165" width="4.0065%" height="15" fill="rgb(249,88,27)" fg:x="1113" fg:w="49"/><text x="91.2557%" y="175.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (48 samples, 3.92%)</title><rect x="91.0875%" y="149" width="3.9248%" height="15" fill="rgb(235,145,16)" fg:x="1114" fg:w="48"/><text x="91.3375%" y="159.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (48 samples, 3.92%)</title><rect x="91.0875%" y="133" width="3.9248%" height="15" fill="rgb(237,114,19)" fg:x="1114" fg:w="48"/><text x="91.3375%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (48 samples, 3.92%)</title><rect x="91.0875%" y="117" width="3.9248%" height="15" fill="rgb(238,51,50)" fg:x="1114" fg:w="48"/><text x="91.3375%" y="127.50">rege..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="94.8487%" y="101" width="0.1635%" height="15" fill="rgb(205,194,25)" fg:x="1160" fg:w="2"/><text x="95.0987%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.25%)</title><rect x="95.0940%" y="181" width="0.2453%" height="15" fill="rgb(215,203,17)" fg:x="1163" fg:w="3"/><text x="95.3440%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="95.1758%" y="165" width="0.1635%" height="15" fill="rgb(233,112,49)" fg:x="1164" fg:w="2"/><text x="95.4258%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="95.1758%" y="149" width="0.1635%" height="15" fill="rgb(241,130,26)" fg:x="1164" fg:w="2"/><text x="95.4258%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="95.1758%" y="133" width="0.1635%" height="15" fill="rgb(252,223,19)" fg:x="1164" fg:w="2"/><text x="95.4258%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.4211%" y="165" width="0.0818%" height="15" fill="rgb(211,95,25)" fg:x="1167" fg:w="1"/><text x="95.6711%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.25%)</title><rect x="95.3393%" y="181" width="0.2453%" height="15" fill="rgb(251,182,27)" fg:x="1166" fg:w="3"/><text x="95.5893%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="95.5029%" y="165" width="0.0818%" height="15" fill="rgb(238,24,4)" fg:x="1168" fg:w="1"/><text x="95.7529%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (73 samples, 5.97%)</title><rect x="89.6975%" y="229" width="5.9689%" height="15" fill="rgb(224,220,25)" fg:x="1097" fg:w="73"/><text x="89.9475%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (58 samples, 4.74%)</title><rect x="90.9240%" y="213" width="4.7424%" height="15" fill="rgb(239,133,26)" fg:x="1112" fg:w="58"/><text x="91.1740%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="95.0123%" y="197" width="0.6541%" height="15" fill="rgb(211,94,48)" fg:x="1162" fg:w="8"/><text x="95.2623%" y="207.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="95.5846%" y="181" width="0.0818%" height="15" fill="rgb(239,87,6)" fg:x="1169" fg:w="1"/><text x="95.8346%" y="191.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="95.5846%" y="165" width="0.0818%" height="15" fill="rgb(227,62,0)" fg:x="1169" fg:w="1"/><text x="95.8346%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.5846%" y="149" width="0.0818%" height="15" fill="rgb(211,226,4)" fg:x="1169" fg:w="1"/><text x="95.8346%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.5846%" y="133" width="0.0818%" height="15" fill="rgb(253,38,52)" fg:x="1169" fg:w="1"/><text x="95.8346%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.5846%" y="117" width="0.0818%" height="15" fill="rgb(229,126,40)" fg:x="1169" fg:w="1"/><text x="95.8346%" y="127.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="95.6664%" y="229" width="0.0818%" height="15" fill="rgb(229,165,44)" fg:x="1170" fg:w="1"/><text x="95.9164%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="95.6664%" y="213" width="0.0818%" height="15" fill="rgb(247,95,47)" fg:x="1170" fg:w="1"/><text x="95.9164%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (87 samples, 7.11%)</title><rect x="88.8798%" y="293" width="7.1137%" height="15" fill="rgb(216,140,30)" fg:x="1087" fg:w="87"/><text x="89.1298%" y="303.50">indefinite..</text></g><g><title>regex::regex::string::Regex::new (79 samples, 6.46%)</title><rect x="89.5339%" y="277" width="6.4595%" height="15" fill="rgb(246,214,8)" fg:x="1095" fg:w="79"/><text x="89.7839%" y="287.50">regex::r..</text></g><g><title>regex::builders::Builder::build_one_string (79 samples, 6.46%)</title><rect x="89.5339%" y="261" width="6.4595%" height="15" fill="rgb(227,224,15)" fg:x="1095" fg:w="79"/><text x="89.7839%" y="271.50">regex::b..</text></g><g><title>regex_automata::meta::regex::Builder::build (79 samples, 6.46%)</title><rect x="89.5339%" y="245" width="6.4595%" height="15" fill="rgb(233,175,4)" fg:x="1095" fg:w="79"/><text x="89.7839%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.25%)</title><rect x="95.7482%" y="229" width="0.2453%" height="15" fill="rgb(221,66,45)" fg:x="1171" fg:w="3"/><text x="95.9982%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.25%)</title><rect x="95.7482%" y="213" width="0.2453%" height="15" fill="rgb(221,178,18)" fg:x="1171" fg:w="3"/><text x="95.9982%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.25%)</title><rect x="95.7482%" y="197" width="0.2453%" height="15" fill="rgb(213,81,29)" fg:x="1171" fg:w="3"/><text x="95.9982%" y="207.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.8299%" y="181" width="0.1635%" height="15" fill="rgb(220,89,49)" fg:x="1172" fg:w="2"/><text x="96.0799%" y="191.50"></text></g><g><title>core::slice::sort::merge_sort (2 samples, 0.16%)</title><rect x="95.8299%" y="165" width="0.1635%" height="15" fill="rgb(227,60,33)" fg:x="1172" fg:w="2"/><text x="96.0799%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="95.9935%" y="261" width="0.0818%" height="15" fill="rgb(205,113,12)" fg:x="1174" fg:w="1"/><text x="96.2435%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="95.9935%" y="245" width="0.0818%" height="15" fill="rgb(211,32,1)" fg:x="1174" fg:w="1"/><text x="96.2435%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="95.9935%" y="229" width="0.0818%" height="15" fill="rgb(246,2,12)" fg:x="1174" fg:w="1"/><text x="96.2435%" y="239.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="96.0752%" y="245" width="0.0818%" height="15" fill="rgb(243,37,27)" fg:x="1175" fg:w="1"/><text x="96.3252%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="96.2388%" y="181" width="0.0818%" height="15" fill="rgb(248,211,31)" fg:x="1177" fg:w="1"/><text x="96.4888%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.25%)</title><rect x="96.1570%" y="213" width="0.2453%" height="15" fill="rgb(242,146,47)" fg:x="1176" fg:w="3"/><text x="96.4070%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.25%)</title><rect x="96.1570%" y="197" width="0.2453%" height="15" fill="rgb(206,70,20)" fg:x="1176" fg:w="3"/><text x="96.4070%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="96.3205%" y="181" width="0.0818%" height="15" fill="rgb(215,10,51)" fg:x="1178" fg:w="1"/><text x="96.5705%" y="191.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="96.3205%" y="165" width="0.0818%" height="15" fill="rgb(243,178,53)" fg:x="1178" fg:w="1"/><text x="96.5705%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="96.3205%" y="149" width="0.0818%" height="15" fill="rgb(233,221,20)" fg:x="1178" fg:w="1"/><text x="96.5705%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4023%" y="197" width="0.0818%" height="15" fill="rgb(218,95,35)" fg:x="1179" fg:w="1"/><text x="96.6523%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.4841%" y="165" width="0.0818%" height="15" fill="rgb(229,13,5)" fg:x="1180" fg:w="1"/><text x="96.7341%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.5658%" y="165" width="0.1635%" height="15" fill="rgb(252,164,30)" fg:x="1181" fg:w="2"/><text x="96.8158%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="96.6476%" y="149" width="0.0818%" height="15" fill="rgb(232,68,36)" fg:x="1182" fg:w="1"/><text x="96.8976%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6476%" y="133" width="0.0818%" height="15" fill="rgb(219,59,54)" fg:x="1182" fg:w="1"/><text x="96.8976%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.6476%" y="117" width="0.0818%" height="15" fill="rgb(250,92,33)" fg:x="1182" fg:w="1"/><text x="96.8976%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.6476%" y="101" width="0.0818%" height="15" fill="rgb(229,162,54)" fg:x="1182" fg:w="1"/><text x="96.8976%" y="111.50"></text></g><g><title>regex_automata::meta::strategy::new (5 samples, 0.41%)</title><rect x="96.4023%" y="213" width="0.4088%" height="15" fill="rgb(244,114,52)" fg:x="1179" fg:w="5"/><text x="96.6523%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.33%)</title><rect x="96.4841%" y="197" width="0.3271%" height="15" fill="rgb(212,211,43)" fg:x="1180" fg:w="4"/><text x="96.7341%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (4 samples, 0.33%)</title><rect x="96.4841%" y="181" width="0.3271%" height="15" fill="rgb(226,147,8)" fg:x="1180" fg:w="4"/><text x="96.7341%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="96.7294%" y="165" width="0.0818%" height="15" fill="rgb(226,23,13)" fg:x="1183" fg:w="1"/><text x="96.9794%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.25%)</title><rect x="96.8111%" y="213" width="0.2453%" height="15" fill="rgb(240,63,4)" fg:x="1184" fg:w="3"/><text x="97.0611%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.25%)</title><rect x="96.8111%" y="197" width="0.2453%" height="15" fill="rgb(221,1,32)" fg:x="1184" fg:w="3"/><text x="97.0611%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.8929%" y="181" width="0.1635%" height="15" fill="rgb(242,117,10)" fg:x="1185" fg:w="2"/><text x="97.1429%" y="191.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="96.8929%" y="165" width="0.1635%" height="15" fill="rgb(249,172,44)" fg:x="1185" fg:w="2"/><text x="97.1429%" y="175.50"></text></g><g><title>regex::regex::string::Regex::new (14 samples, 1.14%)</title><rect x="96.0752%" y="261" width="1.1447%" height="15" fill="rgb(244,46,45)" fg:x="1175" fg:w="14"/><text x="96.3252%" y="271.50"></text></g><g><title>regex::builders::Builder::build_one_string (13 samples, 1.06%)</title><rect x="96.1570%" y="245" width="1.0630%" height="15" fill="rgb(206,43,17)" fg:x="1176" fg:w="13"/><text x="96.4070%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (13 samples, 1.06%)</title><rect x="96.1570%" y="229" width="1.0630%" height="15" fill="rgb(239,218,39)" fg:x="1176" fg:w="13"/><text x="96.4070%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.0564%" y="213" width="0.1635%" height="15" fill="rgb(208,169,54)" fg:x="1187" fg:w="2"/><text x="97.3064%" y="223.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.0564%" y="197" width="0.1635%" height="15" fill="rgb(247,25,42)" fg:x="1187" fg:w="2"/><text x="97.3064%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.1382%" y="181" width="0.0818%" height="15" fill="rgb(226,23,31)" fg:x="1188" fg:w="1"/><text x="97.3882%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="97.1382%" y="165" width="0.0818%" height="15" fill="rgb(247,16,28)" fg:x="1188" fg:w="1"/><text x="97.3882%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.1382%" y="149" width="0.0818%" height="15" fill="rgb(231,147,38)" fg:x="1188" fg:w="1"/><text x="97.3882%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.1382%" y="133" width="0.0818%" height="15" fill="rgb(253,81,48)" fg:x="1188" fg:w="1"/><text x="97.3882%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.1382%" y="117" width="0.0818%" height="15" fill="rgb(249,222,43)" fg:x="1188" fg:w="1"/><text x="97.3882%" y="127.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.25%)</title><rect x="97.2200%" y="213" width="0.2453%" height="15" fill="rgb(221,3,27)" fg:x="1189" fg:w="3"/><text x="97.4700%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.25%)</title><rect x="97.2200%" y="197" width="0.2453%" height="15" fill="rgb(228,180,5)" fg:x="1189" fg:w="3"/><text x="97.4700%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (177 samples, 14.47%)</title><rect x="83.0744%" y="373" width="14.4726%" height="15" fill="rgb(227,131,42)" fg:x="1016" fg:w="177"/><text x="83.3244%" y="383.50">&lt;&amp;kernel::model::Entit..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (167 samples, 13.65%)</title><rect x="83.8921%" y="357" width="13.6549%" height="15" fill="rgb(212,3,39)" fg:x="1026" fg:w="167"/><text x="84.1421%" y="367.50">plugins_core::looking..</text></g><g><title>indefinite::indefinite (166 samples, 13.57%)</title><rect x="83.9738%" y="341" width="13.5732%" height="15" fill="rgb(226,45,5)" fg:x="1027" fg:w="166"/><text x="84.2238%" y="351.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (166 samples, 13.57%)</title><rect x="83.9738%" y="325" width="13.5732%" height="15" fill="rgb(215,167,45)" fg:x="1027" fg:w="166"/><text x="84.2238%" y="335.50">indefinite::methods::..</text></g><g><title>indefinite::methods::apply_rules (165 samples, 13.49%)</title><rect x="84.0556%" y="309" width="13.4914%" height="15" fill="rgb(250,218,53)" fg:x="1028" fg:w="165"/><text x="84.3056%" y="319.50">indefinite::methods:..</text></g><g><title>indefinite::rules::other::Other::run (19 samples, 1.55%)</title><rect x="95.9935%" y="293" width="1.5536%" height="15" fill="rgb(207,140,0)" fg:x="1174" fg:w="19"/><text x="96.2435%" y="303.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (19 samples, 1.55%)</title><rect x="95.9935%" y="277" width="1.5536%" height="15" fill="rgb(238,133,51)" fg:x="1174" fg:w="19"/><text x="96.2435%" y="287.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.33%)</title><rect x="97.2200%" y="261" width="0.3271%" height="15" fill="rgb(218,203,53)" fg:x="1189" fg:w="4"/><text x="97.4700%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.33%)</title><rect x="97.2200%" y="245" width="0.3271%" height="15" fill="rgb(226,184,25)" fg:x="1189" fg:w="4"/><text x="97.4700%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.33%)</title><rect x="97.2200%" y="229" width="0.3271%" height="15" fill="rgb(231,121,21)" fg:x="1189" fg:w="4"/><text x="97.4700%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="97.4652%" y="213" width="0.0818%" height="15" fill="rgb(251,14,34)" fg:x="1192" fg:w="1"/><text x="97.7152%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="97.4652%" y="197" width="0.0818%" height="15" fill="rgb(249,193,11)" fg:x="1192" fg:w="1"/><text x="97.7152%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5470%" y="357" width="0.0818%" height="15" fill="rgb(220,172,37)" fg:x="1193" fg:w="1"/><text x="97.7970%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.5470%" y="341" width="0.0818%" height="15" fill="rgb(231,229,43)" fg:x="1193" fg:w="1"/><text x="97.7970%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.5470%" y="325" width="0.0818%" height="15" fill="rgb(250,161,5)" fg:x="1193" fg:w="1"/><text x="97.7970%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.25%)</title><rect x="97.5470%" y="373" width="0.2453%" height="15" fill="rgb(218,225,18)" fg:x="1193" fg:w="3"/><text x="97.7970%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.6288%" y="357" width="0.1635%" height="15" fill="rgb(245,45,42)" fg:x="1194" fg:w="2"/><text x="97.8788%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.6288%" y="341" width="0.1635%" height="15" fill="rgb(211,115,1)" fg:x="1194" fg:w="2"/><text x="97.8788%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7105%" y="325" width="0.0818%" height="15" fill="rgb(248,133,52)" fg:x="1195" fg:w="1"/><text x="97.9605%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7105%" y="309" width="0.0818%" height="15" fill="rgb(238,100,21)" fg:x="1195" fg:w="1"/><text x="97.9605%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7923%" y="277" width="0.0818%" height="15" fill="rgb(247,144,11)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7923%" y="261" width="0.0818%" height="15" fill="rgb(206,164,16)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.7923%" y="245" width="0.0818%" height="15" fill="rgb(222,34,3)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7923%" y="229" width="0.0818%" height="15" fill="rgb(248,82,4)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.7923%" y="213" width="0.0818%" height="15" fill="rgb(228,81,46)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="97.7923%" y="197" width="0.0818%" height="15" fill="rgb(227,67,47)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="97.7923%" y="181" width="0.0818%" height="15" fill="rgb(215,93,53)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="191.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="97.7923%" y="165" width="0.0818%" height="15" fill="rgb(248,194,39)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7923%" y="149" width="0.0818%" height="15" fill="rgb(215,5,19)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="97.7923%" y="133" width="0.0818%" height="15" fill="rgb(226,215,51)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="97.7923%" y="117" width="0.0818%" height="15" fill="rgb(225,56,26)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.7923%" y="101" width="0.0818%" height="15" fill="rgb(222,75,29)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.7923%" y="85" width="0.0818%" height="15" fill="rgb(236,139,6)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="95.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.7923%" y="69" width="0.0818%" height="15" fill="rgb(223,137,36)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="79.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.7923%" y="53" width="0.0818%" height="15" fill="rgb(226,99,2)" fg:x="1196" fg:w="1"/><text x="98.0423%" y="63.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.7923%" y="309" width="0.1635%" height="15" fill="rgb(206,133,23)" fg:x="1196" fg:w="2"/><text x="98.0423%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="97.7923%" y="293" width="0.1635%" height="15" fill="rgb(243,173,15)" fg:x="1196" fg:w="2"/><text x="98.0423%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.8741%" y="277" width="0.0818%" height="15" fill="rgb(228,69,28)" fg:x="1197" fg:w="1"/><text x="98.1241%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="97.9558%" y="213" width="0.0818%" height="15" fill="rgb(212,51,22)" fg:x="1198" fg:w="1"/><text x="98.2058%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="97.9558%" y="197" width="0.0818%" height="15" fill="rgb(227,113,0)" fg:x="1198" fg:w="1"/><text x="98.2058%" y="207.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="97.9558%" y="181" width="0.0818%" height="15" fill="rgb(252,84,27)" fg:x="1198" fg:w="1"/><text x="98.2058%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9558%" y="165" width="0.0818%" height="15" fill="rgb(223,145,39)" fg:x="1198" fg:w="1"/><text x="98.2058%" y="175.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (4 samples, 0.33%)</title><rect x="97.7923%" y="373" width="0.3271%" height="15" fill="rgb(239,219,30)" fg:x="1196" fg:w="4"/><text x="98.0423%" y="383.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (4 samples, 0.33%)</title><rect x="97.7923%" y="357" width="0.3271%" height="15" fill="rgb(224,196,39)" fg:x="1196" fg:w="4"/><text x="98.0423%" y="367.50"></text></g><g><title>engine::session::Session::load_entity (4 samples, 0.33%)</title><rect x="97.7923%" y="341" width="0.3271%" height="15" fill="rgb(205,35,43)" fg:x="1196" fg:w="4"/><text x="98.0423%" y="351.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (4 samples, 0.33%)</title><rect x="97.7923%" y="325" width="0.3271%" height="15" fill="rgb(228,201,21)" fg:x="1196" fg:w="4"/><text x="98.0423%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="97.9558%" y="309" width="0.1635%" height="15" fill="rgb(237,118,16)" fg:x="1198" fg:w="2"/><text x="98.2058%" y="319.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="97.9558%" y="293" width="0.1635%" height="15" fill="rgb(241,17,19)" fg:x="1198" fg:w="2"/><text x="98.2058%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9558%" y="277" width="0.1635%" height="15" fill="rgb(214,10,25)" fg:x="1198" fg:w="2"/><text x="98.2058%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9558%" y="261" width="0.1635%" height="15" fill="rgb(238,37,29)" fg:x="1198" fg:w="2"/><text x="98.2058%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="97.9558%" y="245" width="0.1635%" height="15" fill="rgb(253,83,25)" fg:x="1198" fg:w="2"/><text x="98.2058%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="97.9558%" y="229" width="0.1635%" height="15" fill="rgb(234,192,12)" fg:x="1198" fg:w="2"/><text x="98.2058%" y="239.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0376%" y="213" width="0.0818%" height="15" fill="rgb(241,216,45)" fg:x="1199" fg:w="1"/><text x="98.2876%" y="223.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.0376%" y="197" width="0.0818%" height="15" fill="rgb(242,22,33)" fg:x="1199" fg:w="1"/><text x="98.2876%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.0376%" y="181" width="0.0818%" height="15" fill="rgb(231,105,49)" fg:x="1199" fg:w="1"/><text x="98.2876%" y="191.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (197 samples, 16.11%)</title><rect x="82.0932%" y="597" width="16.1079%" height="15" fill="rgb(218,204,15)" fg:x="1004" fg:w="197"/><text x="82.3432%" y="607.50">&lt;engine::session::Session..</text></g><g><title>kernel::plugins::mw::apply_middleware (197 samples, 16.11%)</title><rect x="82.0932%" y="581" width="16.1079%" height="15" fill="rgb(235,138,41)" fg:x="1004" fg:w="197"/><text x="82.3432%" y="591.50">kernel::plugins::mw::appl..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (197 samples, 16.11%)</title><rect x="82.0932%" y="565" width="16.1079%" height="15" fill="rgb(246,0,9)" fg:x="1004" fg:w="197"/><text x="82.3432%" y="575.50">kernel::plugins::mw::Midd..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (196 samples, 16.03%)</title><rect x="82.1750%" y="549" width="16.0262%" height="15" fill="rgb(210,74,4)" fg:x="1005" fg:w="196"/><text x="82.4250%" y="559.50">&lt;engine::session::ExpandS..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (189 samples, 15.45%)</title><rect x="82.7473%" y="533" width="15.4538%" height="15" fill="rgb(250,60,41)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="543.50">kernel::plugins::mw::Mid..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (189 samples, 15.45%)</title><rect x="82.7473%" y="517" width="15.4538%" height="15" fill="rgb(220,115,12)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="527.50">&lt;plugins_dynlib::Dynamic..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (189 samples, 15.45%)</title><rect x="82.7473%" y="501" width="15.4538%" height="15" fill="rgb(237,100,13)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="511.50">kernel::plugins::mw::Mid..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (189 samples, 15.45%)</title><rect x="82.7473%" y="485" width="15.4538%" height="15" fill="rgb(213,55,26)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="495.50">core::ops::function::FnO..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (189 samples, 15.45%)</title><rect x="82.7473%" y="469" width="15.4538%" height="15" fill="rgb(216,17,4)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="479.50">kernel::plugins::mw::Mid..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (189 samples, 15.45%)</title><rect x="82.7473%" y="453" width="15.4538%" height="15" fill="rgb(220,153,47)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="463.50">core::ops::function::FnO..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (189 samples, 15.45%)</title><rect x="82.7473%" y="437" width="15.4538%" height="15" fill="rgb(215,131,9)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; ..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (189 samples, 15.45%)</title><rect x="82.7473%" y="421" width="15.4538%" height="15" fill="rgb(233,46,42)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="431.50">&lt;engine::session::state:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (189 samples, 15.45%)</title><rect x="82.7473%" y="405" width="15.4538%" height="15" fill="rgb(226,86,7)" fg:x="1012" fg:w="189"/><text x="82.9973%" y="415.50">&lt;plugins_core::looking::..</text></g><g><title>plugins_core::looking::model::new_area_observation (186 samples, 15.21%)</title><rect x="82.9926%" y="389" width="15.2085%" height="15" fill="rgb(239,226,21)" fg:x="1015" fg:w="186"/><text x="83.2426%" y="399.50">plugins_core::looking::..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::OpenedScope&lt;plugins_core::moving::model::Occupyable&gt;&gt; (1 samples, 0.08%)</title><rect x="98.1194%" y="373" width="0.0818%" height="15" fill="rgb(244,137,22)" fg:x="1200" fg:w="1"/><text x="98.3694%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.1194%" y="357" width="0.0818%" height="15" fill="rgb(211,139,35)" fg:x="1200" fg:w="1"/><text x="98.3694%" y="367.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="98.2011%" y="597" width="0.0818%" height="15" fill="rgb(214,62,50)" fg:x="1201" fg:w="1"/><text x="98.4511%" y="607.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.2011%" y="581" width="0.0818%" height="15" fill="rgb(212,113,44)" fg:x="1201" fg:w="1"/><text x="98.4511%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="98.2011%" y="565" width="0.0818%" height="15" fill="rgb(226,150,43)" fg:x="1201" fg:w="1"/><text x="98.4511%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.2829%" y="485" width="0.0818%" height="15" fill="rgb(250,71,37)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2829%" y="469" width="0.0818%" height="15" fill="rgb(219,76,19)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.2829%" y="453" width="0.0818%" height="15" fill="rgb(250,39,11)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.2829%" y="437" width="0.0818%" height="15" fill="rgb(230,64,31)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.2829%" y="421" width="0.0818%" height="15" fill="rgb(208,222,23)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.2829%" y="405" width="0.0818%" height="15" fill="rgb(227,125,18)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2829%" y="389" width="0.0818%" height="15" fill="rgb(234,210,9)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.2829%" y="373" width="0.0818%" height="15" fill="rgb(217,127,24)" fg:x="1202" fg:w="1"/><text x="98.5329%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.2829%" y="549" width="0.1635%" height="15" fill="rgb(239,141,48)" fg:x="1202" fg:w="2"/><text x="98.5329%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.2829%" y="533" width="0.1635%" height="15" fill="rgb(227,109,8)" fg:x="1202" fg:w="2"/><text x="98.5329%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.2829%" y="517" width="0.1635%" height="15" fill="rgb(235,184,23)" fg:x="1202" fg:w="2"/><text x="98.5329%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.2829%" y="501" width="0.1635%" height="15" fill="rgb(227,226,48)" fg:x="1202" fg:w="2"/><text x="98.5329%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3647%" y="485" width="0.0818%" height="15" fill="rgb(206,150,11)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3647%" y="469" width="0.0818%" height="15" fill="rgb(254,2,33)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3647%" y="453" width="0.0818%" height="15" fill="rgb(243,160,20)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3647%" y="437" width="0.0818%" height="15" fill="rgb(218,208,30)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3647%" y="421" width="0.0818%" height="15" fill="rgb(224,120,49)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3647%" y="405" width="0.0818%" height="15" fill="rgb(246,12,2)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3647%" y="389" width="0.0818%" height="15" fill="rgb(236,117,3)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3647%" y="373" width="0.0818%" height="15" fill="rgb(216,128,52)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3647%" y="357" width="0.0818%" height="15" fill="rgb(246,145,19)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3647%" y="341" width="0.0818%" height="15" fill="rgb(222,11,46)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3647%" y="325" width="0.0818%" height="15" fill="rgb(245,82,36)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3647%" y="309" width="0.0818%" height="15" fill="rgb(250,73,51)" fg:x="1203" fg:w="1"/><text x="98.6147%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="98.4464%" y="549" width="0.2453%" height="15" fill="rgb(221,189,23)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="98.4464%" y="533" width="0.2453%" height="15" fill="rgb(210,33,7)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="543.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="98.4464%" y="517" width="0.2453%" height="15" fill="rgb(210,107,22)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="98.4464%" y="501" width="0.2453%" height="15" fill="rgb(222,116,37)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="98.4464%" y="485" width="0.2453%" height="15" fill="rgb(254,17,48)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="495.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="98.4464%" y="469" width="0.2453%" height="15" fill="rgb(224,36,32)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.25%)</title><rect x="98.4464%" y="453" width="0.2453%" height="15" fill="rgb(232,90,46)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.25%)</title><rect x="98.4464%" y="437" width="0.2453%" height="15" fill="rgb(241,66,40)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="447.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.25%)</title><rect x="98.4464%" y="421" width="0.2453%" height="15" fill="rgb(249,184,29)" fg:x="1204" fg:w="3"/><text x="98.6964%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.5282%" y="405" width="0.1635%" height="15" fill="rgb(231,181,1)" fg:x="1205" fg:w="2"/><text x="98.7782%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.5282%" y="389" width="0.1635%" height="15" fill="rgb(224,94,2)" fg:x="1205" fg:w="2"/><text x="98.7782%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="98.6100%" y="373" width="0.0818%" height="15" fill="rgb(229,170,15)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6100%" y="357" width="0.0818%" height="15" fill="rgb(240,127,35)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="367.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="98.6100%" y="341" width="0.0818%" height="15" fill="rgb(248,196,34)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="351.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="98.6100%" y="325" width="0.0818%" height="15" fill="rgb(236,137,7)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="335.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="98.6100%" y="309" width="0.0818%" height="15" fill="rgb(235,127,16)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="319.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="98.6100%" y="293" width="0.0818%" height="15" fill="rgb(250,192,54)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="303.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.6100%" y="277" width="0.0818%" height="15" fill="rgb(218,98,20)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="287.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="98.6100%" y="261" width="0.0818%" height="15" fill="rgb(230,176,47)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="271.50"></text></g><g><title>&lt;serde::de::Unexpected as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="98.6100%" y="245" width="0.0818%" height="15" fill="rgb(244,2,33)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="255.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="98.6100%" y="229" width="0.0818%" height="15" fill="rgb(231,100,17)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="239.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="98.6100%" y="213" width="0.0818%" height="15" fill="rgb(245,23,12)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="223.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.6100%" y="197" width="0.0818%" height="15" fill="rgb(249,55,22)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="98.6100%" y="181" width="0.0818%" height="15" fill="rgb(207,134,9)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="191.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="98.6100%" y="165" width="0.0818%" height="15" fill="rgb(218,134,0)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="98.6100%" y="149" width="0.0818%" height="15" fill="rgb(213,212,33)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="98.6100%" y="133" width="0.0818%" height="15" fill="rgb(252,106,18)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="98.6100%" y="117" width="0.0818%" height="15" fill="rgb(208,126,42)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="127.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.6100%" y="101" width="0.0818%" height="15" fill="rgb(246,175,29)" fg:x="1206" fg:w="1"/><text x="98.8600%" y="111.50"></text></g><g><title>engine::session::internal::Added::find_refs (7 samples, 0.57%)</title><rect x="98.2829%" y="581" width="0.5724%" height="15" fill="rgb(215,13,50)" fg:x="1202" fg:w="7"/><text x="98.5329%" y="591.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (7 samples, 0.57%)</title><rect x="98.2829%" y="565" width="0.5724%" height="15" fill="rgb(216,172,15)" fg:x="1202" fg:w="7"/><text x="98.5329%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.6917%" y="549" width="0.1635%" height="15" fill="rgb(212,103,13)" fg:x="1207" fg:w="2"/><text x="98.9417%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6917%" y="533" width="0.1635%" height="15" fill="rgb(231,171,36)" fg:x="1207" fg:w="2"/><text x="98.9417%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7735%" y="517" width="0.0818%" height="15" fill="rgb(250,123,20)" fg:x="1208" fg:w="1"/><text x="99.0235%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="98.7735%" y="501" width="0.0818%" height="15" fill="rgb(212,53,50)" fg:x="1208" fg:w="1"/><text x="99.0235%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7735%" y="485" width="0.0818%" height="15" fill="rgb(243,54,12)" fg:x="1208" fg:w="1"/><text x="99.0235%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7735%" y="469" width="0.0818%" height="15" fill="rgb(234,101,34)" fg:x="1208" fg:w="1"/><text x="99.0235%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="98.7735%" y="453" width="0.0818%" height="15" fill="rgb(254,67,22)" fg:x="1208" fg:w="1"/><text x="99.0235%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8553%" y="565" width="0.0818%" height="15" fill="rgb(250,35,47)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8553%" y="549" width="0.0818%" height="15" fill="rgb(226,126,38)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8553%" y="533" width="0.0818%" height="15" fill="rgb(216,138,53)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8553%" y="517" width="0.0818%" height="15" fill="rgb(246,199,43)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8553%" y="501" width="0.0818%" height="15" fill="rgb(232,125,11)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8553%" y="485" width="0.0818%" height="15" fill="rgb(218,219,45)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8553%" y="469" width="0.0818%" height="15" fill="rgb(216,102,54)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8553%" y="453" width="0.0818%" height="15" fill="rgb(250,228,7)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8553%" y="437" width="0.0818%" height="15" fill="rgb(226,125,25)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8553%" y="421" width="0.0818%" height="15" fill="rgb(224,165,27)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8553%" y="405" width="0.0818%" height="15" fill="rgb(233,86,3)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8553%" y="389" width="0.0818%" height="15" fill="rgb(228,116,20)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8553%" y="373" width="0.0818%" height="15" fill="rgb(209,192,17)" fg:x="1209" fg:w="1"/><text x="99.1053%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.9370%" y="517" width="0.0818%" height="15" fill="rgb(224,88,34)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.9370%" y="501" width="0.0818%" height="15" fill="rgb(233,38,6)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="511.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.9370%" y="485" width="0.0818%" height="15" fill="rgb(212,59,30)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9370%" y="469" width="0.0818%" height="15" fill="rgb(213,80,3)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9370%" y="453" width="0.0818%" height="15" fill="rgb(251,178,7)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.9370%" y="437" width="0.0818%" height="15" fill="rgb(213,154,26)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.9370%" y="421" width="0.0818%" height="15" fill="rgb(238,165,49)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.9370%" y="405" width="0.0818%" height="15" fill="rgb(248,91,46)" fg:x="1210" fg:w="1"/><text x="99.1870%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.9370%" y="565" width="0.1635%" height="15" fill="rgb(244,21,52)" fg:x="1210" fg:w="2"/><text x="99.1870%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.9370%" y="549" width="0.1635%" height="15" fill="rgb(247,122,20)" fg:x="1210" fg:w="2"/><text x="99.1870%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9370%" y="533" width="0.1635%" height="15" fill="rgb(218,27,9)" fg:x="1210" fg:w="2"/><text x="99.1870%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0188%" y="517" width="0.0818%" height="15" fill="rgb(246,7,6)" fg:x="1211" fg:w="1"/><text x="99.2688%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0188%" y="501" width="0.0818%" height="15" fill="rgb(227,135,54)" fg:x="1211" fg:w="1"/><text x="99.2688%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.0188%" y="485" width="0.0818%" height="15" fill="rgb(247,14,11)" fg:x="1211" fg:w="1"/><text x="99.2688%" y="495.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.0188%" y="469" width="0.0818%" height="15" fill="rgb(206,149,34)" fg:x="1211" fg:w="1"/><text x="99.2688%" y="479.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.0188%" y="453" width="0.0818%" height="15" fill="rgb(227,228,4)" fg:x="1211" fg:w="1"/><text x="99.2688%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.1006%" y="453" width="0.0818%" height="15" fill="rgb(238,218,28)" fg:x="1212" fg:w="1"/><text x="99.3506%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1006%" y="501" width="0.1635%" height="15" fill="rgb(252,86,40)" fg:x="1212" fg:w="2"/><text x="99.3506%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1006%" y="485" width="0.1635%" height="15" fill="rgb(251,225,11)" fg:x="1212" fg:w="2"/><text x="99.3506%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1006%" y="469" width="0.1635%" height="15" fill="rgb(206,46,49)" fg:x="1212" fg:w="2"/><text x="99.3506%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1823%" y="453" width="0.0818%" height="15" fill="rgb(245,128,24)" fg:x="1213" fg:w="1"/><text x="99.4323%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.1823%" y="437" width="0.0818%" height="15" fill="rgb(219,177,34)" fg:x="1213" fg:w="1"/><text x="99.4323%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="99.1823%" y="421" width="0.0818%" height="15" fill="rgb(218,60,48)" fg:x="1213" fg:w="1"/><text x="99.4323%" y="431.50"></text></g><g><title>engine::session::Session::load_entity (13 samples, 1.06%)</title><rect x="98.2829%" y="597" width="1.0630%" height="15" fill="rgb(221,11,5)" fg:x="1202" fg:w="13"/><text x="98.5329%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.49%)</title><rect x="98.8553%" y="581" width="0.4906%" height="15" fill="rgb(220,148,13)" fg:x="1209" fg:w="6"/><text x="99.1053%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.25%)</title><rect x="99.1006%" y="565" width="0.2453%" height="15" fill="rgb(210,16,3)" fg:x="1212" fg:w="3"/><text x="99.3506%" y="575.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.25%)</title><rect x="99.1006%" y="549" width="0.2453%" height="15" fill="rgb(236,80,2)" fg:x="1212" fg:w="3"/><text x="99.3506%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.25%)</title><rect x="99.1006%" y="533" width="0.2453%" height="15" fill="rgb(239,129,19)" fg:x="1212" fg:w="3"/><text x="99.3506%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.25%)</title><rect x="99.1006%" y="517" width="0.2453%" height="15" fill="rgb(220,106,35)" fg:x="1212" fg:w="3"/><text x="99.3506%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.2641%" y="501" width="0.0818%" height="15" fill="rgb(252,139,45)" fg:x="1214" fg:w="1"/><text x="99.5141%" y="511.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="99.3459%" y="565" width="0.0818%" height="15" fill="rgb(229,8,36)" fg:x="1215" fg:w="1"/><text x="99.5959%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5094%" y="549" width="0.0818%" height="15" fill="rgb(230,126,33)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5094%" y="533" width="0.0818%" height="15" fill="rgb(239,140,21)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.5094%" y="517" width="0.0818%" height="15" fill="rgb(254,104,9)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.5094%" y="501" width="0.0818%" height="15" fill="rgb(239,52,14)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.5094%" y="485" width="0.0818%" height="15" fill="rgb(208,227,44)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.5094%" y="469" width="0.0818%" height="15" fill="rgb(246,18,19)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5094%" y="453" width="0.0818%" height="15" fill="rgb(235,228,25)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.5094%" y="437" width="0.0818%" height="15" fill="rgb(240,156,20)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.5094%" y="421" width="0.0818%" height="15" fill="rgb(224,8,20)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.5094%" y="405" width="0.0818%" height="15" fill="rgb(214,12,52)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.5094%" y="389" width="0.0818%" height="15" fill="rgb(211,220,47)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.5094%" y="373" width="0.0818%" height="15" fill="rgb(250,173,5)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5094%" y="357" width="0.0818%" height="15" fill="rgb(250,125,52)" fg:x="1217" fg:w="1"/><text x="99.7594%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.5912%" y="549" width="0.0818%" height="15" fill="rgb(209,133,18)" fg:x="1218" fg:w="1"/><text x="99.8412%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5912%" y="533" width="0.0818%" height="15" fill="rgb(216,173,22)" fg:x="1218" fg:w="1"/><text x="99.8412%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.5912%" y="517" width="0.0818%" height="15" fill="rgb(205,3,22)" fg:x="1218" fg:w="1"/><text x="99.8412%" y="527.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="99.6729%" y="549" width="0.0818%" height="15" fill="rgb(248,22,20)" fg:x="1219" fg:w="1"/><text x="99.9229%" y="559.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.7547%" y="549" width="0.0818%" height="15" fill="rgb(233,6,29)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7547%" y="533" width="0.0818%" height="15" fill="rgb(240,22,54)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7547%" y="517" width="0.0818%" height="15" fill="rgb(231,133,32)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.7547%" y="501" width="0.0818%" height="15" fill="rgb(248,193,4)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7547%" y="485" width="0.0818%" height="15" fill="rgb(211,178,46)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7547%" y="469" width="0.0818%" height="15" fill="rgb(224,5,42)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7547%" y="453" width="0.0818%" height="15" fill="rgb(239,176,25)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7547%" y="437" width="0.0818%" height="15" fill="rgb(245,187,50)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7547%" y="421" width="0.0818%" height="15" fill="rgb(248,24,15)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7547%" y="405" width="0.0818%" height="15" fill="rgb(205,166,13)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7547%" y="389" width="0.0818%" height="15" fill="rgb(208,114,23)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7547%" y="373" width="0.0818%" height="15" fill="rgb(239,127,18)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7547%" y="357" width="0.0818%" height="15" fill="rgb(219,154,28)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7547%" y="341" width="0.0818%" height="15" fill="rgb(225,157,23)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7547%" y="325" width="0.0818%" height="15" fill="rgb(219,8,6)" fg:x="1220" fg:w="1"/><text x="100.0047%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8365%" y="437" width="0.0818%" height="15" fill="rgb(212,47,6)" fg:x="1221" fg:w="1"/><text x="100.0865%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8365%" y="421" width="0.0818%" height="15" fill="rgb(224,190,4)" fg:x="1221" fg:w="1"/><text x="100.0865%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8365%" y="405" width="0.0818%" height="15" fill="rgb(239,183,29)" fg:x="1221" fg:w="1"/><text x="100.0865%" y="415.50"></text></g><g><title>all (1,223 samples, 100%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(213,57,7)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="991.50"></text></g><g><title>simple-9bf755a9 (1,223 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(216,148,1)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="975.50">simple-9bf755a9</text></g><g><title>_start (1,223 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(236,182,29)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="959.50">_start</text></g><g><title>__libc_start_main (1,223 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(244,120,48)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="943.50">__libc_start_main</text></g><g><title>main (1,223 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(206,71,34)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="927.50">main</text></g><g><title>std::rt::lang_start_internal (1,223 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(242,32,6)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="911.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,223 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(241,35,3)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="895.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,223 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(222,62,19)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="879.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,223 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(223,110,41)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="863.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,223 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(208,224,4)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="847.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,223 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(241,137,19)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,223 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(244,24,17)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,223 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(245,178,49)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="799.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,223 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(219,160,38)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="783.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,223 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(228,137,14)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="767.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,223 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(237,134,11)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="751.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,223 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(211,126,44)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="735.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,223 samples, 100.00%)</title><rect x="0.0000%" y="709" width="100.0000%" height="15" fill="rgb(226,171,33)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="719.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,223 samples, 100.00%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(253,99,13)" fg:x="0" fg:w="1223"/><text x="0.2500%" y="703.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (357 samples, 29.19%)</title><rect x="70.8095%" y="677" width="29.1905%" height="15" fill="rgb(244,48,7)" fg:x="866" fg:w="357"/><text x="71.0595%" y="687.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criteri..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (357 samples, 29.19%)</title><rect x="70.8095%" y="661" width="29.1905%" height="15" fill="rgb(244,217,54)" fg:x="866" fg:w="357"/><text x="71.0595%" y="671.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (357 samples, 29.19%)</title><rect x="70.8095%" y="645" width="29.1905%" height="15" fill="rgb(224,15,18)" fg:x="866" fg:w="357"/><text x="71.0595%" y="655.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (219 samples, 17.91%)</title><rect x="82.0932%" y="629" width="17.9068%" height="15" fill="rgb(244,99,12)" fg:x="1004" fg:w="219"/><text x="82.3432%" y="639.50">engine::session::Session::ev..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (219 samples, 17.91%)</title><rect x="82.0932%" y="613" width="17.9068%" height="15" fill="rgb(233,226,8)" fg:x="1004" fg:w="219"/><text x="82.3432%" y="623.50">engine::session::Session::ev..</text></g><g><title>kernel::model::EntityPtrResolver::world (8 samples, 0.65%)</title><rect x="99.3459%" y="597" width="0.6541%" height="15" fill="rgb(229,211,3)" fg:x="1215" fg:w="8"/><text x="99.5959%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="99.3459%" y="581" width="0.6541%" height="15" fill="rgb(216,140,21)" fg:x="1215" fg:w="8"/><text x="99.5959%" y="591.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="99.4276%" y="565" width="0.5724%" height="15" fill="rgb(234,122,30)" fg:x="1216" fg:w="7"/><text x="99.6776%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8365%" y="549" width="0.1635%" height="15" fill="rgb(236,25,46)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="559.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8365%" y="533" width="0.1635%" height="15" fill="rgb(217,52,54)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8365%" y="517" width="0.1635%" height="15" fill="rgb(222,29,26)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8365%" y="501" width="0.1635%" height="15" fill="rgb(216,177,29)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8365%" y="485" width="0.1635%" height="15" fill="rgb(247,136,51)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8365%" y="469" width="0.1635%" height="15" fill="rgb(231,47,47)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8365%" y="453" width="0.1635%" height="15" fill="rgb(211,192,36)" fg:x="1221" fg:w="2"/><text x="100.0865%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.9182%" y="437" width="0.0818%" height="15" fill="rgb(229,156,32)" fg:x="1222" fg:w="1"/><text x="100.1682%" y="447.50"></text></g></svg></svg>