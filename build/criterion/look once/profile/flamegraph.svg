<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1231"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.0812%" y="661" width="0.1625%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.3312%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.1625%" y="645" width="0.0812%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.4125%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.3249%" y="645" width="0.0812%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="0.5749%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4062%" y="613" width="0.1625%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="2"/><text x="0.6562%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5686%" y="565" width="0.1625%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="2"/><text x="0.8186%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.7311%" y="565" width="0.0812%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="1"/><text x="0.9811%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.8936%" y="549" width="0.1625%" height="15" fill="rgb(207,160,47)" fg:x="11" fg:w="2"/><text x="1.1436%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.0561%" y="549" width="0.1625%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="2"/><text x="1.3061%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="1.2185%" y="533" width="0.2437%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="3"/><text x="1.4685%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4622%" y="533" width="0.0812%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="1"/><text x="1.7122%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.06%)</title><rect x="0.5686%" y="581" width="1.0561%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="13"/><text x="0.8186%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.81%)</title><rect x="0.8123%" y="565" width="0.8123%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="10"/><text x="1.0623%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="1.2185%" y="549" width="0.4062%" height="15" fill="rgb(216,20,37)" fg:x="15" fg:w="5"/><text x="1.4685%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.5435%" y="533" width="0.0812%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="1"/><text x="1.7935%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.5435%" y="517" width="0.0812%" height="15" fill="rgb(217,207,13)" fg:x="19" fg:w="1"/><text x="1.7935%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5435%" y="501" width="0.0812%" height="15" fill="rgb(231,73,38)" fg:x="19" fg:w="1"/><text x="1.7935%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7872%" y="549" width="0.0812%" height="15" fill="rgb(225,20,46)" fg:x="22" fg:w="1"/><text x="2.0372%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="1.8684%" y="549" width="0.2437%" height="15" fill="rgb(210,31,41)" fg:x="23" fg:w="3"/><text x="2.1184%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.9496%" y="533" width="0.1625%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="2"/><text x="2.1996%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="2.1121%" y="533" width="0.1625%" height="15" fill="rgb(226,26,5)" fg:x="26" fg:w="2"/><text x="2.3621%" y="543.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="2.1121%" y="517" width="0.1625%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="2"/><text x="2.3621%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="1.7059%" y="565" width="0.7311%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="9"/><text x="1.9559%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="2.1121%" y="549" width="0.3249%" height="15" fill="rgb(221,5,38)" fg:x="26" fg:w="4"/><text x="2.3621%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2746%" y="533" width="0.1625%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="2"/><text x="2.5246%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2746%" y="517" width="0.1625%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="2"/><text x="2.5246%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="1.6247%" y="581" width="0.8936%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="11"/><text x="1.8747%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4370%" y="565" width="0.0812%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="1"/><text x="2.6870%" y="575.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 2.03%)</title><rect x="0.5686%" y="597" width="2.0309%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="25"/><text x="0.8186%" y="607.50">&lt;..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5183%" y="581" width="0.0812%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="1"/><text x="2.7683%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (28 samples, 2.27%)</title><rect x="0.4062%" y="629" width="2.2746%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="28"/><text x="0.6562%" y="639.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (26 samples, 2.11%)</title><rect x="0.5686%" y="613" width="2.1121%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="26"/><text x="0.8186%" y="623.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5995%" y="597" width="0.0812%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="1"/><text x="2.8495%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 2.52%)</title><rect x="0.2437%" y="661" width="2.5183%" height="15" fill="rgb(213,181,19)" fg:x="3" fg:w="31"/><text x="0.4937%" y="671.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (29 samples, 2.36%)</title><rect x="0.4062%" y="645" width="2.3558%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="29"/><text x="0.6562%" y="655.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.6807%" y="629" width="0.0812%" height="15" fill="rgb(241,83,37)" fg:x="33" fg:w="1"/><text x="2.9307%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="2.8432%" y="613" width="0.0812%" height="15" fill="rgb(233,36,39)" fg:x="35" fg:w="1"/><text x="3.0932%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;kernel::model::base::AclRule&gt;&gt; (1 samples, 0.08%)</title><rect x="2.8432%" y="597" width="0.0812%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="1"/><text x="3.0932%" y="607.50"></text></g><g><title>libloading::library_filename (1 samples, 0.08%)</title><rect x="3.0869%" y="565" width="0.0812%" height="15" fill="rgb(245,192,40)" fg:x="38" fg:w="1"/><text x="3.3369%" y="575.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.08%)</title><rect x="3.0869%" y="549" width="0.0812%" height="15" fill="rgb(238,167,29)" fg:x="38" fg:w="1"/><text x="3.3369%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="3.0869%" y="533" width="0.0812%" height="15" fill="rgb(232,182,51)" fg:x="38" fg:w="1"/><text x="3.3369%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="3.0869%" y="517" width="0.0812%" height="15" fill="rgb(231,60,39)" fg:x="38" fg:w="1"/><text x="3.3369%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="3.0869%" y="501" width="0.0812%" height="15" fill="rgb(208,69,12)" fg:x="38" fg:w="1"/><text x="3.3369%" y="511.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.0869%" y="485" width="0.0812%" height="15" fill="rgb(235,93,37)" fg:x="38" fg:w="1"/><text x="3.3369%" y="495.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="3.1682%" y="549" width="0.1625%" height="15" fill="rgb(213,116,39)" fg:x="39" fg:w="2"/><text x="3.4182%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="3.2494%" y="533" width="0.0812%" height="15" fill="rgb(222,207,29)" fg:x="40" fg:w="1"/><text x="3.4994%" y="543.50"></text></g><g><title>libloading::safe::Library::new (13 samples, 1.06%)</title><rect x="3.1682%" y="565" width="1.0561%" height="15" fill="rgb(206,96,30)" fg:x="39" fg:w="13"/><text x="3.4182%" y="575.50"></text></g><g><title>dlopen (11 samples, 0.89%)</title><rect x="3.3306%" y="549" width="0.8936%" height="15" fill="rgb(218,138,4)" fg:x="41" fg:w="11"/><text x="3.5806%" y="559.50"></text></g><g><title>_dl_catch_error (11 samples, 0.89%)</title><rect x="3.3306%" y="533" width="0.8936%" height="15" fill="rgb(250,191,14)" fg:x="41" fg:w="11"/><text x="3.5806%" y="543.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.81%)</title><rect x="3.4119%" y="517" width="0.8123%" height="15" fill="rgb(239,60,40)" fg:x="42" fg:w="10"/><text x="3.6619%" y="527.50"></text></g><g><title>_dl_catch_exception (10 samples, 0.81%)</title><rect x="3.4119%" y="501" width="0.8123%" height="15" fill="rgb(206,27,48)" fg:x="42" fg:w="10"/><text x="3.6619%" y="511.50"></text></g><g><title>_dl_catch_exception (9 samples, 0.73%)</title><rect x="3.4931%" y="485" width="0.7311%" height="15" fill="rgb(225,35,8)" fg:x="43" fg:w="9"/><text x="3.7431%" y="495.50"></text></g><g><title>_dl_find_dso_for_object (1 samples, 0.08%)</title><rect x="4.1430%" y="469" width="0.0812%" height="15" fill="rgb(250,213,24)" fg:x="51" fg:w="1"/><text x="4.3930%" y="479.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (15 samples, 1.22%)</title><rect x="3.0869%" y="581" width="1.2185%" height="15" fill="rgb(247,123,22)" fg:x="38" fg:w="15"/><text x="3.3369%" y="591.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="4.2242%" y="565" width="0.0812%" height="15" fill="rgb(231,138,38)" fg:x="52" fg:w="1"/><text x="4.4742%" y="575.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.08%)</title><rect x="4.2242%" y="549" width="0.0812%" height="15" fill="rgb(231,145,46)" fg:x="52" fg:w="1"/><text x="4.4742%" y="559.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="4.3054%" y="581" width="0.0812%" height="15" fill="rgb(251,118,11)" fg:x="53" fg:w="1"/><text x="4.5554%" y="591.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="4.3054%" y="565" width="0.0812%" height="15" fill="rgb(217,147,25)" fg:x="53" fg:w="1"/><text x="4.5554%" y="575.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="4.3054%" y="549" width="0.0812%" height="15" fill="rgb(247,81,37)" fg:x="53" fg:w="1"/><text x="4.5554%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="4.3054%" y="533" width="0.0812%" height="15" fill="rgb(209,12,38)" fg:x="53" fg:w="1"/><text x="4.5554%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="4.3054%" y="517" width="0.0812%" height="15" fill="rgb(227,1,9)" fg:x="53" fg:w="1"/><text x="4.5554%" y="527.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (20 samples, 1.62%)</title><rect x="2.9245%" y="597" width="1.6247%" height="15" fill="rgb(248,47,43)" fg:x="36" fg:w="20"/><text x="3.1745%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="4.3867%" y="581" width="0.1625%" height="15" fill="rgb(221,10,30)" fg:x="54" fg:w="2"/><text x="4.6367%" y="591.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="4.3867%" y="565" width="0.1625%" height="15" fill="rgb(210,229,1)" fg:x="54" fg:w="2"/><text x="4.6367%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.5491%" y="565" width="0.0812%" height="15" fill="rgb(222,148,37)" fg:x="56" fg:w="1"/><text x="4.7991%" y="575.50"></text></g><g><title>engine::session::Session::initialize (22 samples, 1.79%)</title><rect x="2.9245%" y="613" width="1.7872%" height="15" fill="rgb(234,67,33)" fg:x="36" fg:w="22"/><text x="3.1745%" y="623.50">e..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="4.5491%" y="597" width="0.1625%" height="15" fill="rgb(247,98,35)" fg:x="56" fg:w="2"/><text x="4.7991%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.5491%" y="581" width="0.1625%" height="15" fill="rgb(247,138,52)" fg:x="56" fg:w="2"/><text x="4.7991%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.6304%" y="565" width="0.0812%" height="15" fill="rgb(213,79,30)" fg:x="57" fg:w="1"/><text x="4.8804%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.6304%" y="549" width="0.0812%" height="15" fill="rgb(246,177,23)" fg:x="57" fg:w="1"/><text x="4.8804%" y="559.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="4.6304%" y="533" width="0.0812%" height="15" fill="rgb(230,62,27)" fg:x="57" fg:w="1"/><text x="4.8804%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (25 samples, 2.03%)</title><rect x="2.7620%" y="661" width="2.0309%" height="15" fill="rgb(216,154,8)" fg:x="34" fg:w="25"/><text x="3.0120%" y="671.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (25 samples, 2.03%)</title><rect x="2.7620%" y="645" width="2.0309%" height="15" fill="rgb(244,35,45)" fg:x="34" fg:w="25"/><text x="3.0120%" y="655.50">e..</text></g><g><title>engine::session::Session::new (24 samples, 1.95%)</title><rect x="2.8432%" y="629" width="1.9496%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="24"/><text x="3.0932%" y="639.50">e..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.7116%" y="613" width="0.0812%" height="15" fill="rgb(240,54,50)" fg:x="58" fg:w="1"/><text x="4.9616%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.7116%" y="597" width="0.0812%" height="15" fill="rgb(233,84,52)" fg:x="58" fg:w="1"/><text x="4.9616%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.8741%" y="613" width="0.0812%" height="15" fill="rgb(207,117,47)" fg:x="60" fg:w="1"/><text x="5.1241%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.8741%" y="597" width="0.0812%" height="15" fill="rgb(249,43,39)" fg:x="60" fg:w="1"/><text x="5.1241%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="4.8741%" y="629" width="0.1625%" height="15" fill="rgb(209,38,44)" fg:x="60" fg:w="2"/><text x="5.1241%" y="639.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="4.9553%" y="613" width="0.0812%" height="15" fill="rgb(236,212,23)" fg:x="61" fg:w="1"/><text x="5.2053%" y="623.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="5.0366%" y="629" width="0.0812%" height="15" fill="rgb(242,79,21)" fg:x="62" fg:w="1"/><text x="5.2866%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1178%" y="597" width="0.0812%" height="15" fill="rgb(211,96,35)" fg:x="63" fg:w="1"/><text x="5.3678%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.1178%" y="581" width="0.0812%" height="15" fill="rgb(253,215,40)" fg:x="63" fg:w="1"/><text x="5.3678%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.1178%" y="565" width="0.0812%" height="15" fill="rgb(211,81,21)" fg:x="63" fg:w="1"/><text x="5.3678%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.1178%" y="549" width="0.0812%" height="15" fill="rgb(208,190,38)" fg:x="63" fg:w="1"/><text x="5.3678%" y="559.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.1990%" y="597" width="0.0812%" height="15" fill="rgb(235,213,38)" fg:x="64" fg:w="1"/><text x="5.4490%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="5.1990%" y="581" width="0.0812%" height="15" fill="rgb(237,122,38)" fg:x="64" fg:w="1"/><text x="5.4490%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1990%" y="565" width="0.0812%" height="15" fill="rgb(244,218,35)" fg:x="64" fg:w="1"/><text x="5.4490%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="5.2803%" y="533" width="0.3249%" height="15" fill="rgb(240,68,47)" fg:x="65" fg:w="4"/><text x="5.5303%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="5.2803%" y="517" width="0.3249%" height="15" fill="rgb(210,16,53)" fg:x="65" fg:w="4"/><text x="5.5303%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.4427%" y="501" width="0.1625%" height="15" fill="rgb(235,124,12)" fg:x="67" fg:w="2"/><text x="5.6927%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5240%" y="485" width="0.0812%" height="15" fill="rgb(224,169,11)" fg:x="68" fg:w="1"/><text x="5.7740%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5240%" y="469" width="0.0812%" height="15" fill="rgb(250,166,2)" fg:x="68" fg:w="1"/><text x="5.7740%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.5240%" y="453" width="0.0812%" height="15" fill="rgb(242,216,29)" fg:x="68" fg:w="1"/><text x="5.7740%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5240%" y="437" width="0.0812%" height="15" fill="rgb(230,116,27)" fg:x="68" fg:w="1"/><text x="5.7740%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5240%" y="421" width="0.0812%" height="15" fill="rgb(228,99,48)" fg:x="68" fg:w="1"/><text x="5.7740%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.6052%" y="517" width="0.0812%" height="15" fill="rgb(253,11,6)" fg:x="69" fg:w="1"/><text x="5.8552%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.6052%" y="501" width="0.0812%" height="15" fill="rgb(247,143,39)" fg:x="69" fg:w="1"/><text x="5.8552%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6052%" y="485" width="0.0812%" height="15" fill="rgb(236,97,10)" fg:x="69" fg:w="1"/><text x="5.8552%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6052%" y="469" width="0.0812%" height="15" fill="rgb(233,208,19)" fg:x="69" fg:w="1"/><text x="5.8552%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.6864%" y="517" width="0.1625%" height="15" fill="rgb(216,164,2)" fg:x="70" fg:w="2"/><text x="5.9364%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.6864%" y="501" width="0.1625%" height="15" fill="rgb(220,129,5)" fg:x="70" fg:w="2"/><text x="5.9364%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.7677%" y="485" width="0.0812%" height="15" fill="rgb(242,17,10)" fg:x="71" fg:w="1"/><text x="6.0177%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.7677%" y="469" width="0.0812%" height="15" fill="rgb(242,107,0)" fg:x="71" fg:w="1"/><text x="6.0177%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.7677%" y="453" width="0.0812%" height="15" fill="rgb(251,28,31)" fg:x="71" fg:w="1"/><text x="6.0177%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.7677%" y="437" width="0.0812%" height="15" fill="rgb(233,223,10)" fg:x="71" fg:w="1"/><text x="6.0177%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.7677%" y="421" width="0.0812%" height="15" fill="rgb(215,21,27)" fg:x="71" fg:w="1"/><text x="6.0177%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="5.8489%" y="469" width="0.0812%" height="15" fill="rgb(232,23,21)" fg:x="72" fg:w="1"/><text x="6.0989%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.9301%" y="469" width="0.0812%" height="15" fill="rgb(244,5,23)" fg:x="73" fg:w="1"/><text x="6.1801%" y="479.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="5.8489%" y="501" width="0.3249%" height="15" fill="rgb(226,81,46)" fg:x="72" fg:w="4"/><text x="6.0989%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="5.8489%" y="485" width="0.3249%" height="15" fill="rgb(247,70,30)" fg:x="72" fg:w="4"/><text x="6.0989%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0114%" y="469" width="0.1625%" height="15" fill="rgb(212,68,19)" fg:x="74" fg:w="2"/><text x="6.2614%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="6.0114%" y="453" width="0.1625%" height="15" fill="rgb(240,187,13)" fg:x="74" fg:w="2"/><text x="6.2614%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.0114%" y="437" width="0.1625%" height="15" fill="rgb(223,113,26)" fg:x="74" fg:w="2"/><text x="6.2614%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1738%" y="501" width="0.1625%" height="15" fill="rgb(206,192,2)" fg:x="76" fg:w="2"/><text x="6.4238%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.2551%" y="485" width="0.0812%" height="15" fill="rgb(241,108,4)" fg:x="77" fg:w="1"/><text x="6.5051%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="6.4175%" y="469" width="0.3249%" height="15" fill="rgb(247,173,49)" fg:x="79" fg:w="4"/><text x="6.6675%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.4988%" y="453" width="0.2437%" height="15" fill="rgb(224,114,35)" fg:x="80" fg:w="3"/><text x="6.7488%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.5800%" y="437" width="0.1625%" height="15" fill="rgb(245,159,27)" fg:x="81" fg:w="2"/><text x="6.8300%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6613%" y="421" width="0.0812%" height="15" fill="rgb(245,172,44)" fg:x="82" fg:w="1"/><text x="6.9113%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.6613%" y="405" width="0.0812%" height="15" fill="rgb(236,23,11)" fg:x="82" fg:w="1"/><text x="6.9113%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.6613%" y="389" width="0.0812%" height="15" fill="rgb(205,117,38)" fg:x="82" fg:w="1"/><text x="6.9113%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.6613%" y="373" width="0.0812%" height="15" fill="rgb(237,72,25)" fg:x="82" fg:w="1"/><text x="6.9113%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.7425%" y="469" width="0.0812%" height="15" fill="rgb(244,70,9)" fg:x="83" fg:w="1"/><text x="6.9925%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.06%)</title><rect x="5.8489%" y="517" width="1.0561%" height="15" fill="rgb(217,125,39)" fg:x="72" fg:w="13"/><text x="6.0989%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="6.3363%" y="501" width="0.5686%" height="15" fill="rgb(235,36,10)" fg:x="78" fg:w="7"/><text x="6.5863%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="6.4175%" y="485" width="0.4874%" height="15" fill="rgb(251,123,47)" fg:x="79" fg:w="6"/><text x="6.6675%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.8237%" y="469" width="0.0812%" height="15" fill="rgb(221,13,13)" fg:x="84" fg:w="1"/><text x="7.0737%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (23 samples, 1.87%)</title><rect x="5.2803%" y="549" width="1.8684%" height="15" fill="rgb(238,131,9)" fg:x="65" fg:w="23"/><text x="5.5303%" y="559.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.54%)</title><rect x="5.6052%" y="533" width="1.5435%" height="15" fill="rgb(211,50,8)" fg:x="69" fg:w="19"/><text x="5.8552%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="6.9050%" y="517" width="0.2437%" height="15" fill="rgb(245,182,24)" fg:x="85" fg:w="3"/><text x="7.1550%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="6.9050%" y="501" width="0.2437%" height="15" fill="rgb(242,14,37)" fg:x="85" fg:w="3"/><text x="7.1550%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="6.9050%" y="485" width="0.2437%" height="15" fill="rgb(246,228,12)" fg:x="85" fg:w="3"/><text x="7.1550%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="6.9862%" y="469" width="0.1625%" height="15" fill="rgb(213,55,15)" fg:x="86" fg:w="2"/><text x="7.2362%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.9862%" y="453" width="0.1625%" height="15" fill="rgb(209,9,3)" fg:x="86" fg:w="2"/><text x="7.2362%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.9862%" y="437" width="0.1625%" height="15" fill="rgb(230,59,30)" fg:x="86" fg:w="2"/><text x="7.2362%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2299%" y="517" width="0.0812%" height="15" fill="rgb(209,121,21)" fg:x="89" fg:w="1"/><text x="7.4799%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="7.3111%" y="517" width="0.1625%" height="15" fill="rgb(220,109,13)" fg:x="90" fg:w="2"/><text x="7.5611%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3924%" y="501" width="0.0812%" height="15" fill="rgb(232,18,1)" fg:x="91" fg:w="1"/><text x="7.6424%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.4736%" y="485" width="0.0812%" height="15" fill="rgb(215,41,42)" fg:x="92" fg:w="1"/><text x="7.7236%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.6361%" y="469" width="0.0812%" height="15" fill="rgb(224,123,36)" fg:x="94" fg:w="1"/><text x="7.8861%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="7.7173%" y="469" width="0.0812%" height="15" fill="rgb(240,125,3)" fg:x="95" fg:w="1"/><text x="7.9673%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.7173%" y="453" width="0.0812%" height="15" fill="rgb(205,98,50)" fg:x="95" fg:w="1"/><text x="7.9673%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.7173%" y="437" width="0.0812%" height="15" fill="rgb(205,185,37)" fg:x="95" fg:w="1"/><text x="7.9673%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.7173%" y="421" width="0.0812%" height="15" fill="rgb(238,207,15)" fg:x="95" fg:w="1"/><text x="7.9673%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="7.1487%" y="549" width="0.7311%" height="15" fill="rgb(213,199,42)" fg:x="88" fg:w="9"/><text x="7.3987%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="7.1487%" y="533" width="0.7311%" height="15" fill="rgb(235,201,11)" fg:x="88" fg:w="9"/><text x="7.3987%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.4736%" y="517" width="0.4062%" height="15" fill="rgb(207,46,11)" fg:x="92" fg:w="5"/><text x="7.7236%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="7.4736%" y="501" width="0.4062%" height="15" fill="rgb(241,35,35)" fg:x="92" fg:w="5"/><text x="7.7236%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="7.5548%" y="485" width="0.3249%" height="15" fill="rgb(243,32,47)" fg:x="93" fg:w="4"/><text x="7.8048%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.7985%" y="469" width="0.0812%" height="15" fill="rgb(247,202,23)" fg:x="96" fg:w="1"/><text x="8.0485%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.7985%" y="453" width="0.0812%" height="15" fill="rgb(219,102,11)" fg:x="96" fg:w="1"/><text x="8.0485%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.7985%" y="437" width="0.0812%" height="15" fill="rgb(243,110,44)" fg:x="96" fg:w="1"/><text x="8.0485%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.8798%" y="501" width="0.1625%" height="15" fill="rgb(222,74,54)" fg:x="97" fg:w="2"/><text x="8.1298%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.9610%" y="485" width="0.0812%" height="15" fill="rgb(216,99,12)" fg:x="98" fg:w="1"/><text x="8.2110%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0422%" y="501" width="0.0812%" height="15" fill="rgb(226,22,26)" fg:x="99" fg:w="1"/><text x="8.2922%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.0422%" y="485" width="0.0812%" height="15" fill="rgb(217,163,10)" fg:x="99" fg:w="1"/><text x="8.2922%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0422%" y="469" width="0.0812%" height="15" fill="rgb(213,25,53)" fg:x="99" fg:w="1"/><text x="8.2922%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0422%" y="453" width="0.0812%" height="15" fill="rgb(252,105,26)" fg:x="99" fg:w="1"/><text x="8.2922%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="8.1235%" y="501" width="0.0812%" height="15" fill="rgb(220,39,43)" fg:x="100" fg:w="1"/><text x="8.3735%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.1235%" y="485" width="0.0812%" height="15" fill="rgb(229,68,48)" fg:x="100" fg:w="1"/><text x="8.3735%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.1235%" y="469" width="0.0812%" height="15" fill="rgb(252,8,32)" fg:x="100" fg:w="1"/><text x="8.3735%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2859%" y="453" width="0.1625%" height="15" fill="rgb(223,20,43)" fg:x="102" fg:w="2"/><text x="8.5359%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.2859%" y="437" width="0.1625%" height="15" fill="rgb(229,81,49)" fg:x="102" fg:w="2"/><text x="8.5359%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3672%" y="421" width="0.0812%" height="15" fill="rgb(236,28,36)" fg:x="103" fg:w="1"/><text x="8.6172%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.4484%" y="389" width="0.0812%" height="15" fill="rgb(249,185,26)" fg:x="104" fg:w="1"/><text x="8.6984%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.4484%" y="373" width="0.0812%" height="15" fill="rgb(249,174,33)" fg:x="104" fg:w="1"/><text x="8.6984%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.4484%" y="357" width="0.0812%" height="15" fill="rgb(233,201,37)" fg:x="104" fg:w="1"/><text x="8.6984%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5297%" y="389" width="0.0812%" height="15" fill="rgb(221,78,26)" fg:x="105" fg:w="1"/><text x="8.7797%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="8.4484%" y="453" width="0.2437%" height="15" fill="rgb(250,127,30)" fg:x="104" fg:w="3"/><text x="8.6984%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.4484%" y="437" width="0.2437%" height="15" fill="rgb(230,49,44)" fg:x="104" fg:w="3"/><text x="8.6984%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="8.4484%" y="421" width="0.2437%" height="15" fill="rgb(229,67,23)" fg:x="104" fg:w="3"/><text x="8.6984%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.4484%" y="405" width="0.2437%" height="15" fill="rgb(249,83,47)" fg:x="104" fg:w="3"/><text x="8.6984%" y="415.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="8.6109%" y="389" width="0.0812%" height="15" fill="rgb(215,43,3)" fg:x="106" fg:w="1"/><text x="8.8609%" y="399.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.6109%" y="373" width="0.0812%" height="15" fill="rgb(238,154,13)" fg:x="106" fg:w="1"/><text x="8.8609%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="8.6921%" y="437" width="0.2437%" height="15" fill="rgb(219,56,2)" fg:x="107" fg:w="3"/><text x="8.9421%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="8.6921%" y="421" width="0.2437%" height="15" fill="rgb(233,0,4)" fg:x="107" fg:w="3"/><text x="8.9421%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.73%)</title><rect x="8.2859%" y="469" width="0.7311%" height="15" fill="rgb(235,30,7)" fg:x="102" fg:w="9"/><text x="8.5359%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="8.6921%" y="453" width="0.3249%" height="15" fill="rgb(250,79,13)" fg:x="107" fg:w="4"/><text x="8.9421%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9358%" y="437" width="0.0812%" height="15" fill="rgb(211,146,34)" fg:x="110" fg:w="1"/><text x="9.1858%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.81%)</title><rect x="8.2859%" y="485" width="0.8123%" height="15" fill="rgb(228,22,38)" fg:x="102" fg:w="10"/><text x="8.5359%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.0171%" y="469" width="0.0812%" height="15" fill="rgb(235,168,5)" fg:x="111" fg:w="1"/><text x="9.2671%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.0171%" y="453" width="0.0812%" height="15" fill="rgb(221,155,16)" fg:x="111" fg:w="1"/><text x="9.2671%" y="463.50"></text></g><g><title>engine::session::Session::flush (54 samples, 4.39%)</title><rect x="4.8741%" y="645" width="4.3867%" height="15" fill="rgb(215,215,53)" fg:x="60" fg:w="54"/><text x="5.1241%" y="655.50">engin..</text></g><g><title>engine::session::state::State::close (51 samples, 4.14%)</title><rect x="5.1178%" y="629" width="4.1430%" height="15" fill="rgb(223,4,10)" fg:x="63" fg:w="51"/><text x="5.3678%" y="639.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (51 samples, 4.14%)</title><rect x="5.1178%" y="613" width="4.1430%" height="15" fill="rgb(234,103,6)" fg:x="63" fg:w="51"/><text x="5.3678%" y="623.50">engin..</text></g><g><title>core::iter::adapters::try_process (49 samples, 3.98%)</title><rect x="5.2803%" y="597" width="3.9805%" height="15" fill="rgb(227,97,0)" fg:x="65" fg:w="49"/><text x="5.5303%" y="607.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (49 samples, 3.98%)</title><rect x="5.2803%" y="581" width="3.9805%" height="15" fill="rgb(234,150,53)" fg:x="65" fg:w="49"/><text x="5.5303%" y="591.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (49 samples, 3.98%)</title><rect x="5.2803%" y="565" width="3.9805%" height="15" fill="rgb(228,201,54)" fg:x="65" fg:w="49"/><text x="5.5303%" y="575.50">engi..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.38%)</title><rect x="7.8798%" y="549" width="1.3810%" height="15" fill="rgb(222,22,37)" fg:x="97" fg:w="17"/><text x="8.1298%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (17 samples, 1.38%)</title><rect x="7.8798%" y="533" width="1.3810%" height="15" fill="rgb(237,53,32)" fg:x="97" fg:w="17"/><text x="8.1298%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (17 samples, 1.38%)</title><rect x="7.8798%" y="517" width="1.3810%" height="15" fill="rgb(233,25,53)" fg:x="97" fg:w="17"/><text x="8.1298%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.06%)</title><rect x="8.2047%" y="501" width="1.0561%" height="15" fill="rgb(210,40,34)" fg:x="101" fg:w="13"/><text x="8.4547%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.0983%" y="485" width="0.1625%" height="15" fill="rgb(241,220,44)" fg:x="112" fg:w="2"/><text x="9.3483%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1795%" y="469" width="0.0812%" height="15" fill="rgb(235,28,35)" fg:x="113" fg:w="1"/><text x="9.4295%" y="479.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="9.2608%" y="645" width="0.0812%" height="15" fill="rgb(210,56,17)" fg:x="114" fg:w="1"/><text x="9.5108%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="9.2608%" y="629" width="0.0812%" height="15" fill="rgb(224,130,29)" fg:x="114" fg:w="1"/><text x="9.5108%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="9.2608%" y="613" width="0.0812%" height="15" fill="rgb(235,212,8)" fg:x="114" fg:w="1"/><text x="9.5108%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="9.2608%" y="597" width="0.0812%" height="15" fill="rgb(223,33,50)" fg:x="114" fg:w="1"/><text x="9.5108%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.2608%" y="581" width="0.0812%" height="15" fill="rgb(219,149,13)" fg:x="114" fg:w="1"/><text x="9.5108%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.2608%" y="565" width="0.0812%" height="15" fill="rgb(250,156,29)" fg:x="114" fg:w="1"/><text x="9.5108%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.2608%" y="549" width="0.0812%" height="15" fill="rgb(216,193,19)" fg:x="114" fg:w="1"/><text x="9.5108%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="9.3420%" y="613" width="0.0812%" height="15" fill="rgb(216,135,14)" fg:x="115" fg:w="1"/><text x="9.5920%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="9.3420%" y="597" width="0.0812%" height="15" fill="rgb(241,47,5)" fg:x="115" fg:w="1"/><text x="9.5920%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="9.3420%" y="581" width="0.0812%" height="15" fill="rgb(233,42,35)" fg:x="115" fg:w="1"/><text x="9.5920%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.3420%" y="565" width="0.0812%" height="15" fill="rgb(231,13,6)" fg:x="115" fg:w="1"/><text x="9.5920%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3420%" y="549" width="0.0812%" height="15" fill="rgb(207,181,40)" fg:x="115" fg:w="1"/><text x="9.5920%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.3420%" y="533" width="0.0812%" height="15" fill="rgb(254,173,49)" fg:x="115" fg:w="1"/><text x="9.5920%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.3420%" y="517" width="0.0812%" height="15" fill="rgb(221,1,38)" fg:x="115" fg:w="1"/><text x="9.5920%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.4232%" y="581" width="0.0812%" height="15" fill="rgb(206,124,46)" fg:x="116" fg:w="1"/><text x="9.6732%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.4232%" y="597" width="0.1625%" height="15" fill="rgb(249,21,11)" fg:x="116" fg:w="2"/><text x="9.6732%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.5045%" y="581" width="0.0812%" height="15" fill="rgb(222,201,40)" fg:x="117" fg:w="1"/><text x="9.7545%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.5045%" y="565" width="0.0812%" height="15" fill="rgb(235,61,29)" fg:x="117" fg:w="1"/><text x="9.7545%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.5857%" y="565" width="0.0812%" height="15" fill="rgb(219,207,3)" fg:x="118" fg:w="1"/><text x="9.8357%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.6669%" y="517" width="0.0812%" height="15" fill="rgb(222,56,46)" fg:x="119" fg:w="1"/><text x="9.9169%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.6669%" y="501" width="0.0812%" height="15" fill="rgb(239,76,54)" fg:x="119" fg:w="1"/><text x="9.9169%" y="511.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (5 samples, 0.41%)</title><rect x="9.4232%" y="613" width="0.4062%" height="15" fill="rgb(231,124,27)" fg:x="116" fg:w="5"/><text x="9.6732%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="9.5857%" y="597" width="0.2437%" height="15" fill="rgb(249,195,6)" fg:x="118" fg:w="3"/><text x="9.8357%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (3 samples, 0.24%)</title><rect x="9.5857%" y="581" width="0.2437%" height="15" fill="rgb(237,174,47)" fg:x="118" fg:w="3"/><text x="9.8357%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.6669%" y="565" width="0.1625%" height="15" fill="rgb(206,201,31)" fg:x="119" fg:w="2"/><text x="9.9169%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="9.6669%" y="549" width="0.1625%" height="15" fill="rgb(231,57,52)" fg:x="119" fg:w="2"/><text x="9.9169%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="9.6669%" y="533" width="0.1625%" height="15" fill="rgb(248,177,22)" fg:x="119" fg:w="2"/><text x="9.9169%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.7482%" y="517" width="0.0812%" height="15" fill="rgb(215,211,37)" fg:x="120" fg:w="1"/><text x="9.9982%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.8294%" y="533" width="0.0812%" height="15" fill="rgb(241,128,51)" fg:x="121" fg:w="1"/><text x="10.0794%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="9.8294%" y="597" width="0.1625%" height="15" fill="rgb(227,165,31)" fg:x="121" fg:w="2"/><text x="10.0794%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="9.8294%" y="581" width="0.1625%" height="15" fill="rgb(228,167,24)" fg:x="121" fg:w="2"/><text x="10.0794%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="9.8294%" y="565" width="0.1625%" height="15" fill="rgb(228,143,12)" fg:x="121" fg:w="2"/><text x="10.0794%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="9.8294%" y="549" width="0.1625%" height="15" fill="rgb(249,149,8)" fg:x="121" fg:w="2"/><text x="10.0794%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.9106%" y="533" width="0.0812%" height="15" fill="rgb(243,35,44)" fg:x="122" fg:w="1"/><text x="10.1606%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.9106%" y="517" width="0.0812%" height="15" fill="rgb(246,89,9)" fg:x="122" fg:w="1"/><text x="10.1606%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="9.9106%" y="501" width="0.0812%" height="15" fill="rgb(233,213,13)" fg:x="122" fg:w="1"/><text x="10.1606%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="9.9106%" y="485" width="0.0812%" height="15" fill="rgb(233,141,41)" fg:x="122" fg:w="1"/><text x="10.1606%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="9.9106%" y="469" width="0.0812%" height="15" fill="rgb(239,167,4)" fg:x="122" fg:w="1"/><text x="10.1606%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9106%" y="453" width="0.0812%" height="15" fill="rgb(209,217,16)" fg:x="122" fg:w="1"/><text x="10.1606%" y="463.50"></text></g><g><title>plugins_core::build::Build::save (9 samples, 0.73%)</title><rect x="9.3420%" y="645" width="0.7311%" height="15" fill="rgb(219,88,35)" fg:x="115" fg:w="9"/><text x="9.5920%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="9.3420%" y="629" width="0.7311%" height="15" fill="rgb(220,193,23)" fg:x="115" fg:w="9"/><text x="9.5920%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="9.8294%" y="613" width="0.2437%" height="15" fill="rgb(230,90,52)" fg:x="121" fg:w="3"/><text x="10.0794%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9919%" y="597" width="0.0812%" height="15" fill="rgb(252,106,19)" fg:x="123" fg:w="1"/><text x="10.2419%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.9919%" y="581" width="0.0812%" height="15" fill="rgb(206,74,20)" fg:x="123" fg:w="1"/><text x="10.2419%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="9.9919%" y="565" width="0.0812%" height="15" fill="rgb(230,138,44)" fg:x="123" fg:w="1"/><text x="10.2419%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="9.9919%" y="549" width="0.0812%" height="15" fill="rgb(235,182,43)" fg:x="123" fg:w="1"/><text x="10.2419%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.9919%" y="533" width="0.0812%" height="15" fill="rgb(242,16,51)" fg:x="123" fg:w="1"/><text x="10.2419%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9919%" y="517" width="0.0812%" height="15" fill="rgb(248,9,4)" fg:x="123" fg:w="1"/><text x="10.2419%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.9919%" y="501" width="0.0812%" height="15" fill="rgb(210,31,22)" fg:x="123" fg:w="1"/><text x="10.2419%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9919%" y="485" width="0.0812%" height="15" fill="rgb(239,54,39)" fg:x="123" fg:w="1"/><text x="10.2419%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.9919%" y="469" width="0.0812%" height="15" fill="rgb(230,99,41)" fg:x="123" fg:w="1"/><text x="10.2419%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9919%" y="453" width="0.0812%" height="15" fill="rgb(253,106,12)" fg:x="123" fg:w="1"/><text x="10.2419%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.9919%" y="437" width="0.0812%" height="15" fill="rgb(213,46,41)" fg:x="123" fg:w="1"/><text x="10.2419%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="10.0731%" y="597" width="0.0812%" height="15" fill="rgb(215,133,35)" fg:x="124" fg:w="1"/><text x="10.3231%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.0731%" y="581" width="0.0812%" height="15" fill="rgb(213,28,5)" fg:x="124" fg:w="1"/><text x="10.3231%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (3 samples, 0.24%)</title><rect x="10.0731%" y="645" width="0.2437%" height="15" fill="rgb(215,77,49)" fg:x="124" fg:w="3"/><text x="10.3231%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (3 samples, 0.24%)</title><rect x="10.0731%" y="629" width="0.2437%" height="15" fill="rgb(248,100,22)" fg:x="124" fg:w="3"/><text x="10.3231%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="10.0731%" y="613" width="0.2437%" height="15" fill="rgb(208,67,9)" fg:x="124" fg:w="3"/><text x="10.3231%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1543%" y="597" width="0.1625%" height="15" fill="rgb(219,133,21)" fg:x="125" fg:w="2"/><text x="10.4043%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.1543%" y="581" width="0.1625%" height="15" fill="rgb(246,46,29)" fg:x="125" fg:w="2"/><text x="10.4043%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2356%" y="565" width="0.0812%" height="15" fill="rgb(246,185,52)" fg:x="126" fg:w="1"/><text x="10.4856%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2356%" y="549" width="0.0812%" height="15" fill="rgb(252,136,11)" fg:x="126" fg:w="1"/><text x="10.4856%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="10.2356%" y="533" width="0.0812%" height="15" fill="rgb(219,138,53)" fg:x="126" fg:w="1"/><text x="10.4856%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.2356%" y="517" width="0.0812%" height="15" fill="rgb(211,51,23)" fg:x="126" fg:w="1"/><text x="10.4856%" y="527.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.3168%" y="613" width="0.0812%" height="15" fill="rgb(247,221,28)" fg:x="127" fg:w="1"/><text x="10.5668%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3981%" y="581" width="0.0812%" height="15" fill="rgb(251,222,45)" fg:x="128" fg:w="1"/><text x="10.6481%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.3981%" y="565" width="0.0812%" height="15" fill="rgb(217,162,53)" fg:x="128" fg:w="1"/><text x="10.6481%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.3981%" y="549" width="0.0812%" height="15" fill="rgb(229,93,14)" fg:x="128" fg:w="1"/><text x="10.6481%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.3981%" y="533" width="0.0812%" height="15" fill="rgb(209,67,49)" fg:x="128" fg:w="1"/><text x="10.6481%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.3981%" y="517" width="0.0812%" height="15" fill="rgb(213,87,29)" fg:x="128" fg:w="1"/><text x="10.6481%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.3981%" y="501" width="0.0812%" height="15" fill="rgb(205,151,52)" fg:x="128" fg:w="1"/><text x="10.6481%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.3981%" y="485" width="0.0812%" height="15" fill="rgb(253,215,39)" fg:x="128" fg:w="1"/><text x="10.6481%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.3981%" y="469" width="0.0812%" height="15" fill="rgb(221,220,41)" fg:x="128" fg:w="1"/><text x="10.6481%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.3981%" y="453" width="0.0812%" height="15" fill="rgb(218,133,21)" fg:x="128" fg:w="1"/><text x="10.6481%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.3981%" y="437" width="0.0812%" height="15" fill="rgb(221,193,43)" fg:x="128" fg:w="1"/><text x="10.6481%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.3981%" y="421" width="0.0812%" height="15" fill="rgb(240,128,52)" fg:x="128" fg:w="1"/><text x="10.6481%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="10.3981%" y="405" width="0.0812%" height="15" fill="rgb(253,114,12)" fg:x="128" fg:w="1"/><text x="10.6481%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="10.3981%" y="389" width="0.0812%" height="15" fill="rgb(215,223,47)" fg:x="128" fg:w="1"/><text x="10.6481%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="10.3981%" y="613" width="0.1625%" height="15" fill="rgb(248,225,23)" fg:x="128" fg:w="2"/><text x="10.6481%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="10.3981%" y="597" width="0.1625%" height="15" fill="rgb(250,108,0)" fg:x="128" fg:w="2"/><text x="10.6481%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.4793%" y="581" width="0.0812%" height="15" fill="rgb(228,208,7)" fg:x="129" fg:w="1"/><text x="10.7293%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.4793%" y="565" width="0.0812%" height="15" fill="rgb(244,45,10)" fg:x="129" fg:w="1"/><text x="10.7293%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.4793%" y="549" width="0.0812%" height="15" fill="rgb(207,125,25)" fg:x="129" fg:w="1"/><text x="10.7293%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4793%" y="533" width="0.0812%" height="15" fill="rgb(210,195,18)" fg:x="129" fg:w="1"/><text x="10.7293%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4793%" y="517" width="0.0812%" height="15" fill="rgb(249,80,12)" fg:x="129" fg:w="1"/><text x="10.7293%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.4793%" y="501" width="0.0812%" height="15" fill="rgb(221,65,9)" fg:x="129" fg:w="1"/><text x="10.7293%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4793%" y="485" width="0.0812%" height="15" fill="rgb(235,49,36)" fg:x="129" fg:w="1"/><text x="10.7293%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.4793%" y="469" width="0.0812%" height="15" fill="rgb(225,32,20)" fg:x="129" fg:w="1"/><text x="10.7293%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.4793%" y="453" width="0.0812%" height="15" fill="rgb(215,141,46)" fg:x="129" fg:w="1"/><text x="10.7293%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.4793%" y="437" width="0.0812%" height="15" fill="rgb(250,160,47)" fg:x="129" fg:w="1"/><text x="10.7293%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.4793%" y="421" width="0.0812%" height="15" fill="rgb(216,222,40)" fg:x="129" fg:w="1"/><text x="10.7293%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4793%" y="405" width="0.0812%" height="15" fill="rgb(234,217,39)" fg:x="129" fg:w="1"/><text x="10.7293%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.4793%" y="389" width="0.0812%" height="15" fill="rgb(207,178,40)" fg:x="129" fg:w="1"/><text x="10.7293%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.4793%" y="373" width="0.0812%" height="15" fill="rgb(221,136,13)" fg:x="129" fg:w="1"/><text x="10.7293%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.4793%" y="357" width="0.0812%" height="15" fill="rgb(249,199,10)" fg:x="129" fg:w="1"/><text x="10.7293%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.4793%" y="341" width="0.0812%" height="15" fill="rgb(249,222,13)" fg:x="129" fg:w="1"/><text x="10.7293%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.4793%" y="325" width="0.0812%" height="15" fill="rgb(244,185,38)" fg:x="129" fg:w="1"/><text x="10.7293%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4793%" y="309" width="0.0812%" height="15" fill="rgb(236,202,9)" fg:x="129" fg:w="1"/><text x="10.7293%" y="319.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.5605%" y="613" width="0.0812%" height="15" fill="rgb(250,229,37)" fg:x="130" fg:w="1"/><text x="10.8105%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="10.5605%" y="597" width="0.0812%" height="15" fill="rgb(206,174,23)" fg:x="130" fg:w="1"/><text x="10.8105%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.5605%" y="581" width="0.0812%" height="15" fill="rgb(211,33,43)" fg:x="130" fg:w="1"/><text x="10.8105%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.6418%" y="597" width="0.0812%" height="15" fill="rgb(245,58,50)" fg:x="131" fg:w="1"/><text x="10.8918%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6418%" y="581" width="0.0812%" height="15" fill="rgb(244,68,36)" fg:x="131" fg:w="1"/><text x="10.8918%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6418%" y="565" width="0.0812%" height="15" fill="rgb(232,229,15)" fg:x="131" fg:w="1"/><text x="10.8918%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6418%" y="549" width="0.0812%" height="15" fill="rgb(254,30,23)" fg:x="131" fg:w="1"/><text x="10.8918%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7230%" y="549" width="0.0812%" height="15" fill="rgb(235,160,14)" fg:x="132" fg:w="1"/><text x="10.9730%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8042%" y="517" width="0.0812%" height="15" fill="rgb(212,155,44)" fg:x="133" fg:w="1"/><text x="11.0542%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8042%" y="501" width="0.0812%" height="15" fill="rgb(226,2,50)" fg:x="133" fg:w="1"/><text x="11.0542%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.8042%" y="485" width="0.0812%" height="15" fill="rgb(234,177,6)" fg:x="133" fg:w="1"/><text x="11.0542%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="10.7230%" y="565" width="0.2437%" height="15" fill="rgb(217,24,9)" fg:x="132" fg:w="3"/><text x="10.9730%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="10.8042%" y="549" width="0.1625%" height="15" fill="rgb(220,13,46)" fg:x="133" fg:w="2"/><text x="11.0542%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="10.8042%" y="533" width="0.1625%" height="15" fill="rgb(239,221,27)" fg:x="133" fg:w="2"/><text x="11.0542%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8855%" y="517" width="0.0812%" height="15" fill="rgb(222,198,25)" fg:x="134" fg:w="1"/><text x="11.1355%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8855%" y="501" width="0.0812%" height="15" fill="rgb(211,99,13)" fg:x="134" fg:w="1"/><text x="11.1355%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="10.8855%" y="485" width="0.0812%" height="15" fill="rgb(232,111,31)" fg:x="134" fg:w="1"/><text x="11.1355%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="10.8855%" y="469" width="0.0812%" height="15" fill="rgb(245,82,37)" fg:x="134" fg:w="1"/><text x="11.1355%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.8855%" y="453" width="0.0812%" height="15" fill="rgb(227,149,46)" fg:x="134" fg:w="1"/><text x="11.1355%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.8855%" y="437" width="0.0812%" height="15" fill="rgb(218,36,50)" fg:x="134" fg:w="1"/><text x="11.1355%" y="447.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (5 samples, 0.41%)</title><rect x="10.6418%" y="613" width="0.4062%" height="15" fill="rgb(226,80,48)" fg:x="131" fg:w="5"/><text x="10.8918%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="10.7230%" y="597" width="0.3249%" height="15" fill="rgb(238,224,15)" fg:x="132" fg:w="4"/><text x="10.9730%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="10.7230%" y="581" width="0.3249%" height="15" fill="rgb(241,136,10)" fg:x="132" fg:w="4"/><text x="10.9730%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.9667%" y="565" width="0.0812%" height="15" fill="rgb(208,32,45)" fg:x="135" fg:w="1"/><text x="11.2167%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.9667%" y="549" width="0.0812%" height="15" fill="rgb(207,135,9)" fg:x="135" fg:w="1"/><text x="11.2167%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.9667%" y="533" width="0.0812%" height="15" fill="rgb(206,86,44)" fg:x="135" fg:w="1"/><text x="11.2167%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9667%" y="517" width="0.0812%" height="15" fill="rgb(245,177,15)" fg:x="135" fg:w="1"/><text x="11.2167%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9667%" y="501" width="0.0812%" height="15" fill="rgb(206,64,50)" fg:x="135" fg:w="1"/><text x="11.2167%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.9667%" y="485" width="0.0812%" height="15" fill="rgb(234,36,40)" fg:x="135" fg:w="1"/><text x="11.2167%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9667%" y="469" width="0.0812%" height="15" fill="rgb(213,64,8)" fg:x="135" fg:w="1"/><text x="11.2167%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.9667%" y="453" width="0.0812%" height="15" fill="rgb(210,75,36)" fg:x="135" fg:w="1"/><text x="11.2167%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.9667%" y="437" width="0.0812%" height="15" fill="rgb(229,88,21)" fg:x="135" fg:w="1"/><text x="11.2167%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.9667%" y="421" width="0.0812%" height="15" fill="rgb(252,204,47)" fg:x="135" fg:w="1"/><text x="11.2167%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.9667%" y="405" width="0.0812%" height="15" fill="rgb(208,77,27)" fg:x="135" fg:w="1"/><text x="11.2167%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9667%" y="389" width="0.0812%" height="15" fill="rgb(221,76,26)" fg:x="135" fg:w="1"/><text x="11.2167%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.9667%" y="373" width="0.0812%" height="15" fill="rgb(225,139,18)" fg:x="135" fg:w="1"/><text x="11.2167%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.9667%" y="357" width="0.0812%" height="15" fill="rgb(230,137,11)" fg:x="135" fg:w="1"/><text x="11.2167%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.9667%" y="341" width="0.0812%" height="15" fill="rgb(212,28,1)" fg:x="135" fg:w="1"/><text x="11.2167%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.9667%" y="325" width="0.0812%" height="15" fill="rgb(248,164,17)" fg:x="135" fg:w="1"/><text x="11.2167%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.9667%" y="309" width="0.0812%" height="15" fill="rgb(222,171,42)" fg:x="135" fg:w="1"/><text x="11.2167%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.9667%" y="293" width="0.0812%" height="15" fill="rgb(243,84,45)" fg:x="135" fg:w="1"/><text x="11.2167%" y="303.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="11.0479%" y="597" width="0.0812%" height="15" fill="rgb(252,49,23)" fg:x="136" fg:w="1"/><text x="11.2979%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (12 samples, 0.97%)</title><rect x="10.3168%" y="645" width="0.9748%" height="15" fill="rgb(215,19,7)" fg:x="127" fg:w="12"/><text x="10.5668%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (12 samples, 0.97%)</title><rect x="10.3168%" y="629" width="0.9748%" height="15" fill="rgb(238,81,41)" fg:x="127" fg:w="12"/><text x="10.5668%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (3 samples, 0.24%)</title><rect x="11.0479%" y="613" width="0.2437%" height="15" fill="rgb(210,199,37)" fg:x="136" fg:w="3"/><text x="11.2979%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="11.1292%" y="597" width="0.1625%" height="15" fill="rgb(244,192,49)" fg:x="137" fg:w="2"/><text x="11.3792%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (2 samples, 0.16%)</title><rect x="11.1292%" y="581" width="0.1625%" height="15" fill="rgb(226,211,11)" fg:x="137" fg:w="2"/><text x="11.3792%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.1292%" y="565" width="0.1625%" height="15" fill="rgb(236,162,54)" fg:x="137" fg:w="2"/><text x="11.3792%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (2 samples, 0.16%)</title><rect x="11.1292%" y="549" width="0.1625%" height="15" fill="rgb(220,229,9)" fg:x="137" fg:w="2"/><text x="11.3792%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="11.1292%" y="533" width="0.1625%" height="15" fill="rgb(250,87,22)" fg:x="137" fg:w="2"/><text x="11.3792%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2104%" y="517" width="0.0812%" height="15" fill="rgb(239,43,17)" fg:x="138" fg:w="1"/><text x="11.4604%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.2104%" y="501" width="0.0812%" height="15" fill="rgb(231,177,25)" fg:x="138" fg:w="1"/><text x="11.4604%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="11.2104%" y="485" width="0.0812%" height="15" fill="rgb(219,179,1)" fg:x="138" fg:w="1"/><text x="11.4604%" y="495.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="11.2916%" y="629" width="0.0812%" height="15" fill="rgb(238,219,53)" fg:x="139" fg:w="1"/><text x="11.5416%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.3729%" y="613" width="0.0812%" height="15" fill="rgb(232,167,36)" fg:x="140" fg:w="1"/><text x="11.6229%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.3729%" y="597" width="0.0812%" height="15" fill="rgb(244,19,51)" fg:x="140" fg:w="1"/><text x="11.6229%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (2 samples, 0.16%)</title><rect x="11.3729%" y="629" width="0.1625%" height="15" fill="rgb(224,6,22)" fg:x="140" fg:w="2"/><text x="11.6229%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="11.4541%" y="613" width="0.0812%" height="15" fill="rgb(224,145,5)" fg:x="141" fg:w="1"/><text x="11.7041%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.5353%" y="549" width="0.0812%" height="15" fill="rgb(234,130,49)" fg:x="142" fg:w="1"/><text x="11.7853%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.5353%" y="533" width="0.0812%" height="15" fill="rgb(254,6,2)" fg:x="142" fg:w="1"/><text x="11.7853%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.5353%" y="517" width="0.0812%" height="15" fill="rgb(208,96,46)" fg:x="142" fg:w="1"/><text x="11.7853%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5353%" y="501" width="0.0812%" height="15" fill="rgb(239,3,39)" fg:x="142" fg:w="1"/><text x="11.7853%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.5353%" y="485" width="0.0812%" height="15" fill="rgb(233,210,1)" fg:x="142" fg:w="1"/><text x="11.7853%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6166%" y="501" width="0.0812%" height="15" fill="rgb(244,137,37)" fg:x="143" fg:w="1"/><text x="11.8666%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6166%" y="485" width="0.0812%" height="15" fill="rgb(240,136,2)" fg:x="143" fg:w="1"/><text x="11.8666%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.6166%" y="469" width="0.0812%" height="15" fill="rgb(239,18,37)" fg:x="143" fg:w="1"/><text x="11.8666%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6166%" y="453" width="0.0812%" height="15" fill="rgb(218,185,22)" fg:x="143" fg:w="1"/><text x="11.8666%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6166%" y="437" width="0.0812%" height="15" fill="rgb(225,218,4)" fg:x="143" fg:w="1"/><text x="11.8666%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="11.6166%" y="421" width="0.0812%" height="15" fill="rgb(230,182,32)" fg:x="143" fg:w="1"/><text x="11.8666%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="11.6166%" y="405" width="0.0812%" height="15" fill="rgb(242,56,43)" fg:x="143" fg:w="1"/><text x="11.8666%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="11.6166%" y="389" width="0.0812%" height="15" fill="rgb(233,99,24)" fg:x="143" fg:w="1"/><text x="11.8666%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6166%" y="373" width="0.0812%" height="15" fill="rgb(234,209,42)" fg:x="143" fg:w="1"/><text x="11.8666%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="11.6166%" y="357" width="0.0812%" height="15" fill="rgb(227,7,12)" fg:x="143" fg:w="1"/><text x="11.8666%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="11.6166%" y="341" width="0.0812%" height="15" fill="rgb(245,203,43)" fg:x="143" fg:w="1"/><text x="11.8666%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="11.6166%" y="325" width="0.0812%" height="15" fill="rgb(238,205,33)" fg:x="143" fg:w="1"/><text x="11.8666%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="11.6166%" y="309" width="0.0812%" height="15" fill="rgb(231,56,7)" fg:x="143" fg:w="1"/><text x="11.8666%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="11.6166%" y="293" width="0.0812%" height="15" fill="rgb(244,186,29)" fg:x="143" fg:w="1"/><text x="11.8666%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.6166%" y="277" width="0.0812%" height="15" fill="rgb(234,111,31)" fg:x="143" fg:w="1"/><text x="11.8666%" y="287.50"></text></g><g><title>core::iter::adapters::try_process (3 samples, 0.24%)</title><rect x="11.5353%" y="629" width="0.2437%" height="15" fill="rgb(241,149,10)" fg:x="142" fg:w="3"/><text x="11.7853%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="11.5353%" y="613" width="0.2437%" height="15" fill="rgb(249,206,44)" fg:x="142" fg:w="3"/><text x="11.7853%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="11.5353%" y="597" width="0.2437%" height="15" fill="rgb(251,153,30)" fg:x="142" fg:w="3"/><text x="11.7853%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="11.5353%" y="581" width="0.2437%" height="15" fill="rgb(239,152,38)" fg:x="142" fg:w="3"/><text x="11.7853%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="11.5353%" y="565" width="0.2437%" height="15" fill="rgb(249,139,47)" fg:x="142" fg:w="3"/><text x="11.7853%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="11.6166%" y="549" width="0.1625%" height="15" fill="rgb(244,64,35)" fg:x="143" fg:w="2"/><text x="11.8666%" y="559.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="11.6166%" y="533" width="0.1625%" height="15" fill="rgb(216,46,15)" fg:x="143" fg:w="2"/><text x="11.8666%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="11.6166%" y="517" width="0.1625%" height="15" fill="rgb(250,74,19)" fg:x="143" fg:w="2"/><text x="11.8666%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.6978%" y="501" width="0.0812%" height="15" fill="rgb(249,42,33)" fg:x="144" fg:w="1"/><text x="11.9478%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6978%" y="485" width="0.0812%" height="15" fill="rgb(242,149,17)" fg:x="144" fg:w="1"/><text x="11.9478%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.6978%" y="469" width="0.0812%" height="15" fill="rgb(244,29,21)" fg:x="144" fg:w="1"/><text x="11.9478%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6978%" y="453" width="0.0812%" height="15" fill="rgb(220,130,37)" fg:x="144" fg:w="1"/><text x="11.9478%" y="463.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="11.6978%" y="437" width="0.0812%" height="15" fill="rgb(211,67,2)" fg:x="144" fg:w="1"/><text x="11.9478%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="11.6978%" y="421" width="0.0812%" height="15" fill="rgb(235,68,52)" fg:x="144" fg:w="1"/><text x="11.9478%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="11.6978%" y="405" width="0.0812%" height="15" fill="rgb(246,142,3)" fg:x="144" fg:w="1"/><text x="11.9478%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.6978%" y="389" width="0.0812%" height="15" fill="rgb(241,25,7)" fg:x="144" fg:w="1"/><text x="11.9478%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="11.7790%" y="629" width="0.0812%" height="15" fill="rgb(242,119,39)" fg:x="145" fg:w="1"/><text x="12.0290%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.7790%" y="613" width="0.0812%" height="15" fill="rgb(241,98,45)" fg:x="145" fg:w="1"/><text x="12.0290%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::begin (1 samples, 0.08%)</title><rect x="11.8603%" y="613" width="0.0812%" height="15" fill="rgb(254,28,30)" fg:x="146" fg:w="1"/><text x="12.1103%" y="623.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="11.9415%" y="597" width="0.0812%" height="15" fill="rgb(241,142,54)" fg:x="147" fg:w="1"/><text x="12.1915%" y="607.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="11.9415%" y="581" width="0.0812%" height="15" fill="rgb(222,85,15)" fg:x="147" fg:w="1"/><text x="12.1915%" y="591.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="11.9415%" y="565" width="0.0812%" height="15" fill="rgb(210,85,47)" fg:x="147" fg:w="1"/><text x="12.1915%" y="575.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="11.9415%" y="549" width="0.0812%" height="15" fill="rgb(224,206,25)" fg:x="147" fg:w="1"/><text x="12.1915%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="11.9415%" y="533" width="0.0812%" height="15" fill="rgb(243,201,19)" fg:x="147" fg:w="1"/><text x="12.1915%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="11.9415%" y="517" width="0.0812%" height="15" fill="rgb(236,59,4)" fg:x="147" fg:w="1"/><text x="12.1915%" y="527.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="11.9415%" y="501" width="0.0812%" height="15" fill="rgb(254,179,45)" fg:x="147" fg:w="1"/><text x="12.1915%" y="511.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="11.9415%" y="485" width="0.0812%" height="15" fill="rgb(226,14,10)" fg:x="147" fg:w="1"/><text x="12.1915%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0227%" y="517" width="0.0812%" height="15" fill="rgb(244,27,41)" fg:x="148" fg:w="1"/><text x="12.2727%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.0227%" y="501" width="0.0812%" height="15" fill="rgb(235,35,32)" fg:x="148" fg:w="1"/><text x="12.2727%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.0227%" y="485" width="0.0812%" height="15" fill="rgb(218,68,31)" fg:x="148" fg:w="1"/><text x="12.2727%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.0227%" y="469" width="0.0812%" height="15" fill="rgb(207,120,37)" fg:x="148" fg:w="1"/><text x="12.2727%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.0227%" y="453" width="0.0812%" height="15" fill="rgb(227,98,0)" fg:x="148" fg:w="1"/><text x="12.2727%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0227%" y="437" width="0.0812%" height="15" fill="rgb(207,7,3)" fg:x="148" fg:w="1"/><text x="12.2727%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.0227%" y="421" width="0.0812%" height="15" fill="rgb(206,98,19)" fg:x="148" fg:w="1"/><text x="12.2727%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.0227%" y="405" width="0.0812%" height="15" fill="rgb(217,5,26)" fg:x="148" fg:w="1"/><text x="12.2727%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.0227%" y="389" width="0.0812%" height="15" fill="rgb(235,190,38)" fg:x="148" fg:w="1"/><text x="12.2727%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.0227%" y="373" width="0.0812%" height="15" fill="rgb(247,86,24)" fg:x="148" fg:w="1"/><text x="12.2727%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.0227%" y="357" width="0.0812%" height="15" fill="rgb(205,101,16)" fg:x="148" fg:w="1"/><text x="12.2727%" y="367.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="12.0227%" y="533" width="0.1625%" height="15" fill="rgb(246,168,33)" fg:x="148" fg:w="2"/><text x="12.2727%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="12.1040%" y="517" width="0.0812%" height="15" fill="rgb(231,114,1)" fg:x="149" fg:w="1"/><text x="12.3540%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.1040%" y="501" width="0.0812%" height="15" fill="rgb(207,184,53)" fg:x="149" fg:w="1"/><text x="12.3540%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.1040%" y="485" width="0.0812%" height="15" fill="rgb(224,95,51)" fg:x="149" fg:w="1"/><text x="12.3540%" y="495.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="12.0227%" y="565" width="0.2437%" height="15" fill="rgb(212,188,45)" fg:x="148" fg:w="3"/><text x="12.2727%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="12.0227%" y="549" width="0.2437%" height="15" fill="rgb(223,154,38)" fg:x="148" fg:w="3"/><text x="12.2727%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="12.1852%" y="533" width="0.0812%" height="15" fill="rgb(251,22,52)" fg:x="150" fg:w="1"/><text x="12.4352%" y="543.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="12.1852%" y="517" width="0.0812%" height="15" fill="rgb(229,209,22)" fg:x="150" fg:w="1"/><text x="12.4352%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1852%" y="501" width="0.0812%" height="15" fill="rgb(234,138,34)" fg:x="150" fg:w="1"/><text x="12.4352%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="12.3477%" y="517" width="0.0812%" height="15" fill="rgb(212,95,11)" fg:x="152" fg:w="1"/><text x="12.5977%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.3477%" y="501" width="0.0812%" height="15" fill="rgb(240,179,47)" fg:x="152" fg:w="1"/><text x="12.5977%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.3477%" y="485" width="0.0812%" height="15" fill="rgb(240,163,11)" fg:x="152" fg:w="1"/><text x="12.5977%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.3477%" y="469" width="0.0812%" height="15" fill="rgb(236,37,12)" fg:x="152" fg:w="1"/><text x="12.5977%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.3477%" y="453" width="0.0812%" height="15" fill="rgb(232,164,16)" fg:x="152" fg:w="1"/><text x="12.5977%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.3477%" y="437" width="0.0812%" height="15" fill="rgb(244,205,15)" fg:x="152" fg:w="1"/><text x="12.5977%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.3477%" y="421" width="0.0812%" height="15" fill="rgb(223,117,47)" fg:x="152" fg:w="1"/><text x="12.5977%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.3477%" y="405" width="0.0812%" height="15" fill="rgb(244,107,35)" fg:x="152" fg:w="1"/><text x="12.5977%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="12.4289%" y="501" width="0.0812%" height="15" fill="rgb(205,140,8)" fg:x="153" fg:w="1"/><text x="12.6789%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.4289%" y="485" width="0.0812%" height="15" fill="rgb(228,84,46)" fg:x="153" fg:w="1"/><text x="12.6789%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.4289%" y="469" width="0.0812%" height="15" fill="rgb(254,188,9)" fg:x="153" fg:w="1"/><text x="12.6789%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.4289%" y="453" width="0.0812%" height="15" fill="rgb(206,112,54)" fg:x="153" fg:w="1"/><text x="12.6789%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="12.5102%" y="469" width="0.3249%" height="15" fill="rgb(216,84,49)" fg:x="154" fg:w="4"/><text x="12.7602%" y="479.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="12.5914%" y="453" width="0.2437%" height="15" fill="rgb(214,194,35)" fg:x="155" fg:w="3"/><text x="12.8414%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="12.6726%" y="437" width="0.1625%" height="15" fill="rgb(249,28,3)" fg:x="156" fg:w="2"/><text x="12.9226%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="12.6726%" y="421" width="0.1625%" height="15" fill="rgb(222,56,52)" fg:x="156" fg:w="2"/><text x="12.9226%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.7539%" y="405" width="0.0812%" height="15" fill="rgb(245,217,50)" fg:x="157" fg:w="1"/><text x="13.0039%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.7539%" y="389" width="0.0812%" height="15" fill="rgb(213,201,24)" fg:x="157" fg:w="1"/><text x="13.0039%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.7539%" y="373" width="0.0812%" height="15" fill="rgb(248,116,28)" fg:x="157" fg:w="1"/><text x="13.0039%" y="383.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="12.9163%" y="453" width="0.0812%" height="15" fill="rgb(219,72,43)" fg:x="159" fg:w="1"/><text x="13.1663%" y="463.50"></text></g><g><title>ryu::d2s::d2d (1 samples, 0.08%)</title><rect x="12.9163%" y="437" width="0.0812%" height="15" fill="rgb(209,138,14)" fg:x="159" fg:w="1"/><text x="13.1663%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="12.9976%" y="453" width="0.0812%" height="15" fill="rgb(222,18,33)" fg:x="160" fg:w="1"/><text x="13.2476%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="12.9976%" y="437" width="0.0812%" height="15" fill="rgb(213,199,7)" fg:x="160" fg:w="1"/><text x="13.2476%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="12.9976%" y="421" width="0.0812%" height="15" fill="rgb(250,110,10)" fg:x="160" fg:w="1"/><text x="13.2476%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.9976%" y="405" width="0.0812%" height="15" fill="rgb(248,123,6)" fg:x="160" fg:w="1"/><text x="13.2476%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.9976%" y="389" width="0.0812%" height="15" fill="rgb(206,91,31)" fg:x="160" fg:w="1"/><text x="13.2476%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.9976%" y="373" width="0.0812%" height="15" fill="rgb(211,154,13)" fg:x="160" fg:w="1"/><text x="13.2476%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="12.9976%" y="357" width="0.0812%" height="15" fill="rgb(225,148,7)" fg:x="160" fg:w="1"/><text x="13.2476%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="13.0788%" y="437" width="0.1625%" height="15" fill="rgb(220,160,43)" fg:x="161" fg:w="2"/><text x="13.3288%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.0788%" y="421" width="0.1625%" height="15" fill="rgb(213,52,39)" fg:x="161" fg:w="2"/><text x="13.3288%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.0788%" y="405" width="0.1625%" height="15" fill="rgb(243,137,7)" fg:x="161" fg:w="2"/><text x="13.3288%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.1600%" y="389" width="0.0812%" height="15" fill="rgb(230,79,13)" fg:x="162" fg:w="1"/><text x="13.4100%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2413%" y="437" width="0.0812%" height="15" fill="rgb(247,105,23)" fg:x="163" fg:w="1"/><text x="13.4913%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.2413%" y="421" width="0.0812%" height="15" fill="rgb(223,179,41)" fg:x="163" fg:w="1"/><text x="13.4913%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="12.8351%" y="469" width="0.5686%" height="15" fill="rgb(218,9,34)" fg:x="158" fg:w="7"/><text x="13.0851%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="13.0788%" y="453" width="0.3249%" height="15" fill="rgb(222,106,8)" fg:x="161" fg:w="4"/><text x="13.3288%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.3225%" y="437" width="0.0812%" height="15" fill="rgb(211,220,0)" fg:x="164" fg:w="1"/><text x="13.5725%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.3225%" y="421" width="0.0812%" height="15" fill="rgb(229,52,16)" fg:x="164" fg:w="1"/><text x="13.5725%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.3225%" y="405" width="0.0812%" height="15" fill="rgb(212,155,18)" fg:x="164" fg:w="1"/><text x="13.5725%" y="415.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="12.5102%" y="485" width="0.9748%" height="15" fill="rgb(242,21,14)" fg:x="154" fg:w="12"/><text x="12.7602%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4037%" y="469" width="0.0812%" height="15" fill="rgb(222,19,48)" fg:x="165" fg:w="1"/><text x="13.6537%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4037%" y="453" width="0.0812%" height="15" fill="rgb(232,45,27)" fg:x="165" fg:w="1"/><text x="13.6537%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.4037%" y="437" width="0.0812%" height="15" fill="rgb(249,103,42)" fg:x="165" fg:w="1"/><text x="13.6537%" y="447.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.22%)</title><rect x="12.4289%" y="517" width="1.2185%" height="15" fill="rgb(246,81,33)" fg:x="153" fg:w="15"/><text x="12.6789%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.14%)</title><rect x="12.5102%" y="501" width="1.1373%" height="15" fill="rgb(252,33,42)" fg:x="154" fg:w="14"/><text x="12.7602%" y="511.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.4850%" y="485" width="0.1625%" height="15" fill="rgb(209,212,41)" fg:x="166" fg:w="2"/><text x="13.7350%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.4850%" y="469" width="0.1625%" height="15" fill="rgb(207,154,6)" fg:x="166" fg:w="2"/><text x="13.7350%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="13.4850%" y="453" width="0.1625%" height="15" fill="rgb(223,64,47)" fg:x="166" fg:w="2"/><text x="13.7350%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.5662%" y="437" width="0.0812%" height="15" fill="rgb(211,161,38)" fg:x="167" fg:w="1"/><text x="13.8162%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.5662%" y="421" width="0.0812%" height="15" fill="rgb(219,138,40)" fg:x="167" fg:w="1"/><text x="13.8162%" y="431.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="13.6474%" y="485" width="0.2437%" height="15" fill="rgb(241,228,46)" fg:x="168" fg:w="3"/><text x="13.8974%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.8911%" y="485" width="0.0812%" height="15" fill="rgb(223,209,38)" fg:x="171" fg:w="1"/><text x="14.1411%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.0536%" y="469" width="0.0812%" height="15" fill="rgb(236,164,45)" fg:x="173" fg:w="1"/><text x="14.3036%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1348%" y="453" width="0.0812%" height="15" fill="rgb(231,15,5)" fg:x="174" fg:w="1"/><text x="14.3848%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="13.6474%" y="517" width="0.7311%" height="15" fill="rgb(252,35,15)" fg:x="168" fg:w="9"/><text x="13.8974%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.73%)</title><rect x="13.6474%" y="501" width="0.7311%" height="15" fill="rgb(248,181,18)" fg:x="168" fg:w="9"/><text x="13.8974%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="13.9724%" y="485" width="0.4062%" height="15" fill="rgb(233,39,42)" fg:x="172" fg:w="5"/><text x="14.2224%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="14.1348%" y="469" width="0.2437%" height="15" fill="rgb(238,110,33)" fg:x="174" fg:w="3"/><text x="14.3848%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.2161%" y="453" width="0.1625%" height="15" fill="rgb(233,195,10)" fg:x="175" fg:w="2"/><text x="14.4661%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.2161%" y="437" width="0.1625%" height="15" fill="rgb(254,105,3)" fg:x="175" fg:w="2"/><text x="14.4661%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.3786%" y="469" width="0.0812%" height="15" fill="rgb(221,225,9)" fg:x="177" fg:w="1"/><text x="14.6286%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="14.6223%" y="421" width="0.2437%" height="15" fill="rgb(224,227,45)" fg:x="180" fg:w="3"/><text x="14.8723%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="14.6223%" y="405" width="0.2437%" height="15" fill="rgb(229,198,43)" fg:x="180" fg:w="3"/><text x="14.8723%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="14.7035%" y="389" width="0.1625%" height="15" fill="rgb(206,209,35)" fg:x="181" fg:w="2"/><text x="14.9535%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="14.8660%" y="389" width="0.0812%" height="15" fill="rgb(245,195,53)" fg:x="183" fg:w="1"/><text x="15.1160%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.9472%" y="373" width="0.0812%" height="15" fill="rgb(240,92,26)" fg:x="184" fg:w="1"/><text x="15.1972%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="14.9472%" y="357" width="0.0812%" height="15" fill="rgb(207,40,23)" fg:x="184" fg:w="1"/><text x="15.1972%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="14.9472%" y="341" width="0.0812%" height="15" fill="rgb(223,111,35)" fg:x="184" fg:w="1"/><text x="15.1972%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.0284%" y="357" width="0.0812%" height="15" fill="rgb(229,147,28)" fg:x="185" fg:w="1"/><text x="15.2784%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="15.0284%" y="341" width="0.0812%" height="15" fill="rgb(211,29,28)" fg:x="185" fg:w="1"/><text x="15.2784%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="15.0284%" y="325" width="0.0812%" height="15" fill="rgb(228,72,33)" fg:x="185" fg:w="1"/><text x="15.2784%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.0284%" y="309" width="0.0812%" height="15" fill="rgb(205,214,31)" fg:x="185" fg:w="1"/><text x="15.2784%" y="319.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="14.8660%" y="421" width="0.3249%" height="15" fill="rgb(224,111,15)" fg:x="183" fg:w="4"/><text x="15.1160%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="14.8660%" y="405" width="0.3249%" height="15" fill="rgb(253,21,26)" fg:x="183" fg:w="4"/><text x="15.1160%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="14.9472%" y="389" width="0.2437%" height="15" fill="rgb(245,139,43)" fg:x="184" fg:w="3"/><text x="15.1972%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.0284%" y="373" width="0.1625%" height="15" fill="rgb(252,170,7)" fg:x="185" fg:w="2"/><text x="15.2784%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.1097%" y="357" width="0.0812%" height="15" fill="rgb(231,118,14)" fg:x="186" fg:w="1"/><text x="15.3597%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="15.5158%" y="389" width="0.0812%" height="15" fill="rgb(238,83,0)" fg:x="191" fg:w="1"/><text x="15.7658%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.5971%" y="325" width="0.0812%" height="15" fill="rgb(221,39,39)" fg:x="192" fg:w="1"/><text x="15.8471%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.5971%" y="357" width="0.1625%" height="15" fill="rgb(222,119,46)" fg:x="192" fg:w="2"/><text x="15.8471%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="15.5971%" y="341" width="0.1625%" height="15" fill="rgb(222,165,49)" fg:x="192" fg:w="2"/><text x="15.8471%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="15.6783%" y="325" width="0.0812%" height="15" fill="rgb(219,113,52)" fg:x="193" fg:w="1"/><text x="15.9283%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="15.5971%" y="373" width="0.3249%" height="15" fill="rgb(214,7,15)" fg:x="192" fg:w="4"/><text x="15.8471%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="15.7595%" y="357" width="0.1625%" height="15" fill="rgb(235,32,4)" fg:x="194" fg:w="2"/><text x="16.0095%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.8408%" y="341" width="0.0812%" height="15" fill="rgb(238,90,54)" fg:x="195" fg:w="1"/><text x="16.0908%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.65%)</title><rect x="15.4346%" y="405" width="0.6499%" height="15" fill="rgb(213,208,19)" fg:x="190" fg:w="8"/><text x="15.6846%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.49%)</title><rect x="15.5971%" y="389" width="0.4874%" height="15" fill="rgb(233,156,4)" fg:x="192" fg:w="6"/><text x="15.8471%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="15.9220%" y="373" width="0.1625%" height="15" fill="rgb(207,194,5)" fg:x="196" fg:w="2"/><text x="16.1720%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (20 samples, 1.62%)</title><rect x="14.5410%" y="437" width="1.6247%" height="15" fill="rgb(206,111,30)" fg:x="179" fg:w="20"/><text x="14.7910%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (12 samples, 0.97%)</title><rect x="15.1909%" y="421" width="0.9748%" height="15" fill="rgb(243,70,54)" fg:x="187" fg:w="12"/><text x="15.4409%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.0845%" y="405" width="0.0812%" height="15" fill="rgb(242,28,8)" fg:x="198" fg:w="1"/><text x="16.3345%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (21 samples, 1.71%)</title><rect x="14.5410%" y="453" width="1.7059%" height="15" fill="rgb(219,106,18)" fg:x="179" fg:w="21"/><text x="14.7910%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="16.1657%" y="437" width="0.0812%" height="15" fill="rgb(244,222,10)" fg:x="199" fg:w="1"/><text x="16.4157%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.1657%" y="421" width="0.0812%" height="15" fill="rgb(236,179,52)" fg:x="199" fg:w="1"/><text x="16.4157%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2470%" y="453" width="0.0812%" height="15" fill="rgb(213,23,39)" fg:x="200" fg:w="1"/><text x="16.4970%" y="463.50"></text></g><g><title>engine::session::Session::flush (56 samples, 4.55%)</title><rect x="11.8603%" y="629" width="4.5491%" height="15" fill="rgb(238,48,10)" fg:x="146" fg:w="56"/><text x="12.1103%" y="639.50">engin..</text></g><g><title>engine::session::Session::save_changes (55 samples, 4.47%)</title><rect x="11.9415%" y="613" width="4.4679%" height="15" fill="rgb(251,196,23)" fg:x="147" fg:w="55"/><text x="12.1915%" y="623.50">engin..</text></g><g><title>engine::session::state::State::close (54 samples, 4.39%)</title><rect x="12.0227%" y="597" width="4.3867%" height="15" fill="rgb(250,152,24)" fg:x="148" fg:w="54"/><text x="12.2727%" y="607.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (54 samples, 4.39%)</title><rect x="12.0227%" y="581" width="4.3867%" height="15" fill="rgb(209,150,17)" fg:x="148" fg:w="54"/><text x="12.2727%" y="591.50">engin..</text></g><g><title>core::iter::adapters::try_process (51 samples, 4.14%)</title><rect x="12.2665%" y="565" width="4.1430%" height="15" fill="rgb(234,202,34)" fg:x="151" fg:w="51"/><text x="12.5165%" y="575.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 4.14%)</title><rect x="12.2665%" y="549" width="4.1430%" height="15" fill="rgb(253,148,53)" fg:x="151" fg:w="51"/><text x="12.5165%" y="559.50">&lt;allo..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (50 samples, 4.06%)</title><rect x="12.3477%" y="533" width="4.0617%" height="15" fill="rgb(218,129,16)" fg:x="152" fg:w="50"/><text x="12.5977%" y="543.50">engi..</text></g><g><title>kernel::model::any_entity_changes (25 samples, 2.03%)</title><rect x="14.3786%" y="517" width="2.0309%" height="15" fill="rgb(216,85,19)" fg:x="177" fg:w="25"/><text x="14.6286%" y="527.50">k..</text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (25 samples, 2.03%)</title><rect x="14.3786%" y="501" width="2.0309%" height="15" fill="rgb(235,228,7)" fg:x="177" fg:w="25"/><text x="14.6286%" y="511.50">k..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (25 samples, 2.03%)</title><rect x="14.3786%" y="485" width="2.0309%" height="15" fill="rgb(245,175,0)" fg:x="177" fg:w="25"/><text x="14.6286%" y="495.50">&lt;..</text></g><g><title>serde::ser::Serializer::collect_map (24 samples, 1.95%)</title><rect x="14.4598%" y="469" width="1.9496%" height="15" fill="rgb(208,168,36)" fg:x="178" fg:w="24"/><text x="14.7098%" y="479.50">s..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3282%" y="453" width="0.0812%" height="15" fill="rgb(246,171,24)" fg:x="201" fg:w="1"/><text x="16.5782%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.3282%" y="437" width="0.0812%" height="15" fill="rgb(215,142,24)" fg:x="201" fg:w="1"/><text x="16.5782%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.3282%" y="421" width="0.0812%" height="15" fill="rgb(250,187,7)" fg:x="201" fg:w="1"/><text x="16.5782%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4094%" y="597" width="0.0812%" height="15" fill="rgb(228,66,33)" fg:x="202" fg:w="1"/><text x="16.6594%" y="607.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="16.4094%" y="629" width="0.1625%" height="15" fill="rgb(234,215,21)" fg:x="202" fg:w="2"/><text x="16.6594%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="16.4094%" y="613" width="0.1625%" height="15" fill="rgb(222,191,20)" fg:x="202" fg:w="2"/><text x="16.6594%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.4907%" y="597" width="0.0812%" height="15" fill="rgb(245,79,54)" fg:x="203" fg:w="1"/><text x="16.7407%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.4907%" y="581" width="0.0812%" height="15" fill="rgb(240,10,37)" fg:x="203" fg:w="1"/><text x="16.7407%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.4907%" y="565" width="0.0812%" height="15" fill="rgb(214,192,32)" fg:x="203" fg:w="1"/><text x="16.7407%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="16.5719%" y="517" width="0.0812%" height="15" fill="rgb(209,36,54)" fg:x="204" fg:w="1"/><text x="16.8219%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5719%" y="501" width="0.0812%" height="15" fill="rgb(220,10,11)" fg:x="204" fg:w="1"/><text x="16.8219%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="16.5719%" y="485" width="0.0812%" height="15" fill="rgb(221,106,17)" fg:x="204" fg:w="1"/><text x="16.8219%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="16.5719%" y="469" width="0.0812%" height="15" fill="rgb(251,142,44)" fg:x="204" fg:w="1"/><text x="16.8219%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="16.5719%" y="453" width="0.0812%" height="15" fill="rgb(238,13,15)" fg:x="204" fg:w="1"/><text x="16.8219%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="16.5719%" y="437" width="0.0812%" height="15" fill="rgb(208,107,27)" fg:x="204" fg:w="1"/><text x="16.8219%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5719%" y="421" width="0.0812%" height="15" fill="rgb(205,136,37)" fg:x="204" fg:w="1"/><text x="16.8219%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="16.5719%" y="405" width="0.0812%" height="15" fill="rgb(250,205,27)" fg:x="204" fg:w="1"/><text x="16.8219%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="16.5719%" y="389" width="0.0812%" height="15" fill="rgb(210,80,43)" fg:x="204" fg:w="1"/><text x="16.8219%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="16.5719%" y="373" width="0.0812%" height="15" fill="rgb(247,160,36)" fg:x="204" fg:w="1"/><text x="16.8219%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="16.5719%" y="357" width="0.0812%" height="15" fill="rgb(234,13,49)" fg:x="204" fg:w="1"/><text x="16.8219%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="16.5719%" y="341" width="0.0812%" height="15" fill="rgb(234,122,0)" fg:x="204" fg:w="1"/><text x="16.8219%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.5719%" y="325" width="0.0812%" height="15" fill="rgb(207,146,38)" fg:x="204" fg:w="1"/><text x="16.8219%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="16.5719%" y="597" width="0.1625%" height="15" fill="rgb(207,177,25)" fg:x="204" fg:w="2"/><text x="16.8219%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="16.5719%" y="581" width="0.1625%" height="15" fill="rgb(211,178,42)" fg:x="204" fg:w="2"/><text x="16.8219%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="16.5719%" y="565" width="0.1625%" height="15" fill="rgb(230,69,54)" fg:x="204" fg:w="2"/><text x="16.8219%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.5719%" y="549" width="0.1625%" height="15" fill="rgb(214,135,41)" fg:x="204" fg:w="2"/><text x="16.8219%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="16.5719%" y="533" width="0.1625%" height="15" fill="rgb(237,67,25)" fg:x="204" fg:w="2"/><text x="16.8219%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.6531%" y="517" width="0.0812%" height="15" fill="rgb(222,189,50)" fg:x="205" fg:w="1"/><text x="16.9031%" y="527.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.7344%" y="549" width="0.0812%" height="15" fill="rgb(245,148,34)" fg:x="206" fg:w="1"/><text x="16.9844%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.7344%" y="533" width="0.0812%" height="15" fill="rgb(222,29,6)" fg:x="206" fg:w="1"/><text x="16.9844%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.7344%" y="517" width="0.0812%" height="15" fill="rgb(221,189,43)" fg:x="206" fg:w="1"/><text x="16.9844%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.7344%" y="501" width="0.0812%" height="15" fill="rgb(207,36,27)" fg:x="206" fg:w="1"/><text x="16.9844%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.7344%" y="485" width="0.0812%" height="15" fill="rgb(217,90,24)" fg:x="206" fg:w="1"/><text x="16.9844%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.7344%" y="469" width="0.0812%" height="15" fill="rgb(224,66,35)" fg:x="206" fg:w="1"/><text x="16.9844%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="16.7344%" y="453" width="0.0812%" height="15" fill="rgb(221,13,50)" fg:x="206" fg:w="1"/><text x="16.9844%" y="463.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.8156%" y="533" width="0.0812%" height="15" fill="rgb(236,68,49)" fg:x="207" fg:w="1"/><text x="17.0656%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.8156%" y="517" width="0.0812%" height="15" fill="rgb(229,146,28)" fg:x="207" fg:w="1"/><text x="17.0656%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="16.7344%" y="581" width="0.2437%" height="15" fill="rgb(225,31,38)" fg:x="206" fg:w="3"/><text x="16.9844%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="16.7344%" y="565" width="0.2437%" height="15" fill="rgb(250,208,3)" fg:x="206" fg:w="3"/><text x="16.9844%" y="575.50"></text></g><g><title>kernel::model::props::save_props (2 samples, 0.16%)</title><rect x="16.8156%" y="549" width="0.1625%" height="15" fill="rgb(246,54,23)" fg:x="207" fg:w="2"/><text x="17.0656%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="16.8968%" y="533" width="0.0812%" height="15" fill="rgb(243,76,11)" fg:x="208" fg:w="1"/><text x="17.1468%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="16.8968%" y="517" width="0.0812%" height="15" fill="rgb(245,21,50)" fg:x="208" fg:w="1"/><text x="17.1468%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="16.8968%" y="501" width="0.0812%" height="15" fill="rgb(228,9,43)" fg:x="208" fg:w="1"/><text x="17.1468%" y="511.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="16.8968%" y="485" width="0.0812%" height="15" fill="rgb(208,100,47)" fg:x="208" fg:w="1"/><text x="17.1468%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8968%" y="469" width="0.0812%" height="15" fill="rgb(232,26,8)" fg:x="208" fg:w="1"/><text x="17.1468%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.9781%" y="581" width="0.0812%" height="15" fill="rgb(216,166,38)" fg:x="209" fg:w="1"/><text x="17.2281%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="17.0593%" y="581" width="0.0812%" height="15" fill="rgb(251,202,51)" fg:x="210" fg:w="1"/><text x="17.3093%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1405%" y="549" width="0.0812%" height="15" fill="rgb(254,216,34)" fg:x="211" fg:w="1"/><text x="17.3905%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.1405%" y="533" width="0.0812%" height="15" fill="rgb(251,32,27)" fg:x="211" fg:w="1"/><text x="17.3905%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="17.1405%" y="517" width="0.0812%" height="15" fill="rgb(208,127,28)" fg:x="211" fg:w="1"/><text x="17.3905%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="17.2218%" y="533" width="0.0812%" height="15" fill="rgb(224,137,22)" fg:x="212" fg:w="1"/><text x="17.4718%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.2218%" y="517" width="0.0812%" height="15" fill="rgb(254,70,32)" fg:x="212" fg:w="1"/><text x="17.4718%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.2218%" y="501" width="0.0812%" height="15" fill="rgb(229,75,37)" fg:x="212" fg:w="1"/><text x="17.4718%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.81%)</title><rect x="16.5719%" y="613" width="0.8123%" height="15" fill="rgb(252,64,23)" fg:x="204" fg:w="10"/><text x="16.8219%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.65%)</title><rect x="16.7344%" y="597" width="0.6499%" height="15" fill="rgb(232,162,48)" fg:x="206" fg:w="8"/><text x="16.9844%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="17.1405%" y="581" width="0.2437%" height="15" fill="rgb(246,160,12)" fg:x="211" fg:w="3"/><text x="17.3905%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="17.1405%" y="565" width="0.2437%" height="15" fill="rgb(247,166,0)" fg:x="211" fg:w="3"/><text x="17.3905%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="17.2218%" y="549" width="0.1625%" height="15" fill="rgb(249,219,21)" fg:x="212" fg:w="2"/><text x="17.4718%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3030%" y="533" width="0.0812%" height="15" fill="rgb(205,209,3)" fg:x="213" fg:w="1"/><text x="17.5530%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.3842%" y="517" width="0.1625%" height="15" fill="rgb(243,44,1)" fg:x="214" fg:w="2"/><text x="17.6342%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="17.3842%" y="501" width="0.1625%" height="15" fill="rgb(206,159,16)" fg:x="214" fg:w="2"/><text x="17.6342%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="17.3842%" y="485" width="0.1625%" height="15" fill="rgb(244,77,30)" fg:x="214" fg:w="2"/><text x="17.6342%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="17.3842%" y="469" width="0.1625%" height="15" fill="rgb(218,69,12)" fg:x="214" fg:w="2"/><text x="17.6342%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="17.3842%" y="453" width="0.1625%" height="15" fill="rgb(212,87,7)" fg:x="214" fg:w="2"/><text x="17.6342%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="17.3842%" y="437" width="0.1625%" height="15" fill="rgb(245,114,25)" fg:x="214" fg:w="2"/><text x="17.6342%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="17.3842%" y="421" width="0.1625%" height="15" fill="rgb(210,61,42)" fg:x="214" fg:w="2"/><text x="17.6342%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="17.3842%" y="405" width="0.1625%" height="15" fill="rgb(211,52,33)" fg:x="214" fg:w="2"/><text x="17.6342%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="17.3842%" y="389" width="0.1625%" height="15" fill="rgb(234,58,33)" fg:x="214" fg:w="2"/><text x="17.6342%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="17.3842%" y="373" width="0.1625%" height="15" fill="rgb(220,115,36)" fg:x="214" fg:w="2"/><text x="17.6342%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="17.3842%" y="357" width="0.1625%" height="15" fill="rgb(243,153,54)" fg:x="214" fg:w="2"/><text x="17.6342%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="17.3842%" y="341" width="0.1625%" height="15" fill="rgb(251,47,18)" fg:x="214" fg:w="2"/><text x="17.6342%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.3842%" y="549" width="0.2437%" height="15" fill="rgb(242,102,42)" fg:x="214" fg:w="3"/><text x="17.6342%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="17.3842%" y="533" width="0.2437%" height="15" fill="rgb(234,31,38)" fg:x="214" fg:w="3"/><text x="17.6342%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5467%" y="517" width="0.0812%" height="15" fill="rgb(221,117,51)" fg:x="216" fg:w="1"/><text x="17.7967%" y="527.50"></text></g><g><title>plugins_core::build::Build::save (14 samples, 1.14%)</title><rect x="16.5719%" y="629" width="1.1373%" height="15" fill="rgb(212,20,18)" fg:x="204" fg:w="14"/><text x="16.8219%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="17.3842%" y="613" width="0.3249%" height="15" fill="rgb(245,133,36)" fg:x="214" fg:w="4"/><text x="17.6342%" y="623.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="17.3842%" y="597" width="0.3249%" height="15" fill="rgb(212,6,19)" fg:x="214" fg:w="4"/><text x="17.6342%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="17.3842%" y="581" width="0.3249%" height="15" fill="rgb(218,1,36)" fg:x="214" fg:w="4"/><text x="17.6342%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="17.3842%" y="565" width="0.3249%" height="15" fill="rgb(246,84,54)" fg:x="214" fg:w="4"/><text x="17.6342%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6279%" y="549" width="0.0812%" height="15" fill="rgb(242,110,6)" fg:x="217" fg:w="1"/><text x="17.8779%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.6279%" y="533" width="0.0812%" height="15" fill="rgb(214,47,5)" fg:x="217" fg:w="1"/><text x="17.8779%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.6279%" y="517" width="0.0812%" height="15" fill="rgb(218,159,25)" fg:x="217" fg:w="1"/><text x="17.8779%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.6279%" y="501" width="0.0812%" height="15" fill="rgb(215,211,28)" fg:x="217" fg:w="1"/><text x="17.8779%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.6279%" y="485" width="0.0812%" height="15" fill="rgb(238,59,32)" fg:x="217" fg:w="1"/><text x="17.8779%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6279%" y="469" width="0.0812%" height="15" fill="rgb(226,82,3)" fg:x="217" fg:w="1"/><text x="17.8779%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.6279%" y="453" width="0.0812%" height="15" fill="rgb(240,164,32)" fg:x="217" fg:w="1"/><text x="17.8779%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.6279%" y="437" width="0.0812%" height="15" fill="rgb(232,46,7)" fg:x="217" fg:w="1"/><text x="17.8779%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.6279%" y="421" width="0.0812%" height="15" fill="rgb(229,129,53)" fg:x="217" fg:w="1"/><text x="17.8779%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.6279%" y="405" width="0.0812%" height="15" fill="rgb(234,188,29)" fg:x="217" fg:w="1"/><text x="17.8779%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.6279%" y="389" width="0.0812%" height="15" fill="rgb(246,141,4)" fg:x="217" fg:w="1"/><text x="17.8779%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6279%" y="373" width="0.0812%" height="15" fill="rgb(229,23,39)" fg:x="217" fg:w="1"/><text x="17.8779%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="17.7092%" y="565" width="0.1625%" height="15" fill="rgb(206,12,3)" fg:x="218" fg:w="2"/><text x="17.9592%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.7092%" y="549" width="0.1625%" height="15" fill="rgb(252,226,20)" fg:x="218" fg:w="2"/><text x="17.9592%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.7092%" y="533" width="0.1625%" height="15" fill="rgb(216,123,35)" fg:x="218" fg:w="2"/><text x="17.9592%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.7092%" y="517" width="0.1625%" height="15" fill="rgb(212,68,40)" fg:x="218" fg:w="2"/><text x="17.9592%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="17.7092%" y="501" width="0.1625%" height="15" fill="rgb(254,125,32)" fg:x="218" fg:w="2"/><text x="17.9592%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7904%" y="485" width="0.0812%" height="15" fill="rgb(253,97,22)" fg:x="219" fg:w="1"/><text x="18.0404%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7904%" y="469" width="0.0812%" height="15" fill="rgb(241,101,14)" fg:x="219" fg:w="1"/><text x="18.0404%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7904%" y="453" width="0.0812%" height="15" fill="rgb(238,103,29)" fg:x="219" fg:w="1"/><text x="18.0404%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.7904%" y="437" width="0.0812%" height="15" fill="rgb(233,195,47)" fg:x="219" fg:w="1"/><text x="18.0404%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.7904%" y="421" width="0.0812%" height="15" fill="rgb(246,218,30)" fg:x="219" fg:w="1"/><text x="18.0404%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.7904%" y="405" width="0.0812%" height="15" fill="rgb(219,145,47)" fg:x="219" fg:w="1"/><text x="18.0404%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7904%" y="389" width="0.0812%" height="15" fill="rgb(243,12,26)" fg:x="219" fg:w="1"/><text x="18.0404%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7904%" y="373" width="0.0812%" height="15" fill="rgb(214,87,16)" fg:x="219" fg:w="1"/><text x="18.0404%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.7904%" y="357" width="0.0812%" height="15" fill="rgb(208,99,42)" fg:x="219" fg:w="1"/><text x="18.0404%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.7904%" y="341" width="0.0812%" height="15" fill="rgb(253,99,2)" fg:x="219" fg:w="1"/><text x="18.0404%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.7904%" y="325" width="0.0812%" height="15" fill="rgb(220,168,23)" fg:x="219" fg:w="1"/><text x="18.0404%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.7904%" y="309" width="0.0812%" height="15" fill="rgb(242,38,24)" fg:x="219" fg:w="1"/><text x="18.0404%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7904%" y="293" width="0.0812%" height="15" fill="rgb(225,182,9)" fg:x="219" fg:w="1"/><text x="18.0404%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="17.7092%" y="597" width="0.2437%" height="15" fill="rgb(243,178,37)" fg:x="218" fg:w="3"/><text x="17.9592%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="17.7092%" y="581" width="0.2437%" height="15" fill="rgb(232,139,19)" fg:x="218" fg:w="3"/><text x="17.9592%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="17.8716%" y="565" width="0.0812%" height="15" fill="rgb(225,201,24)" fg:x="220" fg:w="1"/><text x="18.1216%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="17.8716%" y="549" width="0.0812%" height="15" fill="rgb(221,47,46)" fg:x="220" fg:w="1"/><text x="18.1216%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="17.8716%" y="533" width="0.0812%" height="15" fill="rgb(249,23,13)" fg:x="220" fg:w="1"/><text x="18.1216%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8716%" y="517" width="0.0812%" height="15" fill="rgb(219,9,5)" fg:x="220" fg:w="1"/><text x="18.1216%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8716%" y="501" width="0.0812%" height="15" fill="rgb(254,171,16)" fg:x="220" fg:w="1"/><text x="18.1216%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8716%" y="485" width="0.0812%" height="15" fill="rgb(230,171,20)" fg:x="220" fg:w="1"/><text x="18.1216%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8716%" y="469" width="0.0812%" height="15" fill="rgb(210,71,41)" fg:x="220" fg:w="1"/><text x="18.1216%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="17.8716%" y="453" width="0.0812%" height="15" fill="rgb(206,173,20)" fg:x="220" fg:w="1"/><text x="18.1216%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.8716%" y="437" width="0.0812%" height="15" fill="rgb(233,88,34)" fg:x="220" fg:w="1"/><text x="18.1216%" y="447.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (4 samples, 0.32%)</title><rect x="17.7092%" y="629" width="0.3249%" height="15" fill="rgb(223,209,46)" fg:x="218" fg:w="4"/><text x="17.9592%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="17.7092%" y="613" width="0.3249%" height="15" fill="rgb(250,43,18)" fg:x="218" fg:w="4"/><text x="17.9592%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="17.9529%" y="597" width="0.0812%" height="15" fill="rgb(208,13,10)" fg:x="221" fg:w="1"/><text x="18.2029%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="17.9529%" y="581" width="0.0812%" height="15" fill="rgb(212,200,36)" fg:x="221" fg:w="1"/><text x="18.2029%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9529%" y="565" width="0.0812%" height="15" fill="rgb(225,90,30)" fg:x="221" fg:w="1"/><text x="18.2029%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.9529%" y="549" width="0.0812%" height="15" fill="rgb(236,182,39)" fg:x="221" fg:w="1"/><text x="18.2029%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="17.9529%" y="533" width="0.0812%" height="15" fill="rgb(212,144,35)" fg:x="221" fg:w="1"/><text x="18.2029%" y="543.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="18.1154%" y="533" width="0.0812%" height="15" fill="rgb(228,63,44)" fg:x="223" fg:w="1"/><text x="18.3654%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="18.1154%" y="565" width="0.1625%" height="15" fill="rgb(228,109,6)" fg:x="223" fg:w="2"/><text x="18.3654%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="18.1154%" y="549" width="0.1625%" height="15" fill="rgb(238,117,24)" fg:x="223" fg:w="2"/><text x="18.3654%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="18.1966%" y="533" width="0.0812%" height="15" fill="rgb(242,26,26)" fg:x="224" fg:w="1"/><text x="18.4466%" y="543.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="18.0341%" y="613" width="0.3249%" height="15" fill="rgb(221,92,48)" fg:x="222" fg:w="4"/><text x="18.2841%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="18.0341%" y="597" width="0.3249%" height="15" fill="rgb(209,209,32)" fg:x="222" fg:w="4"/><text x="18.2841%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="18.1154%" y="581" width="0.2437%" height="15" fill="rgb(221,70,22)" fg:x="223" fg:w="3"/><text x="18.3654%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.2778%" y="565" width="0.0812%" height="15" fill="rgb(248,145,5)" fg:x="225" fg:w="1"/><text x="18.5278%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.3591%" y="533" width="0.0812%" height="15" fill="rgb(226,116,26)" fg:x="226" fg:w="1"/><text x="18.6091%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (7 samples, 0.57%)</title><rect x="18.0341%" y="629" width="0.5686%" height="15" fill="rgb(244,5,17)" fg:x="222" fg:w="7"/><text x="18.2841%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="18.3591%" y="613" width="0.2437%" height="15" fill="rgb(252,159,33)" fg:x="226" fg:w="3"/><text x="18.6091%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (3 samples, 0.24%)</title><rect x="18.3591%" y="597" width="0.2437%" height="15" fill="rgb(206,71,0)" fg:x="226" fg:w="3"/><text x="18.6091%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="18.3591%" y="581" width="0.2437%" height="15" fill="rgb(233,118,54)" fg:x="226" fg:w="3"/><text x="18.6091%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="18.3591%" y="565" width="0.2437%" height="15" fill="rgb(234,83,48)" fg:x="226" fg:w="3"/><text x="18.6091%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (3 samples, 0.24%)</title><rect x="18.3591%" y="549" width="0.2437%" height="15" fill="rgb(228,3,54)" fg:x="226" fg:w="3"/><text x="18.6091%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (2 samples, 0.16%)</title><rect x="18.4403%" y="533" width="0.1625%" height="15" fill="rgb(226,155,13)" fg:x="227" fg:w="2"/><text x="18.6903%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="18.4403%" y="517" width="0.1625%" height="15" fill="rgb(241,28,37)" fg:x="227" fg:w="2"/><text x="18.6903%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="18.5215%" y="501" width="0.0812%" height="15" fill="rgb(233,93,10)" fg:x="228" fg:w="1"/><text x="18.7715%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.5215%" y="485" width="0.0812%" height="15" fill="rgb(225,113,19)" fg:x="228" fg:w="1"/><text x="18.7715%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5215%" y="469" width="0.0812%" height="15" fill="rgb(241,2,18)" fg:x="228" fg:w="1"/><text x="18.7715%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.5215%" y="453" width="0.0812%" height="15" fill="rgb(228,207,21)" fg:x="228" fg:w="1"/><text x="18.7715%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.5215%" y="437" width="0.0812%" height="15" fill="rgb(213,211,35)" fg:x="228" fg:w="1"/><text x="18.7715%" y="447.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (91 samples, 7.39%)</title><rect x="11.2916%" y="645" width="7.3924%" height="15" fill="rgb(209,83,10)" fg:x="139" fg:w="91"/><text x="11.5416%" y="655.50">plugins_co..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="18.6028%" y="629" width="0.0812%" height="15" fill="rgb(209,164,1)" fg:x="229" fg:w="1"/><text x="18.8528%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="18.6028%" y="613" width="0.0812%" height="15" fill="rgb(213,184,43)" fg:x="229" fg:w="1"/><text x="18.8528%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6028%" y="597" width="0.0812%" height="15" fill="rgb(231,61,34)" fg:x="229" fg:w="1"/><text x="18.8528%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6028%" y="581" width="0.0812%" height="15" fill="rgb(235,75,3)" fg:x="229" fg:w="1"/><text x="18.8528%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6028%" y="565" width="0.0812%" height="15" fill="rgb(220,106,47)" fg:x="229" fg:w="1"/><text x="18.8528%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.6028%" y="549" width="0.0812%" height="15" fill="rgb(210,196,33)" fg:x="229" fg:w="1"/><text x="18.8528%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.6028%" y="533" width="0.0812%" height="15" fill="rgb(229,154,42)" fg:x="229" fg:w="1"/><text x="18.8528%" y="543.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="18.7652%" y="613" width="0.0812%" height="15" fill="rgb(228,114,26)" fg:x="231" fg:w="1"/><text x="19.0152%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.7652%" y="597" width="0.0812%" height="15" fill="rgb(208,144,1)" fg:x="231" fg:w="1"/><text x="19.0152%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.7652%" y="581" width="0.0812%" height="15" fill="rgb(239,112,37)" fg:x="231" fg:w="1"/><text x="19.0152%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.7652%" y="565" width="0.0812%" height="15" fill="rgb(210,96,50)" fg:x="231" fg:w="1"/><text x="19.0152%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7652%" y="549" width="0.0812%" height="15" fill="rgb(222,178,2)" fg:x="231" fg:w="1"/><text x="19.0152%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.7652%" y="533" width="0.0812%" height="15" fill="rgb(226,74,18)" fg:x="231" fg:w="1"/><text x="19.0152%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.7652%" y="517" width="0.0812%" height="15" fill="rgb(225,67,54)" fg:x="231" fg:w="1"/><text x="19.0152%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.7652%" y="501" width="0.0812%" height="15" fill="rgb(251,92,32)" fg:x="231" fg:w="1"/><text x="19.0152%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.7652%" y="485" width="0.0812%" height="15" fill="rgb(228,149,22)" fg:x="231" fg:w="1"/><text x="19.0152%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.7652%" y="469" width="0.0812%" height="15" fill="rgb(243,54,13)" fg:x="231" fg:w="1"/><text x="19.0152%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="18.7652%" y="453" width="0.0812%" height="15" fill="rgb(243,180,28)" fg:x="231" fg:w="1"/><text x="19.0152%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="18.7652%" y="437" width="0.0812%" height="15" fill="rgb(208,167,24)" fg:x="231" fg:w="1"/><text x="19.0152%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="18.7652%" y="421" width="0.0812%" height="15" fill="rgb(245,73,45)" fg:x="231" fg:w="1"/><text x="19.0152%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="18.7652%" y="405" width="0.0812%" height="15" fill="rgb(237,203,48)" fg:x="231" fg:w="1"/><text x="19.0152%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="18.7652%" y="389" width="0.0812%" height="15" fill="rgb(211,197,16)" fg:x="231" fg:w="1"/><text x="19.0152%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="18.7652%" y="373" width="0.0812%" height="15" fill="rgb(243,99,51)" fg:x="231" fg:w="1"/><text x="19.0152%" y="383.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="18.6840%" y="645" width="0.2437%" height="15" fill="rgb(215,123,29)" fg:x="230" fg:w="3"/><text x="18.9340%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="18.6840%" y="629" width="0.2437%" height="15" fill="rgb(239,186,37)" fg:x="230" fg:w="3"/><text x="18.9340%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="18.8465%" y="613" width="0.0812%" height="15" fill="rgb(252,136,39)" fg:x="232" fg:w="1"/><text x="19.0965%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="18.9277%" y="629" width="0.1625%" height="15" fill="rgb(223,213,32)" fg:x="233" fg:w="2"/><text x="19.1777%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="18.9277%" y="613" width="0.1625%" height="15" fill="rgb(233,115,5)" fg:x="233" fg:w="2"/><text x="19.1777%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="18.9277%" y="597" width="0.1625%" height="15" fill="rgb(207,226,44)" fg:x="233" fg:w="2"/><text x="19.1777%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.9277%" y="581" width="0.1625%" height="15" fill="rgb(208,126,0)" fg:x="233" fg:w="2"/><text x="19.1777%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="18.9277%" y="565" width="0.1625%" height="15" fill="rgb(244,66,21)" fg:x="233" fg:w="2"/><text x="19.1777%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0089%" y="549" width="0.0812%" height="15" fill="rgb(222,97,12)" fg:x="234" fg:w="1"/><text x="19.2589%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="19.0902%" y="629" width="0.0812%" height="15" fill="rgb(219,213,19)" fg:x="235" fg:w="1"/><text x="19.3402%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="19.0902%" y="613" width="0.0812%" height="15" fill="rgb(252,169,30)" fg:x="235" fg:w="1"/><text x="19.3402%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.0902%" y="597" width="0.0812%" height="15" fill="rgb(206,32,51)" fg:x="235" fg:w="1"/><text x="19.3402%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.0902%" y="581" width="0.0812%" height="15" fill="rgb(250,172,42)" fg:x="235" fg:w="1"/><text x="19.3402%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="19.0902%" y="565" width="0.0812%" height="15" fill="rgb(209,34,43)" fg:x="235" fg:w="1"/><text x="19.3402%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.0902%" y="549" width="0.0812%" height="15" fill="rgb(223,11,35)" fg:x="235" fg:w="1"/><text x="19.3402%" y="559.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="19.1714%" y="629" width="0.1625%" height="15" fill="rgb(251,219,26)" fg:x="236" fg:w="2"/><text x="19.4214%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="19.1714%" y="613" width="0.1625%" height="15" fill="rgb(231,119,3)" fg:x="236" fg:w="2"/><text x="19.4214%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="19.2526%" y="597" width="0.0812%" height="15" fill="rgb(216,97,11)" fg:x="237" fg:w="1"/><text x="19.5026%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.2526%" y="581" width="0.0812%" height="15" fill="rgb(223,59,9)" fg:x="237" fg:w="1"/><text x="19.5026%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2526%" y="565" width="0.0812%" height="15" fill="rgb(233,93,31)" fg:x="237" fg:w="1"/><text x="19.5026%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="19.3339%" y="581" width="0.0812%" height="15" fill="rgb(239,81,33)" fg:x="238" fg:w="1"/><text x="19.5839%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="19.3339%" y="565" width="0.0812%" height="15" fill="rgb(213,120,34)" fg:x="238" fg:w="1"/><text x="19.5839%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.3339%" y="549" width="0.0812%" height="15" fill="rgb(243,49,53)" fg:x="238" fg:w="1"/><text x="19.5839%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.3339%" y="533" width="0.0812%" height="15" fill="rgb(247,216,33)" fg:x="238" fg:w="1"/><text x="19.5839%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.3339%" y="517" width="0.0812%" height="15" fill="rgb(226,26,14)" fg:x="238" fg:w="1"/><text x="19.5839%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3339%" y="501" width="0.0812%" height="15" fill="rgb(215,49,53)" fg:x="238" fg:w="1"/><text x="19.5839%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="19.3339%" y="485" width="0.0812%" height="15" fill="rgb(245,162,40)" fg:x="238" fg:w="1"/><text x="19.5839%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.3339%" y="469" width="0.0812%" height="15" fill="rgb(229,68,17)" fg:x="238" fg:w="1"/><text x="19.5839%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.3339%" y="453" width="0.0812%" height="15" fill="rgb(213,182,10)" fg:x="238" fg:w="1"/><text x="19.5839%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.3339%" y="437" width="0.0812%" height="15" fill="rgb(245,125,30)" fg:x="238" fg:w="1"/><text x="19.5839%" y="447.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="19.4151%" y="581" width="0.0812%" height="15" fill="rgb(232,202,2)" fg:x="239" fg:w="1"/><text x="19.6651%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4151%" y="565" width="0.0812%" height="15" fill="rgb(237,140,51)" fg:x="239" fg:w="1"/><text x="19.6651%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4151%" y="549" width="0.0812%" height="15" fill="rgb(236,157,25)" fg:x="239" fg:w="1"/><text x="19.6651%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6588%" y="549" width="0.0812%" height="15" fill="rgb(219,209,0)" fg:x="242" fg:w="1"/><text x="19.9088%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (9 samples, 0.73%)</title><rect x="19.3339%" y="613" width="0.7311%" height="15" fill="rgb(240,116,54)" fg:x="238" fg:w="9"/><text x="19.5839%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (9 samples, 0.73%)</title><rect x="19.3339%" y="597" width="0.7311%" height="15" fill="rgb(216,10,36)" fg:x="238" fg:w="9"/><text x="19.5839%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (7 samples, 0.57%)</title><rect x="19.4963%" y="581" width="0.5686%" height="15" fill="rgb(222,72,44)" fg:x="240" fg:w="7"/><text x="19.7463%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.49%)</title><rect x="19.5776%" y="565" width="0.4874%" height="15" fill="rgb(232,159,9)" fg:x="241" fg:w="6"/><text x="19.8276%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="19.7400%" y="549" width="0.3249%" height="15" fill="rgb(210,39,32)" fg:x="243" fg:w="4"/><text x="19.9900%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="19.7400%" y="533" width="0.3249%" height="15" fill="rgb(216,194,45)" fg:x="243" fg:w="4"/><text x="19.9900%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="19.7400%" y="517" width="0.3249%" height="15" fill="rgb(218,18,35)" fg:x="243" fg:w="4"/><text x="19.9900%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="19.7400%" y="501" width="0.3249%" height="15" fill="rgb(207,83,51)" fg:x="243" fg:w="4"/><text x="19.9900%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="19.7400%" y="485" width="0.3249%" height="15" fill="rgb(225,63,43)" fg:x="243" fg:w="4"/><text x="19.9900%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="19.7400%" y="469" width="0.3249%" height="15" fill="rgb(207,57,36)" fg:x="243" fg:w="4"/><text x="19.9900%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="19.7400%" y="453" width="0.3249%" height="15" fill="rgb(216,99,33)" fg:x="243" fg:w="4"/><text x="19.9900%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="19.8213%" y="437" width="0.2437%" height="15" fill="rgb(225,42,16)" fg:x="244" fg:w="3"/><text x="20.0713%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.9025%" y="421" width="0.1625%" height="15" fill="rgb(220,201,45)" fg:x="245" fg:w="2"/><text x="20.1525%" y="431.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="19.9025%" y="405" width="0.1625%" height="15" fill="rgb(225,33,4)" fg:x="245" fg:w="2"/><text x="20.1525%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.0650%" y="581" width="0.0812%" height="15" fill="rgb(224,33,50)" fg:x="247" fg:w="1"/><text x="20.3150%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.0650%" y="565" width="0.0812%" height="15" fill="rgb(246,198,51)" fg:x="247" fg:w="1"/><text x="20.3150%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.0650%" y="549" width="0.0812%" height="15" fill="rgb(205,22,4)" fg:x="247" fg:w="1"/><text x="20.3150%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.0650%" y="533" width="0.0812%" height="15" fill="rgb(206,3,8)" fg:x="247" fg:w="1"/><text x="20.3150%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.0650%" y="517" width="0.0812%" height="15" fill="rgb(251,23,15)" fg:x="247" fg:w="1"/><text x="20.3150%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.0650%" y="501" width="0.0812%" height="15" fill="rgb(252,88,28)" fg:x="247" fg:w="1"/><text x="20.3150%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.0650%" y="485" width="0.0812%" height="15" fill="rgb(212,127,14)" fg:x="247" fg:w="1"/><text x="20.3150%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.0650%" y="469" width="0.0812%" height="15" fill="rgb(247,145,37)" fg:x="247" fg:w="1"/><text x="20.3150%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.0650%" y="453" width="0.0812%" height="15" fill="rgb(209,117,53)" fg:x="247" fg:w="1"/><text x="20.3150%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.0650%" y="437" width="0.0812%" height="15" fill="rgb(212,90,42)" fg:x="247" fg:w="1"/><text x="20.3150%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.0650%" y="421" width="0.0812%" height="15" fill="rgb(218,164,37)" fg:x="247" fg:w="1"/><text x="20.3150%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.0650%" y="405" width="0.0812%" height="15" fill="rgb(246,65,34)" fg:x="247" fg:w="1"/><text x="20.3150%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.0650%" y="389" width="0.0812%" height="15" fill="rgb(231,100,33)" fg:x="247" fg:w="1"/><text x="20.3150%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.0650%" y="373" width="0.0812%" height="15" fill="rgb(228,126,14)" fg:x="247" fg:w="1"/><text x="20.3150%" y="383.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (190 samples, 15.43%)</title><rect x="4.7929%" y="661" width="15.4346%" height="15" fill="rgb(215,173,21)" fg:x="59" fg:w="190"/><text x="5.0429%" y="671.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (16 samples, 1.30%)</title><rect x="18.9277%" y="645" width="1.2998%" height="15" fill="rgb(210,6,40)" fg:x="233" fg:w="16"/><text x="19.1777%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (11 samples, 0.89%)</title><rect x="19.3339%" y="629" width="0.8936%" height="15" fill="rgb(212,48,18)" fg:x="238" fg:w="11"/><text x="19.5839%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="20.0650%" y="613" width="0.1625%" height="15" fill="rgb(230,214,11)" fg:x="247" fg:w="2"/><text x="20.3150%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.0650%" y="597" width="0.1625%" height="15" fill="rgb(254,105,39)" fg:x="247" fg:w="2"/><text x="20.3150%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.1462%" y="581" width="0.0812%" height="15" fill="rgb(245,158,5)" fg:x="248" fg:w="1"/><text x="20.3962%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="20.2275%" y="661" width="0.0812%" height="15" fill="rgb(249,208,11)" fg:x="249" fg:w="1"/><text x="20.4775%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="20.2275%" y="645" width="0.0812%" height="15" fill="rgb(210,39,28)" fg:x="249" fg:w="1"/><text x="20.4775%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.2275%" y="629" width="0.0812%" height="15" fill="rgb(211,56,53)" fg:x="249" fg:w="1"/><text x="20.4775%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3087%" y="629" width="0.0812%" height="15" fill="rgb(226,201,30)" fg:x="250" fg:w="1"/><text x="20.5587%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.3087%" y="613" width="0.0812%" height="15" fill="rgb(239,101,34)" fg:x="250" fg:w="1"/><text x="20.5587%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.3087%" y="597" width="0.0812%" height="15" fill="rgb(226,209,5)" fg:x="250" fg:w="1"/><text x="20.5587%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.3087%" y="581" width="0.0812%" height="15" fill="rgb(250,105,47)" fg:x="250" fg:w="1"/><text x="20.5587%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.3087%" y="565" width="0.0812%" height="15" fill="rgb(230,72,3)" fg:x="250" fg:w="1"/><text x="20.5587%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="20.3087%" y="549" width="0.0812%" height="15" fill="rgb(232,218,39)" fg:x="250" fg:w="1"/><text x="20.5587%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="20.3087%" y="533" width="0.0812%" height="15" fill="rgb(248,166,6)" fg:x="250" fg:w="1"/><text x="20.5587%" y="543.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (2 samples, 0.16%)</title><rect x="20.3087%" y="645" width="0.1625%" height="15" fill="rgb(247,89,20)" fg:x="250" fg:w="2"/><text x="20.5587%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3899%" y="629" width="0.0812%" height="15" fill="rgb(248,130,54)" fg:x="251" fg:w="1"/><text x="20.6399%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="20.4712%" y="613" width="0.1625%" height="15" fill="rgb(234,196,4)" fg:x="252" fg:w="2"/><text x="20.7212%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="20.5524%" y="597" width="0.0812%" height="15" fill="rgb(250,143,31)" fg:x="253" fg:w="1"/><text x="20.8024%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.5524%" y="581" width="0.0812%" height="15" fill="rgb(211,110,34)" fg:x="253" fg:w="1"/><text x="20.8024%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.5524%" y="565" width="0.0812%" height="15" fill="rgb(215,124,48)" fg:x="253" fg:w="1"/><text x="20.8024%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="20.6336%" y="613" width="0.2437%" height="15" fill="rgb(216,46,13)" fg:x="254" fg:w="3"/><text x="20.8836%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.24%)</title><rect x="20.6336%" y="597" width="0.2437%" height="15" fill="rgb(205,184,25)" fg:x="254" fg:w="3"/><text x="20.8836%" y="607.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (2 samples, 0.16%)</title><rect x="20.7149%" y="581" width="0.1625%" height="15" fill="rgb(228,1,10)" fg:x="255" fg:w="2"/><text x="20.9649%" y="591.50"></text></g><g><title>kernel::model::base::EntityKey::new (2 samples, 0.16%)</title><rect x="20.7149%" y="565" width="0.1625%" height="15" fill="rgb(213,116,27)" fg:x="255" fg:w="2"/><text x="20.9649%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="20.9586%" y="533" width="0.2437%" height="15" fill="rgb(241,95,50)" fg:x="258" fg:w="3"/><text x="21.2086%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="21.0398%" y="517" width="0.1625%" height="15" fill="rgb(238,48,32)" fg:x="259" fg:w="2"/><text x="21.2898%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="21.0398%" y="501" width="0.1625%" height="15" fill="rgb(235,113,49)" fg:x="259" fg:w="2"/><text x="21.2898%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="21.0398%" y="485" width="0.1625%" height="15" fill="rgb(205,127,43)" fg:x="259" fg:w="2"/><text x="21.2898%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="21.1210%" y="469" width="0.0812%" height="15" fill="rgb(250,162,2)" fg:x="260" fg:w="1"/><text x="21.3710%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="21.1210%" y="453" width="0.0812%" height="15" fill="rgb(220,13,41)" fg:x="260" fg:w="1"/><text x="21.3710%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="21.1210%" y="437" width="0.0812%" height="15" fill="rgb(249,221,25)" fg:x="260" fg:w="1"/><text x="21.3710%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="20.9586%" y="549" width="0.3249%" height="15" fill="rgb(215,208,19)" fg:x="258" fg:w="4"/><text x="21.2086%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.2023%" y="533" width="0.0812%" height="15" fill="rgb(236,175,2)" fg:x="261" fg:w="1"/><text x="21.4523%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.57%)</title><rect x="21.2835%" y="533" width="0.5686%" height="15" fill="rgb(241,52,2)" fg:x="262" fg:w="7"/><text x="21.5335%" y="543.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.41%)</title><rect x="21.4460%" y="517" width="0.4062%" height="15" fill="rgb(248,140,14)" fg:x="264" fg:w="5"/><text x="21.6960%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (5 samples, 0.41%)</title><rect x="21.4460%" y="501" width="0.4062%" height="15" fill="rgb(253,22,42)" fg:x="264" fg:w="5"/><text x="21.6960%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.32%)</title><rect x="21.5272%" y="485" width="0.3249%" height="15" fill="rgb(234,61,47)" fg:x="265" fg:w="4"/><text x="21.7772%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="21.6084%" y="469" width="0.2437%" height="15" fill="rgb(208,226,15)" fg:x="266" fg:w="3"/><text x="21.8584%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="21.6084%" y="453" width="0.2437%" height="15" fill="rgb(217,221,4)" fg:x="266" fg:w="3"/><text x="21.8584%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="21.6897%" y="437" width="0.1625%" height="15" fill="rgb(212,174,34)" fg:x="267" fg:w="2"/><text x="21.9397%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="21.8522%" y="485" width="0.0812%" height="15" fill="rgb(253,83,4)" fg:x="269" fg:w="1"/><text x="22.1022%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.8522%" y="469" width="0.0812%" height="15" fill="rgb(250,195,49)" fg:x="269" fg:w="1"/><text x="22.1022%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="21.8522%" y="453" width="0.0812%" height="15" fill="rgb(241,192,25)" fg:x="269" fg:w="1"/><text x="22.1022%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="21.8522%" y="437" width="0.0812%" height="15" fill="rgb(208,124,10)" fg:x="269" fg:w="1"/><text x="22.1022%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="21.8522%" y="501" width="0.1625%" height="15" fill="rgb(222,33,0)" fg:x="269" fg:w="2"/><text x="22.1022%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="21.9334%" y="485" width="0.0812%" height="15" fill="rgb(234,209,28)" fg:x="270" fg:w="1"/><text x="22.1834%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="21.9334%" y="469" width="0.0812%" height="15" fill="rgb(224,11,23)" fg:x="270" fg:w="1"/><text x="22.1834%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="21.9334%" y="453" width="0.0812%" height="15" fill="rgb(232,99,1)" fg:x="270" fg:w="1"/><text x="22.1834%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="21.8522%" y="517" width="0.2437%" height="15" fill="rgb(237,95,45)" fg:x="269" fg:w="3"/><text x="22.1022%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.0146%" y="501" width="0.0812%" height="15" fill="rgb(208,109,11)" fg:x="271" fg:w="1"/><text x="22.2646%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.0146%" y="485" width="0.0812%" height="15" fill="rgb(216,190,48)" fg:x="271" fg:w="1"/><text x="22.2646%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.0959%" y="517" width="0.1625%" height="15" fill="rgb(251,171,36)" fg:x="272" fg:w="2"/><text x="22.3459%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.1771%" y="501" width="0.0812%" height="15" fill="rgb(230,62,22)" fg:x="273" fg:w="1"/><text x="22.4271%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="22.2583%" y="501" width="0.0812%" height="15" fill="rgb(225,114,35)" fg:x="274" fg:w="1"/><text x="22.5083%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.2583%" y="485" width="0.0812%" height="15" fill="rgb(215,118,42)" fg:x="274" fg:w="1"/><text x="22.5083%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.2583%" y="469" width="0.0812%" height="15" fill="rgb(243,119,21)" fg:x="274" fg:w="1"/><text x="22.5083%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.2583%" y="453" width="0.0812%" height="15" fill="rgb(252,177,53)" fg:x="274" fg:w="1"/><text x="22.5083%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.2583%" y="437" width="0.0812%" height="15" fill="rgb(237,209,29)" fg:x="274" fg:w="1"/><text x="22.5083%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="22.3396%" y="485" width="0.1625%" height="15" fill="rgb(212,65,23)" fg:x="275" fg:w="2"/><text x="22.5896%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.3396%" y="469" width="0.1625%" height="15" fill="rgb(230,222,46)" fg:x="275" fg:w="2"/><text x="22.5896%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.4208%" y="453" width="0.0812%" height="15" fill="rgb(215,135,32)" fg:x="276" fg:w="1"/><text x="22.6708%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.4208%" y="437" width="0.0812%" height="15" fill="rgb(246,101,22)" fg:x="276" fg:w="1"/><text x="22.6708%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.4208%" y="421" width="0.0812%" height="15" fill="rgb(206,107,13)" fg:x="276" fg:w="1"/><text x="22.6708%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.4208%" y="405" width="0.0812%" height="15" fill="rgb(250,100,44)" fg:x="276" fg:w="1"/><text x="22.6708%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.4208%" y="389" width="0.0812%" height="15" fill="rgb(231,147,38)" fg:x="276" fg:w="1"/><text x="22.6708%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="22.3396%" y="501" width="0.2437%" height="15" fill="rgb(229,8,40)" fg:x="275" fg:w="3"/><text x="22.5896%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.5020%" y="485" width="0.0812%" height="15" fill="rgb(221,135,30)" fg:x="277" fg:w="1"/><text x="22.7520%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.5020%" y="469" width="0.0812%" height="15" fill="rgb(249,193,18)" fg:x="277" fg:w="1"/><text x="22.7520%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.5020%" y="453" width="0.0812%" height="15" fill="rgb(209,133,39)" fg:x="277" fg:w="1"/><text x="22.7520%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.49%)</title><rect x="22.2583%" y="517" width="0.4874%" height="15" fill="rgb(232,100,14)" fg:x="274" fg:w="6"/><text x="22.5083%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.5833%" y="501" width="0.1625%" height="15" fill="rgb(224,185,1)" fg:x="278" fg:w="2"/><text x="22.8333%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (12 samples, 0.97%)</title><rect x="21.8522%" y="533" width="0.9748%" height="15" fill="rgb(223,139,8)" fg:x="269" fg:w="12"/><text x="22.1022%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="22.7457%" y="517" width="0.0812%" height="15" fill="rgb(232,213,38)" fg:x="280" fg:w="1"/><text x="22.9957%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (26 samples, 2.11%)</title><rect x="20.8773%" y="565" width="2.1121%" height="15" fill="rgb(207,94,22)" fg:x="257" fg:w="26"/><text x="21.1273%" y="575.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.71%)</title><rect x="21.2835%" y="549" width="1.7059%" height="15" fill="rgb(219,183,54)" fg:x="262" fg:w="21"/><text x="21.5335%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="22.8270%" y="533" width="0.1625%" height="15" fill="rgb(216,185,54)" fg:x="281" fg:w="2"/><text x="23.0770%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="22.9082%" y="517" width="0.0812%" height="15" fill="rgb(254,217,39)" fg:x="282" fg:w="1"/><text x="23.1582%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="22.9082%" y="501" width="0.0812%" height="15" fill="rgb(240,178,23)" fg:x="282" fg:w="1"/><text x="23.1582%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.9082%" y="485" width="0.0812%" height="15" fill="rgb(218,11,47)" fg:x="282" fg:w="1"/><text x="23.1582%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.9082%" y="469" width="0.0812%" height="15" fill="rgb(218,51,51)" fg:x="282" fg:w="1"/><text x="23.1582%" y="479.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.9082%" y="453" width="0.0812%" height="15" fill="rgb(238,126,27)" fg:x="282" fg:w="1"/><text x="23.1582%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.0707%" y="517" width="0.0812%" height="15" fill="rgb(249,202,22)" fg:x="284" fg:w="1"/><text x="23.3207%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="23.1519%" y="453" width="0.1625%" height="15" fill="rgb(254,195,49)" fg:x="285" fg:w="2"/><text x="23.4019%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="22.9894%" y="565" width="0.4062%" height="15" fill="rgb(208,123,14)" fg:x="283" fg:w="5"/><text x="23.2394%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="22.9894%" y="549" width="0.4062%" height="15" fill="rgb(224,200,8)" fg:x="283" fg:w="5"/><text x="23.2394%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="22.9894%" y="533" width="0.4062%" height="15" fill="rgb(217,61,36)" fg:x="283" fg:w="5"/><text x="23.2394%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="23.1519%" y="517" width="0.2437%" height="15" fill="rgb(206,35,45)" fg:x="285" fg:w="3"/><text x="23.4019%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="23.1519%" y="501" width="0.2437%" height="15" fill="rgb(217,65,33)" fg:x="285" fg:w="3"/><text x="23.4019%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="23.1519%" y="485" width="0.2437%" height="15" fill="rgb(222,158,48)" fg:x="285" fg:w="3"/><text x="23.4019%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="23.1519%" y="469" width="0.2437%" height="15" fill="rgb(254,2,54)" fg:x="285" fg:w="3"/><text x="23.4019%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.3144%" y="453" width="0.0812%" height="15" fill="rgb(250,143,38)" fg:x="287" fg:w="1"/><text x="23.5644%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="23.3144%" y="437" width="0.0812%" height="15" fill="rgb(248,25,0)" fg:x="287" fg:w="1"/><text x="23.5644%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.3956%" y="501" width="0.0812%" height="15" fill="rgb(206,152,27)" fg:x="288" fg:w="1"/><text x="23.6456%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.6393%" y="485" width="0.0812%" height="15" fill="rgb(240,77,30)" fg:x="291" fg:w="1"/><text x="23.8893%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="23.7206%" y="485" width="0.1625%" height="15" fill="rgb(231,5,3)" fg:x="292" fg:w="2"/><text x="23.9706%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8018%" y="469" width="0.0812%" height="15" fill="rgb(207,226,32)" fg:x="293" fg:w="1"/><text x="24.0518%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.8830%" y="469" width="0.0812%" height="15" fill="rgb(222,207,47)" fg:x="294" fg:w="1"/><text x="24.1330%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.9643%" y="453" width="0.0812%" height="15" fill="rgb(229,115,45)" fg:x="295" fg:w="1"/><text x="24.2143%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="23.9643%" y="437" width="0.0812%" height="15" fill="rgb(224,191,6)" fg:x="295" fg:w="1"/><text x="24.2143%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.0455%" y="421" width="0.0812%" height="15" fill="rgb(230,227,24)" fg:x="296" fg:w="1"/><text x="24.2955%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.24%)</title><rect x="24.0455%" y="453" width="0.2437%" height="15" fill="rgb(228,80,19)" fg:x="296" fg:w="3"/><text x="24.2955%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="24.0455%" y="437" width="0.2437%" height="15" fill="rgb(247,229,0)" fg:x="296" fg:w="3"/><text x="24.2955%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="24.1267%" y="421" width="0.1625%" height="15" fill="rgb(237,194,15)" fg:x="297" fg:w="2"/><text x="24.3767%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.97%)</title><rect x="23.3956%" y="533" width="0.9748%" height="15" fill="rgb(219,203,20)" fg:x="288" fg:w="12"/><text x="23.6456%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.97%)</title><rect x="23.3956%" y="517" width="0.9748%" height="15" fill="rgb(234,128,8)" fg:x="288" fg:w="12"/><text x="23.6456%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.89%)</title><rect x="23.4768%" y="501" width="0.8936%" height="15" fill="rgb(248,202,8)" fg:x="289" fg:w="11"/><text x="23.7268%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="23.8830%" y="485" width="0.4874%" height="15" fill="rgb(206,104,37)" fg:x="294" fg:w="6"/><text x="24.1330%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="23.9643%" y="469" width="0.4062%" height="15" fill="rgb(223,8,27)" fg:x="295" fg:w="5"/><text x="24.2143%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="24.2892%" y="453" width="0.0812%" height="15" fill="rgb(216,217,28)" fg:x="299" fg:w="1"/><text x="24.5392%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.2892%" y="437" width="0.0812%" height="15" fill="rgb(249,199,1)" fg:x="299" fg:w="1"/><text x="24.5392%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="24.5329%" y="437" width="0.0812%" height="15" fill="rgb(240,85,17)" fg:x="302" fg:w="1"/><text x="24.7829%" y="447.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (3 samples, 0.24%)</title><rect x="24.4517%" y="469" width="0.2437%" height="15" fill="rgb(206,108,45)" fg:x="301" fg:w="3"/><text x="24.7017%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="24.4517%" y="453" width="0.2437%" height="15" fill="rgb(245,210,41)" fg:x="301" fg:w="3"/><text x="24.7017%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.6141%" y="437" width="0.0812%" height="15" fill="rgb(206,13,37)" fg:x="303" fg:w="1"/><text x="24.8641%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.41%)</title><rect x="24.3704%" y="501" width="0.4062%" height="15" fill="rgb(250,61,18)" fg:x="300" fg:w="5"/><text x="24.6204%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.41%)</title><rect x="24.3704%" y="485" width="0.4062%" height="15" fill="rgb(235,172,48)" fg:x="300" fg:w="5"/><text x="24.6204%" y="495.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="24.6954%" y="469" width="0.0812%" height="15" fill="rgb(249,201,17)" fg:x="304" fg:w="1"/><text x="24.9454%" y="479.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (18 samples, 1.46%)</title><rect x="23.3956%" y="549" width="1.4622%" height="15" fill="rgb(219,208,6)" fg:x="288" fg:w="18"/><text x="23.6456%" y="559.50"></text></g><g><title>treediff::diff::diff (6 samples, 0.49%)</title><rect x="24.3704%" y="533" width="0.4874%" height="15" fill="rgb(248,31,23)" fg:x="300" fg:w="6"/><text x="24.6204%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.49%)</title><rect x="24.3704%" y="517" width="0.4874%" height="15" fill="rgb(245,15,42)" fg:x="300" fg:w="6"/><text x="24.6204%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="24.7766%" y="501" width="0.0812%" height="15" fill="rgb(222,217,39)" fg:x="305" fg:w="1"/><text x="25.0266%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.0203%" y="517" width="0.0812%" height="15" fill="rgb(210,219,27)" fg:x="308" fg:w="1"/><text x="25.2703%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.41%)</title><rect x="25.1015%" y="517" width="0.4062%" height="15" fill="rgb(252,166,36)" fg:x="309" fg:w="5"/><text x="25.3515%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="25.2640%" y="501" width="0.2437%" height="15" fill="rgb(245,132,34)" fg:x="311" fg:w="3"/><text x="25.5140%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="25.4265%" y="485" width="0.0812%" height="15" fill="rgb(236,54,3)" fg:x="313" fg:w="1"/><text x="25.6765%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="25.5077%" y="517" width="0.0812%" height="15" fill="rgb(241,173,43)" fg:x="314" fg:w="1"/><text x="25.7577%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="25.5077%" y="501" width="0.0812%" height="15" fill="rgb(215,190,9)" fg:x="314" fg:w="1"/><text x="25.7577%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="25.5077%" y="485" width="0.0812%" height="15" fill="rgb(242,101,16)" fg:x="314" fg:w="1"/><text x="25.7577%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.6702%" y="469" width="0.1625%" height="15" fill="rgb(223,190,21)" fg:x="316" fg:w="2"/><text x="25.9202%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="25.6702%" y="453" width="0.1625%" height="15" fill="rgb(215,228,25)" fg:x="316" fg:w="2"/><text x="25.9202%" y="463.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="25.6702%" y="437" width="0.1625%" height="15" fill="rgb(225,36,22)" fg:x="316" fg:w="2"/><text x="25.9202%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="25.8327%" y="453" width="0.0812%" height="15" fill="rgb(251,106,46)" fg:x="318" fg:w="1"/><text x="26.0827%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="25.9139%" y="437" width="0.0812%" height="15" fill="rgb(208,90,1)" fg:x="319" fg:w="1"/><text x="26.1639%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.49%)</title><rect x="25.9951%" y="437" width="0.4874%" height="15" fill="rgb(243,10,4)" fg:x="320" fg:w="6"/><text x="26.2451%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.41%)</title><rect x="26.0764%" y="421" width="0.4062%" height="15" fill="rgb(212,137,27)" fg:x="321" fg:w="5"/><text x="26.3264%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="26.3201%" y="405" width="0.1625%" height="15" fill="rgb(231,220,49)" fg:x="324" fg:w="2"/><text x="26.5701%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="26.3201%" y="389" width="0.1625%" height="15" fill="rgb(237,96,20)" fg:x="324" fg:w="2"/><text x="26.5701%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4013%" y="373" width="0.0812%" height="15" fill="rgb(239,229,30)" fg:x="325" fg:w="1"/><text x="26.6513%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (9 samples, 0.73%)</title><rect x="25.8327%" y="469" width="0.7311%" height="15" fill="rgb(219,65,33)" fg:x="318" fg:w="9"/><text x="26.0827%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.65%)</title><rect x="25.9139%" y="453" width="0.6499%" height="15" fill="rgb(243,134,7)" fg:x="319" fg:w="8"/><text x="26.1639%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.4825%" y="437" width="0.0812%" height="15" fill="rgb(216,177,54)" fg:x="326" fg:w="1"/><text x="26.7325%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="26.6450%" y="453" width="0.0812%" height="15" fill="rgb(211,160,20)" fg:x="328" fg:w="1"/><text x="26.8950%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8075%" y="437" width="0.0812%" height="15" fill="rgb(239,85,39)" fg:x="330" fg:w="1"/><text x="27.0575%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="26.8075%" y="421" width="0.0812%" height="15" fill="rgb(232,125,22)" fg:x="330" fg:w="1"/><text x="27.0575%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="26.8075%" y="405" width="0.0812%" height="15" fill="rgb(244,57,34)" fg:x="330" fg:w="1"/><text x="27.0575%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.0512%" y="421" width="0.0812%" height="15" fill="rgb(214,203,32)" fg:x="333" fg:w="1"/><text x="27.3012%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="27.1324%" y="421" width="0.0812%" height="15" fill="rgb(207,58,43)" fg:x="334" fg:w="1"/><text x="27.3824%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="27.2136%" y="421" width="0.3249%" height="15" fill="rgb(215,193,15)" fg:x="335" fg:w="4"/><text x="27.4636%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="27.4574%" y="405" width="0.0812%" height="15" fill="rgb(232,15,44)" fg:x="338" fg:w="1"/><text x="27.7074%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (13 samples, 1.06%)</title><rect x="26.7262%" y="453" width="1.0561%" height="15" fill="rgb(212,3,48)" fg:x="329" fg:w="13"/><text x="26.9762%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (11 samples, 0.89%)</title><rect x="26.8887%" y="437" width="0.8936%" height="15" fill="rgb(218,128,7)" fg:x="331" fg:w="11"/><text x="27.1387%" y="447.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="27.5386%" y="421" width="0.2437%" height="15" fill="rgb(226,216,39)" fg:x="339" fg:w="3"/><text x="27.7886%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (27 samples, 2.19%)</title><rect x="25.6702%" y="485" width="2.1933%" height="15" fill="rgb(243,47,51)" fg:x="316" fg:w="27"/><text x="25.9202%" y="495.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (16 samples, 1.30%)</title><rect x="26.5638%" y="469" width="1.2998%" height="15" fill="rgb(241,183,40)" fg:x="327" fg:w="16"/><text x="26.8138%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.7823%" y="453" width="0.0812%" height="15" fill="rgb(231,217,32)" fg:x="342" fg:w="1"/><text x="28.0323%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (29 samples, 2.36%)</title><rect x="25.5890%" y="501" width="2.3558%" height="15" fill="rgb(229,61,38)" fg:x="315" fg:w="29"/><text x="25.8390%" y="511.50">&lt;..</text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="27.8635%" y="485" width="0.0812%" height="15" fill="rgb(225,210,5)" fg:x="343" fg:w="1"/><text x="28.1135%" y="495.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="27.9448%" y="501" width="0.2437%" height="15" fill="rgb(231,79,45)" fg:x="344" fg:w="3"/><text x="28.1948%" y="511.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (44 samples, 3.57%)</title><rect x="24.8578%" y="549" width="3.5743%" height="15" fill="rgb(224,100,7)" fg:x="306" fg:w="44"/><text x="25.1078%" y="559.50">kern..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (44 samples, 3.57%)</title><rect x="24.8578%" y="533" width="3.5743%" height="15" fill="rgb(241,198,18)" fg:x="306" fg:w="44"/><text x="25.1078%" y="543.50">&lt;ser..</text></g><g><title>serde::ser::Serializer::collect_map (35 samples, 2.84%)</title><rect x="25.5890%" y="517" width="2.8432%" height="15" fill="rgb(252,97,53)" fg:x="315" fg:w="35"/><text x="25.8390%" y="527.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="28.1885%" y="501" width="0.2437%" height="15" fill="rgb(220,88,7)" fg:x="347" fg:w="3"/><text x="28.4385%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.2697%" y="485" width="0.1625%" height="15" fill="rgb(213,176,14)" fg:x="348" fg:w="2"/><text x="28.5197%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="28.7571%" y="357" width="0.0812%" height="15" fill="rgb(246,73,7)" fg:x="354" fg:w="1"/><text x="29.0071%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="28.6759%" y="405" width="0.2437%" height="15" fill="rgb(245,64,36)" fg:x="353" fg:w="3"/><text x="28.9259%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="28.6759%" y="389" width="0.2437%" height="15" fill="rgb(245,80,10)" fg:x="353" fg:w="3"/><text x="28.9259%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="28.6759%" y="373" width="0.2437%" height="15" fill="rgb(232,107,50)" fg:x="353" fg:w="3"/><text x="28.9259%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.8383%" y="357" width="0.0812%" height="15" fill="rgb(253,3,0)" fg:x="355" fg:w="1"/><text x="29.0883%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.0008%" y="373" width="0.0812%" height="15" fill="rgb(212,99,53)" fg:x="357" fg:w="1"/><text x="29.2508%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.2445%" y="341" width="0.0812%" height="15" fill="rgb(249,111,54)" fg:x="360" fg:w="1"/><text x="29.4945%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="29.1633%" y="357" width="0.2437%" height="15" fill="rgb(249,55,30)" fg:x="359" fg:w="3"/><text x="29.4133%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.3258%" y="341" width="0.0812%" height="15" fill="rgb(237,47,42)" fg:x="361" fg:w="1"/><text x="29.5758%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="29.0820%" y="373" width="0.4062%" height="15" fill="rgb(211,20,18)" fg:x="358" fg:w="5"/><text x="29.3320%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="29.4070%" y="357" width="0.0812%" height="15" fill="rgb(231,203,46)" fg:x="362" fg:w="1"/><text x="29.6570%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4070%" y="341" width="0.0812%" height="15" fill="rgb(237,142,3)" fg:x="362" fg:w="1"/><text x="29.6570%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="29.0008%" y="389" width="0.5686%" height="15" fill="rgb(241,107,1)" fg:x="357" fg:w="7"/><text x="29.2508%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4882%" y="373" width="0.0812%" height="15" fill="rgb(229,83,13)" fg:x="363" fg:w="1"/><text x="29.7382%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="28.9196%" y="405" width="0.8123%" height="15" fill="rgb(241,91,40)" fg:x="356" fg:w="10"/><text x="29.1696%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.5695%" y="389" width="0.1625%" height="15" fill="rgb(225,3,45)" fg:x="364" fg:w="2"/><text x="29.8195%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.5695%" y="373" width="0.1625%" height="15" fill="rgb(244,223,14)" fg:x="364" fg:w="2"/><text x="29.8195%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.46%)</title><rect x="28.4322%" y="421" width="1.4622%" height="15" fill="rgb(224,124,37)" fg:x="350" fg:w="18"/><text x="28.6822%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.7319%" y="405" width="0.1625%" height="15" fill="rgb(251,171,30)" fg:x="366" fg:w="2"/><text x="29.9819%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.7319%" y="389" width="0.1625%" height="15" fill="rgb(236,46,54)" fg:x="366" fg:w="2"/><text x="29.9819%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.8132%" y="373" width="0.0812%" height="15" fill="rgb(245,213,5)" fg:x="367" fg:w="1"/><text x="30.0632%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="29.8944%" y="405" width="0.0812%" height="15" fill="rgb(230,144,27)" fg:x="368" fg:w="1"/><text x="30.1444%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="29.8944%" y="421" width="0.1625%" height="15" fill="rgb(220,86,6)" fg:x="368" fg:w="2"/><text x="30.1444%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9756%" y="405" width="0.0812%" height="15" fill="rgb(240,20,13)" fg:x="369" fg:w="1"/><text x="30.2256%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (22 samples, 1.79%)</title><rect x="28.4322%" y="437" width="1.7872%" height="15" fill="rgb(217,89,34)" fg:x="350" fg:w="22"/><text x="28.6822%" y="447.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.0569%" y="421" width="0.1625%" height="15" fill="rgb(229,13,5)" fg:x="370" fg:w="2"/><text x="30.3069%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="30.0569%" y="405" width="0.1625%" height="15" fill="rgb(244,67,35)" fg:x="370" fg:w="2"/><text x="30.3069%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.0569%" y="389" width="0.1625%" height="15" fill="rgb(221,40,2)" fg:x="370" fg:w="2"/><text x="30.3069%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (23 samples, 1.87%)</title><rect x="28.4322%" y="453" width="1.8684%" height="15" fill="rgb(237,157,21)" fg:x="350" fg:w="23"/><text x="28.6822%" y="463.50">&lt;..</text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2193%" y="437" width="0.0812%" height="15" fill="rgb(222,94,11)" fg:x="372" fg:w="1"/><text x="30.4693%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.3006%" y="453" width="0.0812%" height="15" fill="rgb(249,113,6)" fg:x="373" fg:w="1"/><text x="30.5506%" y="463.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="30.3006%" y="437" width="0.0812%" height="15" fill="rgb(238,137,36)" fg:x="373" fg:w="1"/><text x="30.5506%" y="447.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="30.3006%" y="421" width="0.0812%" height="15" fill="rgb(210,102,26)" fg:x="373" fg:w="1"/><text x="30.5506%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (25 samples, 2.03%)</title><rect x="28.4322%" y="485" width="2.0309%" height="15" fill="rgb(218,30,30)" fg:x="350" fg:w="25"/><text x="28.6822%" y="495.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (25 samples, 2.03%)</title><rect x="28.4322%" y="469" width="2.0309%" height="15" fill="rgb(214,67,26)" fg:x="350" fg:w="25"/><text x="28.6822%" y="479.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3818%" y="453" width="0.0812%" height="15" fill="rgb(251,9,53)" fg:x="374" fg:w="1"/><text x="30.6318%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.3818%" y="437" width="0.0812%" height="15" fill="rgb(228,204,25)" fg:x="374" fg:w="1"/><text x="30.6318%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3818%" y="421" width="0.0812%" height="15" fill="rgb(207,153,8)" fg:x="374" fg:w="1"/><text x="30.6318%" y="431.50"></text></g><g><title>engine::session::state::State::close (124 samples, 10.07%)</title><rect x="20.4712%" y="645" width="10.0731%" height="15" fill="rgb(242,9,16)" fg:x="252" fg:w="124"/><text x="20.7212%" y="655.50">engine::session..</text></g><g><title>engine::session::state::State::flush_entities (124 samples, 10.07%)</title><rect x="20.4712%" y="629" width="10.0731%" height="15" fill="rgb(217,211,10)" fg:x="252" fg:w="124"/><text x="20.7212%" y="639.50">engine::session..</text></g><g><title>core::iter::adapters::try_process (119 samples, 9.67%)</title><rect x="20.8773%" y="613" width="9.6669%" height="15" fill="rgb(219,228,52)" fg:x="257" fg:w="119"/><text x="21.1273%" y="623.50">core::iter::ad..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (119 samples, 9.67%)</title><rect x="20.8773%" y="597" width="9.6669%" height="15" fill="rgb(231,92,29)" fg:x="257" fg:w="119"/><text x="21.1273%" y="607.50">&lt;alloc::vec::V..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (119 samples, 9.67%)</title><rect x="20.8773%" y="581" width="9.6669%" height="15" fill="rgb(232,8,23)" fg:x="257" fg:w="119"/><text x="21.1273%" y="591.50">engine::sessio..</text></g><g><title>kernel::model::any_entity_changes (88 samples, 7.15%)</title><rect x="23.3956%" y="565" width="7.1487%" height="15" fill="rgb(216,211,34)" fg:x="288" fg:w="88"/><text x="23.6456%" y="575.50">kernel::mo..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (26 samples, 2.11%)</title><rect x="28.4322%" y="549" width="2.1121%" height="15" fill="rgb(236,151,0)" fg:x="350" fg:w="26"/><text x="28.6822%" y="559.50">s..</text></g><g><title>serde_json::de::from_trait (26 samples, 2.11%)</title><rect x="28.4322%" y="533" width="2.1121%" height="15" fill="rgb(209,168,3)" fg:x="350" fg:w="26"/><text x="28.6822%" y="543.50">s..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (26 samples, 2.11%)</title><rect x="28.4322%" y="517" width="2.1121%" height="15" fill="rgb(208,129,28)" fg:x="350" fg:w="26"/><text x="28.6822%" y="527.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (26 samples, 2.11%)</title><rect x="28.4322%" y="501" width="2.1121%" height="15" fill="rgb(229,78,22)" fg:x="350" fg:w="26"/><text x="28.6822%" y="511.50">&lt;..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4630%" y="485" width="0.0812%" height="15" fill="rgb(228,187,13)" fg:x="375" fg:w="1"/><text x="30.7130%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4630%" y="469" width="0.0812%" height="15" fill="rgb(240,119,24)" fg:x="375" fg:w="1"/><text x="30.7130%" y="479.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="30.5443%" y="645" width="0.0812%" height="15" fill="rgb(209,194,42)" fg:x="376" fg:w="1"/><text x="30.7943%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="30.6255%" y="645" width="0.0812%" height="15" fill="rgb(247,200,46)" fg:x="377" fg:w="1"/><text x="30.8755%" y="655.50"></text></g><g><title>engine::session::Session::close (130 samples, 10.56%)</title><rect x="20.3087%" y="661" width="10.5605%" height="15" fill="rgb(218,76,16)" fg:x="250" fg:w="130"/><text x="20.5587%" y="671.50">engine::session..</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="30.7067%" y="645" width="0.1625%" height="15" fill="rgb(225,21,48)" fg:x="378" fg:w="2"/><text x="30.9567%" y="655.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="30.7067%" y="629" width="0.1625%" height="15" fill="rgb(239,223,50)" fg:x="378" fg:w="2"/><text x="30.9567%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="30.7067%" y="613" width="0.1625%" height="15" fill="rgb(244,45,21)" fg:x="378" fg:w="2"/><text x="30.9567%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="30.7067%" y="597" width="0.1625%" height="15" fill="rgb(232,33,43)" fg:x="378" fg:w="2"/><text x="30.9567%" y="607.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="30.7067%" y="581" width="0.1625%" height="15" fill="rgb(209,8,3)" fg:x="378" fg:w="2"/><text x="30.9567%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="31.0317%" y="533" width="0.0812%" height="15" fill="rgb(214,25,53)" fg:x="382" fg:w="1"/><text x="31.2817%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.0317%" y="517" width="0.0812%" height="15" fill="rgb(254,186,54)" fg:x="382" fg:w="1"/><text x="31.2817%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.0317%" y="501" width="0.0812%" height="15" fill="rgb(208,174,49)" fg:x="382" fg:w="1"/><text x="31.2817%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.0317%" y="485" width="0.0812%" height="15" fill="rgb(233,191,51)" fg:x="382" fg:w="1"/><text x="31.2817%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="31.0317%" y="469" width="0.0812%" height="15" fill="rgb(222,134,10)" fg:x="382" fg:w="1"/><text x="31.2817%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="31.0317%" y="453" width="0.0812%" height="15" fill="rgb(230,226,20)" fg:x="382" fg:w="1"/><text x="31.2817%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="31.0317%" y="437" width="0.0812%" height="15" fill="rgb(251,111,25)" fg:x="382" fg:w="1"/><text x="31.2817%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="31.0317%" y="421" width="0.0812%" height="15" fill="rgb(224,40,46)" fg:x="382" fg:w="1"/><text x="31.2817%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.0317%" y="405" width="0.0812%" height="15" fill="rgb(236,108,47)" fg:x="382" fg:w="1"/><text x="31.2817%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="31.0317%" y="389" width="0.0812%" height="15" fill="rgb(234,93,0)" fg:x="382" fg:w="1"/><text x="31.2817%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="31.0317%" y="373" width="0.0812%" height="15" fill="rgb(224,213,32)" fg:x="382" fg:w="1"/><text x="31.2817%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="31.0317%" y="357" width="0.0812%" height="15" fill="rgb(251,11,48)" fg:x="382" fg:w="1"/><text x="31.2817%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="31.0317%" y="341" width="0.0812%" height="15" fill="rgb(236,173,5)" fg:x="382" fg:w="1"/><text x="31.2817%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="31.0317%" y="325" width="0.0812%" height="15" fill="rgb(230,95,12)" fg:x="382" fg:w="1"/><text x="31.2817%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.0317%" y="309" width="0.0812%" height="15" fill="rgb(232,209,1)" fg:x="382" fg:w="1"/><text x="31.2817%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="31.1942%" y="469" width="0.0812%" height="15" fill="rgb(232,6,1)" fg:x="384" fg:w="1"/><text x="31.4442%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="31.1942%" y="453" width="0.0812%" height="15" fill="rgb(210,224,50)" fg:x="384" fg:w="1"/><text x="31.4442%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="31.1942%" y="437" width="0.0812%" height="15" fill="rgb(228,127,35)" fg:x="384" fg:w="1"/><text x="31.4442%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="31.1942%" y="421" width="0.0812%" height="15" fill="rgb(245,102,45)" fg:x="384" fg:w="1"/><text x="31.4442%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.1942%" y="405" width="0.0812%" height="15" fill="rgb(214,1,49)" fg:x="384" fg:w="1"/><text x="31.4442%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="31.2754%" y="229" width="0.0812%" height="15" fill="rgb(226,163,40)" fg:x="385" fg:w="1"/><text x="31.5254%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.2754%" y="213" width="0.0812%" height="15" fill="rgb(239,212,28)" fg:x="385" fg:w="1"/><text x="31.5254%" y="223.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="31.2754%" y="197" width="0.0812%" height="15" fill="rgb(220,20,13)" fg:x="385" fg:w="1"/><text x="31.5254%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.2754%" y="277" width="0.1625%" height="15" fill="rgb(210,164,35)" fg:x="385" fg:w="2"/><text x="31.5254%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="31.2754%" y="261" width="0.1625%" height="15" fill="rgb(248,109,41)" fg:x="385" fg:w="2"/><text x="31.5254%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="31.2754%" y="245" width="0.1625%" height="15" fill="rgb(238,23,50)" fg:x="385" fg:w="2"/><text x="31.5254%" y="255.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="31.3566%" y="229" width="0.0812%" height="15" fill="rgb(211,48,49)" fg:x="386" fg:w="1"/><text x="31.6066%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.3566%" y="213" width="0.0812%" height="15" fill="rgb(223,36,21)" fg:x="386" fg:w="1"/><text x="31.6066%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.2754%" y="373" width="0.2437%" height="15" fill="rgb(207,123,46)" fg:x="385" fg:w="3"/><text x="31.5254%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="31.2754%" y="357" width="0.2437%" height="15" fill="rgb(240,218,32)" fg:x="385" fg:w="3"/><text x="31.5254%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (3 samples, 0.24%)</title><rect x="31.2754%" y="341" width="0.2437%" height="15" fill="rgb(252,5,43)" fg:x="385" fg:w="3"/><text x="31.5254%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.2754%" y="325" width="0.2437%" height="15" fill="rgb(252,84,19)" fg:x="385" fg:w="3"/><text x="31.5254%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="31.2754%" y="309" width="0.2437%" height="15" fill="rgb(243,152,39)" fg:x="385" fg:w="3"/><text x="31.5254%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="31.2754%" y="293" width="0.2437%" height="15" fill="rgb(234,160,15)" fg:x="385" fg:w="3"/><text x="31.5254%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="31.4379%" y="277" width="0.0812%" height="15" fill="rgb(237,34,20)" fg:x="387" fg:w="1"/><text x="31.6879%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="31.2754%" y="421" width="0.3249%" height="15" fill="rgb(229,97,13)" fg:x="385" fg:w="4"/><text x="31.5254%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="31.2754%" y="405" width="0.3249%" height="15" fill="rgb(234,71,50)" fg:x="385" fg:w="4"/><text x="31.5254%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="31.2754%" y="389" width="0.3249%" height="15" fill="rgb(253,155,4)" fg:x="385" fg:w="4"/><text x="31.5254%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="31.5191%" y="373" width="0.0812%" height="15" fill="rgb(222,185,37)" fg:x="388" fg:w="1"/><text x="31.7691%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="31.5191%" y="357" width="0.0812%" height="15" fill="rgb(251,177,13)" fg:x="388" fg:w="1"/><text x="31.7691%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="31.5191%" y="341" width="0.0812%" height="15" fill="rgb(250,179,40)" fg:x="388" fg:w="1"/><text x="31.7691%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="31.5191%" y="325" width="0.0812%" height="15" fill="rgb(242,44,2)" fg:x="388" fg:w="1"/><text x="31.7691%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="31.5191%" y="309" width="0.0812%" height="15" fill="rgb(216,177,13)" fg:x="388" fg:w="1"/><text x="31.7691%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="31.5191%" y="293" width="0.0812%" height="15" fill="rgb(216,106,43)" fg:x="388" fg:w="1"/><text x="31.7691%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.5191%" y="277" width="0.0812%" height="15" fill="rgb(216,183,2)" fg:x="388" fg:w="1"/><text x="31.7691%" y="287.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="31.2754%" y="469" width="0.4874%" height="15" fill="rgb(249,75,3)" fg:x="385" fg:w="6"/><text x="31.5254%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="31.2754%" y="453" width="0.4874%" height="15" fill="rgb(219,67,39)" fg:x="385" fg:w="6"/><text x="31.5254%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="31.2754%" y="437" width="0.4874%" height="15" fill="rgb(253,228,2)" fg:x="385" fg:w="6"/><text x="31.5254%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="31.6003%" y="421" width="0.1625%" height="15" fill="rgb(235,138,27)" fg:x="389" fg:w="2"/><text x="31.8503%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="31.6003%" y="405" width="0.1625%" height="15" fill="rgb(236,97,51)" fg:x="389" fg:w="2"/><text x="31.8503%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="31.6003%" y="389" width="0.1625%" height="15" fill="rgb(240,80,30)" fg:x="389" fg:w="2"/><text x="31.8503%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="31.6816%" y="373" width="0.0812%" height="15" fill="rgb(230,178,19)" fg:x="390" fg:w="1"/><text x="31.9316%" y="383.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (11 samples, 0.89%)</title><rect x="31.0317%" y="565" width="0.8936%" height="15" fill="rgb(210,190,27)" fg:x="382" fg:w="11"/><text x="31.2817%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (11 samples, 0.89%)</title><rect x="31.0317%" y="549" width="0.8936%" height="15" fill="rgb(222,107,31)" fg:x="382" fg:w="11"/><text x="31.2817%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (10 samples, 0.81%)</title><rect x="31.1129%" y="533" width="0.8123%" height="15" fill="rgb(216,127,34)" fg:x="383" fg:w="10"/><text x="31.3629%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (10 samples, 0.81%)</title><rect x="31.1129%" y="517" width="0.8123%" height="15" fill="rgb(234,116,52)" fg:x="383" fg:w="10"/><text x="31.3629%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (10 samples, 0.81%)</title><rect x="31.1129%" y="501" width="0.8123%" height="15" fill="rgb(222,124,15)" fg:x="383" fg:w="10"/><text x="31.3629%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="31.1942%" y="485" width="0.7311%" height="15" fill="rgb(231,179,28)" fg:x="384" fg:w="9"/><text x="31.4442%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="31.7628%" y="469" width="0.1625%" height="15" fill="rgb(226,93,45)" fg:x="391" fg:w="2"/><text x="32.0128%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="31.7628%" y="453" width="0.1625%" height="15" fill="rgb(215,8,51)" fg:x="391" fg:w="2"/><text x="32.0128%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.7628%" y="437" width="0.1625%" height="15" fill="rgb(223,106,5)" fg:x="391" fg:w="2"/><text x="32.0128%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="31.7628%" y="421" width="0.1625%" height="15" fill="rgb(250,191,5)" fg:x="391" fg:w="2"/><text x="32.0128%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="31.7628%" y="405" width="0.1625%" height="15" fill="rgb(242,132,44)" fg:x="391" fg:w="2"/><text x="32.0128%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="31.8440%" y="389" width="0.0812%" height="15" fill="rgb(251,152,29)" fg:x="392" fg:w="1"/><text x="32.0940%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="31.8440%" y="373" width="0.0812%" height="15" fill="rgb(218,179,5)" fg:x="392" fg:w="1"/><text x="32.0940%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="31.9253%" y="389" width="0.0812%" height="15" fill="rgb(227,67,19)" fg:x="393" fg:w="1"/><text x="32.1753%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1690%" y="357" width="0.0812%" height="15" fill="rgb(233,119,31)" fg:x="396" fg:w="1"/><text x="32.4190%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4127%" y="325" width="0.0812%" height="15" fill="rgb(241,120,22)" fg:x="399" fg:w="1"/><text x="32.6627%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (6 samples, 0.49%)</title><rect x="32.2502%" y="357" width="0.4874%" height="15" fill="rgb(224,102,30)" fg:x="397" fg:w="6"/><text x="32.5002%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="32.3314%" y="341" width="0.4062%" height="15" fill="rgb(210,164,37)" fg:x="398" fg:w="5"/><text x="32.5814%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.24%)</title><rect x="32.4939%" y="325" width="0.2437%" height="15" fill="rgb(226,191,16)" fg:x="400" fg:w="3"/><text x="32.7439%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="32.5751%" y="309" width="0.1625%" height="15" fill="rgb(214,40,45)" fg:x="401" fg:w="2"/><text x="32.8251%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.6564%" y="293" width="0.0812%" height="15" fill="rgb(244,29,26)" fg:x="402" fg:w="1"/><text x="32.9064%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7376%" y="309" width="0.0812%" height="15" fill="rgb(216,16,5)" fg:x="403" fg:w="1"/><text x="32.9876%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (12 samples, 0.97%)</title><rect x="31.9253%" y="405" width="0.9748%" height="15" fill="rgb(249,76,35)" fg:x="393" fg:w="12"/><text x="32.1753%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (11 samples, 0.89%)</title><rect x="32.0065%" y="389" width="0.8936%" height="15" fill="rgb(207,11,44)" fg:x="394" fg:w="11"/><text x="32.2565%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="32.0877%" y="373" width="0.8123%" height="15" fill="rgb(228,190,49)" fg:x="395" fg:w="10"/><text x="32.3377%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="32.7376%" y="357" width="0.1625%" height="15" fill="rgb(214,173,12)" fg:x="403" fg:w="2"/><text x="32.9876%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="32.7376%" y="341" width="0.1625%" height="15" fill="rgb(218,26,35)" fg:x="403" fg:w="2"/><text x="32.9876%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="32.7376%" y="325" width="0.1625%" height="15" fill="rgb(220,200,19)" fg:x="403" fg:w="2"/><text x="32.9876%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.8188%" y="309" width="0.0812%" height="15" fill="rgb(239,95,49)" fg:x="404" fg:w="1"/><text x="33.0688%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9001%" y="389" width="0.0812%" height="15" fill="rgb(235,85,53)" fg:x="405" fg:w="1"/><text x="33.1501%" y="399.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (14 samples, 1.14%)</title><rect x="31.9253%" y="421" width="1.1373%" height="15" fill="rgb(233,133,31)" fg:x="393" fg:w="14"/><text x="32.1753%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="32.9001%" y="405" width="0.1625%" height="15" fill="rgb(218,25,20)" fg:x="405" fg:w="2"/><text x="33.1501%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="32.9813%" y="389" width="0.0812%" height="15" fill="rgb(252,210,38)" fg:x="406" fg:w="1"/><text x="33.2313%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="33.2250%" y="373" width="0.0812%" height="15" fill="rgb(242,134,21)" fg:x="409" fg:w="1"/><text x="33.4750%" y="383.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.3063%" y="309" width="0.0812%" height="15" fill="rgb(213,28,48)" fg:x="410" fg:w="1"/><text x="33.5563%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.3063%" y="293" width="0.0812%" height="15" fill="rgb(250,196,2)" fg:x="410" fg:w="1"/><text x="33.5563%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="33.2250%" y="389" width="0.3249%" height="15" fill="rgb(227,5,17)" fg:x="409" fg:w="4"/><text x="33.4750%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="33.3063%" y="373" width="0.2437%" height="15" fill="rgb(221,226,24)" fg:x="410" fg:w="3"/><text x="33.5563%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.3063%" y="357" width="0.2437%" height="15" fill="rgb(211,5,48)" fg:x="410" fg:w="3"/><text x="33.5563%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="33.3063%" y="341" width="0.2437%" height="15" fill="rgb(219,150,6)" fg:x="410" fg:w="3"/><text x="33.5563%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="33.3063%" y="325" width="0.2437%" height="15" fill="rgb(251,46,16)" fg:x="410" fg:w="3"/><text x="33.5563%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="33.3875%" y="309" width="0.1625%" height="15" fill="rgb(220,204,40)" fg:x="411" fg:w="2"/><text x="33.6375%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="33.3875%" y="293" width="0.1625%" height="15" fill="rgb(211,85,2)" fg:x="411" fg:w="2"/><text x="33.6375%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="33.4687%" y="277" width="0.0812%" height="15" fill="rgb(229,17,7)" fg:x="412" fg:w="1"/><text x="33.7187%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="33.6312%" y="309" width="0.1625%" height="15" fill="rgb(239,72,28)" fg:x="414" fg:w="2"/><text x="33.8812%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="33.6312%" y="293" width="0.1625%" height="15" fill="rgb(230,47,54)" fg:x="414" fg:w="2"/><text x="33.8812%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="33.6312%" y="277" width="0.1625%" height="15" fill="rgb(214,50,8)" fg:x="414" fg:w="2"/><text x="33.8812%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="33.6312%" y="261" width="0.1625%" height="15" fill="rgb(216,198,43)" fg:x="414" fg:w="2"/><text x="33.8812%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="33.6312%" y="245" width="0.1625%" height="15" fill="rgb(234,20,35)" fg:x="414" fg:w="2"/><text x="33.8812%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="33.6312%" y="229" width="0.1625%" height="15" fill="rgb(254,45,19)" fg:x="414" fg:w="2"/><text x="33.8812%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="33.6312%" y="213" width="0.1625%" height="15" fill="rgb(219,14,44)" fg:x="414" fg:w="2"/><text x="33.8812%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="33.6312%" y="197" width="0.1625%" height="15" fill="rgb(217,220,26)" fg:x="414" fg:w="2"/><text x="33.8812%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="33.6312%" y="181" width="0.1625%" height="15" fill="rgb(213,158,28)" fg:x="414" fg:w="2"/><text x="33.8812%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="33.6312%" y="165" width="0.1625%" height="15" fill="rgb(252,51,52)" fg:x="414" fg:w="2"/><text x="33.8812%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="33.6312%" y="149" width="0.1625%" height="15" fill="rgb(246,89,16)" fg:x="414" fg:w="2"/><text x="33.8812%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="33.6312%" y="133" width="0.1625%" height="15" fill="rgb(216,158,49)" fg:x="414" fg:w="2"/><text x="33.8812%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="33.6312%" y="117" width="0.1625%" height="15" fill="rgb(236,107,19)" fg:x="414" fg:w="2"/><text x="33.8812%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.6312%" y="341" width="0.2437%" height="15" fill="rgb(228,185,30)" fg:x="414" fg:w="3"/><text x="33.8812%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="33.6312%" y="325" width="0.2437%" height="15" fill="rgb(246,134,8)" fg:x="414" fg:w="3"/><text x="33.8812%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.7937%" y="309" width="0.0812%" height="15" fill="rgb(214,143,50)" fg:x="416" fg:w="1"/><text x="34.0437%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="33.7937%" y="293" width="0.0812%" height="15" fill="rgb(228,75,8)" fg:x="416" fg:w="1"/><text x="34.0437%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="33.7937%" y="277" width="0.0812%" height="15" fill="rgb(207,175,4)" fg:x="416" fg:w="1"/><text x="34.0437%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="33.7937%" y="261" width="0.0812%" height="15" fill="rgb(205,108,24)" fg:x="416" fg:w="1"/><text x="34.0437%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="33.7937%" y="245" width="0.0812%" height="15" fill="rgb(244,120,49)" fg:x="416" fg:w="1"/><text x="34.0437%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="33.7937%" y="229" width="0.0812%" height="15" fill="rgb(223,47,38)" fg:x="416" fg:w="1"/><text x="34.0437%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="33.7937%" y="213" width="0.0812%" height="15" fill="rgb(229,179,11)" fg:x="416" fg:w="1"/><text x="34.0437%" y="223.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="33.8749%" y="341" width="0.1625%" height="15" fill="rgb(231,122,1)" fg:x="417" fg:w="2"/><text x="34.1249%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="33.9561%" y="325" width="0.0812%" height="15" fill="rgb(245,119,9)" fg:x="418" fg:w="1"/><text x="34.2061%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (9 samples, 0.73%)</title><rect x="33.5500%" y="389" width="0.7311%" height="15" fill="rgb(241,163,25)" fg:x="413" fg:w="9"/><text x="33.8000%" y="399.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="33.6312%" y="373" width="0.6499%" height="15" fill="rgb(217,214,3)" fg:x="414" fg:w="8"/><text x="33.8812%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.65%)</title><rect x="33.6312%" y="357" width="0.6499%" height="15" fill="rgb(240,86,28)" fg:x="414" fg:w="8"/><text x="33.8812%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="34.0374%" y="341" width="0.2437%" height="15" fill="rgb(215,47,9)" fg:x="419" fg:w="3"/><text x="34.2874%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="34.0374%" y="325" width="0.2437%" height="15" fill="rgb(252,25,45)" fg:x="419" fg:w="3"/><text x="34.2874%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="34.1186%" y="309" width="0.1625%" height="15" fill="rgb(251,164,9)" fg:x="420" fg:w="2"/><text x="34.3686%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.1186%" y="293" width="0.1625%" height="15" fill="rgb(233,194,0)" fg:x="420" fg:w="2"/><text x="34.3686%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="34.1186%" y="277" width="0.1625%" height="15" fill="rgb(249,111,24)" fg:x="420" fg:w="2"/><text x="34.3686%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="34.1186%" y="261" width="0.1625%" height="15" fill="rgb(250,223,3)" fg:x="420" fg:w="2"/><text x="34.3686%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1998%" y="245" width="0.0812%" height="15" fill="rgb(236,178,37)" fg:x="421" fg:w="1"/><text x="34.4498%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.2811%" y="373" width="0.0812%" height="15" fill="rgb(241,158,50)" fg:x="422" fg:w="1"/><text x="34.5311%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.2811%" y="357" width="0.0812%" height="15" fill="rgb(213,121,41)" fg:x="422" fg:w="1"/><text x="34.5311%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.2811%" y="341" width="0.0812%" height="15" fill="rgb(240,92,3)" fg:x="422" fg:w="1"/><text x="34.5311%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.2811%" y="325" width="0.0812%" height="15" fill="rgb(205,123,3)" fg:x="422" fg:w="1"/><text x="34.5311%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.2811%" y="309" width="0.0812%" height="15" fill="rgb(205,97,47)" fg:x="422" fg:w="1"/><text x="34.5311%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.2811%" y="293" width="0.0812%" height="15" fill="rgb(247,152,14)" fg:x="422" fg:w="1"/><text x="34.5311%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.2811%" y="277" width="0.0812%" height="15" fill="rgb(248,195,53)" fg:x="422" fg:w="1"/><text x="34.5311%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.2811%" y="261" width="0.0812%" height="15" fill="rgb(226,201,16)" fg:x="422" fg:w="1"/><text x="34.5311%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.2811%" y="245" width="0.0812%" height="15" fill="rgb(205,98,0)" fg:x="422" fg:w="1"/><text x="34.5311%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.2811%" y="229" width="0.0812%" height="15" fill="rgb(214,191,48)" fg:x="422" fg:w="1"/><text x="34.5311%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.2811%" y="213" width="0.0812%" height="15" fill="rgb(237,112,39)" fg:x="422" fg:w="1"/><text x="34.5311%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.2811%" y="197" width="0.0812%" height="15" fill="rgb(247,203,27)" fg:x="422" fg:w="1"/><text x="34.5311%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (2 samples, 0.16%)</title><rect x="34.3623%" y="373" width="0.1625%" height="15" fill="rgb(235,124,28)" fg:x="423" fg:w="2"/><text x="34.6123%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.4435%" y="357" width="0.0812%" height="15" fill="rgb(208,207,46)" fg:x="424" fg:w="1"/><text x="34.6935%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="34.5248%" y="373" width="0.0812%" height="15" fill="rgb(234,176,4)" fg:x="425" fg:w="1"/><text x="34.7748%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="34.6872%" y="309" width="0.2437%" height="15" fill="rgb(230,133,28)" fg:x="427" fg:w="3"/><text x="34.9372%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.8497%" y="293" width="0.0812%" height="15" fill="rgb(211,137,40)" fg:x="429" fg:w="1"/><text x="35.0997%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.8497%" y="277" width="0.0812%" height="15" fill="rgb(254,35,13)" fg:x="429" fg:w="1"/><text x="35.0997%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.8497%" y="261" width="0.0812%" height="15" fill="rgb(225,49,51)" fg:x="429" fg:w="1"/><text x="35.0997%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.8497%" y="245" width="0.0812%" height="15" fill="rgb(251,10,15)" fg:x="429" fg:w="1"/><text x="35.0997%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.8497%" y="229" width="0.0812%" height="15" fill="rgb(228,207,15)" fg:x="429" fg:w="1"/><text x="35.0997%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.8497%" y="213" width="0.0812%" height="15" fill="rgb(241,99,19)" fg:x="429" fg:w="1"/><text x="35.0997%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.8497%" y="197" width="0.0812%" height="15" fill="rgb(207,104,49)" fg:x="429" fg:w="1"/><text x="35.0997%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.8497%" y="181" width="0.0812%" height="15" fill="rgb(234,99,18)" fg:x="429" fg:w="1"/><text x="35.0997%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.8497%" y="165" width="0.0812%" height="15" fill="rgb(213,191,49)" fg:x="429" fg:w="1"/><text x="35.0997%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.8497%" y="149" width="0.0812%" height="15" fill="rgb(210,226,19)" fg:x="429" fg:w="1"/><text x="35.0997%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.8497%" y="133" width="0.0812%" height="15" fill="rgb(229,97,18)" fg:x="429" fg:w="1"/><text x="35.0997%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.8497%" y="117" width="0.0812%" height="15" fill="rgb(211,167,15)" fg:x="429" fg:w="1"/><text x="35.0997%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="34.6060%" y="341" width="0.4062%" height="15" fill="rgb(210,169,34)" fg:x="426" fg:w="5"/><text x="34.8560%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="34.6060%" y="325" width="0.4062%" height="15" fill="rgb(241,121,31)" fg:x="426" fg:w="5"/><text x="34.8560%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.9310%" y="309" width="0.0812%" height="15" fill="rgb(232,40,11)" fg:x="430" fg:w="1"/><text x="35.1810%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.9310%" y="293" width="0.0812%" height="15" fill="rgb(205,86,26)" fg:x="430" fg:w="1"/><text x="35.1810%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.9310%" y="277" width="0.0812%" height="15" fill="rgb(231,126,28)" fg:x="430" fg:w="1"/><text x="35.1810%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.9310%" y="261" width="0.0812%" height="15" fill="rgb(219,221,18)" fg:x="430" fg:w="1"/><text x="35.1810%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.9310%" y="245" width="0.0812%" height="15" fill="rgb(211,40,0)" fg:x="430" fg:w="1"/><text x="35.1810%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.9310%" y="229" width="0.0812%" height="15" fill="rgb(239,85,43)" fg:x="430" fg:w="1"/><text x="35.1810%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.9310%" y="213" width="0.0812%" height="15" fill="rgb(231,55,21)" fg:x="430" fg:w="1"/><text x="35.1810%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.9310%" y="197" width="0.0812%" height="15" fill="rgb(225,184,43)" fg:x="430" fg:w="1"/><text x="35.1810%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.9310%" y="181" width="0.0812%" height="15" fill="rgb(251,158,41)" fg:x="430" fg:w="1"/><text x="35.1810%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.9310%" y="165" width="0.0812%" height="15" fill="rgb(234,159,37)" fg:x="430" fg:w="1"/><text x="35.1810%" y="175.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.9310%" y="149" width="0.0812%" height="15" fill="rgb(216,204,22)" fg:x="430" fg:w="1"/><text x="35.1810%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.9310%" y="133" width="0.0812%" height="15" fill="rgb(214,17,3)" fg:x="430" fg:w="1"/><text x="35.1810%" y="143.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.0934%" y="261" width="0.0812%" height="15" fill="rgb(212,111,17)" fg:x="432" fg:w="1"/><text x="35.3434%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (12 samples, 0.97%)</title><rect x="34.2811%" y="389" width="0.9748%" height="15" fill="rgb(221,157,24)" fg:x="422" fg:w="12"/><text x="34.5311%" y="399.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.65%)</title><rect x="34.6060%" y="373" width="0.6499%" height="15" fill="rgb(252,16,13)" fg:x="426" fg:w="8"/><text x="34.8560%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.65%)</title><rect x="34.6060%" y="357" width="0.6499%" height="15" fill="rgb(221,62,2)" fg:x="426" fg:w="8"/><text x="34.8560%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="35.0122%" y="341" width="0.2437%" height="15" fill="rgb(247,87,22)" fg:x="431" fg:w="3"/><text x="35.2622%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.0122%" y="325" width="0.2437%" height="15" fill="rgb(215,73,9)" fg:x="431" fg:w="3"/><text x="35.2622%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="35.0934%" y="309" width="0.1625%" height="15" fill="rgb(207,175,33)" fg:x="432" fg:w="2"/><text x="35.3434%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.0934%" y="293" width="0.1625%" height="15" fill="rgb(243,129,54)" fg:x="432" fg:w="2"/><text x="35.3434%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.0934%" y="277" width="0.1625%" height="15" fill="rgb(227,119,45)" fg:x="432" fg:w="2"/><text x="35.3434%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="35.1747%" y="261" width="0.0812%" height="15" fill="rgb(205,109,36)" fg:x="433" fg:w="1"/><text x="35.4247%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="35.2559%" y="357" width="0.0812%" height="15" fill="rgb(205,6,39)" fg:x="434" fg:w="1"/><text x="35.5059%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="35.3371%" y="357" width="0.0812%" height="15" fill="rgb(221,32,16)" fg:x="435" fg:w="1"/><text x="35.5871%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="35.4184%" y="357" width="0.0812%" height="15" fill="rgb(228,144,50)" fg:x="436" fg:w="1"/><text x="35.6684%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.4184%" y="341" width="0.0812%" height="15" fill="rgb(229,201,53)" fg:x="436" fg:w="1"/><text x="35.6684%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.5808%" y="293" width="0.0812%" height="15" fill="rgb(249,153,27)" fg:x="438" fg:w="1"/><text x="35.8308%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.5808%" y="277" width="0.0812%" height="15" fill="rgb(227,106,25)" fg:x="438" fg:w="1"/><text x="35.8308%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.5808%" y="261" width="0.0812%" height="15" fill="rgb(230,65,29)" fg:x="438" fg:w="1"/><text x="35.8308%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.5808%" y="245" width="0.0812%" height="15" fill="rgb(221,57,46)" fg:x="438" fg:w="1"/><text x="35.8308%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.5808%" y="229" width="0.0812%" height="15" fill="rgb(229,161,17)" fg:x="438" fg:w="1"/><text x="35.8308%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.5808%" y="213" width="0.0812%" height="15" fill="rgb(222,213,11)" fg:x="438" fg:w="1"/><text x="35.8308%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.5808%" y="197" width="0.0812%" height="15" fill="rgb(235,35,13)" fg:x="438" fg:w="1"/><text x="35.8308%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.5808%" y="181" width="0.0812%" height="15" fill="rgb(233,158,34)" fg:x="438" fg:w="1"/><text x="35.8308%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.5808%" y="165" width="0.0812%" height="15" fill="rgb(215,151,48)" fg:x="438" fg:w="1"/><text x="35.8308%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.5808%" y="149" width="0.0812%" height="15" fill="rgb(229,84,14)" fg:x="438" fg:w="1"/><text x="35.8308%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.5808%" y="133" width="0.0812%" height="15" fill="rgb(229,68,14)" fg:x="438" fg:w="1"/><text x="35.8308%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.5808%" y="117" width="0.0812%" height="15" fill="rgb(243,106,26)" fg:x="438" fg:w="1"/><text x="35.8308%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.5808%" y="101" width="0.0812%" height="15" fill="rgb(206,45,38)" fg:x="438" fg:w="1"/><text x="35.8308%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="35.4996%" y="325" width="0.2437%" height="15" fill="rgb(226,6,15)" fg:x="437" fg:w="3"/><text x="35.7496%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="35.4996%" y="309" width="0.2437%" height="15" fill="rgb(232,22,54)" fg:x="437" fg:w="3"/><text x="35.7496%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6621%" y="293" width="0.0812%" height="15" fill="rgb(229,222,32)" fg:x="439" fg:w="1"/><text x="35.9121%" y="303.50"></text></g><g><title>kernel::model::EntityPtr::gid (9 samples, 0.73%)</title><rect x="35.2559%" y="389" width="0.7311%" height="15" fill="rgb(228,62,29)" fg:x="434" fg:w="9"/><text x="35.5059%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (9 samples, 0.73%)</title><rect x="35.2559%" y="373" width="0.7311%" height="15" fill="rgb(251,103,34)" fg:x="434" fg:w="9"/><text x="35.5059%" y="383.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.49%)</title><rect x="35.4996%" y="357" width="0.4874%" height="15" fill="rgb(233,12,30)" fg:x="437" fg:w="6"/><text x="35.7496%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (6 samples, 0.49%)</title><rect x="35.4996%" y="341" width="0.4874%" height="15" fill="rgb(238,52,0)" fg:x="437" fg:w="6"/><text x="35.7496%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="35.7433%" y="325" width="0.2437%" height="15" fill="rgb(223,98,5)" fg:x="440" fg:w="3"/><text x="35.9933%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.7433%" y="309" width="0.2437%" height="15" fill="rgb(228,75,37)" fg:x="440" fg:w="3"/><text x="35.9933%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (3 samples, 0.24%)</title><rect x="35.7433%" y="293" width="0.2437%" height="15" fill="rgb(205,115,49)" fg:x="440" fg:w="3"/><text x="35.9933%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.7433%" y="277" width="0.2437%" height="15" fill="rgb(250,154,43)" fg:x="440" fg:w="3"/><text x="35.9933%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (3 samples, 0.24%)</title><rect x="35.7433%" y="261" width="0.2437%" height="15" fill="rgb(226,43,29)" fg:x="440" fg:w="3"/><text x="35.9933%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.7433%" y="245" width="0.2437%" height="15" fill="rgb(249,228,39)" fg:x="440" fg:w="3"/><text x="35.9933%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="35.9058%" y="229" width="0.0812%" height="15" fill="rgb(216,79,43)" fg:x="442" fg:w="1"/><text x="36.1558%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="35.9870%" y="389" width="0.0812%" height="15" fill="rgb(228,95,12)" fg:x="443" fg:w="1"/><text x="36.2370%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.9870%" y="373" width="0.0812%" height="15" fill="rgb(249,221,15)" fg:x="443" fg:w="1"/><text x="36.2370%" y="383.50"></text></g><g><title>core::fmt::Arguments::estimated_capacity (1 samples, 0.08%)</title><rect x="36.2307%" y="325" width="0.0812%" height="15" fill="rgb(233,34,13)" fg:x="446" fg:w="1"/><text x="36.4807%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="36.2307%" y="309" width="0.0812%" height="15" fill="rgb(214,103,39)" fg:x="446" fg:w="1"/><text x="36.4807%" y="319.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="36.2307%" y="293" width="0.0812%" height="15" fill="rgb(251,126,39)" fg:x="446" fg:w="1"/><text x="36.4807%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="36.2307%" y="277" width="0.0812%" height="15" fill="rgb(214,216,36)" fg:x="446" fg:w="1"/><text x="36.4807%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="36.2307%" y="261" width="0.0812%" height="15" fill="rgb(220,221,8)" fg:x="446" fg:w="1"/><text x="36.4807%" y="271.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (1 samples, 0.08%)</title><rect x="36.2307%" y="245" width="0.0812%" height="15" fill="rgb(240,216,3)" fg:x="446" fg:w="1"/><text x="36.4807%" y="255.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (1 samples, 0.08%)</title><rect x="36.2307%" y="229" width="0.0812%" height="15" fill="rgb(232,218,17)" fg:x="446" fg:w="1"/><text x="36.4807%" y="239.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="36.2307%" y="341" width="0.1625%" height="15" fill="rgb(229,163,45)" fg:x="446" fg:w="2"/><text x="36.4807%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="36.3119%" y="325" width="0.0812%" height="15" fill="rgb(231,110,42)" fg:x="447" fg:w="1"/><text x="36.5619%" y="335.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="36.3119%" y="309" width="0.0812%" height="15" fill="rgb(208,170,48)" fg:x="447" fg:w="1"/><text x="36.5619%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="36.3119%" y="293" width="0.0812%" height="15" fill="rgb(239,116,25)" fg:x="447" fg:w="1"/><text x="36.5619%" y="303.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="36.3932%" y="325" width="0.0812%" height="15" fill="rgb(219,200,50)" fg:x="448" fg:w="1"/><text x="36.6432%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="36.5556%" y="229" width="0.0812%" height="15" fill="rgb(245,200,0)" fg:x="450" fg:w="1"/><text x="36.8056%" y="239.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="36.5556%" y="213" width="0.0812%" height="15" fill="rgb(245,119,33)" fg:x="450" fg:w="1"/><text x="36.8056%" y="223.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="36.5556%" y="197" width="0.0812%" height="15" fill="rgb(231,125,12)" fg:x="450" fg:w="1"/><text x="36.8056%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="36.4744%" y="309" width="0.2437%" height="15" fill="rgb(216,96,41)" fg:x="449" fg:w="3"/><text x="36.7244%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="36.4744%" y="293" width="0.2437%" height="15" fill="rgb(248,43,45)" fg:x="449" fg:w="3"/><text x="36.7244%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="36.4744%" y="277" width="0.2437%" height="15" fill="rgb(217,222,7)" fg:x="449" fg:w="3"/><text x="36.7244%" y="287.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="36.4744%" y="261" width="0.2437%" height="15" fill="rgb(233,28,6)" fg:x="449" fg:w="3"/><text x="36.7244%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="36.4744%" y="245" width="0.2437%" height="15" fill="rgb(231,218,15)" fg:x="449" fg:w="3"/><text x="36.7244%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="36.6369%" y="229" width="0.0812%" height="15" fill="rgb(226,171,48)" fg:x="451" fg:w="1"/><text x="36.8869%" y="239.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="36.6369%" y="213" width="0.0812%" height="15" fill="rgb(235,201,9)" fg:x="451" fg:w="1"/><text x="36.8869%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="36.7181%" y="293" width="0.0812%" height="15" fill="rgb(217,80,15)" fg:x="452" fg:w="1"/><text x="36.9681%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="36.7181%" y="277" width="0.0812%" height="15" fill="rgb(219,152,8)" fg:x="452" fg:w="1"/><text x="36.9681%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="36.7994%" y="261" width="0.0812%" height="15" fill="rgb(243,107,38)" fg:x="453" fg:w="1"/><text x="37.0494%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.7994%" y="245" width="0.0812%" height="15" fill="rgb(231,17,5)" fg:x="453" fg:w="1"/><text x="37.0494%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="36.8806%" y="261" width="0.2437%" height="15" fill="rgb(209,25,54)" fg:x="454" fg:w="3"/><text x="37.1306%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="36.8806%" y="245" width="0.2437%" height="15" fill="rgb(219,0,2)" fg:x="454" fg:w="3"/><text x="37.1306%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="36.9618%" y="229" width="0.1625%" height="15" fill="rgb(246,9,5)" fg:x="455" fg:w="2"/><text x="37.2118%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="37.0431%" y="213" width="0.0812%" height="15" fill="rgb(226,159,4)" fg:x="456" fg:w="1"/><text x="37.2931%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.0431%" y="197" width="0.0812%" height="15" fill="rgb(219,175,34)" fg:x="456" fg:w="1"/><text x="37.2931%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="37.0431%" y="181" width="0.0812%" height="15" fill="rgb(236,10,46)" fg:x="456" fg:w="1"/><text x="37.2931%" y="191.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="37.1243%" y="261" width="0.0812%" height="15" fill="rgb(240,211,16)" fg:x="457" fg:w="1"/><text x="37.3743%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="37.1243%" y="245" width="0.0812%" height="15" fill="rgb(205,3,43)" fg:x="457" fg:w="1"/><text x="37.3743%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="37.1243%" y="229" width="0.0812%" height="15" fill="rgb(245,7,22)" fg:x="457" fg:w="1"/><text x="37.3743%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1243%" y="213" width="0.0812%" height="15" fill="rgb(239,132,32)" fg:x="457" fg:w="1"/><text x="37.3743%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (13 samples, 1.06%)</title><rect x="37.2868%" y="245" width="1.0561%" height="15" fill="rgb(228,202,34)" fg:x="459" fg:w="13"/><text x="37.5368%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.06%)</title><rect x="37.2868%" y="229" width="1.0561%" height="15" fill="rgb(254,200,22)" fg:x="459" fg:w="13"/><text x="37.5368%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.2616%" y="213" width="0.0812%" height="15" fill="rgb(219,10,39)" fg:x="471" fg:w="1"/><text x="38.5116%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="38.5053%" y="229" width="0.0812%" height="15" fill="rgb(226,210,39)" fg:x="474" fg:w="1"/><text x="38.7553%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (4 samples, 0.32%)</title><rect x="38.5865%" y="229" width="0.3249%" height="15" fill="rgb(208,219,16)" fg:x="475" fg:w="4"/><text x="38.8365%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.65%)</title><rect x="38.3428%" y="245" width="0.6499%" height="15" fill="rgb(216,158,51)" fg:x="472" fg:w="8"/><text x="38.5928%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="38.9115%" y="229" width="0.0812%" height="15" fill="rgb(233,14,44)" fg:x="479" fg:w="1"/><text x="39.1615%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.9115%" y="213" width="0.0812%" height="15" fill="rgb(237,97,39)" fg:x="479" fg:w="1"/><text x="39.1615%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="38.9115%" y="197" width="0.0812%" height="15" fill="rgb(218,198,43)" fg:x="479" fg:w="1"/><text x="39.1615%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="38.9927%" y="245" width="0.0812%" height="15" fill="rgb(231,104,20)" fg:x="480" fg:w="1"/><text x="39.2427%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="38.9927%" y="229" width="0.0812%" height="15" fill="rgb(254,36,13)" fg:x="480" fg:w="1"/><text x="39.2427%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="38.9927%" y="213" width="0.0812%" height="15" fill="rgb(248,14,50)" fg:x="480" fg:w="1"/><text x="39.2427%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="39.0739%" y="197" width="0.0812%" height="15" fill="rgb(217,107,29)" fg:x="481" fg:w="1"/><text x="39.3239%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.0739%" y="181" width="0.0812%" height="15" fill="rgb(251,169,33)" fg:x="481" fg:w="1"/><text x="39.3239%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.0739%" y="165" width="0.0812%" height="15" fill="rgb(217,108,32)" fg:x="481" fg:w="1"/><text x="39.3239%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.0739%" y="149" width="0.0812%" height="15" fill="rgb(219,66,42)" fg:x="481" fg:w="1"/><text x="39.3239%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.3176%" y="181" width="0.0812%" height="15" fill="rgb(206,180,7)" fg:x="484" fg:w="1"/><text x="39.5676%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.4801%" y="133" width="0.0812%" height="15" fill="rgb(208,226,31)" fg:x="486" fg:w="1"/><text x="39.7301%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="39.3989%" y="181" width="0.2437%" height="15" fill="rgb(218,26,49)" fg:x="485" fg:w="3"/><text x="39.6489%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="39.3989%" y="165" width="0.2437%" height="15" fill="rgb(233,197,48)" fg:x="485" fg:w="3"/><text x="39.6489%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="39.3989%" y="149" width="0.2437%" height="15" fill="rgb(252,181,51)" fg:x="485" fg:w="3"/><text x="39.6489%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="39.5613%" y="133" width="0.0812%" height="15" fill="rgb(253,90,19)" fg:x="487" fg:w="1"/><text x="39.8113%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.5613%" y="117" width="0.0812%" height="15" fill="rgb(215,171,30)" fg:x="487" fg:w="1"/><text x="39.8113%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.5613%" y="101" width="0.0812%" height="15" fill="rgb(214,222,9)" fg:x="487" fg:w="1"/><text x="39.8113%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="39.5613%" y="85" width="0.0812%" height="15" fill="rgb(223,3,22)" fg:x="487" fg:w="1"/><text x="39.8113%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.6426%" y="149" width="0.0812%" height="15" fill="rgb(225,196,46)" fg:x="488" fg:w="1"/><text x="39.8926%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (2 samples, 0.16%)</title><rect x="39.6426%" y="181" width="0.1625%" height="15" fill="rgb(209,110,37)" fg:x="488" fg:w="2"/><text x="39.8926%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="39.6426%" y="165" width="0.1625%" height="15" fill="rgb(249,89,12)" fg:x="488" fg:w="2"/><text x="39.8926%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="39.7238%" y="149" width="0.0812%" height="15" fill="rgb(226,27,33)" fg:x="489" fg:w="1"/><text x="39.9738%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.8050%" y="149" width="0.0812%" height="15" fill="rgb(213,82,22)" fg:x="490" fg:w="1"/><text x="40.0550%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.82%)</title><rect x="39.8050%" y="181" width="3.8180%" height="15" fill="rgb(248,140,0)" fg:x="490" fg:w="47"/><text x="40.0550%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.82%)</title><rect x="39.8050%" y="165" width="3.8180%" height="15" fill="rgb(228,106,3)" fg:x="490" fg:w="47"/><text x="40.0550%" y="175.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.74%)</title><rect x="39.8863%" y="149" width="3.7368%" height="15" fill="rgb(209,23,37)" fg:x="491" fg:w="46"/><text x="40.1363%" y="159.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="43.6231%" y="181" width="0.3249%" height="15" fill="rgb(241,93,50)" fg:x="537" fg:w="4"/><text x="43.8731%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="43.8668%" y="165" width="0.0812%" height="15" fill="rgb(253,46,43)" fg:x="540" fg:w="1"/><text x="44.1168%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 4.96%)</title><rect x="39.0739%" y="229" width="4.9553%" height="15" fill="rgb(226,206,43)" fg:x="481" fg:w="61"/><text x="39.3239%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (61 samples, 4.96%)</title><rect x="39.0739%" y="213" width="4.9553%" height="15" fill="rgb(217,54,7)" fg:x="481" fg:w="61"/><text x="39.3239%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (60 samples, 4.87%)</title><rect x="39.1552%" y="197" width="4.8741%" height="15" fill="rgb(223,5,52)" fg:x="482" fg:w="60"/><text x="39.4052%" y="207.50">regex_..</text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="43.9480%" y="181" width="0.0812%" height="15" fill="rgb(206,52,46)" fg:x="541" fg:w="1"/><text x="44.1980%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.0292%" y="229" width="0.0812%" height="15" fill="rgb(253,136,11)" fg:x="542" fg:w="1"/><text x="44.2792%" y="239.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="44.3542%" y="213" width="0.0812%" height="15" fill="rgb(208,106,33)" fg:x="546" fg:w="1"/><text x="44.6042%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="44.4354%" y="213" width="0.0812%" height="15" fill="rgb(206,54,4)" fg:x="547" fg:w="1"/><text x="44.6854%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="44.5167%" y="213" width="0.1625%" height="15" fill="rgb(213,3,15)" fg:x="548" fg:w="2"/><text x="44.7667%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (10 samples, 0.81%)</title><rect x="44.1105%" y="229" width="0.8123%" height="15" fill="rgb(252,211,39)" fg:x="543" fg:w="10"/><text x="44.3605%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="44.6791%" y="213" width="0.2437%" height="15" fill="rgb(223,6,36)" fg:x="550" fg:w="3"/><text x="44.9291%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="44.9228%" y="229" width="0.0812%" height="15" fill="rgb(252,169,45)" fg:x="553" fg:w="1"/><text x="45.1728%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="44.9228%" y="213" width="0.0812%" height="15" fill="rgb(212,48,26)" fg:x="553" fg:w="1"/><text x="45.1728%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="44.9228%" y="197" width="0.0812%" height="15" fill="rgb(251,102,48)" fg:x="553" fg:w="1"/><text x="45.1728%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (74 samples, 6.01%)</title><rect x="39.0739%" y="245" width="6.0114%" height="15" fill="rgb(243,208,16)" fg:x="481" fg:w="74"/><text x="39.3239%" y="255.50">regex_au..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="45.0041%" y="229" width="0.0812%" height="15" fill="rgb(219,96,24)" fg:x="554" fg:w="1"/><text x="45.2541%" y="239.50"></text></g><g><title>regex_syntax::hir::ClassBytes::push (1 samples, 0.08%)</title><rect x="45.0041%" y="213" width="0.0812%" height="15" fill="rgb(219,33,29)" fg:x="554" fg:w="1"/><text x="45.2541%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.0041%" y="197" width="0.0812%" height="15" fill="rgb(223,176,5)" fg:x="554" fg:w="1"/><text x="45.2541%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.0041%" y="181" width="0.0812%" height="15" fill="rgb(228,140,14)" fg:x="554" fg:w="1"/><text x="45.2541%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.0041%" y="165" width="0.0812%" height="15" fill="rgb(217,179,31)" fg:x="554" fg:w="1"/><text x="45.2541%" y="175.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (2 samples, 0.16%)</title><rect x="45.1665%" y="229" width="0.1625%" height="15" fill="rgb(230,9,30)" fg:x="556" fg:w="2"/><text x="45.4165%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (101 samples, 8.20%)</title><rect x="37.2055%" y="261" width="8.2047%" height="15" fill="rgb(230,136,20)" fg:x="458" fg:w="101"/><text x="37.4555%" y="271.50">regex_autom..</text></g><g><title>regex_automata::util::prefilter::prefixes (4 samples, 0.32%)</title><rect x="45.0853%" y="245" width="0.3249%" height="15" fill="rgb(215,210,22)" fg:x="555" fg:w="4"/><text x="45.3353%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::union (1 samples, 0.08%)</title><rect x="45.3290%" y="229" width="0.0812%" height="15" fill="rgb(218,43,5)" fg:x="558" fg:w="1"/><text x="45.5790%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_escape (2 samples, 0.16%)</title><rect x="45.4915%" y="197" width="0.1625%" height="15" fill="rgb(216,11,5)" fg:x="560" fg:w="2"/><text x="45.7415%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_perl_class (2 samples, 0.16%)</title><rect x="45.4915%" y="181" width="0.1625%" height="15" fill="rgb(209,82,29)" fg:x="560" fg:w="2"/><text x="45.7415%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="45.5727%" y="165" width="0.0812%" height="15" fill="rgb(244,115,12)" fg:x="561" fg:w="1"/><text x="45.8227%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (3 samples, 0.24%)</title><rect x="45.4915%" y="213" width="0.2437%" height="15" fill="rgb(222,82,18)" fg:x="560" fg:w="3"/><text x="45.7415%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="45.6539%" y="197" width="0.0812%" height="15" fill="rgb(249,227,8)" fg:x="562" fg:w="1"/><text x="45.9039%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.49%)</title><rect x="45.4102%" y="229" width="0.4874%" height="15" fill="rgb(253,141,45)" fg:x="559" fg:w="6"/><text x="45.6602%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (2 samples, 0.16%)</title><rect x="45.7352%" y="213" width="0.1625%" height="15" fill="rgb(234,184,4)" fg:x="563" fg:w="2"/><text x="45.9852%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="45.8164%" y="197" width="0.0812%" height="15" fill="rgb(218,194,23)" fg:x="564" fg:w="1"/><text x="46.0664%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (2 samples, 0.16%)</title><rect x="45.8976%" y="229" width="0.1625%" height="15" fill="rgb(235,66,41)" fg:x="565" fg:w="2"/><text x="46.1476%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (10 samples, 0.81%)</title><rect x="45.4102%" y="261" width="0.8123%" height="15" fill="rgb(245,217,1)" fg:x="559" fg:w="10"/><text x="45.6602%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (10 samples, 0.81%)</title><rect x="45.4102%" y="245" width="0.8123%" height="15" fill="rgb(229,91,1)" fg:x="559" fg:w="10"/><text x="45.6602%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="46.0601%" y="229" width="0.1625%" height="15" fill="rgb(207,101,30)" fg:x="567" fg:w="2"/><text x="46.3101%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.2226%" y="213" width="0.0812%" height="15" fill="rgb(223,82,49)" fg:x="569" fg:w="1"/><text x="46.4726%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.3038%" y="213" width="0.0812%" height="15" fill="rgb(218,167,17)" fg:x="570" fg:w="1"/><text x="46.5538%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.3038%" y="197" width="0.0812%" height="15" fill="rgb(208,103,14)" fg:x="570" fg:w="1"/><text x="46.5538%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.3038%" y="181" width="0.0812%" height="15" fill="rgb(238,20,8)" fg:x="570" fg:w="1"/><text x="46.5538%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="46.2226%" y="229" width="0.2437%" height="15" fill="rgb(218,80,54)" fg:x="569" fg:w="3"/><text x="46.4726%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="46.3851%" y="213" width="0.0812%" height="15" fill="rgb(240,144,17)" fg:x="571" fg:w="1"/><text x="46.6351%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.3851%" y="197" width="0.0812%" height="15" fill="rgb(245,27,50)" fg:x="571" fg:w="1"/><text x="46.6351%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.3851%" y="181" width="0.0812%" height="15" fill="rgb(251,51,7)" fg:x="571" fg:w="1"/><text x="46.6351%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="46.3851%" y="165" width="0.0812%" height="15" fill="rgb(245,217,29)" fg:x="571" fg:w="1"/><text x="46.6351%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="46.4663%" y="229" width="0.0812%" height="15" fill="rgb(221,176,29)" fg:x="572" fg:w="1"/><text x="46.7163%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (121 samples, 9.83%)</title><rect x="36.7994%" y="277" width="9.8294%" height="15" fill="rgb(212,180,24)" fg:x="453" fg:w="121"/><text x="37.0494%" y="287.50">regex_automata..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="46.2226%" y="261" width="0.4062%" height="15" fill="rgb(254,24,2)" fg:x="569" fg:w="5"/><text x="46.4726%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="46.2226%" y="245" width="0.4062%" height="15" fill="rgb(230,100,2)" fg:x="569" fg:w="5"/><text x="46.4726%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="46.5475%" y="229" width="0.0812%" height="15" fill="rgb(219,142,25)" fg:x="573" fg:w="1"/><text x="46.7975%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (124 samples, 10.07%)</title><rect x="36.7181%" y="309" width="10.0731%" height="15" fill="rgb(240,73,43)" fg:x="452" fg:w="124"/><text x="36.9681%" y="319.50">&lt;regex::regex::..</text></g><g><title>regex::builders::Builder::build_one_string (123 samples, 9.99%)</title><rect x="36.7994%" y="293" width="9.9919%" height="15" fill="rgb(214,114,15)" fg:x="453" fg:w="123"/><text x="37.0494%" y="303.50">regex::builder..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (2 samples, 0.16%)</title><rect x="46.6288%" y="277" width="0.1625%" height="15" fill="rgb(207,130,4)" fg:x="574" fg:w="2"/><text x="46.8788%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::swap_greed (1 samples, 0.08%)</title><rect x="46.7100%" y="261" width="0.0812%" height="15" fill="rgb(221,25,40)" fg:x="575" fg:w="1"/><text x="46.9600%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="46.7912%" y="277" width="0.0812%" height="15" fill="rgb(241,184,7)" fg:x="576" fg:w="1"/><text x="47.0412%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="46.7912%" y="261" width="0.0812%" height="15" fill="rgb(235,159,4)" fg:x="576" fg:w="1"/><text x="47.0412%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="46.7912%" y="309" width="0.1625%" height="15" fill="rgb(214,87,48)" fg:x="576" fg:w="2"/><text x="47.0412%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="46.7912%" y="293" width="0.1625%" height="15" fill="rgb(246,198,24)" fg:x="576" fg:w="2"/><text x="47.0412%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="46.8725%" y="277" width="0.0812%" height="15" fill="rgb(209,66,40)" fg:x="577" fg:w="1"/><text x="47.1225%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="46.8725%" y="261" width="0.0812%" height="15" fill="rgb(233,147,39)" fg:x="577" fg:w="1"/><text x="47.1225%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.5223%" y="229" width="0.0812%" height="15" fill="rgb(231,145,52)" fg:x="585" fg:w="1"/><text x="47.7723%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.5223%" y="213" width="0.0812%" height="15" fill="rgb(206,20,26)" fg:x="585" fg:w="1"/><text x="47.7723%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="47.5223%" y="197" width="0.0812%" height="15" fill="rgb(238,220,4)" fg:x="585" fg:w="1"/><text x="47.7723%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.6036%" y="229" width="0.0812%" height="15" fill="rgb(252,195,42)" fg:x="586" fg:w="1"/><text x="47.8536%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="47.6036%" y="213" width="0.0812%" height="15" fill="rgb(209,10,6)" fg:x="586" fg:w="1"/><text x="47.8536%" y="223.50"></text></g><g><title>regex_automata::util::iter::Searcher::handle_overlapping_empty_match (1 samples, 0.08%)</title><rect x="47.6036%" y="197" width="0.0812%" height="15" fill="rgb(229,3,52)" fg:x="586" fg:w="1"/><text x="47.8536%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.65%)</title><rect x="47.1162%" y="261" width="0.6499%" height="15" fill="rgb(253,49,37)" fg:x="580" fg:w="8"/><text x="47.3662%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (8 samples, 0.65%)</title><rect x="47.1162%" y="245" width="0.6499%" height="15" fill="rgb(240,103,49)" fg:x="580" fg:w="8"/><text x="47.3662%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="47.6848%" y="229" width="0.0812%" height="15" fill="rgb(250,182,30)" fg:x="587" fg:w="1"/><text x="47.9348%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (140 samples, 11.37%)</title><rect x="36.4744%" y="325" width="11.3729%" height="15" fill="rgb(248,8,30)" fg:x="449" fg:w="140"/><text x="36.7244%" y="335.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="46.9537%" y="309" width="0.8936%" height="15" fill="rgb(237,120,30)" fg:x="578" fg:w="11"/><text x="47.2037%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="46.9537%" y="293" width="0.8936%" height="15" fill="rgb(221,146,34)" fg:x="578" fg:w="11"/><text x="47.2037%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="47.0349%" y="277" width="0.8123%" height="15" fill="rgb(242,55,13)" fg:x="579" fg:w="10"/><text x="47.2849%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="47.7660%" y="261" width="0.0812%" height="15" fill="rgb(242,112,31)" fg:x="588" fg:w="1"/><text x="48.0160%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="47.7660%" y="245" width="0.0812%" height="15" fill="rgb(249,192,27)" fg:x="588" fg:w="1"/><text x="48.0160%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.7660%" y="229" width="0.0812%" height="15" fill="rgb(208,204,44)" fg:x="588" fg:w="1"/><text x="48.0160%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="47.7660%" y="213" width="0.0812%" height="15" fill="rgb(208,93,54)" fg:x="588" fg:w="1"/><text x="48.0160%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="47.7660%" y="197" width="0.0812%" height="15" fill="rgb(242,1,31)" fg:x="588" fg:w="1"/><text x="48.0160%" y="207.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="47.7660%" y="181" width="0.0812%" height="15" fill="rgb(241,83,25)" fg:x="588" fg:w="1"/><text x="48.0160%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.8473%" y="261" width="0.1625%" height="15" fill="rgb(205,169,50)" fg:x="589" fg:w="2"/><text x="48.0973%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.8473%" y="245" width="0.1625%" height="15" fill="rgb(239,186,37)" fg:x="589" fg:w="2"/><text x="48.0973%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="47.9285%" y="229" width="0.0812%" height="15" fill="rgb(205,221,10)" fg:x="590" fg:w="1"/><text x="48.1785%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="47.9285%" y="213" width="0.0812%" height="15" fill="rgb(218,196,15)" fg:x="590" fg:w="1"/><text x="48.1785%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="48.0910%" y="229" width="0.0812%" height="15" fill="rgb(218,196,35)" fg:x="592" fg:w="1"/><text x="48.3410%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.0910%" y="213" width="0.0812%" height="15" fill="rgb(233,63,24)" fg:x="592" fg:w="1"/><text x="48.3410%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.0910%" y="197" width="0.0812%" height="15" fill="rgb(225,8,4)" fg:x="592" fg:w="1"/><text x="48.3410%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.0910%" y="181" width="0.0812%" height="15" fill="rgb(234,105,35)" fg:x="592" fg:w="1"/><text x="48.3410%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="48.1722%" y="229" width="0.0812%" height="15" fill="rgb(236,21,32)" fg:x="593" fg:w="1"/><text x="48.4222%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (4 samples, 0.32%)</title><rect x="48.0097%" y="261" width="0.3249%" height="15" fill="rgb(228,109,6)" fg:x="591" fg:w="4"/><text x="48.2597%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="48.0097%" y="245" width="0.3249%" height="15" fill="rgb(229,215,31)" fg:x="591" fg:w="4"/><text x="48.2597%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="48.2535%" y="229" width="0.0812%" height="15" fill="rgb(221,52,54)" fg:x="594" fg:w="1"/><text x="48.5035%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="48.2535%" y="213" width="0.0812%" height="15" fill="rgb(252,129,43)" fg:x="594" fg:w="1"/><text x="48.5035%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="48.2535%" y="197" width="0.0812%" height="15" fill="rgb(248,183,27)" fg:x="594" fg:w="1"/><text x="48.5035%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.2535%" y="181" width="0.0812%" height="15" fill="rgb(250,0,22)" fg:x="594" fg:w="1"/><text x="48.5035%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.2535%" y="165" width="0.0812%" height="15" fill="rgb(213,166,10)" fg:x="594" fg:w="1"/><text x="48.5035%" y="175.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="48.3347%" y="261" width="0.0812%" height="15" fill="rgb(207,163,36)" fg:x="595" fg:w="1"/><text x="48.5847%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="48.5784%" y="229" width="0.0812%" height="15" fill="rgb(208,122,22)" fg:x="598" fg:w="1"/><text x="48.8284%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.38%)</title><rect x="48.5784%" y="245" width="1.3810%" height="15" fill="rgb(207,104,49)" fg:x="598" fg:w="17"/><text x="48.8284%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (16 samples, 1.30%)</title><rect x="48.6596%" y="229" width="1.2998%" height="15" fill="rgb(248,211,50)" fg:x="599" fg:w="16"/><text x="48.9096%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="49.6344%" y="213" width="0.3249%" height="15" fill="rgb(217,13,45)" fg:x="611" fg:w="4"/><text x="49.8844%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.57%)</title><rect x="49.9594%" y="245" width="0.5686%" height="15" fill="rgb(211,216,49)" fg:x="615" fg:w="7"/><text x="50.2094%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.57%)</title><rect x="49.9594%" y="229" width="0.5686%" height="15" fill="rgb(221,58,53)" fg:x="615" fg:w="7"/><text x="50.2094%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="50.8530%" y="213" width="0.0812%" height="15" fill="rgb(220,112,41)" fg:x="626" fg:w="1"/><text x="51.1030%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.8530%" y="197" width="0.0812%" height="15" fill="rgb(236,38,28)" fg:x="626" fg:w="1"/><text x="51.1030%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8530%" y="181" width="0.0812%" height="15" fill="rgb(227,195,22)" fg:x="626" fg:w="1"/><text x="51.1030%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.8530%" y="165" width="0.0812%" height="15" fill="rgb(214,55,33)" fg:x="626" fg:w="1"/><text x="51.1030%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (5 samples, 0.41%)</title><rect x="50.9342%" y="213" width="0.4062%" height="15" fill="rgb(248,80,13)" fg:x="627" fg:w="5"/><text x="51.1842%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (3 samples, 0.24%)</title><rect x="51.0967%" y="197" width="0.2437%" height="15" fill="rgb(238,52,6)" fg:x="629" fg:w="3"/><text x="51.3467%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.2591%" y="181" width="0.0812%" height="15" fill="rgb(224,198,47)" fg:x="631" fg:w="1"/><text x="51.5091%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.2591%" y="165" width="0.0812%" height="15" fill="rgb(233,171,20)" fg:x="631" fg:w="1"/><text x="51.5091%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.2591%" y="149" width="0.0812%" height="15" fill="rgb(241,30,25)" fg:x="631" fg:w="1"/><text x="51.5091%" y="159.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="51.3404%" y="197" width="0.3249%" height="15" fill="rgb(207,171,38)" fg:x="632" fg:w="4"/><text x="51.5904%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (4 samples, 0.32%)</title><rect x="51.3404%" y="181" width="0.3249%" height="15" fill="rgb(234,70,1)" fg:x="632" fg:w="4"/><text x="51.5904%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (15 samples, 1.22%)</title><rect x="50.5280%" y="245" width="1.2185%" height="15" fill="rgb(232,178,18)" fg:x="622" fg:w="15"/><text x="50.7780%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (15 samples, 1.22%)</title><rect x="50.5280%" y="229" width="1.2185%" height="15" fill="rgb(241,78,40)" fg:x="622" fg:w="15"/><text x="50.7780%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (5 samples, 0.41%)</title><rect x="51.3404%" y="213" width="0.4062%" height="15" fill="rgb(222,35,25)" fg:x="632" fg:w="5"/><text x="51.5904%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="51.6653%" y="197" width="0.0812%" height="15" fill="rgb(207,92,16)" fg:x="636" fg:w="1"/><text x="51.9153%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="51.9090%" y="197" width="0.0812%" height="15" fill="rgb(216,59,51)" fg:x="639" fg:w="1"/><text x="52.1590%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (2 samples, 0.16%)</title><rect x="52.0715%" y="181" width="0.1625%" height="15" fill="rgb(213,80,28)" fg:x="641" fg:w="2"/><text x="52.3215%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.49%)</title><rect x="52.8838%" y="133" width="0.4874%" height="15" fill="rgb(220,93,7)" fg:x="651" fg:w="6"/><text x="53.1338%" y="143.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="53.3712%" y="133" width="0.2437%" height="15" fill="rgb(225,24,44)" fg:x="657" fg:w="3"/><text x="53.6212%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="53.6149%" y="133" width="0.2437%" height="15" fill="rgb(243,74,40)" fg:x="660" fg:w="3"/><text x="53.8649%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.6962%" y="117" width="0.1625%" height="15" fill="rgb(228,39,7)" fg:x="661" fg:w="2"/><text x="53.9462%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.6962%" y="101" width="0.1625%" height="15" fill="rgb(227,79,8)" fg:x="661" fg:w="2"/><text x="53.9462%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="53.6962%" y="85" width="0.1625%" height="15" fill="rgb(236,58,11)" fg:x="661" fg:w="2"/><text x="53.9462%" y="95.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.9399%" y="85" width="0.1625%" height="15" fill="rgb(249,63,35)" fg:x="664" fg:w="2"/><text x="54.1899%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (4 samples, 0.32%)</title><rect x="53.8587%" y="133" width="0.3249%" height="15" fill="rgb(252,114,16)" fg:x="663" fg:w="4"/><text x="54.1087%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="53.9399%" y="117" width="0.2437%" height="15" fill="rgb(254,151,24)" fg:x="664" fg:w="3"/><text x="54.1899%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="53.9399%" y="101" width="0.2437%" height="15" fill="rgb(253,54,39)" fg:x="664" fg:w="3"/><text x="54.1899%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.1024%" y="85" width="0.0812%" height="15" fill="rgb(243,25,45)" fg:x="666" fg:w="1"/><text x="54.3524%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.5085%" y="69" width="0.0812%" height="15" fill="rgb(234,134,9)" fg:x="671" fg:w="1"/><text x="54.7585%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="54.4273%" y="101" width="0.3249%" height="15" fill="rgb(227,166,31)" fg:x="670" fg:w="4"/><text x="54.6773%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="54.4273%" y="85" width="0.3249%" height="15" fill="rgb(245,143,41)" fg:x="670" fg:w="4"/><text x="54.6773%" y="95.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="54.5898%" y="69" width="0.1625%" height="15" fill="rgb(238,181,32)" fg:x="672" fg:w="2"/><text x="54.8398%" y="79.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="54.9959%" y="85" width="0.1625%" height="15" fill="rgb(224,113,18)" fg:x="677" fg:w="2"/><text x="55.2459%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (14 samples, 1.14%)</title><rect x="54.1836%" y="133" width="1.1373%" height="15" fill="rgb(240,229,28)" fg:x="667" fg:w="14"/><text x="54.4336%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (13 samples, 1.06%)</title><rect x="54.2648%" y="117" width="1.0561%" height="15" fill="rgb(250,185,3)" fg:x="668" fg:w="13"/><text x="54.5148%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (7 samples, 0.57%)</title><rect x="54.7522%" y="101" width="0.5686%" height="15" fill="rgb(212,59,25)" fg:x="674" fg:w="7"/><text x="55.0022%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="55.1584%" y="85" width="0.1625%" height="15" fill="rgb(221,87,20)" fg:x="679" fg:w="2"/><text x="55.4084%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="55.1584%" y="69" width="0.1625%" height="15" fill="rgb(213,74,28)" fg:x="679" fg:w="2"/><text x="55.4084%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.1584%" y="53" width="0.1625%" height="15" fill="rgb(224,132,34)" fg:x="679" fg:w="2"/><text x="55.4084%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="55.1584%" y="37" width="0.1625%" height="15" fill="rgb(222,101,24)" fg:x="679" fg:w="2"/><text x="55.4084%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="55.3209%" y="101" width="0.0812%" height="15" fill="rgb(254,142,4)" fg:x="681" fg:w="1"/><text x="55.5709%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (41 samples, 3.33%)</title><rect x="55.3209%" y="133" width="3.3306%" height="15" fill="rgb(230,229,49)" fg:x="681" fg:w="41"/><text x="55.5709%" y="143.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (41 samples, 3.33%)</title><rect x="55.3209%" y="117" width="3.3306%" height="15" fill="rgb(238,70,47)" fg:x="681" fg:w="41"/><text x="55.5709%" y="127.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (40 samples, 3.25%)</title><rect x="55.4021%" y="101" width="3.2494%" height="15" fill="rgb(231,160,17)" fg:x="682" fg:w="40"/><text x="55.6521%" y="111.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="58.6515%" y="133" width="0.2437%" height="15" fill="rgb(218,68,53)" fg:x="722" fg:w="3"/><text x="58.9015%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.8140%" y="117" width="0.0812%" height="15" fill="rgb(236,111,10)" fg:x="724" fg:w="1"/><text x="59.0640%" y="127.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (2 samples, 0.16%)</title><rect x="58.8952%" y="133" width="0.1625%" height="15" fill="rgb(224,34,41)" fg:x="725" fg:w="2"/><text x="59.1452%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (93 samples, 7.55%)</title><rect x="51.8278%" y="229" width="7.5548%" height="15" fill="rgb(241,118,19)" fg:x="638" fg:w="93"/><text x="52.0778%" y="239.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (93 samples, 7.55%)</title><rect x="51.8278%" y="213" width="7.5548%" height="15" fill="rgb(238,129,25)" fg:x="638" fg:w="93"/><text x="52.0778%" y="223.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (91 samples, 7.39%)</title><rect x="51.9903%" y="197" width="7.3924%" height="15" fill="rgb(238,22,31)" fg:x="640" fg:w="91"/><text x="52.2403%" y="207.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (88 samples, 7.15%)</title><rect x="52.2340%" y="181" width="7.1487%" height="15" fill="rgb(222,174,48)" fg:x="643" fg:w="88"/><text x="52.4840%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (88 samples, 7.15%)</title><rect x="52.2340%" y="165" width="7.1487%" height="15" fill="rgb(206,152,40)" fg:x="643" fg:w="88"/><text x="52.4840%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (88 samples, 7.15%)</title><rect x="52.2340%" y="149" width="7.1487%" height="15" fill="rgb(218,99,54)" fg:x="643" fg:w="88"/><text x="52.4840%" y="159.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="59.0577%" y="133" width="0.3249%" height="15" fill="rgb(220,174,26)" fg:x="727" fg:w="4"/><text x="59.3077%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.2201%" y="117" width="0.1625%" height="15" fill="rgb(245,116,9)" fg:x="729" fg:w="2"/><text x="59.4701%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.3014%" y="101" width="0.0812%" height="15" fill="rgb(209,72,35)" fg:x="730" fg:w="1"/><text x="59.5514%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.3014%" y="85" width="0.0812%" height="15" fill="rgb(226,126,21)" fg:x="730" fg:w="1"/><text x="59.5514%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.6263%" y="213" width="0.0812%" height="15" fill="rgb(227,192,1)" fg:x="734" fg:w="1"/><text x="59.8763%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.7076%" y="213" width="0.0812%" height="15" fill="rgb(237,180,29)" fg:x="735" fg:w="1"/><text x="59.9576%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.0325%" y="197" width="0.0812%" height="15" fill="rgb(230,197,35)" fg:x="739" fg:w="1"/><text x="60.2825%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.0325%" y="181" width="0.0812%" height="15" fill="rgb(246,193,31)" fg:x="739" fg:w="1"/><text x="60.2825%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.41%)</title><rect x="59.7888%" y="213" width="0.4062%" height="15" fill="rgb(241,36,4)" fg:x="736" fg:w="5"/><text x="60.0388%" y="223.50"></text></g><g><title>regex_automata::util::look::LookMatcher::add_to_byteset (1 samples, 0.08%)</title><rect x="60.1137%" y="197" width="0.0812%" height="15" fill="rgb(241,130,17)" fg:x="740" fg:w="1"/><text x="60.3637%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (9 samples, 0.73%)</title><rect x="60.1950%" y="213" width="0.7311%" height="15" fill="rgb(206,137,32)" fg:x="741" fg:w="9"/><text x="60.4450%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (155 samples, 12.59%)</title><rect x="48.4159%" y="261" width="12.5914%" height="15" fill="rgb(237,228,51)" fg:x="596" fg:w="155"/><text x="48.6659%" y="271.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (114 samples, 9.26%)</title><rect x="51.7465%" y="245" width="9.2608%" height="15" fill="rgb(243,6,42)" fg:x="637" fg:w="114"/><text x="51.9965%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (20 samples, 1.62%)</title><rect x="59.3826%" y="229" width="1.6247%" height="15" fill="rgb(251,74,28)" fg:x="731" fg:w="20"/><text x="59.6326%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="60.9261%" y="213" width="0.0812%" height="15" fill="rgb(218,20,49)" fg:x="750" fg:w="1"/><text x="61.1761%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.1698%" y="229" width="0.0812%" height="15" fill="rgb(238,28,14)" fg:x="753" fg:w="1"/><text x="61.4198%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.1698%" y="213" width="0.0812%" height="15" fill="rgb(229,40,46)" fg:x="753" fg:w="1"/><text x="61.4198%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.1698%" y="197" width="0.0812%" height="15" fill="rgb(244,195,20)" fg:x="753" fg:w="1"/><text x="61.4198%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (2 samples, 0.16%)</title><rect x="61.3323%" y="213" width="0.1625%" height="15" fill="rgb(253,56,35)" fg:x="755" fg:w="2"/><text x="61.5823%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="61.4135%" y="197" width="0.0812%" height="15" fill="rgb(210,149,44)" fg:x="756" fg:w="1"/><text x="61.6635%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="61.4135%" y="181" width="0.0812%" height="15" fill="rgb(240,135,12)" fg:x="756" fg:w="1"/><text x="61.6635%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.41%)</title><rect x="61.2510%" y="229" width="0.4062%" height="15" fill="rgb(251,24,50)" fg:x="754" fg:w="5"/><text x="61.5010%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="61.4947%" y="213" width="0.1625%" height="15" fill="rgb(243,200,47)" fg:x="757" fg:w="2"/><text x="61.7447%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.5760%" y="197" width="0.0812%" height="15" fill="rgb(224,166,26)" fg:x="758" fg:w="1"/><text x="61.8260%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.5760%" y="181" width="0.0812%" height="15" fill="rgb(233,0,47)" fg:x="758" fg:w="1"/><text x="61.8260%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="61.5760%" y="165" width="0.0812%" height="15" fill="rgb(253,80,5)" fg:x="758" fg:w="1"/><text x="61.8260%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (9 samples, 0.73%)</title><rect x="61.0073%" y="261" width="0.7311%" height="15" fill="rgb(214,133,25)" fg:x="751" fg:w="9"/><text x="61.2573%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (9 samples, 0.73%)</title><rect x="61.0073%" y="245" width="0.7311%" height="15" fill="rgb(209,27,14)" fg:x="751" fg:w="9"/><text x="61.2573%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="61.6572%" y="229" width="0.0812%" height="15" fill="rgb(219,102,51)" fg:x="759" fg:w="1"/><text x="61.9072%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="61.6572%" y="213" width="0.0812%" height="15" fill="rgb(237,18,16)" fg:x="759" fg:w="1"/><text x="61.9072%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.9821%" y="197" width="0.0812%" height="15" fill="rgb(241,85,17)" fg:x="763" fg:w="1"/><text x="62.2321%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.9821%" y="181" width="0.0812%" height="15" fill="rgb(236,90,42)" fg:x="763" fg:w="1"/><text x="62.2321%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (5 samples, 0.41%)</title><rect x="61.7384%" y="213" width="0.4062%" height="15" fill="rgb(249,57,21)" fg:x="760" fg:w="5"/><text x="61.9884%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="62.0634%" y="197" width="0.0812%" height="15" fill="rgb(243,12,36)" fg:x="764" fg:w="1"/><text x="62.3134%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (6 samples, 0.49%)</title><rect x="61.7384%" y="229" width="0.4874%" height="15" fill="rgb(253,128,47)" fg:x="760" fg:w="6"/><text x="61.9884%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="62.1446%" y="213" width="0.0812%" height="15" fill="rgb(207,33,20)" fg:x="765" fg:w="1"/><text x="62.3946%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="62.1446%" y="197" width="0.0812%" height="15" fill="rgb(233,215,35)" fg:x="765" fg:w="1"/><text x="62.3946%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.2258%" y="213" width="0.0812%" height="15" fill="rgb(249,188,52)" fg:x="766" fg:w="1"/><text x="62.4758%" y="223.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="62.3071%" y="213" width="0.0812%" height="15" fill="rgb(225,12,32)" fg:x="767" fg:w="1"/><text x="62.5571%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (180 samples, 14.62%)</title><rect x="47.8473%" y="309" width="14.6223%" height="15" fill="rgb(247,98,14)" fg:x="589" fg:w="180"/><text x="48.0973%" y="319.50">&lt;regex::regex::string:..</text></g><g><title>regex::builders::Builder::build_one_string (180 samples, 14.62%)</title><rect x="47.8473%" y="293" width="14.6223%" height="15" fill="rgb(247,219,48)" fg:x="589" fg:w="180"/><text x="48.0973%" y="303.50">regex::builders::Build..</text></g><g><title>regex_automata::meta::regex::Builder::build (180 samples, 14.62%)</title><rect x="47.8473%" y="277" width="14.6223%" height="15" fill="rgb(253,60,48)" fg:x="589" fg:w="180"/><text x="48.0973%" y="287.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.73%)</title><rect x="61.7384%" y="261" width="0.7311%" height="15" fill="rgb(245,15,52)" fg:x="760" fg:w="9"/><text x="61.9884%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.73%)</title><rect x="61.7384%" y="245" width="0.7311%" height="15" fill="rgb(220,133,28)" fg:x="760" fg:w="9"/><text x="61.9884%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="62.2258%" y="229" width="0.2437%" height="15" fill="rgb(217,180,4)" fg:x="766" fg:w="3"/><text x="62.4758%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="62.3883%" y="213" width="0.0812%" height="15" fill="rgb(251,24,1)" fg:x="768" fg:w="1"/><text x="62.6383%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="62.4695%" y="309" width="0.0812%" height="15" fill="rgb(212,185,49)" fg:x="769" fg:w="1"/><text x="62.7195%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="62.4695%" y="293" width="0.0812%" height="15" fill="rgb(215,175,22)" fg:x="769" fg:w="1"/><text x="62.7195%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.4695%" y="277" width="0.0812%" height="15" fill="rgb(250,205,14)" fg:x="769" fg:w="1"/><text x="62.7195%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="62.5508%" y="293" width="0.2437%" height="15" fill="rgb(225,211,22)" fg:x="770" fg:w="3"/><text x="62.8008%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="62.5508%" y="277" width="0.2437%" height="15" fill="rgb(251,179,42)" fg:x="770" fg:w="3"/><text x="62.8008%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (3 samples, 0.24%)</title><rect x="62.5508%" y="261" width="0.2437%" height="15" fill="rgb(208,216,51)" fg:x="770" fg:w="3"/><text x="62.8008%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="62.6320%" y="245" width="0.1625%" height="15" fill="rgb(235,36,11)" fg:x="771" fg:w="2"/><text x="62.8820%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1194%" y="213" width="0.0812%" height="15" fill="rgb(213,189,28)" fg:x="777" fg:w="1"/><text x="63.3694%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="63.1194%" y="197" width="0.0812%" height="15" fill="rgb(227,203,42)" fg:x="777" fg:w="1"/><text x="63.3694%" y="207.50"></text></g><g><title>indefinite::rules::number::Number::check (194 samples, 15.76%)</title><rect x="47.8473%" y="325" width="15.7595%" height="15" fill="rgb(244,72,36)" fg:x="589" fg:w="194"/><text x="48.0973%" y="335.50">indefinite::rules::numbe..</text></g><g><title>regex::regex::string::Regex::is_match_at (13 samples, 1.06%)</title><rect x="62.5508%" y="309" width="1.0561%" height="15" fill="rgb(213,53,17)" fg:x="770" fg:w="13"/><text x="62.8008%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.81%)</title><rect x="62.7945%" y="293" width="0.8123%" height="15" fill="rgb(207,167,3)" fg:x="773" fg:w="10"/><text x="63.0445%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (10 samples, 0.81%)</title><rect x="62.7945%" y="277" width="0.8123%" height="15" fill="rgb(216,98,30)" fg:x="773" fg:w="10"/><text x="63.0445%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (10 samples, 0.81%)</title><rect x="62.7945%" y="261" width="0.8123%" height="15" fill="rgb(236,123,15)" fg:x="773" fg:w="10"/><text x="63.0445%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (10 samples, 0.81%)</title><rect x="62.7945%" y="245" width="0.8123%" height="15" fill="rgb(248,81,50)" fg:x="773" fg:w="10"/><text x="63.0445%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.81%)</title><rect x="62.7945%" y="229" width="0.8123%" height="15" fill="rgb(214,120,4)" fg:x="773" fg:w="10"/><text x="63.0445%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (5 samples, 0.41%)</title><rect x="63.2006%" y="213" width="0.4062%" height="15" fill="rgb(208,179,34)" fg:x="778" fg:w="5"/><text x="63.4506%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.6881%" y="245" width="0.0812%" height="15" fill="rgb(227,140,7)" fg:x="784" fg:w="1"/><text x="63.9381%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="63.6881%" y="229" width="0.0812%" height="15" fill="rgb(214,22,6)" fg:x="784" fg:w="1"/><text x="63.9381%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="63.7693%" y="245" width="0.0812%" height="15" fill="rgb(207,137,27)" fg:x="785" fg:w="1"/><text x="64.0193%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="63.9318%" y="213" width="0.0812%" height="15" fill="rgb(210,8,46)" fg:x="787" fg:w="1"/><text x="64.1818%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="63.8505%" y="245" width="0.2437%" height="15" fill="rgb(240,16,54)" fg:x="786" fg:w="3"/><text x="64.1005%" y="255.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="63.8505%" y="229" width="0.2437%" height="15" fill="rgb(211,209,29)" fg:x="786" fg:w="3"/><text x="64.1005%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="64.0130%" y="213" width="0.0812%" height="15" fill="rgb(226,228,24)" fg:x="788" fg:w="1"/><text x="64.2630%" y="223.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.0130%" y="197" width="0.0812%" height="15" fill="rgb(222,84,9)" fg:x="788" fg:w="1"/><text x="64.2630%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="64.0130%" y="181" width="0.0812%" height="15" fill="rgb(234,203,30)" fg:x="788" fg:w="1"/><text x="64.2630%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.0130%" y="165" width="0.0812%" height="15" fill="rgb(238,109,14)" fg:x="788" fg:w="1"/><text x="64.2630%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.0130%" y="149" width="0.0812%" height="15" fill="rgb(233,206,34)" fg:x="788" fg:w="1"/><text x="64.2630%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.0130%" y="133" width="0.0812%" height="15" fill="rgb(220,167,47)" fg:x="788" fg:w="1"/><text x="64.2630%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.0942%" y="229" width="0.0812%" height="15" fill="rgb(238,105,10)" fg:x="789" fg:w="1"/><text x="64.3442%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="64.1755%" y="229" width="0.0812%" height="15" fill="rgb(213,227,17)" fg:x="790" fg:w="1"/><text x="64.4255%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.1755%" y="213" width="0.0812%" height="15" fill="rgb(217,132,38)" fg:x="790" fg:w="1"/><text x="64.4255%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="64.2567%" y="229" width="0.1625%" height="15" fill="rgb(242,146,4)" fg:x="791" fg:w="2"/><text x="64.5067%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="64.2567%" y="213" width="0.1625%" height="15" fill="rgb(212,61,9)" fg:x="791" fg:w="2"/><text x="64.5067%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="64.4192%" y="213" width="0.0812%" height="15" fill="rgb(247,126,22)" fg:x="793" fg:w="1"/><text x="64.6692%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="64.4192%" y="197" width="0.0812%" height="15" fill="rgb(220,196,2)" fg:x="793" fg:w="1"/><text x="64.6692%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.4192%" y="181" width="0.0812%" height="15" fill="rgb(208,46,4)" fg:x="793" fg:w="1"/><text x="64.6692%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="64.4192%" y="165" width="0.0812%" height="15" fill="rgb(252,104,46)" fg:x="793" fg:w="1"/><text x="64.6692%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="64.4192%" y="149" width="0.0812%" height="15" fill="rgb(237,152,48)" fg:x="793" fg:w="1"/><text x="64.6692%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4192%" y="133" width="0.0812%" height="15" fill="rgb(221,59,37)" fg:x="793" fg:w="1"/><text x="64.6692%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4192%" y="117" width="0.0812%" height="15" fill="rgb(209,202,51)" fg:x="793" fg:w="1"/><text x="64.6692%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.4192%" y="101" width="0.0812%" height="15" fill="rgb(228,81,30)" fg:x="793" fg:w="1"/><text x="64.6692%" y="111.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="64.5816%" y="197" width="0.0812%" height="15" fill="rgb(227,42,39)" fg:x="795" fg:w="1"/><text x="64.8316%" y="207.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.89%)</title><rect x="64.0942%" y="245" width="0.8936%" height="15" fill="rgb(221,26,2)" fg:x="789" fg:w="11"/><text x="64.3442%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (7 samples, 0.57%)</title><rect x="64.4192%" y="229" width="0.5686%" height="15" fill="rgb(254,61,31)" fg:x="793" fg:w="7"/><text x="64.6692%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.49%)</title><rect x="64.5004%" y="213" width="0.4874%" height="15" fill="rgb(222,173,38)" fg:x="794" fg:w="6"/><text x="64.7504%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="64.6629%" y="197" width="0.3249%" height="15" fill="rgb(218,50,12)" fg:x="796" fg:w="4"/><text x="64.9129%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="64.9878%" y="213" width="0.2437%" height="15" fill="rgb(223,88,40)" fg:x="800" fg:w="3"/><text x="65.2378%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (3 samples, 0.24%)</title><rect x="64.9878%" y="197" width="0.2437%" height="15" fill="rgb(237,54,19)" fg:x="800" fg:w="3"/><text x="65.2378%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.0690%" y="181" width="0.1625%" height="15" fill="rgb(251,129,25)" fg:x="801" fg:w="2"/><text x="65.3190%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.0690%" y="165" width="0.1625%" height="15" fill="rgb(238,97,19)" fg:x="801" fg:w="2"/><text x="65.3190%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.1503%" y="149" width="0.0812%" height="15" fill="rgb(240,169,18)" fg:x="802" fg:w="1"/><text x="65.4003%" y="159.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.41%)</title><rect x="64.9878%" y="245" width="0.4062%" height="15" fill="rgb(230,187,49)" fg:x="800" fg:w="5"/><text x="65.2378%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.41%)</title><rect x="64.9878%" y="229" width="0.4062%" height="15" fill="rgb(209,44,26)" fg:x="800" fg:w="5"/><text x="65.2378%" y="239.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="65.2315%" y="213" width="0.1625%" height="15" fill="rgb(244,0,6)" fg:x="803" fg:w="2"/><text x="65.4815%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.4752%" y="181" width="0.0812%" height="15" fill="rgb(248,18,21)" fg:x="806" fg:w="1"/><text x="65.7252%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.4752%" y="165" width="0.0812%" height="15" fill="rgb(245,180,19)" fg:x="806" fg:w="1"/><text x="65.7252%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.4752%" y="149" width="0.0812%" height="15" fill="rgb(252,118,36)" fg:x="806" fg:w="1"/><text x="65.7252%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="65.4752%" y="213" width="0.1625%" height="15" fill="rgb(210,224,19)" fg:x="806" fg:w="2"/><text x="65.7252%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="65.4752%" y="197" width="0.1625%" height="15" fill="rgb(218,30,24)" fg:x="806" fg:w="2"/><text x="65.7252%" y="207.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="65.5565%" y="181" width="0.0812%" height="15" fill="rgb(219,75,50)" fg:x="807" fg:w="1"/><text x="65.8065%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="65.6377%" y="213" width="0.0812%" height="15" fill="rgb(234,72,50)" fg:x="808" fg:w="1"/><text x="65.8877%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (27 samples, 2.19%)</title><rect x="63.6068%" y="293" width="2.1933%" height="15" fill="rgb(219,100,48)" fg:x="783" fg:w="27"/><text x="63.8568%" y="303.50">&lt;..</text></g><g><title>regex::builders::Builder::build_one_string (27 samples, 2.19%)</title><rect x="63.6068%" y="277" width="2.1933%" height="15" fill="rgb(253,5,41)" fg:x="783" fg:w="27"/><text x="63.8568%" y="287.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build (27 samples, 2.19%)</title><rect x="63.6068%" y="261" width="2.1933%" height="15" fill="rgb(247,181,11)" fg:x="783" fg:w="27"/><text x="63.8568%" y="271.50">r..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="65.3940%" y="245" width="0.4062%" height="15" fill="rgb(222,223,25)" fg:x="805" fg:w="5"/><text x="65.6440%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="65.4752%" y="229" width="0.3249%" height="15" fill="rgb(214,198,28)" fg:x="806" fg:w="4"/><text x="65.7252%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="65.7189%" y="213" width="0.0812%" height="15" fill="rgb(230,46,43)" fg:x="809" fg:w="1"/><text x="65.9689%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="65.8002%" y="261" width="0.0812%" height="15" fill="rgb(233,65,53)" fg:x="810" fg:w="1"/><text x="66.0502%" y="271.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="65.8002%" y="245" width="0.0812%" height="15" fill="rgb(221,121,27)" fg:x="810" fg:w="1"/><text x="66.0502%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="65.8002%" y="293" width="0.2437%" height="15" fill="rgb(247,70,47)" fg:x="810" fg:w="3"/><text x="66.0502%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="65.8002%" y="277" width="0.2437%" height="15" fill="rgb(228,85,35)" fg:x="810" fg:w="3"/><text x="66.0502%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="65.8814%" y="261" width="0.1625%" height="15" fill="rgb(209,50,18)" fg:x="811" fg:w="2"/><text x="66.1314%" y="271.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="65.8814%" y="245" width="0.1625%" height="15" fill="rgb(250,19,35)" fg:x="811" fg:w="2"/><text x="66.1314%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="65.8814%" y="229" width="0.1625%" height="15" fill="rgb(253,107,29)" fg:x="811" fg:w="2"/><text x="66.1314%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="65.8814%" y="213" width="0.1625%" height="15" fill="rgb(252,179,29)" fg:x="811" fg:w="2"/><text x="66.1314%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="65.8814%" y="197" width="0.1625%" height="15" fill="rgb(238,194,6)" fg:x="811" fg:w="2"/><text x="66.1314%" y="207.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="66.0439%" y="245" width="0.1625%" height="15" fill="rgb(238,164,29)" fg:x="813" fg:w="2"/><text x="66.2939%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="66.0439%" y="229" width="0.1625%" height="15" fill="rgb(224,25,9)" fg:x="813" fg:w="2"/><text x="66.2939%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="66.0439%" y="293" width="0.2437%" height="15" fill="rgb(244,153,23)" fg:x="813" fg:w="3"/><text x="66.2939%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="66.0439%" y="277" width="0.2437%" height="15" fill="rgb(212,203,14)" fg:x="813" fg:w="3"/><text x="66.2939%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="66.0439%" y="261" width="0.2437%" height="15" fill="rgb(220,164,20)" fg:x="813" fg:w="3"/><text x="66.2939%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="66.2063%" y="245" width="0.0812%" height="15" fill="rgb(222,203,48)" fg:x="815" fg:w="1"/><text x="66.4563%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7750%" y="213" width="0.0812%" height="15" fill="rgb(215,159,22)" fg:x="822" fg:w="1"/><text x="67.0250%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7750%" y="197" width="0.0812%" height="15" fill="rgb(216,183,47)" fg:x="822" fg:w="1"/><text x="67.0250%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7750%" y="181" width="0.0812%" height="15" fill="rgb(229,195,25)" fg:x="822" fg:w="1"/><text x="67.0250%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.49%)</title><rect x="66.4500%" y="229" width="0.4874%" height="15" fill="rgb(224,132,51)" fg:x="818" fg:w="6"/><text x="66.7000%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="66.8562%" y="213" width="0.0812%" height="15" fill="rgb(240,63,7)" fg:x="823" fg:w="1"/><text x="67.1062%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (9 samples, 0.73%)</title><rect x="66.3688%" y="245" width="0.7311%" height="15" fill="rgb(249,182,41)" fg:x="817" fg:w="9"/><text x="66.6188%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="66.9374%" y="229" width="0.1625%" height="15" fill="rgb(243,47,26)" fg:x="824" fg:w="2"/><text x="67.1874%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.0187%" y="213" width="0.0812%" height="15" fill="rgb(233,48,2)" fg:x="825" fg:w="1"/><text x="67.2687%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (420 samples, 34.12%)</title><rect x="33.0626%" y="405" width="34.1186%" height="15" fill="rgb(244,165,34)" fg:x="407" fg:w="420"/><text x="33.3126%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mo..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (383 samples, 31.11%)</title><rect x="36.0682%" y="389" width="31.1129%" height="15" fill="rgb(207,89,7)" fg:x="444" fg:w="383"/><text x="36.3182%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (382 samples, 31.03%)</title><rect x="36.1495%" y="373" width="31.0317%" height="15" fill="rgb(244,117,36)" fg:x="445" fg:w="382"/><text x="36.3995%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (382 samples, 31.03%)</title><rect x="36.1495%" y="357" width="31.0317%" height="15" fill="rgb(226,144,34)" fg:x="445" fg:w="382"/><text x="36.3995%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (379 samples, 30.79%)</title><rect x="36.3932%" y="341" width="30.7880%" height="15" fill="rgb(213,23,19)" fg:x="448" fg:w="379"/><text x="36.6432%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (44 samples, 3.57%)</title><rect x="63.6068%" y="325" width="3.5743%" height="15" fill="rgb(217,75,12)" fg:x="783" fg:w="44"/><text x="63.8568%" y="335.50">inde..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (44 samples, 3.57%)</title><rect x="63.6068%" y="309" width="3.5743%" height="15" fill="rgb(224,159,17)" fg:x="783" fg:w="44"/><text x="63.8568%" y="319.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (11 samples, 0.89%)</title><rect x="66.2876%" y="293" width="0.8936%" height="15" fill="rgb(217,118,1)" fg:x="816" fg:w="11"/><text x="66.5376%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (11 samples, 0.89%)</title><rect x="66.2876%" y="277" width="0.8936%" height="15" fill="rgb(232,180,48)" fg:x="816" fg:w="11"/><text x="66.5376%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (11 samples, 0.89%)</title><rect x="66.2876%" y="261" width="0.8936%" height="15" fill="rgb(230,27,33)" fg:x="816" fg:w="11"/><text x="66.5376%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="67.0999%" y="245" width="0.0812%" height="15" fill="rgb(205,31,21)" fg:x="826" fg:w="1"/><text x="67.3499%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="67.0999%" y="229" width="0.0812%" height="15" fill="rgb(253,59,4)" fg:x="826" fg:w="1"/><text x="67.3499%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.1812%" y="389" width="0.0812%" height="15" fill="rgb(224,201,9)" fg:x="827" fg:w="1"/><text x="67.4312%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1812%" y="373" width="0.0812%" height="15" fill="rgb(229,206,30)" fg:x="827" fg:w="1"/><text x="67.4312%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.1812%" y="357" width="0.0812%" height="15" fill="rgb(212,67,47)" fg:x="827" fg:w="1"/><text x="67.4312%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.1812%" y="341" width="0.0812%" height="15" fill="rgb(211,96,50)" fg:x="827" fg:w="1"/><text x="67.4312%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.1812%" y="325" width="0.0812%" height="15" fill="rgb(252,114,18)" fg:x="827" fg:w="1"/><text x="67.4312%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.1812%" y="309" width="0.0812%" height="15" fill="rgb(223,58,37)" fg:x="827" fg:w="1"/><text x="67.4312%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1812%" y="293" width="0.0812%" height="15" fill="rgb(237,70,4)" fg:x="827" fg:w="1"/><text x="67.4312%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.1812%" y="277" width="0.0812%" height="15" fill="rgb(244,85,46)" fg:x="827" fg:w="1"/><text x="67.4312%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.1812%" y="261" width="0.0812%" height="15" fill="rgb(223,39,52)" fg:x="827" fg:w="1"/><text x="67.4312%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.1812%" y="245" width="0.0812%" height="15" fill="rgb(218,200,14)" fg:x="827" fg:w="1"/><text x="67.4312%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.1812%" y="229" width="0.0812%" height="15" fill="rgb(208,171,16)" fg:x="827" fg:w="1"/><text x="67.4312%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.1812%" y="213" width="0.0812%" height="15" fill="rgb(234,200,18)" fg:x="827" fg:w="1"/><text x="67.4312%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1812%" y="197" width="0.0812%" height="15" fill="rgb(228,45,11)" fg:x="827" fg:w="1"/><text x="67.4312%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="67.3436%" y="357" width="0.0812%" height="15" fill="rgb(237,182,11)" fg:x="829" fg:w="1"/><text x="67.5936%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.3436%" y="341" width="0.0812%" height="15" fill="rgb(241,175,49)" fg:x="829" fg:w="1"/><text x="67.5936%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.4249%" y="357" width="0.0812%" height="15" fill="rgb(247,38,35)" fg:x="830" fg:w="1"/><text x="67.6749%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="67.5061%" y="357" width="0.1625%" height="15" fill="rgb(228,39,49)" fg:x="831" fg:w="2"/><text x="67.7561%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="67.5061%" y="341" width="0.1625%" height="15" fill="rgb(226,101,26)" fg:x="831" fg:w="2"/><text x="67.7561%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="67.5061%" y="325" width="0.1625%" height="15" fill="rgb(206,141,19)" fg:x="831" fg:w="2"/><text x="67.7561%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="67.5061%" y="309" width="0.1625%" height="15" fill="rgb(211,200,13)" fg:x="831" fg:w="2"/><text x="67.7561%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="67.5061%" y="293" width="0.1625%" height="15" fill="rgb(241,121,6)" fg:x="831" fg:w="2"/><text x="67.7561%" y="303.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.57%)</title><rect x="67.1812%" y="405" width="0.5686%" height="15" fill="rgb(234,221,29)" fg:x="827" fg:w="7"/><text x="67.4312%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="67.2624%" y="389" width="0.4874%" height="15" fill="rgb(229,136,5)" fg:x="828" fg:w="6"/><text x="67.5124%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="67.2624%" y="373" width="0.4874%" height="15" fill="rgb(238,36,11)" fg:x="828" fg:w="6"/><text x="67.5124%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.6686%" y="357" width="0.0812%" height="15" fill="rgb(251,55,41)" fg:x="833" fg:w="1"/><text x="67.9186%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.6686%" y="341" width="0.0812%" height="15" fill="rgb(242,34,40)" fg:x="833" fg:w="1"/><text x="67.9186%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.6686%" y="325" width="0.0812%" height="15" fill="rgb(215,42,17)" fg:x="833" fg:w="1"/><text x="67.9186%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6686%" y="309" width="0.0812%" height="15" fill="rgb(207,44,46)" fg:x="833" fg:w="1"/><text x="67.9186%" y="319.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="67.7498%" y="357" width="0.0812%" height="15" fill="rgb(211,206,28)" fg:x="834" fg:w="1"/><text x="67.9998%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.9123%" y="293" width="0.0812%" height="15" fill="rgb(237,167,16)" fg:x="836" fg:w="1"/><text x="68.1623%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9123%" y="277" width="0.0812%" height="15" fill="rgb(233,66,6)" fg:x="836" fg:w="1"/><text x="68.1623%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.9935%" y="293" width="0.0812%" height="15" fill="rgb(246,123,29)" fg:x="837" fg:w="1"/><text x="68.2435%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="67.9935%" y="277" width="0.0812%" height="15" fill="rgb(209,62,40)" fg:x="837" fg:w="1"/><text x="68.2435%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="67.9935%" y="261" width="0.0812%" height="15" fill="rgb(218,4,25)" fg:x="837" fg:w="1"/><text x="68.2435%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="67.9935%" y="245" width="0.0812%" height="15" fill="rgb(253,91,49)" fg:x="837" fg:w="1"/><text x="68.2435%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="67.9935%" y="229" width="0.0812%" height="15" fill="rgb(228,155,29)" fg:x="837" fg:w="1"/><text x="68.2435%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.9935%" y="213" width="0.0812%" height="15" fill="rgb(243,57,37)" fg:x="837" fg:w="1"/><text x="68.2435%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="67.9935%" y="197" width="0.0812%" height="15" fill="rgb(244,167,17)" fg:x="837" fg:w="1"/><text x="68.2435%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="67.9935%" y="181" width="0.0812%" height="15" fill="rgb(207,181,38)" fg:x="837" fg:w="1"/><text x="68.2435%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="67.9935%" y="165" width="0.0812%" height="15" fill="rgb(211,8,23)" fg:x="837" fg:w="1"/><text x="68.2435%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="67.9935%" y="149" width="0.0812%" height="15" fill="rgb(235,11,44)" fg:x="837" fg:w="1"/><text x="68.2435%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="67.9935%" y="133" width="0.0812%" height="15" fill="rgb(248,18,52)" fg:x="837" fg:w="1"/><text x="68.2435%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.9935%" y="117" width="0.0812%" height="15" fill="rgb(208,4,7)" fg:x="837" fg:w="1"/><text x="68.2435%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="67.8310%" y="325" width="0.3249%" height="15" fill="rgb(240,17,39)" fg:x="835" fg:w="4"/><text x="68.0810%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="67.8310%" y="309" width="0.3249%" height="15" fill="rgb(207,170,3)" fg:x="835" fg:w="4"/><text x="68.0810%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.0747%" y="293" width="0.0812%" height="15" fill="rgb(236,100,52)" fg:x="838" fg:w="1"/><text x="68.3247%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.0747%" y="277" width="0.0812%" height="15" fill="rgb(246,78,51)" fg:x="838" fg:w="1"/><text x="68.3247%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.41%)</title><rect x="67.8310%" y="341" width="0.4062%" height="15" fill="rgb(211,17,15)" fg:x="835" fg:w="5"/><text x="68.0810%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1560%" y="325" width="0.0812%" height="15" fill="rgb(209,59,46)" fg:x="839" fg:w="1"/><text x="68.4060%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.1560%" y="309" width="0.0812%" height="15" fill="rgb(210,92,25)" fg:x="839" fg:w="1"/><text x="68.4060%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.1560%" y="293" width="0.0812%" height="15" fill="rgb(238,174,52)" fg:x="839" fg:w="1"/><text x="68.4060%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.1560%" y="277" width="0.0812%" height="15" fill="rgb(230,73,7)" fg:x="839" fg:w="1"/><text x="68.4060%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.1560%" y="261" width="0.0812%" height="15" fill="rgb(243,124,40)" fg:x="839" fg:w="1"/><text x="68.4060%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1560%" y="245" width="0.0812%" height="15" fill="rgb(244,170,11)" fg:x="839" fg:w="1"/><text x="68.4060%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="68.1560%" y="229" width="0.0812%" height="15" fill="rgb(207,114,54)" fg:x="839" fg:w="1"/><text x="68.4060%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="68.1560%" y="213" width="0.0812%" height="15" fill="rgb(205,42,20)" fg:x="839" fg:w="1"/><text x="68.4060%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="68.1560%" y="197" width="0.0812%" height="15" fill="rgb(230,30,28)" fg:x="839" fg:w="1"/><text x="68.4060%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="68.1560%" y="181" width="0.0812%" height="15" fill="rgb(205,73,54)" fg:x="839" fg:w="1"/><text x="68.4060%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="68.1560%" y="165" width="0.0812%" height="15" fill="rgb(254,227,23)" fg:x="839" fg:w="1"/><text x="68.4060%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.1560%" y="149" width="0.0812%" height="15" fill="rgb(228,202,34)" fg:x="839" fg:w="1"/><text x="68.4060%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.2372%" y="341" width="0.0812%" height="15" fill="rgb(222,225,37)" fg:x="840" fg:w="1"/><text x="68.4872%" y="351.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.2372%" y="325" width="0.0812%" height="15" fill="rgb(221,14,54)" fg:x="840" fg:w="1"/><text x="68.4872%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="68.2372%" y="309" width="0.0812%" height="15" fill="rgb(254,102,2)" fg:x="840" fg:w="1"/><text x="68.4872%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="68.2372%" y="293" width="0.0812%" height="15" fill="rgb(232,104,17)" fg:x="840" fg:w="1"/><text x="68.4872%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.2372%" y="277" width="0.0812%" height="15" fill="rgb(250,220,14)" fg:x="840" fg:w="1"/><text x="68.4872%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.3184%" y="245" width="0.1625%" height="15" fill="rgb(241,158,9)" fg:x="841" fg:w="2"/><text x="68.5684%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.3997%" y="229" width="0.0812%" height="15" fill="rgb(246,9,43)" fg:x="842" fg:w="1"/><text x="68.6497%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.3997%" y="213" width="0.0812%" height="15" fill="rgb(206,73,33)" fg:x="842" fg:w="1"/><text x="68.6497%" y="223.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="68.3184%" y="341" width="0.4062%" height="15" fill="rgb(222,79,8)" fg:x="841" fg:w="5"/><text x="68.5684%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="68.3184%" y="325" width="0.4062%" height="15" fill="rgb(234,8,54)" fg:x="841" fg:w="5"/><text x="68.5684%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="68.3184%" y="309" width="0.4062%" height="15" fill="rgb(209,134,38)" fg:x="841" fg:w="5"/><text x="68.5684%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.41%)</title><rect x="68.3184%" y="293" width="0.4062%" height="15" fill="rgb(230,127,29)" fg:x="841" fg:w="5"/><text x="68.5684%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="68.3184%" y="277" width="0.4062%" height="15" fill="rgb(242,44,41)" fg:x="841" fg:w="5"/><text x="68.5684%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.41%)</title><rect x="68.3184%" y="261" width="0.4062%" height="15" fill="rgb(222,56,43)" fg:x="841" fg:w="5"/><text x="68.5684%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="68.4809%" y="245" width="0.2437%" height="15" fill="rgb(238,39,47)" fg:x="843" fg:w="3"/><text x="68.7309%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.4809%" y="229" width="0.2437%" height="15" fill="rgb(226,79,43)" fg:x="843" fg:w="3"/><text x="68.7309%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="68.6434%" y="213" width="0.0812%" height="15" fill="rgb(242,105,53)" fg:x="845" fg:w="1"/><text x="68.8934%" y="223.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="68.6434%" y="197" width="0.0812%" height="15" fill="rgb(251,132,46)" fg:x="845" fg:w="1"/><text x="68.8934%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="68.6434%" y="181" width="0.0812%" height="15" fill="rgb(231,77,14)" fg:x="845" fg:w="1"/><text x="68.8934%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.6434%" y="165" width="0.0812%" height="15" fill="rgb(240,135,9)" fg:x="845" fg:w="1"/><text x="68.8934%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.6434%" y="149" width="0.0812%" height="15" fill="rgb(248,109,14)" fg:x="845" fg:w="1"/><text x="68.8934%" y="159.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.30%)</title><rect x="67.8310%" y="357" width="1.2998%" height="15" fill="rgb(227,146,52)" fg:x="835" fg:w="16"/><text x="68.0810%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.41%)</title><rect x="68.7246%" y="341" width="0.4062%" height="15" fill="rgb(232,54,3)" fg:x="846" fg:w="5"/><text x="68.9746%" y="351.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.41%)</title><rect x="68.7246%" y="325" width="0.4062%" height="15" fill="rgb(229,201,43)" fg:x="846" fg:w="5"/><text x="68.9746%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="68.7246%" y="309" width="0.4062%" height="15" fill="rgb(252,161,33)" fg:x="846" fg:w="5"/><text x="68.9746%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="68.7246%" y="293" width="0.4062%" height="15" fill="rgb(226,146,40)" fg:x="846" fg:w="5"/><text x="68.9746%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.41%)</title><rect x="68.7246%" y="277" width="0.4062%" height="15" fill="rgb(219,47,25)" fg:x="846" fg:w="5"/><text x="68.9746%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.41%)</title><rect x="68.7246%" y="261" width="0.4062%" height="15" fill="rgb(250,135,13)" fg:x="846" fg:w="5"/><text x="68.9746%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="68.8058%" y="245" width="0.3249%" height="15" fill="rgb(219,229,18)" fg:x="847" fg:w="4"/><text x="69.0558%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.8871%" y="229" width="0.2437%" height="15" fill="rgb(217,152,27)" fg:x="848" fg:w="3"/><text x="69.1371%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.8871%" y="213" width="0.2437%" height="15" fill="rgb(225,71,47)" fg:x="848" fg:w="3"/><text x="69.1371%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.9683%" y="197" width="0.1625%" height="15" fill="rgb(220,139,14)" fg:x="849" fg:w="2"/><text x="69.2183%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.0496%" y="181" width="0.0812%" height="15" fill="rgb(247,54,32)" fg:x="850" fg:w="1"/><text x="69.2996%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.0496%" y="165" width="0.0812%" height="15" fill="rgb(252,131,39)" fg:x="850" fg:w="1"/><text x="69.2996%" y="175.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0496%" y="149" width="0.0812%" height="15" fill="rgb(210,108,39)" fg:x="850" fg:w="1"/><text x="69.2996%" y="159.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.0496%" y="133" width="0.0812%" height="15" fill="rgb(205,23,29)" fg:x="850" fg:w="1"/><text x="69.2996%" y="143.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (470 samples, 38.18%)</title><rect x="31.0317%" y="629" width="38.1803%" height="15" fill="rgb(246,139,46)" fg:x="382" fg:w="470"/><text x="31.2817%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perf..</text></g><g><title>kernel::plugins::mw::apply_middleware (470 samples, 38.18%)</title><rect x="31.0317%" y="613" width="38.1803%" height="15" fill="rgb(250,81,26)" fg:x="382" fg:w="470"/><text x="31.2817%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (470 samples, 38.18%)</title><rect x="31.0317%" y="597" width="38.1803%" height="15" fill="rgb(214,104,7)" fg:x="382" fg:w="470"/><text x="31.2817%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (470 samples, 38.18%)</title><rect x="31.0317%" y="581" width="38.1803%" height="15" fill="rgb(233,189,8)" fg:x="382" fg:w="470"/><text x="31.2817%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plug..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (459 samples, 37.29%)</title><rect x="31.9253%" y="565" width="37.2868%" height="15" fill="rgb(228,141,17)" fg:x="393" fg:w="459"/><text x="32.1753%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (459 samples, 37.29%)</title><rect x="31.9253%" y="549" width="37.2868%" height="15" fill="rgb(247,157,1)" fg:x="393" fg:w="459"/><text x="32.1753%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (459 samples, 37.29%)</title><rect x="31.9253%" y="533" width="37.2868%" height="15" fill="rgb(249,225,5)" fg:x="393" fg:w="459"/><text x="32.1753%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (459 samples, 37.29%)</title><rect x="31.9253%" y="517" width="37.2868%" height="15" fill="rgb(242,55,13)" fg:x="393" fg:w="459"/><text x="32.1753%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (459 samples, 37.29%)</title><rect x="31.9253%" y="501" width="37.2868%" height="15" fill="rgb(230,49,50)" fg:x="393" fg:w="459"/><text x="32.1753%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (459 samples, 37.29%)</title><rect x="31.9253%" y="485" width="37.2868%" height="15" fill="rgb(241,111,38)" fg:x="393" fg:w="459"/><text x="32.1753%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (459 samples, 37.29%)</title><rect x="31.9253%" y="469" width="37.2868%" height="15" fill="rgb(252,155,4)" fg:x="393" fg:w="459"/><text x="32.1753%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (459 samples, 37.29%)</title><rect x="31.9253%" y="453" width="37.2868%" height="15" fill="rgb(212,69,32)" fg:x="393" fg:w="459"/><text x="32.1753%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (459 samples, 37.29%)</title><rect x="31.9253%" y="437" width="37.2868%" height="15" fill="rgb(243,107,47)" fg:x="393" fg:w="459"/><text x="32.1753%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::action..</text></g><g><title>plugins_core::looking::model::new_area_observation (445 samples, 36.15%)</title><rect x="33.0626%" y="421" width="36.1495%" height="15" fill="rgb(247,130,12)" fg:x="407" fg:w="445"/><text x="33.3126%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (18 samples, 1.46%)</title><rect x="67.7498%" y="405" width="1.4622%" height="15" fill="rgb(233,74,16)" fg:x="834" fg:w="18"/><text x="67.9998%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (18 samples, 1.46%)</title><rect x="67.7498%" y="389" width="1.4622%" height="15" fill="rgb(208,58,18)" fg:x="834" fg:w="18"/><text x="67.9998%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (18 samples, 1.46%)</title><rect x="67.7498%" y="373" width="1.4622%" height="15" fill="rgb(242,225,1)" fg:x="834" fg:w="18"/><text x="67.9998%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="69.1308%" y="357" width="0.0812%" height="15" fill="rgb(249,39,40)" fg:x="851" fg:w="1"/><text x="69.3808%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.1308%" y="341" width="0.0812%" height="15" fill="rgb(207,72,44)" fg:x="851" fg:w="1"/><text x="69.3808%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3745%" y="597" width="0.0812%" height="15" fill="rgb(215,193,12)" fg:x="854" fg:w="1"/><text x="69.6245%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3745%" y="581" width="0.0812%" height="15" fill="rgb(248,41,39)" fg:x="854" fg:w="1"/><text x="69.6245%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="69.4557%" y="597" width="0.0812%" height="15" fill="rgb(253,85,4)" fg:x="855" fg:w="1"/><text x="69.7057%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.4557%" y="581" width="0.0812%" height="15" fill="rgb(243,70,31)" fg:x="855" fg:w="1"/><text x="69.7057%" y="591.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (5 samples, 0.41%)</title><rect x="69.2120%" y="629" width="0.4062%" height="15" fill="rgb(253,195,26)" fg:x="852" fg:w="5"/><text x="69.4620%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="69.2120%" y="613" width="0.4062%" height="15" fill="rgb(243,42,11)" fg:x="852" fg:w="5"/><text x="69.4620%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.5370%" y="597" width="0.0812%" height="15" fill="rgb(239,66,17)" fg:x="856" fg:w="1"/><text x="69.7870%" y="607.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="69.6182%" y="629" width="0.0812%" height="15" fill="rgb(217,132,21)" fg:x="857" fg:w="1"/><text x="69.8682%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7807%" y="533" width="0.0812%" height="15" fill="rgb(252,202,21)" fg:x="859" fg:w="1"/><text x="70.0307%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.7807%" y="517" width="0.0812%" height="15" fill="rgb(233,98,36)" fg:x="859" fg:w="1"/><text x="70.0307%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.7807%" y="501" width="0.0812%" height="15" fill="rgb(216,153,54)" fg:x="859" fg:w="1"/><text x="70.0307%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.7807%" y="485" width="0.0812%" height="15" fill="rgb(250,99,7)" fg:x="859" fg:w="1"/><text x="70.0307%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.7807%" y="469" width="0.0812%" height="15" fill="rgb(207,56,50)" fg:x="859" fg:w="1"/><text x="70.0307%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.7807%" y="453" width="0.0812%" height="15" fill="rgb(244,61,34)" fg:x="859" fg:w="1"/><text x="70.0307%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.7807%" y="437" width="0.0812%" height="15" fill="rgb(241,50,38)" fg:x="859" fg:w="1"/><text x="70.0307%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7807%" y="565" width="0.1625%" height="15" fill="rgb(212,166,30)" fg:x="859" fg:w="2"/><text x="70.0307%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.7807%" y="549" width="0.1625%" height="15" fill="rgb(249,127,32)" fg:x="859" fg:w="2"/><text x="70.0307%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8619%" y="533" width="0.0812%" height="15" fill="rgb(209,103,0)" fg:x="860" fg:w="1"/><text x="70.1119%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.8619%" y="517" width="0.0812%" height="15" fill="rgb(238,209,51)" fg:x="860" fg:w="1"/><text x="70.1119%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8619%" y="501" width="0.0812%" height="15" fill="rgb(237,56,23)" fg:x="860" fg:w="1"/><text x="70.1119%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.8619%" y="485" width="0.0812%" height="15" fill="rgb(215,153,46)" fg:x="860" fg:w="1"/><text x="70.1119%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.8619%" y="469" width="0.0812%" height="15" fill="rgb(224,49,31)" fg:x="860" fg:w="1"/><text x="70.1119%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.8619%" y="453" width="0.0812%" height="15" fill="rgb(250,18,42)" fg:x="860" fg:w="1"/><text x="70.1119%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.8619%" y="437" width="0.0812%" height="15" fill="rgb(215,176,39)" fg:x="860" fg:w="1"/><text x="70.1119%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.8619%" y="421" width="0.0812%" height="15" fill="rgb(223,77,29)" fg:x="860" fg:w="1"/><text x="70.1119%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.8619%" y="405" width="0.0812%" height="15" fill="rgb(234,94,52)" fg:x="860" fg:w="1"/><text x="70.1119%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="69.7807%" y="581" width="0.2437%" height="15" fill="rgb(220,154,50)" fg:x="859" fg:w="3"/><text x="70.0307%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9431%" y="565" width="0.0812%" height="15" fill="rgb(212,11,10)" fg:x="861" fg:w="1"/><text x="70.1931%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.9431%" y="549" width="0.0812%" height="15" fill="rgb(205,166,19)" fg:x="861" fg:w="1"/><text x="70.1931%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.9431%" y="533" width="0.0812%" height="15" fill="rgb(244,198,16)" fg:x="861" fg:w="1"/><text x="70.1931%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.9431%" y="517" width="0.0812%" height="15" fill="rgb(219,69,12)" fg:x="861" fg:w="1"/><text x="70.1931%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.9431%" y="501" width="0.0812%" height="15" fill="rgb(245,30,7)" fg:x="861" fg:w="1"/><text x="70.1931%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9431%" y="485" width="0.0812%" height="15" fill="rgb(218,221,48)" fg:x="861" fg:w="1"/><text x="70.1931%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.9431%" y="469" width="0.0812%" height="15" fill="rgb(216,66,15)" fg:x="861" fg:w="1"/><text x="70.1931%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.9431%" y="453" width="0.0812%" height="15" fill="rgb(226,122,50)" fg:x="861" fg:w="1"/><text x="70.1931%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.9431%" y="437" width="0.0812%" height="15" fill="rgb(239,156,16)" fg:x="861" fg:w="1"/><text x="70.1931%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.9431%" y="421" width="0.0812%" height="15" fill="rgb(224,27,38)" fg:x="861" fg:w="1"/><text x="70.1931%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.9431%" y="405" width="0.0812%" height="15" fill="rgb(224,39,27)" fg:x="861" fg:w="1"/><text x="70.1931%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9431%" y="389" width="0.0812%" height="15" fill="rgb(215,92,29)" fg:x="861" fg:w="1"/><text x="70.1931%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0244%" y="485" width="0.0812%" height="15" fill="rgb(207,159,16)" fg:x="862" fg:w="1"/><text x="70.2744%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.0244%" y="533" width="0.1625%" height="15" fill="rgb(238,163,47)" fg:x="862" fg:w="2"/><text x="70.2744%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.0244%" y="517" width="0.1625%" height="15" fill="rgb(219,91,49)" fg:x="862" fg:w="2"/><text x="70.2744%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.0244%" y="501" width="0.1625%" height="15" fill="rgb(227,167,31)" fg:x="862" fg:w="2"/><text x="70.2744%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1056%" y="485" width="0.0812%" height="15" fill="rgb(234,80,54)" fg:x="863" fg:w="1"/><text x="70.3556%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1056%" y="469" width="0.0812%" height="15" fill="rgb(212,114,2)" fg:x="863" fg:w="1"/><text x="70.3556%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1056%" y="453" width="0.0812%" height="15" fill="rgb(234,50,24)" fg:x="863" fg:w="1"/><text x="70.3556%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1056%" y="437" width="0.0812%" height="15" fill="rgb(221,68,8)" fg:x="863" fg:w="1"/><text x="70.3556%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1056%" y="421" width="0.0812%" height="15" fill="rgb(254,180,31)" fg:x="863" fg:w="1"/><text x="70.3556%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1056%" y="405" width="0.0812%" height="15" fill="rgb(247,130,50)" fg:x="863" fg:w="1"/><text x="70.3556%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.1056%" y="389" width="0.0812%" height="15" fill="rgb(211,109,4)" fg:x="863" fg:w="1"/><text x="70.3556%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.1056%" y="373" width="0.0812%" height="15" fill="rgb(238,50,21)" fg:x="863" fg:w="1"/><text x="70.3556%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.1056%" y="357" width="0.0812%" height="15" fill="rgb(225,57,45)" fg:x="863" fg:w="1"/><text x="70.3556%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.1056%" y="341" width="0.0812%" height="15" fill="rgb(209,196,50)" fg:x="863" fg:w="1"/><text x="70.3556%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.1056%" y="325" width="0.0812%" height="15" fill="rgb(242,140,13)" fg:x="863" fg:w="1"/><text x="70.3556%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1056%" y="309" width="0.0812%" height="15" fill="rgb(217,111,7)" fg:x="863" fg:w="1"/><text x="70.3556%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="70.2681%" y="437" width="0.0812%" height="15" fill="rgb(253,193,51)" fg:x="865" fg:w="1"/><text x="70.5181%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.2681%" y="421" width="0.0812%" height="15" fill="rgb(252,70,29)" fg:x="865" fg:w="1"/><text x="70.5181%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="70.2681%" y="405" width="0.0812%" height="15" fill="rgb(232,127,12)" fg:x="865" fg:w="1"/><text x="70.5181%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2681%" y="389" width="0.0812%" height="15" fill="rgb(211,180,21)" fg:x="865" fg:w="1"/><text x="70.5181%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2681%" y="373" width="0.0812%" height="15" fill="rgb(229,72,13)" fg:x="865" fg:w="1"/><text x="70.5181%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2681%" y="357" width="0.0812%" height="15" fill="rgb(240,211,49)" fg:x="865" fg:w="1"/><text x="70.5181%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2681%" y="341" width="0.0812%" height="15" fill="rgb(219,149,40)" fg:x="865" fg:w="1"/><text x="70.5181%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2681%" y="325" width="0.0812%" height="15" fill="rgb(210,127,46)" fg:x="865" fg:w="1"/><text x="70.5181%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2681%" y="309" width="0.0812%" height="15" fill="rgb(220,106,7)" fg:x="865" fg:w="1"/><text x="70.5181%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2681%" y="293" width="0.0812%" height="15" fill="rgb(249,31,22)" fg:x="865" fg:w="1"/><text x="70.5181%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2681%" y="277" width="0.0812%" height="15" fill="rgb(253,1,49)" fg:x="865" fg:w="1"/><text x="70.5181%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2681%" y="261" width="0.0812%" height="15" fill="rgb(227,144,33)" fg:x="865" fg:w="1"/><text x="70.5181%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2681%" y="245" width="0.0812%" height="15" fill="rgb(249,163,44)" fg:x="865" fg:w="1"/><text x="70.5181%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2681%" y="229" width="0.0812%" height="15" fill="rgb(234,15,39)" fg:x="865" fg:w="1"/><text x="70.5181%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2681%" y="213" width="0.0812%" height="15" fill="rgb(207,66,16)" fg:x="865" fg:w="1"/><text x="70.5181%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2681%" y="197" width="0.0812%" height="15" fill="rgb(233,112,24)" fg:x="865" fg:w="1"/><text x="70.5181%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.3493%" y="405" width="0.0812%" height="15" fill="rgb(230,90,22)" fg:x="866" fg:w="1"/><text x="70.5993%" y="415.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="70.5118%" y="373" width="0.0812%" height="15" fill="rgb(229,61,13)" fg:x="868" fg:w="1"/><text x="70.7618%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="70.5118%" y="357" width="0.0812%" height="15" fill="rgb(225,57,24)" fg:x="868" fg:w="1"/><text x="70.7618%" y="367.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="70.5118%" y="341" width="0.0812%" height="15" fill="rgb(208,169,48)" fg:x="868" fg:w="1"/><text x="70.7618%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.41%)</title><rect x="70.2681%" y="485" width="0.4062%" height="15" fill="rgb(244,218,51)" fg:x="865" fg:w="5"/><text x="70.5181%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.41%)</title><rect x="70.2681%" y="469" width="0.4062%" height="15" fill="rgb(214,148,10)" fg:x="865" fg:w="5"/><text x="70.5181%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.41%)</title><rect x="70.2681%" y="453" width="0.4062%" height="15" fill="rgb(225,174,27)" fg:x="865" fg:w="5"/><text x="70.5181%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.3493%" y="437" width="0.3249%" height="15" fill="rgb(230,96,26)" fg:x="866" fg:w="4"/><text x="70.5993%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.3493%" y="421" width="0.3249%" height="15" fill="rgb(232,10,30)" fg:x="866" fg:w="4"/><text x="70.5993%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (3 samples, 0.24%)</title><rect x="70.4305%" y="405" width="0.2437%" height="15" fill="rgb(222,8,50)" fg:x="867" fg:w="3"/><text x="70.6805%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (3 samples, 0.24%)</title><rect x="70.4305%" y="389" width="0.2437%" height="15" fill="rgb(213,81,27)" fg:x="867" fg:w="3"/><text x="70.6805%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::unexpected (1 samples, 0.08%)</title><rect x="70.5930%" y="373" width="0.0812%" height="15" fill="rgb(245,50,10)" fg:x="869" fg:w="1"/><text x="70.8430%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6742%" y="421" width="0.0812%" height="15" fill="rgb(216,100,18)" fg:x="870" fg:w="1"/><text x="70.9242%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.65%)</title><rect x="70.1868%" y="501" width="0.6499%" height="15" fill="rgb(236,147,54)" fg:x="864" fg:w="8"/><text x="70.4368%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.6742%" y="485" width="0.1625%" height="15" fill="rgb(205,143,26)" fg:x="870" fg:w="2"/><text x="70.9242%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.6742%" y="469" width="0.1625%" height="15" fill="rgb(236,26,9)" fg:x="870" fg:w="2"/><text x="70.9242%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="70.6742%" y="453" width="0.1625%" height="15" fill="rgb(221,165,53)" fg:x="870" fg:w="2"/><text x="70.9242%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="70.6742%" y="437" width="0.1625%" height="15" fill="rgb(214,110,17)" fg:x="870" fg:w="2"/><text x="70.9242%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.7555%" y="421" width="0.0812%" height="15" fill="rgb(237,197,12)" fg:x="871" fg:w="1"/><text x="71.0055%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="70.1868%" y="533" width="0.7311%" height="15" fill="rgb(205,84,17)" fg:x="864" fg:w="9"/><text x="70.4368%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.73%)</title><rect x="70.1868%" y="517" width="0.7311%" height="15" fill="rgb(237,18,45)" fg:x="864" fg:w="9"/><text x="70.4368%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.8367%" y="501" width="0.0812%" height="15" fill="rgb(221,87,14)" fg:x="872" fg:w="1"/><text x="71.0867%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="70.9992%" y="453" width="0.0812%" height="15" fill="rgb(238,186,15)" fg:x="874" fg:w="1"/><text x="71.2492%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="70.9992%" y="437" width="0.0812%" height="15" fill="rgb(208,115,11)" fg:x="874" fg:w="1"/><text x="71.2492%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 1.22%)</title><rect x="70.0244%" y="581" width="1.2185%" height="15" fill="rgb(254,175,0)" fg:x="862" fg:w="15"/><text x="70.2744%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.22%)</title><rect x="70.0244%" y="565" width="1.2185%" height="15" fill="rgb(227,24,42)" fg:x="862" fg:w="15"/><text x="70.2744%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (15 samples, 1.22%)</title><rect x="70.0244%" y="549" width="1.2185%" height="15" fill="rgb(223,211,37)" fg:x="862" fg:w="15"/><text x="70.2744%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="70.9180%" y="533" width="0.3249%" height="15" fill="rgb(235,49,27)" fg:x="873" fg:w="4"/><text x="71.1680%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="70.9180%" y="517" width="0.3249%" height="15" fill="rgb(254,97,51)" fg:x="873" fg:w="4"/><text x="71.1680%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.9180%" y="501" width="0.3249%" height="15" fill="rgb(249,51,40)" fg:x="873" fg:w="4"/><text x="71.1680%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="70.9180%" y="485" width="0.3249%" height="15" fill="rgb(210,128,45)" fg:x="873" fg:w="4"/><text x="71.1680%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="70.9180%" y="469" width="0.3249%" height="15" fill="rgb(224,137,50)" fg:x="873" fg:w="4"/><text x="71.1680%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.0804%" y="453" width="0.1625%" height="15" fill="rgb(242,15,9)" fg:x="875" fg:w="2"/><text x="71.3304%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="71.1617%" y="437" width="0.0812%" height="15" fill="rgb(233,187,41)" fg:x="876" fg:w="1"/><text x="71.4117%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.1617%" y="421" width="0.0812%" height="15" fill="rgb(227,2,29)" fg:x="876" fg:w="1"/><text x="71.4117%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2429%" y="517" width="0.0812%" height="15" fill="rgb(222,70,3)" fg:x="877" fg:w="1"/><text x="71.4929%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (20 samples, 1.62%)</title><rect x="69.7807%" y="613" width="1.6247%" height="15" fill="rgb(213,11,42)" fg:x="859" fg:w="20"/><text x="70.0307%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (20 samples, 1.62%)</title><rect x="69.7807%" y="597" width="1.6247%" height="15" fill="rgb(225,150,9)" fg:x="859" fg:w="20"/><text x="70.0307%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.2429%" y="581" width="0.1625%" height="15" fill="rgb(230,162,45)" fg:x="877" fg:w="2"/><text x="71.4929%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.2429%" y="565" width="0.1625%" height="15" fill="rgb(222,14,52)" fg:x="877" fg:w="2"/><text x="71.4929%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.2429%" y="549" width="0.1625%" height="15" fill="rgb(254,198,14)" fg:x="877" fg:w="2"/><text x="71.4929%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.2429%" y="533" width="0.1625%" height="15" fill="rgb(220,217,30)" fg:x="877" fg:w="2"/><text x="71.4929%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3241%" y="517" width="0.0812%" height="15" fill="rgb(215,146,41)" fg:x="878" fg:w="1"/><text x="71.5741%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.3241%" y="501" width="0.0812%" height="15" fill="rgb(217,27,36)" fg:x="878" fg:w="1"/><text x="71.5741%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.3241%" y="485" width="0.0812%" height="15" fill="rgb(219,218,39)" fg:x="878" fg:w="1"/><text x="71.5741%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.4866%" y="549" width="0.0812%" height="15" fill="rgb(219,4,42)" fg:x="880" fg:w="1"/><text x="71.7366%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4866%" y="533" width="0.0812%" height="15" fill="rgb(249,119,36)" fg:x="880" fg:w="1"/><text x="71.7366%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.4866%" y="517" width="0.0812%" height="15" fill="rgb(209,23,33)" fg:x="880" fg:w="1"/><text x="71.7366%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.4866%" y="501" width="0.0812%" height="15" fill="rgb(211,10,0)" fg:x="880" fg:w="1"/><text x="71.7366%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.4866%" y="485" width="0.0812%" height="15" fill="rgb(208,99,37)" fg:x="880" fg:w="1"/><text x="71.7366%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.4866%" y="469" width="0.0812%" height="15" fill="rgb(213,132,31)" fg:x="880" fg:w="1"/><text x="71.7366%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4866%" y="453" width="0.0812%" height="15" fill="rgb(243,129,40)" fg:x="880" fg:w="1"/><text x="71.7366%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.4866%" y="437" width="0.0812%" height="15" fill="rgb(210,66,33)" fg:x="880" fg:w="1"/><text x="71.7366%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.4866%" y="421" width="0.0812%" height="15" fill="rgb(209,189,4)" fg:x="880" fg:w="1"/><text x="71.7366%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.4866%" y="405" width="0.0812%" height="15" fill="rgb(214,107,37)" fg:x="880" fg:w="1"/><text x="71.7366%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.4866%" y="389" width="0.0812%" height="15" fill="rgb(245,88,54)" fg:x="880" fg:w="1"/><text x="71.7366%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.4866%" y="373" width="0.0812%" height="15" fill="rgb(205,146,20)" fg:x="880" fg:w="1"/><text x="71.7366%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.4866%" y="357" width="0.0812%" height="15" fill="rgb(220,161,25)" fg:x="880" fg:w="1"/><text x="71.7366%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.4866%" y="565" width="0.1625%" height="15" fill="rgb(215,152,15)" fg:x="880" fg:w="2"/><text x="71.7366%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.5678%" y="549" width="0.0812%" height="15" fill="rgb(233,192,44)" fg:x="881" fg:w="1"/><text x="71.8178%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.5678%" y="533" width="0.0812%" height="15" fill="rgb(240,170,46)" fg:x="881" fg:w="1"/><text x="71.8178%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.5678%" y="517" width="0.0812%" height="15" fill="rgb(207,104,33)" fg:x="881" fg:w="1"/><text x="71.8178%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="71.4054%" y="597" width="0.3249%" height="15" fill="rgb(219,21,39)" fg:x="879" fg:w="4"/><text x="71.6554%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.4866%" y="581" width="0.2437%" height="15" fill="rgb(214,133,29)" fg:x="880" fg:w="3"/><text x="71.7366%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6491%" y="565" width="0.0812%" height="15" fill="rgb(226,93,6)" fg:x="882" fg:w="1"/><text x="71.8991%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.6491%" y="549" width="0.0812%" height="15" fill="rgb(252,222,34)" fg:x="882" fg:w="1"/><text x="71.8991%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.6491%" y="533" width="0.0812%" height="15" fill="rgb(252,92,48)" fg:x="882" fg:w="1"/><text x="71.8991%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.6491%" y="517" width="0.0812%" height="15" fill="rgb(245,223,24)" fg:x="882" fg:w="1"/><text x="71.8991%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.6491%" y="501" width="0.0812%" height="15" fill="rgb(205,176,3)" fg:x="882" fg:w="1"/><text x="71.8991%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6491%" y="485" width="0.0812%" height="15" fill="rgb(235,151,15)" fg:x="882" fg:w="1"/><text x="71.8991%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.6491%" y="469" width="0.0812%" height="15" fill="rgb(237,209,11)" fg:x="882" fg:w="1"/><text x="71.8991%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.6491%" y="453" width="0.0812%" height="15" fill="rgb(243,227,24)" fg:x="882" fg:w="1"/><text x="71.8991%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.6491%" y="437" width="0.0812%" height="15" fill="rgb(239,193,16)" fg:x="882" fg:w="1"/><text x="71.8991%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.6491%" y="421" width="0.0812%" height="15" fill="rgb(231,27,9)" fg:x="882" fg:w="1"/><text x="71.8991%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.6491%" y="405" width="0.0812%" height="15" fill="rgb(219,169,10)" fg:x="882" fg:w="1"/><text x="71.8991%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.6491%" y="389" width="0.0812%" height="15" fill="rgb(244,229,43)" fg:x="882" fg:w="1"/><text x="71.8991%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::new (1 samples, 0.08%)</title><rect x="71.7303%" y="597" width="0.0812%" height="15" fill="rgb(254,38,20)" fg:x="883" fg:w="1"/><text x="71.9803%" y="607.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8115%" y="501" width="0.1625%" height="15" fill="rgb(250,47,30)" fg:x="884" fg:w="2"/><text x="72.0615%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="71.8115%" y="485" width="0.1625%" height="15" fill="rgb(224,124,36)" fg:x="884" fg:w="2"/><text x="72.0615%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="71.8115%" y="469" width="0.1625%" height="15" fill="rgb(246,68,51)" fg:x="884" fg:w="2"/><text x="72.0615%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="71.8928%" y="453" width="0.0812%" height="15" fill="rgb(253,43,49)" fg:x="885" fg:w="1"/><text x="72.1428%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="71.8928%" y="437" width="0.0812%" height="15" fill="rgb(219,54,36)" fg:x="885" fg:w="1"/><text x="72.1428%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="71.8928%" y="421" width="0.0812%" height="15" fill="rgb(227,133,34)" fg:x="885" fg:w="1"/><text x="72.1428%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.0552%" y="469" width="0.0812%" height="15" fill="rgb(247,227,15)" fg:x="887" fg:w="1"/><text x="72.3052%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="71.9740%" y="501" width="0.2437%" height="15" fill="rgb(229,96,14)" fg:x="886" fg:w="3"/><text x="72.2240%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="72.0552%" y="485" width="0.1625%" height="15" fill="rgb(220,79,17)" fg:x="887" fg:w="2"/><text x="72.3052%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="72.1365%" y="469" width="0.0812%" height="15" fill="rgb(205,131,53)" fg:x="888" fg:w="1"/><text x="72.3865%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.1365%" y="453" width="0.0812%" height="15" fill="rgb(209,50,29)" fg:x="888" fg:w="1"/><text x="72.3865%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.49%)</title><rect x="71.8115%" y="597" width="0.4874%" height="15" fill="rgb(245,86,46)" fg:x="884" fg:w="6"/><text x="72.0615%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.49%)</title><rect x="71.8115%" y="581" width="0.4874%" height="15" fill="rgb(235,66,46)" fg:x="884" fg:w="6"/><text x="72.0615%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="71.8115%" y="565" width="0.4874%" height="15" fill="rgb(232,148,31)" fg:x="884" fg:w="6"/><text x="72.0615%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.49%)</title><rect x="71.8115%" y="549" width="0.4874%" height="15" fill="rgb(217,149,8)" fg:x="884" fg:w="6"/><text x="72.0615%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.49%)</title><rect x="71.8115%" y="533" width="0.4874%" height="15" fill="rgb(209,183,11)" fg:x="884" fg:w="6"/><text x="72.0615%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.49%)</title><rect x="71.8115%" y="517" width="0.4874%" height="15" fill="rgb(208,55,20)" fg:x="884" fg:w="6"/><text x="72.0615%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2177%" y="501" width="0.0812%" height="15" fill="rgb(218,39,14)" fg:x="889" fg:w="1"/><text x="72.4677%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2177%" y="485" width="0.0812%" height="15" fill="rgb(216,169,33)" fg:x="889" fg:w="1"/><text x="72.4677%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.2177%" y="469" width="0.0812%" height="15" fill="rgb(233,80,24)" fg:x="889" fg:w="1"/><text x="72.4677%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.2177%" y="453" width="0.0812%" height="15" fill="rgb(213,179,31)" fg:x="889" fg:w="1"/><text x="72.4677%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.2177%" y="437" width="0.0812%" height="15" fill="rgb(209,19,5)" fg:x="889" fg:w="1"/><text x="72.4677%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.2177%" y="421" width="0.0812%" height="15" fill="rgb(219,18,35)" fg:x="889" fg:w="1"/><text x="72.4677%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2177%" y="405" width="0.0812%" height="15" fill="rgb(209,169,16)" fg:x="889" fg:w="1"/><text x="72.4677%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3802%" y="533" width="0.0812%" height="15" fill="rgb(245,90,51)" fg:x="891" fg:w="1"/><text x="72.6302%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3802%" y="517" width="0.0812%" height="15" fill="rgb(220,99,45)" fg:x="891" fg:w="1"/><text x="72.6302%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3802%" y="501" width="0.0812%" height="15" fill="rgb(249,89,25)" fg:x="891" fg:w="1"/><text x="72.6302%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3802%" y="485" width="0.0812%" height="15" fill="rgb(239,193,0)" fg:x="891" fg:w="1"/><text x="72.6302%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3802%" y="469" width="0.0812%" height="15" fill="rgb(231,126,1)" fg:x="891" fg:w="1"/><text x="72.6302%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.3802%" y="453" width="0.0812%" height="15" fill="rgb(243,166,3)" fg:x="891" fg:w="1"/><text x="72.6302%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.3802%" y="437" width="0.0812%" height="15" fill="rgb(223,22,34)" fg:x="891" fg:w="1"/><text x="72.6302%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3802%" y="421" width="0.0812%" height="15" fill="rgb(251,52,51)" fg:x="891" fg:w="1"/><text x="72.6302%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.3802%" y="405" width="0.0812%" height="15" fill="rgb(221,165,28)" fg:x="891" fg:w="1"/><text x="72.6302%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3802%" y="389" width="0.0812%" height="15" fill="rgb(218,121,47)" fg:x="891" fg:w="1"/><text x="72.6302%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (35 samples, 2.84%)</title><rect x="69.6994%" y="629" width="2.8432%" height="15" fill="rgb(209,120,9)" fg:x="858" fg:w="35"/><text x="69.9494%" y="639.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.14%)</title><rect x="71.4054%" y="613" width="1.1373%" height="15" fill="rgb(236,68,12)" fg:x="879" fg:w="14"/><text x="71.6554%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="72.2989%" y="597" width="0.2437%" height="15" fill="rgb(225,194,26)" fg:x="890" fg:w="3"/><text x="72.5489%" y="607.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="72.2989%" y="581" width="0.2437%" height="15" fill="rgb(231,84,39)" fg:x="890" fg:w="3"/><text x="72.5489%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.2989%" y="565" width="0.2437%" height="15" fill="rgb(210,11,45)" fg:x="890" fg:w="3"/><text x="72.5489%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.2989%" y="549" width="0.2437%" height="15" fill="rgb(224,54,52)" fg:x="890" fg:w="3"/><text x="72.5489%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.4614%" y="533" width="0.0812%" height="15" fill="rgb(238,102,14)" fg:x="892" fg:w="1"/><text x="72.7114%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.6239%" y="565" width="0.0812%" height="15" fill="rgb(243,160,52)" fg:x="894" fg:w="1"/><text x="72.8739%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6239%" y="549" width="0.0812%" height="15" fill="rgb(216,114,19)" fg:x="894" fg:w="1"/><text x="72.8739%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.6239%" y="533" width="0.0812%" height="15" fill="rgb(244,166,37)" fg:x="894" fg:w="1"/><text x="72.8739%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.6239%" y="517" width="0.0812%" height="15" fill="rgb(246,29,44)" fg:x="894" fg:w="1"/><text x="72.8739%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.6239%" y="501" width="0.0812%" height="15" fill="rgb(215,56,53)" fg:x="894" fg:w="1"/><text x="72.8739%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.6239%" y="485" width="0.0812%" height="15" fill="rgb(217,60,2)" fg:x="894" fg:w="1"/><text x="72.8739%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.6239%" y="469" width="0.0812%" height="15" fill="rgb(207,26,24)" fg:x="894" fg:w="1"/><text x="72.8739%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="72.6239%" y="453" width="0.0812%" height="15" fill="rgb(252,210,15)" fg:x="894" fg:w="1"/><text x="72.8739%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="72.6239%" y="437" width="0.0812%" height="15" fill="rgb(253,209,26)" fg:x="894" fg:w="1"/><text x="72.8739%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="72.6239%" y="421" width="0.0812%" height="15" fill="rgb(238,170,14)" fg:x="894" fg:w="1"/><text x="72.8739%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="72.6239%" y="405" width="0.0812%" height="15" fill="rgb(216,178,15)" fg:x="894" fg:w="1"/><text x="72.8739%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="72.6239%" y="389" width="0.0812%" height="15" fill="rgb(250,197,2)" fg:x="894" fg:w="1"/><text x="72.8739%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="72.6239%" y="581" width="0.2437%" height="15" fill="rgb(212,70,42)" fg:x="894" fg:w="3"/><text x="72.8739%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.7051%" y="565" width="0.1625%" height="15" fill="rgb(227,213,9)" fg:x="895" fg:w="2"/><text x="72.9551%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="72.7051%" y="549" width="0.1625%" height="15" fill="rgb(245,99,25)" fg:x="895" fg:w="2"/><text x="72.9551%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="72.7051%" y="533" width="0.1625%" height="15" fill="rgb(250,82,29)" fg:x="895" fg:w="2"/><text x="72.9551%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="72.7051%" y="517" width="0.1625%" height="15" fill="rgb(241,226,54)" fg:x="895" fg:w="2"/><text x="72.9551%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="72.7051%" y="501" width="0.1625%" height="15" fill="rgb(221,99,41)" fg:x="895" fg:w="2"/><text x="72.9551%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="72.7051%" y="485" width="0.1625%" height="15" fill="rgb(213,90,21)" fg:x="895" fg:w="2"/><text x="72.9551%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="72.7051%" y="469" width="0.1625%" height="15" fill="rgb(205,208,24)" fg:x="895" fg:w="2"/><text x="72.9551%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="72.7051%" y="453" width="0.1625%" height="15" fill="rgb(246,31,12)" fg:x="895" fg:w="2"/><text x="72.9551%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="72.7051%" y="437" width="0.1625%" height="15" fill="rgb(213,154,6)" fg:x="895" fg:w="2"/><text x="72.9551%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="72.7051%" y="421" width="0.1625%" height="15" fill="rgb(222,163,29)" fg:x="895" fg:w="2"/><text x="72.9551%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="72.7051%" y="405" width="0.1625%" height="15" fill="rgb(227,201,8)" fg:x="895" fg:w="2"/><text x="72.9551%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="72.7051%" y="389" width="0.1625%" height="15" fill="rgb(233,9,32)" fg:x="895" fg:w="2"/><text x="72.9551%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="72.8676%" y="581" width="0.0812%" height="15" fill="rgb(217,54,24)" fg:x="897" fg:w="1"/><text x="73.1176%" y="591.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="72.8676%" y="565" width="0.0812%" height="15" fill="rgb(235,192,0)" fg:x="897" fg:w="1"/><text x="73.1176%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.8676%" y="549" width="0.0812%" height="15" fill="rgb(235,45,9)" fg:x="897" fg:w="1"/><text x="73.1176%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.8676%" y="533" width="0.0812%" height="15" fill="rgb(246,42,40)" fg:x="897" fg:w="1"/><text x="73.1176%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="72.9488%" y="581" width="0.0812%" height="15" fill="rgb(248,111,24)" fg:x="898" fg:w="1"/><text x="73.1988%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.9488%" y="565" width="0.0812%" height="15" fill="rgb(249,65,22)" fg:x="898" fg:w="1"/><text x="73.1988%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="72.9488%" y="549" width="0.0812%" height="15" fill="rgb(238,111,51)" fg:x="898" fg:w="1"/><text x="73.1988%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="72.9488%" y="533" width="0.0812%" height="15" fill="rgb(250,118,22)" fg:x="898" fg:w="1"/><text x="73.1988%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.0301%" y="533" width="0.0812%" height="15" fill="rgb(234,84,26)" fg:x="899" fg:w="1"/><text x="73.2801%" y="543.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.1113%" y="501" width="0.0812%" height="15" fill="rgb(243,172,12)" fg:x="900" fg:w="1"/><text x="73.3613%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.1925%" y="485" width="0.1625%" height="15" fill="rgb(236,150,49)" fg:x="901" fg:w="2"/><text x="73.4425%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1925%" y="469" width="0.1625%" height="15" fill="rgb(225,197,26)" fg:x="901" fg:w="2"/><text x="73.4425%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.1925%" y="453" width="0.1625%" height="15" fill="rgb(214,17,42)" fg:x="901" fg:w="2"/><text x="73.4425%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.1925%" y="437" width="0.1625%" height="15" fill="rgb(224,165,40)" fg:x="901" fg:w="2"/><text x="73.4425%" y="447.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.2738%" y="421" width="0.0812%" height="15" fill="rgb(246,100,4)" fg:x="902" fg:w="1"/><text x="73.5238%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="73.3550%" y="485" width="0.1625%" height="15" fill="rgb(222,103,0)" fg:x="903" fg:w="2"/><text x="73.6050%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.3550%" y="469" width="0.1625%" height="15" fill="rgb(227,189,26)" fg:x="903" fg:w="2"/><text x="73.6050%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.4362%" y="453" width="0.0812%" height="15" fill="rgb(214,202,17)" fg:x="904" fg:w="1"/><text x="73.6862%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.4362%" y="437" width="0.0812%" height="15" fill="rgb(229,111,3)" fg:x="904" fg:w="1"/><text x="73.6862%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.5175%" y="453" width="0.0812%" height="15" fill="rgb(229,172,15)" fg:x="905" fg:w="1"/><text x="73.7675%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.5175%" y="469" width="0.1625%" height="15" fill="rgb(230,224,35)" fg:x="905" fg:w="2"/><text x="73.7675%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.5987%" y="453" width="0.0812%" height="15" fill="rgb(251,141,6)" fg:x="906" fg:w="1"/><text x="73.8487%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5987%" y="437" width="0.0812%" height="15" fill="rgb(225,208,6)" fg:x="906" fg:w="1"/><text x="73.8487%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.5987%" y="421" width="0.0812%" height="15" fill="rgb(246,181,16)" fg:x="906" fg:w="1"/><text x="73.8487%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.5987%" y="405" width="0.0812%" height="15" fill="rgb(227,129,36)" fg:x="906" fg:w="1"/><text x="73.8487%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.5987%" y="389" width="0.0812%" height="15" fill="rgb(248,117,24)" fg:x="906" fg:w="1"/><text x="73.8487%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.5987%" y="373" width="0.0812%" height="15" fill="rgb(214,185,35)" fg:x="906" fg:w="1"/><text x="73.8487%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.5987%" y="357" width="0.0812%" height="15" fill="rgb(236,150,34)" fg:x="906" fg:w="1"/><text x="73.8487%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.5987%" y="341" width="0.0812%" height="15" fill="rgb(243,228,27)" fg:x="906" fg:w="1"/><text x="73.8487%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (8 samples, 0.65%)</title><rect x="73.1113%" y="533" width="0.6499%" height="15" fill="rgb(245,77,44)" fg:x="900" fg:w="8"/><text x="73.3613%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (8 samples, 0.65%)</title><rect x="73.1113%" y="517" width="0.6499%" height="15" fill="rgb(235,214,42)" fg:x="900" fg:w="8"/><text x="73.3613%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (7 samples, 0.57%)</title><rect x="73.1925%" y="501" width="0.5686%" height="15" fill="rgb(221,74,3)" fg:x="901" fg:w="7"/><text x="73.4425%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="73.5175%" y="485" width="0.2437%" height="15" fill="rgb(206,121,29)" fg:x="905" fg:w="3"/><text x="73.7675%" y="495.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="73.6799%" y="469" width="0.0812%" height="15" fill="rgb(249,131,53)" fg:x="907" fg:w="1"/><text x="73.9299%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (909 samples, 73.84%)</title><rect x="0.0000%" y="709" width="73.8424%" height="15" fill="rgb(236,170,29)" fg:x="0" fg:w="909"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (909 samples, 73.84%)</title><rect x="0.0000%" y="693" width="73.8424%" height="15" fill="rgb(247,96,15)" fg:x="0" fg:w="909"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (909 samples, 73.84%)</title><rect x="0.0000%" y="677" width="73.8424%" height="15" fill="rgb(211,210,7)" fg:x="0" fg:w="909"/><text x="0.2500%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (529 samples, 42.97%)</title><rect x="30.8692%" y="661" width="42.9732%" height="15" fill="rgb(240,88,50)" fg:x="380" fg:w="529"/><text x="31.1192%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (529 samples, 42.97%)</title><rect x="30.8692%" y="645" width="42.9732%" height="15" fill="rgb(209,229,26)" fg:x="380" fg:w="529"/><text x="31.1192%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (16 samples, 1.30%)</title><rect x="72.5426%" y="629" width="1.2998%" height="15" fill="rgb(210,68,23)" fg:x="893" fg:w="16"/><text x="72.7926%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.30%)</title><rect x="72.5426%" y="613" width="1.2998%" height="15" fill="rgb(229,180,13)" fg:x="893" fg:w="16"/><text x="72.7926%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (16 samples, 1.30%)</title><rect x="72.5426%" y="597" width="1.2998%" height="15" fill="rgb(236,53,44)" fg:x="893" fg:w="16"/><text x="72.7926%" y="607.50"></text></g><g><title>kernel::model::entity::Entity::from_value (10 samples, 0.81%)</title><rect x="73.0301%" y="581" width="0.8123%" height="15" fill="rgb(244,214,29)" fg:x="899" fg:w="10"/><text x="73.2801%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (10 samples, 0.81%)</title><rect x="73.0301%" y="565" width="0.8123%" height="15" fill="rgb(220,75,29)" fg:x="899" fg:w="10"/><text x="73.2801%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.81%)</title><rect x="73.0301%" y="549" width="0.8123%" height="15" fill="rgb(214,183,37)" fg:x="899" fg:w="10"/><text x="73.2801%" y="559.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="73.7612%" y="533" width="0.0812%" height="15" fill="rgb(239,117,29)" fg:x="908" fg:w="1"/><text x="74.0112%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.8424%" y="661" width="0.1625%" height="15" fill="rgb(237,171,35)" fg:x="909" fg:w="2"/><text x="74.0924%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.8424%" y="645" width="0.1625%" height="15" fill="rgb(229,178,53)" fg:x="909" fg:w="2"/><text x="74.0924%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.8424%" y="629" width="0.1625%" height="15" fill="rgb(210,102,19)" fg:x="909" fg:w="2"/><text x="74.0924%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="73.8424%" y="613" width="0.1625%" height="15" fill="rgb(235,127,22)" fg:x="909" fg:w="2"/><text x="74.0924%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="74.0049%" y="645" width="0.1625%" height="15" fill="rgb(244,31,31)" fg:x="911" fg:w="2"/><text x="74.2549%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.0049%" y="629" width="0.1625%" height="15" fill="rgb(231,43,21)" fg:x="911" fg:w="2"/><text x="74.2549%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.2486%" y="565" width="0.0812%" height="15" fill="rgb(217,131,35)" fg:x="914" fg:w="1"/><text x="74.4986%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.4110%" y="517" width="0.1625%" height="15" fill="rgb(221,149,4)" fg:x="916" fg:w="2"/><text x="74.6610%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="74.4110%" y="501" width="0.1625%" height="15" fill="rgb(232,170,28)" fg:x="916" fg:w="2"/><text x="74.6610%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.41%)</title><rect x="74.2486%" y="581" width="0.4062%" height="15" fill="rgb(238,56,10)" fg:x="914" fg:w="5"/><text x="74.4986%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="74.3298%" y="565" width="0.3249%" height="15" fill="rgb(235,196,14)" fg:x="915" fg:w="4"/><text x="74.5798%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="74.3298%" y="549" width="0.3249%" height="15" fill="rgb(216,45,48)" fg:x="915" fg:w="4"/><text x="74.5798%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="74.3298%" y="533" width="0.3249%" height="15" fill="rgb(238,213,17)" fg:x="915" fg:w="4"/><text x="74.5798%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5735%" y="517" width="0.0812%" height="15" fill="rgb(212,13,2)" fg:x="918" fg:w="1"/><text x="74.8235%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.6548%" y="565" width="0.1625%" height="15" fill="rgb(240,114,20)" fg:x="919" fg:w="2"/><text x="74.9048%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="74.6548%" y="549" width="0.1625%" height="15" fill="rgb(228,41,40)" fg:x="919" fg:w="2"/><text x="74.9048%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.7360%" y="533" width="0.0812%" height="15" fill="rgb(244,132,35)" fg:x="920" fg:w="1"/><text x="74.9860%" y="543.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.89%)</title><rect x="74.0049%" y="661" width="0.8936%" height="15" fill="rgb(253,189,4)" fg:x="911" fg:w="11"/><text x="74.2549%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (9 samples, 0.73%)</title><rect x="74.1673%" y="645" width="0.7311%" height="15" fill="rgb(224,37,19)" fg:x="913" fg:w="9"/><text x="74.4173%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="74.1673%" y="629" width="0.7311%" height="15" fill="rgb(235,223,18)" fg:x="913" fg:w="9"/><text x="74.4173%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.73%)</title><rect x="74.1673%" y="613" width="0.7311%" height="15" fill="rgb(235,163,25)" fg:x="913" fg:w="9"/><text x="74.4173%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="74.1673%" y="597" width="0.7311%" height="15" fill="rgb(217,145,28)" fg:x="913" fg:w="9"/><text x="74.4173%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="74.6548%" y="581" width="0.2437%" height="15" fill="rgb(223,223,32)" fg:x="919" fg:w="3"/><text x="74.9048%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.8172%" y="565" width="0.0812%" height="15" fill="rgb(227,189,39)" fg:x="921" fg:w="1"/><text x="75.0672%" y="575.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="74.8985%" y="613" width="0.0812%" height="15" fill="rgb(248,10,22)" fg:x="922" fg:w="1"/><text x="75.1485%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.9797%" y="565" width="0.0812%" height="15" fill="rgb(248,46,39)" fg:x="923" fg:w="1"/><text x="75.2297%" y="575.50"></text></g><g><title>dlerror (1 samples, 0.08%)</title><rect x="75.1422%" y="549" width="0.0812%" height="15" fill="rgb(248,113,48)" fg:x="925" fg:w="1"/><text x="75.3922%" y="559.50"></text></g><g><title>__asprintf (1 samples, 0.08%)</title><rect x="75.1422%" y="533" width="0.0812%" height="15" fill="rgb(245,16,25)" fg:x="925" fg:w="1"/><text x="75.3922%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.1422%" y="517" width="0.0812%" height="15" fill="rgb(249,152,16)" fg:x="925" fg:w="1"/><text x="75.3922%" y="527.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (7 samples, 0.57%)</title><rect x="74.9797%" y="597" width="0.5686%" height="15" fill="rgb(250,16,1)" fg:x="923" fg:w="7"/><text x="75.2297%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (7 samples, 0.57%)</title><rect x="74.9797%" y="581" width="0.5686%" height="15" fill="rgb(249,138,3)" fg:x="923" fg:w="7"/><text x="75.2297%" y="591.50"></text></g><g><title>libloading::safe::Library::new (6 samples, 0.49%)</title><rect x="75.0609%" y="565" width="0.4874%" height="15" fill="rgb(227,71,41)" fg:x="924" fg:w="6"/><text x="75.3109%" y="575.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="75.2234%" y="549" width="0.3249%" height="15" fill="rgb(209,184,23)" fg:x="926" fg:w="4"/><text x="75.4734%" y="559.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="75.2234%" y="533" width="0.3249%" height="15" fill="rgb(223,215,31)" fg:x="926" fg:w="4"/><text x="75.4734%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="75.2234%" y="517" width="0.3249%" height="15" fill="rgb(210,146,28)" fg:x="926" fg:w="4"/><text x="75.4734%" y="527.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="75.2234%" y="501" width="0.3249%" height="15" fill="rgb(209,183,41)" fg:x="926" fg:w="4"/><text x="75.4734%" y="511.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="75.2234%" y="485" width="0.3249%" height="15" fill="rgb(209,224,45)" fg:x="926" fg:w="4"/><text x="75.4734%" y="495.50"></text></g><g><title>engine::session::Session::initialize (8 samples, 0.65%)</title><rect x="74.9797%" y="613" width="0.6499%" height="15" fill="rgb(224,209,51)" fg:x="923" fg:w="8"/><text x="75.2297%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="75.5483%" y="597" width="0.0812%" height="15" fill="rgb(223,17,39)" fg:x="930" fg:w="1"/><text x="75.7983%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.5483%" y="581" width="0.0812%" height="15" fill="rgb(234,204,37)" fg:x="930" fg:w="1"/><text x="75.7983%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.5483%" y="565" width="0.0812%" height="15" fill="rgb(236,120,5)" fg:x="930" fg:w="1"/><text x="75.7983%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.5483%" y="549" width="0.0812%" height="15" fill="rgb(248,97,27)" fg:x="930" fg:w="1"/><text x="75.7983%" y="559.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.5483%" y="533" width="0.0812%" height="15" fill="rgb(240,66,17)" fg:x="930" fg:w="1"/><text x="75.7983%" y="543.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (10 samples, 0.81%)</title><rect x="74.8985%" y="661" width="0.8123%" height="15" fill="rgb(210,79,3)" fg:x="922" fg:w="10"/><text x="75.1485%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (10 samples, 0.81%)</title><rect x="74.8985%" y="645" width="0.8123%" height="15" fill="rgb(214,176,27)" fg:x="922" fg:w="10"/><text x="75.1485%" y="655.50"></text></g><g><title>engine::session::Session::new (10 samples, 0.81%)</title><rect x="74.8985%" y="629" width="0.8123%" height="15" fill="rgb(235,185,3)" fg:x="922" fg:w="10"/><text x="75.1485%" y="639.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (1 samples, 0.08%)</title><rect x="75.6296%" y="613" width="0.0812%" height="15" fill="rgb(227,24,12)" fg:x="931" fg:w="1"/><text x="75.8796%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="75.6296%" y="597" width="0.0812%" height="15" fill="rgb(252,169,48)" fg:x="931" fg:w="1"/><text x="75.8796%" y="607.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="75.6296%" y="581" width="0.0812%" height="15" fill="rgb(212,65,1)" fg:x="931" fg:w="1"/><text x="75.8796%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.6296%" y="565" width="0.0812%" height="15" fill="rgb(242,39,24)" fg:x="931" fg:w="1"/><text x="75.8796%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7108%" y="645" width="0.0812%" height="15" fill="rgb(249,32,23)" fg:x="932" fg:w="1"/><text x="75.9608%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7108%" y="629" width="0.0812%" height="15" fill="rgb(251,195,23)" fg:x="932" fg:w="1"/><text x="75.9608%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7108%" y="613" width="0.0812%" height="15" fill="rgb(236,174,8)" fg:x="932" fg:w="1"/><text x="75.9608%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.7108%" y="597" width="0.0812%" height="15" fill="rgb(220,197,8)" fg:x="932" fg:w="1"/><text x="75.9608%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="75.7920%" y="629" width="0.0812%" height="15" fill="rgb(240,108,37)" fg:x="933" fg:w="1"/><text x="76.0420%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7920%" y="613" width="0.0812%" height="15" fill="rgb(232,176,24)" fg:x="933" fg:w="1"/><text x="76.0420%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="75.7920%" y="597" width="0.0812%" height="15" fill="rgb(243,35,29)" fg:x="933" fg:w="1"/><text x="76.0420%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="75.7920%" y="581" width="0.0812%" height="15" fill="rgb(210,37,18)" fg:x="933" fg:w="1"/><text x="76.0420%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="75.7920%" y="565" width="0.0812%" height="15" fill="rgb(224,184,40)" fg:x="933" fg:w="1"/><text x="76.0420%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="75.7920%" y="549" width="0.0812%" height="15" fill="rgb(236,39,29)" fg:x="933" fg:w="1"/><text x="76.0420%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7920%" y="533" width="0.0812%" height="15" fill="rgb(232,48,39)" fg:x="933" fg:w="1"/><text x="76.0420%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="75.7920%" y="517" width="0.0812%" height="15" fill="rgb(236,34,42)" fg:x="933" fg:w="1"/><text x="76.0420%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="75.7920%" y="501" width="0.0812%" height="15" fill="rgb(243,106,37)" fg:x="933" fg:w="1"/><text x="76.0420%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="75.7920%" y="485" width="0.0812%" height="15" fill="rgb(218,96,6)" fg:x="933" fg:w="1"/><text x="76.0420%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="75.7920%" y="469" width="0.0812%" height="15" fill="rgb(235,130,12)" fg:x="933" fg:w="1"/><text x="76.0420%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="75.7920%" y="453" width="0.0812%" height="15" fill="rgb(231,95,0)" fg:x="933" fg:w="1"/><text x="76.0420%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.7920%" y="437" width="0.0812%" height="15" fill="rgb(228,12,23)" fg:x="933" fg:w="1"/><text x="76.0420%" y="447.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="75.8733%" y="533" width="0.1625%" height="15" fill="rgb(216,12,1)" fg:x="934" fg:w="2"/><text x="76.1233%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="75.8733%" y="517" width="0.1625%" height="15" fill="rgb(219,59,3)" fg:x="934" fg:w="2"/><text x="76.1233%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="75.8733%" y="501" width="0.1625%" height="15" fill="rgb(215,208,46)" fg:x="934" fg:w="2"/><text x="76.1233%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="75.9545%" y="485" width="0.0812%" height="15" fill="rgb(254,224,29)" fg:x="935" fg:w="1"/><text x="76.2045%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="75.9545%" y="469" width="0.0812%" height="15" fill="rgb(232,14,29)" fg:x="935" fg:w="1"/><text x="76.2045%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.9545%" y="453" width="0.0812%" height="15" fill="rgb(208,45,52)" fg:x="935" fg:w="1"/><text x="76.2045%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.9545%" y="437" width="0.0812%" height="15" fill="rgb(234,191,28)" fg:x="935" fg:w="1"/><text x="76.2045%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="76.0357%" y="517" width="0.0812%" height="15" fill="rgb(244,67,43)" fg:x="936" fg:w="1"/><text x="76.2857%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.0357%" y="501" width="0.0812%" height="15" fill="rgb(236,189,24)" fg:x="936" fg:w="1"/><text x="76.2857%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="76.0357%" y="485" width="0.0812%" height="15" fill="rgb(239,214,33)" fg:x="936" fg:w="1"/><text x="76.2857%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.0357%" y="469" width="0.0812%" height="15" fill="rgb(226,176,41)" fg:x="936" fg:w="1"/><text x="76.2857%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.0357%" y="453" width="0.0812%" height="15" fill="rgb(248,47,8)" fg:x="936" fg:w="1"/><text x="76.2857%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.0357%" y="437" width="0.0812%" height="15" fill="rgb(218,81,44)" fg:x="936" fg:w="1"/><text x="76.2857%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.0357%" y="421" width="0.0812%" height="15" fill="rgb(213,98,6)" fg:x="936" fg:w="1"/><text x="76.2857%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="76.1170%" y="501" width="0.0812%" height="15" fill="rgb(222,85,22)" fg:x="937" fg:w="1"/><text x="76.3670%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.1170%" y="485" width="0.0812%" height="15" fill="rgb(239,46,39)" fg:x="937" fg:w="1"/><text x="76.3670%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1982%" y="469" width="0.0812%" height="15" fill="rgb(237,12,29)" fg:x="938" fg:w="1"/><text x="76.4482%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="76.1170%" y="517" width="0.2437%" height="15" fill="rgb(214,77,8)" fg:x="937" fg:w="3"/><text x="76.3670%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="76.1982%" y="501" width="0.1625%" height="15" fill="rgb(217,168,37)" fg:x="938" fg:w="2"/><text x="76.4482%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="76.1982%" y="485" width="0.1625%" height="15" fill="rgb(221,217,23)" fg:x="938" fg:w="2"/><text x="76.4482%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="76.2794%" y="469" width="0.0812%" height="15" fill="rgb(243,229,36)" fg:x="939" fg:w="1"/><text x="76.5294%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.57%)</title><rect x="75.8733%" y="549" width="0.5686%" height="15" fill="rgb(251,163,40)" fg:x="934" fg:w="7"/><text x="76.1233%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="76.0357%" y="533" width="0.4062%" height="15" fill="rgb(237,222,12)" fg:x="936" fg:w="5"/><text x="76.2857%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="76.3607%" y="517" width="0.0812%" height="15" fill="rgb(248,132,6)" fg:x="940" fg:w="1"/><text x="76.6107%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.4419%" y="549" width="0.1625%" height="15" fill="rgb(227,167,50)" fg:x="941" fg:w="2"/><text x="76.6919%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="76.4419%" y="533" width="0.1625%" height="15" fill="rgb(242,84,37)" fg:x="941" fg:w="2"/><text x="76.6919%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="76.4419%" y="517" width="0.1625%" height="15" fill="rgb(212,4,50)" fg:x="941" fg:w="2"/><text x="76.6919%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.5232%" y="501" width="0.0812%" height="15" fill="rgb(230,228,32)" fg:x="942" fg:w="1"/><text x="76.7732%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6044%" y="501" width="0.0812%" height="15" fill="rgb(248,217,23)" fg:x="943" fg:w="1"/><text x="76.8544%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.6044%" y="485" width="0.0812%" height="15" fill="rgb(238,197,32)" fg:x="943" fg:w="1"/><text x="76.8544%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="76.6044%" y="469" width="0.0812%" height="15" fill="rgb(236,106,1)" fg:x="943" fg:w="1"/><text x="76.8544%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="76.7669%" y="485" width="0.1625%" height="15" fill="rgb(219,228,13)" fg:x="945" fg:w="2"/><text x="77.0169%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.7669%" y="469" width="0.1625%" height="15" fill="rgb(238,30,35)" fg:x="945" fg:w="2"/><text x="77.0169%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="76.7669%" y="453" width="0.1625%" height="15" fill="rgb(236,70,23)" fg:x="945" fg:w="2"/><text x="77.0169%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="76.7669%" y="437" width="0.1625%" height="15" fill="rgb(249,104,48)" fg:x="945" fg:w="2"/><text x="77.0169%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="76.8481%" y="421" width="0.0812%" height="15" fill="rgb(254,117,50)" fg:x="946" fg:w="1"/><text x="77.0981%" y="431.50"></text></g><g><title>engine::session::Session::flush (15 samples, 1.22%)</title><rect x="75.7920%" y="645" width="1.2185%" height="15" fill="rgb(223,152,4)" fg:x="933" fg:w="15"/><text x="76.0420%" y="655.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.14%)</title><rect x="75.8733%" y="629" width="1.1373%" height="15" fill="rgb(245,6,2)" fg:x="934" fg:w="14"/><text x="76.1233%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.14%)</title><rect x="75.8733%" y="613" width="1.1373%" height="15" fill="rgb(249,150,24)" fg:x="934" fg:w="14"/><text x="76.1233%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (14 samples, 1.14%)</title><rect x="75.8733%" y="597" width="1.1373%" height="15" fill="rgb(228,185,42)" fg:x="934" fg:w="14"/><text x="76.1233%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 1.14%)</title><rect x="75.8733%" y="581" width="1.1373%" height="15" fill="rgb(226,39,33)" fg:x="934" fg:w="14"/><text x="76.1233%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (14 samples, 1.14%)</title><rect x="75.8733%" y="565" width="1.1373%" height="15" fill="rgb(221,166,19)" fg:x="934" fg:w="14"/><text x="76.1233%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.41%)</title><rect x="76.6044%" y="549" width="0.4062%" height="15" fill="rgb(209,109,2)" fg:x="943" fg:w="5"/><text x="76.8544%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (5 samples, 0.41%)</title><rect x="76.6044%" y="533" width="0.4062%" height="15" fill="rgb(252,216,26)" fg:x="943" fg:w="5"/><text x="76.8544%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.41%)</title><rect x="76.6044%" y="517" width="0.4062%" height="15" fill="rgb(227,173,36)" fg:x="943" fg:w="5"/><text x="76.8544%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (4 samples, 0.32%)</title><rect x="76.6856%" y="501" width="0.3249%" height="15" fill="rgb(209,90,7)" fg:x="944" fg:w="4"/><text x="76.9356%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="76.9293%" y="485" width="0.0812%" height="15" fill="rgb(250,194,11)" fg:x="947" fg:w="1"/><text x="77.1793%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="77.0106%" y="645" width="0.0812%" height="15" fill="rgb(220,72,50)" fg:x="948" fg:w="1"/><text x="77.2606%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="77.0106%" y="629" width="0.0812%" height="15" fill="rgb(222,106,48)" fg:x="948" fg:w="1"/><text x="77.2606%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="77.0106%" y="613" width="0.0812%" height="15" fill="rgb(216,220,45)" fg:x="948" fg:w="1"/><text x="77.2606%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.0106%" y="597" width="0.0812%" height="15" fill="rgb(234,112,18)" fg:x="948" fg:w="1"/><text x="77.2606%" y="607.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="77.0918%" y="613" width="0.0812%" height="15" fill="rgb(206,179,9)" fg:x="949" fg:w="1"/><text x="77.3418%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.0918%" y="597" width="0.0812%" height="15" fill="rgb(215,115,40)" fg:x="949" fg:w="1"/><text x="77.3418%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="77.0918%" y="581" width="0.0812%" height="15" fill="rgb(222,69,34)" fg:x="949" fg:w="1"/><text x="77.3418%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="77.0918%" y="565" width="0.0812%" height="15" fill="rgb(209,161,10)" fg:x="949" fg:w="1"/><text x="77.3418%" y="575.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="77.1730%" y="597" width="0.0812%" height="15" fill="rgb(217,6,38)" fg:x="950" fg:w="1"/><text x="77.4230%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="77.1730%" y="581" width="0.0812%" height="15" fill="rgb(229,229,48)" fg:x="950" fg:w="1"/><text x="77.4230%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.1730%" y="565" width="0.0812%" height="15" fill="rgb(225,21,28)" fg:x="950" fg:w="1"/><text x="77.4230%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.1730%" y="549" width="0.0812%" height="15" fill="rgb(206,33,13)" fg:x="950" fg:w="1"/><text x="77.4230%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1730%" y="533" width="0.0812%" height="15" fill="rgb(242,178,17)" fg:x="950" fg:w="1"/><text x="77.4230%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1730%" y="517" width="0.0812%" height="15" fill="rgb(220,162,5)" fg:x="950" fg:w="1"/><text x="77.4230%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.1730%" y="501" width="0.0812%" height="15" fill="rgb(210,33,43)" fg:x="950" fg:w="1"/><text x="77.4230%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="77.0918%" y="645" width="0.2437%" height="15" fill="rgb(216,116,54)" fg:x="949" fg:w="3"/><text x="77.3418%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="77.0918%" y="629" width="0.2437%" height="15" fill="rgb(249,92,24)" fg:x="949" fg:w="3"/><text x="77.3418%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="77.1730%" y="613" width="0.1625%" height="15" fill="rgb(231,189,14)" fg:x="950" fg:w="2"/><text x="77.4230%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2543%" y="597" width="0.0812%" height="15" fill="rgb(230,8,41)" fg:x="951" fg:w="1"/><text x="77.5043%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.2543%" y="581" width="0.0812%" height="15" fill="rgb(249,7,27)" fg:x="951" fg:w="1"/><text x="77.5043%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="77.2543%" y="565" width="0.0812%" height="15" fill="rgb(232,86,5)" fg:x="951" fg:w="1"/><text x="77.5043%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.2543%" y="549" width="0.0812%" height="15" fill="rgb(224,175,18)" fg:x="951" fg:w="1"/><text x="77.5043%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2543%" y="533" width="0.0812%" height="15" fill="rgb(220,129,12)" fg:x="951" fg:w="1"/><text x="77.5043%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="77.2543%" y="517" width="0.0812%" height="15" fill="rgb(210,19,36)" fg:x="951" fg:w="1"/><text x="77.5043%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (1 samples, 0.08%)</title><rect x="77.3355%" y="645" width="0.0812%" height="15" fill="rgb(219,96,14)" fg:x="952" fg:w="1"/><text x="77.5855%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (1 samples, 0.08%)</title><rect x="77.3355%" y="629" width="0.0812%" height="15" fill="rgb(249,106,1)" fg:x="952" fg:w="1"/><text x="77.5855%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="77.3355%" y="613" width="0.0812%" height="15" fill="rgb(249,155,20)" fg:x="952" fg:w="1"/><text x="77.5855%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3355%" y="597" width="0.0812%" height="15" fill="rgb(244,168,9)" fg:x="952" fg:w="1"/><text x="77.5855%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3355%" y="581" width="0.0812%" height="15" fill="rgb(216,23,50)" fg:x="952" fg:w="1"/><text x="77.5855%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="77.3355%" y="565" width="0.0812%" height="15" fill="rgb(224,219,20)" fg:x="952" fg:w="1"/><text x="77.5855%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.3355%" y="549" width="0.0812%" height="15" fill="rgb(222,156,15)" fg:x="952" fg:w="1"/><text x="77.5855%" y="559.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.4167%" y="613" width="0.0812%" height="15" fill="rgb(231,97,17)" fg:x="953" fg:w="1"/><text x="77.6667%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.4167%" y="597" width="0.0812%" height="15" fill="rgb(218,70,48)" fg:x="953" fg:w="1"/><text x="77.6667%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="77.4167%" y="581" width="0.0812%" height="15" fill="rgb(212,196,52)" fg:x="953" fg:w="1"/><text x="77.6667%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4167%" y="565" width="0.0812%" height="15" fill="rgb(243,203,18)" fg:x="953" fg:w="1"/><text x="77.6667%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="77.4167%" y="549" width="0.0812%" height="15" fill="rgb(252,125,41)" fg:x="953" fg:w="1"/><text x="77.6667%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="77.4167%" y="533" width="0.0812%" height="15" fill="rgb(223,180,33)" fg:x="953" fg:w="1"/><text x="77.6667%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="77.4167%" y="517" width="0.0812%" height="15" fill="rgb(254,159,46)" fg:x="953" fg:w="1"/><text x="77.6667%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="77.4167%" y="501" width="0.0812%" height="15" fill="rgb(254,38,10)" fg:x="953" fg:w="1"/><text x="77.6667%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4167%" y="485" width="0.0812%" height="15" fill="rgb(208,217,32)" fg:x="953" fg:w="1"/><text x="77.6667%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="77.4167%" y="469" width="0.0812%" height="15" fill="rgb(221,120,13)" fg:x="953" fg:w="1"/><text x="77.6667%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="77.4167%" y="453" width="0.0812%" height="15" fill="rgb(246,54,52)" fg:x="953" fg:w="1"/><text x="77.6667%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="77.4167%" y="437" width="0.0812%" height="15" fill="rgb(242,34,25)" fg:x="953" fg:w="1"/><text x="77.6667%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="77.4167%" y="421" width="0.0812%" height="15" fill="rgb(247,209,9)" fg:x="953" fg:w="1"/><text x="77.6667%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="77.4167%" y="405" width="0.0812%" height="15" fill="rgb(228,71,26)" fg:x="953" fg:w="1"/><text x="77.6667%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="77.4167%" y="389" width="0.0812%" height="15" fill="rgb(222,145,49)" fg:x="953" fg:w="1"/><text x="77.6667%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="77.4980%" y="613" width="0.0812%" height="15" fill="rgb(218,121,17)" fg:x="954" fg:w="1"/><text x="77.7480%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="77.4980%" y="597" width="0.0812%" height="15" fill="rgb(244,50,7)" fg:x="954" fg:w="1"/><text x="77.7480%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="77.4980%" y="581" width="0.0812%" height="15" fill="rgb(246,229,37)" fg:x="954" fg:w="1"/><text x="77.7480%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="77.4980%" y="565" width="0.0812%" height="15" fill="rgb(225,18,5)" fg:x="954" fg:w="1"/><text x="77.7480%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="77.4980%" y="549" width="0.0812%" height="15" fill="rgb(213,204,8)" fg:x="954" fg:w="1"/><text x="77.7480%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="77.4980%" y="533" width="0.0812%" height="15" fill="rgb(238,103,6)" fg:x="954" fg:w="1"/><text x="77.7480%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4980%" y="517" width="0.0812%" height="15" fill="rgb(222,25,35)" fg:x="954" fg:w="1"/><text x="77.7480%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4980%" y="501" width="0.0812%" height="15" fill="rgb(213,203,35)" fg:x="954" fg:w="1"/><text x="77.7480%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="77.4980%" y="485" width="0.0812%" height="15" fill="rgb(221,79,53)" fg:x="954" fg:w="1"/><text x="77.7480%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="77.4167%" y="645" width="0.3249%" height="15" fill="rgb(243,200,35)" fg:x="953" fg:w="4"/><text x="77.6667%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="77.4167%" y="629" width="0.3249%" height="15" fill="rgb(248,60,25)" fg:x="953" fg:w="4"/><text x="77.6667%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (2 samples, 0.16%)</title><rect x="77.5792%" y="613" width="0.1625%" height="15" fill="rgb(227,53,46)" fg:x="955" fg:w="2"/><text x="77.8292%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="77.5792%" y="597" width="0.1625%" height="15" fill="rgb(216,120,32)" fg:x="955" fg:w="2"/><text x="77.8292%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6604%" y="581" width="0.0812%" height="15" fill="rgb(220,134,1)" fg:x="956" fg:w="1"/><text x="77.9104%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6604%" y="565" width="0.0812%" height="15" fill="rgb(237,168,5)" fg:x="956" fg:w="1"/><text x="77.9104%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="77.6604%" y="549" width="0.0812%" height="15" fill="rgb(231,100,33)" fg:x="956" fg:w="1"/><text x="77.9104%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="77.6604%" y="533" width="0.0812%" height="15" fill="rgb(236,177,47)" fg:x="956" fg:w="1"/><text x="77.9104%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7417%" y="629" width="0.0812%" height="15" fill="rgb(235,7,49)" fg:x="957" fg:w="1"/><text x="77.9917%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.7417%" y="613" width="0.0812%" height="15" fill="rgb(232,119,22)" fg:x="957" fg:w="1"/><text x="77.9917%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.7417%" y="597" width="0.0812%" height="15" fill="rgb(254,73,53)" fg:x="957" fg:w="1"/><text x="77.9917%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="77.7417%" y="581" width="0.0812%" height="15" fill="rgb(251,35,20)" fg:x="957" fg:w="1"/><text x="77.9917%" y="591.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.9041%" y="565" width="0.0812%" height="15" fill="rgb(241,119,20)" fg:x="959" fg:w="1"/><text x="78.1541%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.9041%" y="549" width="0.0812%" height="15" fill="rgb(207,102,14)" fg:x="959" fg:w="1"/><text x="78.1541%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.9041%" y="533" width="0.0812%" height="15" fill="rgb(248,201,50)" fg:x="959" fg:w="1"/><text x="78.1541%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="77.9854%" y="501" width="0.1625%" height="15" fill="rgb(222,185,44)" fg:x="960" fg:w="2"/><text x="78.2354%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.9854%" y="485" width="0.1625%" height="15" fill="rgb(218,107,18)" fg:x="960" fg:w="2"/><text x="78.2354%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.0666%" y="469" width="0.0812%" height="15" fill="rgb(237,177,39)" fg:x="961" fg:w="1"/><text x="78.3166%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.1478%" y="485" width="0.1625%" height="15" fill="rgb(246,69,6)" fg:x="962" fg:w="2"/><text x="78.3978%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.1478%" y="469" width="0.1625%" height="15" fill="rgb(234,208,37)" fg:x="962" fg:w="2"/><text x="78.3978%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="78.1478%" y="453" width="0.1625%" height="15" fill="rgb(225,4,6)" fg:x="962" fg:w="2"/><text x="78.3978%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="78.1478%" y="437" width="0.1625%" height="15" fill="rgb(233,45,0)" fg:x="962" fg:w="2"/><text x="78.3978%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="78.1478%" y="421" width="0.1625%" height="15" fill="rgb(226,136,5)" fg:x="962" fg:w="2"/><text x="78.3978%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="78.1478%" y="405" width="0.1625%" height="15" fill="rgb(211,91,47)" fg:x="962" fg:w="2"/><text x="78.3978%" y="415.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="78.1478%" y="389" width="0.1625%" height="15" fill="rgb(242,88,51)" fg:x="962" fg:w="2"/><text x="78.3978%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.3103%" y="469" width="0.0812%" height="15" fill="rgb(230,91,28)" fg:x="964" fg:w="1"/><text x="78.5603%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3103%" y="453" width="0.0812%" height="15" fill="rgb(254,186,29)" fg:x="964" fg:w="1"/><text x="78.5603%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3103%" y="437" width="0.0812%" height="15" fill="rgb(238,6,4)" fg:x="964" fg:w="1"/><text x="78.5603%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3103%" y="421" width="0.0812%" height="15" fill="rgb(221,151,16)" fg:x="964" fg:w="1"/><text x="78.5603%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.3103%" y="405" width="0.0812%" height="15" fill="rgb(251,143,52)" fg:x="964" fg:w="1"/><text x="78.5603%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.3103%" y="389" width="0.0812%" height="15" fill="rgb(206,90,15)" fg:x="964" fg:w="1"/><text x="78.5603%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.4728%" y="453" width="0.0812%" height="15" fill="rgb(218,35,8)" fg:x="966" fg:w="1"/><text x="78.7228%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.4728%" y="437" width="0.0812%" height="15" fill="rgb(239,215,6)" fg:x="966" fg:w="1"/><text x="78.7228%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.5540%" y="389" width="0.0812%" height="15" fill="rgb(245,116,39)" fg:x="967" fg:w="1"/><text x="78.8040%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="78.5540%" y="373" width="0.0812%" height="15" fill="rgb(242,65,28)" fg:x="967" fg:w="1"/><text x="78.8040%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="78.5540%" y="357" width="0.0812%" height="15" fill="rgb(252,132,53)" fg:x="967" fg:w="1"/><text x="78.8040%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="78.5540%" y="341" width="0.0812%" height="15" fill="rgb(224,159,50)" fg:x="967" fg:w="1"/><text x="78.8040%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="78.5540%" y="437" width="0.1625%" height="15" fill="rgb(224,93,4)" fg:x="967" fg:w="2"/><text x="78.8040%" y="447.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="78.5540%" y="421" width="0.1625%" height="15" fill="rgb(208,81,34)" fg:x="967" fg:w="2"/><text x="78.8040%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="78.5540%" y="405" width="0.1625%" height="15" fill="rgb(233,92,54)" fg:x="967" fg:w="2"/><text x="78.8040%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="78.6353%" y="389" width="0.0812%" height="15" fill="rgb(237,21,14)" fg:x="968" fg:w="1"/><text x="78.8853%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="78.3916%" y="469" width="0.4062%" height="15" fill="rgb(249,128,51)" fg:x="965" fg:w="5"/><text x="78.6416%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="78.5540%" y="453" width="0.2437%" height="15" fill="rgb(223,129,24)" fg:x="967" fg:w="3"/><text x="78.8040%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.7165%" y="437" width="0.0812%" height="15" fill="rgb(231,168,25)" fg:x="969" fg:w="1"/><text x="78.9665%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.7165%" y="421" width="0.0812%" height="15" fill="rgb(224,39,20)" fg:x="969" fg:w="1"/><text x="78.9665%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.7165%" y="405" width="0.0812%" height="15" fill="rgb(225,152,53)" fg:x="969" fg:w="1"/><text x="78.9665%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (11 samples, 0.89%)</title><rect x="77.9854%" y="517" width="0.8936%" height="15" fill="rgb(252,17,24)" fg:x="960" fg:w="11"/><text x="78.2354%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="78.1478%" y="501" width="0.7311%" height="15" fill="rgb(250,114,30)" fg:x="962" fg:w="9"/><text x="78.3978%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="78.3103%" y="485" width="0.5686%" height="15" fill="rgb(229,5,4)" fg:x="964" fg:w="7"/><text x="78.5603%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.7977%" y="469" width="0.0812%" height="15" fill="rgb(225,176,49)" fg:x="970" fg:w="1"/><text x="79.0477%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9602%" y="469" width="0.0812%" height="15" fill="rgb(224,221,49)" fg:x="972" fg:w="1"/><text x="79.2102%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.0414%" y="469" width="0.0812%" height="15" fill="rgb(253,169,27)" fg:x="973" fg:w="1"/><text x="79.2914%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1227%" y="453" width="0.0812%" height="15" fill="rgb(211,206,16)" fg:x="974" fg:w="1"/><text x="79.3727%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="79.2039%" y="437" width="0.0812%" height="15" fill="rgb(244,87,35)" fg:x="975" fg:w="1"/><text x="79.4539%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="79.2039%" y="421" width="0.0812%" height="15" fill="rgb(246,28,10)" fg:x="975" fg:w="1"/><text x="79.4539%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.2039%" y="405" width="0.0812%" height="15" fill="rgb(229,12,44)" fg:x="975" fg:w="1"/><text x="79.4539%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2039%" y="389" width="0.0812%" height="15" fill="rgb(210,145,37)" fg:x="975" fg:w="1"/><text x="79.4539%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.49%)</title><rect x="78.8790%" y="517" width="0.4874%" height="15" fill="rgb(227,112,52)" fg:x="971" fg:w="6"/><text x="79.1290%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.49%)</title><rect x="78.8790%" y="501" width="0.4874%" height="15" fill="rgb(238,155,34)" fg:x="971" fg:w="6"/><text x="79.1290%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="78.9602%" y="485" width="0.4062%" height="15" fill="rgb(239,226,36)" fg:x="972" fg:w="5"/><text x="79.2102%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="79.1227%" y="469" width="0.2437%" height="15" fill="rgb(230,16,23)" fg:x="974" fg:w="3"/><text x="79.3727%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="79.2039%" y="453" width="0.1625%" height="15" fill="rgb(236,171,36)" fg:x="975" fg:w="2"/><text x="79.4539%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="79.2851%" y="437" width="0.0812%" height="15" fill="rgb(221,22,14)" fg:x="976" fg:w="1"/><text x="79.5351%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.2851%" y="421" width="0.0812%" height="15" fill="rgb(242,43,11)" fg:x="976" fg:w="1"/><text x="79.5351%" y="431.50"></text></g><g><title>engine::session::Session::flush (20 samples, 1.62%)</title><rect x="77.8229%" y="629" width="1.6247%" height="15" fill="rgb(232,69,23)" fg:x="958" fg:w="20"/><text x="78.0729%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (20 samples, 1.62%)</title><rect x="77.8229%" y="613" width="1.6247%" height="15" fill="rgb(216,180,54)" fg:x="958" fg:w="20"/><text x="78.0729%" y="623.50"></text></g><g><title>engine::session::state::State::close (20 samples, 1.62%)</title><rect x="77.8229%" y="597" width="1.6247%" height="15" fill="rgb(216,5,24)" fg:x="958" fg:w="20"/><text x="78.0729%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.54%)</title><rect x="77.9041%" y="581" width="1.5435%" height="15" fill="rgb(225,89,9)" fg:x="959" fg:w="19"/><text x="78.1541%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.46%)</title><rect x="77.9854%" y="565" width="1.4622%" height="15" fill="rgb(243,75,33)" fg:x="960" fg:w="18"/><text x="78.2354%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.46%)</title><rect x="77.9854%" y="549" width="1.4622%" height="15" fill="rgb(247,141,45)" fg:x="960" fg:w="18"/><text x="78.2354%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.46%)</title><rect x="77.9854%" y="533" width="1.4622%" height="15" fill="rgb(232,177,36)" fg:x="960" fg:w="18"/><text x="78.2354%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (1 samples, 0.08%)</title><rect x="79.3664%" y="517" width="0.0812%" height="15" fill="rgb(219,125,36)" fg:x="977" fg:w="1"/><text x="79.6164%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3664%" y="501" width="0.0812%" height="15" fill="rgb(227,94,9)" fg:x="977" fg:w="1"/><text x="79.6164%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.3664%" y="485" width="0.0812%" height="15" fill="rgb(240,34,52)" fg:x="977" fg:w="1"/><text x="79.6164%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.3664%" y="469" width="0.0812%" height="15" fill="rgb(216,45,12)" fg:x="977" fg:w="1"/><text x="79.6164%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="79.3664%" y="453" width="0.0812%" height="15" fill="rgb(246,21,19)" fg:x="977" fg:w="1"/><text x="79.6164%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.3664%" y="437" width="0.0812%" height="15" fill="rgb(213,98,42)" fg:x="977" fg:w="1"/><text x="79.6164%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.3664%" y="421" width="0.0812%" height="15" fill="rgb(250,136,47)" fg:x="977" fg:w="1"/><text x="79.6164%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3664%" y="405" width="0.0812%" height="15" fill="rgb(251,124,27)" fg:x="977" fg:w="1"/><text x="79.6164%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.3664%" y="389" width="0.0812%" height="15" fill="rgb(229,180,14)" fg:x="977" fg:w="1"/><text x="79.6164%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3664%" y="373" width="0.0812%" height="15" fill="rgb(245,216,25)" fg:x="977" fg:w="1"/><text x="79.6164%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.3664%" y="357" width="0.0812%" height="15" fill="rgb(251,43,5)" fg:x="977" fg:w="1"/><text x="79.6164%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.3664%" y="341" width="0.0812%" height="15" fill="rgb(250,128,24)" fg:x="977" fg:w="1"/><text x="79.6164%" y="351.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="79.4476%" y="629" width="0.0812%" height="15" fill="rgb(217,117,27)" fg:x="978" fg:w="1"/><text x="79.6976%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="79.4476%" y="613" width="0.0812%" height="15" fill="rgb(245,147,4)" fg:x="978" fg:w="1"/><text x="79.6976%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="79.4476%" y="597" width="0.0812%" height="15" fill="rgb(242,201,35)" fg:x="978" fg:w="1"/><text x="79.6976%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="79.4476%" y="581" width="0.0812%" height="15" fill="rgb(218,181,1)" fg:x="978" fg:w="1"/><text x="79.6976%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4476%" y="565" width="0.0812%" height="15" fill="rgb(222,6,29)" fg:x="978" fg:w="1"/><text x="79.6976%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="79.4476%" y="549" width="0.0812%" height="15" fill="rgb(208,186,3)" fg:x="978" fg:w="1"/><text x="79.6976%" y="559.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="79.4476%" y="533" width="0.0812%" height="15" fill="rgb(216,36,26)" fg:x="978" fg:w="1"/><text x="79.6976%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.4476%" y="517" width="0.0812%" height="15" fill="rgb(248,201,23)" fg:x="978" fg:w="1"/><text x="79.6976%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4476%" y="501" width="0.0812%" height="15" fill="rgb(251,170,31)" fg:x="978" fg:w="1"/><text x="79.6976%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.4476%" y="485" width="0.0812%" height="15" fill="rgb(207,110,25)" fg:x="978" fg:w="1"/><text x="79.6976%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.4476%" y="469" width="0.0812%" height="15" fill="rgb(250,54,15)" fg:x="978" fg:w="1"/><text x="79.6976%" y="479.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.6101%" y="581" width="0.0812%" height="15" fill="rgb(227,68,33)" fg:x="980" fg:w="1"/><text x="79.8601%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.6101%" y="565" width="0.0812%" height="15" fill="rgb(238,34,41)" fg:x="980" fg:w="1"/><text x="79.8601%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6101%" y="549" width="0.0812%" height="15" fill="rgb(220,11,15)" fg:x="980" fg:w="1"/><text x="79.8601%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="79.5288%" y="613" width="0.2437%" height="15" fill="rgb(246,111,35)" fg:x="979" fg:w="3"/><text x="79.7788%" y="623.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="79.5288%" y="597" width="0.2437%" height="15" fill="rgb(209,88,53)" fg:x="979" fg:w="3"/><text x="79.7788%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.6913%" y="581" width="0.0812%" height="15" fill="rgb(231,185,47)" fg:x="981" fg:w="1"/><text x="79.9413%" y="591.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6913%" y="565" width="0.0812%" height="15" fill="rgb(233,154,1)" fg:x="981" fg:w="1"/><text x="79.9413%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.6913%" y="549" width="0.0812%" height="15" fill="rgb(225,15,46)" fg:x="981" fg:w="1"/><text x="79.9413%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="79.6913%" y="533" width="0.0812%" height="15" fill="rgb(211,135,41)" fg:x="981" fg:w="1"/><text x="79.9413%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.7725%" y="613" width="0.0812%" height="15" fill="rgb(208,54,0)" fg:x="982" fg:w="1"/><text x="80.0225%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (5 samples, 0.41%)</title><rect x="79.5288%" y="629" width="0.4062%" height="15" fill="rgb(244,136,14)" fg:x="979" fg:w="5"/><text x="79.7788%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.8538%" y="613" width="0.0812%" height="15" fill="rgb(241,56,14)" fg:x="983" fg:w="1"/><text x="80.1038%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.8538%" y="597" width="0.0812%" height="15" fill="rgb(205,80,24)" fg:x="983" fg:w="1"/><text x="80.1038%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.8538%" y="581" width="0.0812%" height="15" fill="rgb(220,57,4)" fg:x="983" fg:w="1"/><text x="80.1038%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.8538%" y="565" width="0.0812%" height="15" fill="rgb(226,193,50)" fg:x="983" fg:w="1"/><text x="80.1038%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8538%" y="549" width="0.0812%" height="15" fill="rgb(231,168,22)" fg:x="983" fg:w="1"/><text x="80.1038%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.8538%" y="533" width="0.0812%" height="15" fill="rgb(254,215,14)" fg:x="983" fg:w="1"/><text x="80.1038%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8538%" y="517" width="0.0812%" height="15" fill="rgb(211,115,16)" fg:x="983" fg:w="1"/><text x="80.1038%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.8538%" y="501" width="0.0812%" height="15" fill="rgb(236,210,16)" fg:x="983" fg:w="1"/><text x="80.1038%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8538%" y="485" width="0.0812%" height="15" fill="rgb(221,94,12)" fg:x="983" fg:w="1"/><text x="80.1038%" y="495.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (1 samples, 0.08%)</title><rect x="79.9350%" y="629" width="0.0812%" height="15" fill="rgb(235,218,49)" fg:x="984" fg:w="1"/><text x="80.1850%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (1 samples, 0.08%)</title><rect x="79.9350%" y="613" width="0.0812%" height="15" fill="rgb(217,114,14)" fg:x="984" fg:w="1"/><text x="80.1850%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="79.9350%" y="597" width="0.0812%" height="15" fill="rgb(216,145,22)" fg:x="984" fg:w="1"/><text x="80.1850%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="79.9350%" y="581" width="0.0812%" height="15" fill="rgb(217,112,39)" fg:x="984" fg:w="1"/><text x="80.1850%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.9350%" y="565" width="0.0812%" height="15" fill="rgb(225,85,32)" fg:x="984" fg:w="1"/><text x="80.1850%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.9350%" y="549" width="0.0812%" height="15" fill="rgb(245,209,47)" fg:x="984" fg:w="1"/><text x="80.1850%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.9350%" y="533" width="0.0812%" height="15" fill="rgb(218,220,15)" fg:x="984" fg:w="1"/><text x="80.1850%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9350%" y="517" width="0.0812%" height="15" fill="rgb(222,202,31)" fg:x="984" fg:w="1"/><text x="80.1850%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9350%" y="501" width="0.0812%" height="15" fill="rgb(243,203,4)" fg:x="984" fg:w="1"/><text x="80.1850%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.9350%" y="485" width="0.0812%" height="15" fill="rgb(237,92,17)" fg:x="984" fg:w="1"/><text x="80.1850%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9350%" y="469" width="0.0812%" height="15" fill="rgb(231,119,7)" fg:x="984" fg:w="1"/><text x="80.1850%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.9350%" y="453" width="0.0812%" height="15" fill="rgb(237,82,41)" fg:x="984" fg:w="1"/><text x="80.1850%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="79.9350%" y="437" width="0.0812%" height="15" fill="rgb(226,81,48)" fg:x="984" fg:w="1"/><text x="80.1850%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="79.9350%" y="421" width="0.0812%" height="15" fill="rgb(234,70,51)" fg:x="984" fg:w="1"/><text x="80.1850%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="79.9350%" y="405" width="0.0812%" height="15" fill="rgb(251,86,4)" fg:x="984" fg:w="1"/><text x="80.1850%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="79.9350%" y="389" width="0.0812%" height="15" fill="rgb(244,144,28)" fg:x="984" fg:w="1"/><text x="80.1850%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="79.9350%" y="373" width="0.0812%" height="15" fill="rgb(232,161,39)" fg:x="984" fg:w="1"/><text x="80.1850%" y="383.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="80.0162%" y="629" width="0.0812%" height="15" fill="rgb(247,34,51)" fg:x="985" fg:w="1"/><text x="80.2662%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="80.0162%" y="613" width="0.0812%" height="15" fill="rgb(225,132,2)" fg:x="985" fg:w="1"/><text x="80.2662%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.0162%" y="597" width="0.0812%" height="15" fill="rgb(209,159,44)" fg:x="985" fg:w="1"/><text x="80.2662%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.0162%" y="581" width="0.0812%" height="15" fill="rgb(251,214,1)" fg:x="985" fg:w="1"/><text x="80.2662%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.0975%" y="581" width="0.0812%" height="15" fill="rgb(247,84,47)" fg:x="986" fg:w="1"/><text x="80.3475%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.0975%" y="565" width="0.0812%" height="15" fill="rgb(240,111,43)" fg:x="986" fg:w="1"/><text x="80.3475%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.0975%" y="549" width="0.0812%" height="15" fill="rgb(215,214,35)" fg:x="986" fg:w="1"/><text x="80.3475%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0975%" y="533" width="0.0812%" height="15" fill="rgb(248,207,23)" fg:x="986" fg:w="1"/><text x="80.3475%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0975%" y="517" width="0.0812%" height="15" fill="rgb(214,186,4)" fg:x="986" fg:w="1"/><text x="80.3475%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.0975%" y="501" width="0.0812%" height="15" fill="rgb(220,133,22)" fg:x="986" fg:w="1"/><text x="80.3475%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.1787%" y="501" width="0.0812%" height="15" fill="rgb(239,134,19)" fg:x="987" fg:w="1"/><text x="80.4287%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.1787%" y="485" width="0.0812%" height="15" fill="rgb(250,140,9)" fg:x="987" fg:w="1"/><text x="80.4287%" y="495.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.1787%" y="469" width="0.0812%" height="15" fill="rgb(225,59,14)" fg:x="987" fg:w="1"/><text x="80.4287%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.1787%" y="453" width="0.0812%" height="15" fill="rgb(214,152,51)" fg:x="987" fg:w="1"/><text x="80.4287%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="80.0975%" y="613" width="0.2437%" height="15" fill="rgb(251,227,43)" fg:x="986" fg:w="3"/><text x="80.3475%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="80.0975%" y="597" width="0.2437%" height="15" fill="rgb(241,96,17)" fg:x="986" fg:w="3"/><text x="80.3475%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="80.1787%" y="581" width="0.1625%" height="15" fill="rgb(234,198,43)" fg:x="987" fg:w="2"/><text x="80.4287%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="80.1787%" y="565" width="0.1625%" height="15" fill="rgb(220,108,29)" fg:x="987" fg:w="2"/><text x="80.4287%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="80.1787%" y="549" width="0.1625%" height="15" fill="rgb(226,163,33)" fg:x="987" fg:w="2"/><text x="80.4287%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="80.1787%" y="533" width="0.1625%" height="15" fill="rgb(205,194,45)" fg:x="987" fg:w="2"/><text x="80.4287%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="80.1787%" y="517" width="0.1625%" height="15" fill="rgb(206,143,44)" fg:x="987" fg:w="2"/><text x="80.4287%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="80.2600%" y="501" width="0.0812%" height="15" fill="rgb(236,136,36)" fg:x="988" fg:w="1"/><text x="80.5100%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (33 samples, 2.68%)</title><rect x="77.7417%" y="645" width="2.6807%" height="15" fill="rgb(249,172,42)" fg:x="957" fg:w="33"/><text x="77.9917%" y="655.50">pl..</text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="80.0975%" y="629" width="0.3249%" height="15" fill="rgb(216,139,23)" fg:x="986" fg:w="4"/><text x="80.3475%" y="639.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.3412%" y="613" width="0.0812%" height="15" fill="rgb(207,166,20)" fg:x="989" fg:w="1"/><text x="80.5912%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.3412%" y="597" width="0.0812%" height="15" fill="rgb(210,209,22)" fg:x="989" fg:w="1"/><text x="80.5912%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3412%" y="581" width="0.0812%" height="15" fill="rgb(232,118,20)" fg:x="989" fg:w="1"/><text x="80.5912%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3412%" y="565" width="0.0812%" height="15" fill="rgb(238,113,42)" fg:x="989" fg:w="1"/><text x="80.5912%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="80.3412%" y="549" width="0.0812%" height="15" fill="rgb(231,42,5)" fg:x="989" fg:w="1"/><text x="80.5912%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.3412%" y="533" width="0.0812%" height="15" fill="rgb(243,166,24)" fg:x="989" fg:w="1"/><text x="80.5912%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3412%" y="517" width="0.0812%" height="15" fill="rgb(237,226,12)" fg:x="989" fg:w="1"/><text x="80.5912%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="80.4224%" y="613" width="0.0812%" height="15" fill="rgb(229,133,24)" fg:x="990" fg:w="1"/><text x="80.6724%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="80.4224%" y="645" width="0.1625%" height="15" fill="rgb(238,33,43)" fg:x="990" fg:w="2"/><text x="80.6724%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="80.4224%" y="629" width="0.1625%" height="15" fill="rgb(227,59,38)" fg:x="990" fg:w="2"/><text x="80.6724%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="80.5037%" y="613" width="0.0812%" height="15" fill="rgb(230,97,0)" fg:x="991" fg:w="1"/><text x="80.7537%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5037%" y="597" width="0.0812%" height="15" fill="rgb(250,173,50)" fg:x="991" fg:w="1"/><text x="80.7537%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="80.5037%" y="581" width="0.0812%" height="15" fill="rgb(240,15,50)" fg:x="991" fg:w="1"/><text x="80.7537%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5037%" y="565" width="0.0812%" height="15" fill="rgb(221,93,22)" fg:x="991" fg:w="1"/><text x="80.7537%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.5037%" y="549" width="0.0812%" height="15" fill="rgb(245,180,53)" fg:x="991" fg:w="1"/><text x="80.7537%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="80.5037%" y="533" width="0.0812%" height="15" fill="rgb(231,88,51)" fg:x="991" fg:w="1"/><text x="80.7537%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="80.5037%" y="517" width="0.0812%" height="15" fill="rgb(240,58,21)" fg:x="991" fg:w="1"/><text x="80.7537%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="80.5037%" y="501" width="0.0812%" height="15" fill="rgb(237,21,10)" fg:x="991" fg:w="1"/><text x="80.7537%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="80.5037%" y="485" width="0.0812%" height="15" fill="rgb(218,43,11)" fg:x="991" fg:w="1"/><text x="80.7537%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="80.5037%" y="469" width="0.0812%" height="15" fill="rgb(218,221,29)" fg:x="991" fg:w="1"/><text x="80.7537%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="80.5849%" y="629" width="0.0812%" height="15" fill="rgb(214,118,42)" fg:x="992" fg:w="1"/><text x="80.8349%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.5849%" y="613" width="0.0812%" height="15" fill="rgb(251,200,26)" fg:x="992" fg:w="1"/><text x="80.8349%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.5849%" y="597" width="0.0812%" height="15" fill="rgb(237,101,39)" fg:x="992" fg:w="1"/><text x="80.8349%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="80.5849%" y="581" width="0.0812%" height="15" fill="rgb(251,117,11)" fg:x="992" fg:w="1"/><text x="80.8349%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="80.5849%" y="565" width="0.0812%" height="15" fill="rgb(216,223,23)" fg:x="992" fg:w="1"/><text x="80.8349%" y="575.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="80.6661%" y="629" width="0.0812%" height="15" fill="rgb(251,54,12)" fg:x="993" fg:w="1"/><text x="80.9161%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="80.6661%" y="613" width="0.0812%" height="15" fill="rgb(254,176,54)" fg:x="993" fg:w="1"/><text x="80.9161%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="80.6661%" y="597" width="0.0812%" height="15" fill="rgb(210,32,8)" fg:x="993" fg:w="1"/><text x="80.9161%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6661%" y="581" width="0.0812%" height="15" fill="rgb(235,52,38)" fg:x="993" fg:w="1"/><text x="80.9161%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6661%" y="565" width="0.0812%" height="15" fill="rgb(231,4,44)" fg:x="993" fg:w="1"/><text x="80.9161%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.6661%" y="549" width="0.0812%" height="15" fill="rgb(249,2,32)" fg:x="993" fg:w="1"/><text x="80.9161%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.7474%" y="549" width="0.0812%" height="15" fill="rgb(224,65,26)" fg:x="994" fg:w="1"/><text x="80.9974%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.7474%" y="533" width="0.0812%" height="15" fill="rgb(250,73,40)" fg:x="994" fg:w="1"/><text x="80.9974%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.7474%" y="517" width="0.0812%" height="15" fill="rgb(253,177,16)" fg:x="994" fg:w="1"/><text x="80.9974%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7474%" y="501" width="0.0812%" height="15" fill="rgb(217,32,34)" fg:x="994" fg:w="1"/><text x="80.9974%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.7474%" y="485" width="0.0812%" height="15" fill="rgb(212,7,10)" fg:x="994" fg:w="1"/><text x="80.9974%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7474%" y="469" width="0.0812%" height="15" fill="rgb(245,89,8)" fg:x="994" fg:w="1"/><text x="80.9974%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.7474%" y="453" width="0.0812%" height="15" fill="rgb(237,16,53)" fg:x="994" fg:w="1"/><text x="80.9974%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.7474%" y="437" width="0.0812%" height="15" fill="rgb(250,204,30)" fg:x="994" fg:w="1"/><text x="80.9974%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="80.7474%" y="613" width="0.1625%" height="15" fill="rgb(208,77,27)" fg:x="994" fg:w="2"/><text x="80.9974%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="80.7474%" y="597" width="0.1625%" height="15" fill="rgb(250,204,28)" fg:x="994" fg:w="2"/><text x="80.9974%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="80.7474%" y="581" width="0.1625%" height="15" fill="rgb(244,63,21)" fg:x="994" fg:w="2"/><text x="80.9974%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="80.7474%" y="565" width="0.1625%" height="15" fill="rgb(236,85,44)" fg:x="994" fg:w="2"/><text x="80.9974%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="80.8286%" y="549" width="0.0812%" height="15" fill="rgb(215,98,4)" fg:x="995" fg:w="1"/><text x="81.0786%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="80.8286%" y="533" width="0.0812%" height="15" fill="rgb(235,38,11)" fg:x="995" fg:w="1"/><text x="81.0786%" y="543.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="80.9098%" y="613" width="0.0812%" height="15" fill="rgb(254,186,25)" fg:x="996" fg:w="1"/><text x="81.1598%" y="623.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (66 samples, 5.36%)</title><rect x="75.7108%" y="661" width="5.3615%" height="15" fill="rgb(225,55,31)" fg:x="932" fg:w="66"/><text x="75.9608%" y="671.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (6 samples, 0.49%)</title><rect x="80.5849%" y="645" width="0.4874%" height="15" fill="rgb(211,15,21)" fg:x="992" fg:w="6"/><text x="80.8349%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="80.7474%" y="629" width="0.3249%" height="15" fill="rgb(215,187,41)" fg:x="994" fg:w="4"/><text x="80.9974%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="80.9911%" y="613" width="0.0812%" height="15" fill="rgb(248,69,32)" fg:x="997" fg:w="1"/><text x="81.2411%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="80.9911%" y="597" width="0.0812%" height="15" fill="rgb(252,102,52)" fg:x="997" fg:w="1"/><text x="81.2411%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.9911%" y="581" width="0.0812%" height="15" fill="rgb(253,140,32)" fg:x="997" fg:w="1"/><text x="81.2411%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.9911%" y="565" width="0.0812%" height="15" fill="rgb(216,56,42)" fg:x="997" fg:w="1"/><text x="81.2411%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9911%" y="549" width="0.0812%" height="15" fill="rgb(216,184,14)" fg:x="997" fg:w="1"/><text x="81.2411%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.9911%" y="533" width="0.0812%" height="15" fill="rgb(237,187,27)" fg:x="997" fg:w="1"/><text x="81.2411%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9911%" y="517" width="0.0812%" height="15" fill="rgb(219,65,3)" fg:x="997" fg:w="1"/><text x="81.2411%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="80.9911%" y="501" width="0.0812%" height="15" fill="rgb(245,83,25)" fg:x="997" fg:w="1"/><text x="81.2411%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="80.9911%" y="485" width="0.0812%" height="15" fill="rgb(214,205,45)" fg:x="997" fg:w="1"/><text x="81.2411%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.9911%" y="469" width="0.0812%" height="15" fill="rgb(241,20,18)" fg:x="997" fg:w="1"/><text x="81.2411%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.9911%" y="453" width="0.0812%" height="15" fill="rgb(232,163,23)" fg:x="997" fg:w="1"/><text x="81.2411%" y="463.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="81.1535%" y="645" width="0.0812%" height="15" fill="rgb(214,5,46)" fg:x="999" fg:w="1"/><text x="81.4035%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="81.1535%" y="629" width="0.0812%" height="15" fill="rgb(229,78,17)" fg:x="999" fg:w="1"/><text x="81.4035%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.1535%" y="613" width="0.0812%" height="15" fill="rgb(248,89,10)" fg:x="999" fg:w="1"/><text x="81.4035%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.1535%" y="597" width="0.0812%" height="15" fill="rgb(248,54,15)" fg:x="999" fg:w="1"/><text x="81.4035%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="81.1535%" y="581" width="0.0812%" height="15" fill="rgb(223,116,6)" fg:x="999" fg:w="1"/><text x="81.4035%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="81.1535%" y="565" width="0.0812%" height="15" fill="rgb(205,125,38)" fg:x="999" fg:w="1"/><text x="81.4035%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="81.1535%" y="549" width="0.0812%" height="15" fill="rgb(251,78,38)" fg:x="999" fg:w="1"/><text x="81.4035%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="81.1535%" y="533" width="0.0812%" height="15" fill="rgb(253,78,28)" fg:x="999" fg:w="1"/><text x="81.4035%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="81.1535%" y="517" width="0.0812%" height="15" fill="rgb(209,120,3)" fg:x="999" fg:w="1"/><text x="81.4035%" y="527.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.08%)</title><rect x="81.1535%" y="501" width="0.0812%" height="15" fill="rgb(238,229,9)" fg:x="999" fg:w="1"/><text x="81.4035%" y="511.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.08%)</title><rect x="81.1535%" y="485" width="0.0812%" height="15" fill="rgb(253,159,18)" fg:x="999" fg:w="1"/><text x="81.4035%" y="495.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.08%)</title><rect x="81.1535%" y="469" width="0.0812%" height="15" fill="rgb(244,42,34)" fg:x="999" fg:w="1"/><text x="81.4035%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.2348%" y="613" width="0.0812%" height="15" fill="rgb(224,8,7)" fg:x="1000" fg:w="1"/><text x="81.4848%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.2348%" y="597" width="0.0812%" height="15" fill="rgb(210,201,45)" fg:x="1000" fg:w="1"/><text x="81.4848%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.2348%" y="581" width="0.0812%" height="15" fill="rgb(252,185,21)" fg:x="1000" fg:w="1"/><text x="81.4848%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="81.2348%" y="565" width="0.0812%" height="15" fill="rgb(223,131,1)" fg:x="1000" fg:w="1"/><text x="81.4848%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.3160%" y="613" width="0.0812%" height="15" fill="rgb(245,141,16)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="81.3160%" y="597" width="0.0812%" height="15" fill="rgb(229,55,45)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="81.3160%" y="581" width="0.0812%" height="15" fill="rgb(208,92,15)" fg:x="1001" fg:w="1"/><text x="81.5660%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="81.4785%" y="549" width="0.0812%" height="15" fill="rgb(234,185,47)" fg:x="1003" fg:w="1"/><text x="81.7285%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="81.5597%" y="533" width="0.3249%" height="15" fill="rgb(253,104,50)" fg:x="1004" fg:w="4"/><text x="81.8097%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="81.7222%" y="517" width="0.1625%" height="15" fill="rgb(205,70,7)" fg:x="1006" fg:w="2"/><text x="81.9722%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="81.7222%" y="501" width="0.1625%" height="15" fill="rgb(240,178,43)" fg:x="1006" fg:w="2"/><text x="81.9722%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="81.8034%" y="485" width="0.0812%" height="15" fill="rgb(214,112,2)" fg:x="1007" fg:w="1"/><text x="82.0534%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="81.8846%" y="517" width="0.1625%" height="15" fill="rgb(206,46,17)" fg:x="1008" fg:w="2"/><text x="82.1346%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="81.8846%" y="501" width="0.1625%" height="15" fill="rgb(225,220,16)" fg:x="1008" fg:w="2"/><text x="82.1346%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="81.9659%" y="485" width="0.0812%" height="15" fill="rgb(238,65,40)" fg:x="1009" fg:w="1"/><text x="82.2159%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.0471%" y="501" width="0.1625%" height="15" fill="rgb(230,151,21)" fg:x="1010" fg:w="2"/><text x="82.2971%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.1284%" y="485" width="0.0812%" height="15" fill="rgb(218,58,49)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.1284%" y="469" width="0.0812%" height="15" fill="rgb(219,179,14)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1284%" y="453" width="0.0812%" height="15" fill="rgb(223,72,1)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.1284%" y="437" width="0.0812%" height="15" fill="rgb(238,126,10)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.1284%" y="421" width="0.0812%" height="15" fill="rgb(224,206,38)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.1284%" y="405" width="0.0812%" height="15" fill="rgb(212,201,54)" fg:x="1011" fg:w="1"/><text x="82.3784%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.2096%" y="485" width="0.0812%" height="15" fill="rgb(218,154,48)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.2096%" y="469" width="0.0812%" height="15" fill="rgb(232,93,24)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.2096%" y="453" width="0.0812%" height="15" fill="rgb(245,30,21)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.2096%" y="437" width="0.0812%" height="15" fill="rgb(242,148,29)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.2096%" y="421" width="0.0812%" height="15" fill="rgb(244,153,54)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2096%" y="405" width="0.0812%" height="15" fill="rgb(252,87,22)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.2096%" y="389" width="0.0812%" height="15" fill="rgb(210,51,29)" fg:x="1012" fg:w="1"/><text x="82.4596%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.2096%" y="501" width="0.1625%" height="15" fill="rgb(242,136,47)" fg:x="1012" fg:w="2"/><text x="82.4596%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="82.2908%" y="485" width="0.0812%" height="15" fill="rgb(238,68,4)" fg:x="1013" fg:w="1"/><text x="82.5408%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.2908%" y="469" width="0.0812%" height="15" fill="rgb(242,161,30)" fg:x="1013" fg:w="1"/><text x="82.5408%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.2908%" y="453" width="0.0812%" height="15" fill="rgb(218,58,44)" fg:x="1013" fg:w="1"/><text x="82.5408%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.97%)</title><rect x="81.4785%" y="565" width="0.9748%" height="15" fill="rgb(252,125,32)" fg:x="1003" fg:w="12"/><text x="81.7285%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.89%)</title><rect x="81.5597%" y="549" width="0.8936%" height="15" fill="rgb(219,178,0)" fg:x="1004" fg:w="11"/><text x="81.8097%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.57%)</title><rect x="81.8846%" y="533" width="0.5686%" height="15" fill="rgb(213,152,7)" fg:x="1008" fg:w="7"/><text x="82.1346%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.41%)</title><rect x="82.0471%" y="517" width="0.4062%" height="15" fill="rgb(249,109,34)" fg:x="1010" fg:w="5"/><text x="82.2971%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.3721%" y="501" width="0.0812%" height="15" fill="rgb(232,96,21)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.3721%" y="485" width="0.0812%" height="15" fill="rgb(228,27,39)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.3721%" y="469" width="0.0812%" height="15" fill="rgb(211,182,52)" fg:x="1014" fg:w="1"/><text x="82.6221%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.4533%" y="565" width="0.0812%" height="15" fill="rgb(234,178,38)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.4533%" y="549" width="0.0812%" height="15" fill="rgb(221,111,3)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.4533%" y="533" width="0.0812%" height="15" fill="rgb(228,175,21)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.4533%" y="517" width="0.0812%" height="15" fill="rgb(228,174,43)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.4533%" y="501" width="0.0812%" height="15" fill="rgb(211,191,0)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.4533%" y="485" width="0.0812%" height="15" fill="rgb(253,117,3)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.4533%" y="469" width="0.0812%" height="15" fill="rgb(241,127,19)" fg:x="1015" fg:w="1"/><text x="82.7033%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5345%" y="485" width="0.0812%" height="15" fill="rgb(218,103,12)" fg:x="1016" fg:w="1"/><text x="82.7845%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6158%" y="485" width="0.0812%" height="15" fill="rgb(236,214,43)" fg:x="1017" fg:w="1"/><text x="82.8658%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.6158%" y="469" width="0.0812%" height="15" fill="rgb(244,144,19)" fg:x="1017" fg:w="1"/><text x="82.8658%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6970%" y="469" width="0.0812%" height="15" fill="rgb(246,188,10)" fg:x="1018" fg:w="1"/><text x="82.9470%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.7782%" y="453" width="0.0812%" height="15" fill="rgb(212,193,33)" fg:x="1019" fg:w="1"/><text x="83.0282%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="82.5345%" y="533" width="0.4062%" height="15" fill="rgb(241,51,29)" fg:x="1016" fg:w="5"/><text x="82.7845%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.41%)</title><rect x="82.5345%" y="517" width="0.4062%" height="15" fill="rgb(211,58,19)" fg:x="1016" fg:w="5"/><text x="82.7845%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.41%)</title><rect x="82.5345%" y="501" width="0.4062%" height="15" fill="rgb(229,111,26)" fg:x="1016" fg:w="5"/><text x="82.7845%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.6970%" y="485" width="0.2437%" height="15" fill="rgb(213,115,40)" fg:x="1018" fg:w="3"/><text x="82.9470%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.7782%" y="469" width="0.1625%" height="15" fill="rgb(209,56,44)" fg:x="1019" fg:w="2"/><text x="83.0282%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="82.8595%" y="453" width="0.0812%" height="15" fill="rgb(230,108,32)" fg:x="1020" fg:w="1"/><text x="83.1095%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="82.8595%" y="437" width="0.0812%" height="15" fill="rgb(216,165,31)" fg:x="1020" fg:w="1"/><text x="83.1095%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8595%" y="421" width="0.0812%" height="15" fill="rgb(218,122,21)" fg:x="1020" fg:w="1"/><text x="83.1095%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8595%" y="405" width="0.0812%" height="15" fill="rgb(223,224,47)" fg:x="1020" fg:w="1"/><text x="83.1095%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.8595%" y="389" width="0.0812%" height="15" fill="rgb(238,102,44)" fg:x="1020" fg:w="1"/><text x="83.1095%" y="399.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.65%)</title><rect x="82.5345%" y="549" width="0.6499%" height="15" fill="rgb(236,46,40)" fg:x="1016" fg:w="8"/><text x="82.7845%" y="559.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="82.9407%" y="533" width="0.2437%" height="15" fill="rgb(247,202,50)" fg:x="1021" fg:w="3"/><text x="83.1907%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="82.9407%" y="517" width="0.2437%" height="15" fill="rgb(209,99,20)" fg:x="1021" fg:w="3"/><text x="83.1907%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="82.9407%" y="501" width="0.2437%" height="15" fill="rgb(252,27,34)" fg:x="1021" fg:w="3"/><text x="83.1907%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="83.0219%" y="485" width="0.1625%" height="15" fill="rgb(215,206,23)" fg:x="1022" fg:w="2"/><text x="83.2719%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="83.0219%" y="469" width="0.1625%" height="15" fill="rgb(212,135,36)" fg:x="1022" fg:w="2"/><text x="83.2719%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="83.0219%" y="453" width="0.1625%" height="15" fill="rgb(240,189,1)" fg:x="1022" fg:w="2"/><text x="83.2719%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.2656%" y="517" width="0.0812%" height="15" fill="rgb(242,56,20)" fg:x="1025" fg:w="1"/><text x="83.5156%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="83.3469%" y="517" width="0.0812%" height="15" fill="rgb(247,132,33)" fg:x="1026" fg:w="1"/><text x="83.5969%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.3469%" y="501" width="0.0812%" height="15" fill="rgb(208,149,11)" fg:x="1026" fg:w="1"/><text x="83.5969%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.3469%" y="485" width="0.0812%" height="15" fill="rgb(211,33,11)" fg:x="1026" fg:w="1"/><text x="83.5969%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="83.4281%" y="517" width="0.0812%" height="15" fill="rgb(221,29,38)" fg:x="1027" fg:w="1"/><text x="83.6781%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="83.4281%" y="501" width="0.0812%" height="15" fill="rgb(206,182,49)" fg:x="1027" fg:w="1"/><text x="83.6781%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.5906%" y="485" width="0.1625%" height="15" fill="rgb(216,140,1)" fg:x="1029" fg:w="2"/><text x="83.8406%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="83.5906%" y="469" width="0.1625%" height="15" fill="rgb(232,57,40)" fg:x="1029" fg:w="2"/><text x="83.8406%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="83.5906%" y="453" width="0.1625%" height="15" fill="rgb(224,186,18)" fg:x="1029" fg:w="2"/><text x="83.8406%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="83.6718%" y="437" width="0.0812%" height="15" fill="rgb(215,121,11)" fg:x="1030" fg:w="1"/><text x="83.9218%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="83.6718%" y="421" width="0.0812%" height="15" fill="rgb(245,147,10)" fg:x="1030" fg:w="1"/><text x="83.9218%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.7530%" y="469" width="0.0812%" height="15" fill="rgb(238,153,13)" fg:x="1031" fg:w="1"/><text x="84.0030%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="83.1844%" y="549" width="0.7311%" height="15" fill="rgb(233,108,0)" fg:x="1024" fg:w="9"/><text x="83.4344%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="83.1844%" y="533" width="0.7311%" height="15" fill="rgb(212,157,17)" fg:x="1024" fg:w="9"/><text x="83.4344%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.41%)</title><rect x="83.5093%" y="517" width="0.4062%" height="15" fill="rgb(225,213,38)" fg:x="1028" fg:w="5"/><text x="83.7593%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="83.5906%" y="501" width="0.3249%" height="15" fill="rgb(248,16,11)" fg:x="1029" fg:w="4"/><text x="83.8406%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="83.7530%" y="485" width="0.1625%" height="15" fill="rgb(241,33,4)" fg:x="1031" fg:w="2"/><text x="84.0030%" y="495.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="83.8343%" y="469" width="0.0812%" height="15" fill="rgb(222,26,43)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="83.8343%" y="453" width="0.0812%" height="15" fill="rgb(243,29,36)" fg:x="1032" fg:w="1"/><text x="84.0843%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="83.9155%" y="421" width="0.0812%" height="15" fill="rgb(241,9,27)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="83.9155%" y="405" width="0.0812%" height="15" fill="rgb(205,117,26)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9155%" y="389" width="0.0812%" height="15" fill="rgb(209,80,39)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.9155%" y="373" width="0.0812%" height="15" fill="rgb(239,155,6)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="83.9155%" y="357" width="0.0812%" height="15" fill="rgb(212,104,12)" fg:x="1033" fg:w="1"/><text x="84.1655%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="83.9155%" y="453" width="0.1625%" height="15" fill="rgb(234,204,3)" fg:x="1033" fg:w="2"/><text x="84.1655%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="83.9155%" y="437" width="0.1625%" height="15" fill="rgb(251,218,7)" fg:x="1033" fg:w="2"/><text x="84.1655%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.9968%" y="421" width="0.0812%" height="15" fill="rgb(221,81,32)" fg:x="1034" fg:w="1"/><text x="84.2468%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.9968%" y="405" width="0.0812%" height="15" fill="rgb(214,152,26)" fg:x="1034" fg:w="1"/><text x="84.2468%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="83.9155%" y="485" width="0.2437%" height="15" fill="rgb(223,22,3)" fg:x="1033" fg:w="3"/><text x="84.1655%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="83.9155%" y="469" width="0.2437%" height="15" fill="rgb(207,174,7)" fg:x="1033" fg:w="3"/><text x="84.1655%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.0780%" y="453" width="0.0812%" height="15" fill="rgb(224,19,52)" fg:x="1035" fg:w="1"/><text x="84.3280%" y="463.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (35 samples, 2.84%)</title><rect x="81.3972%" y="581" width="2.8432%" height="15" fill="rgb(228,24,14)" fg:x="1002" fg:w="35"/><text x="81.6472%" y="591.50">en..</text></g><g><title>kernel::model::any_entity_changes (21 samples, 1.71%)</title><rect x="82.5345%" y="565" width="1.7059%" height="15" fill="rgb(230,153,43)" fg:x="1016" fg:w="21"/><text x="82.7845%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="83.9155%" y="549" width="0.3249%" height="15" fill="rgb(231,106,12)" fg:x="1033" fg:w="4"/><text x="84.1655%" y="559.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="83.9155%" y="533" width="0.3249%" height="15" fill="rgb(215,92,2)" fg:x="1033" fg:w="4"/><text x="84.1655%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="83.9155%" y="517" width="0.3249%" height="15" fill="rgb(249,143,25)" fg:x="1033" fg:w="4"/><text x="84.1655%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="83.9155%" y="501" width="0.3249%" height="15" fill="rgb(252,7,35)" fg:x="1033" fg:w="4"/><text x="84.1655%" y="511.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.1592%" y="485" width="0.0812%" height="15" fill="rgb(216,69,40)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.1592%" y="469" width="0.0812%" height="15" fill="rgb(240,36,33)" fg:x="1036" fg:w="1"/><text x="84.4092%" y="479.50"></text></g><g><title>engine::session::state::State::close (38 samples, 3.09%)</title><rect x="81.2348%" y="645" width="3.0869%" height="15" fill="rgb(231,128,14)" fg:x="1000" fg:w="38"/><text x="81.4848%" y="655.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (38 samples, 3.09%)</title><rect x="81.2348%" y="629" width="3.0869%" height="15" fill="rgb(245,143,14)" fg:x="1000" fg:w="38"/><text x="81.4848%" y="639.50">eng..</text></g><g><title>core::iter::adapters::try_process (36 samples, 2.92%)</title><rect x="81.3972%" y="613" width="2.9245%" height="15" fill="rgb(222,130,28)" fg:x="1002" fg:w="36"/><text x="81.6472%" y="623.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (36 samples, 2.92%)</title><rect x="81.3972%" y="597" width="2.9245%" height="15" fill="rgb(212,10,48)" fg:x="1002" fg:w="36"/><text x="81.6472%" y="607.50">&lt;a..</text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="84.2405%" y="581" width="0.0812%" height="15" fill="rgb(254,118,45)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="591.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="84.2405%" y="565" width="0.0812%" height="15" fill="rgb(228,6,45)" fg:x="1037" fg:w="1"/><text x="84.4905%" y="575.50"></text></g><g><title>engine::session::Session::close (41 samples, 3.33%)</title><rect x="81.0723%" y="661" width="3.3306%" height="15" fill="rgb(241,18,35)" fg:x="998" fg:w="41"/><text x="81.3223%" y="671.50">eng..</text></g><g><title>std::time::Instant::elapsed (1 samples, 0.08%)</title><rect x="84.3217%" y="645" width="0.0812%" height="15" fill="rgb(227,214,53)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="655.50"></text></g><g><title>std::time::Instant::now (1 samples, 0.08%)</title><rect x="84.3217%" y="629" width="0.0812%" height="15" fill="rgb(224,107,51)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 0.08%)</title><rect x="84.3217%" y="613" width="0.0812%" height="15" fill="rgb(248,60,28)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="84.3217%" y="597" width="0.0812%" height="15" fill="rgb(249,101,23)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="607.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="84.3217%" y="581" width="0.0812%" height="15" fill="rgb(228,51,19)" fg:x="1038" fg:w="1"/><text x="84.5717%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="84.4842%" y="469" width="0.0812%" height="15" fill="rgb(213,20,6)" fg:x="1040" fg:w="1"/><text x="84.7342%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5654%" y="373" width="0.0812%" height="15" fill="rgb(212,124,10)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5654%" y="357" width="0.0812%" height="15" fill="rgb(248,3,40)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5654%" y="341" width="0.0812%" height="15" fill="rgb(223,178,23)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5654%" y="325" width="0.0812%" height="15" fill="rgb(240,132,45)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.5654%" y="309" width="0.0812%" height="15" fill="rgb(245,164,36)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.5654%" y="293" width="0.0812%" height="15" fill="rgb(231,188,53)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="84.5654%" y="277" width="0.0812%" height="15" fill="rgb(237,198,39)" fg:x="1041" fg:w="1"/><text x="84.8154%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.6466%" y="341" width="0.0812%" height="15" fill="rgb(223,120,35)" fg:x="1042" fg:w="1"/><text x="84.8966%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="84.5654%" y="469" width="0.3249%" height="15" fill="rgb(253,107,49)" fg:x="1041" fg:w="4"/><text x="84.8154%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="84.5654%" y="453" width="0.3249%" height="15" fill="rgb(216,44,31)" fg:x="1041" fg:w="4"/><text x="84.8154%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="84.5654%" y="437" width="0.3249%" height="15" fill="rgb(253,87,21)" fg:x="1041" fg:w="4"/><text x="84.8154%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="84.5654%" y="421" width="0.3249%" height="15" fill="rgb(226,18,2)" fg:x="1041" fg:w="4"/><text x="84.8154%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="84.5654%" y="405" width="0.3249%" height="15" fill="rgb(216,8,46)" fg:x="1041" fg:w="4"/><text x="84.8154%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="84.5654%" y="389" width="0.3249%" height="15" fill="rgb(226,140,39)" fg:x="1041" fg:w="4"/><text x="84.8154%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (3 samples, 0.24%)</title><rect x="84.6466%" y="373" width="0.2437%" height="15" fill="rgb(221,194,54)" fg:x="1042" fg:w="3"/><text x="84.8966%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="84.6466%" y="357" width="0.2437%" height="15" fill="rgb(213,92,11)" fg:x="1042" fg:w="3"/><text x="84.8966%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="84.7279%" y="341" width="0.1625%" height="15" fill="rgb(229,162,46)" fg:x="1043" fg:w="2"/><text x="84.9779%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="84.8091%" y="325" width="0.0812%" height="15" fill="rgb(214,111,36)" fg:x="1044" fg:w="1"/><text x="85.0591%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="84.8091%" y="309" width="0.0812%" height="15" fill="rgb(207,6,21)" fg:x="1044" fg:w="1"/><text x="85.0591%" y="319.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (7 samples, 0.57%)</title><rect x="84.4842%" y="565" width="0.5686%" height="15" fill="rgb(213,127,38)" fg:x="1040" fg:w="7"/><text x="84.7342%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (7 samples, 0.57%)</title><rect x="84.4842%" y="549" width="0.5686%" height="15" fill="rgb(238,118,32)" fg:x="1040" fg:w="7"/><text x="84.7342%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.57%)</title><rect x="84.4842%" y="533" width="0.5686%" height="15" fill="rgb(240,139,39)" fg:x="1040" fg:w="7"/><text x="84.7342%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.57%)</title><rect x="84.4842%" y="517" width="0.5686%" height="15" fill="rgb(235,10,37)" fg:x="1040" fg:w="7"/><text x="84.7342%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="84.4842%" y="501" width="0.5686%" height="15" fill="rgb(249,171,38)" fg:x="1040" fg:w="7"/><text x="84.7342%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="84.4842%" y="485" width="0.5686%" height="15" fill="rgb(242,144,32)" fg:x="1040" fg:w="7"/><text x="84.7342%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="84.8903%" y="469" width="0.1625%" height="15" fill="rgb(217,117,21)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="479.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="84.8903%" y="453" width="0.1625%" height="15" fill="rgb(249,87,1)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.8903%" y="437" width="0.1625%" height="15" fill="rgb(248,196,48)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.8903%" y="421" width="0.1625%" height="15" fill="rgb(251,206,33)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.8903%" y="405" width="0.1625%" height="15" fill="rgb(232,141,28)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.8903%" y="389" width="0.1625%" height="15" fill="rgb(209,167,14)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.8903%" y="373" width="0.1625%" height="15" fill="rgb(225,11,50)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.8903%" y="357" width="0.1625%" height="15" fill="rgb(209,50,20)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.8903%" y="341" width="0.1625%" height="15" fill="rgb(212,17,46)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.8903%" y="325" width="0.1625%" height="15" fill="rgb(216,101,39)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="84.8903%" y="309" width="0.1625%" height="15" fill="rgb(212,228,48)" fg:x="1045" fg:w="2"/><text x="85.1403%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.1340%" y="389" width="0.0812%" height="15" fill="rgb(250,6,50)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.1340%" y="373" width="0.0812%" height="15" fill="rgb(250,160,48)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.1340%" y="357" width="0.0812%" height="15" fill="rgb(244,216,33)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.1340%" y="341" width="0.0812%" height="15" fill="rgb(207,157,5)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.1340%" y="325" width="0.0812%" height="15" fill="rgb(228,199,8)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.1340%" y="309" width="0.0812%" height="15" fill="rgb(227,80,20)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.1340%" y="293" width="0.0812%" height="15" fill="rgb(222,9,33)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.1340%" y="277" width="0.0812%" height="15" fill="rgb(239,44,28)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.1340%" y="261" width="0.0812%" height="15" fill="rgb(249,187,43)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="85.1340%" y="245" width="0.0812%" height="15" fill="rgb(216,141,28)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.1340%" y="229" width="0.0812%" height="15" fill="rgb(230,154,53)" fg:x="1048" fg:w="1"/><text x="85.3840%" y="239.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="85.2153%" y="389" width="0.0812%" height="15" fill="rgb(227,82,4)" fg:x="1049" fg:w="1"/><text x="85.4653%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (1 samples, 0.08%)</title><rect x="85.2965%" y="389" width="0.0812%" height="15" fill="rgb(220,107,16)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="85.2965%" y="373" width="0.0812%" height="15" fill="rgb(207,187,2)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.2965%" y="357" width="0.0812%" height="15" fill="rgb(210,162,52)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.2965%" y="341" width="0.0812%" height="15" fill="rgb(217,216,49)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2965%" y="325" width="0.0812%" height="15" fill="rgb(218,146,49)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.2965%" y="309" width="0.0812%" height="15" fill="rgb(216,55,40)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2965%" y="293" width="0.0812%" height="15" fill="rgb(208,196,21)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.2965%" y="277" width="0.0812%" height="15" fill="rgb(242,117,42)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.2965%" y="261" width="0.0812%" height="15" fill="rgb(210,11,23)" fg:x="1050" fg:w="1"/><text x="85.5465%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.3777%" y="293" width="0.0812%" height="15" fill="rgb(217,110,2)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.3777%" y="277" width="0.0812%" height="15" fill="rgb(229,77,54)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.3777%" y="261" width="0.0812%" height="15" fill="rgb(218,53,16)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.3777%" y="245" width="0.0812%" height="15" fill="rgb(215,38,13)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.3777%" y="229" width="0.0812%" height="15" fill="rgb(235,42,18)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.3777%" y="213" width="0.0812%" height="15" fill="rgb(219,66,54)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.3777%" y="197" width="0.0812%" height="15" fill="rgb(222,205,4)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.3777%" y="181" width="0.0812%" height="15" fill="rgb(227,213,46)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.3777%" y="165" width="0.0812%" height="15" fill="rgb(250,145,42)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.3777%" y="149" width="0.0812%" height="15" fill="rgb(219,15,2)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="159.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.3777%" y="133" width="0.0812%" height="15" fill="rgb(231,181,52)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3777%" y="117" width="0.0812%" height="15" fill="rgb(235,1,42)" fg:x="1051" fg:w="1"/><text x="85.6277%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.3777%" y="341" width="0.1625%" height="15" fill="rgb(249,88,27)" fg:x="1051" fg:w="2"/><text x="85.6277%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.3777%" y="325" width="0.1625%" height="15" fill="rgb(235,145,16)" fg:x="1051" fg:w="2"/><text x="85.6277%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.3777%" y="309" width="0.1625%" height="15" fill="rgb(237,114,19)" fg:x="1051" fg:w="2"/><text x="85.6277%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4590%" y="293" width="0.0812%" height="15" fill="rgb(238,51,50)" fg:x="1052" fg:w="1"/><text x="85.7090%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (5 samples, 0.41%)</title><rect x="85.3777%" y="389" width="0.4062%" height="15" fill="rgb(205,194,25)" fg:x="1051" fg:w="5"/><text x="85.6277%" y="399.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.41%)</title><rect x="85.3777%" y="373" width="0.4062%" height="15" fill="rgb(215,203,17)" fg:x="1051" fg:w="5"/><text x="85.6277%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="85.3777%" y="357" width="0.4062%" height="15" fill="rgb(233,112,49)" fg:x="1051" fg:w="5"/><text x="85.6277%" y="367.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="85.5402%" y="341" width="0.2437%" height="15" fill="rgb(241,130,26)" fg:x="1053" fg:w="3"/><text x="85.7902%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="85.5402%" y="325" width="0.2437%" height="15" fill="rgb(252,223,19)" fg:x="1053" fg:w="3"/><text x="85.7902%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="85.6214%" y="309" width="0.1625%" height="15" fill="rgb(211,95,25)" fg:x="1054" fg:w="2"/><text x="85.8714%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.6214%" y="293" width="0.1625%" height="15" fill="rgb(251,182,27)" fg:x="1054" fg:w="2"/><text x="85.8714%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.7027%" y="277" width="0.0812%" height="15" fill="rgb(238,24,4)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.7027%" y="261" width="0.0812%" height="15" fill="rgb(224,220,25)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.7027%" y="245" width="0.0812%" height="15" fill="rgb(239,133,26)" fg:x="1055" fg:w="1"/><text x="85.9527%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="85.7839%" y="293" width="0.0812%" height="15" fill="rgb(211,94,48)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.7839%" y="277" width="0.0812%" height="15" fill="rgb(239,87,6)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.7839%" y="261" width="0.0812%" height="15" fill="rgb(227,62,0)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="271.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.7839%" y="245" width="0.0812%" height="15" fill="rgb(211,226,4)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="255.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.7839%" y="229" width="0.0812%" height="15" fill="rgb(253,38,52)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="239.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.7839%" y="213" width="0.0812%" height="15" fill="rgb(229,126,40)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.7839%" y="197" width="0.0812%" height="15" fill="rgb(229,165,44)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="85.7839%" y="181" width="0.0812%" height="15" fill="rgb(247,95,47)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="85.7839%" y="165" width="0.0812%" height="15" fill="rgb(216,140,30)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="175.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="85.7839%" y="149" width="0.0812%" height="15" fill="rgb(246,214,8)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="159.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="85.7839%" y="133" width="0.0812%" height="15" fill="rgb(227,224,15)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="143.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="85.7839%" y="117" width="0.0812%" height="15" fill="rgb(233,175,4)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="127.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7839%" y="101" width="0.0812%" height="15" fill="rgb(221,66,45)" fg:x="1056" fg:w="1"/><text x="86.0339%" y="111.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.7839%" y="325" width="0.1625%" height="15" fill="rgb(221,178,18)" fg:x="1056" fg:w="2"/><text x="86.0339%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="85.7839%" y="309" width="0.1625%" height="15" fill="rgb(213,81,29)" fg:x="1056" fg:w="2"/><text x="86.0339%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.8652%" y="293" width="0.0812%" height="15" fill="rgb(220,89,49)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="85.8652%" y="277" width="0.0812%" height="15" fill="rgb(227,60,33)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="85.8652%" y="261" width="0.0812%" height="15" fill="rgb(205,113,12)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="85.8652%" y="245" width="0.0812%" height="15" fill="rgb(211,32,1)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="85.8652%" y="229" width="0.0812%" height="15" fill="rgb(246,2,12)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="85.8652%" y="213" width="0.0812%" height="15" fill="rgb(243,37,27)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="85.8652%" y="197" width="0.0812%" height="15" fill="rgb(248,211,31)" fg:x="1057" fg:w="1"/><text x="86.1152%" y="207.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.9464%" y="325" width="0.0812%" height="15" fill="rgb(242,146,47)" fg:x="1058" fg:w="1"/><text x="86.1964%" y="335.50"></text></g><g><title>kernel::model::EntityPtr::gid (4 samples, 0.32%)</title><rect x="85.7839%" y="389" width="0.3249%" height="15" fill="rgb(206,70,20)" fg:x="1056" fg:w="4"/><text x="86.0339%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="85.7839%" y="373" width="0.3249%" height="15" fill="rgb(215,10,51)" fg:x="1056" fg:w="4"/><text x="86.0339%" y="383.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="85.7839%" y="357" width="0.3249%" height="15" fill="rgb(243,178,53)" fg:x="1056" fg:w="4"/><text x="86.0339%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="85.7839%" y="341" width="0.3249%" height="15" fill="rgb(233,221,20)" fg:x="1056" fg:w="4"/><text x="86.0339%" y="351.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="86.0276%" y="325" width="0.0812%" height="15" fill="rgb(218,95,35)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.0276%" y="309" width="0.0812%" height="15" fill="rgb(229,13,5)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="319.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="86.0276%" y="293" width="0.0812%" height="15" fill="rgb(252,164,30)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.0276%" y="277" width="0.0812%" height="15" fill="rgb(232,68,36)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="287.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="86.0276%" y="261" width="0.0812%" height="15" fill="rgb(219,59,54)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.0276%" y="245" width="0.0812%" height="15" fill="rgb(250,92,33)" fg:x="1059" fg:w="1"/><text x="86.2776%" y="255.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="86.1089%" y="341" width="0.1625%" height="15" fill="rgb(229,162,54)" fg:x="1060" fg:w="2"/><text x="86.3589%" y="351.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="86.1089%" y="325" width="0.1625%" height="15" fill="rgb(244,114,52)" fg:x="1060" fg:w="2"/><text x="86.3589%" y="335.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="86.1089%" y="309" width="0.1625%" height="15" fill="rgb(212,211,43)" fg:x="1060" fg:w="2"/><text x="86.3589%" y="319.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="86.1089%" y="293" width="0.1625%" height="15" fill="rgb(226,147,8)" fg:x="1060" fg:w="2"/><text x="86.3589%" y="303.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.1901%" y="277" width="0.0812%" height="15" fill="rgb(226,23,13)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="86.1901%" y="261" width="0.0812%" height="15" fill="rgb(240,63,4)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="271.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="86.1901%" y="245" width="0.0812%" height="15" fill="rgb(221,1,32)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="86.1901%" y="229" width="0.0812%" height="15" fill="rgb(242,117,10)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="86.1901%" y="213" width="0.0812%" height="15" fill="rgb(249,172,44)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="86.1901%" y="197" width="0.0812%" height="15" fill="rgb(244,46,45)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="86.1901%" y="181" width="0.0812%" height="15" fill="rgb(206,43,17)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="86.1901%" y="165" width="0.0812%" height="15" fill="rgb(239,218,39)" fg:x="1061" fg:w="1"/><text x="86.4401%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.3526%" y="261" width="0.0812%" height="15" fill="rgb(208,169,54)" fg:x="1063" fg:w="1"/><text x="86.6026%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (2 samples, 0.16%)</title><rect x="86.4338%" y="261" width="0.1625%" height="15" fill="rgb(247,25,42)" fg:x="1064" fg:w="2"/><text x="86.6838%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="86.4338%" y="245" width="0.1625%" height="15" fill="rgb(226,23,31)" fg:x="1064" fg:w="2"/><text x="86.6838%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.5150%" y="229" width="0.0812%" height="15" fill="rgb(247,16,28)" fg:x="1065" fg:w="1"/><text x="86.7650%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="86.6775%" y="245" width="0.3249%" height="15" fill="rgb(231,147,38)" fg:x="1067" fg:w="4"/><text x="86.9275%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="86.6775%" y="229" width="0.3249%" height="15" fill="rgb(253,81,48)" fg:x="1067" fg:w="4"/><text x="86.9275%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="87.0024%" y="245" width="0.1625%" height="15" fill="rgb(249,222,43)" fg:x="1071" fg:w="2"/><text x="87.2524%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="87.0837%" y="229" width="0.0812%" height="15" fill="rgb(221,3,27)" fg:x="1072" fg:w="1"/><text x="87.3337%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (1 samples, 0.08%)</title><rect x="87.2461%" y="181" width="0.0812%" height="15" fill="rgb(228,180,5)" fg:x="1074" fg:w="1"/><text x="87.4961%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="87.2461%" y="165" width="0.0812%" height="15" fill="rgb(227,131,42)" fg:x="1074" fg:w="1"/><text x="87.4961%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="87.2461%" y="149" width="0.0812%" height="15" fill="rgb(212,3,39)" fg:x="1074" fg:w="1"/><text x="87.4961%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.2461%" y="133" width="0.0812%" height="15" fill="rgb(226,45,5)" fg:x="1074" fg:w="1"/><text x="87.4961%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (14 samples, 1.14%)</title><rect x="87.3274%" y="181" width="1.1373%" height="15" fill="rgb(215,167,45)" fg:x="1075" fg:w="14"/><text x="87.5774%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (14 samples, 1.14%)</title><rect x="87.3274%" y="165" width="1.1373%" height="15" fill="rgb(250,218,53)" fg:x="1075" fg:w="14"/><text x="87.5774%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (14 samples, 1.14%)</title><rect x="87.3274%" y="149" width="1.1373%" height="15" fill="rgb(207,140,0)" fg:x="1075" fg:w="14"/><text x="87.5774%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="88.4647%" y="181" width="0.0812%" height="15" fill="rgb(238,133,51)" fg:x="1089" fg:w="1"/><text x="88.7147%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.46%)</title><rect x="87.1649%" y="229" width="1.4622%" height="15" fill="rgb(218,203,53)" fg:x="1073" fg:w="18"/><text x="87.4149%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (17 samples, 1.38%)</title><rect x="87.2461%" y="213" width="1.3810%" height="15" fill="rgb(226,184,25)" fg:x="1074" fg:w="17"/><text x="87.4961%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (17 samples, 1.38%)</title><rect x="87.2461%" y="197" width="1.3810%" height="15" fill="rgb(231,121,21)" fg:x="1074" fg:w="17"/><text x="87.4961%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="88.5459%" y="181" width="0.0812%" height="15" fill="rgb(251,14,34)" fg:x="1090" fg:w="1"/><text x="88.7959%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="88.5459%" y="165" width="0.0812%" height="15" fill="rgb(249,193,11)" fg:x="1090" fg:w="1"/><text x="88.7959%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="88.5459%" y="149" width="0.0812%" height="15" fill="rgb(220,172,37)" fg:x="1090" fg:w="1"/><text x="88.7959%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.7896%" y="213" width="0.0812%" height="15" fill="rgb(231,229,43)" fg:x="1093" fg:w="1"/><text x="89.0396%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="88.8708%" y="213" width="0.2437%" height="15" fill="rgb(250,161,5)" fg:x="1094" fg:w="3"/><text x="89.1208%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="88.9521%" y="197" width="0.1625%" height="15" fill="rgb(218,225,18)" fg:x="1095" fg:w="2"/><text x="89.2021%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="89.0333%" y="181" width="0.0812%" height="15" fill="rgb(245,45,42)" fg:x="1096" fg:w="1"/><text x="89.2833%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="89.0333%" y="165" width="0.0812%" height="15" fill="rgb(211,115,1)" fg:x="1096" fg:w="1"/><text x="89.2833%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (33 samples, 2.68%)</title><rect x="86.5963%" y="261" width="2.6807%" height="15" fill="rgb(248,133,52)" fg:x="1066" fg:w="33"/><text x="86.8463%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (26 samples, 2.11%)</title><rect x="87.1649%" y="245" width="2.1121%" height="15" fill="rgb(238,100,21)" fg:x="1073" fg:w="26"/><text x="87.4149%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.65%)</title><rect x="88.6271%" y="229" width="0.6499%" height="15" fill="rgb(247,144,11)" fg:x="1091" fg:w="8"/><text x="88.8771%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="89.1145%" y="213" width="0.1625%" height="15" fill="rgb(206,164,16)" fg:x="1097" fg:w="2"/><text x="89.3645%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="89.2770%" y="213" width="0.0812%" height="15" fill="rgb(222,34,3)" fg:x="1099" fg:w="1"/><text x="89.5270%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="89.2770%" y="261" width="0.3249%" height="15" fill="rgb(248,82,4)" fg:x="1099" fg:w="4"/><text x="89.5270%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="89.2770%" y="245" width="0.3249%" height="15" fill="rgb(228,81,46)" fg:x="1099" fg:w="4"/><text x="89.5270%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="89.2770%" y="229" width="0.3249%" height="15" fill="rgb(227,67,47)" fg:x="1099" fg:w="4"/><text x="89.5270%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="89.3582%" y="213" width="0.2437%" height="15" fill="rgb(215,93,53)" fg:x="1100" fg:w="3"/><text x="89.6082%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.3582%" y="197" width="0.2437%" height="15" fill="rgb(248,194,39)" fg:x="1100" fg:w="3"/><text x="89.6082%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="89.3582%" y="181" width="0.2437%" height="15" fill="rgb(215,5,19)" fg:x="1100" fg:w="3"/><text x="89.6082%" y="191.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="89.3582%" y="165" width="0.2437%" height="15" fill="rgb(226,215,51)" fg:x="1100" fg:w="3"/><text x="89.6082%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="89.6019%" y="229" width="0.0812%" height="15" fill="rgb(225,56,26)" fg:x="1103" fg:w="1"/><text x="89.8519%" y="239.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (43 samples, 3.49%)</title><rect x="86.2713%" y="309" width="3.4931%" height="15" fill="rgb(222,75,29)" fg:x="1062" fg:w="43"/><text x="86.5213%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (43 samples, 3.49%)</title><rect x="86.2713%" y="293" width="3.4931%" height="15" fill="rgb(236,139,6)" fg:x="1062" fg:w="43"/><text x="86.5213%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (43 samples, 3.49%)</title><rect x="86.2713%" y="277" width="3.4931%" height="15" fill="rgb(223,137,36)" fg:x="1062" fg:w="43"/><text x="86.5213%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="89.6019%" y="261" width="0.1625%" height="15" fill="rgb(226,99,2)" fg:x="1103" fg:w="2"/><text x="89.8519%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="89.6019%" y="245" width="0.1625%" height="15" fill="rgb(206,133,23)" fg:x="1103" fg:w="2"/><text x="89.8519%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="89.6832%" y="229" width="0.0812%" height="15" fill="rgb(243,173,15)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="89.6832%" y="213" width="0.0812%" height="15" fill="rgb(228,69,28)" fg:x="1104" fg:w="1"/><text x="89.9332%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="89.7644%" y="309" width="0.0812%" height="15" fill="rgb(212,51,22)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="89.7644%" y="293" width="0.0812%" height="15" fill="rgb(227,113,0)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.7644%" y="277" width="0.0812%" height="15" fill="rgb(252,84,27)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="89.7644%" y="261" width="0.0812%" height="15" fill="rgb(223,145,39)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.7644%" y="245" width="0.0812%" height="15" fill="rgb(239,219,30)" fg:x="1105" fg:w="1"/><text x="90.0144%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.41%)</title><rect x="89.8457%" y="245" width="0.4062%" height="15" fill="rgb(224,196,39)" fg:x="1106" fg:w="5"/><text x="90.0957%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="90.1706%" y="229" width="0.0812%" height="15" fill="rgb(205,35,43)" fg:x="1110" fg:w="1"/><text x="90.4206%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (50 samples, 4.06%)</title><rect x="86.2713%" y="325" width="4.0617%" height="15" fill="rgb(228,201,21)" fg:x="1062" fg:w="50"/><text x="86.5213%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.49%)</title><rect x="89.8457%" y="309" width="0.4874%" height="15" fill="rgb(237,118,16)" fg:x="1106" fg:w="6"/><text x="90.0957%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.49%)</title><rect x="89.8457%" y="293" width="0.4874%" height="15" fill="rgb(241,17,19)" fg:x="1106" fg:w="6"/><text x="90.0957%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.49%)</title><rect x="89.8457%" y="277" width="0.4874%" height="15" fill="rgb(214,10,25)" fg:x="1106" fg:w="6"/><text x="90.0957%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.49%)</title><rect x="89.8457%" y="261" width="0.4874%" height="15" fill="rgb(238,37,29)" fg:x="1106" fg:w="6"/><text x="90.0957%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="90.2518%" y="245" width="0.0812%" height="15" fill="rgb(253,83,25)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="90.2518%" y="229" width="0.0812%" height="15" fill="rgb(234,192,12)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.2518%" y="213" width="0.0812%" height="15" fill="rgb(241,216,45)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.2518%" y="197" width="0.0812%" height="15" fill="rgb(242,22,33)" fg:x="1111" fg:w="1"/><text x="90.5018%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.3331%" y="261" width="0.0812%" height="15" fill="rgb(231,105,49)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="90.3331%" y="245" width="0.0812%" height="15" fill="rgb(218,204,15)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="90.3331%" y="229" width="0.0812%" height="15" fill="rgb(235,138,41)" fg:x="1112" fg:w="1"/><text x="90.5831%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.4143%" y="261" width="0.0812%" height="15" fill="rgb(246,0,9)" fg:x="1113" fg:w="1"/><text x="90.6643%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (2 samples, 0.16%)</title><rect x="90.4955%" y="245" width="0.1625%" height="15" fill="rgb(210,74,4)" fg:x="1114" fg:w="2"/><text x="90.7455%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (2 samples, 0.16%)</title><rect x="90.4955%" y="229" width="0.1625%" height="15" fill="rgb(250,60,41)" fg:x="1114" fg:w="2"/><text x="90.7455%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="90.6580%" y="245" width="0.1625%" height="15" fill="rgb(220,115,12)" fg:x="1116" fg:w="2"/><text x="90.9080%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="90.7392%" y="229" width="0.0812%" height="15" fill="rgb(237,100,13)" fg:x="1117" fg:w="1"/><text x="90.9892%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (6 samples, 0.49%)</title><rect x="90.8205%" y="245" width="0.4874%" height="15" fill="rgb(213,55,26)" fg:x="1118" fg:w="6"/><text x="91.0705%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (6 samples, 0.49%)</title><rect x="90.8205%" y="229" width="0.4874%" height="15" fill="rgb(216,17,4)" fg:x="1118" fg:w="6"/><text x="91.0705%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="90.9829%" y="213" width="0.3249%" height="15" fill="rgb(220,153,47)" fg:x="1120" fg:w="4"/><text x="91.2329%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="90.9829%" y="197" width="0.3249%" height="15" fill="rgb(215,131,9)" fg:x="1120" fg:w="4"/><text x="91.2329%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="91.0642%" y="181" width="0.2437%" height="15" fill="rgb(233,46,42)" fg:x="1121" fg:w="3"/><text x="91.3142%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (1 samples, 0.08%)</title><rect x="91.3079%" y="197" width="0.0812%" height="15" fill="rgb(226,86,7)" fg:x="1124" fg:w="1"/><text x="91.5579%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.3079%" y="181" width="0.0812%" height="15" fill="rgb(239,226,21)" fg:x="1124" fg:w="1"/><text x="91.5579%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.3079%" y="165" width="0.0812%" height="15" fill="rgb(244,137,22)" fg:x="1124" fg:w="1"/><text x="91.5579%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.3079%" y="149" width="0.0812%" height="15" fill="rgb(211,139,35)" fg:x="1124" fg:w="1"/><text x="91.5579%" y="159.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.5516%" y="133" width="0.0812%" height="15" fill="rgb(214,62,50)" fg:x="1127" fg:w="1"/><text x="91.8016%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.6328%" y="133" width="0.0812%" height="15" fill="rgb(212,113,44)" fg:x="1128" fg:w="1"/><text x="91.8828%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="91.7141%" y="133" width="0.2437%" height="15" fill="rgb(226,150,43)" fg:x="1129" fg:w="3"/><text x="91.9641%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="91.7141%" y="117" width="0.2437%" height="15" fill="rgb(250,71,37)" fg:x="1129" fg:w="3"/><text x="91.9641%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="91.7141%" y="101" width="0.2437%" height="15" fill="rgb(219,76,19)" fg:x="1129" fg:w="3"/><text x="91.9641%" y="111.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="91.7141%" y="85" width="0.2437%" height="15" fill="rgb(250,39,11)" fg:x="1129" fg:w="3"/><text x="91.9641%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="91.9578%" y="133" width="0.0812%" height="15" fill="rgb(230,64,31)" fg:x="1132" fg:w="1"/><text x="92.2078%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.9578%" y="117" width="0.0812%" height="15" fill="rgb(208,222,23)" fg:x="1132" fg:w="1"/><text x="92.2078%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.9578%" y="101" width="0.0812%" height="15" fill="rgb(227,125,18)" fg:x="1132" fg:w="1"/><text x="92.2078%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.9578%" y="85" width="0.0812%" height="15" fill="rgb(234,210,9)" fg:x="1132" fg:w="1"/><text x="92.2078%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.49%)</title><rect x="92.0390%" y="133" width="0.4874%" height="15" fill="rgb(217,127,24)" fg:x="1133" fg:w="6"/><text x="92.2890%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (6 samples, 0.49%)</title><rect x="92.0390%" y="117" width="0.4874%" height="15" fill="rgb(239,141,48)" fg:x="1133" fg:w="6"/><text x="92.2890%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.41%)</title><rect x="92.1202%" y="101" width="0.4062%" height="15" fill="rgb(227,109,8)" fg:x="1134" fg:w="5"/><text x="92.3702%" y="111.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="92.2827%" y="85" width="0.2437%" height="15" fill="rgb(235,184,23)" fg:x="1136" fg:w="3"/><text x="92.5327%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="92.5264%" y="117" width="0.0812%" height="15" fill="rgb(227,226,48)" fg:x="1139" fg:w="1"/><text x="92.7764%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.5264%" y="101" width="0.0812%" height="15" fill="rgb(206,150,11)" fg:x="1139" fg:w="1"/><text x="92.7764%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.5264%" y="85" width="0.0812%" height="15" fill="rgb(254,2,33)" fg:x="1139" fg:w="1"/><text x="92.7764%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.5264%" y="69" width="0.0812%" height="15" fill="rgb(243,160,20)" fg:x="1139" fg:w="1"/><text x="92.7764%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 3.01%)</title><rect x="91.3079%" y="229" width="3.0057%" height="15" fill="rgb(218,208,30)" fg:x="1124" fg:w="37"/><text x="91.5579%" y="239.50">&lt;co..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (37 samples, 3.01%)</title><rect x="91.3079%" y="213" width="3.0057%" height="15" fill="rgb(224,120,49)" fg:x="1124" fg:w="37"/><text x="91.5579%" y="223.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (36 samples, 2.92%)</title><rect x="91.3891%" y="197" width="2.9245%" height="15" fill="rgb(246,12,2)" fg:x="1125" fg:w="36"/><text x="91.6391%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (36 samples, 2.92%)</title><rect x="91.3891%" y="181" width="2.9245%" height="15" fill="rgb(236,117,3)" fg:x="1125" fg:w="36"/><text x="91.6391%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (36 samples, 2.92%)</title><rect x="91.3891%" y="165" width="2.9245%" height="15" fill="rgb(216,128,52)" fg:x="1125" fg:w="36"/><text x="91.6391%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.84%)</title><rect x="91.4703%" y="149" width="2.8432%" height="15" fill="rgb(246,145,19)" fg:x="1126" fg:w="35"/><text x="91.7203%" y="159.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (22 samples, 1.79%)</title><rect x="92.5264%" y="133" width="1.7872%" height="15" fill="rgb(222,11,46)" fg:x="1139" fg:w="22"/><text x="92.7764%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (21 samples, 1.71%)</title><rect x="92.6076%" y="117" width="1.7059%" height="15" fill="rgb(245,82,36)" fg:x="1140" fg:w="21"/><text x="92.8576%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (21 samples, 1.71%)</title><rect x="92.6076%" y="101" width="1.7059%" height="15" fill="rgb(250,73,51)" fg:x="1140" fg:w="21"/><text x="92.8576%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.65%)</title><rect x="94.3136%" y="213" width="0.6499%" height="15" fill="rgb(221,189,23)" fg:x="1161" fg:w="8"/><text x="94.5636%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.8010%" y="197" width="0.1625%" height="15" fill="rgb(210,33,7)" fg:x="1167" fg:w="2"/><text x="95.0510%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.8010%" y="181" width="0.1625%" height="15" fill="rgb(210,107,22)" fg:x="1167" fg:w="2"/><text x="95.0510%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="94.8010%" y="165" width="0.1625%" height="15" fill="rgb(222,116,37)" fg:x="1167" fg:w="2"/><text x="95.0510%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.9634%" y="213" width="0.2437%" height="15" fill="rgb(254,17,48)" fg:x="1169" fg:w="3"/><text x="95.2134%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1259%" y="197" width="0.0812%" height="15" fill="rgb(224,36,32)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1259%" y="181" width="0.0812%" height="15" fill="rgb(232,90,46)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.1259%" y="165" width="0.0812%" height="15" fill="rgb(241,66,40)" fg:x="1171" fg:w="1"/><text x="95.3759%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (59 samples, 4.79%)</title><rect x="90.4955%" y="261" width="4.7929%" height="15" fill="rgb(249,184,29)" fg:x="1114" fg:w="59"/><text x="90.7455%" y="271.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (49 samples, 3.98%)</title><rect x="91.3079%" y="245" width="3.9805%" height="15" fill="rgb(231,181,1)" fg:x="1124" fg:w="49"/><text x="91.5579%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.97%)</title><rect x="94.3136%" y="229" width="0.9748%" height="15" fill="rgb(224,94,2)" fg:x="1161" fg:w="12"/><text x="94.5636%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="95.2071%" y="213" width="0.0812%" height="15" fill="rgb(229,170,15)" fg:x="1172" fg:w="1"/><text x="95.4571%" y="223.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="95.2884%" y="213" width="0.0812%" height="15" fill="rgb(240,127,35)" fg:x="1173" fg:w="1"/><text x="95.5384%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="95.2884%" y="261" width="0.1625%" height="15" fill="rgb(248,196,34)" fg:x="1173" fg:w="2"/><text x="95.5384%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="95.2884%" y="245" width="0.1625%" height="15" fill="rgb(236,137,7)" fg:x="1173" fg:w="2"/><text x="95.5384%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="95.2884%" y="229" width="0.1625%" height="15" fill="rgb(235,127,16)" fg:x="1173" fg:w="2"/><text x="95.5384%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.3696%" y="213" width="0.0812%" height="15" fill="rgb(250,192,54)" fg:x="1174" fg:w="1"/><text x="95.6196%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.4509%" y="213" width="0.0812%" height="15" fill="rgb(218,98,20)" fg:x="1175" fg:w="1"/><text x="95.7009%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.4509%" y="197" width="0.0812%" height="15" fill="rgb(230,176,47)" fg:x="1175" fg:w="1"/><text x="95.7009%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.4509%" y="181" width="0.0812%" height="15" fill="rgb(244,2,33)" fg:x="1175" fg:w="1"/><text x="95.7009%" y="191.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="95.5321%" y="213" width="0.1625%" height="15" fill="rgb(231,100,17)" fg:x="1176" fg:w="2"/><text x="95.7821%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="95.4509%" y="229" width="0.3249%" height="15" fill="rgb(245,23,12)" fg:x="1175" fg:w="4"/><text x="95.7009%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="95.6946%" y="213" width="0.0812%" height="15" fill="rgb(249,55,22)" fg:x="1178" fg:w="1"/><text x="95.9446%" y="223.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.6946%" y="197" width="0.0812%" height="15" fill="rgb(207,134,9)" fg:x="1178" fg:w="1"/><text x="95.9446%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (68 samples, 5.52%)</title><rect x="90.3331%" y="309" width="5.5240%" height="15" fill="rgb(218,134,0)" fg:x="1112" fg:w="68"/><text x="90.5831%" y="319.50">&lt;regex:..</text></g><g><title>regex::builders::Builder::build_one_string (68 samples, 5.52%)</title><rect x="90.3331%" y="293" width="5.5240%" height="15" fill="rgb(213,212,33)" fg:x="1112" fg:w="68"/><text x="90.5831%" y="303.50">regex::..</text></g><g><title>regex_automata::meta::regex::Builder::build (68 samples, 5.52%)</title><rect x="90.3331%" y="277" width="5.5240%" height="15" fill="rgb(252,106,18)" fg:x="1112" fg:w="68"/><text x="90.5831%" y="287.50">regex_a..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.41%)</title><rect x="95.4509%" y="261" width="0.4062%" height="15" fill="rgb(208,126,42)" fg:x="1175" fg:w="5"/><text x="95.7009%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.41%)</title><rect x="95.4509%" y="245" width="0.4062%" height="15" fill="rgb(246,175,29)" fg:x="1175" fg:w="5"/><text x="95.7009%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="95.7758%" y="229" width="0.0812%" height="15" fill="rgb(215,13,50)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::capture (1 samples, 0.08%)</title><rect x="95.7758%" y="213" width="0.0812%" height="15" fill="rgb(216,172,15)" fg:x="1179" fg:w="1"/><text x="96.0258%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.8570%" y="261" width="0.0812%" height="15" fill="rgb(212,103,13)" fg:x="1180" fg:w="1"/><text x="96.1070%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.8570%" y="245" width="0.0812%" height="15" fill="rgb(231,171,36)" fg:x="1180" fg:w="1"/><text x="96.1070%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.8570%" y="229" width="0.0812%" height="15" fill="rgb(250,123,20)" fg:x="1180" fg:w="1"/><text x="96.1070%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="95.8570%" y="309" width="0.1625%" height="15" fill="rgb(212,53,50)" fg:x="1180" fg:w="2"/><text x="96.1070%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="95.8570%" y="293" width="0.1625%" height="15" fill="rgb(243,54,12)" fg:x="1180" fg:w="2"/><text x="96.1070%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="95.8570%" y="277" width="0.1625%" height="15" fill="rgb(234,101,34)" fg:x="1180" fg:w="2"/><text x="96.1070%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="95.9383%" y="261" width="0.0812%" height="15" fill="rgb(254,67,22)" fg:x="1181" fg:w="1"/><text x="96.1883%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="95.9383%" y="245" width="0.0812%" height="15" fill="rgb(250,35,47)" fg:x="1181" fg:w="1"/><text x="96.1883%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="95.9383%" y="229" width="0.0812%" height="15" fill="rgb(226,126,38)" fg:x="1181" fg:w="1"/><text x="96.1883%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.9383%" y="213" width="0.0812%" height="15" fill="rgb(216,138,53)" fg:x="1181" fg:w="1"/><text x="96.1883%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="96.1007%" y="293" width="0.0812%" height="15" fill="rgb(246,199,43)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="96.1007%" y="277" width="0.0812%" height="15" fill="rgb(232,125,11)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.1007%" y="261" width="0.0812%" height="15" fill="rgb(218,219,45)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="271.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="96.1007%" y="245" width="0.0812%" height="15" fill="rgb(216,102,54)" fg:x="1183" fg:w="1"/><text x="96.3507%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="96.1820%" y="229" width="0.1625%" height="15" fill="rgb(250,228,7)" fg:x="1184" fg:w="2"/><text x="96.4320%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="96.2632%" y="213" width="0.0812%" height="15" fill="rgb(226,125,25)" fg:x="1185" fg:w="1"/><text x="96.5132%" y="223.50"></text></g><g><title>indefinite::rules::number::Number::check (75 samples, 6.09%)</title><rect x="90.3331%" y="325" width="6.0926%" height="15" fill="rgb(224,165,27)" fg:x="1112" fg:w="75"/><text x="90.5831%" y="335.50">indefini..</text></g><g><title>regex::regex::string::Regex::is_match_at (5 samples, 0.41%)</title><rect x="96.0195%" y="309" width="0.4062%" height="15" fill="rgb(233,86,3)" fg:x="1182" fg:w="5"/><text x="96.2695%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="96.1820%" y="293" width="0.2437%" height="15" fill="rgb(228,116,20)" fg:x="1184" fg:w="3"/><text x="96.4320%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="96.1820%" y="277" width="0.2437%" height="15" fill="rgb(209,192,17)" fg:x="1184" fg:w="3"/><text x="96.4320%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="96.1820%" y="261" width="0.2437%" height="15" fill="rgb(224,88,34)" fg:x="1184" fg:w="3"/><text x="96.4320%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="96.1820%" y="245" width="0.2437%" height="15" fill="rgb(233,38,6)" fg:x="1184" fg:w="3"/><text x="96.4320%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="96.3444%" y="229" width="0.0812%" height="15" fill="rgb(212,59,30)" fg:x="1186" fg:w="1"/><text x="96.5944%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.4257%" y="245" width="0.0812%" height="15" fill="rgb(213,80,3)" fg:x="1187" fg:w="1"/><text x="96.6757%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.4257%" y="229" width="0.0812%" height="15" fill="rgb(251,178,7)" fg:x="1187" fg:w="1"/><text x="96.6757%" y="239.50"></text></g><g><title>regex_automata::meta::regex::RegexInfo::new (1 samples, 0.08%)</title><rect x="96.5069%" y="245" width="0.0812%" height="15" fill="rgb(213,154,26)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.5069%" y="229" width="0.0812%" height="15" fill="rgb(238,165,49)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.5069%" y="213" width="0.0812%" height="15" fill="rgb(248,91,46)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.5069%" y="197" width="0.0812%" height="15" fill="rgb(244,21,52)" fg:x="1188" fg:w="1"/><text x="96.7569%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="96.5881%" y="229" width="0.0812%" height="15" fill="rgb(247,122,20)" fg:x="1189" fg:w="1"/><text x="96.8381%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.6694%" y="213" width="0.0812%" height="15" fill="rgb(218,27,9)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="96.6694%" y="197" width="0.0812%" height="15" fill="rgb(246,7,6)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.6694%" y="181" width="0.0812%" height="15" fill="rgb(227,135,54)" fg:x="1190" fg:w="1"/><text x="96.9194%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="96.5881%" y="245" width="0.3249%" height="15" fill="rgb(247,14,11)" fg:x="1189" fg:w="4"/><text x="96.8381%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.6694%" y="229" width="0.2437%" height="15" fill="rgb(206,149,34)" fg:x="1190" fg:w="3"/><text x="96.9194%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="96.7506%" y="213" width="0.1625%" height="15" fill="rgb(227,228,4)" fg:x="1191" fg:w="2"/><text x="97.0006%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.9131%" y="213" width="0.0812%" height="15" fill="rgb(238,218,28)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.9131%" y="197" width="0.0812%" height="15" fill="rgb(252,86,40)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.9131%" y="181" width="0.0812%" height="15" fill="rgb(251,225,11)" fg:x="1193" fg:w="1"/><text x="97.1631%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="96.9943%" y="197" width="0.0812%" height="15" fill="rgb(206,46,49)" fg:x="1194" fg:w="1"/><text x="97.2443%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="96.9131%" y="245" width="0.2437%" height="15" fill="rgb(245,128,24)" fg:x="1193" fg:w="3"/><text x="97.1631%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="96.9131%" y="229" width="0.2437%" height="15" fill="rgb(219,177,34)" fg:x="1193" fg:w="3"/><text x="97.1631%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="96.9943%" y="213" width="0.1625%" height="15" fill="rgb(218,60,48)" fg:x="1194" fg:w="2"/><text x="97.2443%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.0755%" y="197" width="0.0812%" height="15" fill="rgb(221,11,5)" fg:x="1195" fg:w="1"/><text x="97.3255%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.0755%" y="181" width="0.0812%" height="15" fill="rgb(220,148,13)" fg:x="1195" fg:w="1"/><text x="97.3255%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.0755%" y="165" width="0.0812%" height="15" fill="rgb(210,16,3)" fg:x="1195" fg:w="1"/><text x="97.3255%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.0755%" y="149" width="0.0812%" height="15" fill="rgb(236,80,2)" fg:x="1195" fg:w="1"/><text x="97.3255%" y="159.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (11 samples, 0.89%)</title><rect x="96.4257%" y="293" width="0.8936%" height="15" fill="rgb(239,129,19)" fg:x="1187" fg:w="11"/><text x="96.6757%" y="303.50"></text></g><g><title>regex::builders::Builder::build_one_string (11 samples, 0.89%)</title><rect x="96.4257%" y="277" width="0.8936%" height="15" fill="rgb(220,106,35)" fg:x="1187" fg:w="11"/><text x="96.6757%" y="287.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.89%)</title><rect x="96.4257%" y="261" width="0.8936%" height="15" fill="rgb(252,139,45)" fg:x="1187" fg:w="11"/><text x="96.6757%" y="271.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.1568%" y="245" width="0.1625%" height="15" fill="rgb(229,8,36)" fg:x="1196" fg:w="2"/><text x="97.4068%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.1568%" y="229" width="0.1625%" height="15" fill="rgb(230,126,33)" fg:x="1196" fg:w="2"/><text x="97.4068%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="97.1568%" y="213" width="0.1625%" height="15" fill="rgb(239,140,21)" fg:x="1196" fg:w="2"/><text x="97.4068%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="97.2380%" y="197" width="0.0812%" height="15" fill="rgb(254,104,9)" fg:x="1197" fg:w="1"/><text x="97.4880%" y="207.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (12 samples, 0.97%)</title><rect x="96.4257%" y="309" width="0.9748%" height="15" fill="rgb(239,52,14)" fg:x="1187" fg:w="12"/><text x="96.6757%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="97.3193%" y="293" width="0.0812%" height="15" fill="rgb(208,227,44)" fg:x="1198" fg:w="1"/><text x="97.5693%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Sync+core::marker::Send+core::panic::unwind_safe::UnwindSafe+core::panic::unwind_safe::RefUnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="97.3193%" y="277" width="0.0812%" height="15" fill="rgb(246,18,19)" fg:x="1198" fg:w="1"/><text x="97.5693%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="97.3193%" y="261" width="0.0812%" height="15" fill="rgb(235,228,25)" fg:x="1198" fg:w="1"/><text x="97.5693%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="97.3193%" y="245" width="0.0812%" height="15" fill="rgb(240,156,20)" fg:x="1198" fg:w="1"/><text x="97.5693%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (152 samples, 12.35%)</title><rect x="85.1340%" y="405" width="12.3477%" height="15" fill="rgb(224,8,20)" fg:x="1048" fg:w="152"/><text x="85.3840%" y="415.50">&lt;&amp;kernel::model::E..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (140 samples, 11.37%)</title><rect x="86.1089%" y="389" width="11.3729%" height="15" fill="rgb(214,12,52)" fg:x="1060" fg:w="140"/><text x="86.3589%" y="399.50">plugins_core::loo..</text></g><g><title>indefinite::indefinite (140 samples, 11.37%)</title><rect x="86.1089%" y="373" width="11.3729%" height="15" fill="rgb(211,220,47)" fg:x="1060" fg:w="140"/><text x="86.3589%" y="383.50">indefinite::indef..</text></g><g><title>indefinite::methods::indefinite (140 samples, 11.37%)</title><rect x="86.1089%" y="357" width="11.3729%" height="15" fill="rgb(250,173,5)" fg:x="1060" fg:w="140"/><text x="86.3589%" y="367.50">indefinite::metho..</text></g><g><title>indefinite::methods::apply_rules (138 samples, 11.21%)</title><rect x="86.2713%" y="341" width="11.2104%" height="15" fill="rgb(250,125,52)" fg:x="1062" fg:w="138"/><text x="86.5213%" y="351.50">indefinite::metho..</text></g><g><title>indefinite::rules::other::Other::run (13 samples, 1.06%)</title><rect x="96.4257%" y="325" width="1.0561%" height="15" fill="rgb(209,133,18)" fg:x="1187" fg:w="13"/><text x="96.6757%" y="335.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="97.4005%" y="309" width="0.0812%" height="15" fill="rgb(216,173,22)" fg:x="1199" fg:w="1"/><text x="97.6505%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.4817%" y="373" width="0.1625%" height="15" fill="rgb(205,3,22)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="97.4817%" y="357" width="0.1625%" height="15" fill="rgb(248,22,20)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="97.4817%" y="341" width="0.1625%" height="15" fill="rgb(233,6,29)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="97.4817%" y="325" width="0.1625%" height="15" fill="rgb(240,22,54)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="97.4817%" y="309" width="0.1625%" height="15" fill="rgb(231,133,32)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="97.4817%" y="293" width="0.1625%" height="15" fill="rgb(248,193,4)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="97.4817%" y="277" width="0.1625%" height="15" fill="rgb(211,178,46)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="97.4817%" y="261" width="0.1625%" height="15" fill="rgb(224,5,42)" fg:x="1200" fg:w="2"/><text x="97.7317%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="97.5630%" y="245" width="0.0812%" height="15" fill="rgb(239,176,25)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="97.5630%" y="229" width="0.0812%" height="15" fill="rgb(245,187,50)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="97.5630%" y="213" width="0.0812%" height="15" fill="rgb(248,24,15)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.5630%" y="197" width="0.0812%" height="15" fill="rgb(205,166,13)" fg:x="1201" fg:w="1"/><text x="97.8130%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="97.4817%" y="389" width="0.2437%" height="15" fill="rgb(208,114,23)" fg:x="1200" fg:w="3"/><text x="97.7317%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="97.6442%" y="373" width="0.0812%" height="15" fill="rgb(239,127,18)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="97.6442%" y="357" width="0.0812%" height="15" fill="rgb(219,154,28)" fg:x="1202" fg:w="1"/><text x="97.8942%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.7254%" y="357" width="0.0812%" height="15" fill="rgb(225,157,23)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.7254%" y="341" width="0.0812%" height="15" fill="rgb(219,8,6)" fg:x="1203" fg:w="1"/><text x="97.9754%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.41%)</title><rect x="97.4817%" y="405" width="0.4062%" height="15" fill="rgb(212,47,6)" fg:x="1200" fg:w="5"/><text x="97.7317%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="97.7254%" y="389" width="0.1625%" height="15" fill="rgb(224,190,4)" fg:x="1203" fg:w="2"/><text x="97.9754%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="97.7254%" y="373" width="0.1625%" height="15" fill="rgb(239,183,29)" fg:x="1203" fg:w="2"/><text x="97.9754%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="97.8067%" y="357" width="0.0812%" height="15" fill="rgb(213,57,7)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="97.8067%" y="341" width="0.0812%" height="15" fill="rgb(216,148,1)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="97.8067%" y="325" width="0.0812%" height="15" fill="rgb(236,182,29)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8067%" y="309" width="0.0812%" height="15" fill="rgb(244,120,48)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8067%" y="293" width="0.0812%" height="15" fill="rgb(206,71,34)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8067%" y="277" width="0.0812%" height="15" fill="rgb(242,32,6)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8067%" y="261" width="0.0812%" height="15" fill="rgb(241,35,3)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8067%" y="245" width="0.0812%" height="15" fill="rgb(222,62,19)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="97.8067%" y="229" width="0.0812%" height="15" fill="rgb(223,110,41)" fg:x="1204" fg:w="1"/><text x="98.0567%" y="239.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="97.8879%" y="341" width="0.0812%" height="15" fill="rgb(208,224,4)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="97.8879%" y="325" width="0.0812%" height="15" fill="rgb(241,137,19)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8879%" y="309" width="0.0812%" height="15" fill="rgb(244,24,17)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="97.8879%" y="293" width="0.0812%" height="15" fill="rgb(245,178,49)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="97.8879%" y="277" width="0.0812%" height="15" fill="rgb(219,160,38)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="97.8879%" y="261" width="0.0812%" height="15" fill="rgb(228,137,14)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8879%" y="245" width="0.0812%" height="15" fill="rgb(237,134,11)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="97.8879%" y="229" width="0.0812%" height="15" fill="rgb(211,126,44)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8879%" y="213" width="0.0812%" height="15" fill="rgb(226,171,33)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="97.8879%" y="197" width="0.0812%" height="15" fill="rgb(253,99,13)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="207.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="97.8879%" y="181" width="0.0812%" height="15" fill="rgb(244,48,7)" fg:x="1205" fg:w="1"/><text x="98.1379%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2128%" y="197" width="0.0812%" height="15" fill="rgb(244,217,54)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2128%" y="181" width="0.0812%" height="15" fill="rgb(224,15,18)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2128%" y="165" width="0.0812%" height="15" fill="rgb(244,99,12)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="175.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.2128%" y="149" width="0.0812%" height="15" fill="rgb(233,226,8)" fg:x="1209" fg:w="1"/><text x="98.4628%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.2941%" y="181" width="0.0812%" height="15" fill="rgb(229,211,3)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2941%" y="165" width="0.0812%" height="15" fill="rgb(216,140,21)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="175.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2941%" y="149" width="0.0812%" height="15" fill="rgb(234,122,30)" fg:x="1210" fg:w="1"/><text x="98.5441%" y="159.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="98.2128%" y="213" width="0.2437%" height="15" fill="rgb(236,25,46)" fg:x="1209" fg:w="3"/><text x="98.4628%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.2941%" y="197" width="0.1625%" height="15" fill="rgb(217,52,54)" fg:x="1210" fg:w="2"/><text x="98.5441%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.3753%" y="181" width="0.0812%" height="15" fill="rgb(222,29,26)" fg:x="1211" fg:w="1"/><text x="98.6253%" y="191.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (8 samples, 0.65%)</title><rect x="97.8879%" y="405" width="0.6499%" height="15" fill="rgb(216,177,29)" fg:x="1205" fg:w="8"/><text x="98.1379%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (8 samples, 0.65%)</title><rect x="97.8879%" y="389" width="0.6499%" height="15" fill="rgb(247,136,51)" fg:x="1205" fg:w="8"/><text x="98.1379%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (8 samples, 0.65%)</title><rect x="97.8879%" y="373" width="0.6499%" height="15" fill="rgb(231,47,47)" fg:x="1205" fg:w="8"/><text x="98.1379%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (8 samples, 0.65%)</title><rect x="97.8879%" y="357" width="0.6499%" height="15" fill="rgb(211,192,36)" fg:x="1205" fg:w="8"/><text x="98.1379%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (7 samples, 0.57%)</title><rect x="97.9691%" y="341" width="0.5686%" height="15" fill="rgb(229,156,32)" fg:x="1206" fg:w="7"/><text x="98.2191%" y="351.50"></text></g><g><title>serde_json::de::from_trait (7 samples, 0.57%)</title><rect x="97.9691%" y="325" width="0.5686%" height="15" fill="rgb(248,213,20)" fg:x="1206" fg:w="7"/><text x="98.2191%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.57%)</title><rect x="97.9691%" y="309" width="0.5686%" height="15" fill="rgb(217,64,7)" fg:x="1206" fg:w="7"/><text x="98.2191%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.57%)</title><rect x="97.9691%" y="293" width="0.5686%" height="15" fill="rgb(232,142,8)" fg:x="1206" fg:w="7"/><text x="98.2191%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="98.0504%" y="277" width="0.4874%" height="15" fill="rgb(224,92,44)" fg:x="1207" fg:w="6"/><text x="98.3004%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="98.0504%" y="261" width="0.4874%" height="15" fill="rgb(214,169,17)" fg:x="1207" fg:w="6"/><text x="98.3004%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.49%)</title><rect x="98.0504%" y="245" width="0.4874%" height="15" fill="rgb(210,59,37)" fg:x="1207" fg:w="6"/><text x="98.3004%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.49%)</title><rect x="98.0504%" y="229" width="0.4874%" height="15" fill="rgb(214,116,48)" fg:x="1207" fg:w="6"/><text x="98.3004%" y="239.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.4565%" y="213" width="0.0812%" height="15" fill="rgb(244,191,6)" fg:x="1212" fg:w="1"/><text x="98.7065%" y="223.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (174 samples, 14.13%)</title><rect x="84.4842%" y="629" width="14.1348%" height="15" fill="rgb(241,50,52)" fg:x="1040" fg:w="174"/><text x="84.7342%" y="639.50">&lt;engine::session::Ses..</text></g><g><title>kernel::plugins::mw::apply_middleware (174 samples, 14.13%)</title><rect x="84.4842%" y="613" width="14.1348%" height="15" fill="rgb(236,75,39)" fg:x="1040" fg:w="174"/><text x="84.7342%" y="623.50">kernel::plugins::mw::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (174 samples, 14.13%)</title><rect x="84.4842%" y="597" width="14.1348%" height="15" fill="rgb(236,99,0)" fg:x="1040" fg:w="174"/><text x="84.7342%" y="607.50">kernel::plugins::mw::..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (174 samples, 14.13%)</title><rect x="84.4842%" y="581" width="14.1348%" height="15" fill="rgb(207,202,15)" fg:x="1040" fg:w="174"/><text x="84.7342%" y="591.50">&lt;engine::session::Exp..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (167 samples, 13.57%)</title><rect x="85.0528%" y="565" width="13.5662%" height="15" fill="rgb(233,207,14)" fg:x="1047" fg:w="167"/><text x="85.3028%" y="575.50">kernel::plugins::mw:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (167 samples, 13.57%)</title><rect x="85.0528%" y="549" width="13.5662%" height="15" fill="rgb(226,27,51)" fg:x="1047" fg:w="167"/><text x="85.3028%" y="559.50">&lt;plugins_dynlib::Dyn..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (166 samples, 13.48%)</title><rect x="85.1340%" y="533" width="13.4850%" height="15" fill="rgb(206,104,42)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="543.50">kernel::plugins::mw:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (166 samples, 13.48%)</title><rect x="85.1340%" y="517" width="13.4850%" height="15" fill="rgb(212,225,4)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="527.50">core::ops::function:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (166 samples, 13.48%)</title><rect x="85.1340%" y="501" width="13.4850%" height="15" fill="rgb(233,96,42)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="511.50">kernel::plugins::mw:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (166 samples, 13.48%)</title><rect x="85.1340%" y="485" width="13.4850%" height="15" fill="rgb(229,21,32)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="495.50">core::ops::function:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (166 samples, 13.48%)</title><rect x="85.1340%" y="469" width="13.4850%" height="15" fill="rgb(226,216,24)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="479.50">&lt;alloc::boxed::Box&lt;F..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (166 samples, 13.48%)</title><rect x="85.1340%" y="453" width="13.4850%" height="15" fill="rgb(221,163,17)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="463.50">&lt;engine::session::st..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (166 samples, 13.48%)</title><rect x="85.1340%" y="437" width="13.4850%" height="15" fill="rgb(216,216,42)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="447.50">&lt;plugins_core::looki..</text></g><g><title>plugins_core::looking::model::new_area_observation (166 samples, 13.48%)</title><rect x="85.1340%" y="421" width="13.4850%" height="15" fill="rgb(240,118,7)" fg:x="1048" fg:w="166"/><text x="85.3840%" y="431.50">plugins_core::lookin..</text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="98.5378%" y="405" width="0.0812%" height="15" fill="rgb(221,67,37)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.5378%" y="389" width="0.0812%" height="15" fill="rgb(241,32,44)" fg:x="1213" fg:w="1"/><text x="98.7878%" y="399.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="98.6190%" y="629" width="0.2437%" height="15" fill="rgb(235,204,43)" fg:x="1214" fg:w="3"/><text x="98.8690%" y="639.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="98.7002%" y="613" width="0.1625%" height="15" fill="rgb(213,116,10)" fg:x="1215" fg:w="2"/><text x="98.9502%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.7002%" y="597" width="0.1625%" height="15" fill="rgb(239,15,48)" fg:x="1215" fg:w="2"/><text x="98.9502%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7815%" y="581" width="0.0812%" height="15" fill="rgb(207,123,36)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="98.7815%" y="565" width="0.0812%" height="15" fill="rgb(209,103,30)" fg:x="1216" fg:w="1"/><text x="99.0315%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8627%" y="533" width="0.0812%" height="15" fill="rgb(238,100,19)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8627%" y="517" width="0.0812%" height="15" fill="rgb(244,30,14)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8627%" y="501" width="0.0812%" height="15" fill="rgb(249,174,6)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8627%" y="485" width="0.0812%" height="15" fill="rgb(235,213,41)" fg:x="1217" fg:w="1"/><text x="99.1127%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9439%" y="485" width="0.0812%" height="15" fill="rgb(213,118,6)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9439%" y="469" width="0.0812%" height="15" fill="rgb(235,44,51)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9439%" y="453" width="0.0812%" height="15" fill="rgb(217,9,53)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="98.9439%" y="437" width="0.0812%" height="15" fill="rgb(237,172,34)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="98.9439%" y="421" width="0.0812%" height="15" fill="rgb(206,206,11)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="431.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="98.9439%" y="405" width="0.0812%" height="15" fill="rgb(214,149,29)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.9439%" y="389" width="0.0812%" height="15" fill="rgb(208,123,3)" fg:x="1218" fg:w="1"/><text x="99.1939%" y="399.50"></text></g><g><title>engine::session::internal::Added::find_refs (3 samples, 0.24%)</title><rect x="98.8627%" y="613" width="0.2437%" height="15" fill="rgb(229,126,4)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.8627%" y="597" width="0.2437%" height="15" fill="rgb(222,92,36)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="98.8627%" y="581" width="0.2437%" height="15" fill="rgb(216,39,41)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="98.8627%" y="565" width="0.2437%" height="15" fill="rgb(253,127,28)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="98.8627%" y="549" width="0.2437%" height="15" fill="rgb(249,152,51)" fg:x="1217" fg:w="3"/><text x="99.1127%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.9439%" y="533" width="0.1625%" height="15" fill="rgb(209,123,42)" fg:x="1218" fg:w="2"/><text x="99.1939%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.9439%" y="517" width="0.1625%" height="15" fill="rgb(241,118,22)" fg:x="1218" fg:w="2"/><text x="99.1939%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.9439%" y="501" width="0.1625%" height="15" fill="rgb(208,25,7)" fg:x="1218" fg:w="2"/><text x="99.1939%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.0252%" y="485" width="0.0812%" height="15" fill="rgb(243,144,39)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.0252%" y="469" width="0.0812%" height="15" fill="rgb(250,50,5)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0252%" y="453" width="0.0812%" height="15" fill="rgb(207,67,11)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.0252%" y="437" width="0.0812%" height="15" fill="rgb(245,204,40)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.0252%" y="421" width="0.0812%" height="15" fill="rgb(238,228,24)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.0252%" y="405" width="0.0812%" height="15" fill="rgb(217,116,22)" fg:x="1219" fg:w="1"/><text x="99.2752%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.1064%" y="597" width="0.1625%" height="15" fill="rgb(234,98,12)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1064%" y="581" width="0.1625%" height="15" fill="rgb(242,170,50)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1064%" y="565" width="0.1625%" height="15" fill="rgb(235,7,5)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.1064%" y="549" width="0.1625%" height="15" fill="rgb(241,114,28)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1064%" y="533" width="0.1625%" height="15" fill="rgb(246,112,42)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.1064%" y="517" width="0.1625%" height="15" fill="rgb(248,228,14)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1064%" y="501" width="0.1625%" height="15" fill="rgb(208,133,18)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1064%" y="485" width="0.1625%" height="15" fill="rgb(207,35,49)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.1064%" y="469" width="0.1625%" height="15" fill="rgb(205,68,36)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.1064%" y="453" width="0.1625%" height="15" fill="rgb(245,62,40)" fg:x="1220" fg:w="2"/><text x="99.3564%" y="463.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.1877%" y="437" width="0.0812%" height="15" fill="rgb(228,27,24)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.1877%" y="421" width="0.0812%" height="15" fill="rgb(253,19,12)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.1877%" y="405" width="0.0812%" height="15" fill="rgb(232,28,20)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1877%" y="389" width="0.0812%" height="15" fill="rgb(218,35,51)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.1877%" y="373" width="0.0812%" height="15" fill="rgb(212,90,40)" fg:x="1221" fg:w="1"/><text x="99.4377%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.49%)</title><rect x="98.8627%" y="629" width="0.4874%" height="15" fill="rgb(220,172,12)" fg:x="1217" fg:w="6"/><text x="99.1127%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.1064%" y="613" width="0.2437%" height="15" fill="rgb(226,159,20)" fg:x="1220" fg:w="3"/><text x="99.3564%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.2689%" y="597" width="0.0812%" height="15" fill="rgb(234,205,16)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.2689%" y="581" width="0.0812%" height="15" fill="rgb(207,9,39)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.2689%" y="565" width="0.0812%" height="15" fill="rgb(249,143,15)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.2689%" y="549" width="0.0812%" height="15" fill="rgb(253,133,29)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.2689%" y="533" width="0.0812%" height="15" fill="rgb(221,187,0)" fg:x="1222" fg:w="1"/><text x="99.5189%" y="543.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="99.3501%" y="581" width="0.0812%" height="15" fill="rgb(205,204,26)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3501%" y="565" width="0.0812%" height="15" fill="rgb(224,68,54)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="575.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.3501%" y="549" width="0.0812%" height="15" fill="rgb(209,67,4)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="559.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="99.3501%" y="533" width="0.0812%" height="15" fill="rgb(228,229,18)" fg:x="1223" fg:w="1"/><text x="99.6001%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.5126%" y="485" width="0.1625%" height="15" fill="rgb(231,89,13)" fg:x="1225" fg:w="2"/><text x="99.7626%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.5126%" y="469" width="0.1625%" height="15" fill="rgb(210,182,18)" fg:x="1225" fg:w="2"/><text x="99.7626%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5938%" y="453" width="0.0812%" height="15" fill="rgb(240,105,2)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5938%" y="437" width="0.0812%" height="15" fill="rgb(207,170,50)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="447.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.5938%" y="421" width="0.0812%" height="15" fill="rgb(232,133,24)" fg:x="1226" fg:w="1"/><text x="99.8438%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6751%" y="485" width="0.0812%" height="15" fill="rgb(235,166,27)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.6751%" y="469" width="0.0812%" height="15" fill="rgb(209,19,13)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="99.6751%" y="453" width="0.0812%" height="15" fill="rgb(226,79,39)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.6751%" y="437" width="0.0812%" height="15" fill="rgb(222,163,10)" fg:x="1227" fg:w="1"/><text x="99.9251%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.41%)</title><rect x="99.4314%" y="581" width="0.4062%" height="15" fill="rgb(214,44,19)" fg:x="1224" fg:w="5"/><text x="99.6814%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.41%)</title><rect x="99.4314%" y="565" width="0.4062%" height="15" fill="rgb(210,217,13)" fg:x="1224" fg:w="5"/><text x="99.6814%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.41%)</title><rect x="99.4314%" y="549" width="0.4062%" height="15" fill="rgb(237,61,54)" fg:x="1224" fg:w="5"/><text x="99.6814%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="99.5126%" y="533" width="0.3249%" height="15" fill="rgb(226,184,24)" fg:x="1225" fg:w="4"/><text x="99.7626%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="99.5126%" y="517" width="0.3249%" height="15" fill="rgb(223,226,4)" fg:x="1225" fg:w="4"/><text x="99.7626%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="99.5126%" y="501" width="0.3249%" height="15" fill="rgb(210,26,41)" fg:x="1225" fg:w="4"/><text x="99.7626%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7563%" y="485" width="0.0812%" height="15" fill="rgb(220,221,6)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7563%" y="469" width="0.0812%" height="15" fill="rgb(225,89,49)" fg:x="1228" fg:w="1"/><text x="100.0063%" y="479.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (191 samples, 15.52%)</title><rect x="84.4029%" y="661" width="15.5158%" height="15" fill="rgb(218,70,45)" fg:x="1039" fg:w="191"/><text x="84.6529%" y="671.50">engine::session::Session..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (191 samples, 15.52%)</title><rect x="84.4029%" y="645" width="15.5158%" height="15" fill="rgb(238,166,21)" fg:x="1039" fg:w="191"/><text x="84.6529%" y="655.50">engine::session::Session..</text></g><g><title>kernel::model::EntityPtrResolver::world (7 samples, 0.57%)</title><rect x="99.3501%" y="629" width="0.5686%" height="15" fill="rgb(224,141,44)" fg:x="1223" fg:w="7"/><text x="99.6001%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.57%)</title><rect x="99.3501%" y="613" width="0.5686%" height="15" fill="rgb(230,12,49)" fg:x="1223" fg:w="7"/><text x="99.6001%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.57%)</title><rect x="99.3501%" y="597" width="0.5686%" height="15" fill="rgb(212,174,12)" fg:x="1223" fg:w="7"/><text x="99.6001%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.8375%" y="581" width="0.0812%" height="15" fill="rgb(246,67,9)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="591.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8375%" y="565" width="0.0812%" height="15" fill="rgb(239,35,23)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8375%" y="549" width="0.0812%" height="15" fill="rgb(211,167,0)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8375%" y="533" width="0.0812%" height="15" fill="rgb(225,119,45)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.8375%" y="517" width="0.0812%" height="15" fill="rgb(210,162,6)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.8375%" y="501" width="0.0812%" height="15" fill="rgb(208,118,35)" fg:x="1229" fg:w="1"/><text x="100.0875%" y="511.50"></text></g><g><title>all (1,231 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(239,4,53)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-e2bc26ad (1,231 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(213,130,21)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="1007.50">simple-e2bc26ad</text></g><g><title>_start (1,231 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(235,148,0)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(244,224,18)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(211,214,4)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,231 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(206,119,25)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(243,93,47)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(224,194,6)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(243,229,6)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(207,23,50)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,231 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(253,192,32)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,231 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(213,21,6)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,231 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(243,151,13)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,231 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(233,165,41)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,231 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(246,176,45)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,231 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(217,170,52)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,231 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(214,203,54)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,231 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(248,215,49)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,231 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(208,46,10)" fg:x="0" fg:w="1231"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (322 samples, 26.16%)</title><rect x="73.8424%" y="709" width="26.1576%" height="15" fill="rgb(254,5,31)" fg:x="909" fg:w="322"/><text x="74.0924%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as cr..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (322 samples, 26.16%)</title><rect x="73.8424%" y="693" width="26.1576%" height="15" fill="rgb(222,104,33)" fg:x="909" fg:w="322"/><text x="74.0924%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (322 samples, 26.16%)</title><rect x="73.8424%" y="677" width="26.1576%" height="15" fill="rgb(248,49,16)" fg:x="909" fg:w="322"/><text x="74.0924%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="99.9188%" y="661" width="0.0812%" height="15" fill="rgb(232,198,41)" fg:x="1230" fg:w="1"/><text x="100.1688%" y="671.50"></text></g></svg></svg>