<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1142" onload="init(evt)" viewBox="0 0 1200 1142" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1142" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1125.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1125.00"> </text><svg id="frames" x="10" width="1180" total_samples="1241"><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2417%" y="725" width="0.0806%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="1"/><text x="0.4917%" y="735.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4029%" y="661" width="0.1612%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="2"/><text x="0.6529%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="0.4029%" y="693" width="0.3223%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="4"/><text x="0.6529%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.32%)</title><rect x="0.4029%" y="677" width="0.3223%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="4"/><text x="0.6529%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="0.5641%" y="661" width="0.1612%" height="15" fill="rgb(208,68,35)" fg:x="7" fg:w="2"/><text x="0.8141%" y="671.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.5641%" y="645" width="0.1612%" height="15" fill="rgb(232,128,0)" fg:x="7" fg:w="2"/><text x="0.8141%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="0.3223%" y="725" width="0.4835%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="6"/><text x="0.5723%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="0.3223%" y="709" width="0.4835%" height="15" fill="rgb(228,23,34)" fg:x="4" fg:w="6"/><text x="0.5723%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_rune::RunePlugin&gt; (1 samples, 0.08%)</title><rect x="0.7252%" y="693" width="0.0806%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.9752%" y="703.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.8058%" y="645" width="0.2417%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="3"/><text x="1.0558%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.0475%" y="629" width="0.0806%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="1"/><text x="1.2975%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1281%" y="629" width="0.0806%" height="15" fill="rgb(240,193,28)" fg:x="14" fg:w="1"/><text x="1.3781%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.2893%" y="613" width="0.0806%" height="15" fill="rgb(216,20,37)" fg:x="16" fg:w="1"/><text x="1.5393%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.3699%" y="613" width="0.1612%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="2"/><text x="1.6199%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.6116%" y="565" width="0.0806%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="1"/><text x="1.8616%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="0.8058%" y="661" width="0.9670%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="12"/><text x="1.0558%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="1.0475%" y="645" width="0.7252%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="9"/><text x="1.2975%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.2087%" y="629" width="0.5641%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="7"/><text x="1.4587%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="1.5310%" y="613" width="0.2417%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="3"/><text x="1.7810%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="1.6116%" y="597" width="0.1612%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="2"/><text x="1.8616%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="1.6116%" y="581" width="0.1612%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="2"/><text x="1.8616%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.6922%" y="565" width="0.0806%" height="15" fill="rgb(235,183,28)" fg:x="21" fg:w="1"/><text x="1.9422%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.7728%" y="629" width="0.0806%" height="15" fill="rgb(221,5,38)" fg:x="22" fg:w="1"/><text x="2.0228%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="1.9339%" y="613" width="0.2417%" height="15" fill="rgb(247,18,42)" fg:x="24" fg:w="3"/><text x="2.1839%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.0951%" y="597" width="0.0806%" height="15" fill="rgb(241,131,45)" fg:x="26" fg:w="1"/><text x="2.3451%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="2.1757%" y="613" width="0.0806%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="1"/><text x="2.4257%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="2.1757%" y="597" width="0.0806%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="1"/><text x="2.4257%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.2562%" y="597" width="0.0806%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="1"/><text x="2.5062%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.64%)</title><rect x="1.7728%" y="645" width="0.6446%" height="15" fill="rgb(214,148,48)" fg:x="22" fg:w="8"/><text x="2.0228%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.56%)</title><rect x="1.8533%" y="629" width="0.5641%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="7"/><text x="2.1033%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="2.2562%" y="613" width="0.1612%" height="15" fill="rgb(209,103,24)" fg:x="28" fg:w="2"/><text x="2.5062%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="2.3368%" y="597" width="0.0806%" height="15" fill="rgb(229,88,8)" fg:x="29" fg:w="1"/><text x="2.5868%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.3368%" y="581" width="0.0806%" height="15" fill="rgb(213,181,19)" fg:x="29" fg:w="1"/><text x="2.5868%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.4174%" y="645" width="0.0806%" height="15" fill="rgb(254,191,54)" fg:x="30" fg:w="1"/><text x="2.6674%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (22 samples, 1.77%)</title><rect x="0.8058%" y="677" width="1.7728%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="22"/><text x="1.0558%" y="687.50">&lt;..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="1.7728%" y="661" width="0.8058%" height="15" fill="rgb(233,36,39)" fg:x="22" fg:w="10"/><text x="2.0228%" y="671.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::{{closure}} (1 samples, 0.08%)</title><rect x="2.4980%" y="645" width="0.0806%" height="15" fill="rgb(226,3,54)" fg:x="31" fg:w="1"/><text x="2.7480%" y="655.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (31 samples, 2.50%)</title><rect x="0.1612%" y="741" width="2.4980%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="31"/><text x="0.4112%" y="751.50">&lt;a..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (23 samples, 1.85%)</title><rect x="0.8058%" y="725" width="1.8533%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="23"/><text x="1.0558%" y="735.50">c..</text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 1.85%)</title><rect x="0.8058%" y="709" width="1.8533%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="23"/><text x="1.0558%" y="719.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (23 samples, 1.85%)</title><rect x="0.8058%" y="693" width="1.8533%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="23"/><text x="1.0558%" y="703.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.5786%" y="677" width="0.0806%" height="15" fill="rgb(208,69,12)" fg:x="32" fg:w="1"/><text x="2.8286%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="3.0620%" y="693" width="0.0806%" height="15" fill="rgb(235,93,37)" fg:x="38" fg:w="1"/><text x="3.3120%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="3.0620%" y="677" width="0.0806%" height="15" fill="rgb(213,116,39)" fg:x="38" fg:w="1"/><text x="3.3120%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="3.1426%" y="677" width="0.1612%" height="15" fill="rgb(222,207,29)" fg:x="39" fg:w="2"/><text x="3.3926%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="3.2232%" y="661" width="0.0806%" height="15" fill="rgb(206,96,30)" fg:x="40" fg:w="1"/><text x="3.4732%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="3.2232%" y="645" width="0.0806%" height="15" fill="rgb(218,138,4)" fg:x="40" fg:w="1"/><text x="3.4732%" y="655.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="3.3038%" y="661" width="0.3223%" height="15" fill="rgb(250,191,14)" fg:x="41" fg:w="4"/><text x="3.5538%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="3.3844%" y="645" width="0.2417%" height="15" fill="rgb(239,60,40)" fg:x="42" fg:w="3"/><text x="3.6344%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="3.3844%" y="629" width="0.2417%" height="15" fill="rgb(206,27,48)" fg:x="42" fg:w="3"/><text x="3.6344%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="3.3844%" y="613" width="0.2417%" height="15" fill="rgb(225,35,8)" fg:x="42" fg:w="3"/><text x="3.6344%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="3.3844%" y="597" width="0.2417%" height="15" fill="rgb(250,213,24)" fg:x="42" fg:w="3"/><text x="3.6344%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="3.3844%" y="581" width="0.2417%" height="15" fill="rgb(247,123,22)" fg:x="42" fg:w="3"/><text x="3.6344%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="3.3844%" y="565" width="0.2417%" height="15" fill="rgb(231,138,38)" fg:x="42" fg:w="3"/><text x="3.6344%" y="575.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="3.3844%" y="549" width="0.2417%" height="15" fill="rgb(231,145,46)" fg:x="42" fg:w="3"/><text x="3.6344%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7067%" y="613" width="0.0806%" height="15" fill="rgb(251,118,11)" fg:x="46" fg:w="1"/><text x="3.9567%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="3.7067%" y="597" width="0.0806%" height="15" fill="rgb(217,147,25)" fg:x="46" fg:w="1"/><text x="3.9567%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="3.7067%" y="581" width="0.0806%" height="15" fill="rgb(247,81,37)" fg:x="46" fg:w="1"/><text x="3.9567%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="3.7067%" y="565" width="0.0806%" height="15" fill="rgb(209,12,38)" fg:x="46" fg:w="1"/><text x="3.9567%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="3.7067%" y="549" width="0.0806%" height="15" fill="rgb(227,1,9)" fg:x="46" fg:w="1"/><text x="3.9567%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7067%" y="533" width="0.0806%" height="15" fill="rgb(248,47,43)" fg:x="46" fg:w="1"/><text x="3.9567%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.7067%" y="517" width="0.0806%" height="15" fill="rgb(221,10,30)" fg:x="46" fg:w="1"/><text x="3.9567%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.7067%" y="501" width="0.0806%" height="15" fill="rgb(210,229,1)" fg:x="46" fg:w="1"/><text x="3.9567%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.8678%" y="517" width="0.0806%" height="15" fill="rgb(222,148,37)" fg:x="48" fg:w="1"/><text x="4.1178%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="3.8678%" y="501" width="0.0806%" height="15" fill="rgb(234,67,33)" fg:x="48" fg:w="1"/><text x="4.1178%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="3.8678%" y="485" width="0.0806%" height="15" fill="rgb(247,98,35)" fg:x="48" fg:w="1"/><text x="4.1178%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="3.8678%" y="469" width="0.0806%" height="15" fill="rgb(247,138,52)" fg:x="48" fg:w="1"/><text x="4.1178%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="3.8678%" y="453" width="0.0806%" height="15" fill="rgb(213,79,30)" fg:x="48" fg:w="1"/><text x="4.1178%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="3.8678%" y="437" width="0.0806%" height="15" fill="rgb(246,177,23)" fg:x="48" fg:w="1"/><text x="4.1178%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="3.8678%" y="421" width="0.0806%" height="15" fill="rgb(230,62,27)" fg:x="48" fg:w="1"/><text x="4.1178%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.8678%" y="597" width="0.1612%" height="15" fill="rgb(216,154,8)" fg:x="48" fg:w="2"/><text x="4.1178%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.8678%" y="581" width="0.1612%" height="15" fill="rgb(244,35,45)" fg:x="48" fg:w="2"/><text x="4.1178%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="3.8678%" y="565" width="0.1612%" height="15" fill="rgb(251,115,12)" fg:x="48" fg:w="2"/><text x="4.1178%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="3.8678%" y="549" width="0.1612%" height="15" fill="rgb(240,54,50)" fg:x="48" fg:w="2"/><text x="4.1178%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="3.8678%" y="533" width="0.1612%" height="15" fill="rgb(233,84,52)" fg:x="48" fg:w="2"/><text x="4.1178%" y="543.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="3.9484%" y="517" width="0.0806%" height="15" fill="rgb(207,117,47)" fg:x="49" fg:w="1"/><text x="4.1984%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="3.9484%" y="501" width="0.0806%" height="15" fill="rgb(249,43,39)" fg:x="49" fg:w="1"/><text x="4.1984%" y="511.50"></text></g><g><title>plugins_rune::runner::SharedRunners::initialize (5 samples, 0.40%)</title><rect x="3.7067%" y="645" width="0.4029%" height="15" fill="rgb(209,38,44)" fg:x="46" fg:w="5"/><text x="3.9567%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.40%)</title><rect x="3.7067%" y="629" width="0.4029%" height="15" fill="rgb(236,212,23)" fg:x="46" fg:w="5"/><text x="3.9567%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="3.7873%" y="613" width="0.3223%" height="15" fill="rgb(242,79,21)" fg:x="47" fg:w="4"/><text x="4.0373%" y="623.50"></text></g><g><title>rune::runtime::vec::&lt;impl rune::runtime::to_value::ToValue for alloc::vec::Vec&lt;T&gt;&gt;::to_value (1 samples, 0.08%)</title><rect x="4.0290%" y="597" width="0.0806%" height="15" fill="rgb(211,96,35)" fg:x="50" fg:w="1"/><text x="4.2790%" y="607.50"></text></g><g><title>glob::is_dir (14 samples, 1.13%)</title><rect x="4.1096%" y="597" width="1.1281%" height="15" fill="rgb(253,215,40)" fg:x="51" fg:w="14"/><text x="4.3596%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (14 samples, 1.13%)</title><rect x="4.1096%" y="581" width="1.1281%" height="15" fill="rgb(211,81,21)" fg:x="51" fg:w="14"/><text x="4.3596%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (14 samples, 1.13%)</title><rect x="4.1096%" y="565" width="1.1281%" height="15" fill="rgb(208,190,38)" fg:x="51" fg:w="14"/><text x="4.3596%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (14 samples, 1.13%)</title><rect x="4.1096%" y="549" width="1.1281%" height="15" fill="rgb(235,213,38)" fg:x="51" fg:w="14"/><text x="4.3596%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (14 samples, 1.13%)</title><rect x="4.1096%" y="533" width="1.1281%" height="15" fill="rgb(237,122,38)" fg:x="51" fg:w="14"/><text x="4.3596%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (13 samples, 1.05%)</title><rect x="4.1902%" y="517" width="1.0475%" height="15" fill="rgb(244,218,35)" fg:x="52" fg:w="13"/><text x="4.4402%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (13 samples, 1.05%)</title><rect x="4.1902%" y="501" width="1.0475%" height="15" fill="rgb(240,68,47)" fg:x="52" fg:w="13"/><text x="4.4402%" y="511.50"></text></g><g><title>statx (13 samples, 1.05%)</title><rect x="4.1902%" y="485" width="1.0475%" height="15" fill="rgb(210,16,53)" fg:x="52" fg:w="13"/><text x="4.4402%" y="495.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 1.29%)</title><rect x="4.1096%" y="629" width="1.2893%" height="15" fill="rgb(235,124,12)" fg:x="51" fg:w="16"/><text x="4.3596%" y="639.50"></text></g><g><title>glob::fill_todo (16 samples, 1.29%)</title><rect x="4.1096%" y="613" width="1.2893%" height="15" fill="rgb(224,169,11)" fg:x="51" fg:w="16"/><text x="4.3596%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (2 samples, 0.16%)</title><rect x="5.2377%" y="597" width="0.1612%" height="15" fill="rgb(250,166,2)" fg:x="65" fg:w="2"/><text x="5.4877%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.16%)</title><rect x="5.2377%" y="581" width="0.1612%" height="15" fill="rgb(242,216,29)" fg:x="65" fg:w="2"/><text x="5.4877%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="5.2377%" y="565" width="0.1612%" height="15" fill="rgb(230,116,27)" fg:x="65" fg:w="2"/><text x="5.4877%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (2 samples, 0.16%)</title><rect x="5.2377%" y="549" width="0.1612%" height="15" fill="rgb(228,99,48)" fg:x="65" fg:w="2"/><text x="5.4877%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (2 samples, 0.16%)</title><rect x="5.2377%" y="533" width="0.1612%" height="15" fill="rgb(253,11,6)" fg:x="65" fg:w="2"/><text x="5.4877%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (2 samples, 0.16%)</title><rect x="5.2377%" y="517" width="0.1612%" height="15" fill="rgb(247,143,39)" fg:x="65" fg:w="2"/><text x="5.4877%" y="527.50"></text></g><g><title>statx (2 samples, 0.16%)</title><rect x="5.2377%" y="501" width="0.1612%" height="15" fill="rgb(236,97,10)" fg:x="65" fg:w="2"/><text x="5.4877%" y="511.50"></text></g><g><title>&lt;std::path::PathBuf as core::iter::traits::collect::FromIterator&lt;P&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.4795%" y="597" width="0.1612%" height="15" fill="rgb(233,208,19)" fg:x="68" fg:w="2"/><text x="5.7295%" y="607.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (26 samples, 2.10%)</title><rect x="3.6261%" y="661" width="2.0951%" height="15" fill="rgb(216,164,2)" fg:x="45" fg:w="26"/><text x="3.8761%" y="671.50">&lt;..</text></g><g><title>plugins_rune::sources::load_directory_sources (20 samples, 1.61%)</title><rect x="4.1096%" y="645" width="1.6116%" height="15" fill="rgb(220,129,5)" fg:x="51" fg:w="20"/><text x="4.3596%" y="655.50"></text></g><g><title>glob::glob (4 samples, 0.32%)</title><rect x="5.3989%" y="629" width="0.3223%" height="15" fill="rgb(242,17,10)" fg:x="67" fg:w="4"/><text x="5.6489%" y="639.50"></text></g><g><title>glob::glob_with (4 samples, 0.32%)</title><rect x="5.3989%" y="613" width="0.3223%" height="15" fill="rgb(242,107,0)" fg:x="67" fg:w="4"/><text x="5.6489%" y="623.50"></text></g><g><title>glob::Pattern::new (1 samples, 0.08%)</title><rect x="5.6406%" y="597" width="0.0806%" height="15" fill="rgb(251,28,31)" fg:x="70" fg:w="1"/><text x="5.8906%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8824%" y="597" width="0.0806%" height="15" fill="rgb(233,223,10)" fg:x="73" fg:w="1"/><text x="6.1324%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="5.9629%" y="597" width="0.1612%" height="15" fill="rgb(215,21,27)" fg:x="74" fg:w="2"/><text x="6.2129%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="5.9629%" y="581" width="0.1612%" height="15" fill="rgb(232,23,21)" fg:x="74" fg:w="2"/><text x="6.2129%" y="591.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="5.9629%" y="565" width="0.1612%" height="15" fill="rgb(244,5,23)" fg:x="74" fg:w="2"/><text x="6.2129%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.1241%" y="597" width="0.0806%" height="15" fill="rgb(226,81,46)" fg:x="76" fg:w="1"/><text x="6.3741%" y="607.50"></text></g><g><title>&lt;plugins_core::building::BuildingPlugin as kernel::plugins::Plugin&gt;::schema (7 samples, 0.56%)</title><rect x="5.8018%" y="629" width="0.5641%" height="15" fill="rgb(247,70,30)" fg:x="72" fg:w="7"/><text x="6.0518%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (7 samples, 0.56%)</title><rect x="5.8018%" y="613" width="0.5641%" height="15" fill="rgb(212,68,19)" fg:x="72" fg:w="7"/><text x="6.0518%" y="623.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="6.2047%" y="597" width="0.1612%" height="15" fill="rgb(240,187,13)" fg:x="77" fg:w="2"/><text x="6.4547%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2853%" y="581" width="0.0806%" height="15" fill="rgb(223,113,26)" fg:x="78" fg:w="1"/><text x="6.5353%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2853%" y="565" width="0.0806%" height="15" fill="rgb(206,192,2)" fg:x="78" fg:w="1"/><text x="6.5353%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2853%" y="549" width="0.0806%" height="15" fill="rgb(241,108,4)" fg:x="78" fg:w="1"/><text x="6.5353%" y="559.50"></text></g><g><title>&lt;plugins_core::carrying::actions::DropAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.3658%" y="597" width="0.0806%" height="15" fill="rgb(247,173,49)" fg:x="79" fg:w="1"/><text x="6.6158%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3658%" y="581" width="0.0806%" height="15" fill="rgb(224,114,35)" fg:x="79" fg:w="1"/><text x="6.6158%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="6.4464%" y="597" width="0.1612%" height="15" fill="rgb(245,159,27)" fg:x="80" fg:w="2"/><text x="6.6964%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="6.4464%" y="581" width="0.1612%" height="15" fill="rgb(245,172,44)" fg:x="80" fg:w="2"/><text x="6.6964%" y="591.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="6.4464%" y="565" width="0.1612%" height="15" fill="rgb(236,23,11)" fg:x="80" fg:w="2"/><text x="6.6964%" y="575.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="6.6076%" y="597" width="0.0806%" height="15" fill="rgb(205,117,38)" fg:x="82" fg:w="1"/><text x="6.8576%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6076%" y="581" width="0.0806%" height="15" fill="rgb(237,72,25)" fg:x="82" fg:w="1"/><text x="6.8576%" y="591.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="6.3658%" y="629" width="0.4029%" height="15" fill="rgb(244,70,9)" fg:x="79" fg:w="5"/><text x="6.6158%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="6.3658%" y="613" width="0.4029%" height="15" fill="rgb(217,125,39)" fg:x="79" fg:w="5"/><text x="6.6158%" y="623.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="6.6882%" y="597" width="0.0806%" height="15" fill="rgb(235,36,10)" fg:x="83" fg:w="1"/><text x="6.9382%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6882%" y="581" width="0.0806%" height="15" fill="rgb(251,123,47)" fg:x="83" fg:w="1"/><text x="6.9382%" y="591.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="6.7687%" y="629" width="0.0806%" height="15" fill="rgb(221,13,13)" fg:x="84" fg:w="1"/><text x="7.0187%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="6.7687%" y="613" width="0.0806%" height="15" fill="rgb(238,131,9)" fg:x="84" fg:w="1"/><text x="7.0187%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="6.7687%" y="597" width="0.0806%" height="15" fill="rgb(211,50,8)" fg:x="84" fg:w="1"/><text x="7.0187%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.7687%" y="581" width="0.0806%" height="15" fill="rgb(245,182,24)" fg:x="84" fg:w="1"/><text x="7.0187%" y="591.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="6.8493%" y="629" width="0.0806%" height="15" fill="rgb(242,14,37)" fg:x="85" fg:w="1"/><text x="7.0993%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="6.8493%" y="613" width="0.0806%" height="15" fill="rgb(246,228,12)" fg:x="85" fg:w="1"/><text x="7.0993%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="6.8493%" y="597" width="0.0806%" height="15" fill="rgb(213,55,15)" fg:x="85" fg:w="1"/><text x="7.0993%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="6.8493%" y="581" width="0.0806%" height="15" fill="rgb(209,9,3)" fg:x="85" fg:w="1"/><text x="7.0993%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.8493%" y="565" width="0.0806%" height="15" fill="rgb(230,59,30)" fg:x="85" fg:w="1"/><text x="7.0993%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.8493%" y="549" width="0.0806%" height="15" fill="rgb(209,121,21)" fg:x="85" fg:w="1"/><text x="7.0993%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8493%" y="533" width="0.0806%" height="15" fill="rgb(220,109,13)" fg:x="85" fg:w="1"/><text x="7.0993%" y="543.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (2 samples, 0.16%)</title><rect x="6.9299%" y="597" width="0.1612%" height="15" fill="rgb(232,18,1)" fg:x="86" fg:w="2"/><text x="7.1799%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="7.0105%" y="581" width="0.0806%" height="15" fill="rgb(215,41,42)" fg:x="87" fg:w="1"/><text x="7.2605%" y="591.50"></text></g><g><title>kernel::plugins::ActionSchema::new (1 samples, 0.08%)</title><rect x="7.0911%" y="597" width="0.0806%" height="15" fill="rgb(224,123,36)" fg:x="88" fg:w="1"/><text x="7.3411%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.0911%" y="581" width="0.0806%" height="15" fill="rgb(240,125,3)" fg:x="88" fg:w="1"/><text x="7.3411%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (20 samples, 1.61%)</title><rect x="5.7212%" y="661" width="1.6116%" height="15" fill="rgb(205,98,50)" fg:x="71" fg:w="20"/><text x="5.9712%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 1.61%)</title><rect x="5.7212%" y="645" width="1.6116%" height="15" fill="rgb(205,185,37)" fg:x="71" fg:w="20"/><text x="5.9712%" y="655.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (5 samples, 0.40%)</title><rect x="6.9299%" y="629" width="0.4029%" height="15" fill="rgb(238,207,15)" fg:x="86" fg:w="5"/><text x="7.1799%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (5 samples, 0.40%)</title><rect x="6.9299%" y="613" width="0.4029%" height="15" fill="rgb(213,199,42)" fg:x="86" fg:w="5"/><text x="7.1799%" y="623.50"></text></g><g><title>replies::identifier_to_key (2 samples, 0.16%)</title><rect x="7.1716%" y="597" width="0.1612%" height="15" fill="rgb(235,201,11)" fg:x="89" fg:w="2"/><text x="7.4216%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3328%" y="645" width="0.0806%" height="15" fill="rgb(207,46,11)" fg:x="91" fg:w="1"/><text x="7.5828%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (53 samples, 4.27%)</title><rect x="3.3038%" y="677" width="4.2707%" height="15" fill="rgb(241,35,35)" fg:x="41" fg:w="53"/><text x="3.5538%" y="687.50">kerne..</text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="7.3328%" y="661" width="0.2417%" height="15" fill="rgb(243,32,47)" fg:x="91" fg:w="3"/><text x="7.5828%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (2 samples, 0.16%)</title><rect x="7.4134%" y="645" width="0.1612%" height="15" fill="rgb(247,202,23)" fg:x="92" fg:w="2"/><text x="7.6634%" y="655.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.4134%" y="629" width="0.1612%" height="15" fill="rgb(219,102,11)" fg:x="92" fg:w="2"/><text x="7.6634%" y="639.50"></text></g><g><title>engine::session::Session::initialize (59 samples, 4.75%)</title><rect x="3.1426%" y="693" width="4.7542%" height="15" fill="rgb(243,110,44)" fg:x="39" fg:w="59"/><text x="3.3926%" y="703.50">engine..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (4 samples, 0.32%)</title><rect x="7.5745%" y="677" width="0.3223%" height="15" fill="rgb(222,74,54)" fg:x="94" fg:w="4"/><text x="7.8245%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="7.5745%" y="661" width="0.3223%" height="15" fill="rgb(216,99,12)" fg:x="94" fg:w="4"/><text x="7.8245%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="7.5745%" y="645" width="0.3223%" height="15" fill="rgb(226,22,26)" fg:x="94" fg:w="4"/><text x="7.8245%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="7.5745%" y="629" width="0.3223%" height="15" fill="rgb(217,163,10)" fg:x="94" fg:w="4"/><text x="7.8245%" y="639.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="7.5745%" y="613" width="0.3223%" height="15" fill="rgb(213,25,53)" fg:x="94" fg:w="4"/><text x="7.8245%" y="623.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (5 samples, 0.40%)</title><rect x="7.8969%" y="693" width="0.4029%" height="15" fill="rgb(252,105,26)" fg:x="98" fg:w="5"/><text x="8.1469%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="7.8969%" y="677" width="0.4029%" height="15" fill="rgb(220,39,43)" fg:x="98" fg:w="5"/><text x="8.1469%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="8.1386%" y="661" width="0.1612%" height="15" fill="rgb(229,68,48)" fg:x="101" fg:w="2"/><text x="8.3886%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="8.1386%" y="645" width="0.1612%" height="15" fill="rgb(252,8,32)" fg:x="101" fg:w="2"/><text x="8.3886%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.2192%" y="629" width="0.0806%" height="15" fill="rgb(223,20,43)" fg:x="102" fg:w="1"/><text x="8.4692%" y="639.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (71 samples, 5.72%)</title><rect x="2.6591%" y="741" width="5.7212%" height="15" fill="rgb(229,81,49)" fg:x="33" fg:w="71"/><text x="2.9091%" y="751.50">&lt;engine..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (71 samples, 5.72%)</title><rect x="2.6591%" y="725" width="5.7212%" height="15" fill="rgb(236,28,36)" fg:x="33" fg:w="71"/><text x="2.9091%" y="735.50">engine:..</text></g><g><title>engine::session::Session::new (69 samples, 5.56%)</title><rect x="2.8203%" y="709" width="5.5600%" height="15" fill="rgb(249,185,26)" fg:x="35" fg:w="69"/><text x="3.0703%" y="719.50">engine:..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="8.2998%" y="693" width="0.0806%" height="15" fill="rgb(249,174,33)" fg:x="103" fg:w="1"/><text x="8.5498%" y="703.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="8.2998%" y="677" width="0.0806%" height="15" fill="rgb(233,201,37)" fg:x="103" fg:w="1"/><text x="8.5498%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="8.4609%" y="709" width="0.0806%" height="15" fill="rgb(221,78,26)" fg:x="105" fg:w="1"/><text x="8.7109%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.4609%" y="693" width="0.0806%" height="15" fill="rgb(250,127,30)" fg:x="105" fg:w="1"/><text x="8.7109%" y="703.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="8.5415%" y="709" width="0.0806%" height="15" fill="rgb(230,49,44)" fg:x="106" fg:w="1"/><text x="8.7915%" y="719.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="8.5415%" y="693" width="0.0806%" height="15" fill="rgb(229,67,23)" fg:x="106" fg:w="1"/><text x="8.7915%" y="703.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="8.5415%" y="677" width="0.0806%" height="15" fill="rgb(249,83,47)" fg:x="106" fg:w="1"/><text x="8.7915%" y="687.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="8.5415%" y="661" width="0.0806%" height="15" fill="rgb(215,43,3)" fg:x="106" fg:w="1"/><text x="8.7915%" y="671.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="8.6221%" y="677" width="0.1612%" height="15" fill="rgb(238,154,13)" fg:x="107" fg:w="2"/><text x="8.8721%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="8.6221%" y="661" width="0.1612%" height="15" fill="rgb(219,56,2)" fg:x="107" fg:w="2"/><text x="8.8721%" y="671.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="8.7027%" y="645" width="0.0806%" height="15" fill="rgb(233,0,4)" fg:x="108" fg:w="1"/><text x="8.9527%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.9444%" y="549" width="0.0806%" height="15" fill="rgb(235,30,7)" fg:x="111" fg:w="1"/><text x="9.1944%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="8.8638%" y="581" width="0.2417%" height="15" fill="rgb(250,79,13)" fg:x="110" fg:w="3"/><text x="9.1138%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="8.9444%" y="565" width="0.1612%" height="15" fill="rgb(211,146,34)" fg:x="111" fg:w="2"/><text x="9.1944%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.0250%" y="549" width="0.0806%" height="15" fill="rgb(228,22,38)" fg:x="112" fg:w="1"/><text x="9.2750%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="8.7832%" y="597" width="0.4029%" height="15" fill="rgb(235,168,5)" fg:x="109" fg:w="5"/><text x="9.0332%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.1056%" y="581" width="0.0806%" height="15" fill="rgb(221,155,16)" fg:x="113" fg:w="1"/><text x="9.3556%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="8.7832%" y="629" width="0.4835%" height="15" fill="rgb(215,215,53)" fg:x="109" fg:w="6"/><text x="9.0332%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="8.7832%" y="613" width="0.4835%" height="15" fill="rgb(223,4,10)" fg:x="109" fg:w="6"/><text x="9.0332%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="9.1861%" y="597" width="0.0806%" height="15" fill="rgb(234,103,6)" fg:x="114" fg:w="1"/><text x="9.4361%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.2667%" y="613" width="0.0806%" height="15" fill="rgb(227,97,0)" fg:x="115" fg:w="1"/><text x="9.5167%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.2667%" y="597" width="0.0806%" height="15" fill="rgb(234,150,53)" fg:x="115" fg:w="1"/><text x="9.5167%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.2667%" y="581" width="0.0806%" height="15" fill="rgb(228,201,54)" fg:x="115" fg:w="1"/><text x="9.5167%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.2667%" y="565" width="0.0806%" height="15" fill="rgb(222,22,37)" fg:x="115" fg:w="1"/><text x="9.5167%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="9.4279%" y="597" width="0.4029%" height="15" fill="rgb(237,53,32)" fg:x="117" fg:w="5"/><text x="9.6779%" y="607.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="9.5085%" y="581" width="0.3223%" height="15" fill="rgb(233,25,53)" fg:x="118" fg:w="4"/><text x="9.7585%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="9.5085%" y="565" width="0.3223%" height="15" fill="rgb(210,40,34)" fg:x="118" fg:w="4"/><text x="9.7585%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="9.5890%" y="549" width="0.2417%" height="15" fill="rgb(241,220,44)" fg:x="119" fg:w="3"/><text x="9.8390%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="9.7502%" y="533" width="0.0806%" height="15" fill="rgb(235,28,35)" fg:x="121" fg:w="1"/><text x="10.0002%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="9.7502%" y="517" width="0.0806%" height="15" fill="rgb(210,56,17)" fg:x="121" fg:w="1"/><text x="10.0002%" y="527.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="9.7502%" y="501" width="0.0806%" height="15" fill="rgb(224,130,29)" fg:x="121" fg:w="1"/><text x="10.0002%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="9.8308%" y="549" width="0.0806%" height="15" fill="rgb(235,212,8)" fg:x="122" fg:w="1"/><text x="10.0808%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="9.9114%" y="549" width="0.1612%" height="15" fill="rgb(223,33,50)" fg:x="123" fg:w="2"/><text x="10.1614%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9919%" y="533" width="0.0806%" height="15" fill="rgb(219,149,13)" fg:x="124" fg:w="1"/><text x="10.2419%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9919%" y="517" width="0.0806%" height="15" fill="rgb(250,156,29)" fg:x="124" fg:w="1"/><text x="10.2419%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="9.8308%" y="581" width="0.3223%" height="15" fill="rgb(216,193,19)" fg:x="122" fg:w="4"/><text x="10.0808%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="9.8308%" y="565" width="0.3223%" height="15" fill="rgb(216,135,14)" fg:x="122" fg:w="4"/><text x="10.0808%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0725%" y="549" width="0.0806%" height="15" fill="rgb(241,47,5)" fg:x="125" fg:w="1"/><text x="10.3225%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.0725%" y="533" width="0.0806%" height="15" fill="rgb(233,42,35)" fg:x="125" fg:w="1"/><text x="10.3225%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="10.1531%" y="581" width="0.4029%" height="15" fill="rgb(231,13,6)" fg:x="126" fg:w="5"/><text x="10.4031%" y="591.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="10.3143%" y="565" width="0.2417%" height="15" fill="rgb(207,181,40)" fg:x="128" fg:w="3"/><text x="10.5643%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.3948%" y="549" width="0.1612%" height="15" fill="rgb(254,173,49)" fg:x="129" fg:w="2"/><text x="10.6448%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="10.3948%" y="533" width="0.1612%" height="15" fill="rgb(221,1,38)" fg:x="129" fg:w="2"/><text x="10.6448%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="10.6366%" y="549" width="0.0806%" height="15" fill="rgb(206,124,46)" fg:x="132" fg:w="1"/><text x="10.8866%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="10.6366%" y="565" width="0.3223%" height="15" fill="rgb(249,21,11)" fg:x="132" fg:w="4"/><text x="10.8866%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="10.7172%" y="549" width="0.2417%" height="15" fill="rgb(222,201,40)" fg:x="133" fg:w="3"/><text x="10.9672%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.73%)</title><rect x="10.5560%" y="581" width="0.7252%" height="15" fill="rgb(235,61,29)" fg:x="131" fg:w="9"/><text x="10.8060%" y="591.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="10.9589%" y="565" width="0.3223%" height="15" fill="rgb(219,207,3)" fg:x="136" fg:w="4"/><text x="11.2089%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.1201%" y="549" width="0.1612%" height="15" fill="rgb(222,56,46)" fg:x="138" fg:w="2"/><text x="11.3701%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.61%)</title><rect x="9.8308%" y="597" width="1.6116%" height="15" fill="rgb(239,76,54)" fg:x="122" fg:w="20"/><text x="10.0808%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.2812%" y="581" width="0.1612%" height="15" fill="rgb(231,124,27)" fg:x="140" fg:w="2"/><text x="11.5312%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="11.3618%" y="565" width="0.0806%" height="15" fill="rgb(249,195,6)" fg:x="141" fg:w="1"/><text x="11.6118%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="11.3618%" y="549" width="0.0806%" height="15" fill="rgb(237,174,47)" fg:x="141" fg:w="1"/><text x="11.6118%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (29 samples, 2.34%)</title><rect x="9.2667%" y="629" width="2.3368%" height="15" fill="rgb(206,201,31)" fg:x="115" fg:w="29"/><text x="9.5167%" y="639.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (28 samples, 2.26%)</title><rect x="9.3473%" y="613" width="2.2562%" height="15" fill="rgb(231,57,52)" fg:x="116" fg:w="28"/><text x="9.5973%" y="623.50">s..</text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="11.4424%" y="597" width="0.1612%" height="15" fill="rgb(248,177,22)" fg:x="142" fg:w="2"/><text x="11.6924%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="11.4424%" y="581" width="0.1612%" height="15" fill="rgb(215,211,37)" fg:x="142" fg:w="2"/><text x="11.6924%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="11.4424%" y="565" width="0.1612%" height="15" fill="rgb(241,128,51)" fg:x="142" fg:w="2"/><text x="11.6924%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="11.6035%" y="597" width="0.0806%" height="15" fill="rgb(227,165,31)" fg:x="144" fg:w="1"/><text x="11.8535%" y="607.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="11.6035%" y="613" width="0.1612%" height="15" fill="rgb(228,167,24)" fg:x="144" fg:w="2"/><text x="11.8535%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="11.6841%" y="597" width="0.0806%" height="15" fill="rgb(228,143,12)" fg:x="145" fg:w="1"/><text x="11.9341%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.9259%" y="581" width="0.1612%" height="15" fill="rgb(249,149,8)" fg:x="148" fg:w="2"/><text x="12.1759%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="12.0870%" y="581" width="0.0806%" height="15" fill="rgb(243,35,44)" fg:x="150" fg:w="1"/><text x="12.3370%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="12.3288%" y="517" width="0.4029%" height="15" fill="rgb(246,89,9)" fg:x="153" fg:w="5"/><text x="12.5788%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="12.4093%" y="501" width="0.3223%" height="15" fill="rgb(233,213,13)" fg:x="154" fg:w="4"/><text x="12.6593%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="12.4899%" y="485" width="0.2417%" height="15" fill="rgb(233,141,41)" fg:x="155" fg:w="3"/><text x="12.7399%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="12.4899%" y="469" width="0.2417%" height="15" fill="rgb(239,167,4)" fg:x="155" fg:w="3"/><text x="12.7399%" y="479.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="12.4899%" y="453" width="0.2417%" height="15" fill="rgb(209,217,16)" fg:x="155" fg:w="3"/><text x="12.7399%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (8 samples, 0.64%)</title><rect x="12.1676%" y="565" width="0.6446%" height="15" fill="rgb(219,88,35)" fg:x="151" fg:w="8"/><text x="12.4176%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.64%)</title><rect x="12.1676%" y="549" width="0.6446%" height="15" fill="rgb(220,193,23)" fg:x="151" fg:w="8"/><text x="12.4176%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (8 samples, 0.64%)</title><rect x="12.1676%" y="533" width="0.6446%" height="15" fill="rgb(230,90,52)" fg:x="151" fg:w="8"/><text x="12.4176%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.7317%" y="517" width="0.0806%" height="15" fill="rgb(252,106,19)" fg:x="158" fg:w="1"/><text x="12.9817%" y="527.50"></text></g><g><title>engine::session::Session::flush (56 samples, 4.51%)</title><rect x="8.3803%" y="725" width="4.5125%" height="15" fill="rgb(206,74,20)" fg:x="104" fg:w="56"/><text x="8.6303%" y="735.50">engin..</text></g><g><title>engine::session::state::State::close (53 samples, 4.27%)</title><rect x="8.6221%" y="709" width="4.2707%" height="15" fill="rgb(230,138,44)" fg:x="107" fg:w="53"/><text x="8.8721%" y="719.50">engin..</text></g><g><title>engine::session::state::State::flush_entities (53 samples, 4.27%)</title><rect x="8.6221%" y="693" width="4.2707%" height="15" fill="rgb(235,182,43)" fg:x="107" fg:w="53"/><text x="8.8721%" y="703.50">engin..</text></g><g><title>core::iter::adapters::try_process (51 samples, 4.11%)</title><rect x="8.7832%" y="677" width="4.1096%" height="15" fill="rgb(242,16,51)" fg:x="109" fg:w="51"/><text x="9.0332%" y="687.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 4.11%)</title><rect x="8.7832%" y="661" width="4.1096%" height="15" fill="rgb(248,9,4)" fg:x="109" fg:w="51"/><text x="9.0332%" y="671.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (51 samples, 4.11%)</title><rect x="8.7832%" y="645" width="4.1096%" height="15" fill="rgb(210,31,22)" fg:x="109" fg:w="51"/><text x="9.0332%" y="655.50">engi..</text></g><g><title>kernel::model::any_entity_changes (16 samples, 1.29%)</title><rect x="11.6035%" y="629" width="1.2893%" height="15" fill="rgb(239,54,39)" fg:x="144" fg:w="16"/><text x="11.8535%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (14 samples, 1.13%)</title><rect x="11.7647%" y="613" width="1.1281%" height="15" fill="rgb(230,99,41)" fg:x="146" fg:w="14"/><text x="12.0147%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.05%)</title><rect x="11.8453%" y="597" width="1.0475%" height="15" fill="rgb(253,106,12)" fg:x="147" fg:w="13"/><text x="12.0953%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (9 samples, 0.73%)</title><rect x="12.1676%" y="581" width="0.7252%" height="15" fill="rgb(213,46,41)" fg:x="151" fg:w="9"/><text x="12.4176%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.8122%" y="565" width="0.0806%" height="15" fill="rgb(215,133,35)" fg:x="159" fg:w="1"/><text x="13.0622%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.8122%" y="549" width="0.0806%" height="15" fill="rgb(213,28,5)" fg:x="159" fg:w="1"/><text x="13.0622%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="12.8928%" y="709" width="0.0806%" height="15" fill="rgb(215,77,49)" fg:x="160" fg:w="1"/><text x="13.1428%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.8928%" y="693" width="0.0806%" height="15" fill="rgb(248,100,22)" fg:x="160" fg:w="1"/><text x="13.1428%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="12.8928%" y="677" width="0.0806%" height="15" fill="rgb(208,67,9)" fg:x="160" fg:w="1"/><text x="13.1428%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8928%" y="661" width="0.0806%" height="15" fill="rgb(219,133,21)" fg:x="160" fg:w="1"/><text x="13.1428%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="12.9734%" y="693" width="0.0806%" height="15" fill="rgb(246,46,29)" fg:x="161" fg:w="1"/><text x="13.2234%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9734%" y="677" width="0.0806%" height="15" fill="rgb(246,185,52)" fg:x="161" fg:w="1"/><text x="13.2234%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9734%" y="661" width="0.0806%" height="15" fill="rgb(252,136,11)" fg:x="161" fg:w="1"/><text x="13.2234%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="12.9734%" y="645" width="0.0806%" height="15" fill="rgb(219,138,53)" fg:x="161" fg:w="1"/><text x="13.2234%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9734%" y="629" width="0.0806%" height="15" fill="rgb(211,51,23)" fg:x="161" fg:w="1"/><text x="13.2234%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="12.9734%" y="613" width="0.0806%" height="15" fill="rgb(247,221,28)" fg:x="161" fg:w="1"/><text x="13.2234%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="12.9734%" y="597" width="0.0806%" height="15" fill="rgb(251,222,45)" fg:x="161" fg:w="1"/><text x="13.2234%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="13.0540%" y="645" width="0.0806%" height="15" fill="rgb(217,162,53)" fg:x="162" fg:w="1"/><text x="13.3040%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.0540%" y="629" width="0.0806%" height="15" fill="rgb(229,93,14)" fg:x="162" fg:w="1"/><text x="13.3040%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0540%" y="613" width="0.0806%" height="15" fill="rgb(209,67,49)" fg:x="162" fg:w="1"/><text x="13.3040%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.0540%" y="597" width="0.0806%" height="15" fill="rgb(213,87,29)" fg:x="162" fg:w="1"/><text x="13.3040%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.0540%" y="581" width="0.0806%" height="15" fill="rgb(205,151,52)" fg:x="162" fg:w="1"/><text x="13.3040%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.0540%" y="565" width="0.0806%" height="15" fill="rgb(253,215,39)" fg:x="162" fg:w="1"/><text x="13.3040%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="13.1346%" y="629" width="0.0806%" height="15" fill="rgb(221,220,41)" fg:x="163" fg:w="1"/><text x="13.3846%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="13.1346%" y="613" width="0.0806%" height="15" fill="rgb(218,133,21)" fg:x="163" fg:w="1"/><text x="13.3846%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.1346%" y="597" width="0.0806%" height="15" fill="rgb(221,193,43)" fg:x="163" fg:w="1"/><text x="13.3846%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (2 samples, 0.16%)</title><rect x="13.1346%" y="645" width="0.1612%" height="15" fill="rgb(240,128,52)" fg:x="163" fg:w="2"/><text x="13.3846%" y="655.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="13.2151%" y="629" width="0.0806%" height="15" fill="rgb(253,114,12)" fg:x="164" fg:w="1"/><text x="13.4651%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="13.0540%" y="677" width="0.3223%" height="15" fill="rgb(215,223,47)" fg:x="162" fg:w="4"/><text x="13.3040%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (4 samples, 0.32%)</title><rect x="13.0540%" y="661" width="0.3223%" height="15" fill="rgb(248,225,23)" fg:x="162" fg:w="4"/><text x="13.3040%" y="671.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="13.2957%" y="645" width="0.0806%" height="15" fill="rgb(250,108,0)" fg:x="165" fg:w="1"/><text x="13.5457%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.2957%" y="629" width="0.0806%" height="15" fill="rgb(228,208,7)" fg:x="165" fg:w="1"/><text x="13.5457%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="13.2957%" y="613" width="0.0806%" height="15" fill="rgb(244,45,10)" fg:x="165" fg:w="1"/><text x="13.5457%" y="623.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="12.8928%" y="725" width="0.6446%" height="15" fill="rgb(207,125,25)" fg:x="160" fg:w="8"/><text x="13.1428%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.56%)</title><rect x="12.9734%" y="709" width="0.5641%" height="15" fill="rgb(210,195,18)" fg:x="161" fg:w="7"/><text x="13.2234%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.48%)</title><rect x="13.0540%" y="693" width="0.4835%" height="15" fill="rgb(249,80,12)" fg:x="162" fg:w="6"/><text x="13.3040%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="13.3763%" y="677" width="0.1612%" height="15" fill="rgb(221,65,9)" fg:x="166" fg:w="2"/><text x="13.6263%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="13.3763%" y="661" width="0.1612%" height="15" fill="rgb(235,49,36)" fg:x="166" fg:w="2"/><text x="13.6263%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4569%" y="645" width="0.0806%" height="15" fill="rgb(225,32,20)" fg:x="167" fg:w="1"/><text x="13.7069%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="13.4569%" y="629" width="0.0806%" height="15" fill="rgb(215,141,46)" fg:x="167" fg:w="1"/><text x="13.7069%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="13.5375%" y="725" width="0.1612%" height="15" fill="rgb(250,160,47)" fg:x="168" fg:w="2"/><text x="13.7875%" y="735.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="13.5375%" y="709" width="0.1612%" height="15" fill="rgb(216,222,40)" fg:x="168" fg:w="2"/><text x="13.7875%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="13.6180%" y="693" width="0.0806%" height="15" fill="rgb(234,217,39)" fg:x="169" fg:w="1"/><text x="13.8680%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6180%" y="677" width="0.0806%" height="15" fill="rgb(207,178,40)" fg:x="169" fg:w="1"/><text x="13.8680%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.6180%" y="661" width="0.0806%" height="15" fill="rgb(221,136,13)" fg:x="169" fg:w="1"/><text x="13.8680%" y="671.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Kind&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6180%" y="645" width="0.0806%" height="15" fill="rgb(249,199,10)" fg:x="169" fg:w="1"/><text x="13.8680%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.6180%" y="629" width="0.0806%" height="15" fill="rgb(249,222,13)" fg:x="169" fg:w="1"/><text x="13.8680%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="13.6180%" y="613" width="0.0806%" height="15" fill="rgb(244,185,38)" fg:x="169" fg:w="1"/><text x="13.8680%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="13.6180%" y="597" width="0.0806%" height="15" fill="rgb(236,202,9)" fg:x="169" fg:w="1"/><text x="13.8680%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6180%" y="581" width="0.0806%" height="15" fill="rgb(250,229,37)" fg:x="169" fg:w="1"/><text x="13.8680%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.6986%" y="645" width="0.0806%" height="15" fill="rgb(206,174,23)" fg:x="170" fg:w="1"/><text x="13.9486%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6986%" y="629" width="0.0806%" height="15" fill="rgb(211,33,43)" fg:x="170" fg:w="1"/><text x="13.9486%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6986%" y="613" width="0.0806%" height="15" fill="rgb(245,58,50)" fg:x="170" fg:w="1"/><text x="13.9486%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.6986%" y="597" width="0.0806%" height="15" fill="rgb(244,68,36)" fg:x="170" fg:w="1"/><text x="13.9486%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6986%" y="581" width="0.0806%" height="15" fill="rgb(232,229,15)" fg:x="170" fg:w="1"/><text x="13.9486%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.6986%" y="565" width="0.0806%" height="15" fill="rgb(254,30,23)" fg:x="170" fg:w="1"/><text x="13.9486%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.6986%" y="549" width="0.0806%" height="15" fill="rgb(235,160,14)" fg:x="170" fg:w="1"/><text x="13.9486%" y="559.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="13.6986%" y="661" width="0.1612%" height="15" fill="rgb(212,155,44)" fg:x="170" fg:w="2"/><text x="13.9486%" y="671.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="13.7792%" y="645" width="0.0806%" height="15" fill="rgb(226,2,50)" fg:x="171" fg:w="1"/><text x="14.0292%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="13.7792%" y="629" width="0.0806%" height="15" fill="rgb(234,177,6)" fg:x="171" fg:w="1"/><text x="14.0292%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="13.7792%" y="613" width="0.0806%" height="15" fill="rgb(217,24,9)" fg:x="171" fg:w="1"/><text x="14.0292%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (3 samples, 0.24%)</title><rect x="13.6986%" y="693" width="0.2417%" height="15" fill="rgb(220,13,46)" fg:x="170" fg:w="3"/><text x="13.9486%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (3 samples, 0.24%)</title><rect x="13.6986%" y="677" width="0.2417%" height="15" fill="rgb(239,221,27)" fg:x="170" fg:w="3"/><text x="13.9486%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.8598%" y="661" width="0.0806%" height="15" fill="rgb(222,198,25)" fg:x="172" fg:w="1"/><text x="14.1098%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="13.8598%" y="645" width="0.0806%" height="15" fill="rgb(211,99,13)" fg:x="172" fg:w="1"/><text x="14.1098%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8598%" y="629" width="0.0806%" height="15" fill="rgb(232,111,31)" fg:x="172" fg:w="1"/><text x="14.1098%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8598%" y="613" width="0.0806%" height="15" fill="rgb(245,82,37)" fg:x="172" fg:w="1"/><text x="14.1098%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.8598%" y="597" width="0.0806%" height="15" fill="rgb(227,149,46)" fg:x="172" fg:w="1"/><text x="14.1098%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="13.8598%" y="581" width="0.0806%" height="15" fill="rgb(218,36,50)" fg:x="172" fg:w="1"/><text x="14.1098%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="13.8598%" y="565" width="0.0806%" height="15" fill="rgb(226,80,48)" fg:x="172" fg:w="1"/><text x="14.1098%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="13.9404%" y="677" width="0.0806%" height="15" fill="rgb(238,224,15)" fg:x="173" fg:w="1"/><text x="14.1904%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.9404%" y="661" width="0.0806%" height="15" fill="rgb(241,136,10)" fg:x="173" fg:w="1"/><text x="14.1904%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.9404%" y="645" width="0.0806%" height="15" fill="rgb(208,32,45)" fg:x="173" fg:w="1"/><text x="14.1904%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.9404%" y="629" width="0.0806%" height="15" fill="rgb(207,135,9)" fg:x="173" fg:w="1"/><text x="14.1904%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="14.0210%" y="677" width="0.0806%" height="15" fill="rgb(206,86,44)" fg:x="174" fg:w="1"/><text x="14.2710%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="14.1015%" y="629" width="0.0806%" height="15" fill="rgb(245,177,15)" fg:x="175" fg:w="1"/><text x="14.3515%" y="639.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (7 samples, 0.56%)</title><rect x="13.6986%" y="725" width="0.5641%" height="15" fill="rgb(206,64,50)" fg:x="170" fg:w="7"/><text x="13.9486%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.56%)</title><rect x="13.6986%" y="709" width="0.5641%" height="15" fill="rgb(234,36,40)" fg:x="170" fg:w="7"/><text x="13.9486%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (4 samples, 0.32%)</title><rect x="13.9404%" y="693" width="0.3223%" height="15" fill="rgb(213,64,8)" fg:x="173" fg:w="4"/><text x="14.1904%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="14.1015%" y="677" width="0.1612%" height="15" fill="rgb(210,75,36)" fg:x="175" fg:w="2"/><text x="14.3515%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="14.1015%" y="661" width="0.1612%" height="15" fill="rgb(229,88,21)" fg:x="175" fg:w="2"/><text x="14.3515%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="14.1015%" y="645" width="0.1612%" height="15" fill="rgb(252,204,47)" fg:x="175" fg:w="2"/><text x="14.3515%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="14.1821%" y="629" width="0.0806%" height="15" fill="rgb(208,77,27)" fg:x="176" fg:w="1"/><text x="14.4321%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1821%" y="613" width="0.0806%" height="15" fill="rgb(221,76,26)" fg:x="176" fg:w="1"/><text x="14.4321%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.1821%" y="597" width="0.0806%" height="15" fill="rgb(225,139,18)" fg:x="176" fg:w="1"/><text x="14.4321%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.1821%" y="581" width="0.0806%" height="15" fill="rgb(230,137,11)" fg:x="176" fg:w="1"/><text x="14.4321%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.1821%" y="565" width="0.0806%" height="15" fill="rgb(212,28,1)" fg:x="176" fg:w="1"/><text x="14.4321%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.1821%" y="549" width="0.0806%" height="15" fill="rgb(248,164,17)" fg:x="176" fg:w="1"/><text x="14.4321%" y="559.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="14.1821%" y="533" width="0.0806%" height="15" fill="rgb(222,171,42)" fg:x="176" fg:w="1"/><text x="14.4321%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="14.1821%" y="517" width="0.0806%" height="15" fill="rgb(243,84,45)" fg:x="176" fg:w="1"/><text x="14.4321%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.3433%" y="709" width="0.0806%" height="15" fill="rgb(252,49,23)" fg:x="178" fg:w="1"/><text x="14.5933%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.3433%" y="693" width="0.0806%" height="15" fill="rgb(215,19,7)" fg:x="178" fg:w="1"/><text x="14.5933%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.3433%" y="677" width="0.0806%" height="15" fill="rgb(238,81,41)" fg:x="178" fg:w="1"/><text x="14.5933%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.3433%" y="661" width="0.0806%" height="15" fill="rgb(210,199,37)" fg:x="178" fg:w="1"/><text x="14.5933%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::Entity&gt; (1 samples, 0.08%)</title><rect x="14.4239%" y="709" width="0.0806%" height="15" fill="rgb(244,192,49)" fg:x="179" fg:w="1"/><text x="14.6739%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.4239%" y="693" width="0.0806%" height="15" fill="rgb(226,211,11)" fg:x="179" fg:w="1"/><text x="14.6739%" y="703.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="14.5044%" y="693" width="0.0806%" height="15" fill="rgb(236,162,54)" fg:x="180" fg:w="1"/><text x="14.7544%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="14.5850%" y="645" width="0.1612%" height="15" fill="rgb(220,229,9)" fg:x="181" fg:w="2"/><text x="14.8350%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::flatten::Flatten&lt;alloc::vec::into_iter::IntoIter&lt;core::option::Option&lt;engine::session::state::ModifiedEntity&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="14.6656%" y="629" width="0.0806%" height="15" fill="rgb(250,87,22)" fg:x="182" fg:w="1"/><text x="14.9156%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6656%" y="613" width="0.0806%" height="15" fill="rgb(239,43,17)" fg:x="182" fg:w="1"/><text x="14.9156%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="14.7462%" y="645" width="0.0806%" height="15" fill="rgb(231,177,25)" fg:x="183" fg:w="1"/><text x="14.9962%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="14.7462%" y="629" width="0.0806%" height="15" fill="rgb(219,179,1)" fg:x="183" fg:w="1"/><text x="14.9962%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="14.7462%" y="613" width="0.0806%" height="15" fill="rgb(238,219,53)" fg:x="183" fg:w="1"/><text x="14.9962%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7462%" y="597" width="0.0806%" height="15" fill="rgb(232,167,36)" fg:x="183" fg:w="1"/><text x="14.9962%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="14.7462%" y="581" width="0.0806%" height="15" fill="rgb(244,19,51)" fg:x="183" fg:w="1"/><text x="14.9962%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="14.7462%" y="565" width="0.0806%" height="15" fill="rgb(224,6,22)" fg:x="183" fg:w="1"/><text x="14.9962%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="14.7462%" y="549" width="0.0806%" height="15" fill="rgb(224,145,5)" fg:x="183" fg:w="1"/><text x="14.9962%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="14.7462%" y="533" width="0.0806%" height="15" fill="rgb(234,130,49)" fg:x="183" fg:w="1"/><text x="14.9962%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7462%" y="517" width="0.0806%" height="15" fill="rgb(254,6,2)" fg:x="183" fg:w="1"/><text x="14.9962%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="14.7462%" y="501" width="0.0806%" height="15" fill="rgb(208,96,46)" fg:x="183" fg:w="1"/><text x="14.9962%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="14.7462%" y="485" width="0.0806%" height="15" fill="rgb(239,3,39)" fg:x="183" fg:w="1"/><text x="14.9962%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="14.7462%" y="469" width="0.0806%" height="15" fill="rgb(233,210,1)" fg:x="183" fg:w="1"/><text x="14.9962%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="14.7462%" y="453" width="0.0806%" height="15" fill="rgb(244,137,37)" fg:x="183" fg:w="1"/><text x="14.9962%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="14.7462%" y="437" width="0.0806%" height="15" fill="rgb(240,136,2)" fg:x="183" fg:w="1"/><text x="14.9962%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="14.7462%" y="421" width="0.0806%" height="15" fill="rgb(239,18,37)" fg:x="183" fg:w="1"/><text x="14.9962%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="14.9879%" y="549" width="0.2417%" height="15" fill="rgb(218,185,22)" fg:x="186" fg:w="3"/><text x="15.2379%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.1491%" y="533" width="0.0806%" height="15" fill="rgb(225,218,4)" fg:x="188" fg:w="1"/><text x="15.3991%" y="543.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="15.2297%" y="549" width="0.3223%" height="15" fill="rgb(230,182,32)" fg:x="189" fg:w="4"/><text x="15.4797%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.5520%" y="549" width="0.0806%" height="15" fill="rgb(242,56,43)" fg:x="193" fg:w="1"/><text x="15.8020%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.5520%" y="533" width="0.0806%" height="15" fill="rgb(233,99,24)" fg:x="193" fg:w="1"/><text x="15.8020%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.81%)</title><rect x="14.9073%" y="565" width="0.8058%" height="15" fill="rgb(234,209,42)" fg:x="185" fg:w="10"/><text x="15.1573%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="15.6326%" y="549" width="0.0806%" height="15" fill="rgb(227,7,12)" fg:x="194" fg:w="1"/><text x="15.8826%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.6326%" y="533" width="0.0806%" height="15" fill="rgb(245,203,43)" fg:x="194" fg:w="1"/><text x="15.8826%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="15.6326%" y="517" width="0.0806%" height="15" fill="rgb(238,205,33)" fg:x="194" fg:w="1"/><text x="15.8826%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.6326%" y="501" width="0.0806%" height="15" fill="rgb(231,56,7)" fg:x="194" fg:w="1"/><text x="15.8826%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.97%)</title><rect x="14.9073%" y="581" width="0.9670%" height="15" fill="rgb(244,186,29)" fg:x="185" fg:w="12"/><text x="15.1573%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="15.7131%" y="565" width="0.1612%" height="15" fill="rgb(234,111,31)" fg:x="195" fg:w="2"/><text x="15.9631%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.13%)</title><rect x="14.8268%" y="597" width="1.1281%" height="15" fill="rgb(241,149,10)" fg:x="184" fg:w="14"/><text x="15.0768%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.8743%" y="581" width="0.0806%" height="15" fill="rgb(249,206,44)" fg:x="197" fg:w="1"/><text x="16.1243%" y="591.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="15.9549%" y="597" width="0.0806%" height="15" fill="rgb(251,153,30)" fg:x="198" fg:w="1"/><text x="16.2049%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="15.9549%" y="581" width="0.0806%" height="15" fill="rgb(239,152,38)" fg:x="198" fg:w="1"/><text x="16.2049%" y="591.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.9549%" y="565" width="0.0806%" height="15" fill="rgb(249,139,47)" fg:x="198" fg:w="1"/><text x="16.2049%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.9549%" y="549" width="0.0806%" height="15" fill="rgb(244,64,35)" fg:x="198" fg:w="1"/><text x="16.2049%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="15.9549%" y="533" width="0.0806%" height="15" fill="rgb(216,46,15)" fg:x="198" fg:w="1"/><text x="16.2049%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="15.9549%" y="517" width="0.0806%" height="15" fill="rgb(250,74,19)" fg:x="198" fg:w="1"/><text x="16.2049%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="15.9549%" y="501" width="0.0806%" height="15" fill="rgb(249,42,33)" fg:x="198" fg:w="1"/><text x="16.2049%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="15.9549%" y="485" width="0.0806%" height="15" fill="rgb(242,149,17)" fg:x="198" fg:w="1"/><text x="16.2049%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="16.1160%" y="565" width="0.3223%" height="15" fill="rgb(244,29,21)" fg:x="200" fg:w="4"/><text x="16.3660%" y="575.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="16.1160%" y="549" width="0.3223%" height="15" fill="rgb(220,130,37)" fg:x="200" fg:w="4"/><text x="16.3660%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="16.1966%" y="533" width="0.2417%" height="15" fill="rgb(211,67,2)" fg:x="201" fg:w="3"/><text x="16.4466%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="16.1966%" y="517" width="0.2417%" height="15" fill="rgb(235,68,52)" fg:x="201" fg:w="3"/><text x="16.4466%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.3578%" y="501" width="0.0806%" height="15" fill="rgb(246,142,3)" fg:x="203" fg:w="1"/><text x="16.6078%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="16.1160%" y="581" width="0.4029%" height="15" fill="rgb(241,25,7)" fg:x="200" fg:w="5"/><text x="16.3660%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.4384%" y="565" width="0.0806%" height="15" fill="rgb(242,119,39)" fg:x="204" fg:w="1"/><text x="16.6884%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.4384%" y="549" width="0.0806%" height="15" fill="rgb(241,98,45)" fg:x="204" fg:w="1"/><text x="16.6884%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.5189%" y="565" width="0.0806%" height="15" fill="rgb(254,28,30)" fg:x="205" fg:w="1"/><text x="16.7689%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.5995%" y="565" width="0.0806%" height="15" fill="rgb(241,142,54)" fg:x="206" fg:w="1"/><text x="16.8495%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="16.6801%" y="517" width="0.0806%" height="15" fill="rgb(222,85,15)" fg:x="207" fg:w="1"/><text x="16.9301%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.6801%" y="501" width="0.0806%" height="15" fill="rgb(210,85,47)" fg:x="207" fg:w="1"/><text x="16.9301%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.6801%" y="485" width="0.0806%" height="15" fill="rgb(224,206,25)" fg:x="207" fg:w="1"/><text x="16.9301%" y="495.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="16.6801%" y="469" width="0.0806%" height="15" fill="rgb(243,201,19)" fg:x="207" fg:w="1"/><text x="16.9301%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="16.7607%" y="501" width="0.1612%" height="15" fill="rgb(236,59,4)" fg:x="208" fg:w="2"/><text x="17.0107%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="16.8413%" y="485" width="0.0806%" height="15" fill="rgb(254,179,45)" fg:x="209" fg:w="1"/><text x="17.0913%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="16.8413%" y="469" width="0.0806%" height="15" fill="rgb(226,14,10)" fg:x="209" fg:w="1"/><text x="17.0913%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="16.8413%" y="453" width="0.0806%" height="15" fill="rgb(244,27,41)" fg:x="209" fg:w="1"/><text x="17.0913%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="16.9218%" y="485" width="0.1612%" height="15" fill="rgb(235,35,32)" fg:x="210" fg:w="2"/><text x="17.1718%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.0024%" y="469" width="0.0806%" height="15" fill="rgb(218,68,31)" fg:x="211" fg:w="1"/><text x="17.2524%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.0024%" y="453" width="0.0806%" height="15" fill="rgb(207,120,37)" fg:x="211" fg:w="1"/><text x="17.2524%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="16.7607%" y="517" width="0.4029%" height="15" fill="rgb(227,98,0)" fg:x="208" fg:w="5"/><text x="17.0107%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="16.9218%" y="501" width="0.2417%" height="15" fill="rgb(207,7,3)" fg:x="210" fg:w="3"/><text x="17.1718%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.0830%" y="485" width="0.0806%" height="15" fill="rgb(206,98,19)" fg:x="212" fg:w="1"/><text x="17.3330%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="16.6801%" y="533" width="0.5641%" height="15" fill="rgb(217,5,26)" fg:x="207" fg:w="7"/><text x="16.9301%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.1636%" y="517" width="0.0806%" height="15" fill="rgb(235,190,38)" fg:x="213" fg:w="1"/><text x="17.4136%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.1636%" y="501" width="0.0806%" height="15" fill="rgb(247,86,24)" fg:x="213" fg:w="1"/><text x="17.4136%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (8 samples, 0.64%)</title><rect x="16.6801%" y="549" width="0.6446%" height="15" fill="rgb(205,101,16)" fg:x="207" fg:w="8"/><text x="16.9301%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.2442%" y="533" width="0.0806%" height="15" fill="rgb(246,168,33)" fg:x="214" fg:w="1"/><text x="17.4942%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="17.3247%" y="549" width="0.0806%" height="15" fill="rgb(231,114,1)" fg:x="215" fg:w="1"/><text x="17.5747%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="17.3247%" y="533" width="0.0806%" height="15" fill="rgb(207,184,53)" fg:x="215" fg:w="1"/><text x="17.5747%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.3247%" y="517" width="0.0806%" height="15" fill="rgb(224,95,51)" fg:x="215" fg:w="1"/><text x="17.5747%" y="527.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="17.4053%" y="533" width="0.0806%" height="15" fill="rgb(212,188,45)" fg:x="216" fg:w="1"/><text x="17.6553%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="17.4859%" y="533" width="0.4029%" height="15" fill="rgb(223,154,38)" fg:x="217" fg:w="5"/><text x="17.7359%" y="543.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="17.6471%" y="517" width="0.2417%" height="15" fill="rgb(251,22,52)" fg:x="219" fg:w="3"/><text x="17.8971%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="17.6471%" y="501" width="0.2417%" height="15" fill="rgb(229,209,22)" fg:x="219" fg:w="3"/><text x="17.8971%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="17.6471%" y="485" width="0.2417%" height="15" fill="rgb(234,138,34)" fg:x="219" fg:w="3"/><text x="17.8971%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="17.6471%" y="469" width="0.2417%" height="15" fill="rgb(212,95,11)" fg:x="219" fg:w="3"/><text x="17.8971%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="17.6471%" y="453" width="0.2417%" height="15" fill="rgb(240,179,47)" fg:x="219" fg:w="3"/><text x="17.8971%" y="463.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="17.6471%" y="437" width="0.2417%" height="15" fill="rgb(240,163,11)" fg:x="219" fg:w="3"/><text x="17.8971%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="17.8888%" y="517" width="0.1612%" height="15" fill="rgb(236,37,12)" fg:x="222" fg:w="2"/><text x="18.1388%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="17.8888%" y="501" width="0.1612%" height="15" fill="rgb(232,164,16)" fg:x="222" fg:w="2"/><text x="18.1388%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="17.9694%" y="485" width="0.0806%" height="15" fill="rgb(244,205,15)" fg:x="223" fg:w="1"/><text x="18.2194%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="17.9694%" y="469" width="0.0806%" height="15" fill="rgb(223,117,47)" fg:x="223" fg:w="1"/><text x="18.2194%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="17.9694%" y="453" width="0.0806%" height="15" fill="rgb(244,107,35)" fg:x="223" fg:w="1"/><text x="18.2194%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="17.9694%" y="437" width="0.0806%" height="15" fill="rgb(205,140,8)" fg:x="223" fg:w="1"/><text x="18.2194%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="17.9694%" y="421" width="0.0806%" height="15" fill="rgb(228,84,46)" fg:x="223" fg:w="1"/><text x="18.2194%" y="431.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="17.8888%" y="533" width="0.2417%" height="15" fill="rgb(254,188,9)" fg:x="222" fg:w="3"/><text x="18.1388%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.0500%" y="517" width="0.0806%" height="15" fill="rgb(206,112,54)" fg:x="224" fg:w="1"/><text x="18.3000%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.0500%" y="501" width="0.0806%" height="15" fill="rgb(216,84,49)" fg:x="224" fg:w="1"/><text x="18.3000%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (19 samples, 1.53%)</title><rect x="16.6801%" y="565" width="1.5310%" height="15" fill="rgb(214,194,35)" fg:x="207" fg:w="19"/><text x="16.9301%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.81%)</title><rect x="17.4053%" y="549" width="0.8058%" height="15" fill="rgb(249,28,3)" fg:x="216" fg:w="10"/><text x="17.6553%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="18.1305%" y="533" width="0.0806%" height="15" fill="rgb(222,56,52)" fg:x="225" fg:w="1"/><text x="18.3805%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="18.1305%" y="517" width="0.0806%" height="15" fill="rgb(245,217,50)" fg:x="225" fg:w="1"/><text x="18.3805%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (31 samples, 2.50%)</title><rect x="16.0355%" y="597" width="2.4980%" height="15" fill="rgb(213,201,24)" fg:x="199" fg:w="31"/><text x="16.2855%" y="607.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (25 samples, 2.01%)</title><rect x="16.5189%" y="581" width="2.0145%" height="15" fill="rgb(248,116,28)" fg:x="205" fg:w="25"/><text x="16.7689%" y="591.50">s..</text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="18.2111%" y="565" width="0.3223%" height="15" fill="rgb(219,72,43)" fg:x="226" fg:w="4"/><text x="18.4611%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="18.2111%" y="549" width="0.3223%" height="15" fill="rgb(209,138,14)" fg:x="226" fg:w="4"/><text x="18.4611%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="18.2917%" y="533" width="0.2417%" height="15" fill="rgb(222,18,33)" fg:x="227" fg:w="3"/><text x="18.5417%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="18.4529%" y="517" width="0.0806%" height="15" fill="rgb(213,199,7)" fg:x="229" fg:w="1"/><text x="18.7029%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="18.4529%" y="501" width="0.0806%" height="15" fill="rgb(250,110,10)" fg:x="229" fg:w="1"/><text x="18.7029%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="18.4529%" y="485" width="0.0806%" height="15" fill="rgb(248,123,6)" fg:x="229" fg:w="1"/><text x="18.7029%" y="495.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="18.5334%" y="581" width="0.0806%" height="15" fill="rgb(206,91,31)" fg:x="230" fg:w="1"/><text x="18.7834%" y="591.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="18.5334%" y="565" width="0.0806%" height="15" fill="rgb(211,154,13)" fg:x="230" fg:w="1"/><text x="18.7834%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="18.5334%" y="549" width="0.0806%" height="15" fill="rgb(225,148,7)" fg:x="230" fg:w="1"/><text x="18.7834%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6140%" y="549" width="0.0806%" height="15" fill="rgb(220,160,43)" fg:x="231" fg:w="1"/><text x="18.8640%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.6140%" y="533" width="0.0806%" height="15" fill="rgb(213,52,39)" fg:x="231" fg:w="1"/><text x="18.8640%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="18.6140%" y="517" width="0.0806%" height="15" fill="rgb(243,137,7)" fg:x="231" fg:w="1"/><text x="18.8640%" y="527.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="18.6946%" y="549" width="0.0806%" height="15" fill="rgb(230,79,13)" fg:x="232" fg:w="1"/><text x="18.9446%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="18.7752%" y="549" width="0.0806%" height="15" fill="rgb(247,105,23)" fg:x="233" fg:w="1"/><text x="19.0252%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="18.7752%" y="533" width="0.0806%" height="15" fill="rgb(223,179,41)" fg:x="233" fg:w="1"/><text x="19.0252%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.7752%" y="517" width="0.0806%" height="15" fill="rgb(218,9,34)" fg:x="233" fg:w="1"/><text x="19.0252%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="18.7752%" y="501" width="0.0806%" height="15" fill="rgb(222,106,8)" fg:x="233" fg:w="1"/><text x="19.0252%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.9363%" y="501" width="0.0806%" height="15" fill="rgb(211,220,0)" fg:x="235" fg:w="1"/><text x="19.1863%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="19.0169%" y="501" width="0.1612%" height="15" fill="rgb(229,52,16)" fg:x="236" fg:w="2"/><text x="19.2669%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="19.0169%" y="485" width="0.1612%" height="15" fill="rgb(212,155,18)" fg:x="236" fg:w="2"/><text x="19.2669%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0975%" y="469" width="0.0806%" height="15" fill="rgb(242,21,14)" fg:x="237" fg:w="1"/><text x="19.3475%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.2587%" y="485" width="0.0806%" height="15" fill="rgb(222,19,48)" fg:x="239" fg:w="1"/><text x="19.5087%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.5004%" y="469" width="0.1612%" height="15" fill="rgb(232,45,27)" fg:x="242" fg:w="2"/><text x="19.7504%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.6616%" y="421" width="0.0806%" height="15" fill="rgb(249,103,42)" fg:x="244" fg:w="1"/><text x="19.9116%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="19.3392%" y="485" width="0.4835%" height="15" fill="rgb(246,81,33)" fg:x="240" fg:w="6"/><text x="19.5892%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="19.6616%" y="469" width="0.1612%" height="15" fill="rgb(252,33,42)" fg:x="244" fg:w="2"/><text x="19.9116%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="19.6616%" y="453" width="0.1612%" height="15" fill="rgb(209,212,41)" fg:x="244" fg:w="2"/><text x="19.9116%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="19.6616%" y="437" width="0.1612%" height="15" fill="rgb(207,154,6)" fg:x="244" fg:w="2"/><text x="19.9116%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.7421%" y="421" width="0.0806%" height="15" fill="rgb(223,64,47)" fg:x="245" fg:w="1"/><text x="19.9921%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (12 samples, 0.97%)</title><rect x="18.9363%" y="517" width="0.9670%" height="15" fill="rgb(211,161,38)" fg:x="235" fg:w="12"/><text x="19.1863%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.73%)</title><rect x="19.1781%" y="501" width="0.7252%" height="15" fill="rgb(219,138,40)" fg:x="238" fg:w="9"/><text x="19.4281%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.8227%" y="485" width="0.0806%" height="15" fill="rgb(241,228,46)" fg:x="246" fg:w="1"/><text x="20.0727%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (13 samples, 1.05%)</title><rect x="18.9363%" y="533" width="1.0475%" height="15" fill="rgb(223,209,38)" fg:x="235" fg:w="13"/><text x="19.1863%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="19.9033%" y="517" width="0.0806%" height="15" fill="rgb(236,164,45)" fg:x="247" fg:w="1"/><text x="20.1533%" y="527.50"></text></g><g><title>engine::session::Session::flush (69 samples, 5.56%)</title><rect x="14.5044%" y="709" width="5.5600%" height="15" fill="rgb(231,15,5)" fg:x="180" fg:w="69"/><text x="14.7544%" y="719.50">engine:..</text></g><g><title>engine::session::Session::save_changes (68 samples, 5.48%)</title><rect x="14.5850%" y="693" width="5.4795%" height="15" fill="rgb(252,35,15)" fg:x="181" fg:w="68"/><text x="14.8350%" y="703.50">engine:..</text></g><g><title>engine::session::state::State::close (68 samples, 5.48%)</title><rect x="14.5850%" y="677" width="5.4795%" height="15" fill="rgb(248,181,18)" fg:x="181" fg:w="68"/><text x="14.8350%" y="687.50">engine:..</text></g><g><title>engine::session::state::State::flush_entities (68 samples, 5.48%)</title><rect x="14.5850%" y="661" width="5.4795%" height="15" fill="rgb(233,39,42)" fg:x="181" fg:w="68"/><text x="14.8350%" y="671.50">engine:..</text></g><g><title>core::iter::adapters::try_process (65 samples, 5.24%)</title><rect x="14.8268%" y="645" width="5.2377%" height="15" fill="rgb(238,110,33)" fg:x="184" fg:w="65"/><text x="15.0768%" y="655.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (65 samples, 5.24%)</title><rect x="14.8268%" y="629" width="5.2377%" height="15" fill="rgb(233,195,10)" fg:x="184" fg:w="65"/><text x="15.0768%" y="639.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (65 samples, 5.24%)</title><rect x="14.8268%" y="613" width="5.2377%" height="15" fill="rgb(254,105,3)" fg:x="184" fg:w="65"/><text x="15.0768%" y="623.50">engine..</text></g><g><title>kernel::model::any_entity_changes (19 samples, 1.53%)</title><rect x="18.5334%" y="597" width="1.5310%" height="15" fill="rgb(221,225,9)" fg:x="230" fg:w="19"/><text x="18.7834%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.45%)</title><rect x="18.6140%" y="581" width="1.4504%" height="15" fill="rgb(224,227,45)" fg:x="231" fg:w="18"/><text x="18.8640%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.45%)</title><rect x="18.6140%" y="565" width="1.4504%" height="15" fill="rgb(229,198,43)" fg:x="231" fg:w="18"/><text x="18.8640%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (15 samples, 1.21%)</title><rect x="18.8558%" y="549" width="1.2087%" height="15" fill="rgb(206,209,35)" fg:x="234" fg:w="15"/><text x="19.1058%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.9839%" y="533" width="0.0806%" height="15" fill="rgb(245,195,53)" fg:x="248" fg:w="1"/><text x="20.2339%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="19.9839%" y="517" width="0.0806%" height="15" fill="rgb(240,92,26)" fg:x="248" fg:w="1"/><text x="20.2339%" y="527.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="20.0645%" y="709" width="0.0806%" height="15" fill="rgb(207,40,23)" fg:x="249" fg:w="1"/><text x="20.3145%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="20.0645%" y="693" width="0.0806%" height="15" fill="rgb(223,111,35)" fg:x="249" fg:w="1"/><text x="20.3145%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0645%" y="677" width="0.0806%" height="15" fill="rgb(229,147,28)" fg:x="249" fg:w="1"/><text x="20.3145%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.0645%" y="661" width="0.0806%" height="15" fill="rgb(211,29,28)" fg:x="249" fg:w="1"/><text x="20.3145%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.0645%" y="645" width="0.0806%" height="15" fill="rgb(228,72,33)" fg:x="249" fg:w="1"/><text x="20.3145%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="20.0645%" y="629" width="0.0806%" height="15" fill="rgb(205,214,31)" fg:x="249" fg:w="1"/><text x="20.3145%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.0645%" y="613" width="0.0806%" height="15" fill="rgb(224,111,15)" fg:x="249" fg:w="1"/><text x="20.3145%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.2256%" y="661" width="0.0806%" height="15" fill="rgb(253,21,26)" fg:x="251" fg:w="1"/><text x="20.4756%" y="671.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.3062%" y="629" width="0.0806%" height="15" fill="rgb(245,139,43)" fg:x="252" fg:w="1"/><text x="20.5562%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.3062%" y="613" width="0.0806%" height="15" fill="rgb(252,170,7)" fg:x="252" fg:w="1"/><text x="20.5562%" y="623.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="20.1450%" y="693" width="0.3223%" height="15" fill="rgb(231,118,14)" fg:x="250" fg:w="4"/><text x="20.3950%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="20.1450%" y="677" width="0.3223%" height="15" fill="rgb(238,83,0)" fg:x="250" fg:w="4"/><text x="20.3950%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="20.3062%" y="661" width="0.1612%" height="15" fill="rgb(221,39,39)" fg:x="252" fg:w="2"/><text x="20.5562%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="20.3062%" y="645" width="0.1612%" height="15" fill="rgb(222,119,46)" fg:x="252" fg:w="2"/><text x="20.5562%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.3868%" y="629" width="0.0806%" height="15" fill="rgb(222,165,49)" fg:x="253" fg:w="1"/><text x="20.6368%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3868%" y="613" width="0.0806%" height="15" fill="rgb(219,113,52)" fg:x="253" fg:w="1"/><text x="20.6368%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.3868%" y="597" width="0.0806%" height="15" fill="rgb(214,7,15)" fg:x="253" fg:w="1"/><text x="20.6368%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.3868%" y="581" width="0.0806%" height="15" fill="rgb(235,32,4)" fg:x="253" fg:w="1"/><text x="20.6368%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.4674%" y="677" width="0.0806%" height="15" fill="rgb(238,90,54)" fg:x="254" fg:w="1"/><text x="20.7174%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="20.4674%" y="661" width="0.0806%" height="15" fill="rgb(213,208,19)" fg:x="254" fg:w="1"/><text x="20.7174%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="20.5479%" y="677" width="0.0806%" height="15" fill="rgb(233,156,4)" fg:x="255" fg:w="1"/><text x="20.7979%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.5479%" y="661" width="0.0806%" height="15" fill="rgb(207,194,5)" fg:x="255" fg:w="1"/><text x="20.7979%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.7091%" y="613" width="0.1612%" height="15" fill="rgb(206,111,30)" fg:x="257" fg:w="2"/><text x="20.9591%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7897%" y="597" width="0.0806%" height="15" fill="rgb(243,70,54)" fg:x="258" fg:w="1"/><text x="21.0397%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.7897%" y="581" width="0.0806%" height="15" fill="rgb(242,28,8)" fg:x="258" fg:w="1"/><text x="21.0397%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7897%" y="565" width="0.0806%" height="15" fill="rgb(219,106,18)" fg:x="258" fg:w="1"/><text x="21.0397%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="20.7897%" y="549" width="0.0806%" height="15" fill="rgb(244,222,10)" fg:x="258" fg:w="1"/><text x="21.0397%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="20.7897%" y="533" width="0.0806%" height="15" fill="rgb(236,179,52)" fg:x="258" fg:w="1"/><text x="21.0397%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="20.7897%" y="517" width="0.0806%" height="15" fill="rgb(213,23,39)" fg:x="258" fg:w="1"/><text x="21.0397%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="20.7897%" y="501" width="0.0806%" height="15" fill="rgb(238,48,10)" fg:x="258" fg:w="1"/><text x="21.0397%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.7897%" y="485" width="0.0806%" height="15" fill="rgb(251,196,23)" fg:x="258" fg:w="1"/><text x="21.0397%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="20.7897%" y="469" width="0.0806%" height="15" fill="rgb(250,152,24)" fg:x="258" fg:w="1"/><text x="21.0397%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="20.7897%" y="453" width="0.0806%" height="15" fill="rgb(209,150,17)" fg:x="258" fg:w="1"/><text x="21.0397%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="20.7897%" y="437" width="0.0806%" height="15" fill="rgb(234,202,34)" fg:x="258" fg:w="1"/><text x="21.0397%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="20.7897%" y="421" width="0.0806%" height="15" fill="rgb(253,148,53)" fg:x="258" fg:w="1"/><text x="21.0397%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="20.7897%" y="405" width="0.0806%" height="15" fill="rgb(218,129,16)" fg:x="258" fg:w="1"/><text x="21.0397%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.7897%" y="389" width="0.0806%" height="15" fill="rgb(216,85,19)" fg:x="258" fg:w="1"/><text x="21.0397%" y="399.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="20.6285%" y="629" width="0.3223%" height="15" fill="rgb(235,228,7)" fg:x="256" fg:w="4"/><text x="20.8785%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.8703%" y="613" width="0.0806%" height="15" fill="rgb(245,175,0)" fg:x="259" fg:w="1"/><text x="21.1203%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8703%" y="597" width="0.0806%" height="15" fill="rgb(208,168,36)" fg:x="259" fg:w="1"/><text x="21.1203%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.8703%" y="581" width="0.0806%" height="15" fill="rgb(246,171,24)" fg:x="259" fg:w="1"/><text x="21.1203%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8703%" y="565" width="0.0806%" height="15" fill="rgb(215,142,24)" fg:x="259" fg:w="1"/><text x="21.1203%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.8703%" y="549" width="0.0806%" height="15" fill="rgb(250,187,7)" fg:x="259" fg:w="1"/><text x="21.1203%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.8703%" y="533" width="0.0806%" height="15" fill="rgb(228,66,33)" fg:x="259" fg:w="1"/><text x="21.1203%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.8703%" y="517" width="0.0806%" height="15" fill="rgb(234,215,21)" fg:x="259" fg:w="1"/><text x="21.1203%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (5 samples, 0.40%)</title><rect x="20.6285%" y="661" width="0.4029%" height="15" fill="rgb(222,191,20)" fg:x="256" fg:w="5"/><text x="20.8785%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (5 samples, 0.40%)</title><rect x="20.6285%" y="645" width="0.4029%" height="15" fill="rgb(245,79,54)" fg:x="256" fg:w="5"/><text x="20.8785%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9508%" y="629" width="0.0806%" height="15" fill="rgb(240,10,37)" fg:x="260" fg:w="1"/><text x="21.2008%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.9508%" y="613" width="0.0806%" height="15" fill="rgb(214,192,32)" fg:x="260" fg:w="1"/><text x="21.2008%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.9508%" y="597" width="0.0806%" height="15" fill="rgb(209,36,54)" fg:x="260" fg:w="1"/><text x="21.2008%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="20.9508%" y="581" width="0.0806%" height="15" fill="rgb(220,10,11)" fg:x="260" fg:w="1"/><text x="21.2008%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.9508%" y="565" width="0.0806%" height="15" fill="rgb(221,106,17)" fg:x="260" fg:w="1"/><text x="21.2008%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.9508%" y="549" width="0.0806%" height="15" fill="rgb(251,142,44)" fg:x="260" fg:w="1"/><text x="21.2008%" y="559.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="21.0314%" y="629" width="0.0806%" height="15" fill="rgb(238,13,15)" fg:x="261" fg:w="1"/><text x="21.2814%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.0314%" y="613" width="0.0806%" height="15" fill="rgb(208,107,27)" fg:x="261" fg:w="1"/><text x="21.2814%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.0314%" y="597" width="0.0806%" height="15" fill="rgb(205,136,37)" fg:x="261" fg:w="1"/><text x="21.2814%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.0314%" y="581" width="0.0806%" height="15" fill="rgb(250,205,27)" fg:x="261" fg:w="1"/><text x="21.2814%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.0314%" y="565" width="0.0806%" height="15" fill="rgb(210,80,43)" fg:x="261" fg:w="1"/><text x="21.2814%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.81%)</title><rect x="20.4674%" y="693" width="0.8058%" height="15" fill="rgb(247,160,36)" fg:x="254" fg:w="10"/><text x="20.7174%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.64%)</title><rect x="20.6285%" y="677" width="0.6446%" height="15" fill="rgb(234,13,49)" fg:x="256" fg:w="8"/><text x="20.8785%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="21.0314%" y="661" width="0.2417%" height="15" fill="rgb(234,122,0)" fg:x="261" fg:w="3"/><text x="21.2814%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="21.0314%" y="645" width="0.2417%" height="15" fill="rgb(207,146,38)" fg:x="261" fg:w="3"/><text x="21.2814%" y="655.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="21.1120%" y="629" width="0.1612%" height="15" fill="rgb(207,177,25)" fg:x="262" fg:w="2"/><text x="21.3620%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.1926%" y="613" width="0.0806%" height="15" fill="rgb(211,178,42)" fg:x="263" fg:w="1"/><text x="21.4426%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1926%" y="597" width="0.0806%" height="15" fill="rgb(230,69,54)" fg:x="263" fg:w="1"/><text x="21.4426%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.1926%" y="581" width="0.0806%" height="15" fill="rgb(214,135,41)" fg:x="263" fg:w="1"/><text x="21.4426%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="21.1926%" y="565" width="0.0806%" height="15" fill="rgb(237,67,25)" fg:x="263" fg:w="1"/><text x="21.4426%" y="575.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.21%)</title><rect x="20.1450%" y="709" width="1.2087%" height="15" fill="rgb(222,189,50)" fg:x="250" fg:w="15"/><text x="20.3950%" y="719.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.2732%" y="693" width="0.0806%" height="15" fill="rgb(245,148,34)" fg:x="264" fg:w="1"/><text x="21.5232%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.2732%" y="677" width="0.0806%" height="15" fill="rgb(222,29,6)" fg:x="264" fg:w="1"/><text x="21.5232%" y="687.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="21.2732%" y="661" width="0.0806%" height="15" fill="rgb(221,189,43)" fg:x="264" fg:w="1"/><text x="21.5232%" y="671.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="21.2732%" y="645" width="0.0806%" height="15" fill="rgb(207,36,27)" fg:x="264" fg:w="1"/><text x="21.5232%" y="655.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="21.3537%" y="677" width="0.0806%" height="15" fill="rgb(217,90,24)" fg:x="265" fg:w="1"/><text x="21.6037%" y="687.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="21.3537%" y="661" width="0.0806%" height="15" fill="rgb(224,66,35)" fg:x="265" fg:w="1"/><text x="21.6037%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="21.4343%" y="645" width="0.1612%" height="15" fill="rgb(221,13,50)" fg:x="266" fg:w="2"/><text x="21.6843%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="21.4343%" y="629" width="0.1612%" height="15" fill="rgb(236,68,49)" fg:x="266" fg:w="2"/><text x="21.6843%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.4343%" y="613" width="0.1612%" height="15" fill="rgb(229,146,28)" fg:x="266" fg:w="2"/><text x="21.6843%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.4343%" y="597" width="0.1612%" height="15" fill="rgb(225,31,38)" fg:x="266" fg:w="2"/><text x="21.6843%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.4343%" y="581" width="0.1612%" height="15" fill="rgb(250,208,3)" fg:x="266" fg:w="2"/><text x="21.6843%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.4343%" y="565" width="0.1612%" height="15" fill="rgb(246,54,23)" fg:x="266" fg:w="2"/><text x="21.6843%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.4343%" y="549" width="0.1612%" height="15" fill="rgb(243,76,11)" fg:x="266" fg:w="2"/><text x="21.6843%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="21.4343%" y="533" width="0.1612%" height="15" fill="rgb(245,21,50)" fg:x="266" fg:w="2"/><text x="21.6843%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="21.4343%" y="517" width="0.1612%" height="15" fill="rgb(228,9,43)" fg:x="266" fg:w="2"/><text x="21.6843%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="21.4343%" y="501" width="0.1612%" height="15" fill="rgb(208,100,47)" fg:x="266" fg:w="2"/><text x="21.6843%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="21.4343%" y="485" width="0.1612%" height="15" fill="rgb(232,26,8)" fg:x="266" fg:w="2"/><text x="21.6843%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="21.4343%" y="469" width="0.1612%" height="15" fill="rgb(216,166,38)" fg:x="266" fg:w="2"/><text x="21.6843%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="21.4343%" y="453" width="0.1612%" height="15" fill="rgb(251,202,51)" fg:x="266" fg:w="2"/><text x="21.6843%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="21.4343%" y="437" width="0.1612%" height="15" fill="rgb(254,216,34)" fg:x="266" fg:w="2"/><text x="21.6843%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="21.4343%" y="421" width="0.1612%" height="15" fill="rgb(251,32,27)" fg:x="266" fg:w="2"/><text x="21.6843%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="21.4343%" y="405" width="0.1612%" height="15" fill="rgb(208,127,28)" fg:x="266" fg:w="2"/><text x="21.6843%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.4343%" y="389" width="0.1612%" height="15" fill="rgb(224,137,22)" fg:x="266" fg:w="2"/><text x="21.6843%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="21.5955%" y="629" width="0.0806%" height="15" fill="rgb(254,70,32)" fg:x="268" fg:w="1"/><text x="21.8455%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="21.5955%" y="613" width="0.0806%" height="15" fill="rgb(229,75,37)" fg:x="268" fg:w="1"/><text x="21.8455%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="21.5955%" y="597" width="0.0806%" height="15" fill="rgb(252,64,23)" fg:x="268" fg:w="1"/><text x="21.8455%" y="607.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (5 samples, 0.40%)</title><rect x="21.3537%" y="709" width="0.4029%" height="15" fill="rgb(232,162,48)" fg:x="265" fg:w="5"/><text x="21.6037%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (5 samples, 0.40%)</title><rect x="21.3537%" y="693" width="0.4029%" height="15" fill="rgb(246,160,12)" fg:x="265" fg:w="5"/><text x="21.6037%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="21.4343%" y="677" width="0.3223%" height="15" fill="rgb(247,166,0)" fg:x="266" fg:w="4"/><text x="21.6843%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="21.4343%" y="661" width="0.3223%" height="15" fill="rgb(249,219,21)" fg:x="266" fg:w="4"/><text x="21.6843%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="21.5955%" y="645" width="0.1612%" height="15" fill="rgb(205,209,3)" fg:x="268" fg:w="2"/><text x="21.8455%" y="655.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="21.6761%" y="629" width="0.0806%" height="15" fill="rgb(243,44,1)" fg:x="269" fg:w="1"/><text x="21.9261%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="21.6761%" y="613" width="0.0806%" height="15" fill="rgb(206,159,16)" fg:x="269" fg:w="1"/><text x="21.9261%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (1 samples, 0.08%)</title><rect x="21.7566%" y="709" width="0.0806%" height="15" fill="rgb(244,77,30)" fg:x="270" fg:w="1"/><text x="22.0066%" y="719.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="21.7566%" y="693" width="0.0806%" height="15" fill="rgb(218,69,12)" fg:x="270" fg:w="1"/><text x="22.0066%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="21.7566%" y="677" width="0.0806%" height="15" fill="rgb(212,87,7)" fg:x="270" fg:w="1"/><text x="22.0066%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::remove_entry (1 samples, 0.08%)</title><rect x="21.7566%" y="661" width="0.0806%" height="15" fill="rgb(245,114,25)" fg:x="270" fg:w="1"/><text x="22.0066%" y="671.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="21.8372%" y="693" width="0.0806%" height="15" fill="rgb(210,61,42)" fg:x="271" fg:w="1"/><text x="22.0872%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="21.8372%" y="677" width="0.0806%" height="15" fill="rgb(211,52,33)" fg:x="271" fg:w="1"/><text x="22.0872%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="21.8372%" y="661" width="0.0806%" height="15" fill="rgb(234,58,33)" fg:x="271" fg:w="1"/><text x="22.0872%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="21.8372%" y="645" width="0.0806%" height="15" fill="rgb(220,115,36)" fg:x="271" fg:w="1"/><text x="22.0872%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="21.9178%" y="677" width="0.0806%" height="15" fill="rgb(243,153,54)" fg:x="272" fg:w="1"/><text x="22.1678%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="21.9178%" y="661" width="0.0806%" height="15" fill="rgb(251,47,18)" fg:x="272" fg:w="1"/><text x="22.1678%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.9984%" y="613" width="0.1612%" height="15" fill="rgb(242,102,42)" fg:x="273" fg:w="2"/><text x="22.2484%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.9984%" y="597" width="0.1612%" height="15" fill="rgb(234,31,38)" fg:x="273" fg:w="2"/><text x="22.2484%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="21.9984%" y="581" width="0.1612%" height="15" fill="rgb(221,117,51)" fg:x="273" fg:w="2"/><text x="22.2484%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.9984%" y="565" width="0.1612%" height="15" fill="rgb(212,20,18)" fg:x="273" fg:w="2"/><text x="22.2484%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.9984%" y="549" width="0.1612%" height="15" fill="rgb(245,133,36)" fg:x="273" fg:w="2"/><text x="22.2484%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="21.9984%" y="533" width="0.1612%" height="15" fill="rgb(212,6,19)" fg:x="273" fg:w="2"/><text x="22.2484%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="21.9984%" y="517" width="0.1612%" height="15" fill="rgb(218,1,36)" fg:x="273" fg:w="2"/><text x="22.2484%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="21.9984%" y="501" width="0.1612%" height="15" fill="rgb(246,84,54)" fg:x="273" fg:w="2"/><text x="22.2484%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="21.9984%" y="485" width="0.1612%" height="15" fill="rgb(242,110,6)" fg:x="273" fg:w="2"/><text x="22.2484%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="21.9984%" y="469" width="0.1612%" height="15" fill="rgb(214,47,5)" fg:x="273" fg:w="2"/><text x="22.2484%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="21.9984%" y="453" width="0.1612%" height="15" fill="rgb(218,159,25)" fg:x="273" fg:w="2"/><text x="22.2484%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="21.9984%" y="437" width="0.1612%" height="15" fill="rgb(215,211,28)" fg:x="273" fg:w="2"/><text x="22.2484%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="21.9984%" y="421" width="0.1612%" height="15" fill="rgb(238,59,32)" fg:x="273" fg:w="2"/><text x="22.2484%" y="431.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="21.9984%" y="405" width="0.1612%" height="15" fill="rgb(226,82,3)" fg:x="273" fg:w="2"/><text x="22.2484%" y="415.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="21.9984%" y="389" width="0.1612%" height="15" fill="rgb(240,164,32)" fg:x="273" fg:w="2"/><text x="22.2484%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="22.1595%" y="613" width="0.0806%" height="15" fill="rgb(232,46,7)" fg:x="275" fg:w="1"/><text x="22.4095%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.1595%" y="597" width="0.0806%" height="15" fill="rgb(229,129,53)" fg:x="275" fg:w="1"/><text x="22.4095%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="21.9984%" y="629" width="0.3223%" height="15" fill="rgb(234,188,29)" fg:x="273" fg:w="4"/><text x="22.2484%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.2401%" y="613" width="0.0806%" height="15" fill="rgb(246,141,4)" fg:x="276" fg:w="1"/><text x="22.4901%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2401%" y="597" width="0.0806%" height="15" fill="rgb(229,23,39)" fg:x="276" fg:w="1"/><text x="22.4901%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="22.2401%" y="581" width="0.0806%" height="15" fill="rgb(206,12,3)" fg:x="276" fg:w="1"/><text x="22.4901%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2401%" y="565" width="0.0806%" height="15" fill="rgb(252,226,20)" fg:x="276" fg:w="1"/><text x="22.4901%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="22.2401%" y="549" width="0.0806%" height="15" fill="rgb(216,123,35)" fg:x="276" fg:w="1"/><text x="22.4901%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="22.2401%" y="533" width="0.0806%" height="15" fill="rgb(212,68,40)" fg:x="276" fg:w="1"/><text x="22.4901%" y="543.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="21.9984%" y="645" width="0.4029%" height="15" fill="rgb(254,125,32)" fg:x="273" fg:w="5"/><text x="22.2484%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="22.3207%" y="629" width="0.0806%" height="15" fill="rgb(253,97,22)" fg:x="277" fg:w="1"/><text x="22.5707%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.3207%" y="613" width="0.0806%" height="15" fill="rgb(241,101,14)" fg:x="277" fg:w="1"/><text x="22.5707%" y="623.50"></text></g><g><title>plugins_core::tools::set_container (8 samples, 0.64%)</title><rect x="21.8372%" y="709" width="0.6446%" height="15" fill="rgb(238,103,29)" fg:x="271" fg:w="8"/><text x="22.0872%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (7 samples, 0.56%)</title><rect x="21.9178%" y="693" width="0.5641%" height="15" fill="rgb(233,195,47)" fg:x="272" fg:w="7"/><text x="22.1678%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (6 samples, 0.48%)</title><rect x="21.9984%" y="677" width="0.4835%" height="15" fill="rgb(246,218,30)" fg:x="273" fg:w="6"/><text x="22.2484%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (6 samples, 0.48%)</title><rect x="21.9984%" y="661" width="0.4835%" height="15" fill="rgb(219,145,47)" fg:x="273" fg:w="6"/><text x="22.2484%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="22.4013%" y="645" width="0.0806%" height="15" fill="rgb(243,12,26)" fg:x="278" fg:w="1"/><text x="22.6513%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.4013%" y="629" width="0.0806%" height="15" fill="rgb(214,87,16)" fg:x="278" fg:w="1"/><text x="22.6513%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (103 samples, 8.30%)</title><rect x="14.2627%" y="725" width="8.2998%" height="15" fill="rgb(208,99,42)" fg:x="177" fg:w="103"/><text x="14.5127%" y="735.50">plugins_core..</text></g><g><title>plugins_core::tools::set_wearing (1 samples, 0.08%)</title><rect x="22.4819%" y="709" width="0.0806%" height="15" fill="rgb(253,99,2)" fg:x="279" fg:w="1"/><text x="22.7319%" y="719.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="22.4819%" y="693" width="0.0806%" height="15" fill="rgb(220,168,23)" fg:x="279" fg:w="1"/><text x="22.7319%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="22.4819%" y="677" width="0.0806%" height="15" fill="rgb(242,38,24)" fg:x="279" fg:w="1"/><text x="22.7319%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.4819%" y="661" width="0.0806%" height="15" fill="rgb(225,182,9)" fg:x="279" fg:w="1"/><text x="22.7319%" y="671.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="22.4819%" y="645" width="0.0806%" height="15" fill="rgb(243,178,37)" fg:x="279" fg:w="1"/><text x="22.7319%" y="655.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="22.6430%" y="677" width="0.0806%" height="15" fill="rgb(232,139,19)" fg:x="281" fg:w="1"/><text x="22.8930%" y="687.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (3 samples, 0.24%)</title><rect x="22.5624%" y="725" width="0.2417%" height="15" fill="rgb(225,201,24)" fg:x="280" fg:w="3"/><text x="22.8124%" y="735.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="22.5624%" y="709" width="0.2417%" height="15" fill="rgb(221,47,46)" fg:x="280" fg:w="3"/><text x="22.8124%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (3 samples, 0.24%)</title><rect x="22.5624%" y="693" width="0.2417%" height="15" fill="rgb(249,23,13)" fg:x="280" fg:w="3"/><text x="22.8124%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="22.7236%" y="677" width="0.0806%" height="15" fill="rgb(219,9,5)" fg:x="282" fg:w="1"/><text x="22.9736%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="22.8042%" y="661" width="0.0806%" height="15" fill="rgb(254,171,16)" fg:x="283" fg:w="1"/><text x="23.0542%" y="671.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="22.8042%" y="645" width="0.0806%" height="15" fill="rgb(230,171,20)" fg:x="283" fg:w="1"/><text x="23.0542%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="22.8042%" y="629" width="0.0806%" height="15" fill="rgb(210,71,41)" fg:x="283" fg:w="1"/><text x="23.0542%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="22.8848%" y="661" width="0.0806%" height="15" fill="rgb(206,173,20)" fg:x="284" fg:w="1"/><text x="23.1348%" y="671.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (1 samples, 0.08%)</title><rect x="22.8848%" y="645" width="0.0806%" height="15" fill="rgb(233,88,34)" fg:x="284" fg:w="1"/><text x="23.1348%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="22.8848%" y="629" width="0.0806%" height="15" fill="rgb(223,209,46)" fg:x="284" fg:w="1"/><text x="23.1348%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="22.8848%" y="613" width="0.0806%" height="15" fill="rgb(250,43,18)" fg:x="284" fg:w="1"/><text x="23.1348%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="22.9654%" y="613" width="0.0806%" height="15" fill="rgb(208,13,10)" fg:x="285" fg:w="1"/><text x="23.2154%" y="623.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="22.9654%" y="645" width="0.1612%" height="15" fill="rgb(212,200,36)" fg:x="285" fg:w="2"/><text x="23.2154%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="22.9654%" y="629" width="0.1612%" height="15" fill="rgb(225,90,30)" fg:x="285" fg:w="2"/><text x="23.2154%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="23.0459%" y="613" width="0.0806%" height="15" fill="rgb(236,182,39)" fg:x="286" fg:w="1"/><text x="23.2959%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.0459%" y="597" width="0.0806%" height="15" fill="rgb(212,144,35)" fg:x="286" fg:w="1"/><text x="23.2959%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.0459%" y="581" width="0.0806%" height="15" fill="rgb(228,63,44)" fg:x="286" fg:w="1"/><text x="23.2959%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="23.0459%" y="565" width="0.0806%" height="15" fill="rgb(228,109,6)" fg:x="286" fg:w="1"/><text x="23.2959%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.0459%" y="549" width="0.0806%" height="15" fill="rgb(238,117,24)" fg:x="286" fg:w="1"/><text x="23.2959%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="23.1265%" y="613" width="0.0806%" height="15" fill="rgb(242,26,26)" fg:x="287" fg:w="1"/><text x="23.3765%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="23.1265%" y="597" width="0.0806%" height="15" fill="rgb(221,92,48)" fg:x="287" fg:w="1"/><text x="23.3765%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="23.1265%" y="581" width="0.0806%" height="15" fill="rgb(209,209,32)" fg:x="287" fg:w="1"/><text x="23.3765%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="23.1265%" y="565" width="0.0806%" height="15" fill="rgb(221,70,22)" fg:x="287" fg:w="1"/><text x="23.3765%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="23.1265%" y="549" width="0.0806%" height="15" fill="rgb(248,145,5)" fg:x="287" fg:w="1"/><text x="23.3765%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (6 samples, 0.48%)</title><rect x="22.8042%" y="693" width="0.4835%" height="15" fill="rgb(226,116,26)" fg:x="283" fg:w="6"/><text x="23.0542%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (6 samples, 0.48%)</title><rect x="22.8042%" y="677" width="0.4835%" height="15" fill="rgb(244,5,17)" fg:x="283" fg:w="6"/><text x="23.0542%" y="687.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="22.9654%" y="661" width="0.3223%" height="15" fill="rgb(252,159,33)" fg:x="285" fg:w="4"/><text x="23.2154%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (2 samples, 0.16%)</title><rect x="23.1265%" y="645" width="0.1612%" height="15" fill="rgb(206,71,0)" fg:x="287" fg:w="2"/><text x="23.3765%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="23.1265%" y="629" width="0.1612%" height="15" fill="rgb(233,118,54)" fg:x="287" fg:w="2"/><text x="23.3765%" y="639.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="23.2071%" y="613" width="0.0806%" height="15" fill="rgb(234,83,48)" fg:x="288" fg:w="1"/><text x="23.4571%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (7 samples, 0.56%)</title><rect x="22.8042%" y="725" width="0.5641%" height="15" fill="rgb(228,3,54)" fg:x="283" fg:w="7"/><text x="23.0542%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (7 samples, 0.56%)</title><rect x="22.8042%" y="709" width="0.5641%" height="15" fill="rgb(226,155,13)" fg:x="283" fg:w="7"/><text x="23.0542%" y="719.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupyable (1 samples, 0.08%)</title><rect x="23.2877%" y="693" width="0.0806%" height="15" fill="rgb(241,28,37)" fg:x="289" fg:w="1"/><text x="23.5377%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="23.2877%" y="677" width="0.0806%" height="15" fill="rgb(233,93,10)" fg:x="289" fg:w="1"/><text x="23.5377%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="23.2877%" y="661" width="0.0806%" height="15" fill="rgb(225,113,19)" fg:x="289" fg:w="1"/><text x="23.5377%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="23.2877%" y="645" width="0.0806%" height="15" fill="rgb(241,2,18)" fg:x="289" fg:w="1"/><text x="23.5377%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="23.3683%" y="693" width="0.0806%" height="15" fill="rgb(228,207,21)" fg:x="290" fg:w="1"/><text x="23.6183%" y="703.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (2 samples, 0.16%)</title><rect x="23.3683%" y="709" width="0.1612%" height="15" fill="rgb(213,211,35)" fg:x="290" fg:w="2"/><text x="23.6183%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="23.4488%" y="693" width="0.0806%" height="15" fill="rgb(209,83,10)" fg:x="291" fg:w="1"/><text x="23.6988%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.4488%" y="677" width="0.0806%" height="15" fill="rgb(209,164,1)" fg:x="291" fg:w="1"/><text x="23.6988%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="23.5294%" y="677" width="0.0806%" height="15" fill="rgb(213,184,43)" fg:x="292" fg:w="1"/><text x="23.7794%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.5294%" y="661" width="0.0806%" height="15" fill="rgb(231,61,34)" fg:x="292" fg:w="1"/><text x="23.7794%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.5294%" y="645" width="0.0806%" height="15" fill="rgb(235,75,3)" fg:x="292" fg:w="1"/><text x="23.7794%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="23.5294%" y="629" width="0.0806%" height="15" fill="rgb(220,106,47)" fg:x="292" fg:w="1"/><text x="23.7794%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="23.7712%" y="549" width="0.0806%" height="15" fill="rgb(210,196,33)" fg:x="295" fg:w="1"/><text x="24.0212%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (4 samples, 0.32%)</title><rect x="23.6100%" y="629" width="0.3223%" height="15" fill="rgb(229,154,42)" fg:x="293" fg:w="4"/><text x="23.8600%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="23.6100%" y="613" width="0.3223%" height="15" fill="rgb(228,114,26)" fg:x="293" fg:w="4"/><text x="23.8600%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="23.6100%" y="597" width="0.3223%" height="15" fill="rgb(208,144,1)" fg:x="293" fg:w="4"/><text x="23.8600%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="23.6906%" y="581" width="0.2417%" height="15" fill="rgb(239,112,37)" fg:x="294" fg:w="3"/><text x="23.9406%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="23.6906%" y="565" width="0.2417%" height="15" fill="rgb(210,96,50)" fg:x="294" fg:w="3"/><text x="23.9406%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="23.8517%" y="549" width="0.0806%" height="15" fill="rgb(222,178,2)" fg:x="296" fg:w="1"/><text x="24.1017%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="23.8517%" y="533" width="0.0806%" height="15" fill="rgb(226,74,18)" fg:x="296" fg:w="1"/><text x="24.1017%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="23.6100%" y="661" width="0.4835%" height="15" fill="rgb(225,67,54)" fg:x="293" fg:w="6"/><text x="23.8600%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (6 samples, 0.48%)</title><rect x="23.6100%" y="645" width="0.4835%" height="15" fill="rgb(251,92,32)" fg:x="293" fg:w="6"/><text x="23.8600%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (2 samples, 0.16%)</title><rect x="23.9323%" y="629" width="0.1612%" height="15" fill="rgb(228,149,22)" fg:x="297" fg:w="2"/><text x="24.1823%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.0129%" y="613" width="0.0806%" height="15" fill="rgb(243,54,13)" fg:x="298" fg:w="1"/><text x="24.2629%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="24.0129%" y="597" width="0.0806%" height="15" fill="rgb(243,180,28)" fg:x="298" fg:w="1"/><text x="24.2629%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0129%" y="581" width="0.0806%" height="15" fill="rgb(208,167,24)" fg:x="298" fg:w="1"/><text x="24.2629%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.0129%" y="565" width="0.0806%" height="15" fill="rgb(245,73,45)" fg:x="298" fg:w="1"/><text x="24.2629%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="24.0129%" y="549" width="0.0806%" height="15" fill="rgb(237,203,48)" fg:x="298" fg:w="1"/><text x="24.2629%" y="559.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (196 samples, 15.79%)</title><rect x="8.3803%" y="741" width="15.7937%" height="15" fill="rgb(211,197,16)" fg:x="104" fg:w="196"/><text x="8.6303%" y="751.50">&lt;tests::HoldingKeyInVess..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (10 samples, 0.81%)</title><rect x="23.3683%" y="725" width="0.8058%" height="15" fill="rgb(243,99,51)" fg:x="290" fg:w="10"/><text x="23.6183%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.64%)</title><rect x="23.5294%" y="709" width="0.6446%" height="15" fill="rgb(215,123,29)" fg:x="292" fg:w="8"/><text x="23.7794%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (8 samples, 0.64%)</title><rect x="23.5294%" y="693" width="0.6446%" height="15" fill="rgb(239,186,37)" fg:x="292" fg:w="8"/><text x="23.7794%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.56%)</title><rect x="23.6100%" y="677" width="0.5641%" height="15" fill="rgb(252,136,39)" fg:x="293" fg:w="7"/><text x="23.8600%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="24.0935%" y="661" width="0.0806%" height="15" fill="rgb(223,213,32)" fg:x="299" fg:w="1"/><text x="24.3435%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="24.0935%" y="645" width="0.0806%" height="15" fill="rgb(233,115,5)" fg:x="299" fg:w="1"/><text x="24.3435%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (1 samples, 0.08%)</title><rect x="24.1741%" y="741" width="0.0806%" height="15" fill="rgb(207,226,44)" fg:x="300" fg:w="1"/><text x="24.4241%" y="751.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="24.1741%" y="725" width="0.0806%" height="15" fill="rgb(208,126,0)" fg:x="300" fg:w="1"/><text x="24.4241%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.1741%" y="709" width="0.0806%" height="15" fill="rgb(244,66,21)" fg:x="300" fg:w="1"/><text x="24.4241%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="24.2546%" y="725" width="0.0806%" height="15" fill="rgb(222,97,12)" fg:x="301" fg:w="1"/><text x="24.5046%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="24.2546%" y="709" width="0.0806%" height="15" fill="rgb(219,213,19)" fg:x="301" fg:w="1"/><text x="24.5046%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="24.3352%" y="725" width="0.0806%" height="15" fill="rgb(252,169,30)" fg:x="302" fg:w="1"/><text x="24.5852%" y="735.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="24.3352%" y="709" width="0.0806%" height="15" fill="rgb(206,32,51)" fg:x="302" fg:w="1"/><text x="24.5852%" y="719.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.3352%" y="693" width="0.0806%" height="15" fill="rgb(250,172,42)" fg:x="302" fg:w="1"/><text x="24.5852%" y="703.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.3352%" y="677" width="0.0806%" height="15" fill="rgb(209,34,43)" fg:x="302" fg:w="1"/><text x="24.5852%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="24.3352%" y="661" width="0.0806%" height="15" fill="rgb(223,11,35)" fg:x="302" fg:w="1"/><text x="24.5852%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="24.3352%" y="645" width="0.0806%" height="15" fill="rgb(251,219,26)" fg:x="302" fg:w="1"/><text x="24.5852%" y="655.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="24.3352%" y="629" width="0.0806%" height="15" fill="rgb(231,119,3)" fg:x="302" fg:w="1"/><text x="24.5852%" y="639.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="24.3352%" y="613" width="0.0806%" height="15" fill="rgb(216,97,11)" fg:x="302" fg:w="1"/><text x="24.5852%" y="623.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="24.3352%" y="597" width="0.0806%" height="15" fill="rgb(223,59,9)" fg:x="302" fg:w="1"/><text x="24.5852%" y="607.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="24.3352%" y="581" width="0.0806%" height="15" fill="rgb(233,93,31)" fg:x="302" fg:w="1"/><text x="24.5852%" y="591.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="24.3352%" y="565" width="0.0806%" height="15" fill="rgb(239,81,33)" fg:x="302" fg:w="1"/><text x="24.5852%" y="575.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.08%)</title><rect x="24.3352%" y="549" width="0.0806%" height="15" fill="rgb(213,120,34)" fg:x="302" fg:w="1"/><text x="24.5852%" y="559.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="24.3352%" y="533" width="0.0806%" height="15" fill="rgb(243,49,53)" fg:x="302" fg:w="1"/><text x="24.5852%" y="543.50"></text></g><g><title>core::str::count::count_chars (1 samples, 0.08%)</title><rect x="24.3352%" y="517" width="0.0806%" height="15" fill="rgb(247,216,33)" fg:x="302" fg:w="1"/><text x="24.5852%" y="527.50"></text></g><g><title>core::str::count::char_count_general_case (1 samples, 0.08%)</title><rect x="24.3352%" y="501" width="0.0806%" height="15" fill="rgb(226,26,14)" fg:x="302" fg:w="1"/><text x="24.5852%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (1 samples, 0.08%)</title><rect x="24.3352%" y="485" width="0.0806%" height="15" fill="rgb(215,49,53)" fg:x="302" fg:w="1"/><text x="24.5852%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (1 samples, 0.08%)</title><rect x="24.3352%" y="469" width="0.0806%" height="15" fill="rgb(245,162,40)" fg:x="302" fg:w="1"/><text x="24.5852%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (1 samples, 0.08%)</title><rect x="24.3352%" y="453" width="0.0806%" height="15" fill="rgb(229,68,17)" fg:x="302" fg:w="1"/><text x="24.5852%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="24.3352%" y="437" width="0.0806%" height="15" fill="rgb(213,182,10)" fg:x="302" fg:w="1"/><text x="24.5852%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="24.3352%" y="421" width="0.0806%" height="15" fill="rgb(245,125,30)" fg:x="302" fg:w="1"/><text x="24.5852%" y="431.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="24.4158%" y="725" width="0.0806%" height="15" fill="rgb(232,202,2)" fg:x="303" fg:w="1"/><text x="24.6658%" y="735.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="24.4158%" y="709" width="0.0806%" height="15" fill="rgb(237,140,51)" fg:x="303" fg:w="1"/><text x="24.6658%" y="719.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="24.4158%" y="693" width="0.0806%" height="15" fill="rgb(236,157,25)" fg:x="303" fg:w="1"/><text x="24.6658%" y="703.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="24.4158%" y="677" width="0.0806%" height="15" fill="rgb(219,209,0)" fg:x="303" fg:w="1"/><text x="24.6658%" y="687.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="24.4158%" y="661" width="0.0806%" height="15" fill="rgb(240,116,54)" fg:x="303" fg:w="1"/><text x="24.6658%" y="671.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="24.4158%" y="645" width="0.0806%" height="15" fill="rgb(216,10,36)" fg:x="303" fg:w="1"/><text x="24.6658%" y="655.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="24.4964%" y="693" width="0.1612%" height="15" fill="rgb(222,72,44)" fg:x="304" fg:w="2"/><text x="24.7464%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="24.4964%" y="677" width="0.1612%" height="15" fill="rgb(232,159,9)" fg:x="304" fg:w="2"/><text x="24.7464%" y="687.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="24.4964%" y="661" width="0.1612%" height="15" fill="rgb(210,39,32)" fg:x="304" fg:w="2"/><text x="24.7464%" y="671.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="24.6575%" y="597" width="0.2417%" height="15" fill="rgb(216,194,45)" fg:x="306" fg:w="3"/><text x="24.9075%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="24.8993%" y="597" width="0.0806%" height="15" fill="rgb(218,18,35)" fg:x="309" fg:w="1"/><text x="25.1493%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="24.6575%" y="613" width="0.4029%" height="15" fill="rgb(207,83,51)" fg:x="306" fg:w="5"/><text x="24.9075%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="24.9799%" y="597" width="0.0806%" height="15" fill="rgb(225,63,43)" fg:x="310" fg:w="1"/><text x="25.2299%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="24.9799%" y="581" width="0.0806%" height="15" fill="rgb(207,57,36)" fg:x="310" fg:w="1"/><text x="25.2299%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.9799%" y="565" width="0.0806%" height="15" fill="rgb(216,99,33)" fg:x="310" fg:w="1"/><text x="25.2299%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="24.6575%" y="645" width="0.5641%" height="15" fill="rgb(225,42,16)" fg:x="306" fg:w="7"/><text x="24.9075%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.56%)</title><rect x="24.6575%" y="629" width="0.5641%" height="15" fill="rgb(220,201,45)" fg:x="306" fg:w="7"/><text x="24.9075%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="25.0604%" y="613" width="0.1612%" height="15" fill="rgb(225,33,4)" fg:x="311" fg:w="2"/><text x="25.3104%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="25.2216%" y="629" width="0.2417%" height="15" fill="rgb(224,33,50)" fg:x="313" fg:w="3"/><text x="25.4716%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="25.2216%" y="613" width="0.2417%" height="15" fill="rgb(246,198,51)" fg:x="313" fg:w="3"/><text x="25.4716%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.3828%" y="597" width="0.0806%" height="15" fill="rgb(205,22,4)" fg:x="315" fg:w="1"/><text x="25.6328%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="25.3828%" y="581" width="0.0806%" height="15" fill="rgb(206,3,8)" fg:x="315" fg:w="1"/><text x="25.6328%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="25.3828%" y="565" width="0.0806%" height="15" fill="rgb(251,23,15)" fg:x="315" fg:w="1"/><text x="25.6328%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.3828%" y="549" width="0.0806%" height="15" fill="rgb(252,88,28)" fg:x="315" fg:w="1"/><text x="25.6328%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.3828%" y="533" width="0.0806%" height="15" fill="rgb(212,127,14)" fg:x="315" fg:w="1"/><text x="25.6328%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.3828%" y="517" width="0.0806%" height="15" fill="rgb(247,145,37)" fg:x="315" fg:w="1"/><text x="25.6328%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="25.5439%" y="613" width="0.3223%" height="15" fill="rgb(209,117,53)" fg:x="317" fg:w="4"/><text x="25.7939%" y="623.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="25.6245%" y="597" width="0.2417%" height="15" fill="rgb(212,90,42)" fg:x="318" fg:w="3"/><text x="25.8745%" y="607.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="25.6245%" y="581" width="0.2417%" height="15" fill="rgb(218,164,37)" fg:x="318" fg:w="3"/><text x="25.8745%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="25.6245%" y="565" width="0.2417%" height="15" fill="rgb(246,65,34)" fg:x="318" fg:w="3"/><text x="25.8745%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="25.7857%" y="549" width="0.0806%" height="15" fill="rgb(231,100,33)" fg:x="320" fg:w="1"/><text x="26.0357%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="25.7857%" y="533" width="0.0806%" height="15" fill="rgb(228,126,14)" fg:x="320" fg:w="1"/><text x="26.0357%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="25.7857%" y="517" width="0.0806%" height="15" fill="rgb(215,173,21)" fg:x="320" fg:w="1"/><text x="26.0357%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.8662%" y="565" width="0.0806%" height="15" fill="rgb(210,6,40)" fg:x="321" fg:w="1"/><text x="26.1162%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.8662%" y="549" width="0.0806%" height="15" fill="rgb(212,48,18)" fg:x="321" fg:w="1"/><text x="26.1162%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="25.8662%" y="597" width="0.1612%" height="15" fill="rgb(230,214,11)" fg:x="321" fg:w="2"/><text x="26.1162%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="25.8662%" y="581" width="0.1612%" height="15" fill="rgb(254,105,39)" fg:x="321" fg:w="2"/><text x="26.1162%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.9468%" y="565" width="0.0806%" height="15" fill="rgb(245,158,5)" fg:x="322" fg:w="1"/><text x="26.1968%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="25.9468%" y="549" width="0.0806%" height="15" fill="rgb(249,208,11)" fg:x="322" fg:w="1"/><text x="26.1968%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="25.9468%" y="533" width="0.0806%" height="15" fill="rgb(210,39,28)" fg:x="322" fg:w="1"/><text x="26.1968%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="25.9468%" y="517" width="0.0806%" height="15" fill="rgb(211,56,53)" fg:x="322" fg:w="1"/><text x="26.1968%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="26.0274%" y="597" width="0.2417%" height="15" fill="rgb(226,201,30)" fg:x="323" fg:w="3"/><text x="26.2774%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.1886%" y="581" width="0.0806%" height="15" fill="rgb(239,101,34)" fg:x="325" fg:w="1"/><text x="26.4386%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="26.2691%" y="581" width="0.0806%" height="15" fill="rgb(226,209,5)" fg:x="326" fg:w="1"/><text x="26.5191%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.2691%" y="565" width="0.0806%" height="15" fill="rgb(250,105,47)" fg:x="326" fg:w="1"/><text x="26.5191%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.2691%" y="549" width="0.0806%" height="15" fill="rgb(230,72,3)" fg:x="326" fg:w="1"/><text x="26.5191%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.2691%" y="533" width="0.0806%" height="15" fill="rgb(232,218,39)" fg:x="326" fg:w="1"/><text x="26.5191%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.2691%" y="517" width="0.0806%" height="15" fill="rgb(248,166,6)" fg:x="326" fg:w="1"/><text x="26.5191%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.2691%" y="501" width="0.0806%" height="15" fill="rgb(247,89,20)" fg:x="326" fg:w="1"/><text x="26.5191%" y="511.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.2691%" y="485" width="0.0806%" height="15" fill="rgb(248,130,54)" fg:x="326" fg:w="1"/><text x="26.5191%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="26.4303%" y="565" width="0.2417%" height="15" fill="rgb(234,196,4)" fg:x="328" fg:w="3"/><text x="26.6803%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="26.4303%" y="549" width="0.2417%" height="15" fill="rgb(250,143,31)" fg:x="328" fg:w="3"/><text x="26.6803%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="26.5915%" y="533" width="0.0806%" height="15" fill="rgb(211,110,34)" fg:x="330" fg:w="1"/><text x="26.8415%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.5915%" y="517" width="0.0806%" height="15" fill="rgb(215,124,48)" fg:x="330" fg:w="1"/><text x="26.8415%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="26.5915%" y="501" width="0.0806%" height="15" fill="rgb(216,46,13)" fg:x="330" fg:w="1"/><text x="26.8415%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="26.5915%" y="485" width="0.0806%" height="15" fill="rgb(205,184,25)" fg:x="330" fg:w="1"/><text x="26.8415%" y="495.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="26.5915%" y="469" width="0.0806%" height="15" fill="rgb(228,1,10)" fg:x="330" fg:w="1"/><text x="26.8415%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="26.3497%" y="581" width="0.4029%" height="15" fill="rgb(213,116,27)" fg:x="327" fg:w="5"/><text x="26.5997%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="26.6720%" y="565" width="0.0806%" height="15" fill="rgb(241,95,50)" fg:x="331" fg:w="1"/><text x="26.9220%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="26.6720%" y="549" width="0.0806%" height="15" fill="rgb(238,48,32)" fg:x="331" fg:w="1"/><text x="26.9220%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="26.6720%" y="533" width="0.0806%" height="15" fill="rgb(235,113,49)" fg:x="331" fg:w="1"/><text x="26.9220%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (18 samples, 1.45%)</title><rect x="25.4633%" y="629" width="1.4504%" height="15" fill="rgb(205,127,43)" fg:x="316" fg:w="18"/><text x="25.7133%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.05%)</title><rect x="25.8662%" y="613" width="1.0475%" height="15" fill="rgb(250,162,2)" fg:x="321" fg:w="13"/><text x="26.1162%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="26.2691%" y="597" width="0.6446%" height="15" fill="rgb(220,13,41)" fg:x="326" fg:w="8"/><text x="26.5191%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="26.7526%" y="581" width="0.1612%" height="15" fill="rgb(249,221,25)" fg:x="332" fg:w="2"/><text x="27.0026%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="26.7526%" y="565" width="0.1612%" height="15" fill="rgb(215,208,19)" fg:x="332" fg:w="2"/><text x="27.0026%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="26.8332%" y="549" width="0.0806%" height="15" fill="rgb(236,175,2)" fg:x="333" fg:w="1"/><text x="27.0832%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (24 samples, 1.93%)</title><rect x="25.2216%" y="645" width="1.9339%" height="15" fill="rgb(241,52,2)" fg:x="313" fg:w="24"/><text x="25.4716%" y="655.50">&lt;..</text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="26.9138%" y="629" width="0.2417%" height="15" fill="rgb(248,140,14)" fg:x="334" fg:w="3"/><text x="27.1638%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="26.9138%" y="613" width="0.2417%" height="15" fill="rgb(253,22,42)" fg:x="334" fg:w="3"/><text x="27.1638%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="26.9138%" y="597" width="0.2417%" height="15" fill="rgb(234,61,47)" fg:x="334" fg:w="3"/><text x="27.1638%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="27.0749%" y="581" width="0.0806%" height="15" fill="rgb(208,226,15)" fg:x="336" fg:w="1"/><text x="27.3249%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="27.0749%" y="565" width="0.0806%" height="15" fill="rgb(217,221,4)" fg:x="336" fg:w="1"/><text x="27.3249%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.0749%" y="549" width="0.0806%" height="15" fill="rgb(212,174,34)" fg:x="336" fg:w="1"/><text x="27.3249%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="27.2361%" y="581" width="0.1612%" height="15" fill="rgb(253,83,4)" fg:x="338" fg:w="2"/><text x="27.4861%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.4778%" y="565" width="0.0806%" height="15" fill="rgb(250,195,49)" fg:x="341" fg:w="1"/><text x="27.7278%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.5584%" y="565" width="0.0806%" height="15" fill="rgb(241,192,25)" fg:x="342" fg:w="1"/><text x="27.8084%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.5584%" y="549" width="0.0806%" height="15" fill="rgb(208,124,10)" fg:x="342" fg:w="1"/><text x="27.8084%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.7196%" y="549" width="0.0806%" height="15" fill="rgb(222,33,0)" fg:x="344" fg:w="1"/><text x="27.9696%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="27.8002%" y="549" width="0.1612%" height="15" fill="rgb(234,209,28)" fg:x="345" fg:w="2"/><text x="28.0502%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="27.8807%" y="533" width="0.0806%" height="15" fill="rgb(224,11,23)" fg:x="346" fg:w="1"/><text x="28.1307%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="27.9613%" y="533" width="0.0806%" height="15" fill="rgb(232,99,1)" fg:x="347" fg:w="1"/><text x="28.2113%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="28.0419%" y="533" width="0.0806%" height="15" fill="rgb(237,95,45)" fg:x="348" fg:w="1"/><text x="28.2919%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="28.0419%" y="517" width="0.0806%" height="15" fill="rgb(208,109,11)" fg:x="348" fg:w="1"/><text x="28.2919%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.0419%" y="501" width="0.0806%" height="15" fill="rgb(216,190,48)" fg:x="348" fg:w="1"/><text x="28.2919%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="28.1225%" y="517" width="0.1612%" height="15" fill="rgb(251,171,36)" fg:x="349" fg:w="2"/><text x="28.3725%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="28.1225%" y="501" width="0.1612%" height="15" fill="rgb(230,62,22)" fg:x="349" fg:w="2"/><text x="28.3725%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.21%)</title><rect x="27.1555%" y="613" width="1.2087%" height="15" fill="rgb(225,114,35)" fg:x="337" fg:w="15"/><text x="27.4055%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (15 samples, 1.21%)</title><rect x="27.1555%" y="597" width="1.2087%" height="15" fill="rgb(215,118,42)" fg:x="337" fg:w="15"/><text x="27.4055%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.97%)</title><rect x="27.3973%" y="581" width="0.9670%" height="15" fill="rgb(243,119,21)" fg:x="340" fg:w="12"/><text x="27.6473%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.73%)</title><rect x="27.6390%" y="565" width="0.7252%" height="15" fill="rgb(252,177,53)" fg:x="343" fg:w="9"/><text x="27.8890%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="27.9613%" y="549" width="0.4029%" height="15" fill="rgb(237,209,29)" fg:x="347" fg:w="5"/><text x="28.2113%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="28.1225%" y="533" width="0.2417%" height="15" fill="rgb(212,65,23)" fg:x="349" fg:w="3"/><text x="28.3725%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="28.2836%" y="517" width="0.0806%" height="15" fill="rgb(230,222,46)" fg:x="351" fg:w="1"/><text x="28.5336%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="28.3642%" y="613" width="0.0806%" height="15" fill="rgb(215,135,32)" fg:x="352" fg:w="1"/><text x="28.6142%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3642%" y="597" width="0.0806%" height="15" fill="rgb(246,101,22)" fg:x="352" fg:w="1"/><text x="28.6142%" y="607.50"></text></g><g><title>&lt;itertools::unique_impl::Unique&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="28.4448%" y="581" width="0.0806%" height="15" fill="rgb(206,107,13)" fg:x="353" fg:w="1"/><text x="28.6948%" y="591.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="28.4448%" y="565" width="0.0806%" height="15" fill="rgb(250,100,44)" fg:x="353" fg:w="1"/><text x="28.6948%" y="575.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (2 samples, 0.16%)</title><rect x="28.4448%" y="613" width="0.1612%" height="15" fill="rgb(231,147,38)" fg:x="353" fg:w="2"/><text x="28.6948%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="28.4448%" y="597" width="0.1612%" height="15" fill="rgb(229,8,40)" fg:x="353" fg:w="2"/><text x="28.6948%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="28.5254%" y="581" width="0.0806%" height="15" fill="rgb(221,135,30)" fg:x="354" fg:w="1"/><text x="28.7754%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (21 samples, 1.69%)</title><rect x="27.1555%" y="629" width="1.6922%" height="15" fill="rgb(249,193,18)" fg:x="337" fg:w="21"/><text x="27.4055%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="28.6060%" y="613" width="0.2417%" height="15" fill="rgb(209,133,39)" fg:x="355" fg:w="3"/><text x="28.8560%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="28.6060%" y="597" width="0.2417%" height="15" fill="rgb(232,100,14)" fg:x="355" fg:w="3"/><text x="28.8560%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.6865%" y="581" width="0.1612%" height="15" fill="rgb(224,185,1)" fg:x="356" fg:w="2"/><text x="28.9365%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="28.6865%" y="565" width="0.1612%" height="15" fill="rgb(223,139,8)" fg:x="356" fg:w="2"/><text x="28.9365%" y="575.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="28.7671%" y="549" width="0.0806%" height="15" fill="rgb(232,213,38)" fg:x="357" fg:w="1"/><text x="29.0171%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0894%" y="597" width="0.0806%" height="15" fill="rgb(207,94,22)" fg:x="361" fg:w="1"/><text x="29.3394%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.1700%" y="597" width="0.1612%" height="15" fill="rgb(219,183,54)" fg:x="362" fg:w="2"/><text x="29.4200%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.2506%" y="581" width="0.0806%" height="15" fill="rgb(216,185,54)" fg:x="363" fg:w="1"/><text x="29.5006%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="29.3312%" y="597" width="0.0806%" height="15" fill="rgb(254,217,39)" fg:x="364" fg:w="1"/><text x="29.5812%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.3312%" y="581" width="0.0806%" height="15" fill="rgb(240,178,23)" fg:x="364" fg:w="1"/><text x="29.5812%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="29.3312%" y="565" width="0.0806%" height="15" fill="rgb(218,11,47)" fg:x="364" fg:w="1"/><text x="29.5812%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="29.3312%" y="549" width="0.0806%" height="15" fill="rgb(218,51,51)" fg:x="364" fg:w="1"/><text x="29.5812%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (3 samples, 0.24%)</title><rect x="29.4118%" y="597" width="0.2417%" height="15" fill="rgb(238,126,27)" fg:x="365" fg:w="3"/><text x="29.6618%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="29.5729%" y="581" width="0.0806%" height="15" fill="rgb(249,202,22)" fg:x="367" fg:w="1"/><text x="29.8229%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.5729%" y="565" width="0.0806%" height="15" fill="rgb(254,195,49)" fg:x="367" fg:w="1"/><text x="29.8229%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.9758%" y="565" width="0.0806%" height="15" fill="rgb(208,123,14)" fg:x="372" fg:w="1"/><text x="30.2258%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="30.0564%" y="565" width="0.0806%" height="15" fill="rgb(224,200,8)" fg:x="373" fg:w="1"/><text x="30.3064%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3787%" y="533" width="0.0806%" height="15" fill="rgb(217,61,36)" fg:x="377" fg:w="1"/><text x="30.6287%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (5 samples, 0.40%)</title><rect x="30.1370%" y="549" width="0.4029%" height="15" fill="rgb(206,35,45)" fg:x="374" fg:w="5"/><text x="30.3870%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.4593%" y="533" width="0.0806%" height="15" fill="rgb(217,65,33)" fg:x="378" fg:w="1"/><text x="30.7093%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="30.5399%" y="517" width="0.1612%" height="15" fill="rgb(222,158,48)" fg:x="379" fg:w="2"/><text x="30.7899%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="30.5399%" y="501" width="0.1612%" height="15" fill="rgb(254,2,54)" fg:x="379" fg:w="2"/><text x="30.7899%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="30.5399%" y="485" width="0.1612%" height="15" fill="rgb(250,143,38)" fg:x="379" fg:w="2"/><text x="30.7899%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="30.5399%" y="469" width="0.1612%" height="15" fill="rgb(248,25,0)" fg:x="379" fg:w="2"/><text x="30.7899%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="30.5399%" y="453" width="0.1612%" height="15" fill="rgb(206,152,27)" fg:x="379" fg:w="2"/><text x="30.7899%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="30.5399%" y="437" width="0.1612%" height="15" fill="rgb(240,77,30)" fg:x="379" fg:w="2"/><text x="30.7899%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.6205%" y="421" width="0.0806%" height="15" fill="rgb(231,5,3)" fg:x="380" fg:w="1"/><text x="30.8705%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="30.5399%" y="549" width="0.2417%" height="15" fill="rgb(207,226,32)" fg:x="379" fg:w="3"/><text x="30.7899%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="30.5399%" y="533" width="0.2417%" height="15" fill="rgb(222,207,47)" fg:x="379" fg:w="3"/><text x="30.7899%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.7010%" y="517" width="0.0806%" height="15" fill="rgb(229,115,45)" fg:x="381" fg:w="1"/><text x="30.9510%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="31.0234%" y="501" width="0.0806%" height="15" fill="rgb(224,191,6)" fg:x="385" fg:w="1"/><text x="31.2734%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="31.1039%" y="501" width="0.0806%" height="15" fill="rgb(230,227,24)" fg:x="386" fg:w="1"/><text x="31.3539%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="31.1845%" y="501" width="0.3223%" height="15" fill="rgb(228,80,19)" fg:x="387" fg:w="4"/><text x="31.4345%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="31.1845%" y="485" width="0.3223%" height="15" fill="rgb(247,229,0)" fg:x="387" fg:w="4"/><text x="31.4345%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.3457%" y="469" width="0.1612%" height="15" fill="rgb(237,194,15)" fg:x="389" fg:w="2"/><text x="31.5957%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.81%)</title><rect x="30.8622%" y="533" width="0.8058%" height="15" fill="rgb(219,203,20)" fg:x="383" fg:w="10"/><text x="31.1122%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (10 samples, 0.81%)</title><rect x="30.8622%" y="517" width="0.8058%" height="15" fill="rgb(234,128,8)" fg:x="383" fg:w="10"/><text x="31.1122%" y="527.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="31.5068%" y="501" width="0.1612%" height="15" fill="rgb(248,202,8)" fg:x="391" fg:w="2"/><text x="31.7568%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.6680%" y="533" width="0.0806%" height="15" fill="rgb(206,104,37)" fg:x="393" fg:w="1"/><text x="31.9180%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="31.6680%" y="517" width="0.0806%" height="15" fill="rgb(223,8,27)" fg:x="393" fg:w="1"/><text x="31.9180%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (21 samples, 1.69%)</title><rect x="30.1370%" y="565" width="1.6922%" height="15" fill="rgb(216,217,28)" fg:x="374" fg:w="21"/><text x="30.3870%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (13 samples, 1.05%)</title><rect x="30.7816%" y="549" width="1.0475%" height="15" fill="rgb(249,199,1)" fg:x="382" fg:w="13"/><text x="31.0316%" y="559.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f64&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="31.7486%" y="533" width="0.0806%" height="15" fill="rgb(240,85,17)" fg:x="394" fg:w="1"/><text x="31.9986%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (27 samples, 2.18%)</title><rect x="29.8952%" y="581" width="2.1757%" height="15" fill="rgb(206,108,45)" fg:x="371" fg:w="27"/><text x="30.1452%" y="591.50">&lt;..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (3 samples, 0.24%)</title><rect x="31.8292%" y="565" width="0.2417%" height="15" fill="rgb(245,210,41)" fg:x="395" fg:w="3"/><text x="32.0792%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9903%" y="549" width="0.0806%" height="15" fill="rgb(206,13,37)" fg:x="397" fg:w="1"/><text x="32.2403%" y="559.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.0709%" y="581" width="0.1612%" height="15" fill="rgb(250,61,18)" fg:x="398" fg:w="2"/><text x="32.3209%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (43 samples, 3.46%)</title><rect x="28.8477%" y="629" width="3.4649%" height="15" fill="rgb(235,172,48)" fg:x="358" fg:w="43"/><text x="29.0977%" y="639.50">ker..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (43 samples, 3.46%)</title><rect x="28.8477%" y="613" width="3.4649%" height="15" fill="rgb(249,201,17)" fg:x="358" fg:w="43"/><text x="29.0977%" y="623.50">&lt;se..</text></g><g><title>serde::ser::Serializer::collect_map (33 samples, 2.66%)</title><rect x="29.6535%" y="597" width="2.6591%" height="15" fill="rgb(219,208,6)" fg:x="368" fg:w="33"/><text x="29.9035%" y="607.50">se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.2321%" y="581" width="0.0806%" height="15" fill="rgb(248,31,23)" fg:x="400" fg:w="1"/><text x="32.4821%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="32.2321%" y="565" width="0.0806%" height="15" fill="rgb(245,15,42)" fg:x="400" fg:w="1"/><text x="32.4821%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.6350%" y="437" width="0.0806%" height="15" fill="rgb(222,217,39)" fg:x="405" fg:w="1"/><text x="32.8850%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.6350%" y="485" width="0.1612%" height="15" fill="rgb(210,219,27)" fg:x="405" fg:w="2"/><text x="32.8850%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.6350%" y="469" width="0.1612%" height="15" fill="rgb(252,166,36)" fg:x="405" fg:w="2"/><text x="32.8850%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="32.6350%" y="453" width="0.1612%" height="15" fill="rgb(245,132,34)" fg:x="405" fg:w="2"/><text x="32.8850%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.7156%" y="437" width="0.0806%" height="15" fill="rgb(236,54,3)" fg:x="406" fg:w="1"/><text x="32.9656%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.7961%" y="453" width="0.0806%" height="15" fill="rgb(241,173,43)" fg:x="407" fg:w="1"/><text x="33.0461%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.9573%" y="437" width="0.0806%" height="15" fill="rgb(215,190,9)" fg:x="409" fg:w="1"/><text x="33.2073%" y="447.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="32.9573%" y="421" width="0.0806%" height="15" fill="rgb(242,101,16)" fg:x="409" fg:w="1"/><text x="33.2073%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="32.7961%" y="469" width="0.3223%" height="15" fill="rgb(223,190,21)" fg:x="407" fg:w="4"/><text x="33.0461%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="32.8767%" y="453" width="0.2417%" height="15" fill="rgb(215,228,25)" fg:x="408" fg:w="3"/><text x="33.1267%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.0379%" y="437" width="0.0806%" height="15" fill="rgb(225,36,22)" fg:x="410" fg:w="1"/><text x="33.2879%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="32.5544%" y="501" width="0.6446%" height="15" fill="rgb(251,106,46)" fg:x="404" fg:w="8"/><text x="32.8044%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="32.7961%" y="485" width="0.4029%" height="15" fill="rgb(208,90,1)" fg:x="407" fg:w="5"/><text x="33.0461%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.1185%" y="469" width="0.0806%" height="15" fill="rgb(243,10,4)" fg:x="411" fg:w="1"/><text x="33.3685%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.1185%" y="453" width="0.0806%" height="15" fill="rgb(212,137,27)" fg:x="411" fg:w="1"/><text x="33.3685%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="32.5544%" y="517" width="0.8058%" height="15" fill="rgb(231,220,49)" fg:x="404" fg:w="10"/><text x="32.8044%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="33.1990%" y="501" width="0.1612%" height="15" fill="rgb(237,96,20)" fg:x="412" fg:w="2"/><text x="33.4490%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.2796%" y="485" width="0.0806%" height="15" fill="rgb(239,229,30)" fg:x="413" fg:w="1"/><text x="33.5296%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (12 samples, 0.97%)</title><rect x="32.4738%" y="533" width="0.9670%" height="15" fill="rgb(219,65,33)" fg:x="403" fg:w="12"/><text x="32.7238%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.3602%" y="517" width="0.0806%" height="15" fill="rgb(243,134,7)" fg:x="414" fg:w="1"/><text x="33.6102%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (16 samples, 1.29%)</title><rect x="32.3932%" y="565" width="1.2893%" height="15" fill="rgb(216,177,54)" fg:x="402" fg:w="16"/><text x="32.6432%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (15 samples, 1.21%)</title><rect x="32.4738%" y="549" width="1.2087%" height="15" fill="rgb(211,160,20)" fg:x="403" fg:w="15"/><text x="32.7238%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="33.4408%" y="533" width="0.2417%" height="15" fill="rgb(239,85,39)" fg:x="415" fg:w="3"/><text x="33.6908%" y="543.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.6019%" y="517" width="0.0806%" height="15" fill="rgb(232,125,22)" fg:x="417" fg:w="1"/><text x="33.8519%" y="527.50"></text></g><g><title>engine::session::state::State::close (115 samples, 9.27%)</title><rect x="24.4964%" y="725" width="9.2667%" height="15" fill="rgb(244,57,34)" fg:x="304" fg:w="115"/><text x="24.7464%" y="735.50">engine::sessi..</text></g><g><title>engine::session::state::State::flush_entities (115 samples, 9.27%)</title><rect x="24.4964%" y="709" width="9.2667%" height="15" fill="rgb(214,203,32)" fg:x="304" fg:w="115"/><text x="24.7464%" y="719.50">engine::sessi..</text></g><g><title>core::iter::adapters::try_process (113 samples, 9.11%)</title><rect x="24.6575%" y="693" width="9.1056%" height="15" fill="rgb(207,58,43)" fg:x="306" fg:w="113"/><text x="24.9075%" y="703.50">core::iter::a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (113 samples, 9.11%)</title><rect x="24.6575%" y="677" width="9.1056%" height="15" fill="rgb(215,193,15)" fg:x="306" fg:w="113"/><text x="24.9075%" y="687.50">&lt;alloc::vec::..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (113 samples, 9.11%)</title><rect x="24.6575%" y="661" width="9.1056%" height="15" fill="rgb(232,15,44)" fg:x="306" fg:w="113"/><text x="24.9075%" y="671.50">engine::sessi..</text></g><g><title>kernel::model::any_entity_changes (82 samples, 6.61%)</title><rect x="27.1555%" y="645" width="6.6076%" height="15" fill="rgb(212,3,48)" fg:x="337" fg:w="82"/><text x="27.4055%" y="655.50">kernel::m..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (18 samples, 1.45%)</title><rect x="32.3127%" y="629" width="1.4504%" height="15" fill="rgb(218,128,7)" fg:x="401" fg:w="18"/><text x="32.5627%" y="639.50"></text></g><g><title>serde_json::de::from_trait (18 samples, 1.45%)</title><rect x="32.3127%" y="613" width="1.4504%" height="15" fill="rgb(226,216,39)" fg:x="401" fg:w="18"/><text x="32.5627%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (18 samples, 1.45%)</title><rect x="32.3127%" y="597" width="1.4504%" height="15" fill="rgb(243,47,51)" fg:x="401" fg:w="18"/><text x="32.5627%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (17 samples, 1.37%)</title><rect x="32.3932%" y="581" width="1.3699%" height="15" fill="rgb(241,183,40)" fg:x="402" fg:w="17"/><text x="32.6432%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="33.6825%" y="565" width="0.0806%" height="15" fill="rgb(231,217,32)" fg:x="418" fg:w="1"/><text x="33.9325%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="33.6825%" y="549" width="0.0806%" height="15" fill="rgb(229,61,38)" fg:x="418" fg:w="1"/><text x="33.9325%" y="559.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="33.7631%" y="725" width="0.0806%" height="15" fill="rgb(225,210,5)" fg:x="419" fg:w="1"/><text x="34.0131%" y="735.50"></text></g><g><title>kernel::plugins::Plugin::stop (1 samples, 0.08%)</title><rect x="33.7631%" y="709" width="0.0806%" height="15" fill="rgb(231,79,45)" fg:x="419" fg:w="1"/><text x="34.0131%" y="719.50"></text></g><g><title>engine::session::Session::close (121 samples, 9.75%)</title><rect x="24.2546%" y="741" width="9.7502%" height="15" fill="rgb(224,100,7)" fg:x="301" fg:w="121"/><text x="24.5046%" y="751.50">engine::sessio..</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="33.8437%" y="725" width="0.1612%" height="15" fill="rgb(241,198,18)" fg:x="420" fg:w="2"/><text x="34.0937%" y="735.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="33.8437%" y="709" width="0.1612%" height="15" fill="rgb(252,97,53)" fg:x="420" fg:w="2"/><text x="34.0937%" y="719.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="33.8437%" y="693" width="0.1612%" height="15" fill="rgb(220,88,7)" fg:x="420" fg:w="2"/><text x="34.0937%" y="703.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="33.8437%" y="677" width="0.1612%" height="15" fill="rgb(213,176,14)" fg:x="420" fg:w="2"/><text x="34.0937%" y="687.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="33.8437%" y="661" width="0.1612%" height="15" fill="rgb(246,73,7)" fg:x="420" fg:w="2"/><text x="34.0937%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="34.0854%" y="677" width="0.0806%" height="15" fill="rgb(245,64,36)" fg:x="423" fg:w="1"/><text x="34.3354%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (3 samples, 0.24%)</title><rect x="34.0048%" y="709" width="0.2417%" height="15" fill="rgb(245,80,10)" fg:x="422" fg:w="3"/><text x="34.2548%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="34.0048%" y="693" width="0.2417%" height="15" fill="rgb(232,107,50)" fg:x="422" fg:w="3"/><text x="34.2548%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.1660%" y="677" width="0.0806%" height="15" fill="rgb(253,3,0)" fg:x="424" fg:w="1"/><text x="34.4160%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="34.2466%" y="693" width="0.1612%" height="15" fill="rgb(212,99,53)" fg:x="425" fg:w="2"/><text x="34.4966%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="34.2466%" y="677" width="0.1612%" height="15" fill="rgb(249,111,54)" fg:x="425" fg:w="2"/><text x="34.4966%" y="687.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="34.2466%" y="661" width="0.1612%" height="15" fill="rgb(249,55,30)" fg:x="425" fg:w="2"/><text x="34.4966%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.16%)</title><rect x="34.2466%" y="645" width="0.1612%" height="15" fill="rgb(237,47,42)" fg:x="425" fg:w="2"/><text x="34.4966%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (2 samples, 0.16%)</title><rect x="34.2466%" y="629" width="0.1612%" height="15" fill="rgb(211,20,18)" fg:x="425" fg:w="2"/><text x="34.4966%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (2 samples, 0.16%)</title><rect x="34.2466%" y="613" width="0.1612%" height="15" fill="rgb(231,203,46)" fg:x="425" fg:w="2"/><text x="34.4966%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (2 samples, 0.16%)</title><rect x="34.2466%" y="597" width="0.1612%" height="15" fill="rgb(237,142,3)" fg:x="425" fg:w="2"/><text x="34.4966%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="34.3272%" y="581" width="0.0806%" height="15" fill="rgb(241,107,1)" fg:x="426" fg:w="1"/><text x="34.5772%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="34.3272%" y="565" width="0.0806%" height="15" fill="rgb(229,83,13)" fg:x="426" fg:w="1"/><text x="34.5772%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="34.3272%" y="549" width="0.0806%" height="15" fill="rgb(241,91,40)" fg:x="426" fg:w="1"/><text x="34.5772%" y="559.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="34.3272%" y="533" width="0.0806%" height="15" fill="rgb(225,3,45)" fg:x="426" fg:w="1"/><text x="34.5772%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="34.3272%" y="517" width="0.0806%" height="15" fill="rgb(244,223,14)" fg:x="426" fg:w="1"/><text x="34.5772%" y="527.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="34.3272%" y="501" width="0.0806%" height="15" fill="rgb(224,124,37)" fg:x="426" fg:w="1"/><text x="34.5772%" y="511.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="34.3272%" y="485" width="0.0806%" height="15" fill="rgb(251,171,30)" fg:x="426" fg:w="1"/><text x="34.5772%" y="495.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.3272%" y="469" width="0.0806%" height="15" fill="rgb(236,46,54)" fg:x="426" fg:w="1"/><text x="34.5772%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="34.3272%" y="453" width="0.0806%" height="15" fill="rgb(245,213,5)" fg:x="426" fg:w="1"/><text x="34.5772%" y="463.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="34.3272%" y="437" width="0.0806%" height="15" fill="rgb(230,144,27)" fg:x="426" fg:w="1"/><text x="34.5772%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="34.3272%" y="421" width="0.0806%" height="15" fill="rgb(220,86,6)" fg:x="426" fg:w="1"/><text x="34.5772%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.3272%" y="405" width="0.0806%" height="15" fill="rgb(240,20,13)" fg:x="426" fg:w="1"/><text x="34.5772%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="34.3272%" y="389" width="0.0806%" height="15" fill="rgb(217,89,34)" fg:x="426" fg:w="1"/><text x="34.5772%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="34.3272%" y="373" width="0.0806%" height="15" fill="rgb(229,13,5)" fg:x="426" fg:w="1"/><text x="34.5772%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="34.4883%" y="677" width="0.0806%" height="15" fill="rgb(244,67,35)" fg:x="428" fg:w="1"/><text x="34.7383%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.4883%" y="661" width="0.0806%" height="15" fill="rgb(221,40,2)" fg:x="428" fg:w="1"/><text x="34.7383%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.4883%" y="645" width="0.0806%" height="15" fill="rgb(237,157,21)" fg:x="428" fg:w="1"/><text x="34.7383%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::logs::SessionSubscriber&gt; (1 samples, 0.08%)</title><rect x="34.5689%" y="677" width="0.0806%" height="15" fill="rgb(222,94,11)" fg:x="429" fg:w="1"/><text x="34.8189%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="34.5689%" y="661" width="0.0806%" height="15" fill="rgb(249,113,6)" fg:x="429" fg:w="1"/><text x="34.8189%" y="671.50"></text></g><g><title>tracing_core::dispatcher::Dispatch::new (2 samples, 0.16%)</title><rect x="34.6495%" y="677" width="0.1612%" height="15" fill="rgb(238,137,36)" fg:x="430" fg:w="2"/><text x="34.8995%" y="687.50"></text></g><g><title>tracing_core::callsite::register_dispatch (1 samples, 0.08%)</title><rect x="34.7301%" y="661" width="0.0806%" height="15" fill="rgb(210,102,26)" fg:x="431" fg:w="1"/><text x="34.9801%" y="671.50"></text></g><g><title>tracing_core::callsite::dispatchers::Dispatchers::register_dispatch (1 samples, 0.08%)</title><rect x="34.7301%" y="645" width="0.0806%" height="15" fill="rgb(218,30,30)" fg:x="431" fg:w="1"/><text x="34.9801%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.08%)</title><rect x="34.7301%" y="629" width="0.0806%" height="15" fill="rgb(214,67,26)" fg:x="431" fg:w="1"/><text x="34.9801%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.8912%" y="549" width="0.1612%" height="15" fill="rgb(251,9,53)" fg:x="433" fg:w="2"/><text x="35.1412%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="34.8912%" y="533" width="0.1612%" height="15" fill="rgb(228,204,25)" fg:x="433" fg:w="2"/><text x="35.1412%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.9718%" y="517" width="0.0806%" height="15" fill="rgb(207,153,8)" fg:x="434" fg:w="1"/><text x="35.2218%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.9718%" y="501" width="0.0806%" height="15" fill="rgb(242,9,16)" fg:x="434" fg:w="1"/><text x="35.2218%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.9718%" y="485" width="0.0806%" height="15" fill="rgb(217,211,10)" fg:x="434" fg:w="1"/><text x="35.2218%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.9718%" y="469" width="0.0806%" height="15" fill="rgb(219,228,52)" fg:x="434" fg:w="1"/><text x="35.2218%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.9718%" y="453" width="0.0806%" height="15" fill="rgb(231,92,29)" fg:x="434" fg:w="1"/><text x="35.2218%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.9718%" y="437" width="0.0806%" height="15" fill="rgb(232,8,23)" fg:x="434" fg:w="1"/><text x="35.2218%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.9718%" y="421" width="0.0806%" height="15" fill="rgb(216,211,34)" fg:x="434" fg:w="1"/><text x="35.2218%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.9718%" y="405" width="0.0806%" height="15" fill="rgb(236,151,0)" fg:x="434" fg:w="1"/><text x="35.2218%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.9718%" y="389" width="0.0806%" height="15" fill="rgb(209,168,3)" fg:x="434" fg:w="1"/><text x="35.2218%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.9718%" y="373" width="0.0806%" height="15" fill="rgb(208,129,28)" fg:x="434" fg:w="1"/><text x="35.2218%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.9718%" y="357" width="0.0806%" height="15" fill="rgb(229,78,22)" fg:x="434" fg:w="1"/><text x="35.2218%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.9718%" y="341" width="0.0806%" height="15" fill="rgb(228,187,13)" fg:x="434" fg:w="1"/><text x="35.2218%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="34.8106%" y="565" width="0.3223%" height="15" fill="rgb(240,119,24)" fg:x="432" fg:w="4"/><text x="35.0606%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.0524%" y="549" width="0.0806%" height="15" fill="rgb(209,194,42)" fg:x="435" fg:w="1"/><text x="35.3024%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.0524%" y="533" width="0.0806%" height="15" fill="rgb(247,200,46)" fg:x="435" fg:w="1"/><text x="35.3024%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.1330%" y="453" width="0.0806%" height="15" fill="rgb(218,76,16)" fg:x="436" fg:w="1"/><text x="35.3830%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.1330%" y="437" width="0.0806%" height="15" fill="rgb(225,21,48)" fg:x="436" fg:w="1"/><text x="35.3830%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.1330%" y="485" width="0.1612%" height="15" fill="rgb(239,223,50)" fg:x="436" fg:w="2"/><text x="35.3830%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.1330%" y="469" width="0.1612%" height="15" fill="rgb(244,45,21)" fg:x="436" fg:w="2"/><text x="35.3830%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2135%" y="453" width="0.0806%" height="15" fill="rgb(232,33,43)" fg:x="437" fg:w="1"/><text x="35.4635%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2135%" y="437" width="0.0806%" height="15" fill="rgb(209,8,3)" fg:x="437" fg:w="1"/><text x="35.4635%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2135%" y="421" width="0.0806%" height="15" fill="rgb(214,25,53)" fg:x="437" fg:w="1"/><text x="35.4635%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.2135%" y="405" width="0.0806%" height="15" fill="rgb(254,186,54)" fg:x="437" fg:w="1"/><text x="35.4635%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="35.1330%" y="501" width="0.2417%" height="15" fill="rgb(208,174,49)" fg:x="436" fg:w="3"/><text x="35.3830%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2941%" y="485" width="0.0806%" height="15" fill="rgb(233,191,51)" fg:x="438" fg:w="1"/><text x="35.5441%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.2941%" y="469" width="0.0806%" height="15" fill="rgb(222,134,10)" fg:x="438" fg:w="1"/><text x="35.5441%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.2941%" y="453" width="0.0806%" height="15" fill="rgb(230,226,20)" fg:x="438" fg:w="1"/><text x="35.5441%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.2941%" y="437" width="0.0806%" height="15" fill="rgb(251,111,25)" fg:x="438" fg:w="1"/><text x="35.5441%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.2941%" y="421" width="0.0806%" height="15" fill="rgb(224,40,46)" fg:x="438" fg:w="1"/><text x="35.5441%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.2941%" y="405" width="0.0806%" height="15" fill="rgb(236,108,47)" fg:x="438" fg:w="1"/><text x="35.5441%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.2941%" y="389" width="0.0806%" height="15" fill="rgb(234,93,0)" fg:x="438" fg:w="1"/><text x="35.5441%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.2941%" y="373" width="0.0806%" height="15" fill="rgb(224,213,32)" fg:x="438" fg:w="1"/><text x="35.5441%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.2941%" y="357" width="0.0806%" height="15" fill="rgb(251,11,48)" fg:x="438" fg:w="1"/><text x="35.5441%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.2941%" y="341" width="0.0806%" height="15" fill="rgb(236,173,5)" fg:x="438" fg:w="1"/><text x="35.5441%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.2941%" y="325" width="0.0806%" height="15" fill="rgb(230,95,12)" fg:x="438" fg:w="1"/><text x="35.5441%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.2941%" y="309" width="0.0806%" height="15" fill="rgb(232,209,1)" fg:x="438" fg:w="1"/><text x="35.5441%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.3747%" y="485" width="0.0806%" height="15" fill="rgb(232,6,1)" fg:x="439" fg:w="1"/><text x="35.6247%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="35.3747%" y="469" width="0.0806%" height="15" fill="rgb(210,224,50)" fg:x="439" fg:w="1"/><text x="35.6247%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.3747%" y="453" width="0.0806%" height="15" fill="rgb(228,127,35)" fg:x="439" fg:w="1"/><text x="35.6247%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.3747%" y="437" width="0.0806%" height="15" fill="rgb(245,102,45)" fg:x="439" fg:w="1"/><text x="35.6247%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.3747%" y="421" width="0.0806%" height="15" fill="rgb(214,1,49)" fg:x="439" fg:w="1"/><text x="35.6247%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.3747%" y="405" width="0.0806%" height="15" fill="rgb(226,163,40)" fg:x="439" fg:w="1"/><text x="35.6247%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.3747%" y="389" width="0.0806%" height="15" fill="rgb(239,212,28)" fg:x="439" fg:w="1"/><text x="35.6247%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="35.3747%" y="373" width="0.0806%" height="15" fill="rgb(220,20,13)" fg:x="439" fg:w="1"/><text x="35.6247%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="35.3747%" y="357" width="0.0806%" height="15" fill="rgb(210,164,35)" fg:x="439" fg:w="1"/><text x="35.6247%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="35.3747%" y="501" width="0.1612%" height="15" fill="rgb(248,109,41)" fg:x="439" fg:w="2"/><text x="35.6247%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4553%" y="485" width="0.0806%" height="15" fill="rgb(238,23,50)" fg:x="440" fg:w="1"/><text x="35.7053%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="35.6164%" y="421" width="0.0806%" height="15" fill="rgb(211,48,49)" fg:x="442" fg:w="1"/><text x="35.8664%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="35.6164%" y="405" width="0.0806%" height="15" fill="rgb(223,36,21)" fg:x="442" fg:w="1"/><text x="35.8664%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.6164%" y="389" width="0.0806%" height="15" fill="rgb(207,123,46)" fg:x="442" fg:w="1"/><text x="35.8664%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.6970%" y="341" width="0.0806%" height="15" fill="rgb(240,218,32)" fg:x="443" fg:w="1"/><text x="35.9470%" y="351.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (13 samples, 1.05%)</title><rect x="34.8106%" y="597" width="1.0475%" height="15" fill="rgb(252,5,43)" fg:x="432" fg:w="13"/><text x="35.0606%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (13 samples, 1.05%)</title><rect x="34.8106%" y="581" width="1.0475%" height="15" fill="rgb(252,84,19)" fg:x="432" fg:w="13"/><text x="35.0606%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (9 samples, 0.73%)</title><rect x="35.1330%" y="565" width="0.7252%" height="15" fill="rgb(243,152,39)" fg:x="436" fg:w="9"/><text x="35.3830%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (9 samples, 0.73%)</title><rect x="35.1330%" y="549" width="0.7252%" height="15" fill="rgb(234,160,15)" fg:x="436" fg:w="9"/><text x="35.3830%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.73%)</title><rect x="35.1330%" y="533" width="0.7252%" height="15" fill="rgb(237,34,20)" fg:x="436" fg:w="9"/><text x="35.3830%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.73%)</title><rect x="35.1330%" y="517" width="0.7252%" height="15" fill="rgb(229,97,13)" fg:x="436" fg:w="9"/><text x="35.3830%" y="527.50"></text></g><g><title>kernel::model::entity::Entity::from_value (4 samples, 0.32%)</title><rect x="35.5359%" y="501" width="0.3223%" height="15" fill="rgb(234,71,50)" fg:x="441" fg:w="4"/><text x="35.7859%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="35.5359%" y="485" width="0.3223%" height="15" fill="rgb(253,155,4)" fg:x="441" fg:w="4"/><text x="35.7859%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.5359%" y="469" width="0.3223%" height="15" fill="rgb(222,185,37)" fg:x="441" fg:w="4"/><text x="35.7859%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="35.6164%" y="453" width="0.2417%" height="15" fill="rgb(251,177,13)" fg:x="442" fg:w="3"/><text x="35.8664%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.6164%" y="437" width="0.2417%" height="15" fill="rgb(250,179,40)" fg:x="442" fg:w="3"/><text x="35.8664%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="35.6970%" y="421" width="0.1612%" height="15" fill="rgb(242,44,2)" fg:x="443" fg:w="2"/><text x="35.9470%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="35.6970%" y="405" width="0.1612%" height="15" fill="rgb(216,177,13)" fg:x="443" fg:w="2"/><text x="35.9470%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.6970%" y="389" width="0.1612%" height="15" fill="rgb(216,106,43)" fg:x="443" fg:w="2"/><text x="35.9470%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="35.6970%" y="373" width="0.1612%" height="15" fill="rgb(216,183,2)" fg:x="443" fg:w="2"/><text x="35.9470%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="35.6970%" y="357" width="0.1612%" height="15" fill="rgb(249,75,3)" fg:x="443" fg:w="2"/><text x="35.9470%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="35.7776%" y="341" width="0.0806%" height="15" fill="rgb(219,67,39)" fg:x="444" fg:w="1"/><text x="36.0276%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="35.7776%" y="325" width="0.0806%" height="15" fill="rgb(253,228,2)" fg:x="444" fg:w="1"/><text x="36.0276%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="35.8582%" y="597" width="0.0806%" height="15" fill="rgb(235,138,27)" fg:x="445" fg:w="1"/><text x="36.1082%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.0999%" y="389" width="0.0806%" height="15" fill="rgb(236,97,51)" fg:x="448" fg:w="1"/><text x="36.3499%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.2611%" y="357" width="0.0806%" height="15" fill="rgb(240,80,30)" fg:x="450" fg:w="1"/><text x="36.5111%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="36.3417%" y="357" width="0.0806%" height="15" fill="rgb(230,178,19)" fg:x="451" fg:w="1"/><text x="36.5917%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="36.3417%" y="341" width="0.0806%" height="15" fill="rgb(210,190,27)" fg:x="451" fg:w="1"/><text x="36.5917%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.3417%" y="325" width="0.0806%" height="15" fill="rgb(222,107,31)" fg:x="451" fg:w="1"/><text x="36.5917%" y="335.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="36.4222%" y="341" width="0.0806%" height="15" fill="rgb(216,127,34)" fg:x="452" fg:w="1"/><text x="36.6722%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.5028%" y="309" width="0.0806%" height="15" fill="rgb(234,116,52)" fg:x="453" fg:w="1"/><text x="36.7528%" y="319.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="36.5028%" y="341" width="0.1612%" height="15" fill="rgb(222,124,15)" fg:x="453" fg:w="2"/><text x="36.7528%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.5028%" y="325" width="0.1612%" height="15" fill="rgb(231,179,28)" fg:x="453" fg:w="2"/><text x="36.7528%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.5834%" y="309" width="0.0806%" height="15" fill="rgb(226,93,45)" fg:x="454" fg:w="1"/><text x="36.8334%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.5834%" y="293" width="0.0806%" height="15" fill="rgb(215,8,51)" fg:x="454" fg:w="1"/><text x="36.8334%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="36.5834%" y="277" width="0.0806%" height="15" fill="rgb(223,106,5)" fg:x="454" fg:w="1"/><text x="36.8334%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.6640%" y="309" width="0.0806%" height="15" fill="rgb(250,191,5)" fg:x="455" fg:w="1"/><text x="36.9140%" y="319.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.7446%" y="309" width="0.1612%" height="15" fill="rgb(242,132,44)" fg:x="456" fg:w="2"/><text x="36.9946%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.8251%" y="293" width="0.0806%" height="15" fill="rgb(251,152,29)" fg:x="457" fg:w="1"/><text x="37.0751%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.8251%" y="277" width="0.0806%" height="15" fill="rgb(218,179,5)" fg:x="457" fg:w="1"/><text x="37.0751%" y="287.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (11 samples, 0.89%)</title><rect x="36.1805%" y="389" width="0.8864%" height="15" fill="rgb(227,67,19)" fg:x="449" fg:w="11"/><text x="36.4305%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 0.81%)</title><rect x="36.2611%" y="373" width="0.8058%" height="15" fill="rgb(233,119,31)" fg:x="450" fg:w="10"/><text x="36.5111%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (8 samples, 0.64%)</title><rect x="36.4222%" y="357" width="0.6446%" height="15" fill="rgb(241,120,22)" fg:x="452" fg:w="8"/><text x="36.6722%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedRoute&gt;::serialize (5 samples, 0.40%)</title><rect x="36.6640%" y="341" width="0.4029%" height="15" fill="rgb(224,102,30)" fg:x="455" fg:w="5"/><text x="36.9140%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeStructVariant as serde::ser::SerializeStructVariant&gt;::serialize_field (5 samples, 0.40%)</title><rect x="36.6640%" y="325" width="0.4029%" height="15" fill="rgb(210,164,37)" fg:x="455" fg:w="5"/><text x="36.9140%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (2 samples, 0.16%)</title><rect x="36.9057%" y="309" width="0.1612%" height="15" fill="rgb(226,191,16)" fg:x="458" fg:w="2"/><text x="37.1557%" y="319.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="36.9057%" y="293" width="0.1612%" height="15" fill="rgb(214,40,45)" fg:x="458" fg:w="2"/><text x="37.1557%" y="303.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.9863%" y="277" width="0.0806%" height="15" fill="rgb(244,29,26)" fg:x="459" fg:w="1"/><text x="37.2363%" y="287.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.9863%" y="261" width="0.0806%" height="15" fill="rgb(216,16,5)" fg:x="459" fg:w="1"/><text x="37.2363%" y="271.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="36.9863%" y="245" width="0.0806%" height="15" fill="rgb(249,76,35)" fg:x="459" fg:w="1"/><text x="37.2363%" y="255.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (14 samples, 1.13%)</title><rect x="36.0193%" y="405" width="1.1281%" height="15" fill="rgb(207,11,44)" fg:x="447" fg:w="14"/><text x="36.2693%" y="415.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="37.0669%" y="389" width="0.0806%" height="15" fill="rgb(228,190,49)" fg:x="460" fg:w="1"/><text x="37.3169%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="37.0669%" y="373" width="0.0806%" height="15" fill="rgb(214,173,12)" fg:x="460" fg:w="1"/><text x="37.3169%" y="383.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (16 samples, 1.29%)</title><rect x="36.0193%" y="421" width="1.2893%" height="15" fill="rgb(218,26,35)" fg:x="447" fg:w="16"/><text x="36.2693%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (2 samples, 0.16%)</title><rect x="37.1475%" y="405" width="0.1612%" height="15" fill="rgb(220,200,19)" fg:x="461" fg:w="2"/><text x="37.3975%" y="415.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.6309%" y="309" width="0.0806%" height="15" fill="rgb(239,95,49)" fg:x="467" fg:w="1"/><text x="37.8809%" y="319.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="37.6309%" y="389" width="0.2417%" height="15" fill="rgb(235,85,53)" fg:x="467" fg:w="3"/><text x="37.8809%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="37.6309%" y="373" width="0.2417%" height="15" fill="rgb(233,133,31)" fg:x="467" fg:w="3"/><text x="37.8809%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.6309%" y="357" width="0.2417%" height="15" fill="rgb(218,25,20)" fg:x="467" fg:w="3"/><text x="37.8809%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="37.6309%" y="341" width="0.2417%" height="15" fill="rgb(252,210,38)" fg:x="467" fg:w="3"/><text x="37.8809%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="37.6309%" y="325" width="0.2417%" height="15" fill="rgb(242,134,21)" fg:x="467" fg:w="3"/><text x="37.8809%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="37.7115%" y="309" width="0.1612%" height="15" fill="rgb(213,28,48)" fg:x="468" fg:w="2"/><text x="37.9615%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.7921%" y="293" width="0.0806%" height="15" fill="rgb(250,196,2)" fg:x="469" fg:w="1"/><text x="38.0421%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="37.7921%" y="277" width="0.0806%" height="15" fill="rgb(227,5,17)" fg:x="469" fg:w="1"/><text x="38.0421%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="37.7921%" y="261" width="0.0806%" height="15" fill="rgb(221,226,24)" fg:x="469" fg:w="1"/><text x="38.0421%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.8727%" y="357" width="0.0806%" height="15" fill="rgb(211,5,48)" fg:x="470" fg:w="1"/><text x="38.1227%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.8727%" y="341" width="0.0806%" height="15" fill="rgb(219,150,6)" fg:x="470" fg:w="1"/><text x="38.1227%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="37.8727%" y="325" width="0.0806%" height="15" fill="rgb(251,46,16)" fg:x="470" fg:w="1"/><text x="38.1227%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="37.9533%" y="357" width="0.1612%" height="15" fill="rgb(220,204,40)" fg:x="471" fg:w="2"/><text x="38.2033%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.0338%" y="341" width="0.0806%" height="15" fill="rgb(211,85,2)" fg:x="472" fg:w="1"/><text x="38.2838%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.0338%" y="325" width="0.0806%" height="15" fill="rgb(229,17,7)" fg:x="472" fg:w="1"/><text x="38.2838%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.0338%" y="309" width="0.0806%" height="15" fill="rgb(239,72,28)" fg:x="472" fg:w="1"/><text x="38.2838%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.0338%" y="293" width="0.0806%" height="15" fill="rgb(230,47,54)" fg:x="472" fg:w="1"/><text x="38.2838%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.0338%" y="277" width="0.0806%" height="15" fill="rgb(214,50,8)" fg:x="472" fg:w="1"/><text x="38.2838%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="38.0338%" y="261" width="0.0806%" height="15" fill="rgb(216,198,43)" fg:x="472" fg:w="1"/><text x="38.2838%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="38.0338%" y="245" width="0.0806%" height="15" fill="rgb(234,20,35)" fg:x="472" fg:w="1"/><text x="38.2838%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="38.4367%" y="293" width="0.0806%" height="15" fill="rgb(254,45,19)" fg:x="477" fg:w="1"/><text x="38.6867%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="38.4367%" y="277" width="0.0806%" height="15" fill="rgb(219,14,44)" fg:x="477" fg:w="1"/><text x="38.6867%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (12 samples, 0.97%)</title><rect x="37.8727%" y="389" width="0.9670%" height="15" fill="rgb(217,220,26)" fg:x="470" fg:w="12"/><text x="38.1227%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (12 samples, 0.97%)</title><rect x="37.8727%" y="373" width="0.9670%" height="15" fill="rgb(213,158,28)" fg:x="470" fg:w="12"/><text x="38.1227%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (9 samples, 0.73%)</title><rect x="38.1144%" y="357" width="0.7252%" height="15" fill="rgb(252,51,52)" fg:x="473" fg:w="9"/><text x="38.3644%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (9 samples, 0.73%)</title><rect x="38.1144%" y="341" width="0.7252%" height="15" fill="rgb(246,89,16)" fg:x="473" fg:w="9"/><text x="38.3644%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="38.3562%" y="325" width="0.4835%" height="15" fill="rgb(216,158,49)" fg:x="476" fg:w="6"/><text x="38.6062%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="38.4367%" y="309" width="0.4029%" height="15" fill="rgb(236,107,19)" fg:x="477" fg:w="5"/><text x="38.6867%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="38.5173%" y="293" width="0.3223%" height="15" fill="rgb(228,185,30)" fg:x="478" fg:w="4"/><text x="38.7673%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="38.5979%" y="277" width="0.2417%" height="15" fill="rgb(246,134,8)" fg:x="479" fg:w="3"/><text x="38.8479%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="38.7591%" y="261" width="0.0806%" height="15" fill="rgb(214,143,50)" fg:x="481" fg:w="1"/><text x="39.0091%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.8396%" y="357" width="0.0806%" height="15" fill="rgb(228,75,8)" fg:x="482" fg:w="1"/><text x="39.0896%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="38.8396%" y="341" width="0.0806%" height="15" fill="rgb(207,175,4)" fg:x="482" fg:w="1"/><text x="39.0896%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.8396%" y="325" width="0.0806%" height="15" fill="rgb(205,108,24)" fg:x="482" fg:w="1"/><text x="39.0896%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="38.8396%" y="309" width="0.0806%" height="15" fill="rgb(244,120,49)" fg:x="482" fg:w="1"/><text x="39.0896%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="38.8396%" y="293" width="0.0806%" height="15" fill="rgb(223,47,38)" fg:x="482" fg:w="1"/><text x="39.0896%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="38.8396%" y="277" width="0.0806%" height="15" fill="rgb(229,179,11)" fg:x="482" fg:w="1"/><text x="39.0896%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="38.8396%" y="261" width="0.0806%" height="15" fill="rgb(231,122,1)" fg:x="482" fg:w="1"/><text x="39.0896%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.8396%" y="245" width="0.0806%" height="15" fill="rgb(245,119,9)" fg:x="482" fg:w="1"/><text x="39.0896%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="38.8396%" y="229" width="0.0806%" height="15" fill="rgb(241,163,25)" fg:x="482" fg:w="1"/><text x="39.0896%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="38.8396%" y="213" width="0.0806%" height="15" fill="rgb(217,214,3)" fg:x="482" fg:w="1"/><text x="39.0896%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="38.8396%" y="197" width="0.0806%" height="15" fill="rgb(240,86,28)" fg:x="482" fg:w="1"/><text x="39.0896%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="38.8396%" y="181" width="0.0806%" height="15" fill="rgb(215,47,9)" fg:x="482" fg:w="1"/><text x="39.0896%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="38.8396%" y="165" width="0.0806%" height="15" fill="rgb(252,25,45)" fg:x="482" fg:w="1"/><text x="39.0896%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="38.9202%" y="357" width="0.0806%" height="15" fill="rgb(251,164,9)" fg:x="483" fg:w="1"/><text x="39.1702%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="38.8396%" y="373" width="0.3223%" height="15" fill="rgb(233,194,0)" fg:x="482" fg:w="4"/><text x="39.0896%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="39.0008%" y="357" width="0.1612%" height="15" fill="rgb(249,111,24)" fg:x="484" fg:w="2"/><text x="39.2508%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="39.0008%" y="341" width="0.1612%" height="15" fill="rgb(250,223,3)" fg:x="484" fg:w="2"/><text x="39.2508%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="39.0008%" y="325" width="0.1612%" height="15" fill="rgb(236,178,37)" fg:x="484" fg:w="2"/><text x="39.2508%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="39.0008%" y="309" width="0.1612%" height="15" fill="rgb(241,158,50)" fg:x="484" fg:w="2"/><text x="39.2508%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="39.0814%" y="293" width="0.0806%" height="15" fill="rgb(213,121,41)" fg:x="485" fg:w="1"/><text x="39.3314%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="39.0814%" y="277" width="0.0806%" height="15" fill="rgb(240,92,3)" fg:x="485" fg:w="1"/><text x="39.3314%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.0814%" y="261" width="0.0806%" height="15" fill="rgb(205,123,3)" fg:x="485" fg:w="1"/><text x="39.3314%" y="271.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (5 samples, 0.40%)</title><rect x="38.8396%" y="389" width="0.4029%" height="15" fill="rgb(205,97,47)" fg:x="482" fg:w="5"/><text x="39.0896%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="39.1620%" y="373" width="0.0806%" height="15" fill="rgb(247,152,14)" fg:x="486" fg:w="1"/><text x="39.4120%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.1620%" y="357" width="0.0806%" height="15" fill="rgb(248,195,53)" fg:x="486" fg:w="1"/><text x="39.4120%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="39.3231%" y="325" width="0.1612%" height="15" fill="rgb(226,201,16)" fg:x="488" fg:w="2"/><text x="39.5731%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="39.3231%" y="309" width="0.1612%" height="15" fill="rgb(205,98,0)" fg:x="488" fg:w="2"/><text x="39.5731%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="39.3231%" y="293" width="0.1612%" height="15" fill="rgb(214,191,48)" fg:x="488" fg:w="2"/><text x="39.5731%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="39.3231%" y="277" width="0.1612%" height="15" fill="rgb(237,112,39)" fg:x="488" fg:w="2"/><text x="39.5731%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="39.3231%" y="261" width="0.1612%" height="15" fill="rgb(247,203,27)" fg:x="488" fg:w="2"/><text x="39.5731%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="39.3231%" y="245" width="0.1612%" height="15" fill="rgb(235,124,28)" fg:x="488" fg:w="2"/><text x="39.5731%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.16%)</title><rect x="39.3231%" y="229" width="0.1612%" height="15" fill="rgb(208,207,46)" fg:x="488" fg:w="2"/><text x="39.5731%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="39.3231%" y="213" width="0.1612%" height="15" fill="rgb(234,176,4)" fg:x="488" fg:w="2"/><text x="39.5731%" y="223.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="39.3231%" y="357" width="0.2417%" height="15" fill="rgb(230,133,28)" fg:x="488" fg:w="3"/><text x="39.5731%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="39.3231%" y="341" width="0.2417%" height="15" fill="rgb(211,137,40)" fg:x="488" fg:w="3"/><text x="39.5731%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.4843%" y="325" width="0.0806%" height="15" fill="rgb(254,35,13)" fg:x="490" fg:w="1"/><text x="39.7343%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.4843%" y="309" width="0.0806%" height="15" fill="rgb(225,49,51)" fg:x="490" fg:w="1"/><text x="39.7343%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="39.4843%" y="293" width="0.0806%" height="15" fill="rgb(251,10,15)" fg:x="490" fg:w="1"/><text x="39.7343%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="39.4843%" y="277" width="0.0806%" height="15" fill="rgb(228,207,15)" fg:x="490" fg:w="1"/><text x="39.7343%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="39.4843%" y="261" width="0.0806%" height="15" fill="rgb(241,99,19)" fg:x="490" fg:w="1"/><text x="39.7343%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="39.4843%" y="245" width="0.0806%" height="15" fill="rgb(207,104,49)" fg:x="490" fg:w="1"/><text x="39.7343%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="39.4843%" y="229" width="0.0806%" height="15" fill="rgb(234,99,18)" fg:x="490" fg:w="1"/><text x="39.7343%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.5649%" y="341" width="0.0806%" height="15" fill="rgb(213,191,49)" fg:x="491" fg:w="1"/><text x="39.8149%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="39.5649%" y="325" width="0.0806%" height="15" fill="rgb(210,226,19)" fg:x="491" fg:w="1"/><text x="39.8149%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="39.5649%" y="309" width="0.0806%" height="15" fill="rgb(229,97,18)" fg:x="491" fg:w="1"/><text x="39.8149%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="39.5649%" y="293" width="0.0806%" height="15" fill="rgb(211,167,15)" fg:x="491" fg:w="1"/><text x="39.8149%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="39.5649%" y="277" width="0.0806%" height="15" fill="rgb(210,169,34)" fg:x="491" fg:w="1"/><text x="39.8149%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.5649%" y="261" width="0.0806%" height="15" fill="rgb(241,121,31)" fg:x="491" fg:w="1"/><text x="39.8149%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="39.5649%" y="245" width="0.0806%" height="15" fill="rgb(232,40,11)" fg:x="491" fg:w="1"/><text x="39.8149%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="39.5649%" y="229" width="0.0806%" height="15" fill="rgb(205,86,26)" fg:x="491" fg:w="1"/><text x="39.8149%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="39.5649%" y="213" width="0.0806%" height="15" fill="rgb(231,126,28)" fg:x="491" fg:w="1"/><text x="39.8149%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="39.5649%" y="197" width="0.0806%" height="15" fill="rgb(219,221,18)" fg:x="491" fg:w="1"/><text x="39.8149%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="39.5649%" y="181" width="0.0806%" height="15" fill="rgb(211,40,0)" fg:x="491" fg:w="1"/><text x="39.8149%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.5649%" y="165" width="0.0806%" height="15" fill="rgb(239,85,43)" fg:x="491" fg:w="1"/><text x="39.8149%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="39.5649%" y="357" width="0.1612%" height="15" fill="rgb(231,55,21)" fg:x="491" fg:w="2"/><text x="39.8149%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.6454%" y="341" width="0.0806%" height="15" fill="rgb(225,184,43)" fg:x="492" fg:w="1"/><text x="39.8954%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="39.7260%" y="357" width="0.0806%" height="15" fill="rgb(251,158,41)" fg:x="493" fg:w="1"/><text x="39.9760%" y="367.50"></text></g><g><title>kernel::model::EntityPtr::gid (12 samples, 0.97%)</title><rect x="39.2425%" y="389" width="0.9670%" height="15" fill="rgb(234,159,37)" fg:x="487" fg:w="12"/><text x="39.4925%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (12 samples, 0.97%)</title><rect x="39.2425%" y="373" width="0.9670%" height="15" fill="rgb(216,204,22)" fg:x="487" fg:w="12"/><text x="39.4925%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="39.8066%" y="357" width="0.4029%" height="15" fill="rgb(214,17,3)" fg:x="494" fg:w="5"/><text x="40.0566%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="39.8066%" y="341" width="0.4029%" height="15" fill="rgb(212,111,17)" fg:x="494" fg:w="5"/><text x="40.0566%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="39.8872%" y="325" width="0.3223%" height="15" fill="rgb(221,157,24)" fg:x="495" fg:w="4"/><text x="40.1372%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="39.8872%" y="309" width="0.3223%" height="15" fill="rgb(252,16,13)" fg:x="495" fg:w="4"/><text x="40.1372%" y="319.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="40.1289%" y="293" width="0.0806%" height="15" fill="rgb(221,62,2)" fg:x="498" fg:w="1"/><text x="40.3789%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.2095%" y="373" width="0.0806%" height="15" fill="rgb(247,87,22)" fg:x="499" fg:w="1"/><text x="40.4595%" y="383.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="40.3707%" y="325" width="0.0806%" height="15" fill="rgb(215,73,9)" fg:x="501" fg:w="1"/><text x="40.6207%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="40.5318%" y="245" width="0.0806%" height="15" fill="rgb(207,175,33)" fg:x="503" fg:w="1"/><text x="40.7818%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="40.5318%" y="229" width="0.0806%" height="15" fill="rgb(243,129,54)" fg:x="503" fg:w="1"/><text x="40.7818%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="40.4512%" y="309" width="0.2417%" height="15" fill="rgb(227,119,45)" fg:x="502" fg:w="3"/><text x="40.7012%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="40.4512%" y="293" width="0.2417%" height="15" fill="rgb(205,109,36)" fg:x="502" fg:w="3"/><text x="40.7012%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="40.4512%" y="277" width="0.2417%" height="15" fill="rgb(205,6,39)" fg:x="502" fg:w="3"/><text x="40.7012%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="40.4512%" y="261" width="0.2417%" height="15" fill="rgb(221,32,16)" fg:x="502" fg:w="3"/><text x="40.7012%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="40.6124%" y="245" width="0.0806%" height="15" fill="rgb(228,144,50)" fg:x="504" fg:w="1"/><text x="40.8624%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="40.6124%" y="229" width="0.0806%" height="15" fill="rgb(229,201,53)" fg:x="504" fg:w="1"/><text x="40.8624%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.6124%" y="213" width="0.0806%" height="15" fill="rgb(249,153,27)" fg:x="504" fg:w="1"/><text x="40.8624%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="40.7736%" y="261" width="0.1612%" height="15" fill="rgb(227,106,25)" fg:x="506" fg:w="2"/><text x="41.0236%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.7736%" y="245" width="0.1612%" height="15" fill="rgb(230,65,29)" fg:x="506" fg:w="2"/><text x="41.0236%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="40.7736%" y="229" width="0.1612%" height="15" fill="rgb(221,57,46)" fg:x="506" fg:w="2"/><text x="41.0236%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="40.9347%" y="261" width="0.0806%" height="15" fill="rgb(229,161,17)" fg:x="508" fg:w="1"/><text x="41.1847%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="41.0153%" y="229" width="0.0806%" height="15" fill="rgb(222,213,11)" fg:x="509" fg:w="1"/><text x="41.2653%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.13%)</title><rect x="41.0153%" y="245" width="1.1281%" height="15" fill="rgb(235,35,13)" fg:x="509" fg:w="14"/><text x="41.2653%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.05%)</title><rect x="41.0959%" y="229" width="1.0475%" height="15" fill="rgb(233,158,34)" fg:x="510" fg:w="13"/><text x="41.3459%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="42.1434%" y="229" width="0.1612%" height="15" fill="rgb(215,151,48)" fg:x="523" fg:w="2"/><text x="42.3934%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="42.1434%" y="245" width="0.2417%" height="15" fill="rgb(229,84,14)" fg:x="523" fg:w="3"/><text x="42.3934%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.3046%" y="229" width="0.0806%" height="15" fill="rgb(229,68,14)" fg:x="525" fg:w="1"/><text x="42.5546%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="42.3046%" y="213" width="0.0806%" height="15" fill="rgb(243,106,26)" fg:x="525" fg:w="1"/><text x="42.5546%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="42.3046%" y="197" width="0.0806%" height="15" fill="rgb(206,45,38)" fg:x="525" fg:w="1"/><text x="42.5546%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="42.3852%" y="229" width="0.0806%" height="15" fill="rgb(226,6,15)" fg:x="526" fg:w="1"/><text x="42.6352%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="42.3852%" y="213" width="0.0806%" height="15" fill="rgb(232,22,54)" fg:x="526" fg:w="1"/><text x="42.6352%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="42.3852%" y="245" width="0.1612%" height="15" fill="rgb(229,222,32)" fg:x="526" fg:w="2"/><text x="42.6352%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="42.4658%" y="229" width="0.0806%" height="15" fill="rgb(228,62,29)" fg:x="527" fg:w="1"/><text x="42.7158%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="42.4658%" y="213" width="0.0806%" height="15" fill="rgb(251,103,34)" fg:x="527" fg:w="1"/><text x="42.7158%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="42.4658%" y="197" width="0.0806%" height="15" fill="rgb(233,12,30)" fg:x="527" fg:w="1"/><text x="42.7158%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.4658%" y="181" width="0.0806%" height="15" fill="rgb(238,52,0)" fg:x="527" fg:w="1"/><text x="42.7158%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.4658%" y="165" width="0.0806%" height="15" fill="rgb(223,98,5)" fg:x="527" fg:w="1"/><text x="42.7158%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="42.6269%" y="213" width="0.0806%" height="15" fill="rgb(228,75,37)" fg:x="529" fg:w="1"/><text x="42.8769%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="42.6269%" y="197" width="0.0806%" height="15" fill="rgb(205,115,49)" fg:x="529" fg:w="1"/><text x="42.8769%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.7881%" y="181" width="0.1612%" height="15" fill="rgb(250,154,43)" fg:x="531" fg:w="2"/><text x="43.0381%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="42.9492%" y="181" width="0.2417%" height="15" fill="rgb(226,43,29)" fg:x="533" fg:w="3"/><text x="43.1992%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="43.1910%" y="181" width="0.1612%" height="15" fill="rgb(249,228,39)" fg:x="536" fg:w="2"/><text x="43.4410%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="43.1910%" y="165" width="0.1612%" height="15" fill="rgb(216,79,43)" fg:x="536" fg:w="2"/><text x="43.4410%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.1910%" y="149" width="0.1612%" height="15" fill="rgb(228,95,12)" fg:x="536" fg:w="2"/><text x="43.4410%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.1910%" y="133" width="0.1612%" height="15" fill="rgb(249,221,15)" fg:x="536" fg:w="2"/><text x="43.4410%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="43.1910%" y="117" width="0.1612%" height="15" fill="rgb(233,34,13)" fg:x="536" fg:w="2"/><text x="43.4410%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (51 samples, 4.11%)</title><rect x="43.3521%" y="181" width="4.1096%" height="15" fill="rgb(214,103,39)" fg:x="538" fg:w="51"/><text x="43.6021%" y="191.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (51 samples, 4.11%)</title><rect x="43.3521%" y="165" width="4.1096%" height="15" fill="rgb(251,126,39)" fg:x="538" fg:w="51"/><text x="43.6021%" y="175.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (51 samples, 4.11%)</title><rect x="43.3521%" y="149" width="4.1096%" height="15" fill="rgb(214,216,36)" fg:x="538" fg:w="51"/><text x="43.6021%" y="159.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="47.4617%" y="181" width="0.1612%" height="15" fill="rgb(220,221,8)" fg:x="589" fg:w="2"/><text x="47.7117%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (63 samples, 5.08%)</title><rect x="42.6269%" y="229" width="5.0766%" height="15" fill="rgb(240,216,3)" fg:x="529" fg:w="63"/><text x="42.8769%" y="239.50">&lt;core:..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (62 samples, 5.00%)</title><rect x="42.7075%" y="213" width="4.9960%" height="15" fill="rgb(232,218,17)" fg:x="530" fg:w="62"/><text x="42.9575%" y="223.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (62 samples, 5.00%)</title><rect x="42.7075%" y="197" width="4.9960%" height="15" fill="rgb(229,163,45)" fg:x="530" fg:w="62"/><text x="42.9575%" y="207.50">regex_..</text></g><g><title>regex_syntax::hir::ClassUnicodeRange::start (1 samples, 0.08%)</title><rect x="47.6229%" y="181" width="0.0806%" height="15" fill="rgb(231,110,42)" fg:x="591" fg:w="1"/><text x="47.8729%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (6 samples, 0.48%)</title><rect x="47.8646%" y="213" width="0.4835%" height="15" fill="rgb(208,170,48)" fg:x="594" fg:w="6"/><text x="48.1146%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="48.1869%" y="197" width="0.1612%" height="15" fill="rgb(239,116,25)" fg:x="598" fg:w="2"/><text x="48.4369%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.2675%" y="181" width="0.0806%" height="15" fill="rgb(219,200,50)" fg:x="599" fg:w="1"/><text x="48.5175%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="48.2675%" y="165" width="0.0806%" height="15" fill="rgb(245,200,0)" fg:x="599" fg:w="1"/><text x="48.5175%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (6 samples, 0.48%)</title><rect x="48.3481%" y="213" width="0.4835%" height="15" fill="rgb(245,119,33)" fg:x="600" fg:w="6"/><text x="48.5981%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="48.7510%" y="197" width="0.0806%" height="15" fill="rgb(231,125,12)" fg:x="605" fg:w="1"/><text x="49.0010%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (79 samples, 6.37%)</title><rect x="42.5463%" y="245" width="6.3658%" height="15" fill="rgb(216,96,41)" fg:x="528" fg:w="79"/><text x="42.7963%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.21%)</title><rect x="47.7035%" y="229" width="1.2087%" height="15" fill="rgb(248,43,45)" fg:x="592" fg:w="15"/><text x="47.9535%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="48.8316%" y="213" width="0.0806%" height="15" fill="rgb(217,222,7)" fg:x="606" fg:w="1"/><text x="49.0816%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (99 samples, 7.98%)</title><rect x="41.0153%" y="261" width="7.9774%" height="15" fill="rgb(233,28,6)" fg:x="509" fg:w="99"/><text x="41.2653%" y="271.50">regex_autom..</text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="48.9122%" y="245" width="0.0806%" height="15" fill="rgb(231,218,15)" fg:x="607" fg:w="1"/><text x="49.1622%" y="255.50"></text></g><g><title>regex_syntax::hir::literal::Seq::optimize_by_preference (1 samples, 0.08%)</title><rect x="48.9122%" y="229" width="0.0806%" height="15" fill="rgb(226,171,48)" fg:x="607" fg:w="1"/><text x="49.1622%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="49.1539%" y="213" width="0.0806%" height="15" fill="rgb(235,201,9)" fg:x="610" fg:w="1"/><text x="49.4039%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump (1 samples, 0.08%)</title><rect x="49.1539%" y="197" width="0.0806%" height="15" fill="rgb(217,80,15)" fg:x="610" fg:w="1"/><text x="49.4039%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="49.0733%" y="229" width="0.2417%" height="15" fill="rgb(219,152,8)" fg:x="609" fg:w="3"/><text x="49.3233%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="49.2345%" y="213" width="0.0806%" height="15" fill="rgb(243,107,38)" fg:x="611" fg:w="1"/><text x="49.4845%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2345%" y="197" width="0.0806%" height="15" fill="rgb(231,17,5)" fg:x="611" fg:w="1"/><text x="49.4845%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2345%" y="181" width="0.0806%" height="15" fill="rgb(209,25,54)" fg:x="611" fg:w="1"/><text x="49.4845%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.2345%" y="165" width="0.0806%" height="15" fill="rgb(219,0,2)" fg:x="611" fg:w="1"/><text x="49.4845%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="48.9927%" y="261" width="0.4029%" height="15" fill="rgb(246,9,5)" fg:x="608" fg:w="5"/><text x="49.2427%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="49.0733%" y="245" width="0.3223%" height="15" fill="rgb(226,159,4)" fg:x="609" fg:w="4"/><text x="49.3233%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="49.3151%" y="229" width="0.0806%" height="15" fill="rgb(219,175,34)" fg:x="612" fg:w="1"/><text x="49.5651%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="49.3151%" y="213" width="0.0806%" height="15" fill="rgb(236,10,46)" fg:x="612" fg:w="1"/><text x="49.5651%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="49.4762%" y="229" width="0.0806%" height="15" fill="rgb(240,211,16)" fg:x="614" fg:w="1"/><text x="49.7262%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::case_fold_simple (1 samples, 0.08%)</title><rect x="49.4762%" y="213" width="0.0806%" height="15" fill="rgb(205,3,43)" fg:x="614" fg:w="1"/><text x="49.7262%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (111 samples, 8.94%)</title><rect x="40.6930%" y="309" width="8.9444%" height="15" fill="rgb(245,7,22)" fg:x="505" fg:w="111"/><text x="40.9430%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (111 samples, 8.94%)</title><rect x="40.6930%" y="293" width="8.9444%" height="15" fill="rgb(239,132,32)" fg:x="505" fg:w="111"/><text x="40.9430%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (111 samples, 8.94%)</title><rect x="40.6930%" y="277" width="8.9444%" height="15" fill="rgb(228,202,34)" fg:x="505" fg:w="111"/><text x="40.9430%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (3 samples, 0.24%)</title><rect x="49.3956%" y="261" width="0.2417%" height="15" fill="rgb(254,200,22)" fg:x="613" fg:w="3"/><text x="49.6456%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="49.4762%" y="245" width="0.1612%" height="15" fill="rgb(219,10,39)" fg:x="614" fg:w="2"/><text x="49.7262%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="49.5568%" y="229" width="0.0806%" height="15" fill="rgb(226,210,39)" fg:x="615" fg:w="1"/><text x="49.8068%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.6374%" y="309" width="0.0806%" height="15" fill="rgb(208,219,16)" fg:x="616" fg:w="1"/><text x="49.8874%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.7985%" y="277" width="0.0806%" height="15" fill="rgb(216,158,51)" fg:x="618" fg:w="1"/><text x="50.0485%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="49.7985%" y="261" width="0.0806%" height="15" fill="rgb(233,14,44)" fg:x="618" fg:w="1"/><text x="50.0485%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="49.7985%" y="245" width="0.0806%" height="15" fill="rgb(237,97,39)" fg:x="618" fg:w="1"/><text x="50.0485%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.7985%" y="229" width="0.0806%" height="15" fill="rgb(218,198,43)" fg:x="618" fg:w="1"/><text x="50.0485%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.7985%" y="213" width="0.0806%" height="15" fill="rgb(231,104,20)" fg:x="618" fg:w="1"/><text x="50.0485%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="49.8791%" y="261" width="0.1612%" height="15" fill="rgb(254,36,13)" fg:x="619" fg:w="2"/><text x="50.1291%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.9597%" y="245" width="0.0806%" height="15" fill="rgb(248,14,50)" fg:x="620" fg:w="1"/><text x="50.2097%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="50.0403%" y="261" width="0.1612%" height="15" fill="rgb(217,107,29)" fg:x="621" fg:w="2"/><text x="50.2903%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="50.0403%" y="245" width="0.1612%" height="15" fill="rgb(251,169,33)" fg:x="621" fg:w="2"/><text x="50.2903%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (7 samples, 0.56%)</title><rect x="49.7180%" y="309" width="0.5641%" height="15" fill="rgb(217,108,32)" fg:x="617" fg:w="7"/><text x="49.9680%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (7 samples, 0.56%)</title><rect x="49.7180%" y="293" width="0.5641%" height="15" fill="rgb(219,66,42)" fg:x="617" fg:w="7"/><text x="49.9680%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (5 samples, 0.40%)</title><rect x="49.8791%" y="277" width="0.4029%" height="15" fill="rgb(206,180,7)" fg:x="619" fg:w="5"/><text x="50.1291%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::PikeVMCache&gt; (1 samples, 0.08%)</title><rect x="50.2015%" y="261" width="0.0806%" height="15" fill="rgb(208,226,31)" fg:x="623" fg:w="1"/><text x="50.4515%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.2015%" y="245" width="0.0806%" height="15" fill="rgb(218,26,49)" fg:x="623" fg:w="1"/><text x="50.4515%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="50.4432%" y="229" width="0.0806%" height="15" fill="rgb(233,197,48)" fg:x="626" fg:w="1"/><text x="50.6932%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.4432%" y="213" width="0.0806%" height="15" fill="rgb(252,181,51)" fg:x="626" fg:w="1"/><text x="50.6932%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.4432%" y="197" width="0.0806%" height="15" fill="rgb(253,90,19)" fg:x="626" fg:w="1"/><text x="50.6932%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="50.5238%" y="229" width="0.0806%" height="15" fill="rgb(215,171,30)" fg:x="627" fg:w="1"/><text x="50.7738%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="50.5238%" y="213" width="0.0806%" height="15" fill="rgb(214,222,9)" fg:x="627" fg:w="1"/><text x="50.7738%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (5 samples, 0.40%)</title><rect x="50.2820%" y="261" width="0.4029%" height="15" fill="rgb(223,3,22)" fg:x="624" fg:w="5"/><text x="50.5320%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="50.2820%" y="245" width="0.4029%" height="15" fill="rgb(225,196,46)" fg:x="624" fg:w="5"/><text x="50.5320%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="50.6044%" y="229" width="0.0806%" height="15" fill="rgb(209,110,37)" fg:x="628" fg:w="1"/><text x="50.8544%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (128 samples, 10.31%)</title><rect x="40.4512%" y="325" width="10.3143%" height="15" fill="rgb(249,89,12)" fg:x="502" fg:w="128"/><text x="40.7012%" y="335.50">indefinite::hel..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="50.2820%" y="309" width="0.4835%" height="15" fill="rgb(226,27,33)" fg:x="624" fg:w="6"/><text x="50.5320%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="50.2820%" y="293" width="0.4835%" height="15" fill="rgb(213,82,22)" fg:x="624" fg:w="6"/><text x="50.5320%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="50.2820%" y="277" width="0.4835%" height="15" fill="rgb(248,140,0)" fg:x="624" fg:w="6"/><text x="50.5320%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::new (1 samples, 0.08%)</title><rect x="50.6849%" y="261" width="0.0806%" height="15" fill="rgb(228,106,3)" fg:x="629" fg:w="1"/><text x="50.9349%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="50.6849%" y="245" width="0.0806%" height="15" fill="rgb(209,23,37)" fg:x="629" fg:w="1"/><text x="50.9349%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="50.7655%" y="261" width="0.1612%" height="15" fill="rgb(241,93,50)" fg:x="630" fg:w="2"/><text x="51.0155%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="50.8461%" y="245" width="0.0806%" height="15" fill="rgb(253,46,43)" fg:x="631" fg:w="1"/><text x="51.0961%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="50.8461%" y="229" width="0.0806%" height="15" fill="rgb(226,206,43)" fg:x="631" fg:w="1"/><text x="51.0961%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="50.9267%" y="261" width="0.0806%" height="15" fill="rgb(217,54,7)" fg:x="632" fg:w="1"/><text x="51.1767%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.0073%" y="261" width="0.0806%" height="15" fill="rgb(223,5,52)" fg:x="633" fg:w="1"/><text x="51.2573%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.0878%" y="229" width="0.0806%" height="15" fill="rgb(206,52,46)" fg:x="634" fg:w="1"/><text x="51.3378%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.0878%" y="213" width="0.0806%" height="15" fill="rgb(253,136,11)" fg:x="634" fg:w="1"/><text x="51.3378%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.0878%" y="197" width="0.0806%" height="15" fill="rgb(208,106,33)" fg:x="634" fg:w="1"/><text x="51.3378%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.0878%" y="181" width="0.0806%" height="15" fill="rgb(206,54,4)" fg:x="634" fg:w="1"/><text x="51.3378%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="51.0878%" y="261" width="0.2417%" height="15" fill="rgb(213,3,15)" fg:x="634" fg:w="3"/><text x="51.3378%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="51.0878%" y="245" width="0.2417%" height="15" fill="rgb(252,211,39)" fg:x="634" fg:w="3"/><text x="51.3378%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="51.1684%" y="229" width="0.1612%" height="15" fill="rgb(223,6,36)" fg:x="635" fg:w="2"/><text x="51.4184%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="51.1684%" y="213" width="0.1612%" height="15" fill="rgb(252,169,45)" fg:x="635" fg:w="2"/><text x="51.4184%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="51.2490%" y="197" width="0.0806%" height="15" fill="rgb(212,48,26)" fg:x="636" fg:w="1"/><text x="51.4990%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="51.2490%" y="181" width="0.0806%" height="15" fill="rgb(251,102,48)" fg:x="636" fg:w="1"/><text x="51.4990%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.2490%" y="165" width="0.0806%" height="15" fill="rgb(243,208,16)" fg:x="636" fg:w="1"/><text x="51.4990%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.2490%" y="149" width="0.0806%" height="15" fill="rgb(219,96,24)" fg:x="636" fg:w="1"/><text x="51.4990%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.4102%" y="245" width="0.0806%" height="15" fill="rgb(219,33,29)" fg:x="638" fg:w="1"/><text x="51.6602%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="51.4907%" y="245" width="0.1612%" height="15" fill="rgb(223,176,5)" fg:x="639" fg:w="2"/><text x="51.7407%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="51.6519%" y="245" width="0.0806%" height="15" fill="rgb(228,140,14)" fg:x="641" fg:w="1"/><text x="51.9019%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="51.6519%" y="229" width="0.0806%" height="15" fill="rgb(217,179,31)" fg:x="641" fg:w="1"/><text x="51.9019%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="51.6519%" y="213" width="0.0806%" height="15" fill="rgb(230,9,30)" fg:x="641" fg:w="1"/><text x="51.9019%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="51.6519%" y="197" width="0.0806%" height="15" fill="rgb(230,136,20)" fg:x="641" fg:w="1"/><text x="51.9019%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="51.7325%" y="229" width="0.2417%" height="15" fill="rgb(215,210,22)" fg:x="642" fg:w="3"/><text x="51.9825%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (3 samples, 0.24%)</title><rect x="51.7325%" y="213" width="0.2417%" height="15" fill="rgb(218,43,5)" fg:x="642" fg:w="3"/><text x="51.9825%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (3 samples, 0.24%)</title><rect x="51.7325%" y="197" width="0.2417%" height="15" fill="rgb(216,11,5)" fg:x="642" fg:w="3"/><text x="51.9825%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="51.8936%" y="181" width="0.0806%" height="15" fill="rgb(209,82,29)" fg:x="644" fg:w="1"/><text x="52.1436%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.8936%" y="165" width="0.0806%" height="15" fill="rgb(244,115,12)" fg:x="644" fg:w="1"/><text x="52.1436%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="51.9742%" y="229" width="0.0806%" height="15" fill="rgb(222,82,18)" fg:x="645" fg:w="1"/><text x="52.2242%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.9742%" y="213" width="0.0806%" height="15" fill="rgb(249,227,8)" fg:x="645" fg:w="1"/><text x="52.2242%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.9742%" y="197" width="0.0806%" height="15" fill="rgb(253,141,45)" fg:x="645" fg:w="1"/><text x="52.2242%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="51.9742%" y="181" width="0.0806%" height="15" fill="rgb(234,184,4)" fg:x="645" fg:w="1"/><text x="52.2242%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.0548%" y="213" width="0.0806%" height="15" fill="rgb(218,194,23)" fg:x="646" fg:w="1"/><text x="52.3048%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.56%)</title><rect x="52.1354%" y="213" width="0.5641%" height="15" fill="rgb(235,66,41)" fg:x="647" fg:w="7"/><text x="52.3854%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (18 samples, 1.45%)</title><rect x="51.3296%" y="261" width="1.4504%" height="15" fill="rgb(245,217,1)" fg:x="637" fg:w="18"/><text x="51.5796%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (13 samples, 1.05%)</title><rect x="51.7325%" y="245" width="1.0475%" height="15" fill="rgb(229,91,1)" fg:x="642" fg:w="13"/><text x="51.9825%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.73%)</title><rect x="52.0548%" y="229" width="0.7252%" height="15" fill="rgb(207,101,30)" fg:x="646" fg:w="9"/><text x="52.3048%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="52.6994%" y="213" width="0.0806%" height="15" fill="rgb(223,82,49)" fg:x="654" fg:w="1"/><text x="52.9494%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="52.7800%" y="213" width="0.0806%" height="15" fill="rgb(218,167,17)" fg:x="655" fg:w="1"/><text x="53.0300%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="52.8606%" y="213" width="0.0806%" height="15" fill="rgb(208,103,14)" fg:x="656" fg:w="1"/><text x="53.1106%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_item (1 samples, 0.08%)</title><rect x="52.8606%" y="197" width="0.0806%" height="15" fill="rgb(238,20,8)" fg:x="656" fg:w="1"/><text x="53.1106%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::span_char (1 samples, 0.08%)</title><rect x="52.8606%" y="181" width="0.0806%" height="15" fill="rgb(218,80,54)" fg:x="656" fg:w="1"/><text x="53.1106%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="52.9412%" y="213" width="0.0806%" height="15" fill="rgb(240,144,17)" fg:x="657" fg:w="1"/><text x="53.1912%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="52.9412%" y="197" width="0.0806%" height="15" fill="rgb(245,27,50)" fg:x="657" fg:w="1"/><text x="53.1912%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="52.7800%" y="261" width="0.4029%" height="15" fill="rgb(251,51,7)" fg:x="655" fg:w="5"/><text x="53.0300%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="52.7800%" y="245" width="0.4029%" height="15" fill="rgb(245,217,29)" fg:x="655" fg:w="5"/><text x="53.0300%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (5 samples, 0.40%)</title><rect x="52.7800%" y="229" width="0.4029%" height="15" fill="rgb(221,176,29)" fg:x="655" fg:w="5"/><text x="53.0300%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="53.0218%" y="213" width="0.1612%" height="15" fill="rgb(212,180,24)" fg:x="658" fg:w="2"/><text x="53.2718%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="53.0218%" y="197" width="0.1612%" height="15" fill="rgb(254,24,2)" fg:x="658" fg:w="2"/><text x="53.2718%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="53.0218%" y="181" width="0.1612%" height="15" fill="rgb(230,100,2)" fg:x="658" fg:w="2"/><text x="53.2718%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="53.0218%" y="165" width="0.1612%" height="15" fill="rgb(219,142,25)" fg:x="658" fg:w="2"/><text x="53.2718%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="53.1829%" y="229" width="0.2417%" height="15" fill="rgb(240,73,43)" fg:x="660" fg:w="3"/><text x="53.4329%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="53.3441%" y="213" width="0.0806%" height="15" fill="rgb(214,114,15)" fg:x="662" fg:w="1"/><text x="53.5941%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (36 samples, 2.90%)</title><rect x="50.7655%" y="309" width="2.9009%" height="15" fill="rgb(207,130,4)" fg:x="630" fg:w="36"/><text x="51.0155%" y="319.50">&lt;r..</text></g><g><title>regex::builders::string::RegexBuilder::build (36 samples, 2.90%)</title><rect x="50.7655%" y="293" width="2.9009%" height="15" fill="rgb(221,25,40)" fg:x="630" fg:w="36"/><text x="51.0155%" y="303.50">re..</text></g><g><title>regex_automata::meta::regex::Builder::build (36 samples, 2.90%)</title><rect x="50.7655%" y="277" width="2.9009%" height="15" fill="rgb(241,184,7)" fg:x="630" fg:w="36"/><text x="51.0155%" y="287.50">re..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="53.1829%" y="261" width="0.4835%" height="15" fill="rgb(235,159,4)" fg:x="660" fg:w="6"/><text x="53.4329%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="53.1829%" y="245" width="0.4835%" height="15" fill="rgb(214,87,48)" fg:x="660" fg:w="6"/><text x="53.4329%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="53.4247%" y="229" width="0.2417%" height="15" fill="rgb(246,198,24)" fg:x="663" fg:w="3"/><text x="53.6747%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="53.5052%" y="213" width="0.1612%" height="15" fill="rgb(209,66,40)" fg:x="664" fg:w="2"/><text x="53.7552%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.5858%" y="197" width="0.0806%" height="15" fill="rgb(233,147,39)" fg:x="665" fg:w="1"/><text x="53.8358%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="53.6664%" y="277" width="0.0806%" height="15" fill="rgb(231,145,52)" fg:x="666" fg:w="1"/><text x="53.9164%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="53.6664%" y="261" width="0.0806%" height="15" fill="rgb(206,20,26)" fg:x="666" fg:w="1"/><text x="53.9164%" y="271.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="53.6664%" y="309" width="0.1612%" height="15" fill="rgb(238,220,4)" fg:x="666" fg:w="2"/><text x="53.9164%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="53.6664%" y="293" width="0.1612%" height="15" fill="rgb(252,195,42)" fg:x="666" fg:w="2"/><text x="53.9164%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="53.7470%" y="277" width="0.0806%" height="15" fill="rgb(209,10,6)" fg:x="667" fg:w="1"/><text x="53.9970%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="53.7470%" y="261" width="0.0806%" height="15" fill="rgb(229,3,52)" fg:x="667" fg:w="1"/><text x="53.9970%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="53.7470%" y="245" width="0.0806%" height="15" fill="rgb(253,49,37)" fg:x="667" fg:w="1"/><text x="53.9970%" y="255.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="53.7470%" y="229" width="0.0806%" height="15" fill="rgb(240,103,49)" fg:x="667" fg:w="1"/><text x="53.9970%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (3 samples, 0.24%)</title><rect x="53.8276%" y="309" width="0.2417%" height="15" fill="rgb(250,182,30)" fg:x="668" fg:w="3"/><text x="54.0776%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (3 samples, 0.24%)</title><rect x="53.8276%" y="293" width="0.2417%" height="15" fill="rgb(248,8,30)" fg:x="668" fg:w="3"/><text x="54.0776%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="53.8276%" y="277" width="0.2417%" height="15" fill="rgb(237,120,30)" fg:x="668" fg:w="3"/><text x="54.0776%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="53.9081%" y="261" width="0.1612%" height="15" fill="rgb(221,146,34)" fg:x="669" fg:w="2"/><text x="54.1581%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.9887%" y="245" width="0.0806%" height="15" fill="rgb(242,55,13)" fg:x="670" fg:w="1"/><text x="54.2387%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="54.1499%" y="245" width="0.0806%" height="15" fill="rgb(242,112,31)" fg:x="672" fg:w="1"/><text x="54.3999%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (44 samples, 3.55%)</title><rect x="50.7655%" y="325" width="3.5455%" height="15" fill="rgb(249,192,27)" fg:x="630" fg:w="44"/><text x="51.0155%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="54.0693%" y="309" width="0.2417%" height="15" fill="rgb(208,204,44)" fg:x="671" fg:w="3"/><text x="54.3193%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="54.0693%" y="293" width="0.2417%" height="15" fill="rgb(208,93,54)" fg:x="671" fg:w="3"/><text x="54.3193%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="54.0693%" y="277" width="0.2417%" height="15" fill="rgb(242,1,31)" fg:x="671" fg:w="3"/><text x="54.3193%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="54.1499%" y="261" width="0.1612%" height="15" fill="rgb(241,83,25)" fg:x="672" fg:w="2"/><text x="54.3999%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="54.2305%" y="245" width="0.0806%" height="15" fill="rgb(205,169,50)" fg:x="673" fg:w="1"/><text x="54.4805%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="54.3110%" y="261" width="0.0806%" height="15" fill="rgb(239,186,37)" fg:x="674" fg:w="1"/><text x="54.5610%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="54.3916%" y="229" width="0.0806%" height="15" fill="rgb(205,221,10)" fg:x="675" fg:w="1"/><text x="54.6416%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="54.3916%" y="213" width="0.0806%" height="15" fill="rgb(218,196,15)" fg:x="675" fg:w="1"/><text x="54.6416%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="54.3916%" y="197" width="0.0806%" height="15" fill="rgb(218,196,35)" fg:x="675" fg:w="1"/><text x="54.6416%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="54.3916%" y="181" width="0.0806%" height="15" fill="rgb(233,63,24)" fg:x="675" fg:w="1"/><text x="54.6416%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="54.3916%" y="261" width="0.1612%" height="15" fill="rgb(225,8,4)" fg:x="675" fg:w="2"/><text x="54.6416%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="54.3916%" y="245" width="0.1612%" height="15" fill="rgb(234,105,35)" fg:x="675" fg:w="2"/><text x="54.6416%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="54.4722%" y="229" width="0.0806%" height="15" fill="rgb(236,21,32)" fg:x="676" fg:w="1"/><text x="54.7222%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="54.4722%" y="213" width="0.0806%" height="15" fill="rgb(228,109,6)" fg:x="676" fg:w="1"/><text x="54.7222%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="54.6334%" y="245" width="0.1612%" height="15" fill="rgb(229,215,31)" fg:x="678" fg:w="2"/><text x="54.8834%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="54.7945%" y="229" width="0.0806%" height="15" fill="rgb(221,52,54)" fg:x="680" fg:w="1"/><text x="55.0445%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (8 samples, 0.64%)</title><rect x="54.8751%" y="229" width="0.6446%" height="15" fill="rgb(252,129,43)" fg:x="681" fg:w="8"/><text x="55.1251%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.4392%" y="213" width="0.0806%" height="15" fill="rgb(248,183,27)" fg:x="688" fg:w="1"/><text x="55.6892%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.81%)</title><rect x="54.7945%" y="245" width="0.8058%" height="15" fill="rgb(250,0,22)" fg:x="680" fg:w="10"/><text x="55.0445%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="55.5197%" y="229" width="0.0806%" height="15" fill="rgb(213,166,10)" fg:x="689" fg:w="1"/><text x="55.7697%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.56%)</title><rect x="55.6003%" y="245" width="0.5641%" height="15" fill="rgb(207,163,36)" fg:x="690" fg:w="7"/><text x="55.8503%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="55.7615%" y="229" width="0.4029%" height="15" fill="rgb(208,122,22)" fg:x="692" fg:w="5"/><text x="56.0115%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="56.3255%" y="213" width="0.0806%" height="15" fill="rgb(207,104,49)" fg:x="699" fg:w="1"/><text x="56.5755%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.3255%" y="197" width="0.0806%" height="15" fill="rgb(248,211,50)" fg:x="699" fg:w="1"/><text x="56.5755%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.3255%" y="181" width="0.0806%" height="15" fill="rgb(217,13,45)" fg:x="699" fg:w="1"/><text x="56.5755%" y="191.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (3 samples, 0.24%)</title><rect x="56.4061%" y="213" width="0.2417%" height="15" fill="rgb(211,216,49)" fg:x="700" fg:w="3"/><text x="56.6561%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="56.5673%" y="197" width="0.0806%" height="15" fill="rgb(221,58,53)" fg:x="702" fg:w="1"/><text x="56.8173%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (8 samples, 0.64%)</title><rect x="56.1644%" y="245" width="0.6446%" height="15" fill="rgb(220,112,41)" fg:x="697" fg:w="8"/><text x="56.4144%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.64%)</title><rect x="56.1644%" y="229" width="0.6446%" height="15" fill="rgb(236,38,28)" fg:x="697" fg:w="8"/><text x="56.4144%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="56.6479%" y="213" width="0.1612%" height="15" fill="rgb(227,195,22)" fg:x="703" fg:w="2"/><text x="56.8979%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="56.6479%" y="197" width="0.1612%" height="15" fill="rgb(214,55,33)" fg:x="703" fg:w="2"/><text x="56.8979%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="56.6479%" y="181" width="0.1612%" height="15" fill="rgb(248,80,13)" fg:x="703" fg:w="2"/><text x="56.8979%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="56.8090%" y="245" width="0.0806%" height="15" fill="rgb(238,52,6)" fg:x="705" fg:w="1"/><text x="57.0590%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.8090%" y="229" width="0.0806%" height="15" fill="rgb(224,198,47)" fg:x="705" fg:w="1"/><text x="57.0590%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="56.9702%" y="165" width="0.0806%" height="15" fill="rgb(233,171,20)" fg:x="707" fg:w="1"/><text x="57.2202%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::ClassUnicodeIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="57.8566%" y="133" width="0.0806%" height="15" fill="rgb(241,30,25)" fg:x="718" fg:w="1"/><text x="58.1066%" y="143.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="57.9371%" y="133" width="0.3223%" height="15" fill="rgb(207,171,38)" fg:x="719" fg:w="4"/><text x="58.1871%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.2595%" y="133" width="0.0806%" height="15" fill="rgb(234,70,1)" fg:x="723" fg:w="1"/><text x="58.5095%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="58.3400%" y="133" width="0.1612%" height="15" fill="rgb(232,178,18)" fg:x="724" fg:w="2"/><text x="58.5900%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="58.5012%" y="133" width="0.0806%" height="15" fill="rgb(241,78,40)" fg:x="726" fg:w="1"/><text x="58.7512%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.8235%" y="101" width="0.0806%" height="15" fill="rgb(222,35,25)" fg:x="730" fg:w="1"/><text x="59.0735%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.9847%" y="69" width="0.0806%" height="15" fill="rgb(207,92,16)" fg:x="732" fg:w="1"/><text x="59.2347%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.9041%" y="101" width="0.2417%" height="15" fill="rgb(216,59,51)" fg:x="731" fg:w="3"/><text x="59.1541%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.9041%" y="85" width="0.2417%" height="15" fill="rgb(213,80,28)" fg:x="731" fg:w="3"/><text x="59.1541%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.0653%" y="69" width="0.0806%" height="15" fill="rgb(220,93,7)" fg:x="733" fg:w="1"/><text x="59.3153%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (12 samples, 0.97%)</title><rect x="58.5818%" y="133" width="0.9670%" height="15" fill="rgb(225,24,44)" fg:x="727" fg:w="12"/><text x="58.8318%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (11 samples, 0.89%)</title><rect x="58.6624%" y="117" width="0.8864%" height="15" fill="rgb(243,74,40)" fg:x="728" fg:w="11"/><text x="58.9124%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (5 samples, 0.40%)</title><rect x="59.1459%" y="101" width="0.4029%" height="15" fill="rgb(228,39,7)" fg:x="734" fg:w="5"/><text x="59.3959%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="59.4682%" y="85" width="0.0806%" height="15" fill="rgb(227,79,8)" fg:x="738" fg:w="1"/><text x="59.7182%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.4682%" y="69" width="0.0806%" height="15" fill="rgb(236,58,11)" fg:x="738" fg:w="1"/><text x="59.7182%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.4682%" y="53" width="0.0806%" height="15" fill="rgb(249,63,35)" fg:x="738" fg:w="1"/><text x="59.7182%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.4682%" y="37" width="0.0806%" height="15" fill="rgb(252,114,16)" fg:x="738" fg:w="1"/><text x="59.7182%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="59.5488%" y="133" width="0.0806%" height="15" fill="rgb(254,151,24)" fg:x="739" fg:w="1"/><text x="59.7988%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="59.5488%" y="117" width="0.0806%" height="15" fill="rgb(253,54,39)" fg:x="739" fg:w="1"/><text x="59.7988%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (26 samples, 2.10%)</title><rect x="59.6293%" y="133" width="2.0951%" height="15" fill="rgb(243,25,45)" fg:x="740" fg:w="26"/><text x="59.8793%" y="143.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (26 samples, 2.10%)</title><rect x="59.6293%" y="117" width="2.0951%" height="15" fill="rgb(234,134,9)" fg:x="740" fg:w="26"/><text x="59.8793%" y="127.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (26 samples, 2.10%)</title><rect x="59.6293%" y="101" width="2.0951%" height="15" fill="rgb(227,166,31)" fg:x="740" fg:w="26"/><text x="59.8793%" y="111.50">a..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="61.7244%" y="133" width="0.2417%" height="15" fill="rgb(245,143,41)" fg:x="766" fg:w="3"/><text x="61.9744%" y="143.50"></text></g><g><title>regex_syntax::hir::ClassUnicodeRange::end (1 samples, 0.08%)</title><rect x="61.9662%" y="133" width="0.0806%" height="15" fill="rgb(238,181,32)" fg:x="769" fg:w="1"/><text x="62.2162%" y="143.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="62.0467%" y="133" width="0.0806%" height="15" fill="rgb(224,113,18)" fg:x="770" fg:w="1"/><text x="62.2967%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (68 samples, 5.48%)</title><rect x="56.9702%" y="229" width="5.4795%" height="15" fill="rgb(240,229,28)" fg:x="707" fg:w="68"/><text x="57.2202%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.48%)</title><rect x="56.9702%" y="213" width="5.4795%" height="15" fill="rgb(250,185,3)" fg:x="707" fg:w="68"/><text x="57.2202%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (68 samples, 5.48%)</title><rect x="56.9702%" y="197" width="5.4795%" height="15" fill="rgb(212,59,25)" fg:x="707" fg:w="68"/><text x="57.2202%" y="207.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (68 samples, 5.48%)</title><rect x="56.9702%" y="181" width="5.4795%" height="15" fill="rgb(221,87,20)" fg:x="707" fg:w="68"/><text x="57.2202%" y="191.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (67 samples, 5.40%)</title><rect x="57.0508%" y="165" width="5.3989%" height="15" fill="rgb(213,74,28)" fg:x="708" fg:w="67"/><text x="57.3008%" y="175.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (67 samples, 5.40%)</title><rect x="57.0508%" y="149" width="5.3989%" height="15" fill="rgb(224,132,34)" fg:x="708" fg:w="67"/><text x="57.3008%" y="159.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (4 samples, 0.32%)</title><rect x="62.1273%" y="133" width="0.3223%" height="15" fill="rgb(222,101,24)" fg:x="771" fg:w="4"/><text x="62.3773%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="62.2079%" y="117" width="0.2417%" height="15" fill="rgb(254,142,4)" fg:x="772" fg:w="3"/><text x="62.4579%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="62.2079%" y="101" width="0.2417%" height="15" fill="rgb(230,229,49)" fg:x="772" fg:w="3"/><text x="62.4579%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.3691%" y="85" width="0.0806%" height="15" fill="rgb(238,70,47)" fg:x="774" fg:w="1"/><text x="62.6191%" y="95.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="62.5302%" y="213" width="0.0806%" height="15" fill="rgb(231,160,17)" fg:x="776" fg:w="1"/><text x="62.7802%" y="223.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="62.6108%" y="213" width="0.1612%" height="15" fill="rgb(218,68,53)" fg:x="777" fg:w="2"/><text x="62.8608%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (8 samples, 0.64%)</title><rect x="62.7720%" y="213" width="0.6446%" height="15" fill="rgb(236,111,10)" fg:x="779" fg:w="8"/><text x="63.0220%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="63.0943%" y="197" width="0.3223%" height="15" fill="rgb(224,34,41)" fg:x="783" fg:w="4"/><text x="63.3443%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="63.0943%" y="181" width="0.3223%" height="15" fill="rgb(241,118,19)" fg:x="783" fg:w="4"/><text x="63.3443%" y="191.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="63.0943%" y="165" width="0.3223%" height="15" fill="rgb(238,129,25)" fg:x="783" fg:w="4"/><text x="63.3443%" y="175.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="64.0612%" y="197" width="0.0806%" height="15" fill="rgb(238,22,31)" fg:x="795" fg:w="1"/><text x="64.3112%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="64.1418%" y="197" width="0.0806%" height="15" fill="rgb(222,174,48)" fg:x="796" fg:w="1"/><text x="64.3918%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.1418%" y="181" width="0.0806%" height="15" fill="rgb(206,152,40)" fg:x="796" fg:w="1"/><text x="64.3918%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.1418%" y="165" width="0.0806%" height="15" fill="rgb(218,99,54)" fg:x="796" fg:w="1"/><text x="64.3918%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (11 samples, 0.89%)</title><rect x="63.4166%" y="213" width="0.8864%" height="15" fill="rgb(220,174,26)" fg:x="787" fg:w="11"/><text x="63.6666%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.2224%" y="197" width="0.0806%" height="15" fill="rgb(245,116,9)" fg:x="797" fg:w="1"/><text x="64.4724%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.2224%" y="181" width="0.0806%" height="15" fill="rgb(209,72,35)" fg:x="797" fg:w="1"/><text x="64.4724%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.2224%" y="165" width="0.0806%" height="15" fill="rgb(226,126,21)" fg:x="797" fg:w="1"/><text x="64.4724%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (123 samples, 9.91%)</title><rect x="54.5528%" y="261" width="9.9114%" height="15" fill="rgb(227,192,1)" fg:x="677" fg:w="123"/><text x="54.8028%" y="271.50">regex_automata..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (94 samples, 7.57%)</title><rect x="56.8896%" y="245" width="7.5745%" height="15" fill="rgb(237,180,29)" fg:x="706" fg:w="94"/><text x="57.1396%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (25 samples, 2.01%)</title><rect x="62.4496%" y="229" width="2.0145%" height="15" fill="rgb(230,197,35)" fg:x="775" fg:w="25"/><text x="62.6996%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="64.3030%" y="213" width="0.1612%" height="15" fill="rgb(246,193,31)" fg:x="798" fg:w="2"/><text x="64.5530%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="64.5447%" y="229" width="0.0806%" height="15" fill="rgb(241,36,4)" fg:x="801" fg:w="1"/><text x="64.7947%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="64.4641%" y="261" width="0.2417%" height="15" fill="rgb(241,130,17)" fg:x="800" fg:w="3"/><text x="64.7141%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="64.4641%" y="245" width="0.2417%" height="15" fill="rgb(206,137,32)" fg:x="800" fg:w="3"/><text x="64.7141%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (1 samples, 0.08%)</title><rect x="64.6253%" y="229" width="0.0806%" height="15" fill="rgb(237,228,51)" fg:x="802" fg:w="1"/><text x="64.8753%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="64.6253%" y="213" width="0.0806%" height="15" fill="rgb(243,6,42)" fg:x="802" fg:w="1"/><text x="64.8753%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="64.7059%" y="229" width="0.1612%" height="15" fill="rgb(251,74,28)" fg:x="803" fg:w="2"/><text x="64.9559%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="64.7059%" y="213" width="0.1612%" height="15" fill="rgb(218,20,49)" fg:x="803" fg:w="2"/><text x="64.9559%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.7865%" y="197" width="0.0806%" height="15" fill="rgb(238,28,14)" fg:x="804" fg:w="1"/><text x="65.0365%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.7865%" y="181" width="0.0806%" height="15" fill="rgb(229,40,46)" fg:x="804" fg:w="1"/><text x="65.0365%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="64.7865%" y="165" width="0.0806%" height="15" fill="rgb(244,195,20)" fg:x="804" fg:w="1"/><text x="65.0365%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="64.8670%" y="229" width="0.1612%" height="15" fill="rgb(253,56,35)" fg:x="805" fg:w="2"/><text x="65.1170%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::look (1 samples, 0.08%)</title><rect x="64.9476%" y="213" width="0.0806%" height="15" fill="rgb(210,149,44)" fg:x="806" fg:w="1"/><text x="65.1976%" y="223.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (135 samples, 10.88%)</title><rect x="54.3110%" y="277" width="10.8783%" height="15" fill="rgb(240,135,12)" fg:x="674" fg:w="135"/><text x="54.5610%" y="287.50">regex_automata::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="64.7059%" y="261" width="0.4835%" height="15" fill="rgb(251,24,50)" fg:x="803" fg:w="6"/><text x="64.9559%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="64.7059%" y="245" width="0.4835%" height="15" fill="rgb(243,200,47)" fg:x="803" fg:w="6"/><text x="64.9559%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (2 samples, 0.16%)</title><rect x="65.0282%" y="229" width="0.1612%" height="15" fill="rgb(224,166,26)" fg:x="807" fg:w="2"/><text x="65.2782%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="65.1088%" y="213" width="0.0806%" height="15" fill="rgb(233,0,47)" fg:x="808" fg:w="1"/><text x="65.3588%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.1088%" y="197" width="0.0806%" height="15" fill="rgb(253,80,5)" fg:x="808" fg:w="1"/><text x="65.3588%" y="207.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (136 samples, 10.96%)</title><rect x="54.3110%" y="309" width="10.9589%" height="15" fill="rgb(214,133,25)" fg:x="674" fg:w="136"/><text x="54.5610%" y="319.50">&lt;regex::regex::s..</text></g><g><title>regex::builders::string::RegexBuilder::build (136 samples, 10.96%)</title><rect x="54.3110%" y="293" width="10.9589%" height="15" fill="rgb(209,27,14)" fg:x="674" fg:w="136"/><text x="54.5610%" y="303.50">regex::builders:..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="65.1894%" y="277" width="0.0806%" height="15" fill="rgb(219,102,51)" fg:x="809" fg:w="1"/><text x="65.4394%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="65.3505%" y="261" width="0.0806%" height="15" fill="rgb(237,18,16)" fg:x="811" fg:w="1"/><text x="65.6005%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3505%" y="245" width="0.0806%" height="15" fill="rgb(241,85,17)" fg:x="811" fg:w="1"/><text x="65.6005%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="65.3505%" y="277" width="0.2417%" height="15" fill="rgb(236,90,42)" fg:x="811" fg:w="3"/><text x="65.6005%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="65.4311%" y="261" width="0.1612%" height="15" fill="rgb(249,57,21)" fg:x="812" fg:w="2"/><text x="65.6811%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="65.4311%" y="245" width="0.1612%" height="15" fill="rgb(243,12,36)" fg:x="812" fg:w="2"/><text x="65.6811%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="65.4311%" y="229" width="0.1612%" height="15" fill="rgb(253,128,47)" fg:x="812" fg:w="2"/><text x="65.6811%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.48%)</title><rect x="65.2699%" y="309" width="0.4835%" height="15" fill="rgb(207,33,20)" fg:x="810" fg:w="6"/><text x="65.5199%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="65.3505%" y="293" width="0.4029%" height="15" fill="rgb(233,215,35)" fg:x="811" fg:w="5"/><text x="65.6005%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="65.5923%" y="277" width="0.1612%" height="15" fill="rgb(249,188,52)" fg:x="814" fg:w="2"/><text x="65.8423%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="65.5923%" y="261" width="0.1612%" height="15" fill="rgb(225,12,32)" fg:x="814" fg:w="2"/><text x="65.8423%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="65.5923%" y="245" width="0.1612%" height="15" fill="rgb(247,98,14)" fg:x="814" fg:w="2"/><text x="65.8423%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="65.7534%" y="293" width="0.1612%" height="15" fill="rgb(247,219,48)" fg:x="816" fg:w="2"/><text x="66.0034%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="65.7534%" y="277" width="0.1612%" height="15" fill="rgb(253,60,48)" fg:x="816" fg:w="2"/><text x="66.0034%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="65.8340%" y="261" width="0.0806%" height="15" fill="rgb(245,15,52)" fg:x="817" fg:w="1"/><text x="66.0840%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="65.8340%" y="245" width="0.0806%" height="15" fill="rgb(220,133,28)" fg:x="817" fg:w="1"/><text x="66.0840%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.8340%" y="229" width="0.0806%" height="15" fill="rgb(217,180,4)" fg:x="817" fg:w="1"/><text x="66.0840%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.8340%" y="213" width="0.0806%" height="15" fill="rgb(251,24,1)" fg:x="817" fg:w="1"/><text x="66.0840%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="66.8815%" y="213" width="0.2417%" height="15" fill="rgb(212,185,49)" fg:x="830" fg:w="3"/><text x="67.1315%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="66.8815%" y="197" width="0.2417%" height="15" fill="rgb(215,175,22)" fg:x="830" fg:w="3"/><text x="67.1315%" y="207.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="66.8815%" y="181" width="0.2417%" height="15" fill="rgb(250,205,14)" fg:x="830" fg:w="3"/><text x="67.1315%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.1233%" y="213" width="0.0806%" height="15" fill="rgb(225,211,22)" fg:x="833" fg:w="1"/><text x="67.3733%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="67.1233%" y="197" width="0.0806%" height="15" fill="rgb(251,179,42)" fg:x="833" fg:w="1"/><text x="67.3733%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.1233%" y="181" width="0.0806%" height="15" fill="rgb(208,216,51)" fg:x="833" fg:w="1"/><text x="67.3733%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (19 samples, 1.53%)</title><rect x="65.9952%" y="229" width="1.5310%" height="15" fill="rgb(235,36,11)" fg:x="819" fg:w="19"/><text x="66.2452%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="67.2039%" y="213" width="0.3223%" height="15" fill="rgb(213,189,28)" fg:x="834" fg:w="4"/><text x="67.4539%" y="223.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (374 samples, 30.14%)</title><rect x="37.4698%" y="405" width="30.1370%" height="15" fill="rgb(227,203,42)" fg:x="465" fg:w="374"/><text x="37.7198%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looki..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (340 samples, 27.40%)</title><rect x="40.2095%" y="389" width="27.3973%" height="15" fill="rgb(244,72,36)" fg:x="499" fg:w="340"/><text x="40.4595%" y="399.50">plugins_core::looking::model::Unqualified::q..</text></g><g><title>indefinite::indefinite (339 samples, 27.32%)</title><rect x="40.2901%" y="373" width="27.3167%" height="15" fill="rgb(213,53,17)" fg:x="500" fg:w="339"/><text x="40.5401%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (339 samples, 27.32%)</title><rect x="40.2901%" y="357" width="27.3167%" height="15" fill="rgb(207,167,3)" fg:x="500" fg:w="339"/><text x="40.5401%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (339 samples, 27.32%)</title><rect x="40.2901%" y="341" width="27.3167%" height="15" fill="rgb(216,98,30)" fg:x="500" fg:w="339"/><text x="40.5401%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (165 samples, 13.30%)</title><rect x="54.3110%" y="325" width="13.2957%" height="15" fill="rgb(236,123,15)" fg:x="674" fg:w="165"/><text x="54.5610%" y="335.50">indefinite::rules::n..</text></g><g><title>regex::regex::string::Regex::is_match_at (23 samples, 1.85%)</title><rect x="65.7534%" y="309" width="1.8533%" height="15" fill="rgb(248,81,50)" fg:x="816" fg:w="23"/><text x="66.0034%" y="319.50">r..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (21 samples, 1.69%)</title><rect x="65.9146%" y="293" width="1.6922%" height="15" fill="rgb(214,120,4)" fg:x="818" fg:w="21"/><text x="66.1646%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (21 samples, 1.69%)</title><rect x="65.9146%" y="277" width="1.6922%" height="15" fill="rgb(208,179,34)" fg:x="818" fg:w="21"/><text x="66.1646%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (21 samples, 1.69%)</title><rect x="65.9146%" y="261" width="1.6922%" height="15" fill="rgb(227,140,7)" fg:x="818" fg:w="21"/><text x="66.1646%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (20 samples, 1.61%)</title><rect x="65.9952%" y="245" width="1.6116%" height="15" fill="rgb(214,22,6)" fg:x="819" fg:w="20"/><text x="66.2452%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="67.5262%" y="229" width="0.0806%" height="15" fill="rgb(207,137,27)" fg:x="838" fg:w="1"/><text x="67.7762%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="67.5262%" y="213" width="0.0806%" height="15" fill="rgb(210,8,46)" fg:x="838" fg:w="1"/><text x="67.7762%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="67.5262%" y="197" width="0.0806%" height="15" fill="rgb(240,16,54)" fg:x="838" fg:w="1"/><text x="67.7762%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5262%" y="181" width="0.0806%" height="15" fill="rgb(211,209,29)" fg:x="838" fg:w="1"/><text x="67.7762%" y="191.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.6068%" y="357" width="0.0806%" height="15" fill="rgb(226,228,24)" fg:x="839" fg:w="1"/><text x="67.8568%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.7679%" y="293" width="0.0806%" height="15" fill="rgb(222,84,9)" fg:x="841" fg:w="1"/><text x="68.0179%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.7679%" y="277" width="0.0806%" height="15" fill="rgb(234,203,30)" fg:x="841" fg:w="1"/><text x="68.0179%" y="287.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="67.6068%" y="405" width="0.3223%" height="15" fill="rgb(238,109,14)" fg:x="839" fg:w="4"/><text x="67.8568%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="67.6068%" y="389" width="0.3223%" height="15" fill="rgb(233,206,34)" fg:x="839" fg:w="4"/><text x="67.8568%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="67.6068%" y="373" width="0.3223%" height="15" fill="rgb(220,167,47)" fg:x="839" fg:w="4"/><text x="67.8568%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="67.6873%" y="357" width="0.2417%" height="15" fill="rgb(238,105,10)" fg:x="840" fg:w="3"/><text x="67.9373%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="67.6873%" y="341" width="0.2417%" height="15" fill="rgb(213,227,17)" fg:x="840" fg:w="3"/><text x="67.9373%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="67.7679%" y="325" width="0.1612%" height="15" fill="rgb(217,132,38)" fg:x="841" fg:w="2"/><text x="68.0179%" y="335.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="67.7679%" y="309" width="0.1612%" height="15" fill="rgb(242,146,4)" fg:x="841" fg:w="2"/><text x="68.0179%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8485%" y="293" width="0.0806%" height="15" fill="rgb(212,61,9)" fg:x="842" fg:w="1"/><text x="68.0985%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8485%" y="277" width="0.0806%" height="15" fill="rgb(247,126,22)" fg:x="842" fg:w="1"/><text x="68.0985%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="67.8485%" y="261" width="0.0806%" height="15" fill="rgb(220,196,2)" fg:x="842" fg:w="1"/><text x="68.0985%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.8485%" y="245" width="0.0806%" height="15" fill="rgb(208,46,4)" fg:x="842" fg:w="1"/><text x="68.0985%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="67.8485%" y="229" width="0.0806%" height="15" fill="rgb(252,104,46)" fg:x="842" fg:w="1"/><text x="68.0985%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.8485%" y="213" width="0.0806%" height="15" fill="rgb(237,152,48)" fg:x="842" fg:w="1"/><text x="68.0985%" y="223.50"></text></g><g><title>kernel::model::EntityPtr::gid (2 samples, 0.16%)</title><rect x="68.0097%" y="373" width="0.1612%" height="15" fill="rgb(221,59,37)" fg:x="844" fg:w="2"/><text x="68.2597%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="68.0097%" y="357" width="0.1612%" height="15" fill="rgb(209,202,51)" fg:x="844" fg:w="2"/><text x="68.2597%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0902%" y="341" width="0.0806%" height="15" fill="rgb(228,81,30)" fg:x="845" fg:w="1"/><text x="68.3402%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0902%" y="325" width="0.0806%" height="15" fill="rgb(227,42,39)" fg:x="845" fg:w="1"/><text x="68.3402%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="68.0902%" y="309" width="0.0806%" height="15" fill="rgb(221,26,2)" fg:x="845" fg:w="1"/><text x="68.3402%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0902%" y="293" width="0.0806%" height="15" fill="rgb(254,61,31)" fg:x="845" fg:w="1"/><text x="68.3402%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="68.0902%" y="277" width="0.0806%" height="15" fill="rgb(222,173,38)" fg:x="845" fg:w="1"/><text x="68.3402%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="68.0902%" y="261" width="0.0806%" height="15" fill="rgb(218,50,12)" fg:x="845" fg:w="1"/><text x="68.3402%" y="271.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="68.0902%" y="245" width="0.0806%" height="15" fill="rgb(223,88,40)" fg:x="845" fg:w="1"/><text x="68.3402%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (4 samples, 0.32%)</title><rect x="67.9291%" y="389" width="0.3223%" height="15" fill="rgb(237,54,19)" fg:x="843" fg:w="4"/><text x="68.1791%" y="399.50"></text></g><g><title>kernel::model::EntityPtr::key (1 samples, 0.08%)</title><rect x="68.1708%" y="373" width="0.0806%" height="15" fill="rgb(251,129,25)" fg:x="846" fg:w="1"/><text x="68.4208%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2514%" y="325" width="0.0806%" height="15" fill="rgb(238,97,19)" fg:x="847" fg:w="1"/><text x="68.5014%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2514%" y="309" width="0.0806%" height="15" fill="rgb(240,169,18)" fg:x="847" fg:w="1"/><text x="68.5014%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2514%" y="293" width="0.0806%" height="15" fill="rgb(230,187,49)" fg:x="847" fg:w="1"/><text x="68.5014%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2514%" y="277" width="0.0806%" height="15" fill="rgb(209,44,26)" fg:x="847" fg:w="1"/><text x="68.5014%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="68.2514%" y="261" width="0.0806%" height="15" fill="rgb(244,0,6)" fg:x="847" fg:w="1"/><text x="68.5014%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2514%" y="245" width="0.0806%" height="15" fill="rgb(248,18,21)" fg:x="847" fg:w="1"/><text x="68.5014%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="68.2514%" y="229" width="0.0806%" height="15" fill="rgb(245,180,19)" fg:x="847" fg:w="1"/><text x="68.5014%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="68.2514%" y="213" width="0.0806%" height="15" fill="rgb(252,118,36)" fg:x="847" fg:w="1"/><text x="68.5014%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="68.2514%" y="197" width="0.0806%" height="15" fill="rgb(210,224,19)" fg:x="847" fg:w="1"/><text x="68.5014%" y="207.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="68.2514%" y="181" width="0.0806%" height="15" fill="rgb(218,30,24)" fg:x="847" fg:w="1"/><text x="68.5014%" y="191.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="68.2514%" y="165" width="0.0806%" height="15" fill="rgb(219,75,50)" fg:x="847" fg:w="1"/><text x="68.5014%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="68.2514%" y="149" width="0.0806%" height="15" fill="rgb(234,72,50)" fg:x="847" fg:w="1"/><text x="68.5014%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.3320%" y="229" width="0.0806%" height="15" fill="rgb(219,100,48)" fg:x="848" fg:w="1"/><text x="68.5820%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.3320%" y="213" width="0.0806%" height="15" fill="rgb(253,5,41)" fg:x="848" fg:w="1"/><text x="68.5820%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.3320%" y="197" width="0.0806%" height="15" fill="rgb(247,181,11)" fg:x="848" fg:w="1"/><text x="68.5820%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.3320%" y="181" width="0.0806%" height="15" fill="rgb(222,223,25)" fg:x="848" fg:w="1"/><text x="68.5820%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="68.3320%" y="165" width="0.0806%" height="15" fill="rgb(214,198,28)" fg:x="848" fg:w="1"/><text x="68.5820%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.3320%" y="149" width="0.0806%" height="15" fill="rgb(230,46,43)" fg:x="848" fg:w="1"/><text x="68.5820%" y="159.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="68.3320%" y="133" width="0.0806%" height="15" fill="rgb(233,65,53)" fg:x="848" fg:w="1"/><text x="68.5820%" y="143.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="68.3320%" y="325" width="0.1612%" height="15" fill="rgb(221,121,27)" fg:x="848" fg:w="2"/><text x="68.5820%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="68.3320%" y="309" width="0.1612%" height="15" fill="rgb(247,70,47)" fg:x="848" fg:w="2"/><text x="68.5820%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.3320%" y="293" width="0.1612%" height="15" fill="rgb(228,85,35)" fg:x="848" fg:w="2"/><text x="68.5820%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="68.3320%" y="277" width="0.1612%" height="15" fill="rgb(209,50,18)" fg:x="848" fg:w="2"/><text x="68.5820%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="68.3320%" y="261" width="0.1612%" height="15" fill="rgb(250,19,35)" fg:x="848" fg:w="2"/><text x="68.5820%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="68.3320%" y="245" width="0.1612%" height="15" fill="rgb(253,107,29)" fg:x="848" fg:w="2"/><text x="68.5820%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4126%" y="229" width="0.0806%" height="15" fill="rgb(252,179,29)" fg:x="849" fg:w="1"/><text x="68.6626%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.4126%" y="213" width="0.0806%" height="15" fill="rgb(238,194,6)" fg:x="849" fg:w="1"/><text x="68.6626%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="68.4126%" y="197" width="0.0806%" height="15" fill="rgb(238,164,29)" fg:x="849" fg:w="1"/><text x="68.6626%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="68.4932%" y="133" width="0.0806%" height="15" fill="rgb(224,25,9)" fg:x="850" fg:w="1"/><text x="68.7432%" y="143.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="68.4932%" y="117" width="0.0806%" height="15" fill="rgb(244,153,23)" fg:x="850" fg:w="1"/><text x="68.7432%" y="127.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.4932%" y="261" width="0.1612%" height="15" fill="rgb(212,203,14)" fg:x="850" fg:w="2"/><text x="68.7432%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.4932%" y="245" width="0.1612%" height="15" fill="rgb(220,164,20)" fg:x="850" fg:w="2"/><text x="68.7432%" y="255.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.4932%" y="229" width="0.1612%" height="15" fill="rgb(222,203,48)" fg:x="850" fg:w="2"/><text x="68.7432%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.4932%" y="213" width="0.1612%" height="15" fill="rgb(215,159,22)" fg:x="850" fg:w="2"/><text x="68.7432%" y="223.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.4932%" y="197" width="0.1612%" height="15" fill="rgb(216,183,47)" fg:x="850" fg:w="2"/><text x="68.7432%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.4932%" y="181" width="0.1612%" height="15" fill="rgb(229,195,25)" fg:x="850" fg:w="2"/><text x="68.7432%" y="191.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="68.4932%" y="165" width="0.1612%" height="15" fill="rgb(224,132,51)" fg:x="850" fg:w="2"/><text x="68.7432%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="68.4932%" y="149" width="0.1612%" height="15" fill="rgb(240,63,7)" fg:x="850" fg:w="2"/><text x="68.7432%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5737%" y="133" width="0.0806%" height="15" fill="rgb(249,182,41)" fg:x="851" fg:w="1"/><text x="68.8237%" y="143.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (406 samples, 32.72%)</title><rect x="36.0193%" y="565" width="32.7156%" height="15" fill="rgb(243,47,26)" fg:x="447" fg:w="406"/><text x="36.2693%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (406 samples, 32.72%)</title><rect x="36.0193%" y="549" width="32.7156%" height="15" fill="rgb(233,48,2)" fg:x="447" fg:w="406"/><text x="36.2693%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (406 samples, 32.72%)</title><rect x="36.0193%" y="533" width="32.7156%" height="15" fill="rgb(244,165,34)" fg:x="447" fg:w="406"/><text x="36.2693%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (406 samples, 32.72%)</title><rect x="36.0193%" y="517" width="32.7156%" height="15" fill="rgb(207,89,7)" fg:x="447" fg:w="406"/><text x="36.2693%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (406 samples, 32.72%)</title><rect x="36.0193%" y="501" width="32.7156%" height="15" fill="rgb(244,117,36)" fg:x="447" fg:w="406"/><text x="36.2693%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (406 samples, 32.72%)</title><rect x="36.0193%" y="485" width="32.7156%" height="15" fill="rgb(226,144,34)" fg:x="447" fg:w="406"/><text x="36.2693%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (406 samples, 32.72%)</title><rect x="36.0193%" y="469" width="32.7156%" height="15" fill="rgb(213,23,19)" fg:x="447" fg:w="406"/><text x="36.2693%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnc..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (406 samples, 32.72%)</title><rect x="36.0193%" y="453" width="32.7156%" height="15" fill="rgb(217,75,12)" fg:x="447" fg:w="406"/><text x="36.2693%" y="463.50">&lt;engine::session::state::State as kernel::actions::Pe..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (406 samples, 32.72%)</title><rect x="36.0193%" y="437" width="32.7156%" height="15" fill="rgb(224,159,17)" fg:x="447" fg:w="406"/><text x="36.2693%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel..</text></g><g><title>plugins_core::looking::model::new_area_observation (390 samples, 31.43%)</title><rect x="37.3086%" y="421" width="31.4263%" height="15" fill="rgb(217,118,1)" fg:x="463" fg:w="390"/><text x="37.5586%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.81%)</title><rect x="67.9291%" y="405" width="0.8058%" height="15" fill="rgb(232,180,48)" fg:x="843" fg:w="10"/><text x="68.1791%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="68.2514%" y="389" width="0.4835%" height="15" fill="rgb(230,27,33)" fg:x="847" fg:w="6"/><text x="68.5014%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="68.2514%" y="373" width="0.4835%" height="15" fill="rgb(205,31,21)" fg:x="847" fg:w="6"/><text x="68.5014%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="68.2514%" y="357" width="0.4835%" height="15" fill="rgb(253,59,4)" fg:x="847" fg:w="6"/><text x="68.5014%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="68.2514%" y="341" width="0.4835%" height="15" fill="rgb(224,201,9)" fg:x="847" fg:w="6"/><text x="68.5014%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (3 samples, 0.24%)</title><rect x="68.4932%" y="325" width="0.2417%" height="15" fill="rgb(229,206,30)" fg:x="850" fg:w="3"/><text x="68.7432%" y="335.50"></text></g><g><title>serde_json::de::from_trait (3 samples, 0.24%)</title><rect x="68.4932%" y="309" width="0.2417%" height="15" fill="rgb(212,67,47)" fg:x="850" fg:w="3"/><text x="68.7432%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="68.4932%" y="293" width="0.2417%" height="15" fill="rgb(211,96,50)" fg:x="850" fg:w="3"/><text x="68.7432%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="68.4932%" y="277" width="0.2417%" height="15" fill="rgb(252,114,18)" fg:x="850" fg:w="3"/><text x="68.7432%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="68.6543%" y="261" width="0.0806%" height="15" fill="rgb(223,58,37)" fg:x="852" fg:w="1"/><text x="68.9043%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.6543%" y="245" width="0.0806%" height="15" fill="rgb(237,70,4)" fg:x="852" fg:w="1"/><text x="68.9043%" y="255.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="68.8961%" y="533" width="0.0806%" height="15" fill="rgb(244,85,46)" fg:x="855" fg:w="1"/><text x="69.1461%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0572%" y="501" width="0.0806%" height="15" fill="rgb(223,39,52)" fg:x="857" fg:w="1"/><text x="69.3072%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0572%" y="485" width="0.0806%" height="15" fill="rgb(218,200,14)" fg:x="857" fg:w="1"/><text x="69.3072%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.0572%" y="469" width="0.0806%" height="15" fill="rgb(208,171,16)" fg:x="857" fg:w="1"/><text x="69.3072%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0572%" y="453" width="0.0806%" height="15" fill="rgb(234,200,18)" fg:x="857" fg:w="1"/><text x="69.3072%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0572%" y="437" width="0.0806%" height="15" fill="rgb(228,45,11)" fg:x="857" fg:w="1"/><text x="69.3072%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.0572%" y="421" width="0.0806%" height="15" fill="rgb(237,182,11)" fg:x="857" fg:w="1"/><text x="69.3072%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.0572%" y="405" width="0.0806%" height="15" fill="rgb(241,175,49)" fg:x="857" fg:w="1"/><text x="69.3072%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.0572%" y="389" width="0.0806%" height="15" fill="rgb(247,38,35)" fg:x="857" fg:w="1"/><text x="69.3072%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="69.0572%" y="373" width="0.0806%" height="15" fill="rgb(228,39,49)" fg:x="857" fg:w="1"/><text x="69.3072%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="69.0572%" y="357" width="0.0806%" height="15" fill="rgb(226,101,26)" fg:x="857" fg:w="1"/><text x="69.3072%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.1378%" y="469" width="0.0806%" height="15" fill="rgb(206,141,19)" fg:x="858" fg:w="1"/><text x="69.3878%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.1378%" y="453" width="0.0806%" height="15" fill="rgb(211,200,13)" fg:x="858" fg:w="1"/><text x="69.3878%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.1378%" y="437" width="0.0806%" height="15" fill="rgb(241,121,6)" fg:x="858" fg:w="1"/><text x="69.3878%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.1378%" y="421" width="0.0806%" height="15" fill="rgb(234,221,29)" fg:x="858" fg:w="1"/><text x="69.3878%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="68.9766%" y="517" width="0.3223%" height="15" fill="rgb(229,136,5)" fg:x="856" fg:w="4"/><text x="69.2266%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.1378%" y="501" width="0.1612%" height="15" fill="rgb(238,36,11)" fg:x="858" fg:w="2"/><text x="69.3878%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.1378%" y="485" width="0.1612%" height="15" fill="rgb(251,55,41)" fg:x="858" fg:w="2"/><text x="69.3878%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.2184%" y="469" width="0.0806%" height="15" fill="rgb(242,34,40)" fg:x="859" fg:w="1"/><text x="69.4684%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.2184%" y="453" width="0.0806%" height="15" fill="rgb(215,42,17)" fg:x="859" fg:w="1"/><text x="69.4684%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="69.2184%" y="437" width="0.0806%" height="15" fill="rgb(207,44,46)" fg:x="859" fg:w="1"/><text x="69.4684%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.2184%" y="421" width="0.0806%" height="15" fill="rgb(211,206,28)" fg:x="859" fg:w="1"/><text x="69.4684%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2184%" y="405" width="0.0806%" height="15" fill="rgb(237,167,16)" fg:x="859" fg:w="1"/><text x="69.4684%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="69.2184%" y="389" width="0.0806%" height="15" fill="rgb(233,66,6)" fg:x="859" fg:w="1"/><text x="69.4684%" y="399.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.2990%" y="453" width="0.0806%" height="15" fill="rgb(246,123,29)" fg:x="860" fg:w="1"/><text x="69.5490%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.2990%" y="437" width="0.0806%" height="15" fill="rgb(209,62,40)" fg:x="860" fg:w="1"/><text x="69.5490%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="69.2990%" y="421" width="0.0806%" height="15" fill="rgb(218,4,25)" fg:x="860" fg:w="1"/><text x="69.5490%" y="431.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.3795%" y="373" width="0.0806%" height="15" fill="rgb(253,91,49)" fg:x="861" fg:w="1"/><text x="69.6295%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.4601%" y="293" width="0.0806%" height="15" fill="rgb(228,155,29)" fg:x="862" fg:w="1"/><text x="69.7101%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.4601%" y="357" width="0.1612%" height="15" fill="rgb(243,57,37)" fg:x="862" fg:w="2"/><text x="69.7101%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4601%" y="341" width="0.1612%" height="15" fill="rgb(244,167,17)" fg:x="862" fg:w="2"/><text x="69.7101%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="69.4601%" y="325" width="0.1612%" height="15" fill="rgb(207,181,38)" fg:x="862" fg:w="2"/><text x="69.7101%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.4601%" y="309" width="0.1612%" height="15" fill="rgb(211,8,23)" fg:x="862" fg:w="2"/><text x="69.7101%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="69.5407%" y="293" width="0.0806%" height="15" fill="rgb(235,11,44)" fg:x="863" fg:w="1"/><text x="69.7907%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.6213%" y="357" width="0.0806%" height="15" fill="rgb(248,18,52)" fg:x="864" fg:w="1"/><text x="69.8713%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.6213%" y="341" width="0.0806%" height="15" fill="rgb(208,4,7)" fg:x="864" fg:w="1"/><text x="69.8713%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="69.6213%" y="325" width="0.0806%" height="15" fill="rgb(240,17,39)" fg:x="864" fg:w="1"/><text x="69.8713%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.6213%" y="309" width="0.0806%" height="15" fill="rgb(207,170,3)" fg:x="864" fg:w="1"/><text x="69.8713%" y="319.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="69.3795%" y="453" width="0.4835%" height="15" fill="rgb(236,100,52)" fg:x="861" fg:w="6"/><text x="69.6295%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="69.3795%" y="437" width="0.4835%" height="15" fill="rgb(246,78,51)" fg:x="861" fg:w="6"/><text x="69.6295%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="69.3795%" y="421" width="0.4835%" height="15" fill="rgb(211,17,15)" fg:x="861" fg:w="6"/><text x="69.6295%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (6 samples, 0.48%)</title><rect x="69.3795%" y="405" width="0.4835%" height="15" fill="rgb(209,59,46)" fg:x="861" fg:w="6"/><text x="69.6295%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="69.3795%" y="389" width="0.4835%" height="15" fill="rgb(210,92,25)" fg:x="861" fg:w="6"/><text x="69.6295%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="69.4601%" y="373" width="0.4029%" height="15" fill="rgb(238,174,52)" fg:x="862" fg:w="5"/><text x="69.7101%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.7019%" y="357" width="0.1612%" height="15" fill="rgb(230,73,7)" fg:x="865" fg:w="2"/><text x="69.9519%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="69.7019%" y="341" width="0.1612%" height="15" fill="rgb(243,124,40)" fg:x="865" fg:w="2"/><text x="69.9519%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="69.7824%" y="325" width="0.0806%" height="15" fill="rgb(244,170,11)" fg:x="866" fg:w="1"/><text x="70.0324%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8630%" y="357" width="0.0806%" height="15" fill="rgb(207,114,54)" fg:x="867" fg:w="1"/><text x="70.1130%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="69.8630%" y="341" width="0.0806%" height="15" fill="rgb(205,42,20)" fg:x="867" fg:w="1"/><text x="70.1130%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="69.8630%" y="325" width="0.0806%" height="15" fill="rgb(230,30,28)" fg:x="867" fg:w="1"/><text x="70.1130%" y="335.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="69.8630%" y="309" width="0.0806%" height="15" fill="rgb(205,73,54)" fg:x="867" fg:w="1"/><text x="70.1130%" y="319.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (1 samples, 0.08%)</title><rect x="69.8630%" y="293" width="0.0806%" height="15" fill="rgb(254,227,23)" fg:x="867" fg:w="1"/><text x="70.1130%" y="303.50"></text></g><g><title>plugins_core::tools::contained_by (15 samples, 1.21%)</title><rect x="68.9766%" y="533" width="1.2087%" height="15" fill="rgb(228,202,34)" fg:x="856" fg:w="15"/><text x="69.2266%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (11 samples, 0.89%)</title><rect x="69.2990%" y="517" width="0.8864%" height="15" fill="rgb(222,225,37)" fg:x="860" fg:w="11"/><text x="69.5490%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (11 samples, 0.89%)</title><rect x="69.2990%" y="501" width="0.8864%" height="15" fill="rgb(221,14,54)" fg:x="860" fg:w="11"/><text x="69.5490%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="69.2990%" y="485" width="0.8864%" height="15" fill="rgb(254,102,2)" fg:x="860" fg:w="11"/><text x="69.5490%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (11 samples, 0.89%)</title><rect x="69.2990%" y="469" width="0.8864%" height="15" fill="rgb(232,104,17)" fg:x="860" fg:w="11"/><text x="69.5490%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="69.8630%" y="453" width="0.3223%" height="15" fill="rgb(250,220,14)" fg:x="867" fg:w="4"/><text x="70.1130%" y="463.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="69.8630%" y="437" width="0.3223%" height="15" fill="rgb(241,158,9)" fg:x="867" fg:w="4"/><text x="70.1130%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.8630%" y="421" width="0.3223%" height="15" fill="rgb(246,9,43)" fg:x="867" fg:w="4"/><text x="70.1130%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.8630%" y="405" width="0.3223%" height="15" fill="rgb(206,73,33)" fg:x="867" fg:w="4"/><text x="70.1130%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="69.8630%" y="389" width="0.3223%" height="15" fill="rgb(222,79,8)" fg:x="867" fg:w="4"/><text x="70.1130%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="69.8630%" y="373" width="0.3223%" height="15" fill="rgb(234,8,54)" fg:x="867" fg:w="4"/><text x="70.1130%" y="383.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="69.9436%" y="357" width="0.2417%" height="15" fill="rgb(209,134,38)" fg:x="868" fg:w="3"/><text x="70.1936%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.24%)</title><rect x="69.9436%" y="341" width="0.2417%" height="15" fill="rgb(230,127,29)" fg:x="868" fg:w="3"/><text x="70.1936%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1853%" y="485" width="0.0806%" height="15" fill="rgb(242,44,41)" fg:x="871" fg:w="1"/><text x="70.4353%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1853%" y="469" width="0.0806%" height="15" fill="rgb(222,56,43)" fg:x="871" fg:w="1"/><text x="70.4353%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.1853%" y="453" width="0.0806%" height="15" fill="rgb(238,39,47)" fg:x="871" fg:w="1"/><text x="70.4353%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.1853%" y="437" width="0.0806%" height="15" fill="rgb(226,79,43)" fg:x="871" fg:w="1"/><text x="70.4353%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.1853%" y="421" width="0.0806%" height="15" fill="rgb(242,105,53)" fg:x="871" fg:w="1"/><text x="70.4353%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="70.1853%" y="405" width="0.0806%" height="15" fill="rgb(251,132,46)" fg:x="871" fg:w="1"/><text x="70.4353%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="70.1853%" y="389" width="0.0806%" height="15" fill="rgb(231,77,14)" fg:x="871" fg:w="1"/><text x="70.4353%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.1853%" y="501" width="0.1612%" height="15" fill="rgb(240,135,9)" fg:x="871" fg:w="2"/><text x="70.4353%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2659%" y="485" width="0.0806%" height="15" fill="rgb(248,109,14)" fg:x="872" fg:w="1"/><text x="70.5159%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2659%" y="469" width="0.0806%" height="15" fill="rgb(227,146,52)" fg:x="872" fg:w="1"/><text x="70.5159%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.2659%" y="453" width="0.0806%" height="15" fill="rgb(232,54,3)" fg:x="872" fg:w="1"/><text x="70.5159%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2659%" y="437" width="0.0806%" height="15" fill="rgb(229,201,43)" fg:x="872" fg:w="1"/><text x="70.5159%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.2659%" y="421" width="0.0806%" height="15" fill="rgb(252,161,33)" fg:x="872" fg:w="1"/><text x="70.5159%" y="431.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.2659%" y="405" width="0.0806%" height="15" fill="rgb(226,146,40)" fg:x="872" fg:w="1"/><text x="70.5159%" y="415.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.2659%" y="389" width="0.0806%" height="15" fill="rgb(219,47,25)" fg:x="872" fg:w="1"/><text x="70.5159%" y="399.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.2659%" y="373" width="0.0806%" height="15" fill="rgb(250,135,13)" fg:x="872" fg:w="1"/><text x="70.5159%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2659%" y="357" width="0.0806%" height="15" fill="rgb(219,229,18)" fg:x="872" fg:w="1"/><text x="70.5159%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.2659%" y="341" width="0.0806%" height="15" fill="rgb(217,152,27)" fg:x="872" fg:w="1"/><text x="70.5159%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.2659%" y="325" width="0.0806%" height="15" fill="rgb(225,71,47)" fg:x="872" fg:w="1"/><text x="70.5159%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.2659%" y="309" width="0.0806%" height="15" fill="rgb(220,139,14)" fg:x="872" fg:w="1"/><text x="70.5159%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.2659%" y="293" width="0.0806%" height="15" fill="rgb(247,54,32)" fg:x="872" fg:w="1"/><text x="70.5159%" y="303.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.2659%" y="277" width="0.0806%" height="15" fill="rgb(252,131,39)" fg:x="872" fg:w="1"/><text x="70.5159%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.2659%" y="261" width="0.0806%" height="15" fill="rgb(210,108,39)" fg:x="872" fg:w="1"/><text x="70.5159%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.3465%" y="421" width="0.0806%" height="15" fill="rgb(205,23,29)" fg:x="873" fg:w="1"/><text x="70.5965%" y="431.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="70.1853%" y="517" width="0.3223%" height="15" fill="rgb(246,139,46)" fg:x="871" fg:w="4"/><text x="70.4353%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="70.3465%" y="501" width="0.1612%" height="15" fill="rgb(250,81,26)" fg:x="873" fg:w="2"/><text x="70.5965%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="70.3465%" y="485" width="0.1612%" height="15" fill="rgb(214,104,7)" fg:x="873" fg:w="2"/><text x="70.5965%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (2 samples, 0.16%)</title><rect x="70.3465%" y="469" width="0.1612%" height="15" fill="rgb(233,189,8)" fg:x="873" fg:w="2"/><text x="70.5965%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (2 samples, 0.16%)</title><rect x="70.3465%" y="453" width="0.1612%" height="15" fill="rgb(228,141,17)" fg:x="873" fg:w="2"/><text x="70.5965%" y="463.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (2 samples, 0.16%)</title><rect x="70.3465%" y="437" width="0.1612%" height="15" fill="rgb(247,157,1)" fg:x="873" fg:w="2"/><text x="70.5965%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.4271%" y="421" width="0.0806%" height="15" fill="rgb(249,225,5)" fg:x="874" fg:w="1"/><text x="70.6771%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.4271%" y="405" width="0.0806%" height="15" fill="rgb(242,55,13)" fg:x="874" fg:w="1"/><text x="70.6771%" y="415.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (444 samples, 35.78%)</title><rect x="34.8106%" y="661" width="35.7776%" height="15" fill="rgb(230,49,50)" fg:x="432" fg:w="444"/><text x="35.0606%" y="671.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::..</text></g><g><title>kernel::plugins::mw::apply_middleware (444 samples, 35.78%)</title><rect x="34.8106%" y="645" width="35.7776%" height="15" fill="rgb(241,111,38)" fg:x="432" fg:w="444"/><text x="35.0606%" y="655.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (444 samples, 35.78%)</title><rect x="34.8106%" y="629" width="35.7776%" height="15" fill="rgb(252,155,4)" fg:x="432" fg:w="444"/><text x="35.0606%" y="639.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (444 samples, 35.78%)</title><rect x="34.8106%" y="613" width="35.7776%" height="15" fill="rgb(212,69,32)" fg:x="432" fg:w="444"/><text x="35.0606%" y="623.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (430 samples, 34.65%)</title><rect x="35.9388%" y="597" width="34.6495%" height="15" fill="rgb(243,107,47)" fg:x="446" fg:w="430"/><text x="36.1888%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (430 samples, 34.65%)</title><rect x="35.9388%" y="581" width="34.6495%" height="15" fill="rgb(247,130,12)" fg:x="446" fg:w="430"/><text x="36.1888%" y="591.50">&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Mi..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (23 samples, 1.85%)</title><rect x="68.7349%" y="565" width="1.8533%" height="15" fill="rgb(233,74,16)" fg:x="853" fg:w="23"/><text x="68.9849%" y="575.50">p..</text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (21 samples, 1.69%)</title><rect x="68.8961%" y="549" width="1.6922%" height="15" fill="rgb(208,58,18)" fg:x="855" fg:w="21"/><text x="69.1461%" y="559.50"></text></g><g><title>plugins_core::tools::occupied_by (5 samples, 0.40%)</title><rect x="70.1853%" y="533" width="0.4029%" height="15" fill="rgb(242,225,1)" fg:x="871" fg:w="5"/><text x="70.4353%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="70.5077%" y="517" width="0.0806%" height="15" fill="rgb(249,39,40)" fg:x="875" fg:w="1"/><text x="70.7577%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity_ref::EntityRef&gt; (1 samples, 0.08%)</title><rect x="70.5077%" y="501" width="0.0806%" height="15" fill="rgb(207,72,44)" fg:x="875" fg:w="1"/><text x="70.7577%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.5077%" y="485" width="0.0806%" height="15" fill="rgb(215,193,12)" fg:x="875" fg:w="1"/><text x="70.7577%" y="495.50"></text></g><g><title>engine::session::Session::captured (452 samples, 36.42%)</title><rect x="34.2466%" y="709" width="36.4222%" height="15" fill="rgb(248,41,39)" fg:x="425" fg:w="452"/><text x="34.4966%" y="719.50">engine::session::Session::captured</text></g><g><title>engine::session::logs::capture (450 samples, 36.26%)</title><rect x="34.4077%" y="693" width="36.2611%" height="15" fill="rgb(253,85,4)" fg:x="427" fg:w="450"/><text x="34.6577%" y="703.50">engine::session::logs::capture</text></g><g><title>tracing_core::dispatcher::with_default (445 samples, 35.86%)</title><rect x="34.8106%" y="677" width="35.8582%" height="15" fill="rgb(243,70,31)" fg:x="432" fg:w="445"/><text x="35.0606%" y="687.50">tracing_core::dispatcher::with_default</text></g><g><title>core::ptr::drop_in_place&lt;tracing_core::dispatcher::DefaultGuard&gt; (1 samples, 0.08%)</title><rect x="70.5882%" y="661" width="0.0806%" height="15" fill="rgb(253,195,26)" fg:x="876" fg:w="1"/><text x="70.8382%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.6688%" y="661" width="0.1612%" height="15" fill="rgb(243,42,11)" fg:x="877" fg:w="2"/><text x="70.9188%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.6688%" y="645" width="0.1612%" height="15" fill="rgb(239,66,17)" fg:x="877" fg:w="2"/><text x="70.9188%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="70.6688%" y="629" width="0.1612%" height="15" fill="rgb(217,132,21)" fg:x="877" fg:w="2"/><text x="70.9188%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7494%" y="613" width="0.0806%" height="15" fill="rgb(252,202,21)" fg:x="878" fg:w="1"/><text x="70.9994%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8300%" y="613" width="0.0806%" height="15" fill="rgb(233,98,36)" fg:x="879" fg:w="1"/><text x="71.0800%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8300%" y="597" width="0.0806%" height="15" fill="rgb(216,153,54)" fg:x="879" fg:w="1"/><text x="71.0800%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.8300%" y="581" width="0.0806%" height="15" fill="rgb(250,99,7)" fg:x="879" fg:w="1"/><text x="71.0800%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8300%" y="565" width="0.0806%" height="15" fill="rgb(207,56,50)" fg:x="879" fg:w="1"/><text x="71.0800%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.8300%" y="549" width="0.0806%" height="15" fill="rgb(244,61,34)" fg:x="879" fg:w="1"/><text x="71.0800%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="70.8300%" y="533" width="0.0806%" height="15" fill="rgb(241,50,38)" fg:x="879" fg:w="1"/><text x="71.0800%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="70.8300%" y="517" width="0.0806%" height="15" fill="rgb(212,166,30)" fg:x="879" fg:w="1"/><text x="71.0800%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="70.8300%" y="501" width="0.0806%" height="15" fill="rgb(249,127,32)" fg:x="879" fg:w="1"/><text x="71.0800%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8300%" y="485" width="0.0806%" height="15" fill="rgb(209,103,0)" fg:x="879" fg:w="1"/><text x="71.0800%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="70.8300%" y="469" width="0.0806%" height="15" fill="rgb(238,209,51)" fg:x="879" fg:w="1"/><text x="71.0800%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="70.8300%" y="453" width="0.0806%" height="15" fill="rgb(237,56,23)" fg:x="879" fg:w="1"/><text x="71.0800%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="70.8300%" y="437" width="0.0806%" height="15" fill="rgb(215,153,46)" fg:x="879" fg:w="1"/><text x="71.0800%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="70.8300%" y="421" width="0.0806%" height="15" fill="rgb(224,49,31)" fg:x="879" fg:w="1"/><text x="71.0800%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="70.8300%" y="405" width="0.0806%" height="15" fill="rgb(250,18,42)" fg:x="879" fg:w="1"/><text x="71.0800%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.8300%" y="389" width="0.0806%" height="15" fill="rgb(215,176,39)" fg:x="879" fg:w="1"/><text x="71.0800%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="70.9106%" y="581" width="0.0806%" height="15" fill="rgb(223,77,29)" fg:x="880" fg:w="1"/><text x="71.1606%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.9911%" y="581" width="0.0806%" height="15" fill="rgb(234,94,52)" fg:x="881" fg:w="1"/><text x="71.2411%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1523%" y="453" width="0.0806%" height="15" fill="rgb(220,154,50)" fg:x="883" fg:w="1"/><text x="71.4023%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.1523%" y="437" width="0.0806%" height="15" fill="rgb(212,11,10)" fg:x="883" fg:w="1"/><text x="71.4023%" y="447.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.1523%" y="421" width="0.0806%" height="15" fill="rgb(205,166,19)" fg:x="883" fg:w="1"/><text x="71.4023%" y="431.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.1523%" y="405" width="0.0806%" height="15" fill="rgb(244,198,16)" fg:x="883" fg:w="1"/><text x="71.4023%" y="415.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.1523%" y="389" width="0.0806%" height="15" fill="rgb(219,69,12)" fg:x="883" fg:w="1"/><text x="71.4023%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1523%" y="373" width="0.0806%" height="15" fill="rgb(245,30,7)" fg:x="883" fg:w="1"/><text x="71.4023%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.1523%" y="357" width="0.0806%" height="15" fill="rgb(218,221,48)" fg:x="883" fg:w="1"/><text x="71.4023%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.1523%" y="341" width="0.0806%" height="15" fill="rgb(216,66,15)" fg:x="883" fg:w="1"/><text x="71.4023%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.1523%" y="325" width="0.0806%" height="15" fill="rgb(226,122,50)" fg:x="883" fg:w="1"/><text x="71.4023%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.1523%" y="309" width="0.0806%" height="15" fill="rgb(239,156,16)" fg:x="883" fg:w="1"/><text x="71.4023%" y="319.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.1523%" y="293" width="0.0806%" height="15" fill="rgb(224,27,38)" fg:x="883" fg:w="1"/><text x="71.4023%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.1523%" y="277" width="0.0806%" height="15" fill="rgb(224,39,27)" fg:x="883" fg:w="1"/><text x="71.4023%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="71.0717%" y="517" width="0.2417%" height="15" fill="rgb(215,92,29)" fg:x="882" fg:w="3"/><text x="71.3217%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="71.0717%" y="501" width="0.2417%" height="15" fill="rgb(207,159,16)" fg:x="882" fg:w="3"/><text x="71.3217%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (3 samples, 0.24%)</title><rect x="71.0717%" y="485" width="0.2417%" height="15" fill="rgb(238,163,47)" fg:x="882" fg:w="3"/><text x="71.3217%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.0717%" y="469" width="0.2417%" height="15" fill="rgb(219,91,49)" fg:x="882" fg:w="3"/><text x="71.3217%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.2329%" y="453" width="0.0806%" height="15" fill="rgb(227,167,31)" fg:x="884" fg:w="1"/><text x="71.4829%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.64%)</title><rect x="70.8300%" y="661" width="0.6446%" height="15" fill="rgb(234,80,54)" fg:x="879" fg:w="8"/><text x="71.0800%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.64%)</title><rect x="70.8300%" y="645" width="0.6446%" height="15" fill="rgb(212,114,2)" fg:x="879" fg:w="8"/><text x="71.0800%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (8 samples, 0.64%)</title><rect x="70.8300%" y="629" width="0.6446%" height="15" fill="rgb(234,50,24)" fg:x="879" fg:w="8"/><text x="71.0800%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.56%)</title><rect x="70.9106%" y="613" width="0.5641%" height="15" fill="rgb(221,68,8)" fg:x="880" fg:w="7"/><text x="71.1606%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.56%)</title><rect x="70.9106%" y="597" width="0.5641%" height="15" fill="rgb(254,180,31)" fg:x="880" fg:w="7"/><text x="71.1606%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="71.0717%" y="581" width="0.4029%" height="15" fill="rgb(247,130,50)" fg:x="882" fg:w="5"/><text x="71.3217%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="71.0717%" y="565" width="0.4029%" height="15" fill="rgb(211,109,4)" fg:x="882" fg:w="5"/><text x="71.3217%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="71.0717%" y="549" width="0.4029%" height="15" fill="rgb(238,50,21)" fg:x="882" fg:w="5"/><text x="71.3217%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="71.0717%" y="533" width="0.4029%" height="15" fill="rgb(225,57,45)" fg:x="882" fg:w="5"/><text x="71.3217%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.3135%" y="517" width="0.1612%" height="15" fill="rgb(209,196,50)" fg:x="885" fg:w="2"/><text x="71.5635%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.3135%" y="501" width="0.1612%" height="15" fill="rgb(242,140,13)" fg:x="885" fg:w="2"/><text x="71.5635%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="71.3135%" y="485" width="0.1612%" height="15" fill="rgb(217,111,7)" fg:x="885" fg:w="2"/><text x="71.5635%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (2 samples, 0.16%)</title><rect x="71.3135%" y="469" width="0.1612%" height="15" fill="rgb(253,193,51)" fg:x="885" fg:w="2"/><text x="71.5635%" y="479.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="71.3940%" y="453" width="0.0806%" height="15" fill="rgb(252,70,29)" fg:x="886" fg:w="1"/><text x="71.6440%" y="463.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="71.3940%" y="437" width="0.0806%" height="15" fill="rgb(232,127,12)" fg:x="886" fg:w="1"/><text x="71.6440%" y="447.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="71.3940%" y="421" width="0.0806%" height="15" fill="rgb(211,180,21)" fg:x="886" fg:w="1"/><text x="71.6440%" y="431.50"></text></g><g><title>engine::session::internal::Added::find_refs (12 samples, 0.97%)</title><rect x="70.6688%" y="693" width="0.9670%" height="15" fill="rgb(229,72,13)" fg:x="877" fg:w="12"/><text x="70.9188%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (12 samples, 0.97%)</title><rect x="70.6688%" y="677" width="0.9670%" height="15" fill="rgb(240,211,49)" fg:x="877" fg:w="12"/><text x="70.9188%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.4746%" y="661" width="0.1612%" height="15" fill="rgb(219,149,40)" fg:x="887" fg:w="2"/><text x="71.7246%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.4746%" y="645" width="0.1612%" height="15" fill="rgb(210,127,46)" fg:x="887" fg:w="2"/><text x="71.7246%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="71.4746%" y="629" width="0.1612%" height="15" fill="rgb(220,106,7)" fg:x="887" fg:w="2"/><text x="71.7246%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="71.4746%" y="613" width="0.1612%" height="15" fill="rgb(249,31,22)" fg:x="887" fg:w="2"/><text x="71.7246%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="71.4746%" y="597" width="0.1612%" height="15" fill="rgb(253,1,49)" fg:x="887" fg:w="2"/><text x="71.7246%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5552%" y="581" width="0.0806%" height="15" fill="rgb(227,144,33)" fg:x="888" fg:w="1"/><text x="71.8052%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5552%" y="565" width="0.0806%" height="15" fill="rgb(249,163,44)" fg:x="888" fg:w="1"/><text x="71.8052%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.7164%" y="629" width="0.0806%" height="15" fill="rgb(234,15,39)" fg:x="890" fg:w="1"/><text x="71.9664%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7164%" y="613" width="0.0806%" height="15" fill="rgb(207,66,16)" fg:x="890" fg:w="1"/><text x="71.9664%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7164%" y="597" width="0.0806%" height="15" fill="rgb(233,112,24)" fg:x="890" fg:w="1"/><text x="71.9664%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7164%" y="581" width="0.0806%" height="15" fill="rgb(230,90,22)" fg:x="890" fg:w="1"/><text x="71.9664%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7164%" y="565" width="0.0806%" height="15" fill="rgb(229,61,13)" fg:x="890" fg:w="1"/><text x="71.9664%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7164%" y="549" width="0.0806%" height="15" fill="rgb(225,57,24)" fg:x="890" fg:w="1"/><text x="71.9664%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7164%" y="533" width="0.0806%" height="15" fill="rgb(208,169,48)" fg:x="890" fg:w="1"/><text x="71.9664%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7164%" y="517" width="0.0806%" height="15" fill="rgb(244,218,51)" fg:x="890" fg:w="1"/><text x="71.9664%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7164%" y="501" width="0.0806%" height="15" fill="rgb(214,148,10)" fg:x="890" fg:w="1"/><text x="71.9664%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7164%" y="485" width="0.0806%" height="15" fill="rgb(225,174,27)" fg:x="890" fg:w="1"/><text x="71.9664%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7164%" y="469" width="0.0806%" height="15" fill="rgb(230,96,26)" fg:x="890" fg:w="1"/><text x="71.9664%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7164%" y="453" width="0.0806%" height="15" fill="rgb(232,10,30)" fg:x="890" fg:w="1"/><text x="71.9664%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7164%" y="437" width="0.0806%" height="15" fill="rgb(222,8,50)" fg:x="890" fg:w="1"/><text x="71.9664%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.6358%" y="661" width="0.2417%" height="15" fill="rgb(213,81,27)" fg:x="889" fg:w="3"/><text x="71.8858%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.7164%" y="645" width="0.1612%" height="15" fill="rgb(245,50,10)" fg:x="890" fg:w="2"/><text x="71.9664%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7969%" y="629" width="0.0806%" height="15" fill="rgb(216,100,18)" fg:x="891" fg:w="1"/><text x="72.0469%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.7969%" y="613" width="0.0806%" height="15" fill="rgb(236,147,54)" fg:x="891" fg:w="1"/><text x="72.0469%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.7969%" y="597" width="0.0806%" height="15" fill="rgb(205,143,26)" fg:x="891" fg:w="1"/><text x="72.0469%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.7969%" y="581" width="0.0806%" height="15" fill="rgb(236,26,9)" fg:x="891" fg:w="1"/><text x="72.0469%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.7969%" y="565" width="0.0806%" height="15" fill="rgb(221,165,53)" fg:x="891" fg:w="1"/><text x="72.0469%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7969%" y="549" width="0.0806%" height="15" fill="rgb(214,110,17)" fg:x="891" fg:w="1"/><text x="72.0469%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.7969%" y="533" width="0.0806%" height="15" fill="rgb(237,197,12)" fg:x="891" fg:w="1"/><text x="72.0469%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.7969%" y="517" width="0.0806%" height="15" fill="rgb(205,84,17)" fg:x="891" fg:w="1"/><text x="72.0469%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.7969%" y="501" width="0.0806%" height="15" fill="rgb(237,18,45)" fg:x="891" fg:w="1"/><text x="72.0469%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.7969%" y="485" width="0.0806%" height="15" fill="rgb(221,87,14)" fg:x="891" fg:w="1"/><text x="72.0469%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.7969%" y="469" width="0.0806%" height="15" fill="rgb(238,186,15)" fg:x="891" fg:w="1"/><text x="72.0469%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.7969%" y="453" width="0.0806%" height="15" fill="rgb(208,115,11)" fg:x="891" fg:w="1"/><text x="72.0469%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="71.6358%" y="677" width="0.3223%" height="15" fill="rgb(254,175,0)" fg:x="889" fg:w="4"/><text x="71.8858%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8775%" y="661" width="0.0806%" height="15" fill="rgb(227,24,42)" fg:x="892" fg:w="1"/><text x="72.1275%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8775%" y="645" width="0.0806%" height="15" fill="rgb(223,211,37)" fg:x="892" fg:w="1"/><text x="72.1275%" y="655.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="71.8775%" y="629" width="0.0806%" height="15" fill="rgb(235,49,27)" fg:x="892" fg:w="1"/><text x="72.1275%" y="639.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="71.8775%" y="613" width="0.0806%" height="15" fill="rgb(254,97,51)" fg:x="892" fg:w="1"/><text x="72.1275%" y="623.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="71.8775%" y="597" width="0.0806%" height="15" fill="rgb(249,51,40)" fg:x="892" fg:w="1"/><text x="72.1275%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8775%" y="581" width="0.0806%" height="15" fill="rgb(210,128,45)" fg:x="892" fg:w="1"/><text x="72.1275%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="71.8775%" y="565" width="0.0806%" height="15" fill="rgb(224,137,50)" fg:x="892" fg:w="1"/><text x="72.1275%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="71.8775%" y="549" width="0.0806%" height="15" fill="rgb(242,15,9)" fg:x="892" fg:w="1"/><text x="72.1275%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="71.8775%" y="533" width="0.0806%" height="15" fill="rgb(233,187,41)" fg:x="892" fg:w="1"/><text x="72.1275%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="71.8775%" y="517" width="0.0806%" height="15" fill="rgb(227,2,29)" fg:x="892" fg:w="1"/><text x="72.1275%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="71.8775%" y="501" width="0.0806%" height="15" fill="rgb(222,70,3)" fg:x="892" fg:w="1"/><text x="72.1275%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="71.8775%" y="485" width="0.0806%" height="15" fill="rgb(213,11,42)" fg:x="892" fg:w="1"/><text x="72.1275%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9581%" y="661" width="0.1612%" height="15" fill="rgb(225,150,9)" fg:x="893" fg:w="2"/><text x="72.2081%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9581%" y="645" width="0.1612%" height="15" fill="rgb(230,162,45)" fg:x="893" fg:w="2"/><text x="72.2081%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="71.9581%" y="629" width="0.1612%" height="15" fill="rgb(222,14,52)" fg:x="893" fg:w="2"/><text x="72.2081%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.1193%" y="597" width="0.0806%" height="15" fill="rgb(254,198,14)" fg:x="895" fg:w="1"/><text x="72.3693%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.1193%" y="581" width="0.0806%" height="15" fill="rgb(220,217,30)" fg:x="895" fg:w="1"/><text x="72.3693%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (4 samples, 0.32%)</title><rect x="71.9581%" y="677" width="0.3223%" height="15" fill="rgb(215,146,41)" fg:x="893" fg:w="4"/><text x="72.2081%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.1193%" y="661" width="0.1612%" height="15" fill="rgb(217,27,36)" fg:x="895" fg:w="2"/><text x="72.3693%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1193%" y="645" width="0.1612%" height="15" fill="rgb(219,218,39)" fg:x="895" fg:w="2"/><text x="72.3693%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="72.1193%" y="629" width="0.1612%" height="15" fill="rgb(219,4,42)" fg:x="895" fg:w="2"/><text x="72.3693%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.1193%" y="613" width="0.1612%" height="15" fill="rgb(249,119,36)" fg:x="895" fg:w="2"/><text x="72.3693%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.1998%" y="597" width="0.0806%" height="15" fill="rgb(209,23,33)" fg:x="896" fg:w="1"/><text x="72.4498%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.1998%" y="581" width="0.0806%" height="15" fill="rgb(211,10,0)" fg:x="896" fg:w="1"/><text x="72.4498%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.2804%" y="549" width="0.0806%" height="15" fill="rgb(208,99,37)" fg:x="897" fg:w="1"/><text x="72.5304%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.2804%" y="533" width="0.0806%" height="15" fill="rgb(213,132,31)" fg:x="897" fg:w="1"/><text x="72.5304%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.2804%" y="517" width="0.0806%" height="15" fill="rgb(243,129,40)" fg:x="897" fg:w="1"/><text x="72.5304%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="72.2804%" y="581" width="0.2417%" height="15" fill="rgb(210,66,33)" fg:x="897" fg:w="3"/><text x="72.5304%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.2804%" y="565" width="0.2417%" height="15" fill="rgb(209,189,4)" fg:x="897" fg:w="3"/><text x="72.5304%" y="575.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="72.3610%" y="549" width="0.1612%" height="15" fill="rgb(214,107,37)" fg:x="898" fg:w="2"/><text x="72.6110%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.3610%" y="533" width="0.1612%" height="15" fill="rgb(245,88,54)" fg:x="898" fg:w="2"/><text x="72.6110%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.3610%" y="517" width="0.1612%" height="15" fill="rgb(205,146,20)" fg:x="898" fg:w="2"/><text x="72.6110%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.3610%" y="501" width="0.1612%" height="15" fill="rgb(220,161,25)" fg:x="898" fg:w="2"/><text x="72.6110%" y="511.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="72.4416%" y="485" width="0.0806%" height="15" fill="rgb(215,152,15)" fg:x="899" fg:w="1"/><text x="72.6916%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="72.4416%" y="469" width="0.0806%" height="15" fill="rgb(233,192,44)" fg:x="899" fg:w="1"/><text x="72.6916%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4416%" y="453" width="0.0806%" height="15" fill="rgb(240,170,46)" fg:x="899" fg:w="1"/><text x="72.6916%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.5222%" y="549" width="0.0806%" height="15" fill="rgb(207,104,33)" fg:x="900" fg:w="1"/><text x="72.7722%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (5 samples, 0.40%)</title><rect x="72.2804%" y="629" width="0.4029%" height="15" fill="rgb(219,21,39)" fg:x="897" fg:w="5"/><text x="72.5304%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="72.2804%" y="613" width="0.4029%" height="15" fill="rgb(214,133,29)" fg:x="897" fg:w="5"/><text x="72.5304%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (5 samples, 0.40%)</title><rect x="72.2804%" y="597" width="0.4029%" height="15" fill="rgb(226,93,6)" fg:x="897" fg:w="5"/><text x="72.5304%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.5222%" y="581" width="0.1612%" height="15" fill="rgb(252,222,34)" fg:x="900" fg:w="2"/><text x="72.7722%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="72.5222%" y="565" width="0.1612%" height="15" fill="rgb(252,92,48)" fg:x="900" fg:w="2"/><text x="72.7722%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="72.6027%" y="549" width="0.0806%" height="15" fill="rgb(245,223,24)" fg:x="901" fg:w="1"/><text x="72.8527%" y="559.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="72.6027%" y="533" width="0.0806%" height="15" fill="rgb(205,176,3)" fg:x="901" fg:w="1"/><text x="72.8527%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="72.6027%" y="517" width="0.0806%" height="15" fill="rgb(235,151,15)" fg:x="901" fg:w="1"/><text x="72.8527%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6027%" y="501" width="0.0806%" height="15" fill="rgb(237,209,11)" fg:x="901" fg:w="1"/><text x="72.8527%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6027%" y="485" width="0.0806%" height="15" fill="rgb(243,227,24)" fg:x="901" fg:w="1"/><text x="72.8527%" y="495.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.48%)</title><rect x="72.2804%" y="677" width="0.4835%" height="15" fill="rgb(239,193,16)" fg:x="897" fg:w="6"/><text x="72.5304%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.48%)</title><rect x="72.2804%" y="661" width="0.4835%" height="15" fill="rgb(231,27,9)" fg:x="897" fg:w="6"/><text x="72.5304%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.48%)</title><rect x="72.2804%" y="645" width="0.4835%" height="15" fill="rgb(219,169,10)" fg:x="897" fg:w="6"/><text x="72.5304%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.6833%" y="629" width="0.0806%" height="15" fill="rgb(244,229,43)" fg:x="902" fg:w="1"/><text x="72.9333%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.6833%" y="613" width="0.0806%" height="15" fill="rgb(254,38,20)" fg:x="902" fg:w="1"/><text x="72.9333%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.8445%" y="533" width="0.0806%" height="15" fill="rgb(250,47,30)" fg:x="904" fg:w="1"/><text x="73.0945%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.8445%" y="517" width="0.0806%" height="15" fill="rgb(224,124,36)" fg:x="904" fg:w="1"/><text x="73.0945%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8445%" y="501" width="0.0806%" height="15" fill="rgb(246,68,51)" fg:x="904" fg:w="1"/><text x="73.0945%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8445%" y="485" width="0.0806%" height="15" fill="rgb(253,43,49)" fg:x="904" fg:w="1"/><text x="73.0945%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="72.8445%" y="469" width="0.0806%" height="15" fill="rgb(219,54,36)" fg:x="904" fg:w="1"/><text x="73.0945%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.7639%" y="565" width="0.2417%" height="15" fill="rgb(227,133,34)" fg:x="903" fg:w="3"/><text x="73.0139%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="72.8445%" y="549" width="0.1612%" height="15" fill="rgb(247,227,15)" fg:x="904" fg:w="2"/><text x="73.0945%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.9251%" y="533" width="0.0806%" height="15" fill="rgb(229,96,14)" fg:x="905" fg:w="1"/><text x="73.1751%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.9251%" y="517" width="0.0806%" height="15" fill="rgb(220,79,17)" fg:x="905" fg:w="1"/><text x="73.1751%" y="527.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="72.9251%" y="501" width="0.0806%" height="15" fill="rgb(205,131,53)" fg:x="905" fg:w="1"/><text x="73.1751%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="72.7639%" y="597" width="0.3223%" height="15" fill="rgb(209,50,29)" fg:x="903" fg:w="4"/><text x="73.0139%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="72.7639%" y="581" width="0.3223%" height="15" fill="rgb(245,86,46)" fg:x="903" fg:w="4"/><text x="73.0139%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0056%" y="565" width="0.0806%" height="15" fill="rgb(235,66,46)" fg:x="906" fg:w="1"/><text x="73.2556%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.7639%" y="613" width="0.4029%" height="15" fill="rgb(232,148,31)" fg:x="903" fg:w="5"/><text x="73.0139%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.0862%" y="597" width="0.0806%" height="15" fill="rgb(217,149,8)" fg:x="907" fg:w="1"/><text x="73.3362%" y="607.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="73.1668%" y="597" width="0.0806%" height="15" fill="rgb(209,183,11)" fg:x="908" fg:w="1"/><text x="73.4168%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="73.1668%" y="613" width="0.1612%" height="15" fill="rgb(208,55,20)" fg:x="908" fg:w="2"/><text x="73.4168%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.2474%" y="597" width="0.0806%" height="15" fill="rgb(218,39,14)" fg:x="909" fg:w="1"/><text x="73.4974%" y="607.50"></text></g><g><title>engine::session::Session::load_entity (34 samples, 2.74%)</title><rect x="70.6688%" y="709" width="2.7397%" height="15" fill="rgb(216,169,33)" fg:x="877" fg:w="34"/><text x="70.9188%" y="719.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (22 samples, 1.77%)</title><rect x="71.6358%" y="693" width="1.7728%" height="15" fill="rgb(233,80,24)" fg:x="889" fg:w="22"/><text x="71.8858%" y="703.50">e..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.64%)</title><rect x="72.7639%" y="677" width="0.6446%" height="15" fill="rgb(213,179,31)" fg:x="903" fg:w="8"/><text x="73.0139%" y="687.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.64%)</title><rect x="72.7639%" y="661" width="0.6446%" height="15" fill="rgb(209,19,5)" fg:x="903" fg:w="8"/><text x="73.0139%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.64%)</title><rect x="72.7639%" y="645" width="0.6446%" height="15" fill="rgb(219,18,35)" fg:x="903" fg:w="8"/><text x="73.0139%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.64%)</title><rect x="72.7639%" y="629" width="0.6446%" height="15" fill="rgb(209,169,16)" fg:x="903" fg:w="8"/><text x="73.0139%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3280%" y="613" width="0.0806%" height="15" fill="rgb(245,90,51)" fg:x="910" fg:w="1"/><text x="73.5780%" y="623.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="73.4085%" y="677" width="0.0806%" height="15" fill="rgb(220,99,45)" fg:x="911" fg:w="1"/><text x="73.6585%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.5697%" y="661" width="0.0806%" height="15" fill="rgb(249,89,25)" fg:x="913" fg:w="1"/><text x="73.8197%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="73.6503%" y="661" width="0.0806%" height="15" fill="rgb(239,193,0)" fg:x="914" fg:w="1"/><text x="73.9003%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="73.6503%" y="645" width="0.0806%" height="15" fill="rgb(231,126,1)" fg:x="914" fg:w="1"/><text x="73.9003%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6503%" y="629" width="0.0806%" height="15" fill="rgb(243,166,3)" fg:x="914" fg:w="1"/><text x="73.9003%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="73.6503%" y="613" width="0.0806%" height="15" fill="rgb(223,22,34)" fg:x="914" fg:w="1"/><text x="73.9003%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.6503%" y="597" width="0.0806%" height="15" fill="rgb(251,52,51)" fg:x="914" fg:w="1"/><text x="73.9003%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.6503%" y="581" width="0.0806%" height="15" fill="rgb(221,165,28)" fg:x="914" fg:w="1"/><text x="73.9003%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.6503%" y="565" width="0.0806%" height="15" fill="rgb(218,121,47)" fg:x="914" fg:w="1"/><text x="73.9003%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7309%" y="565" width="0.0806%" height="15" fill="rgb(209,120,9)" fg:x="915" fg:w="1"/><text x="73.9809%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7309%" y="549" width="0.0806%" height="15" fill="rgb(236,68,12)" fg:x="915" fg:w="1"/><text x="73.9809%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="73.7309%" y="533" width="0.0806%" height="15" fill="rgb(225,194,26)" fg:x="915" fg:w="1"/><text x="73.9809%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7309%" y="517" width="0.0806%" height="15" fill="rgb(231,84,39)" fg:x="915" fg:w="1"/><text x="73.9809%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="73.8114%" y="565" width="0.1612%" height="15" fill="rgb(210,11,45)" fg:x="916" fg:w="2"/><text x="74.0614%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.8114%" y="549" width="0.1612%" height="15" fill="rgb(224,54,52)" fg:x="916" fg:w="2"/><text x="74.0614%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="73.8920%" y="533" width="0.0806%" height="15" fill="rgb(238,102,14)" fg:x="917" fg:w="1"/><text x="74.1420%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="73.7309%" y="613" width="0.3223%" height="15" fill="rgb(243,160,52)" fg:x="915" fg:w="4"/><text x="73.9809%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="73.7309%" y="597" width="0.3223%" height="15" fill="rgb(216,114,19)" fg:x="915" fg:w="4"/><text x="73.9809%" y="607.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="73.7309%" y="581" width="0.3223%" height="15" fill="rgb(244,166,37)" fg:x="915" fg:w="4"/><text x="73.9809%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9726%" y="565" width="0.0806%" height="15" fill="rgb(246,29,44)" fg:x="918" fg:w="1"/><text x="74.2226%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9726%" y="549" width="0.0806%" height="15" fill="rgb(215,56,53)" fg:x="918" fg:w="1"/><text x="74.2226%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.9726%" y="533" width="0.0806%" height="15" fill="rgb(217,60,2)" fg:x="918" fg:w="1"/><text x="74.2226%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.9726%" y="517" width="0.0806%" height="15" fill="rgb(207,26,24)" fg:x="918" fg:w="1"/><text x="74.2226%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.9726%" y="501" width="0.0806%" height="15" fill="rgb(252,210,15)" fg:x="918" fg:w="1"/><text x="74.2226%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.9726%" y="485" width="0.0806%" height="15" fill="rgb(253,209,26)" fg:x="918" fg:w="1"/><text x="74.2226%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.9726%" y="469" width="0.0806%" height="15" fill="rgb(238,170,14)" fg:x="918" fg:w="1"/><text x="74.2226%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.9726%" y="453" width="0.0806%" height="15" fill="rgb(216,178,15)" fg:x="918" fg:w="1"/><text x="74.2226%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="73.7309%" y="661" width="0.4029%" height="15" fill="rgb(250,197,2)" fg:x="915" fg:w="5"/><text x="73.9809%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.7309%" y="645" width="0.4029%" height="15" fill="rgb(212,70,42)" fg:x="915" fg:w="5"/><text x="73.9809%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.7309%" y="629" width="0.4029%" height="15" fill="rgb(227,213,9)" fg:x="915" fg:w="5"/><text x="73.9809%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.0532%" y="613" width="0.0806%" height="15" fill="rgb(245,99,25)" fg:x="919" fg:w="1"/><text x="74.3032%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.0532%" y="597" width="0.0806%" height="15" fill="rgb(250,82,29)" fg:x="919" fg:w="1"/><text x="74.3032%" y="607.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="74.1338%" y="661" width="0.0806%" height="15" fill="rgb(241,226,54)" fg:x="920" fg:w="1"/><text x="74.3838%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.1338%" y="645" width="0.0806%" height="15" fill="rgb(221,99,41)" fg:x="920" fg:w="1"/><text x="74.3838%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.1338%" y="629" width="0.0806%" height="15" fill="rgb(213,90,21)" fg:x="920" fg:w="1"/><text x="74.3838%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="74.2143%" y="501" width="0.0806%" height="15" fill="rgb(205,208,24)" fg:x="921" fg:w="1"/><text x="74.4643%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="74.2143%" y="485" width="0.0806%" height="15" fill="rgb(246,31,12)" fg:x="921" fg:w="1"/><text x="74.4643%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2143%" y="469" width="0.0806%" height="15" fill="rgb(213,154,6)" fg:x="921" fg:w="1"/><text x="74.4643%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.2143%" y="453" width="0.0806%" height="15" fill="rgb(222,163,29)" fg:x="921" fg:w="1"/><text x="74.4643%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="74.2143%" y="437" width="0.0806%" height="15" fill="rgb(227,201,8)" fg:x="921" fg:w="1"/><text x="74.4643%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.2143%" y="517" width="0.2417%" height="15" fill="rgb(233,9,32)" fg:x="921" fg:w="3"/><text x="74.4643%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="74.2949%" y="501" width="0.1612%" height="15" fill="rgb(217,54,24)" fg:x="922" fg:w="2"/><text x="74.5449%" y="511.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.3755%" y="485" width="0.0806%" height="15" fill="rgb(235,192,0)" fg:x="923" fg:w="1"/><text x="74.6255%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.2143%" y="565" width="0.3223%" height="15" fill="rgb(235,45,9)" fg:x="921" fg:w="4"/><text x="74.4643%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="74.2143%" y="549" width="0.3223%" height="15" fill="rgb(246,42,40)" fg:x="921" fg:w="4"/><text x="74.4643%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.2143%" y="533" width="0.3223%" height="15" fill="rgb(248,111,24)" fg:x="921" fg:w="4"/><text x="74.4643%" y="543.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="74.4561%" y="517" width="0.0806%" height="15" fill="rgb(249,65,22)" fg:x="924" fg:w="1"/><text x="74.7061%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="74.2143%" y="597" width="0.4029%" height="15" fill="rgb(238,111,51)" fg:x="921" fg:w="5"/><text x="74.4643%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="74.2143%" y="581" width="0.4029%" height="15" fill="rgb(250,118,22)" fg:x="921" fg:w="5"/><text x="74.4643%" y="591.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.5367%" y="565" width="0.0806%" height="15" fill="rgb(234,84,26)" fg:x="925" fg:w="1"/><text x="74.7867%" y="575.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.5367%" y="549" width="0.0806%" height="15" fill="rgb(243,172,12)" fg:x="925" fg:w="1"/><text x="74.7867%" y="559.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (505 samples, 40.69%)</title><rect x="34.0048%" y="741" width="40.6930%" height="15" fill="rgb(236,150,49)" fg:x="422" fg:w="505"/><text x="34.2548%" y="751.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (505 samples, 40.69%)</title><rect x="34.0048%" y="725" width="40.6930%" height="15" fill="rgb(225,197,26)" fg:x="422" fg:w="505"/><text x="34.2548%" y="735.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (16 samples, 1.29%)</title><rect x="73.4085%" y="709" width="1.2893%" height="15" fill="rgb(214,17,42)" fg:x="911" fg:w="16"/><text x="73.6585%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (16 samples, 1.29%)</title><rect x="73.4085%" y="693" width="1.2893%" height="15" fill="rgb(224,165,40)" fg:x="911" fg:w="16"/><text x="73.6585%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (15 samples, 1.21%)</title><rect x="73.4891%" y="677" width="1.2087%" height="15" fill="rgb(246,100,4)" fg:x="912" fg:w="15"/><text x="73.7391%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (6 samples, 0.48%)</title><rect x="74.2143%" y="661" width="0.4835%" height="15" fill="rgb(222,103,0)" fg:x="921" fg:w="6"/><text x="74.4643%" y="671.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.48%)</title><rect x="74.2143%" y="645" width="0.4835%" height="15" fill="rgb(227,189,26)" fg:x="921" fg:w="6"/><text x="74.4643%" y="655.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.48%)</title><rect x="74.2143%" y="629" width="0.4835%" height="15" fill="rgb(214,202,17)" fg:x="921" fg:w="6"/><text x="74.4643%" y="639.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.48%)</title><rect x="74.2143%" y="613" width="0.4835%" height="15" fill="rgb(229,111,3)" fg:x="921" fg:w="6"/><text x="74.4643%" y="623.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="74.6172%" y="597" width="0.0806%" height="15" fill="rgb(229,172,15)" fg:x="926" fg:w="1"/><text x="74.8672%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (929 samples, 74.86%)</title><rect x="0.0000%" y="789" width="74.8590%" height="15" fill="rgb(230,224,35)" fg:x="0" fg:w="929"/><text x="0.2500%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (929 samples, 74.86%)</title><rect x="0.0000%" y="773" width="74.8590%" height="15" fill="rgb(251,141,6)" fg:x="0" fg:w="929"/><text x="0.2500%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (928 samples, 74.78%)</title><rect x="0.0806%" y="757" width="74.7784%" height="15" fill="rgb(225,208,6)" fg:x="1" fg:w="928"/><text x="0.3306%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (2 samples, 0.16%)</title><rect x="74.6978%" y="741" width="0.1612%" height="15" fill="rgb(246,181,16)" fg:x="927" fg:w="2"/><text x="74.9478%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="74.6978%" y="725" width="0.1612%" height="15" fill="rgb(227,129,36)" fg:x="927" fg:w="2"/><text x="74.9478%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="74.6978%" y="709" width="0.1612%" height="15" fill="rgb(248,117,24)" fg:x="927" fg:w="2"/><text x="74.9478%" y="719.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="74.6978%" y="693" width="0.1612%" height="15" fill="rgb(214,185,35)" fg:x="927" fg:w="2"/><text x="74.9478%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.0201%" y="693" width="0.0806%" height="15" fill="rgb(236,150,34)" fg:x="931" fg:w="1"/><text x="75.2701%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1007%" y="677" width="0.0806%" height="15" fill="rgb(243,228,27)" fg:x="932" fg:w="1"/><text x="75.3507%" y="687.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="74.9396%" y="725" width="0.4029%" height="15" fill="rgb(245,77,44)" fg:x="930" fg:w="5"/><text x="75.1896%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="74.9396%" y="709" width="0.4029%" height="15" fill="rgb(235,214,42)" fg:x="930" fg:w="5"/><text x="75.1896%" y="719.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="75.1007%" y="693" width="0.2417%" height="15" fill="rgb(221,74,3)" fg:x="932" fg:w="3"/><text x="75.3507%" y="703.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.16%)</title><rect x="75.1813%" y="677" width="0.1612%" height="15" fill="rgb(206,121,29)" fg:x="933" fg:w="2"/><text x="75.4313%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.2619%" y="661" width="0.0806%" height="15" fill="rgb(249,131,53)" fg:x="934" fg:w="1"/><text x="75.5119%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.4230%" y="661" width="0.1612%" height="15" fill="rgb(236,170,29)" fg:x="936" fg:w="2"/><text x="75.6730%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.4230%" y="645" width="0.1612%" height="15" fill="rgb(247,96,15)" fg:x="936" fg:w="2"/><text x="75.6730%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5036%" y="629" width="0.0806%" height="15" fill="rgb(211,210,7)" fg:x="937" fg:w="1"/><text x="75.7536%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.5842%" y="629" width="0.0806%" height="15" fill="rgb(240,88,50)" fg:x="938" fg:w="1"/><text x="75.8342%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6648%" y="629" width="0.0806%" height="15" fill="rgb(209,229,26)" fg:x="939" fg:w="1"/><text x="75.9148%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.6648%" y="613" width="0.0806%" height="15" fill="rgb(210,68,23)" fg:x="939" fg:w="1"/><text x="75.9148%" y="623.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="75.7454%" y="613" width="0.1612%" height="15" fill="rgb(229,180,13)" fg:x="940" fg:w="2"/><text x="75.9954%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.9065%" y="613" width="0.0806%" height="15" fill="rgb(236,53,44)" fg:x="942" fg:w="1"/><text x="76.1565%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="75.3425%" y="709" width="0.7252%" height="15" fill="rgb(244,214,29)" fg:x="935" fg:w="9"/><text x="75.5925%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (9 samples, 0.73%)</title><rect x="75.3425%" y="693" width="0.7252%" height="15" fill="rgb(220,75,29)" fg:x="935" fg:w="9"/><text x="75.5925%" y="703.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.73%)</title><rect x="75.3425%" y="677" width="0.7252%" height="15" fill="rgb(214,183,37)" fg:x="935" fg:w="9"/><text x="75.5925%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="75.5842%" y="661" width="0.4835%" height="15" fill="rgb(239,117,29)" fg:x="938" fg:w="6"/><text x="75.8342%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="75.5842%" y="645" width="0.4835%" height="15" fill="rgb(237,171,35)" fg:x="938" fg:w="6"/><text x="75.8342%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.7454%" y="629" width="0.3223%" height="15" fill="rgb(229,178,53)" fg:x="940" fg:w="4"/><text x="75.9954%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="75.9871%" y="613" width="0.0806%" height="15" fill="rgb(210,102,19)" fg:x="943" fg:w="1"/><text x="76.2371%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.9871%" y="597" width="0.0806%" height="15" fill="rgb(235,127,22)" fg:x="943" fg:w="1"/><text x="76.2371%" y="607.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 1.29%)</title><rect x="74.8590%" y="741" width="1.2893%" height="15" fill="rgb(244,31,31)" fg:x="929" fg:w="16"/><text x="75.1090%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (10 samples, 0.81%)</title><rect x="75.3425%" y="725" width="0.8058%" height="15" fill="rgb(231,43,21)" fg:x="935" fg:w="10"/><text x="75.5925%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.0677%" y="709" width="0.0806%" height="15" fill="rgb(217,131,35)" fg:x="944" fg:w="1"/><text x="76.3177%" y="719.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="76.1483%" y="645" width="0.0806%" height="15" fill="rgb(221,149,4)" fg:x="945" fg:w="1"/><text x="76.3983%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="76.1483%" y="629" width="0.0806%" height="15" fill="rgb(232,170,28)" fg:x="945" fg:w="1"/><text x="76.3983%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="76.1483%" y="613" width="0.0806%" height="15" fill="rgb(238,56,10)" fg:x="945" fg:w="1"/><text x="76.3983%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="76.1483%" y="597" width="0.0806%" height="15" fill="rgb(235,196,14)" fg:x="945" fg:w="1"/><text x="76.3983%" y="607.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1483%" y="581" width="0.0806%" height="15" fill="rgb(216,45,48)" fg:x="945" fg:w="1"/><text x="76.3983%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="76.1483%" y="565" width="0.0806%" height="15" fill="rgb(238,213,17)" fg:x="945" fg:w="1"/><text x="76.3983%" y="575.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="76.1483%" y="549" width="0.0806%" height="15" fill="rgb(212,13,2)" fg:x="945" fg:w="1"/><text x="76.3983%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="76.1483%" y="533" width="0.0806%" height="15" fill="rgb(240,114,20)" fg:x="945" fg:w="1"/><text x="76.3983%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="76.1483%" y="517" width="0.0806%" height="15" fill="rgb(228,41,40)" fg:x="945" fg:w="1"/><text x="76.3983%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="76.1483%" y="501" width="0.0806%" height="15" fill="rgb(244,132,35)" fg:x="945" fg:w="1"/><text x="76.3983%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.1483%" y="485" width="0.0806%" height="15" fill="rgb(253,189,4)" fg:x="945" fg:w="1"/><text x="76.3983%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.08%)</title><rect x="76.1483%" y="469" width="0.0806%" height="15" fill="rgb(224,37,19)" fg:x="945" fg:w="1"/><text x="76.3983%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.1483%" y="453" width="0.0806%" height="15" fill="rgb(235,223,18)" fg:x="945" fg:w="1"/><text x="76.3983%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.08%)</title><rect x="76.1483%" y="437" width="0.0806%" height="15" fill="rgb(235,163,25)" fg:x="945" fg:w="1"/><text x="76.3983%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.1483%" y="421" width="0.0806%" height="15" fill="rgb(217,145,28)" fg:x="945" fg:w="1"/><text x="76.3983%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="76.1483%" y="405" width="0.0806%" height="15" fill="rgb(223,223,32)" fg:x="945" fg:w="1"/><text x="76.3983%" y="415.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="76.1483%" y="389" width="0.0806%" height="15" fill="rgb(227,189,39)" fg:x="945" fg:w="1"/><text x="76.3983%" y="399.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="76.1483%" y="373" width="0.0806%" height="15" fill="rgb(248,10,22)" fg:x="945" fg:w="1"/><text x="76.3983%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="76.1483%" y="357" width="0.0806%" height="15" fill="rgb(248,46,39)" fg:x="945" fg:w="1"/><text x="76.3983%" y="367.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (2 samples, 0.16%)</title><rect x="76.1483%" y="661" width="0.1612%" height="15" fill="rgb(248,113,48)" fg:x="945" fg:w="2"/><text x="76.3983%" y="671.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.2288%" y="645" width="0.0806%" height="15" fill="rgb(245,16,25)" fg:x="946" fg:w="1"/><text x="76.4788%" y="655.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.2288%" y="629" width="0.0806%" height="15" fill="rgb(249,152,16)" fg:x="946" fg:w="1"/><text x="76.4788%" y="639.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.2288%" y="613" width="0.0806%" height="15" fill="rgb(250,16,1)" fg:x="946" fg:w="1"/><text x="76.4788%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.2288%" y="597" width="0.0806%" height="15" fill="rgb(249,138,3)" fg:x="946" fg:w="1"/><text x="76.4788%" y="607.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.2288%" y="581" width="0.0806%" height="15" fill="rgb(227,71,41)" fg:x="946" fg:w="1"/><text x="76.4788%" y="591.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.2288%" y="565" width="0.0806%" height="15" fill="rgb(209,184,23)" fg:x="946" fg:w="1"/><text x="76.4788%" y="575.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.2288%" y="549" width="0.0806%" height="15" fill="rgb(223,215,31)" fg:x="946" fg:w="1"/><text x="76.4788%" y="559.50"></text></g><g><title>glob::is_dir (3 samples, 0.24%)</title><rect x="76.3094%" y="597" width="0.2417%" height="15" fill="rgb(210,146,28)" fg:x="947" fg:w="3"/><text x="76.5594%" y="607.50"></text></g><g><title>std::sys::unix::fs::stat (3 samples, 0.24%)</title><rect x="76.3094%" y="581" width="0.2417%" height="15" fill="rgb(209,183,41)" fg:x="947" fg:w="3"/><text x="76.5594%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (3 samples, 0.24%)</title><rect x="76.3094%" y="565" width="0.2417%" height="15" fill="rgb(209,224,45)" fg:x="947" fg:w="3"/><text x="76.5594%" y="575.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (3 samples, 0.24%)</title><rect x="76.3094%" y="549" width="0.2417%" height="15" fill="rgb(224,209,51)" fg:x="947" fg:w="3"/><text x="76.5594%" y="559.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (3 samples, 0.24%)</title><rect x="76.3094%" y="533" width="0.2417%" height="15" fill="rgb(223,17,39)" fg:x="947" fg:w="3"/><text x="76.5594%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx (3 samples, 0.24%)</title><rect x="76.3094%" y="517" width="0.2417%" height="15" fill="rgb(234,204,37)" fg:x="947" fg:w="3"/><text x="76.5594%" y="527.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (3 samples, 0.24%)</title><rect x="76.3094%" y="501" width="0.2417%" height="15" fill="rgb(236,120,5)" fg:x="947" fg:w="3"/><text x="76.5594%" y="511.50"></text></g><g><title>statx (3 samples, 0.24%)</title><rect x="76.3094%" y="485" width="0.2417%" height="15" fill="rgb(248,97,27)" fg:x="947" fg:w="3"/><text x="76.5594%" y="495.50"></text></g><g><title>&lt;plugins_rune::RunePlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="76.3094%" y="661" width="0.3223%" height="15" fill="rgb(240,66,17)" fg:x="947" fg:w="4"/><text x="76.5594%" y="671.50"></text></g><g><title>plugins_rune::sources::load_directory_sources (4 samples, 0.32%)</title><rect x="76.3094%" y="645" width="0.3223%" height="15" fill="rgb(210,79,3)" fg:x="947" fg:w="4"/><text x="76.5594%" y="655.50"></text></g><g><title>&lt;glob::Paths as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="76.3094%" y="629" width="0.3223%" height="15" fill="rgb(214,176,27)" fg:x="947" fg:w="4"/><text x="76.5594%" y="639.50"></text></g><g><title>glob::fill_todo (4 samples, 0.32%)</title><rect x="76.3094%" y="613" width="0.3223%" height="15" fill="rgb(235,185,3)" fg:x="947" fg:w="4"/><text x="76.5594%" y="623.50"></text></g><g><title>std::sys::unix::fs::stat (1 samples, 0.08%)</title><rect x="76.5512%" y="597" width="0.0806%" height="15" fill="rgb(227,24,12)" fg:x="950" fg:w="1"/><text x="76.8012%" y="607.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (1 samples, 0.08%)</title><rect x="76.5512%" y="581" width="0.0806%" height="15" fill="rgb(252,169,48)" fg:x="950" fg:w="1"/><text x="76.8012%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="76.5512%" y="565" width="0.0806%" height="15" fill="rgb(212,65,1)" fg:x="950" fg:w="1"/><text x="76.8012%" y="575.50"></text></g><g><title>std::sys::unix::fs::stat::{{closure}} (1 samples, 0.08%)</title><rect x="76.5512%" y="549" width="0.0806%" height="15" fill="rgb(242,39,24)" fg:x="950" fg:w="1"/><text x="76.8012%" y="559.50"></text></g><g><title>std::sys::unix::fs::try_statx (1 samples, 0.08%)</title><rect x="76.5512%" y="533" width="0.0806%" height="15" fill="rgb(249,32,23)" fg:x="950" fg:w="1"/><text x="76.8012%" y="543.50"></text></g><g><title>std::sys::unix::fs::try_statx::statx (1 samples, 0.08%)</title><rect x="76.5512%" y="517" width="0.0806%" height="15" fill="rgb(251,195,23)" fg:x="950" fg:w="1"/><text x="76.8012%" y="527.50"></text></g><g><title>statx (1 samples, 0.08%)</title><rect x="76.5512%" y="501" width="0.0806%" height="15" fill="rgb(236,174,8)" fg:x="950" fg:w="1"/><text x="76.8012%" y="511.50"></text></g><g><title>&lt;plugins_core::fashion::FashionPlugin as kernel::plugins::Plugin&gt;::schema (1 samples, 0.08%)</title><rect x="76.6317%" y="629" width="0.0806%" height="15" fill="rgb(220,197,8)" fg:x="951" fg:w="1"/><text x="76.8817%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (1 samples, 0.08%)</title><rect x="76.6317%" y="613" width="0.0806%" height="15" fill="rgb(240,108,37)" fg:x="951" fg:w="1"/><text x="76.8817%" y="623.50"></text></g><g><title>&lt;plugins_core::fashion::actions::RemoveAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.6317%" y="597" width="0.0806%" height="15" fill="rgb(232,176,24)" fg:x="951" fg:w="1"/><text x="76.8817%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.6317%" y="581" width="0.0806%" height="15" fill="rgb(243,35,29)" fg:x="951" fg:w="1"/><text x="76.8817%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.6317%" y="565" width="0.0806%" height="15" fill="rgb(210,37,18)" fg:x="951" fg:w="1"/><text x="76.8817%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.6317%" y="549" width="0.0806%" height="15" fill="rgb(224,184,40)" fg:x="951" fg:w="1"/><text x="76.8817%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.6317%" y="533" width="0.0806%" height="15" fill="rgb(236,39,29)" fg:x="951" fg:w="1"/><text x="76.8817%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="76.7123%" y="597" width="0.0806%" height="15" fill="rgb(232,48,39)" fg:x="952" fg:w="1"/><text x="76.9623%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="76.7123%" y="581" width="0.0806%" height="15" fill="rgb(236,34,42)" fg:x="952" fg:w="1"/><text x="76.9623%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.7123%" y="565" width="0.0806%" height="15" fill="rgb(243,106,37)" fg:x="952" fg:w="1"/><text x="76.9623%" y="575.50"></text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Plugin&gt;::schema (2 samples, 0.16%)</title><rect x="76.7123%" y="629" width="0.1612%" height="15" fill="rgb(218,96,6)" fg:x="952" fg:w="2"/><text x="76.9623%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (2 samples, 0.16%)</title><rect x="76.7123%" y="613" width="0.1612%" height="15" fill="rgb(235,130,12)" fg:x="952" fg:w="2"/><text x="76.9623%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="76.7929%" y="597" width="0.0806%" height="15" fill="rgb(231,95,0)" fg:x="953" fg:w="1"/><text x="77.0429%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="76.7929%" y="581" width="0.0806%" height="15" fill="rgb(228,12,23)" fg:x="953" fg:w="1"/><text x="77.0429%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="76.7929%" y="565" width="0.0806%" height="15" fill="rgb(216,12,1)" fg:x="953" fg:w="1"/><text x="77.0429%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::actions::AddRouteAction as kernel::plugins::HasActionSchema&gt;::action_schema (1 samples, 0.08%)</title><rect x="76.8735%" y="597" width="0.0806%" height="15" fill="rgb(219,59,3)" fg:x="954" fg:w="1"/><text x="77.1235%" y="607.50"></text></g><g><title>kernel::plugins::ActionSchema::arg (1 samples, 0.08%)</title><rect x="76.8735%" y="581" width="0.0806%" height="15" fill="rgb(215,208,46)" fg:x="954" fg:w="1"/><text x="77.1235%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.9541%" y="597" width="0.0806%" height="15" fill="rgb(254,224,29)" fg:x="955" fg:w="1"/><text x="77.2041%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="77.0346%" y="597" width="0.0806%" height="15" fill="rgb(232,14,29)" fg:x="956" fg:w="1"/><text x="77.2846%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.0346%" y="581" width="0.0806%" height="15" fill="rgb(208,45,52)" fg:x="956" fg:w="1"/><text x="77.2846%" y="591.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.0346%" y="565" width="0.0806%" height="15" fill="rgb(234,191,28)" fg:x="956" fg:w="1"/><text x="77.2846%" y="575.50"></text></g><g><title>&lt;plugins_core::moving::MovingPlugin as kernel::plugins::Plugin&gt;::schema (4 samples, 0.32%)</title><rect x="76.8735%" y="629" width="0.3223%" height="15" fill="rgb(244,67,43)" fg:x="954" fg:w="4"/><text x="77.1235%" y="639.50"></text></g><g><title>kernel::plugins::Schema::action (4 samples, 0.32%)</title><rect x="76.8735%" y="613" width="0.3223%" height="15" fill="rgb(236,189,24)" fg:x="954" fg:w="4"/><text x="77.1235%" y="623.50"></text></g><g><title>replies::identifier_to_key (1 samples, 0.08%)</title><rect x="77.1152%" y="597" width="0.0806%" height="15" fill="rgb(239,214,33)" fg:x="957" fg:w="1"/><text x="77.3652%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.1152%" y="581" width="0.0806%" height="15" fill="rgb(226,176,41)" fg:x="957" fg:w="1"/><text x="77.3652%" y="591.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9 samples, 0.73%)</title><rect x="76.6317%" y="661" width="0.7252%" height="15" fill="rgb(248,47,8)" fg:x="951" fg:w="9"/><text x="76.8817%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.73%)</title><rect x="76.6317%" y="645" width="0.7252%" height="15" fill="rgb(218,81,44)" fg:x="951" fg:w="9"/><text x="76.8817%" y="655.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="77.1958%" y="629" width="0.1612%" height="15" fill="rgb(213,98,6)" fg:x="958" fg:w="2"/><text x="77.4458%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="77.1958%" y="613" width="0.1612%" height="15" fill="rgb(222,85,22)" fg:x="958" fg:w="2"/><text x="77.4458%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="77.2764%" y="597" width="0.0806%" height="15" fill="rgb(239,46,39)" fg:x="959" fg:w="1"/><text x="77.5264%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.4376%" y="645" width="0.0806%" height="15" fill="rgb(237,12,29)" fg:x="961" fg:w="1"/><text x="77.6876%" y="655.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (18 samples, 1.45%)</title><rect x="76.1483%" y="677" width="1.4504%" height="15" fill="rgb(214,77,8)" fg:x="945" fg:w="18"/><text x="76.3983%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::plugins::Schema)&gt; (3 samples, 0.24%)</title><rect x="77.3570%" y="661" width="0.2417%" height="15" fill="rgb(217,168,37)" fg:x="960" fg:w="3"/><text x="77.6070%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::plugins::ArgSchema&gt;&gt; (1 samples, 0.08%)</title><rect x="77.5181%" y="645" width="0.0806%" height="15" fill="rgb(221,217,23)" fg:x="962" fg:w="1"/><text x="77.7681%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.5181%" y="629" width="0.0806%" height="15" fill="rgb(243,229,36)" fg:x="962" fg:w="1"/><text x="77.7681%" y="639.50"></text></g><g><title>engine::session::Session::initialize (20 samples, 1.61%)</title><rect x="76.1483%" y="693" width="1.6116%" height="15" fill="rgb(251,163,40)" fg:x="945" fg:w="20"/><text x="76.3983%" y="703.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (2 samples, 0.16%)</title><rect x="77.5987%" y="677" width="0.1612%" height="15" fill="rgb(237,222,12)" fg:x="963" fg:w="2"/><text x="77.8487%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.5987%" y="661" width="0.1612%" height="15" fill="rgb(248,132,6)" fg:x="963" fg:w="2"/><text x="77.8487%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.6793%" y="645" width="0.0806%" height="15" fill="rgb(227,167,50)" fg:x="964" fg:w="1"/><text x="77.9293%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.6793%" y="629" width="0.0806%" height="15" fill="rgb(242,84,37)" fg:x="964" fg:w="1"/><text x="77.9293%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.6793%" y="613" width="0.0806%" height="15" fill="rgb(212,4,50)" fg:x="964" fg:w="1"/><text x="77.9293%" y="623.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (22 samples, 1.77%)</title><rect x="76.1483%" y="741" width="1.7728%" height="15" fill="rgb(230,228,32)" fg:x="945" fg:w="22"/><text x="76.3983%" y="751.50">&lt;..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (22 samples, 1.77%)</title><rect x="76.1483%" y="725" width="1.7728%" height="15" fill="rgb(248,217,23)" fg:x="945" fg:w="22"/><text x="76.3983%" y="735.50">e..</text></g><g><title>engine::session::Session::new (22 samples, 1.77%)</title><rect x="76.1483%" y="709" width="1.7728%" height="15" fill="rgb(238,197,32)" fg:x="945" fg:w="22"/><text x="76.3983%" y="719.50">e..</text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="77.7599%" y="693" width="0.1612%" height="15" fill="rgb(236,106,1)" fg:x="965" fg:w="2"/><text x="78.0099%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="77.7599%" y="677" width="0.1612%" height="15" fill="rgb(219,228,13)" fg:x="965" fg:w="2"/><text x="78.0099%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="77.8405%" y="661" width="0.0806%" height="15" fill="rgb(238,30,35)" fg:x="966" fg:w="1"/><text x="78.0905%" y="671.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.8405%" y="645" width="0.0806%" height="15" fill="rgb(236,70,23)" fg:x="966" fg:w="1"/><text x="78.0905%" y="655.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.8405%" y="629" width="0.0806%" height="15" fill="rgb(249,104,48)" fg:x="966" fg:w="1"/><text x="78.0905%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="78.0822%" y="581" width="0.1612%" height="15" fill="rgb(254,117,50)" fg:x="969" fg:w="2"/><text x="78.3322%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.0822%" y="565" width="0.1612%" height="15" fill="rgb(223,152,4)" fg:x="969" fg:w="2"/><text x="78.3322%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="78.2434%" y="581" width="0.1612%" height="15" fill="rgb(245,6,2)" fg:x="971" fg:w="2"/><text x="78.4934%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="78.2434%" y="565" width="0.1612%" height="15" fill="rgb(249,150,24)" fg:x="971" fg:w="2"/><text x="78.4934%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.48%)</title><rect x="78.0016%" y="629" width="0.4835%" height="15" fill="rgb(228,185,42)" fg:x="968" fg:w="6"/><text x="78.2516%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="78.0822%" y="613" width="0.4029%" height="15" fill="rgb(226,39,33)" fg:x="969" fg:w="5"/><text x="78.3322%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="78.0822%" y="597" width="0.4029%" height="15" fill="rgb(221,166,19)" fg:x="969" fg:w="5"/><text x="78.3322%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="78.4045%" y="581" width="0.0806%" height="15" fill="rgb(209,109,2)" fg:x="973" fg:w="1"/><text x="78.6545%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="78.5657%" y="597" width="0.0806%" height="15" fill="rgb(252,216,26)" fg:x="975" fg:w="1"/><text x="78.8157%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.5657%" y="581" width="0.0806%" height="15" fill="rgb(227,173,36)" fg:x="975" fg:w="1"/><text x="78.8157%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="78.6463%" y="597" width="0.2417%" height="15" fill="rgb(209,90,7)" fg:x="976" fg:w="3"/><text x="78.8963%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.8074%" y="581" width="0.0806%" height="15" fill="rgb(250,194,11)" fg:x="978" fg:w="1"/><text x="79.0574%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.8074%" y="565" width="0.0806%" height="15" fill="rgb(220,72,50)" fg:x="978" fg:w="1"/><text x="79.0574%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.8074%" y="549" width="0.0806%" height="15" fill="rgb(222,106,48)" fg:x="978" fg:w="1"/><text x="79.0574%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.8880%" y="581" width="0.0806%" height="15" fill="rgb(216,220,45)" fg:x="979" fg:w="1"/><text x="79.1380%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (7 samples, 0.56%)</title><rect x="78.4851%" y="629" width="0.5641%" height="15" fill="rgb(234,112,18)" fg:x="974" fg:w="7"/><text x="78.7351%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="78.5657%" y="613" width="0.4835%" height="15" fill="rgb(206,179,9)" fg:x="975" fg:w="6"/><text x="78.8157%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="78.8880%" y="597" width="0.1612%" height="15" fill="rgb(215,115,40)" fg:x="979" fg:w="2"/><text x="79.1380%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9686%" y="581" width="0.0806%" height="15" fill="rgb(222,69,34)" fg:x="980" fg:w="1"/><text x="79.2186%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="78.9686%" y="565" width="0.0806%" height="15" fill="rgb(209,161,10)" fg:x="980" fg:w="1"/><text x="79.2186%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="78.9686%" y="549" width="0.0806%" height="15" fill="rgb(217,6,38)" fg:x="980" fg:w="1"/><text x="79.2186%" y="559.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="79.0492%" y="597" width="0.0806%" height="15" fill="rgb(229,229,48)" fg:x="981" fg:w="1"/><text x="79.2992%" y="607.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.0492%" y="581" width="0.0806%" height="15" fill="rgb(225,21,28)" fg:x="981" fg:w="1"/><text x="79.2992%" y="591.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (2 samples, 0.16%)</title><rect x="79.0492%" y="613" width="0.1612%" height="15" fill="rgb(206,33,13)" fg:x="981" fg:w="2"/><text x="79.2992%" y="623.50"></text></g><g><title>burrow_bon::dotted::DottedPaths::truncate (1 samples, 0.08%)</title><rect x="79.1297%" y="597" width="0.0806%" height="15" fill="rgb(242,178,17)" fg:x="982" fg:w="1"/><text x="79.3797%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="79.1297%" y="581" width="0.0806%" height="15" fill="rgb(220,162,5)" fg:x="982" fg:w="1"/><text x="79.3797%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1297%" y="565" width="0.0806%" height="15" fill="rgb(210,33,43)" fg:x="982" fg:w="1"/><text x="79.3797%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.2103%" y="581" width="0.0806%" height="15" fill="rgb(216,116,54)" fg:x="983" fg:w="1"/><text x="79.4603%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="79.2103%" y="565" width="0.0806%" height="15" fill="rgb(249,92,24)" fg:x="983" fg:w="1"/><text x="79.4603%" y="575.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.53%)</title><rect x="77.9210%" y="725" width="1.5310%" height="15" fill="rgb(231,189,14)" fg:x="967" fg:w="19"/><text x="78.1710%" y="735.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.53%)</title><rect x="77.9210%" y="709" width="1.5310%" height="15" fill="rgb(230,8,41)" fg:x="967" fg:w="19"/><text x="78.1710%" y="719.50"></text></g><g><title>engine::session::state::State::flush_entities (18 samples, 1.45%)</title><rect x="78.0016%" y="693" width="1.4504%" height="15" fill="rgb(249,7,27)" fg:x="968" fg:w="18"/><text x="78.2516%" y="703.50"></text></g><g><title>core::iter::adapters::try_process (18 samples, 1.45%)</title><rect x="78.0016%" y="677" width="1.4504%" height="15" fill="rgb(232,86,5)" fg:x="968" fg:w="18"/><text x="78.2516%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 1.45%)</title><rect x="78.0016%" y="661" width="1.4504%" height="15" fill="rgb(224,175,18)" fg:x="968" fg:w="18"/><text x="78.2516%" y="671.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (18 samples, 1.45%)</title><rect x="78.0016%" y="645" width="1.4504%" height="15" fill="rgb(220,129,12)" fg:x="968" fg:w="18"/><text x="78.2516%" y="655.50"></text></g><g><title>kernel::model::any_entity_changes (5 samples, 0.40%)</title><rect x="79.0492%" y="629" width="0.4029%" height="15" fill="rgb(210,19,36)" fg:x="981" fg:w="5"/><text x="79.2992%" y="639.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="79.2103%" y="613" width="0.2417%" height="15" fill="rgb(219,96,14)" fg:x="983" fg:w="3"/><text x="79.4603%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="79.2103%" y="597" width="0.2417%" height="15" fill="rgb(249,106,1)" fg:x="983" fg:w="3"/><text x="79.4603%" y="607.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="79.2909%" y="581" width="0.1612%" height="15" fill="rgb(249,155,20)" fg:x="984" fg:w="2"/><text x="79.5409%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="79.2909%" y="565" width="0.1612%" height="15" fill="rgb(244,168,9)" fg:x="984" fg:w="2"/><text x="79.5409%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.3715%" y="549" width="0.0806%" height="15" fill="rgb(216,23,50)" fg:x="985" fg:w="1"/><text x="79.6215%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.3715%" y="533" width="0.0806%" height="15" fill="rgb(224,219,20)" fg:x="985" fg:w="1"/><text x="79.6215%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3715%" y="517" width="0.0806%" height="15" fill="rgb(222,156,15)" fg:x="985" fg:w="1"/><text x="79.6215%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.3715%" y="501" width="0.0806%" height="15" fill="rgb(231,97,17)" fg:x="985" fg:w="1"/><text x="79.6215%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3715%" y="485" width="0.0806%" height="15" fill="rgb(218,70,48)" fg:x="985" fg:w="1"/><text x="79.6215%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.3715%" y="469" width="0.0806%" height="15" fill="rgb(212,196,52)" fg:x="985" fg:w="1"/><text x="79.6215%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="79.3715%" y="453" width="0.0806%" height="15" fill="rgb(243,203,18)" fg:x="985" fg:w="1"/><text x="79.6215%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="79.3715%" y="437" width="0.0806%" height="15" fill="rgb(252,125,41)" fg:x="985" fg:w="1"/><text x="79.6215%" y="447.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="79.4521%" y="725" width="0.0806%" height="15" fill="rgb(223,180,33)" fg:x="986" fg:w="1"/><text x="79.7021%" y="735.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="79.4521%" y="709" width="0.0806%" height="15" fill="rgb(254,159,46)" fg:x="986" fg:w="1"/><text x="79.7021%" y="719.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.4521%" y="693" width="0.0806%" height="15" fill="rgb(254,38,10)" fg:x="986" fg:w="1"/><text x="79.7021%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.4521%" y="677" width="0.0806%" height="15" fill="rgb(208,217,32)" fg:x="986" fg:w="1"/><text x="79.7021%" y="687.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.4521%" y="661" width="0.0806%" height="15" fill="rgb(221,120,13)" fg:x="986" fg:w="1"/><text x="79.7021%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.4521%" y="645" width="0.0806%" height="15" fill="rgb(246,54,52)" fg:x="986" fg:w="1"/><text x="79.7021%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.4521%" y="629" width="0.0806%" height="15" fill="rgb(242,34,25)" fg:x="986" fg:w="1"/><text x="79.7021%" y="639.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.5326%" y="709" width="0.0806%" height="15" fill="rgb(247,209,9)" fg:x="987" fg:w="1"/><text x="79.7826%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.5326%" y="693" width="0.0806%" height="15" fill="rgb(228,71,26)" fg:x="987" fg:w="1"/><text x="79.7826%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5326%" y="677" width="0.0806%" height="15" fill="rgb(222,145,49)" fg:x="987" fg:w="1"/><text x="79.7826%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5326%" y="661" width="0.0806%" height="15" fill="rgb(218,121,17)" fg:x="987" fg:w="1"/><text x="79.7826%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="79.5326%" y="645" width="0.0806%" height="15" fill="rgb(244,50,7)" fg:x="987" fg:w="1"/><text x="79.7826%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="79.5326%" y="629" width="0.0806%" height="15" fill="rgb(246,229,37)" fg:x="987" fg:w="1"/><text x="79.7826%" y="639.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="79.6132%" y="677" width="0.0806%" height="15" fill="rgb(225,18,5)" fg:x="988" fg:w="1"/><text x="79.8632%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="79.6132%" y="661" width="0.0806%" height="15" fill="rgb(213,204,8)" fg:x="988" fg:w="1"/><text x="79.8632%" y="671.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="79.6132%" y="645" width="0.0806%" height="15" fill="rgb(238,103,6)" fg:x="988" fg:w="1"/><text x="79.8632%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.6132%" y="629" width="0.0806%" height="15" fill="rgb(222,25,35)" fg:x="988" fg:w="1"/><text x="79.8632%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.6132%" y="613" width="0.0806%" height="15" fill="rgb(213,203,35)" fg:x="988" fg:w="1"/><text x="79.8632%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.6132%" y="597" width="0.0806%" height="15" fill="rgb(221,79,53)" fg:x="988" fg:w="1"/><text x="79.8632%" y="607.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="79.6938%" y="677" width="0.0806%" height="15" fill="rgb(243,200,35)" fg:x="989" fg:w="1"/><text x="79.9438%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.6938%" y="661" width="0.0806%" height="15" fill="rgb(248,60,25)" fg:x="989" fg:w="1"/><text x="79.9438%" y="671.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="79.5326%" y="725" width="0.3223%" height="15" fill="rgb(227,53,46)" fg:x="987" fg:w="4"/><text x="79.7826%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="79.6132%" y="709" width="0.2417%" height="15" fill="rgb(216,120,32)" fg:x="988" fg:w="3"/><text x="79.8632%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="79.6132%" y="693" width="0.2417%" height="15" fill="rgb(220,134,1)" fg:x="988" fg:w="3"/><text x="79.8632%" y="703.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7744%" y="677" width="0.0806%" height="15" fill="rgb(237,168,5)" fg:x="990" fg:w="1"/><text x="80.0244%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.7744%" y="661" width="0.0806%" height="15" fill="rgb(231,100,33)" fg:x="990" fg:w="1"/><text x="80.0244%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7744%" y="645" width="0.0806%" height="15" fill="rgb(236,177,47)" fg:x="990" fg:w="1"/><text x="80.0244%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.7744%" y="629" width="0.0806%" height="15" fill="rgb(235,7,49)" fg:x="990" fg:w="1"/><text x="80.0244%" y="639.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="79.8550%" y="693" width="0.0806%" height="15" fill="rgb(232,119,22)" fg:x="991" fg:w="1"/><text x="80.1050%" y="703.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="79.8550%" y="677" width="0.0806%" height="15" fill="rgb(254,73,53)" fg:x="991" fg:w="1"/><text x="80.1050%" y="687.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.8550%" y="661" width="0.0806%" height="15" fill="rgb(251,35,20)" fg:x="991" fg:w="1"/><text x="80.1050%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="79.8550%" y="645" width="0.0806%" height="15" fill="rgb(241,119,20)" fg:x="991" fg:w="1"/><text x="80.1050%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8550%" y="629" width="0.0806%" height="15" fill="rgb(207,102,14)" fg:x="991" fg:w="1"/><text x="80.1050%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8550%" y="613" width="0.0806%" height="15" fill="rgb(248,201,50)" fg:x="991" fg:w="1"/><text x="80.1050%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.8550%" y="597" width="0.0806%" height="15" fill="rgb(222,185,44)" fg:x="991" fg:w="1"/><text x="80.1050%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8550%" y="581" width="0.0806%" height="15" fill="rgb(218,107,18)" fg:x="991" fg:w="1"/><text x="80.1050%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.8550%" y="565" width="0.0806%" height="15" fill="rgb(237,177,39)" fg:x="991" fg:w="1"/><text x="80.1050%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.8550%" y="549" width="0.0806%" height="15" fill="rgb(246,69,6)" fg:x="991" fg:w="1"/><text x="80.1050%" y="559.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="79.9355%" y="693" width="0.0806%" height="15" fill="rgb(234,208,37)" fg:x="992" fg:w="1"/><text x="80.1855%" y="703.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9355%" y="677" width="0.0806%" height="15" fill="rgb(225,4,6)" fg:x="992" fg:w="1"/><text x="80.1855%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9355%" y="661" width="0.0806%" height="15" fill="rgb(233,45,0)" fg:x="992" fg:w="1"/><text x="80.1855%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.9355%" y="645" width="0.0806%" height="15" fill="rgb(226,136,5)" fg:x="992" fg:w="1"/><text x="80.1855%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="79.9355%" y="629" width="0.0806%" height="15" fill="rgb(211,91,47)" fg:x="992" fg:w="1"/><text x="80.1855%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="79.9355%" y="613" width="0.0806%" height="15" fill="rgb(242,88,51)" fg:x="992" fg:w="1"/><text x="80.1855%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9355%" y="597" width="0.0806%" height="15" fill="rgb(230,91,28)" fg:x="992" fg:w="1"/><text x="80.1855%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="79.9355%" y="581" width="0.0806%" height="15" fill="rgb(254,186,29)" fg:x="992" fg:w="1"/><text x="80.1855%" y="591.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="80.0161%" y="693" width="0.0806%" height="15" fill="rgb(238,6,4)" fg:x="993" fg:w="1"/><text x="80.2661%" y="703.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="80.0161%" y="677" width="0.0806%" height="15" fill="rgb(221,151,16)" fg:x="993" fg:w="1"/><text x="80.2661%" y="687.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (4 samples, 0.32%)</title><rect x="79.8550%" y="725" width="0.3223%" height="15" fill="rgb(251,143,52)" fg:x="991" fg:w="4"/><text x="80.1050%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (4 samples, 0.32%)</title><rect x="79.8550%" y="709" width="0.3223%" height="15" fill="rgb(206,90,15)" fg:x="991" fg:w="4"/><text x="80.1050%" y="719.50"></text></g><g><title>plugins_core::location::model::Location::set (1 samples, 0.08%)</title><rect x="80.0967%" y="693" width="0.0806%" height="15" fill="rgb(218,35,8)" fg:x="994" fg:w="1"/><text x="80.3467%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="80.0967%" y="677" width="0.0806%" height="15" fill="rgb(239,215,6)" fg:x="994" fg:w="1"/><text x="80.3467%" y="687.50"></text></g><g><title>plugins_core::location::model::_::&lt;impl serde::ser::Serialize for plugins_core::location::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0967%" y="661" width="0.0806%" height="15" fill="rgb(245,116,39)" fg:x="994" fg:w="1"/><text x="80.3467%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0967%" y="645" width="0.0806%" height="15" fill="rgb(242,65,28)" fg:x="994" fg:w="1"/><text x="80.3467%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0967%" y="629" width="0.0806%" height="15" fill="rgb(252,132,53)" fg:x="994" fg:w="1"/><text x="80.3467%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.0967%" y="613" width="0.0806%" height="15" fill="rgb(224,159,50)" fg:x="994" fg:w="1"/><text x="80.3467%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.0967%" y="597" width="0.0806%" height="15" fill="rgb(224,93,4)" fg:x="994" fg:w="1"/><text x="80.3467%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="80.2579%" y="709" width="0.0806%" height="15" fill="rgb(208,81,34)" fg:x="996" fg:w="1"/><text x="80.5079%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.2579%" y="693" width="0.0806%" height="15" fill="rgb(233,92,54)" fg:x="996" fg:w="1"/><text x="80.5079%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="80.3384%" y="645" width="0.0806%" height="15" fill="rgb(237,21,14)" fg:x="997" fg:w="1"/><text x="80.5884%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="80.3384%" y="629" width="0.0806%" height="15" fill="rgb(249,128,51)" fg:x="997" fg:w="1"/><text x="80.5884%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="80.3384%" y="613" width="0.0806%" height="15" fill="rgb(223,129,24)" fg:x="997" fg:w="1"/><text x="80.5884%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="80.4996%" y="565" width="0.0806%" height="15" fill="rgb(231,168,25)" fg:x="999" fg:w="1"/><text x="80.7496%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="80.4996%" y="549" width="0.0806%" height="15" fill="rgb(224,39,20)" fg:x="999" fg:w="1"/><text x="80.7496%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="80.4996%" y="597" width="0.1612%" height="15" fill="rgb(225,152,53)" fg:x="999" fg:w="2"/><text x="80.7496%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="80.4996%" y="581" width="0.1612%" height="15" fill="rgb(252,17,24)" fg:x="999" fg:w="2"/><text x="80.7496%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.5802%" y="565" width="0.0806%" height="15" fill="rgb(250,114,30)" fg:x="1000" fg:w="1"/><text x="80.8302%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.7413%" y="565" width="0.0806%" height="15" fill="rgb(229,5,4)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.7413%" y="549" width="0.0806%" height="15" fill="rgb(225,176,49)" fg:x="1002" fg:w="1"/><text x="80.9913%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.8219%" y="549" width="0.0806%" height="15" fill="rgb(224,221,49)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8219%" y="533" width="0.0806%" height="15" fill="rgb(253,169,27)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.8219%" y="517" width="0.0806%" height="15" fill="rgb(211,206,16)" fg:x="1003" fg:w="1"/><text x="81.0719%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="80.9025%" y="533" width="0.1612%" height="15" fill="rgb(244,87,35)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="80.9025%" y="517" width="0.1612%" height="15" fill="rgb(246,28,10)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="80.9025%" y="501" width="0.1612%" height="15" fill="rgb(229,12,44)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="80.9025%" y="485" width="0.1612%" height="15" fill="rgb(210,145,37)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="80.9025%" y="469" width="0.1612%" height="15" fill="rgb(227,112,52)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="80.9025%" y="453" width="0.1612%" height="15" fill="rgb(238,155,34)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="463.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="80.9025%" y="437" width="0.1612%" height="15" fill="rgb(239,226,36)" fg:x="1004" fg:w="2"/><text x="81.1525%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.0637%" y="517" width="0.0806%" height="15" fill="rgb(230,16,23)" fg:x="1006" fg:w="1"/><text x="81.3137%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.64%)</title><rect x="80.6608%" y="597" width="0.6446%" height="15" fill="rgb(236,171,36)" fg:x="1001" fg:w="8"/><text x="80.9108%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.64%)</title><rect x="80.6608%" y="581" width="0.6446%" height="15" fill="rgb(221,22,14)" fg:x="1001" fg:w="8"/><text x="80.9108%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="80.8219%" y="565" width="0.4835%" height="15" fill="rgb(242,43,11)" fg:x="1003" fg:w="6"/><text x="81.0719%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="80.9025%" y="549" width="0.4029%" height="15" fill="rgb(232,69,23)" fg:x="1004" fg:w="5"/><text x="81.1525%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="81.0637%" y="533" width="0.2417%" height="15" fill="rgb(216,180,54)" fg:x="1006" fg:w="3"/><text x="81.3137%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="81.1442%" y="517" width="0.1612%" height="15" fill="rgb(216,5,24)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="81.1442%" y="501" width="0.1612%" height="15" fill="rgb(225,89,9)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="81.1442%" y="485" width="0.1612%" height="15" fill="rgb(243,75,33)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="81.1442%" y="469" width="0.1612%" height="15" fill="rgb(247,141,45)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="81.1442%" y="453" width="0.1612%" height="15" fill="rgb(232,177,36)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="81.1442%" y="437" width="0.1612%" height="15" fill="rgb(219,125,36)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="447.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="81.1442%" y="421" width="0.1612%" height="15" fill="rgb(227,94,9)" fg:x="1007" fg:w="2"/><text x="81.3942%" y="431.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="81.3054%" y="581" width="0.0806%" height="15" fill="rgb(240,34,52)" fg:x="1009" fg:w="1"/><text x="81.5554%" y="591.50"></text></g><g><title>&lt;burrow_bon::dotted::DottedPaths as core::convert::Into&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt;&gt;::into (1 samples, 0.08%)</title><rect x="81.3054%" y="565" width="0.0806%" height="15" fill="rgb(216,45,12)" fg:x="1009" fg:w="1"/><text x="81.5554%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="81.3054%" y="549" width="0.0806%" height="15" fill="rgb(246,21,19)" fg:x="1009" fg:w="1"/><text x="81.5554%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.3860%" y="549" width="0.0806%" height="15" fill="rgb(213,98,42)" fg:x="1010" fg:w="1"/><text x="81.6360%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="81.3860%" y="533" width="0.0806%" height="15" fill="rgb(250,136,47)" fg:x="1010" fg:w="1"/><text x="81.6360%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.4666%" y="549" width="0.0806%" height="15" fill="rgb(251,124,27)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.4666%" y="533" width="0.0806%" height="15" fill="rgb(229,180,14)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.4666%" y="517" width="0.0806%" height="15" fill="rgb(245,216,25)" fg:x="1011" fg:w="1"/><text x="81.7166%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.6277%" y="501" width="0.0806%" height="15" fill="rgb(251,43,5)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.6277%" y="485" width="0.0806%" height="15" fill="rgb(250,128,24)" fg:x="1013" fg:w="1"/><text x="81.8777%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.7083%" y="501" width="0.0806%" height="15" fill="rgb(217,117,27)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7083%" y="485" width="0.0806%" height="15" fill="rgb(245,147,4)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.7083%" y="469" width="0.0806%" height="15" fill="rgb(242,201,35)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7083%" y="453" width="0.0806%" height="15" fill="rgb(218,181,1)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.7083%" y="437" width="0.0806%" height="15" fill="rgb(222,6,29)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7083%" y="421" width="0.0806%" height="15" fill="rgb(208,186,3)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7083%" y="405" width="0.0806%" height="15" fill="rgb(216,36,26)" fg:x="1014" fg:w="1"/><text x="81.9583%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="81.7889%" y="485" width="0.0806%" height="15" fill="rgb(248,201,23)" fg:x="1015" fg:w="1"/><text x="82.0389%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.8695%" y="485" width="0.0806%" height="15" fill="rgb(251,170,31)" fg:x="1016" fg:w="1"/><text x="82.1195%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8695%" y="469" width="0.0806%" height="15" fill="rgb(207,110,25)" fg:x="1016" fg:w="1"/><text x="82.1195%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="81.8695%" y="453" width="0.0806%" height="15" fill="rgb(250,54,15)" fg:x="1016" fg:w="1"/><text x="82.1195%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="81.8695%" y="437" width="0.0806%" height="15" fill="rgb(227,68,33)" fg:x="1016" fg:w="1"/><text x="82.1195%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="81.5471%" y="533" width="0.4835%" height="15" fill="rgb(238,34,41)" fg:x="1012" fg:w="6"/><text x="81.7971%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="81.6277%" y="517" width="0.4029%" height="15" fill="rgb(220,11,15)" fg:x="1013" fg:w="5"/><text x="81.8777%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="81.7889%" y="501" width="0.2417%" height="15" fill="rgb(246,111,35)" fg:x="1015" fg:w="3"/><text x="82.0389%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9500%" y="485" width="0.0806%" height="15" fill="rgb(209,88,53)" fg:x="1017" fg:w="1"/><text x="82.2000%" y="495.50"></text></g><g><title>engine::session::Session::flush (22 samples, 1.77%)</title><rect x="80.3384%" y="709" width="1.7728%" height="15" fill="rgb(231,185,47)" fg:x="997" fg:w="22"/><text x="80.5884%" y="719.50">e..</text></g><g><title>engine::session::Session::save_changes (22 samples, 1.77%)</title><rect x="80.3384%" y="693" width="1.7728%" height="15" fill="rgb(233,154,1)" fg:x="997" fg:w="22"/><text x="80.5884%" y="703.50">e..</text></g><g><title>engine::session::state::State::close (22 samples, 1.77%)</title><rect x="80.3384%" y="677" width="1.7728%" height="15" fill="rgb(225,15,46)" fg:x="997" fg:w="22"/><text x="80.5884%" y="687.50">e..</text></g><g><title>engine::session::state::State::flush_entities (22 samples, 1.77%)</title><rect x="80.3384%" y="661" width="1.7728%" height="15" fill="rgb(211,135,41)" fg:x="997" fg:w="22"/><text x="80.5884%" y="671.50">e..</text></g><g><title>core::iter::adapters::try_process (21 samples, 1.69%)</title><rect x="80.4190%" y="645" width="1.6922%" height="15" fill="rgb(208,54,0)" fg:x="998" fg:w="21"/><text x="80.6690%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (21 samples, 1.69%)</title><rect x="80.4190%" y="629" width="1.6922%" height="15" fill="rgb(244,136,14)" fg:x="998" fg:w="21"/><text x="80.6690%" y="639.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (21 samples, 1.69%)</title><rect x="80.4190%" y="613" width="1.6922%" height="15" fill="rgb(241,56,14)" fg:x="998" fg:w="21"/><text x="80.6690%" y="623.50"></text></g><g><title>kernel::model::any_entity_changes (10 samples, 0.81%)</title><rect x="81.3054%" y="597" width="0.8058%" height="15" fill="rgb(205,80,24)" fg:x="1009" fg:w="10"/><text x="81.5554%" y="607.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.73%)</title><rect x="81.3860%" y="581" width="0.7252%" height="15" fill="rgb(220,57,4)" fg:x="1010" fg:w="9"/><text x="81.6360%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 0.73%)</title><rect x="81.3860%" y="565" width="0.7252%" height="15" fill="rgb(226,193,50)" fg:x="1010" fg:w="9"/><text x="81.6360%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="81.5471%" y="549" width="0.5641%" height="15" fill="rgb(231,168,22)" fg:x="1012" fg:w="7"/><text x="81.7971%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0306%" y="533" width="0.0806%" height="15" fill="rgb(254,215,14)" fg:x="1018" fg:w="1"/><text x="82.2806%" y="543.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="82.1112%" y="709" width="0.0806%" height="15" fill="rgb(211,115,16)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="719.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="82.1112%" y="693" width="0.0806%" height="15" fill="rgb(236,210,16)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="703.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="82.1112%" y="677" width="0.0806%" height="15" fill="rgb(221,94,12)" fg:x="1019" fg:w="1"/><text x="82.3612%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="82.1918%" y="693" width="0.0806%" height="15" fill="rgb(235,218,49)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="82.1918%" y="677" width="0.0806%" height="15" fill="rgb(217,114,14)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.1918%" y="661" width="0.0806%" height="15" fill="rgb(216,145,22)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.1918%" y="645" width="0.0806%" height="15" fill="rgb(217,112,39)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.1918%" y="629" width="0.0806%" height="15" fill="rgb(225,85,32)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="639.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1918%" y="613" width="0.0806%" height="15" fill="rgb(245,209,47)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.1918%" y="597" width="0.0806%" height="15" fill="rgb(218,220,15)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="607.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="82.1918%" y="581" width="0.0806%" height="15" fill="rgb(222,202,31)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="82.1918%" y="565" width="0.0806%" height="15" fill="rgb(243,203,4)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="82.1918%" y="549" width="0.0806%" height="15" fill="rgb(237,92,17)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="82.1918%" y="533" width="0.0806%" height="15" fill="rgb(231,119,7)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="82.1918%" y="517" width="0.0806%" height="15" fill="rgb(237,82,41)" fg:x="1020" fg:w="1"/><text x="82.4418%" y="527.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="82.1918%" y="709" width="0.1612%" height="15" fill="rgb(226,81,48)" fg:x="1020" fg:w="2"/><text x="82.4418%" y="719.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="82.2724%" y="693" width="0.0806%" height="15" fill="rgb(234,70,51)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="82.2724%" y="677" width="0.0806%" height="15" fill="rgb(251,86,4)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="687.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (1 samples, 0.08%)</title><rect x="82.2724%" y="661" width="0.0806%" height="15" fill="rgb(244,144,28)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="671.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.2724%" y="645" width="0.0806%" height="15" fill="rgb(232,161,39)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="655.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="82.2724%" y="629" width="0.0806%" height="15" fill="rgb(247,34,51)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="82.2724%" y="613" width="0.0806%" height="15" fill="rgb(225,132,2)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.2724%" y="597" width="0.0806%" height="15" fill="rgb(209,159,44)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="82.2724%" y="581" width="0.0806%" height="15" fill="rgb(251,214,1)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="82.2724%" y="565" width="0.0806%" height="15" fill="rgb(247,84,47)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="82.2724%" y="549" width="0.0806%" height="15" fill="rgb(240,111,43)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="82.2724%" y="533" width="0.0806%" height="15" fill="rgb(215,214,35)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="543.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="82.2724%" y="517" width="0.0806%" height="15" fill="rgb(248,207,23)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.2724%" y="501" width="0.0806%" height="15" fill="rgb(214,186,4)" fg:x="1021" fg:w="1"/><text x="82.5224%" y="511.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="82.3529%" y="661" width="0.1612%" height="15" fill="rgb(220,133,22)" fg:x="1022" fg:w="2"/><text x="82.6029%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (2 samples, 0.16%)</title><rect x="82.3529%" y="645" width="0.1612%" height="15" fill="rgb(239,134,19)" fg:x="1022" fg:w="2"/><text x="82.6029%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.4335%" y="629" width="0.0806%" height="15" fill="rgb(250,140,9)" fg:x="1023" fg:w="1"/><text x="82.6835%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4335%" y="613" width="0.0806%" height="15" fill="rgb(225,59,14)" fg:x="1023" fg:w="1"/><text x="82.6835%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4335%" y="597" width="0.0806%" height="15" fill="rgb(214,152,51)" fg:x="1023" fg:w="1"/><text x="82.6835%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.4335%" y="581" width="0.0806%" height="15" fill="rgb(251,227,43)" fg:x="1023" fg:w="1"/><text x="82.6835%" y="591.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="82.3529%" y="709" width="0.2417%" height="15" fill="rgb(241,96,17)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="82.3529%" y="693" width="0.2417%" height="15" fill="rgb(234,198,43)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="82.3529%" y="677" width="0.2417%" height="15" fill="rgb(220,108,29)" fg:x="1022" fg:w="3"/><text x="82.6029%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5141%" y="661" width="0.0806%" height="15" fill="rgb(226,163,33)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.5141%" y="645" width="0.0806%" height="15" fill="rgb(205,194,45)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="82.5141%" y="629" width="0.0806%" height="15" fill="rgb(206,143,44)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="82.5141%" y="613" width="0.0806%" height="15" fill="rgb(236,136,36)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.5141%" y="597" width="0.0806%" height="15" fill="rgb(249,172,42)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5141%" y="581" width="0.0806%" height="15" fill="rgb(216,139,23)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="82.5141%" y="565" width="0.0806%" height="15" fill="rgb(207,166,20)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="82.5141%" y="549" width="0.0806%" height="15" fill="rgb(210,209,22)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="82.5141%" y="533" width="0.0806%" height="15" fill="rgb(232,118,20)" fg:x="1024" fg:w="1"/><text x="82.7641%" y="543.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="82.5947%" y="677" width="0.0806%" height="15" fill="rgb(238,113,42)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="82.5947%" y="661" width="0.0806%" height="15" fill="rgb(231,42,5)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.5947%" y="645" width="0.0806%" height="15" fill="rgb(243,166,24)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.5947%" y="629" width="0.0806%" height="15" fill="rgb(237,226,12)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.5947%" y="613" width="0.0806%" height="15" fill="rgb(229,133,24)" fg:x="1025" fg:w="1"/><text x="82.8447%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (2 samples, 0.16%)</title><rect x="82.5947%" y="709" width="0.1612%" height="15" fill="rgb(238,33,43)" fg:x="1025" fg:w="2"/><text x="82.8447%" y="719.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="82.5947%" y="693" width="0.1612%" height="15" fill="rgb(227,59,38)" fg:x="1025" fg:w="2"/><text x="82.8447%" y="703.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="82.6753%" y="677" width="0.0806%" height="15" fill="rgb(230,97,0)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="687.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupying&gt;::serialize (1 samples, 0.08%)</title><rect x="82.6753%" y="661" width="0.0806%" height="15" fill="rgb(250,173,50)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.6753%" y="645" width="0.0806%" height="15" fill="rgb(240,15,50)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="655.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="82.6753%" y="629" width="0.0806%" height="15" fill="rgb(221,93,22)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="82.6753%" y="613" width="0.0806%" height="15" fill="rgb(245,180,53)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.6753%" y="597" width="0.0806%" height="15" fill="rgb(231,88,51)" fg:x="1026" fg:w="1"/><text x="82.9253%" y="607.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (33 samples, 2.66%)</title><rect x="80.1773%" y="725" width="2.6591%" height="15" fill="rgb(240,58,21)" fg:x="995" fg:w="33"/><text x="80.4273%" y="735.50">pl..</text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="82.7558%" y="709" width="0.0806%" height="15" fill="rgb(237,21,10)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="82.7558%" y="693" width="0.0806%" height="15" fill="rgb(218,43,11)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="703.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="82.7558%" y="677" width="0.0806%" height="15" fill="rgb(218,221,29)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="687.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="82.7558%" y="661" width="0.0806%" height="15" fill="rgb(214,118,42)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="82.7558%" y="645" width="0.0806%" height="15" fill="rgb(251,200,26)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.7558%" y="629" width="0.0806%" height="15" fill="rgb(237,101,39)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.7558%" y="613" width="0.0806%" height="15" fill="rgb(251,117,11)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.7558%" y="597" width="0.0806%" height="15" fill="rgb(216,223,23)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.7558%" y="581" width="0.0806%" height="15" fill="rgb(251,54,12)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.7558%" y="565" width="0.0806%" height="15" fill="rgb(254,176,54)" fg:x="1027" fg:w="1"/><text x="83.0058%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="82.8364%" y="661" width="0.0806%" height="15" fill="rgb(210,32,8)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="82.8364%" y="645" width="0.0806%" height="15" fill="rgb(235,52,38)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.8364%" y="629" width="0.0806%" height="15" fill="rgb(231,4,44)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="82.8364%" y="613" width="0.0806%" height="15" fill="rgb(249,2,32)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="82.8364%" y="597" width="0.0806%" height="15" fill="rgb(224,65,26)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="82.8364%" y="581" width="0.0806%" height="15" fill="rgb(250,73,40)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.8364%" y="565" width="0.0806%" height="15" fill="rgb(253,177,16)" fg:x="1028" fg:w="1"/><text x="83.0864%" y="575.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="82.8364%" y="725" width="0.1612%" height="15" fill="rgb(217,32,34)" fg:x="1028" fg:w="2"/><text x="83.0864%" y="735.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="82.8364%" y="709" width="0.1612%" height="15" fill="rgb(212,7,10)" fg:x="1028" fg:w="2"/><text x="83.0864%" y="719.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="82.8364%" y="693" width="0.1612%" height="15" fill="rgb(245,89,8)" fg:x="1028" fg:w="2"/><text x="83.0864%" y="703.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="82.8364%" y="677" width="0.1612%" height="15" fill="rgb(237,16,53)" fg:x="1028" fg:w="2"/><text x="83.0864%" y="687.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (1 samples, 0.08%)</title><rect x="82.9170%" y="661" width="0.0806%" height="15" fill="rgb(250,204,30)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="671.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="82.9170%" y="645" width="0.0806%" height="15" fill="rgb(208,77,27)" fg:x="1029" fg:w="1"/><text x="83.1670%" y="655.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="82.9976%" y="709" width="0.0806%" height="15" fill="rgb(250,204,28)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="719.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::MutCoreProps&lt;kernel::model::props::Properties&gt;&gt;::set_name (1 samples, 0.08%)</title><rect x="82.9976%" y="693" width="0.0806%" height="15" fill="rgb(244,63,21)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="703.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="82.9976%" y="677" width="0.0806%" height="15" fill="rgb(236,85,44)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="82.9976%" y="661" width="0.0806%" height="15" fill="rgb(215,98,4)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="671.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.9976%" y="645" width="0.0806%" height="15" fill="rgb(235,38,11)" fg:x="1030" fg:w="1"/><text x="83.2476%" y="655.50"></text></g><g><title>plugins_core::build::Build::new_world (1 samples, 0.08%)</title><rect x="83.0782%" y="709" width="0.0806%" height="15" fill="rgb(254,186,25)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="719.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.08%)</title><rect x="83.0782%" y="693" width="0.0806%" height="15" fill="rgb(225,55,31)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="703.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="83.0782%" y="677" width="0.0806%" height="15" fill="rgb(211,15,21)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="687.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="83.0782%" y="661" width="0.0806%" height="15" fill="rgb(215,187,41)" fg:x="1031" fg:w="1"/><text x="83.3282%" y="671.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (66 samples, 5.32%)</title><rect x="77.9210%" y="741" width="5.3183%" height="15" fill="rgb(248,69,32)" fg:x="967" fg:w="66"/><text x="78.1710%" y="751.50">&lt;tests:..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="82.9976%" y="725" width="0.2417%" height="15" fill="rgb(252,102,52)" fg:x="1030" fg:w="3"/><text x="83.2476%" y="735.50"></text></g><g><title>plugins_core::build::Build::save (1 samples, 0.08%)</title><rect x="83.1587%" y="709" width="0.0806%" height="15" fill="rgb(253,140,32)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="83.1587%" y="693" width="0.0806%" height="15" fill="rgb(216,56,42)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="83.1587%" y="677" width="0.0806%" height="15" fill="rgb(216,184,14)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="687.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="83.1587%" y="661" width="0.0806%" height="15" fill="rgb(237,187,27)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="671.50"></text></g><g><title>&lt;T as kernel::model::props::MutCoreProps&lt;T&gt;&gt;::set_gid (1 samples, 0.08%)</title><rect x="83.1587%" y="645" width="0.0806%" height="15" fill="rgb(219,65,3)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="655.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScopeMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="83.1587%" y="629" width="0.0806%" height="15" fill="rgb(245,83,25)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="83.1587%" y="613" width="0.0806%" height="15" fill="rgb(214,205,45)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1587%" y="597" width="0.0806%" height="15" fill="rgb(241,20,18)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="83.1587%" y="581" width="0.0806%" height="15" fill="rgb(232,163,23)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="83.1587%" y="565" width="0.0806%" height="15" fill="rgb(214,5,46)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="83.1587%" y="549" width="0.0806%" height="15" fill="rgb(229,78,17)" fg:x="1032" fg:w="1"/><text x="83.4087%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="83.2393%" y="693" width="0.0806%" height="15" fill="rgb(248,89,10)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.2393%" y="677" width="0.0806%" height="15" fill="rgb(248,54,15)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2393%" y="661" width="0.0806%" height="15" fill="rgb(223,116,6)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="671.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="83.2393%" y="645" width="0.0806%" height="15" fill="rgb(205,125,38)" fg:x="1033" fg:w="1"/><text x="83.4893%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="83.3199%" y="629" width="0.1612%" height="15" fill="rgb(251,78,38)" fg:x="1034" fg:w="2"/><text x="83.5699%" y="639.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="83.3199%" y="613" width="0.1612%" height="15" fill="rgb(253,78,28)" fg:x="1034" fg:w="2"/><text x="83.5699%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="83.3199%" y="597" width="0.1612%" height="15" fill="rgb(209,120,3)" fg:x="1034" fg:w="2"/><text x="83.5699%" y="607.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="83.4005%" y="581" width="0.0806%" height="15" fill="rgb(238,229,9)" fg:x="1035" fg:w="1"/><text x="83.6505%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="83.5616%" y="597" width="0.1612%" height="15" fill="rgb(253,159,18)" fg:x="1037" fg:w="2"/><text x="83.8116%" y="607.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="83.5616%" y="581" width="0.1612%" height="15" fill="rgb(244,42,34)" fg:x="1037" fg:w="2"/><text x="83.8116%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="83.7228%" y="581" width="0.1612%" height="15" fill="rgb(224,8,7)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="591.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="83.7228%" y="565" width="0.1612%" height="15" fill="rgb(210,201,45)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="83.7228%" y="549" width="0.1612%" height="15" fill="rgb(252,185,21)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="83.7228%" y="533" width="0.1612%" height="15" fill="rgb(223,131,1)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="83.7228%" y="517" width="0.1612%" height="15" fill="rgb(245,141,16)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="83.7228%" y="501" width="0.1612%" height="15" fill="rgb(229,55,45)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="511.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="83.7228%" y="485" width="0.1612%" height="15" fill="rgb(208,92,15)" fg:x="1039" fg:w="2"/><text x="83.9728%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="83.7228%" y="597" width="0.2417%" height="15" fill="rgb(234,185,47)" fg:x="1039" fg:w="3"/><text x="83.9728%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8840%" y="581" width="0.0806%" height="15" fill="rgb(253,104,50)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="83.8840%" y="565" width="0.0806%" height="15" fill="rgb(205,70,7)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="575.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="83.8840%" y="549" width="0.0806%" height="15" fill="rgb(240,178,43)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.8840%" y="533" width="0.0806%" height="15" fill="rgb(214,112,2)" fg:x="1041" fg:w="1"/><text x="84.1340%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.56%)</title><rect x="83.4811%" y="629" width="0.5641%" height="15" fill="rgb(206,46,17)" fg:x="1036" fg:w="7"/><text x="83.7311%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="83.5616%" y="613" width="0.4835%" height="15" fill="rgb(225,220,16)" fg:x="1037" fg:w="6"/><text x="83.8116%" y="623.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="83.9645%" y="597" width="0.0806%" height="15" fill="rgb(238,65,40)" fg:x="1042" fg:w="1"/><text x="84.2145%" y="607.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (10 samples, 0.81%)</title><rect x="83.3199%" y="645" width="0.8058%" height="15" fill="rgb(230,151,21)" fg:x="1034" fg:w="10"/><text x="83.5699%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="84.0451%" y="629" width="0.0806%" height="15" fill="rgb(218,58,49)" fg:x="1043" fg:w="1"/><text x="84.2951%" y="639.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="84.1257%" y="565" width="0.1612%" height="15" fill="rgb(219,179,14)" fg:x="1044" fg:w="2"/><text x="84.3757%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="84.3674%" y="549" width="0.0806%" height="15" fill="rgb(223,72,1)" fg:x="1047" fg:w="1"/><text x="84.6174%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.40%)</title><rect x="84.1257%" y="613" width="0.4029%" height="15" fill="rgb(238,126,10)" fg:x="1044" fg:w="5"/><text x="84.3757%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (5 samples, 0.40%)</title><rect x="84.1257%" y="597" width="0.4029%" height="15" fill="rgb(224,206,38)" fg:x="1044" fg:w="5"/><text x="84.3757%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="84.1257%" y="581" width="0.4029%" height="15" fill="rgb(212,201,54)" fg:x="1044" fg:w="5"/><text x="84.3757%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="84.2869%" y="565" width="0.2417%" height="15" fill="rgb(218,154,48)" fg:x="1046" fg:w="3"/><text x="84.5369%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="84.4480%" y="549" width="0.0806%" height="15" fill="rgb(232,93,24)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="84.4480%" y="533" width="0.0806%" height="15" fill="rgb(245,30,21)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="84.4480%" y="517" width="0.0806%" height="15" fill="rgb(242,148,29)" fg:x="1048" fg:w="1"/><text x="84.6980%" y="527.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (8 samples, 0.64%)</title><rect x="84.1257%" y="629" width="0.6446%" height="15" fill="rgb(244,153,54)" fg:x="1044" fg:w="8"/><text x="84.3757%" y="639.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="84.5286%" y="613" width="0.2417%" height="15" fill="rgb(252,87,22)" fg:x="1049" fg:w="3"/><text x="84.7786%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="84.5286%" y="597" width="0.2417%" height="15" fill="rgb(210,51,29)" fg:x="1049" fg:w="3"/><text x="84.7786%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="84.5286%" y="581" width="0.2417%" height="15" fill="rgb(242,136,47)" fg:x="1049" fg:w="3"/><text x="84.7786%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="84.6092%" y="565" width="0.1612%" height="15" fill="rgb(238,68,4)" fg:x="1050" fg:w="2"/><text x="84.8592%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="84.6898%" y="549" width="0.0806%" height="15" fill="rgb(242,161,30)" fg:x="1051" fg:w="1"/><text x="84.9398%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8509%" y="597" width="0.0806%" height="15" fill="rgb(218,58,44)" fg:x="1053" fg:w="1"/><text x="85.1009%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="84.9315%" y="597" width="0.1612%" height="15" fill="rgb(252,125,32)" fg:x="1054" fg:w="2"/><text x="85.1815%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="84.9315%" y="581" width="0.1612%" height="15" fill="rgb(219,178,0)" fg:x="1054" fg:w="2"/><text x="85.1815%" y="591.50"></text></g><g><title>burrow_bon::perms::_::&lt;impl serde::ser::Serialize for burrow_bon::perms::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="85.0927%" y="597" width="0.0806%" height="15" fill="rgb(213,152,7)" fg:x="1056" fg:w="1"/><text x="85.3427%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="85.0927%" y="581" width="0.0806%" height="15" fill="rgb(249,109,34)" fg:x="1056" fg:w="1"/><text x="85.3427%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.1732%" y="549" width="0.0806%" height="15" fill="rgb(232,96,21)" fg:x="1057" fg:w="1"/><text x="85.4232%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1732%" y="533" width="0.0806%" height="15" fill="rgb(228,27,39)" fg:x="1057" fg:w="1"/><text x="85.4232%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="85.2538%" y="549" width="0.0806%" height="15" fill="rgb(211,182,52)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="85.2538%" y="533" width="0.0806%" height="15" fill="rgb(234,178,38)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="85.2538%" y="517" width="0.0806%" height="15" fill="rgb(221,111,3)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2538%" y="501" width="0.0806%" height="15" fill="rgb(228,175,21)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.2538%" y="485" width="0.0806%" height="15" fill="rgb(228,174,43)" fg:x="1058" fg:w="1"/><text x="85.5038%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.4956%" y="469" width="0.0806%" height="15" fill="rgb(211,191,0)" fg:x="1061" fg:w="1"/><text x="85.7456%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="85.1732%" y="565" width="0.4835%" height="15" fill="rgb(253,117,3)" fg:x="1057" fg:w="6"/><text x="85.4232%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="85.3344%" y="549" width="0.3223%" height="15" fill="rgb(241,127,19)" fg:x="1059" fg:w="4"/><text x="85.5844%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="85.4150%" y="533" width="0.2417%" height="15" fill="rgb(218,103,12)" fg:x="1060" fg:w="3"/><text x="85.6650%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="85.4150%" y="517" width="0.2417%" height="15" fill="rgb(236,214,43)" fg:x="1060" fg:w="3"/><text x="85.6650%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="85.4956%" y="501" width="0.1612%" height="15" fill="rgb(244,144,19)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.4956%" y="485" width="0.1612%" height="15" fill="rgb(246,188,10)" fg:x="1061" fg:w="2"/><text x="85.7456%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.5761%" y="469" width="0.0806%" height="15" fill="rgb(212,193,33)" fg:x="1062" fg:w="1"/><text x="85.8261%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.97%)</title><rect x="84.7703%" y="629" width="0.9670%" height="15" fill="rgb(241,51,29)" fg:x="1052" fg:w="12"/><text x="85.0203%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.97%)</title><rect x="84.7703%" y="613" width="0.9670%" height="15" fill="rgb(211,58,19)" fg:x="1052" fg:w="12"/><text x="85.0203%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.56%)</title><rect x="85.1732%" y="597" width="0.5641%" height="15" fill="rgb(229,111,26)" fg:x="1057" fg:w="7"/><text x="85.4232%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.56%)</title><rect x="85.1732%" y="581" width="0.5641%" height="15" fill="rgb(213,115,40)" fg:x="1057" fg:w="7"/><text x="85.4232%" y="591.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="85.6567%" y="565" width="0.0806%" height="15" fill="rgb(209,56,44)" fg:x="1063" fg:w="1"/><text x="85.9067%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.8179%" y="485" width="0.0806%" height="15" fill="rgb(230,108,32)" fg:x="1065" fg:w="1"/><text x="86.0679%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.8179%" y="469" width="0.0806%" height="15" fill="rgb(216,165,31)" fg:x="1065" fg:w="1"/><text x="86.0679%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.8179%" y="453" width="0.0806%" height="15" fill="rgb(218,122,21)" fg:x="1065" fg:w="1"/><text x="86.0679%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8179%" y="437" width="0.0806%" height="15" fill="rgb(223,224,47)" fg:x="1065" fg:w="1"/><text x="86.0679%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="85.7373%" y="501" width="0.2417%" height="15" fill="rgb(238,102,44)" fg:x="1064" fg:w="3"/><text x="85.9873%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.8985%" y="485" width="0.0806%" height="15" fill="rgb(236,46,40)" fg:x="1066" fg:w="1"/><text x="86.1485%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8985%" y="469" width="0.0806%" height="15" fill="rgb(247,202,50)" fg:x="1066" fg:w="1"/><text x="86.1485%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.8985%" y="453" width="0.0806%" height="15" fill="rgb(209,99,20)" fg:x="1066" fg:w="1"/><text x="86.1485%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="85.8985%" y="437" width="0.0806%" height="15" fill="rgb(252,27,34)" fg:x="1066" fg:w="1"/><text x="86.1485%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="85.7373%" y="533" width="0.3223%" height="15" fill="rgb(215,206,23)" fg:x="1064" fg:w="4"/><text x="85.9873%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="85.7373%" y="517" width="0.3223%" height="15" fill="rgb(212,135,36)" fg:x="1064" fg:w="4"/><text x="85.9873%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.9790%" y="501" width="0.0806%" height="15" fill="rgb(240,189,1)" fg:x="1067" fg:w="1"/><text x="86.2290%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.9790%" y="485" width="0.0806%" height="15" fill="rgb(242,56,20)" fg:x="1067" fg:w="1"/><text x="86.2290%" y="495.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="86.0596%" y="517" width="0.0806%" height="15" fill="rgb(247,132,33)" fg:x="1068" fg:w="1"/><text x="86.3096%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.56%)</title><rect x="85.7373%" y="565" width="0.5641%" height="15" fill="rgb(208,149,11)" fg:x="1064" fg:w="7"/><text x="85.9873%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.56%)</title><rect x="85.7373%" y="549" width="0.5641%" height="15" fill="rgb(211,33,11)" fg:x="1064" fg:w="7"/><text x="85.9873%" y="559.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="86.0596%" y="533" width="0.2417%" height="15" fill="rgb(221,29,38)" fg:x="1068" fg:w="3"/><text x="86.3096%" y="543.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="86.1402%" y="517" width="0.1612%" height="15" fill="rgb(206,182,49)" fg:x="1069" fg:w="2"/><text x="86.3902%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="86.3014%" y="565" width="0.0806%" height="15" fill="rgb(216,140,1)" fg:x="1071" fg:w="1"/><text x="86.5514%" y="575.50"></text></g><g><title>engine::session::Session::close (41 samples, 3.30%)</title><rect x="83.2393%" y="741" width="3.3038%" height="15" fill="rgb(232,57,40)" fg:x="1033" fg:w="41"/><text x="83.4893%" y="751.50">eng..</text></g><g><title>engine::session::state::State::close (41 samples, 3.30%)</title><rect x="83.2393%" y="725" width="3.3038%" height="15" fill="rgb(224,186,18)" fg:x="1033" fg:w="41"/><text x="83.4893%" y="735.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (41 samples, 3.30%)</title><rect x="83.2393%" y="709" width="3.3038%" height="15" fill="rgb(215,121,11)" fg:x="1033" fg:w="41"/><text x="83.4893%" y="719.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.22%)</title><rect x="83.3199%" y="693" width="3.2232%" height="15" fill="rgb(245,147,10)" fg:x="1034" fg:w="40"/><text x="83.5699%" y="703.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.22%)</title><rect x="83.3199%" y="677" width="3.2232%" height="15" fill="rgb(238,153,13)" fg:x="1034" fg:w="40"/><text x="83.5699%" y="687.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.22%)</title><rect x="83.3199%" y="661" width="3.2232%" height="15" fill="rgb(233,108,0)" fg:x="1034" fg:w="40"/><text x="83.5699%" y="671.50">eng..</text></g><g><title>kernel::model::any_entity_changes (30 samples, 2.42%)</title><rect x="84.1257%" y="645" width="2.4174%" height="15" fill="rgb(212,157,17)" fg:x="1044" fg:w="30"/><text x="84.3757%" y="655.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (10 samples, 0.81%)</title><rect x="85.7373%" y="629" width="0.8058%" height="15" fill="rgb(225,213,38)" fg:x="1064" fg:w="10"/><text x="85.9873%" y="639.50"></text></g><g><title>serde_json::de::from_trait (10 samples, 0.81%)</title><rect x="85.7373%" y="613" width="0.8058%" height="15" fill="rgb(248,16,11)" fg:x="1064" fg:w="10"/><text x="85.9873%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (10 samples, 0.81%)</title><rect x="85.7373%" y="597" width="0.8058%" height="15" fill="rgb(241,33,4)" fg:x="1064" fg:w="10"/><text x="85.9873%" y="607.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.81%)</title><rect x="85.7373%" y="581" width="0.8058%" height="15" fill="rgb(222,26,43)" fg:x="1064" fg:w="10"/><text x="85.9873%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="86.3820%" y="565" width="0.1612%" height="15" fill="rgb(243,29,36)" fg:x="1072" fg:w="2"/><text x="86.6320%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="86.3820%" y="549" width="0.1612%" height="15" fill="rgb(241,9,27)" fg:x="1072" fg:w="2"/><text x="86.6320%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.4625%" y="533" width="0.0806%" height="15" fill="rgb(205,117,26)" fg:x="1073" fg:w="1"/><text x="86.7125%" y="543.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="86.5431%" y="693" width="0.0806%" height="15" fill="rgb(209,80,39)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="703.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="86.5431%" y="677" width="0.0806%" height="15" fill="rgb(239,155,6)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="687.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="86.5431%" y="661" width="0.0806%" height="15" fill="rgb(212,104,12)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="671.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="86.5431%" y="645" width="0.0806%" height="15" fill="rgb(234,204,3)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="655.50"></text></g><g><title>&lt;kernel::actions::Perform as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.5431%" y="629" width="0.0806%" height="15" fill="rgb(251,218,7)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="639.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field2_finish (1 samples, 0.08%)</title><rect x="86.5431%" y="613" width="0.0806%" height="15" fill="rgb(221,81,32)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="623.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="86.5431%" y="597" width="0.0806%" height="15" fill="rgb(214,152,26)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="86.5431%" y="581" width="0.0806%" height="15" fill="rgb(223,22,3)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="591.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="86.5431%" y="565" width="0.0806%" height="15" fill="rgb(207,174,7)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="86.5431%" y="549" width="0.0806%" height="15" fill="rgb(224,19,52)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.5431%" y="533" width="0.0806%" height="15" fill="rgb(228,24,14)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.5431%" y="517" width="0.0806%" height="15" fill="rgb(230,153,43)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.5431%" y="501" width="0.0806%" height="15" fill="rgb(231,106,12)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.5431%" y="485" width="0.0806%" height="15" fill="rgb(215,92,2)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.5431%" y="469" width="0.0806%" height="15" fill="rgb(249,143,25)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.5431%" y="453" width="0.0806%" height="15" fill="rgb(252,7,35)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="86.5431%" y="437" width="0.0806%" height="15" fill="rgb(216,69,40)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="86.5431%" y="421" width="0.0806%" height="15" fill="rgb(240,36,33)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="86.5431%" y="405" width="0.0806%" height="15" fill="rgb(231,128,14)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="86.5431%" y="389" width="0.0806%" height="15" fill="rgb(245,143,14)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="86.5431%" y="373" width="0.0806%" height="15" fill="rgb(222,130,28)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="86.5431%" y="357" width="0.0806%" height="15" fill="rgb(212,10,48)" fg:x="1074" fg:w="1"/><text x="86.7931%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.6237%" y="677" width="0.0806%" height="15" fill="rgb(254,118,45)" fg:x="1075" fg:w="1"/><text x="86.8737%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.7849%" y="501" width="0.0806%" height="15" fill="rgb(228,6,45)" fg:x="1077" fg:w="1"/><text x="87.0349%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.7849%" y="485" width="0.0806%" height="15" fill="rgb(241,18,35)" fg:x="1077" fg:w="1"/><text x="87.0349%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.8654%" y="341" width="0.0806%" height="15" fill="rgb(227,214,53)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="86.8654%" y="325" width="0.0806%" height="15" fill="rgb(224,107,51)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.8654%" y="309" width="0.0806%" height="15" fill="rgb(248,60,28)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="86.8654%" y="293" width="0.0806%" height="15" fill="rgb(249,101,23)" fg:x="1078" fg:w="1"/><text x="87.1154%" y="303.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="86.8654%" y="501" width="0.1612%" height="15" fill="rgb(228,51,19)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="86.8654%" y="485" width="0.1612%" height="15" fill="rgb(213,20,6)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.8654%" y="469" width="0.1612%" height="15" fill="rgb(212,124,10)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="86.8654%" y="453" width="0.1612%" height="15" fill="rgb(248,3,40)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.8654%" y="437" width="0.1612%" height="15" fill="rgb(223,178,23)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="447.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="86.8654%" y="421" width="0.1612%" height="15" fill="rgb(240,132,45)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.8654%" y="405" width="0.1612%" height="15" fill="rgb(245,164,36)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="415.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="86.8654%" y="389" width="0.1612%" height="15" fill="rgb(231,188,53)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.16%)</title><rect x="86.8654%" y="373" width="0.1612%" height="15" fill="rgb(237,198,39)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.8654%" y="357" width="0.1612%" height="15" fill="rgb(223,120,35)" fg:x="1078" fg:w="2"/><text x="87.1154%" y="367.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="86.9460%" y="341" width="0.0806%" height="15" fill="rgb(253,107,49)" fg:x="1079" fg:w="1"/><text x="87.1960%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.0266%" y="357" width="0.0806%" height="15" fill="rgb(216,44,31)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.0266%" y="341" width="0.0806%" height="15" fill="rgb(253,87,21)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.0266%" y="325" width="0.0806%" height="15" fill="rgb(226,18,2)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.0266%" y="309" width="0.0806%" height="15" fill="rgb(216,8,46)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.0266%" y="293" width="0.0806%" height="15" fill="rgb(226,140,39)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.0266%" y="277" width="0.0806%" height="15" fill="rgb(221,194,54)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="287.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.0266%" y="261" width="0.0806%" height="15" fill="rgb(213,92,11)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.0266%" y="245" width="0.0806%" height="15" fill="rgb(229,162,46)" fg:x="1080" fg:w="1"/><text x="87.2766%" y="255.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (6 samples, 0.48%)</title><rect x="86.7043%" y="597" width="0.4835%" height="15" fill="rgb(214,111,36)" fg:x="1076" fg:w="6"/><text x="86.9543%" y="607.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_area (6 samples, 0.48%)</title><rect x="86.7043%" y="581" width="0.4835%" height="15" fill="rgb(207,6,21)" fg:x="1076" fg:w="6"/><text x="86.9543%" y="591.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (5 samples, 0.40%)</title><rect x="86.7849%" y="565" width="0.4029%" height="15" fill="rgb(213,127,38)" fg:x="1077" fg:w="5"/><text x="87.0349%" y="575.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (5 samples, 0.40%)</title><rect x="86.7849%" y="549" width="0.4029%" height="15" fill="rgb(238,118,32)" fg:x="1077" fg:w="5"/><text x="87.0349%" y="559.50"></text></g><g><title>engine::session::Session::load_entity (5 samples, 0.40%)</title><rect x="86.7849%" y="533" width="0.4029%" height="15" fill="rgb(240,139,39)" fg:x="1077" fg:w="5"/><text x="87.0349%" y="543.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="86.7849%" y="517" width="0.4029%" height="15" fill="rgb(235,10,37)" fg:x="1077" fg:w="5"/><text x="87.0349%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="87.0266%" y="501" width="0.1612%" height="15" fill="rgb(249,171,38)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="511.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="87.0266%" y="485" width="0.1612%" height="15" fill="rgb(242,144,32)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.0266%" y="469" width="0.1612%" height="15" fill="rgb(217,117,21)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.0266%" y="453" width="0.1612%" height="15" fill="rgb(249,87,1)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.0266%" y="437" width="0.1612%" height="15" fill="rgb(248,196,48)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.0266%" y="421" width="0.1612%" height="15" fill="rgb(251,206,33)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.0266%" y="405" width="0.1612%" height="15" fill="rgb(232,141,28)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="87.0266%" y="389" width="0.1612%" height="15" fill="rgb(209,167,14)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="87.0266%" y="373" width="0.1612%" height="15" fill="rgb(225,11,50)" fg:x="1080" fg:w="2"/><text x="87.2766%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.1072%" y="357" width="0.0806%" height="15" fill="rgb(209,50,20)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="87.1072%" y="341" width="0.0806%" height="15" fill="rgb(212,17,46)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="87.1072%" y="325" width="0.0806%" height="15" fill="rgb(216,101,39)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="335.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.1072%" y="309" width="0.0806%" height="15" fill="rgb(212,228,48)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="87.1072%" y="293" width="0.0806%" height="15" fill="rgb(250,6,50)" fg:x="1081" fg:w="1"/><text x="87.3572%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="87.1878%" y="597" width="0.0806%" height="15" fill="rgb(250,160,48)" fg:x="1082" fg:w="1"/><text x="87.4378%" y="607.50"></text></g><g><title>&lt;twox_hash::sixty_four::XxHash64 as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="87.3489%" y="517" width="0.0806%" height="15" fill="rgb(244,216,33)" fg:x="1084" fg:w="1"/><text x="87.5989%" y="527.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (3 samples, 0.24%)</title><rect x="87.5101%" y="421" width="0.2417%" height="15" fill="rgb(207,157,5)" fg:x="1086" fg:w="3"/><text x="87.7601%" y="431.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (3 samples, 0.24%)</title><rect x="87.5101%" y="405" width="0.2417%" height="15" fill="rgb(228,199,8)" fg:x="1086" fg:w="3"/><text x="87.7601%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (3 samples, 0.24%)</title><rect x="87.5101%" y="389" width="0.2417%" height="15" fill="rgb(227,80,20)" fg:x="1086" fg:w="3"/><text x="87.7601%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="87.5101%" y="373" width="0.2417%" height="15" fill="rgb(222,9,33)" fg:x="1086" fg:w="3"/><text x="87.7601%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="87.5907%" y="357" width="0.1612%" height="15" fill="rgb(239,44,28)" fg:x="1087" fg:w="2"/><text x="87.8407%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (1 samples, 0.08%)</title><rect x="87.6712%" y="341" width="0.0806%" height="15" fill="rgb(249,187,43)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="87.6712%" y="325" width="0.0806%" height="15" fill="rgb(216,141,28)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.6712%" y="309" width="0.0806%" height="15" fill="rgb(230,154,53)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="87.6712%" y="293" width="0.0806%" height="15" fill="rgb(227,82,4)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="87.6712%" y="277" width="0.0806%" height="15" fill="rgb(220,107,16)" fg:x="1088" fg:w="1"/><text x="87.9212%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="87.7518%" y="357" width="0.0806%" height="15" fill="rgb(207,187,2)" fg:x="1089" fg:w="1"/><text x="88.0018%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.8324%" y="293" width="0.0806%" height="15" fill="rgb(210,162,52)" fg:x="1090" fg:w="1"/><text x="88.0824%" y="303.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="87.7518%" y="373" width="0.2417%" height="15" fill="rgb(217,216,49)" fg:x="1089" fg:w="3"/><text x="88.0018%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.8324%" y="357" width="0.1612%" height="15" fill="rgb(218,146,49)" fg:x="1090" fg:w="2"/><text x="88.0824%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.8324%" y="341" width="0.1612%" height="15" fill="rgb(216,55,40)" fg:x="1090" fg:w="2"/><text x="88.0824%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.8324%" y="325" width="0.1612%" height="15" fill="rgb(208,196,21)" fg:x="1090" fg:w="2"/><text x="88.0824%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.8324%" y="309" width="0.1612%" height="15" fill="rgb(242,117,42)" fg:x="1090" fg:w="2"/><text x="88.0824%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="87.9130%" y="293" width="0.0806%" height="15" fill="rgb(210,11,23)" fg:x="1091" fg:w="1"/><text x="88.1630%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.9130%" y="277" width="0.0806%" height="15" fill="rgb(217,110,2)" fg:x="1091" fg:w="1"/><text x="88.1630%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="87.9130%" y="261" width="0.0806%" height="15" fill="rgb(229,77,54)" fg:x="1091" fg:w="1"/><text x="88.1630%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.9130%" y="245" width="0.0806%" height="15" fill="rgb(218,53,16)" fg:x="1091" fg:w="1"/><text x="88.1630%" y="255.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::desc (4 samples, 0.32%)</title><rect x="87.7518%" y="389" width="0.3223%" height="15" fill="rgb(215,38,13)" fg:x="1089" fg:w="4"/><text x="88.0018%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="87.9936%" y="373" width="0.0806%" height="15" fill="rgb(235,42,18)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.9936%" y="357" width="0.0806%" height="15" fill="rgb(219,66,54)" fg:x="1092" fg:w="1"/><text x="88.2436%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.1547%" y="357" width="0.0806%" height="15" fill="rgb(222,205,4)" fg:x="1094" fg:w="1"/><text x="88.4047%" y="367.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="88.1547%" y="373" width="0.1612%" height="15" fill="rgb(227,213,46)" fg:x="1094" fg:w="2"/><text x="88.4047%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.2353%" y="357" width="0.0806%" height="15" fill="rgb(250,145,42)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.2353%" y="341" width="0.0806%" height="15" fill="rgb(219,15,2)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.2353%" y="325" width="0.0806%" height="15" fill="rgb(231,181,52)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.2353%" y="309" width="0.0806%" height="15" fill="rgb(235,1,42)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="88.2353%" y="293" width="0.0806%" height="15" fill="rgb(249,88,27)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="88.2353%" y="277" width="0.0806%" height="15" fill="rgb(235,145,16)" fg:x="1095" fg:w="1"/><text x="88.4853%" y="287.50"></text></g><g><title>&lt;T as kernel::model::props::CoreProps&gt;::name (4 samples, 0.32%)</title><rect x="88.0741%" y="389" width="0.3223%" height="15" fill="rgb(237,114,19)" fg:x="1093" fg:w="4"/><text x="88.3241%" y="399.50"></text></g><g><title>kernel::model::props::Props::string_property (1 samples, 0.08%)</title><rect x="88.3159%" y="373" width="0.0806%" height="15" fill="rgb(238,51,50)" fg:x="1096" fg:w="1"/><text x="88.5659%" y="383.50"></text></g><g><title>kernel::model::EntityPtr::gid (1 samples, 0.08%)</title><rect x="88.3965%" y="389" width="0.0806%" height="15" fill="rgb(205,194,25)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="88.3965%" y="373" width="0.0806%" height="15" fill="rgb(215,203,17)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.3965%" y="357" width="0.0806%" height="15" fill="rgb(233,112,49)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.3965%" y="341" width="0.0806%" height="15" fill="rgb(241,130,26)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="88.3965%" y="325" width="0.0806%" height="15" fill="rgb(252,223,19)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.3965%" y="309" width="0.0806%" height="15" fill="rgb(211,95,25)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="88.3965%" y="293" width="0.0806%" height="15" fill="rgb(251,182,27)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="88.3965%" y="277" width="0.0806%" height="15" fill="rgb(238,24,4)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="88.3965%" y="261" width="0.0806%" height="15" fill="rgb(224,220,25)" fg:x="1097" fg:w="1"/><text x="88.6465%" y="271.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="88.4770%" y="325" width="0.0806%" height="15" fill="rgb(239,133,26)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="335.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="88.4770%" y="309" width="0.0806%" height="15" fill="rgb(211,94,48)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="88.4770%" y="293" width="0.0806%" height="15" fill="rgb(239,87,6)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="303.50"></text></g><g><title>core::ptr::write (1 samples, 0.08%)</title><rect x="88.4770%" y="277" width="0.0806%" height="15" fill="rgb(227,62,0)" fg:x="1098" fg:w="1"/><text x="88.7270%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="88.5576%" y="309" width="0.0806%" height="15" fill="rgb(211,226,4)" fg:x="1099" fg:w="1"/><text x="88.8076%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="88.6382%" y="261" width="0.0806%" height="15" fill="rgb(253,38,52)" fg:x="1100" fg:w="1"/><text x="88.8882%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::parse::Parser&gt; (1 samples, 0.08%)</title><rect x="88.7188%" y="261" width="0.0806%" height="15" fill="rgb(229,126,40)" fg:x="1101" fg:w="1"/><text x="88.9688%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="88.9605%" y="229" width="0.0806%" height="15" fill="rgb(229,165,44)" fg:x="1104" fg:w="1"/><text x="89.2105%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="88.8799%" y="245" width="0.2417%" height="15" fill="rgb(247,95,47)" fg:x="1103" fg:w="3"/><text x="89.1299%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (1 samples, 0.08%)</title><rect x="89.0411%" y="229" width="0.0806%" height="15" fill="rgb(216,140,30)" fg:x="1105" fg:w="1"/><text x="89.2911%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="89.1217%" y="245" width="0.0806%" height="15" fill="rgb(246,214,8)" fg:x="1106" fg:w="1"/><text x="89.3717%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="89.1217%" y="229" width="0.0806%" height="15" fill="rgb(227,224,15)" fg:x="1106" fg:w="1"/><text x="89.3717%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="89.2828%" y="181" width="0.0806%" height="15" fill="rgb(233,175,4)" fg:x="1108" fg:w="1"/><text x="89.5328%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (16 samples, 1.29%)</title><rect x="89.3634%" y="181" width="1.2893%" height="15" fill="rgb(221,66,45)" fg:x="1109" fg:w="16"/><text x="89.6134%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (16 samples, 1.29%)</title><rect x="89.3634%" y="165" width="1.2893%" height="15" fill="rgb(221,178,18)" fg:x="1109" fg:w="16"/><text x="89.6134%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (16 samples, 1.29%)</title><rect x="89.3634%" y="149" width="1.2893%" height="15" fill="rgb(213,81,29)" fg:x="1109" fg:w="16"/><text x="89.6134%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="90.6527%" y="181" width="0.0806%" height="15" fill="rgb(220,89,49)" fg:x="1125" fg:w="1"/><text x="90.9027%" y="191.50"></text></g><g><title>regex_syntax::hir::ClassUnicode::is_ascii (1 samples, 0.08%)</title><rect x="90.7333%" y="181" width="0.0806%" height="15" fill="rgb(227,60,33)" fg:x="1126" fg:w="1"/><text x="90.9833%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (21 samples, 1.69%)</title><rect x="89.2828%" y="229" width="1.6922%" height="15" fill="rgb(205,113,12)" fg:x="1108" fg:w="21"/><text x="89.5328%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (21 samples, 1.69%)</title><rect x="89.2828%" y="213" width="1.6922%" height="15" fill="rgb(211,32,1)" fg:x="1108" fg:w="21"/><text x="89.5328%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (21 samples, 1.69%)</title><rect x="89.2828%" y="197" width="1.6922%" height="15" fill="rgb(246,2,12)" fg:x="1108" fg:w="21"/><text x="89.5328%" y="207.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="90.8139%" y="181" width="0.1612%" height="15" fill="rgb(243,37,27)" fg:x="1127" fg:w="2"/><text x="91.0639%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.8944%" y="165" width="0.0806%" height="15" fill="rgb(248,211,31)" fg:x="1128" fg:w="1"/><text x="91.1444%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.8944%" y="149" width="0.0806%" height="15" fill="rgb(242,146,47)" fg:x="1128" fg:w="1"/><text x="91.1444%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.8944%" y="133" width="0.0806%" height="15" fill="rgb(206,70,20)" fg:x="1128" fg:w="1"/><text x="91.1444%" y="143.50"></text></g><g><title>regex_automata::meta::strategy::new (30 samples, 2.42%)</title><rect x="88.7994%" y="261" width="2.4174%" height="15" fill="rgb(215,10,51)" fg:x="1102" fg:w="30"/><text x="89.0494%" y="271.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (25 samples, 2.01%)</title><rect x="89.2023%" y="245" width="2.0145%" height="15" fill="rgb(243,178,53)" fg:x="1107" fg:w="25"/><text x="89.4523%" y="255.50">r..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="90.9750%" y="229" width="0.2417%" height="15" fill="rgb(233,221,20)" fg:x="1129" fg:w="3"/><text x="91.2250%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (1 samples, 0.08%)</title><rect x="91.1362%" y="213" width="0.0806%" height="15" fill="rgb(218,95,35)" fg:x="1131" fg:w="1"/><text x="91.3862%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="91.2168%" y="229" width="0.1612%" height="15" fill="rgb(229,13,5)" fg:x="1132" fg:w="2"/><text x="91.4668%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::peek (1 samples, 0.08%)</title><rect x="91.2973%" y="213" width="0.0806%" height="15" fill="rgb(252,164,30)" fg:x="1133" fg:w="1"/><text x="91.5473%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="91.2168%" y="261" width="0.3223%" height="15" fill="rgb(232,68,36)" fg:x="1132" fg:w="4"/><text x="91.4668%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="91.2168%" y="245" width="0.3223%" height="15" fill="rgb(219,59,54)" fg:x="1132" fg:w="4"/><text x="91.4668%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="91.3779%" y="229" width="0.1612%" height="15" fill="rgb(250,92,33)" fg:x="1134" fg:w="2"/><text x="91.6279%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="91.4585%" y="213" width="0.0806%" height="15" fill="rgb(229,162,54)" fg:x="1135" fg:w="1"/><text x="91.7085%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (37 samples, 2.98%)</title><rect x="88.6382%" y="309" width="2.9815%" height="15" fill="rgb(244,114,52)" fg:x="1100" fg:w="37"/><text x="88.8882%" y="319.50">&lt;re..</text></g><g><title>regex::builders::string::RegexBuilder::build (37 samples, 2.98%)</title><rect x="88.6382%" y="293" width="2.9815%" height="15" fill="rgb(212,211,43)" fg:x="1100" fg:w="37"/><text x="88.8882%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (37 samples, 2.98%)</title><rect x="88.6382%" y="277" width="2.9815%" height="15" fill="rgb(226,147,8)" fg:x="1100" fg:w="37"/><text x="88.8882%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="91.5391%" y="261" width="0.0806%" height="15" fill="rgb(226,23,13)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="91.5391%" y="245" width="0.0806%" height="15" fill="rgb(240,63,4)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="91.5391%" y="229" width="0.0806%" height="15" fill="rgb(221,1,32)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="91.5391%" y="213" width="0.0806%" height="15" fill="rgb(242,117,10)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.5391%" y="197" width="0.0806%" height="15" fill="rgb(249,172,44)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.5391%" y="181" width="0.0806%" height="15" fill="rgb(244,46,45)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="91.5391%" y="165" width="0.0806%" height="15" fill="rgb(206,43,17)" fg:x="1136" fg:w="1"/><text x="91.7891%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="91.6197%" y="309" width="0.0806%" height="15" fill="rgb(239,218,39)" fg:x="1137" fg:w="1"/><text x="91.8697%" y="319.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (40 samples, 3.22%)</title><rect x="88.5576%" y="325" width="3.2232%" height="15" fill="rgb(208,169,54)" fg:x="1099" fg:w="40"/><text x="88.8076%" y="335.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (1 samples, 0.08%)</title><rect x="91.7002%" y="309" width="0.0806%" height="15" fill="rgb(247,25,42)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (1 samples, 0.08%)</title><rect x="91.7002%" y="293" width="0.0806%" height="15" fill="rgb(226,23,31)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (1 samples, 0.08%)</title><rect x="91.7002%" y="277" width="0.0806%" height="15" fill="rgb(247,16,28)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (1 samples, 0.08%)</title><rect x="91.7002%" y="261" width="0.0806%" height="15" fill="rgb(231,147,38)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="91.7002%" y="245" width="0.0806%" height="15" fill="rgb(253,81,48)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.7002%" y="229" width="0.0806%" height="15" fill="rgb(249,222,43)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.7002%" y="213" width="0.0806%" height="15" fill="rgb(221,3,27)" fg:x="1138" fg:w="1"/><text x="91.9502%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.7808%" y="261" width="0.0806%" height="15" fill="rgb(228,180,5)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.7808%" y="245" width="0.0806%" height="15" fill="rgb(227,131,42)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="91.7808%" y="229" width="0.0806%" height="15" fill="rgb(212,3,39)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.7808%" y="213" width="0.0806%" height="15" fill="rgb(226,45,5)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.7808%" y="197" width="0.0806%" height="15" fill="rgb(215,167,45)" fg:x="1139" fg:w="1"/><text x="92.0308%" y="207.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="91.8614%" y="245" width="0.0806%" height="15" fill="rgb(250,218,53)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="91.8614%" y="229" width="0.0806%" height="15" fill="rgb(207,140,0)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="91.8614%" y="213" width="0.0806%" height="15" fill="rgb(238,133,51)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="91.8614%" y="197" width="0.0806%" height="15" fill="rgb(218,203,53)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="91.8614%" y="181" width="0.0806%" height="15" fill="rgb(226,184,25)" fg:x="1140" fg:w="1"/><text x="92.1114%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="91.9420%" y="229" width="0.0806%" height="15" fill="rgb(231,121,21)" fg:x="1141" fg:w="1"/><text x="92.1920%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="91.9420%" y="213" width="0.0806%" height="15" fill="rgb(251,14,34)" fg:x="1141" fg:w="1"/><text x="92.1920%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="91.9420%" y="197" width="0.0806%" height="15" fill="rgb(249,193,11)" fg:x="1141" fg:w="1"/><text x="92.1920%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="91.9420%" y="181" width="0.0806%" height="15" fill="rgb(220,172,37)" fg:x="1141" fg:w="1"/><text x="92.1920%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (4 samples, 0.32%)</title><rect x="91.8614%" y="261" width="0.3223%" height="15" fill="rgb(231,229,43)" fg:x="1140" fg:w="4"/><text x="92.1114%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (3 samples, 0.24%)</title><rect x="91.9420%" y="245" width="0.2417%" height="15" fill="rgb(250,161,5)" fg:x="1141" fg:w="3"/><text x="92.1920%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (2 samples, 0.16%)</title><rect x="92.0226%" y="229" width="0.1612%" height="15" fill="rgb(218,225,18)" fg:x="1142" fg:w="2"/><text x="92.2726%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="92.1031%" y="213" width="0.0806%" height="15" fill="rgb(245,45,42)" fg:x="1143" fg:w="1"/><text x="92.3531%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="92.1837%" y="261" width="0.0806%" height="15" fill="rgb(211,115,1)" fg:x="1144" fg:w="1"/><text x="92.4337%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="92.1837%" y="245" width="0.0806%" height="15" fill="rgb(248,133,52)" fg:x="1144" fg:w="1"/><text x="92.4337%" y="255.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (7 samples, 0.56%)</title><rect x="91.7808%" y="309" width="0.5641%" height="15" fill="rgb(238,100,21)" fg:x="1139" fg:w="7"/><text x="92.0308%" y="319.50"></text></g><g><title>regex::builders::string::RegexBuilder::build (7 samples, 0.56%)</title><rect x="91.7808%" y="293" width="0.5641%" height="15" fill="rgb(247,144,11)" fg:x="1139" fg:w="7"/><text x="92.0308%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (7 samples, 0.56%)</title><rect x="91.7808%" y="277" width="0.5641%" height="15" fill="rgb(206,164,16)" fg:x="1139" fg:w="7"/><text x="92.0308%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (1 samples, 0.08%)</title><rect x="92.2643%" y="261" width="0.0806%" height="15" fill="rgb(222,34,3)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="92.2643%" y="245" width="0.0806%" height="15" fill="rgb(248,82,4)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="92.2643%" y="229" width="0.0806%" height="15" fill="rgb(228,81,46)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="239.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="92.2643%" y="213" width="0.0806%" height="15" fill="rgb(227,67,47)" fg:x="1145" fg:w="1"/><text x="92.5143%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (1 samples, 0.08%)</title><rect x="92.3449%" y="245" width="0.0806%" height="15" fill="rgb(215,93,53)" fg:x="1146" fg:w="1"/><text x="92.5949%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="92.3449%" y="229" width="0.0806%" height="15" fill="rgb(248,194,39)" fg:x="1146" fg:w="1"/><text x="92.5949%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (9 samples, 0.73%)</title><rect x="91.7808%" y="325" width="0.7252%" height="15" fill="rgb(215,5,19)" fg:x="1139" fg:w="9"/><text x="92.0308%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (2 samples, 0.16%)</title><rect x="92.3449%" y="309" width="0.1612%" height="15" fill="rgb(226,215,51)" fg:x="1146" fg:w="2"/><text x="92.5949%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (2 samples, 0.16%)</title><rect x="92.3449%" y="293" width="0.1612%" height="15" fill="rgb(225,56,26)" fg:x="1146" fg:w="2"/><text x="92.5949%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (2 samples, 0.16%)</title><rect x="92.3449%" y="277" width="0.1612%" height="15" fill="rgb(222,75,29)" fg:x="1146" fg:w="2"/><text x="92.5949%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (2 samples, 0.16%)</title><rect x="92.3449%" y="261" width="0.1612%" height="15" fill="rgb(236,139,6)" fg:x="1146" fg:w="2"/><text x="92.5949%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="92.4255%" y="245" width="0.0806%" height="15" fill="rgb(223,137,36)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.4255%" y="229" width="0.0806%" height="15" fill="rgb(226,99,2)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4255%" y="213" width="0.0806%" height="15" fill="rgb(206,133,23)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.4255%" y="197" width="0.0806%" height="15" fill="rgb(243,173,15)" fg:x="1147" fg:w="1"/><text x="92.6755%" y="207.50"></text></g><g><title>regex::builders::bytes::RegexBuilder::new (1 samples, 0.08%)</title><rect x="92.5060%" y="293" width="0.0806%" height="15" fill="rgb(228,69,28)" fg:x="1148" fg:w="1"/><text x="92.7560%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="92.5060%" y="277" width="0.0806%" height="15" fill="rgb(212,51,22)" fg:x="1148" fg:w="1"/><text x="92.7560%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="92.5060%" y="261" width="0.0806%" height="15" fill="rgb(227,113,0)" fg:x="1148" fg:w="1"/><text x="92.7560%" y="271.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="92.5866%" y="229" width="0.0806%" height="15" fill="rgb(252,84,27)" fg:x="1149" fg:w="1"/><text x="92.8366%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="92.5866%" y="261" width="0.1612%" height="15" fill="rgb(223,145,39)" fg:x="1149" fg:w="2"/><text x="92.8366%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="92.5866%" y="245" width="0.1612%" height="15" fill="rgb(239,219,30)" fg:x="1149" fg:w="2"/><text x="92.8366%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="92.6672%" y="229" width="0.0806%" height="15" fill="rgb(224,196,39)" fg:x="1150" fg:w="1"/><text x="92.9172%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="92.6672%" y="213" width="0.0806%" height="15" fill="rgb(205,35,43)" fg:x="1150" fg:w="1"/><text x="92.9172%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="92.7478%" y="261" width="0.2417%" height="15" fill="rgb(228,201,21)" fg:x="1151" fg:w="3"/><text x="92.9978%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="92.7478%" y="245" width="0.2417%" height="15" fill="rgb(237,118,16)" fg:x="1151" fg:w="3"/><text x="92.9978%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="92.8284%" y="229" width="0.1612%" height="15" fill="rgb(241,17,19)" fg:x="1152" fg:w="2"/><text x="93.0784%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="92.8284%" y="213" width="0.1612%" height="15" fill="rgb(214,10,25)" fg:x="1152" fg:w="2"/><text x="93.0784%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="92.9089%" y="197" width="0.0806%" height="15" fill="rgb(238,37,29)" fg:x="1153" fg:w="1"/><text x="93.1589%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (4 samples, 0.32%)</title><rect x="92.9895%" y="245" width="0.3223%" height="15" fill="rgb(253,83,25)" fg:x="1154" fg:w="4"/><text x="93.2395%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (4 samples, 0.32%)</title><rect x="92.9895%" y="229" width="0.3223%" height="15" fill="rgb(234,192,12)" fg:x="1154" fg:w="4"/><text x="93.2395%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="93.3118%" y="245" width="0.3223%" height="15" fill="rgb(241,216,45)" fg:x="1158" fg:w="4"/><text x="93.5618%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="93.3924%" y="229" width="0.2417%" height="15" fill="rgb(242,22,33)" fg:x="1159" fg:w="3"/><text x="93.6424%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="93.6342%" y="213" width="0.1612%" height="15" fill="rgb(231,105,49)" fg:x="1162" fg:w="2"/><text x="93.8842%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="93.7147%" y="197" width="0.0806%" height="15" fill="rgb(218,204,15)" fg:x="1163" fg:w="1"/><text x="93.9647%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="93.7147%" y="181" width="0.0806%" height="15" fill="rgb(235,138,41)" fg:x="1163" fg:w="1"/><text x="93.9647%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.7147%" y="165" width="0.0806%" height="15" fill="rgb(246,0,9)" fg:x="1163" fg:w="1"/><text x="93.9647%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.7147%" y="149" width="0.0806%" height="15" fill="rgb(210,74,4)" fg:x="1163" fg:w="1"/><text x="93.9647%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (3 samples, 0.24%)</title><rect x="93.6342%" y="245" width="0.2417%" height="15" fill="rgb(250,60,41)" fg:x="1162" fg:w="3"/><text x="93.8842%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (3 samples, 0.24%)</title><rect x="93.6342%" y="229" width="0.2417%" height="15" fill="rgb(220,115,12)" fg:x="1162" fg:w="3"/><text x="93.8842%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (1 samples, 0.08%)</title><rect x="93.7953%" y="213" width="0.0806%" height="15" fill="rgb(237,100,13)" fg:x="1164" fg:w="1"/><text x="94.0453%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (1 samples, 0.08%)</title><rect x="93.7953%" y="197" width="0.0806%" height="15" fill="rgb(213,55,26)" fg:x="1164" fg:w="1"/><text x="94.0453%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (1 samples, 0.08%)</title><rect x="93.7953%" y="181" width="0.0806%" height="15" fill="rgb(216,17,4)" fg:x="1164" fg:w="1"/><text x="94.0453%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="93.8759%" y="181" width="0.0806%" height="15" fill="rgb(220,153,47)" fg:x="1165" fg:w="1"/><text x="94.1259%" y="191.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="94.4400%" y="133" width="0.1612%" height="15" fill="rgb(215,131,9)" fg:x="1172" fg:w="2"/><text x="94.6900%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.6011%" y="133" width="0.0806%" height="15" fill="rgb(233,46,42)" fg:x="1174" fg:w="1"/><text x="94.8511%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="94.6817%" y="133" width="0.1612%" height="15" fill="rgb(226,86,7)" fg:x="1175" fg:w="2"/><text x="94.9317%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="94.7623%" y="117" width="0.0806%" height="15" fill="rgb(239,226,21)" fg:x="1176" fg:w="1"/><text x="95.0123%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.7623%" y="101" width="0.0806%" height="15" fill="rgb(244,137,22)" fg:x="1176" fg:w="1"/><text x="95.0123%" y="111.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.7623%" y="85" width="0.0806%" height="15" fill="rgb(211,139,35)" fg:x="1176" fg:w="1"/><text x="95.0123%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (5 samples, 0.40%)</title><rect x="94.8429%" y="133" width="0.4029%" height="15" fill="rgb(214,62,50)" fg:x="1177" fg:w="5"/><text x="95.0929%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="95.0040%" y="117" width="0.2417%" height="15" fill="rgb(212,113,44)" fg:x="1179" fg:w="3"/><text x="95.2540%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="95.0040%" y="101" width="0.2417%" height="15" fill="rgb(226,150,43)" fg:x="1179" fg:w="3"/><text x="95.2540%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.1652%" y="85" width="0.0806%" height="15" fill="rgb(250,71,37)" fg:x="1181" fg:w="1"/><text x="95.4152%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.1652%" y="69" width="0.0806%" height="15" fill="rgb(219,76,19)" fg:x="1181" fg:w="1"/><text x="95.4152%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.1652%" y="53" width="0.0806%" height="15" fill="rgb(250,39,11)" fg:x="1181" fg:w="1"/><text x="95.4152%" y="63.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="95.1652%" y="37" width="0.0806%" height="15" fill="rgb(230,64,31)" fg:x="1181" fg:w="1"/><text x="95.4152%" y="47.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="95.2458%" y="133" width="0.0806%" height="15" fill="rgb(208,222,23)" fg:x="1182" fg:w="1"/><text x="95.4958%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="95.2458%" y="117" width="0.0806%" height="15" fill="rgb(227,125,18)" fg:x="1182" fg:w="1"/><text x="95.4958%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.21%)</title><rect x="95.3263%" y="133" width="1.2087%" height="15" fill="rgb(234,210,9)" fg:x="1183" fg:w="15"/><text x="95.5763%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.21%)</title><rect x="95.3263%" y="117" width="1.2087%" height="15" fill="rgb(217,127,24)" fg:x="1183" fg:w="15"/><text x="95.5763%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.21%)</title><rect x="95.3263%" y="101" width="1.2087%" height="15" fill="rgb(239,141,48)" fg:x="1183" fg:w="15"/><text x="95.5763%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="96.5351%" y="133" width="0.0806%" height="15" fill="rgb(227,109,8)" fg:x="1198" fg:w="1"/><text x="96.7851%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (35 samples, 2.82%)</title><rect x="93.8759%" y="229" width="2.8203%" height="15" fill="rgb(235,184,23)" fg:x="1165" fg:w="35"/><text x="94.1259%" y="239.50">&lt;c..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (35 samples, 2.82%)</title><rect x="93.8759%" y="213" width="2.8203%" height="15" fill="rgb(227,226,48)" fg:x="1165" fg:w="35"/><text x="94.1259%" y="223.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (35 samples, 2.82%)</title><rect x="93.8759%" y="197" width="2.8203%" height="15" fill="rgb(206,150,11)" fg:x="1165" fg:w="35"/><text x="94.1259%" y="207.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (34 samples, 2.74%)</title><rect x="93.9565%" y="181" width="2.7397%" height="15" fill="rgb(254,2,33)" fg:x="1166" fg:w="34"/><text x="94.2065%" y="191.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (34 samples, 2.74%)</title><rect x="93.9565%" y="165" width="2.7397%" height="15" fill="rgb(243,160,20)" fg:x="1166" fg:w="34"/><text x="94.2065%" y="175.50">re..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (34 samples, 2.74%)</title><rect x="93.9565%" y="149" width="2.7397%" height="15" fill="rgb(218,208,30)" fg:x="1166" fg:w="34"/><text x="94.2065%" y="159.50">re..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.6156%" y="133" width="0.0806%" height="15" fill="rgb(224,120,49)" fg:x="1199" fg:w="1"/><text x="96.8656%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.6156%" y="117" width="0.0806%" height="15" fill="rgb(246,12,2)" fg:x="1199" fg:w="1"/><text x="96.8656%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.6156%" y="101" width="0.0806%" height="15" fill="rgb(236,117,3)" fg:x="1199" fg:w="1"/><text x="96.8656%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.6156%" y="85" width="0.0806%" height="15" fill="rgb(216,128,52)" fg:x="1199" fg:w="1"/><text x="96.8656%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="96.7768%" y="213" width="0.1612%" height="15" fill="rgb(246,145,19)" fg:x="1201" fg:w="2"/><text x="97.0268%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="96.7768%" y="197" width="0.1612%" height="15" fill="rgb(222,11,46)" fg:x="1201" fg:w="2"/><text x="97.0268%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="96.7768%" y="181" width="0.1612%" height="15" fill="rgb(245,82,36)" fg:x="1201" fg:w="2"/><text x="97.0268%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="96.7768%" y="165" width="0.1612%" height="15" fill="rgb(250,73,51)" fg:x="1201" fg:w="2"/><text x="97.0268%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.9380%" y="213" width="0.1612%" height="15" fill="rgb(221,189,23)" fg:x="1203" fg:w="2"/><text x="97.1880%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (52 samples, 4.19%)</title><rect x="92.9895%" y="261" width="4.1902%" height="15" fill="rgb(210,33,7)" fg:x="1154" fg:w="52"/><text x="93.2395%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (41 samples, 3.30%)</title><rect x="93.8759%" y="245" width="3.3038%" height="15" fill="rgb(210,107,22)" fg:x="1165" fg:w="41"/><text x="94.1259%" y="255.50">reg..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="96.6962%" y="229" width="0.4835%" height="15" fill="rgb(222,116,37)" fg:x="1200" fg:w="6"/><text x="96.9462%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="97.0991%" y="213" width="0.0806%" height="15" fill="rgb(254,17,48)" fg:x="1205" fg:w="1"/><text x="97.3491%" y="223.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.1797%" y="229" width="0.0806%" height="15" fill="rgb(224,36,32)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.1797%" y="213" width="0.0806%" height="15" fill="rgb(232,90,46)" fg:x="1206" fg:w="1"/><text x="97.4297%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::convert::TryFrom&lt;&amp;str&gt;&gt;::try_from (60 samples, 4.83%)</title><rect x="92.5060%" y="309" width="4.8348%" height="15" fill="rgb(241,66,40)" fg:x="1148" fg:w="60"/><text x="92.7560%" y="319.50">&lt;regex..</text></g><g><title>regex::builders::string::RegexBuilder::build (59 samples, 4.75%)</title><rect x="92.5866%" y="293" width="4.7542%" height="15" fill="rgb(249,184,29)" fg:x="1149" fg:w="59"/><text x="92.8366%" y="303.50">regex:..</text></g><g><title>regex_automata::meta::regex::Builder::build (59 samples, 4.75%)</title><rect x="92.5866%" y="277" width="4.7542%" height="15" fill="rgb(231,181,1)" fg:x="1149" fg:w="59"/><text x="92.8366%" y="287.50">regex_..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="97.1797%" y="261" width="0.1612%" height="15" fill="rgb(224,94,2)" fg:x="1206" fg:w="2"/><text x="97.4297%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.1797%" y="245" width="0.1612%" height="15" fill="rgb(229,170,15)" fg:x="1206" fg:w="2"/><text x="97.4297%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.2603%" y="229" width="0.0806%" height="15" fill="rgb(240,127,35)" fg:x="1207" fg:w="1"/><text x="97.5103%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="97.3409%" y="309" width="0.1612%" height="15" fill="rgb(248,196,34)" fg:x="1208" fg:w="2"/><text x="97.5909%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (2 samples, 0.16%)</title><rect x="97.3409%" y="293" width="0.1612%" height="15" fill="rgb(236,137,7)" fg:x="1208" fg:w="2"/><text x="97.5909%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="97.3409%" y="277" width="0.1612%" height="15" fill="rgb(235,127,16)" fg:x="1208" fg:w="2"/><text x="97.5909%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="97.3409%" y="261" width="0.1612%" height="15" fill="rgb(250,192,54)" fg:x="1208" fg:w="2"/><text x="97.5909%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="97.3409%" y="245" width="0.1612%" height="15" fill="rgb(218,98,20)" fg:x="1208" fg:w="2"/><text x="97.5909%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.6632%" y="213" width="0.0806%" height="15" fill="rgb(230,176,47)" fg:x="1212" fg:w="1"/><text x="97.9132%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.6632%" y="197" width="0.0806%" height="15" fill="rgb(244,2,33)" fg:x="1212" fg:w="1"/><text x="97.9132%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.6632%" y="181" width="0.0806%" height="15" fill="rgb(231,100,17)" fg:x="1212" fg:w="1"/><text x="97.9132%" y="191.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="97.7438%" y="213" width="0.0806%" height="15" fill="rgb(245,23,12)" fg:x="1213" fg:w="1"/><text x="97.9938%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="97.5020%" y="229" width="0.4029%" height="15" fill="rgb(249,55,22)" fg:x="1210" fg:w="5"/><text x="97.7520%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="97.8243%" y="213" width="0.0806%" height="15" fill="rgb(207,134,9)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.8243%" y="197" width="0.0806%" height="15" fill="rgb(218,134,0)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.8243%" y="181" width="0.0806%" height="15" fill="rgb(213,212,33)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.8243%" y="165" width="0.0806%" height="15" fill="rgb(252,106,18)" fg:x="1214" fg:w="1"/><text x="98.0743%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (127 samples, 10.23%)</title><rect x="87.7518%" y="405" width="10.2337%" height="15" fill="rgb(208,126,42)" fg:x="1089" fg:w="127"/><text x="88.0018%" y="415.50">&lt;&amp;kernel::model..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (118 samples, 9.51%)</title><rect x="88.4770%" y="389" width="9.5085%" height="15" fill="rgb(246,175,29)" fg:x="1098" fg:w="118"/><text x="88.7270%" y="399.50">plugins_core::..</text></g><g><title>indefinite::indefinite (118 samples, 9.51%)</title><rect x="88.4770%" y="373" width="9.5085%" height="15" fill="rgb(215,13,50)" fg:x="1098" fg:w="118"/><text x="88.7270%" y="383.50">indefinite::in..</text></g><g><title>indefinite::methods::indefinite (118 samples, 9.51%)</title><rect x="88.4770%" y="357" width="9.5085%" height="15" fill="rgb(216,172,15)" fg:x="1098" fg:w="118"/><text x="88.7270%" y="367.50">indefinite::me..</text></g><g><title>indefinite::methods::apply_rules (118 samples, 9.51%)</title><rect x="88.4770%" y="341" width="9.5085%" height="15" fill="rgb(212,103,13)" fg:x="1098" fg:w="118"/><text x="88.7270%" y="351.50">indefinite::me..</text></g><g><title>indefinite::rules::number::Number::check (68 samples, 5.48%)</title><rect x="92.5060%" y="325" width="5.4795%" height="15" fill="rgb(231,171,36)" fg:x="1148" fg:w="68"/><text x="92.7560%" y="335.50">indefin..</text></g><g><title>regex::regex::string::Regex::is_match_at (6 samples, 0.48%)</title><rect x="97.5020%" y="309" width="0.4835%" height="15" fill="rgb(250,123,20)" fg:x="1210" fg:w="6"/><text x="97.7520%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (6 samples, 0.48%)</title><rect x="97.5020%" y="293" width="0.4835%" height="15" fill="rgb(212,53,50)" fg:x="1210" fg:w="6"/><text x="97.7520%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (6 samples, 0.48%)</title><rect x="97.5020%" y="277" width="0.4835%" height="15" fill="rgb(243,54,12)" fg:x="1210" fg:w="6"/><text x="97.7520%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (6 samples, 0.48%)</title><rect x="97.5020%" y="261" width="0.4835%" height="15" fill="rgb(234,101,34)" fg:x="1210" fg:w="6"/><text x="97.7520%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (6 samples, 0.48%)</title><rect x="97.5020%" y="245" width="0.4835%" height="15" fill="rgb(254,67,22)" fg:x="1210" fg:w="6"/><text x="97.7520%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="97.9049%" y="229" width="0.0806%" height="15" fill="rgb(250,35,47)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="97.9049%" y="213" width="0.0806%" height="15" fill="rgb(226,126,38)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.9049%" y="197" width="0.0806%" height="15" fill="rgb(216,138,53)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.9049%" y="181" width="0.0806%" height="15" fill="rgb(246,199,43)" fg:x="1215" fg:w="1"/><text x="98.1549%" y="191.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="98.0661%" y="357" width="0.0806%" height="15" fill="rgb(232,125,11)" fg:x="1217" fg:w="1"/><text x="98.3161%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="98.0661%" y="341" width="0.0806%" height="15" fill="rgb(218,219,45)" fg:x="1217" fg:w="1"/><text x="98.3161%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.0661%" y="325" width="0.0806%" height="15" fill="rgb(216,102,54)" fg:x="1217" fg:w="1"/><text x="98.3161%" y="335.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="97.9855%" y="405" width="0.2417%" height="15" fill="rgb(250,228,7)" fg:x="1216" fg:w="3"/><text x="98.2355%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="97.9855%" y="389" width="0.2417%" height="15" fill="rgb(226,125,25)" fg:x="1216" fg:w="3"/><text x="98.2355%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="97.9855%" y="373" width="0.2417%" height="15" fill="rgb(224,165,27)" fg:x="1216" fg:w="3"/><text x="98.2355%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.1467%" y="357" width="0.0806%" height="15" fill="rgb(233,86,3)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.1467%" y="341" width="0.0806%" height="15" fill="rgb(228,116,20)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="98.1467%" y="325" width="0.0806%" height="15" fill="rgb(209,192,17)" fg:x="1218" fg:w="1"/><text x="98.3967%" y="335.50"></text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (136 samples, 10.96%)</title><rect x="87.3489%" y="565" width="10.9589%" height="15" fill="rgb(224,88,34)" fg:x="1084" fg:w="136"/><text x="87.5989%" y="575.50">kernel::plugins:..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (136 samples, 10.96%)</title><rect x="87.3489%" y="549" width="10.9589%" height="15" fill="rgb(233,38,6)" fg:x="1084" fg:w="136"/><text x="87.5989%" y="559.50">&lt;plugins_dynlib:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (136 samples, 10.96%)</title><rect x="87.3489%" y="533" width="10.9589%" height="15" fill="rgb(212,59,30)" fg:x="1084" fg:w="136"/><text x="87.5989%" y="543.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (135 samples, 10.88%)</title><rect x="87.4295%" y="517" width="10.8783%" height="15" fill="rgb(213,80,3)" fg:x="1085" fg:w="135"/><text x="87.6795%" y="527.50">core::ops::funct..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (135 samples, 10.88%)</title><rect x="87.4295%" y="501" width="10.8783%" height="15" fill="rgb(251,178,7)" fg:x="1085" fg:w="135"/><text x="87.6795%" y="511.50">kernel::plugins:..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (135 samples, 10.88%)</title><rect x="87.4295%" y="485" width="10.8783%" height="15" fill="rgb(213,154,26)" fg:x="1085" fg:w="135"/><text x="87.6795%" y="495.50">core::ops::funct..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (135 samples, 10.88%)</title><rect x="87.4295%" y="469" width="10.8783%" height="15" fill="rgb(238,165,49)" fg:x="1085" fg:w="135"/><text x="87.6795%" y="479.50">&lt;alloc::boxed::B..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (134 samples, 10.80%)</title><rect x="87.5101%" y="453" width="10.7977%" height="15" fill="rgb(248,91,46)" fg:x="1086" fg:w="134"/><text x="87.7601%" y="463.50">&lt;engine::session..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (134 samples, 10.80%)</title><rect x="87.5101%" y="437" width="10.7977%" height="15" fill="rgb(244,21,52)" fg:x="1086" fg:w="134"/><text x="87.7601%" y="447.50">&lt;plugins_core::l..</text></g><g><title>plugins_core::looking::model::new_area_observation (131 samples, 10.56%)</title><rect x="87.7518%" y="421" width="10.5560%" height="15" fill="rgb(247,122,20)" fg:x="1089" fg:w="131"/><text x="88.0018%" y="431.50">plugins_core::l..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="98.2272%" y="405" width="0.0806%" height="15" fill="rgb(218,27,9)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="415.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (1 samples, 0.08%)</title><rect x="98.2272%" y="389" width="0.0806%" height="15" fill="rgb(246,7,6)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="399.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (1 samples, 0.08%)</title><rect x="98.2272%" y="373" width="0.0806%" height="15" fill="rgb(227,135,54)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (1 samples, 0.08%)</title><rect x="98.2272%" y="357" width="0.0806%" height="15" fill="rgb(247,14,11)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="367.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (1 samples, 0.08%)</title><rect x="98.2272%" y="341" width="0.0806%" height="15" fill="rgb(206,149,34)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="351.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="98.2272%" y="325" width="0.0806%" height="15" fill="rgb(227,228,4)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.2272%" y="309" width="0.0806%" height="15" fill="rgb(238,218,28)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2272%" y="293" width="0.0806%" height="15" fill="rgb(252,86,40)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="98.2272%" y="277" width="0.0806%" height="15" fill="rgb(251,225,11)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2272%" y="261" width="0.0806%" height="15" fill="rgb(206,46,49)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="271.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.2272%" y="245" width="0.0806%" height="15" fill="rgb(245,128,24)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.2272%" y="229" width="0.0806%" height="15" fill="rgb(219,177,34)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="239.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.2272%" y="213" width="0.0806%" height="15" fill="rgb(218,60,48)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.2272%" y="197" width="0.0806%" height="15" fill="rgb(221,11,5)" fg:x="1219" fg:w="1"/><text x="98.4772%" y="207.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="98.3078%" y="517" width="0.0806%" height="15" fill="rgb(220,148,13)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.3078%" y="501" width="0.0806%" height="15" fill="rgb(210,16,3)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3078%" y="485" width="0.0806%" height="15" fill="rgb(236,80,2)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3078%" y="469" width="0.0806%" height="15" fill="rgb(239,129,19)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3078%" y="453" width="0.0806%" height="15" fill="rgb(220,106,35)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3078%" y="437" width="0.0806%" height="15" fill="rgb(252,139,45)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3078%" y="421" width="0.0806%" height="15" fill="rgb(229,8,36)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3078%" y="405" width="0.0806%" height="15" fill="rgb(230,126,33)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.3078%" y="389" width="0.0806%" height="15" fill="rgb(239,140,21)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.3078%" y="373" width="0.0806%" height="15" fill="rgb(254,104,9)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.3078%" y="357" width="0.0806%" height="15" fill="rgb(239,52,14)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.3078%" y="341" width="0.0806%" height="15" fill="rgb(208,227,44)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.3078%" y="325" width="0.0806%" height="15" fill="rgb(246,18,19)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.3078%" y="309" width="0.0806%" height="15" fill="rgb(235,228,25)" fg:x="1220" fg:w="1"/><text x="98.5578%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3884%" y="405" width="0.0806%" height="15" fill="rgb(240,156,20)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.3884%" y="389" width="0.0806%" height="15" fill="rgb(224,8,20)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.3884%" y="373" width="0.0806%" height="15" fill="rgb(214,12,52)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.3884%" y="357" width="0.0806%" height="15" fill="rgb(211,220,47)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="367.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.3884%" y="341" width="0.0806%" height="15" fill="rgb(250,173,5)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="98.3884%" y="325" width="0.0806%" height="15" fill="rgb(250,125,52)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="98.3884%" y="309" width="0.0806%" height="15" fill="rgb(209,133,18)" fg:x="1221" fg:w="1"/><text x="98.6384%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3884%" y="437" width="0.1612%" height="15" fill="rgb(216,173,22)" fg:x="1221" fg:w="2"/><text x="98.6384%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.3884%" y="421" width="0.1612%" height="15" fill="rgb(205,3,22)" fg:x="1221" fg:w="2"/><text x="98.6384%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.4690%" y="405" width="0.0806%" height="15" fill="rgb(248,22,20)" fg:x="1222" fg:w="1"/><text x="98.7190%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (3 samples, 0.24%)</title><rect x="98.3884%" y="453" width="0.2417%" height="15" fill="rgb(233,6,29)" fg:x="1221" fg:w="3"/><text x="98.6384%" y="463.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.5496%" y="437" width="0.0806%" height="15" fill="rgb(240,22,54)" fg:x="1223" fg:w="1"/><text x="98.7996%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="98.6301%" y="453" width="0.1612%" height="15" fill="rgb(231,133,32)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.6301%" y="437" width="0.1612%" height="15" fill="rgb(248,193,4)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6301%" y="421" width="0.1612%" height="15" fill="rgb(211,178,46)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="98.6301%" y="405" width="0.1612%" height="15" fill="rgb(224,5,42)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6301%" y="389" width="0.1612%" height="15" fill="rgb(239,176,25)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="399.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.6301%" y="373" width="0.1612%" height="15" fill="rgb(245,187,50)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.6301%" y="357" width="0.1612%" height="15" fill="rgb(248,24,15)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="367.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="98.6301%" y="341" width="0.1612%" height="15" fill="rgb(205,166,13)" fg:x="1224" fg:w="2"/><text x="98.8801%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7107%" y="325" width="0.0806%" height="15" fill="rgb(208,114,23)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7107%" y="309" width="0.0806%" height="15" fill="rgb(239,127,18)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7107%" y="293" width="0.0806%" height="15" fill="rgb(219,154,28)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="98.7107%" y="277" width="0.0806%" height="15" fill="rgb(225,157,23)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.7107%" y="261" width="0.0806%" height="15" fill="rgb(219,8,6)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="271.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7107%" y="245" width="0.0806%" height="15" fill="rgb(212,47,6)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="98.7107%" y="229" width="0.0806%" height="15" fill="rgb(224,190,4)" fg:x="1225" fg:w="1"/><text x="98.9607%" y="239.50"></text></g><g><title>engine::session::Session::captured (153 samples, 12.33%)</title><rect x="86.5431%" y="709" width="12.3288%" height="15" fill="rgb(239,183,29)" fg:x="1074" fg:w="153"/><text x="86.7931%" y="719.50">engine::session::S..</text></g><g><title>engine::session::logs::capture (152 samples, 12.25%)</title><rect x="86.6237%" y="693" width="12.2482%" height="15" fill="rgb(213,57,7)" fg:x="1075" fg:w="152"/><text x="86.8737%" y="703.50">engine::session::l..</text></g><g><title>tracing_core::dispatcher::with_default (151 samples, 12.17%)</title><rect x="86.7043%" y="677" width="12.1676%" height="15" fill="rgb(216,148,1)" fg:x="1076" fg:w="151"/><text x="86.9543%" y="687.50">tracing_core::disp..</text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (151 samples, 12.17%)</title><rect x="86.7043%" y="661" width="12.1676%" height="15" fill="rgb(236,182,29)" fg:x="1076" fg:w="151"/><text x="86.9543%" y="671.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::apply_middleware (151 samples, 12.17%)</title><rect x="86.7043%" y="645" width="12.1676%" height="15" fill="rgb(244,120,48)" fg:x="1076" fg:w="151"/><text x="86.9543%" y="655.50">kernel::plugins::m..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (151 samples, 12.17%)</title><rect x="86.7043%" y="629" width="12.1676%" height="15" fill="rgb(206,71,34)" fg:x="1076" fg:w="151"/><text x="86.9543%" y="639.50">kernel::plugins::m..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (151 samples, 12.17%)</title><rect x="86.7043%" y="613" width="12.1676%" height="15" fill="rgb(242,32,6)" fg:x="1076" fg:w="151"/><text x="86.9543%" y="623.50">&lt;engine::session::..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (144 samples, 11.60%)</title><rect x="87.2683%" y="597" width="11.6035%" height="15" fill="rgb(241,35,3)" fg:x="1083" fg:w="144"/><text x="87.5183%" y="607.50">kernel::plugins::..</text></g><g><title>&lt;plugins_rune::RuneMiddleware as kernel::plugins::mw::Middleware&gt;::handle (143 samples, 11.52%)</title><rect x="87.3489%" y="581" width="11.5230%" height="15" fill="rgb(222,62,19)" fg:x="1084" fg:w="143"/><text x="87.5989%" y="591.50">&lt;plugins_rune::Ru..</text></g><g><title>plugins_rune::sources::load_sources_from_surroundings (7 samples, 0.56%)</title><rect x="98.3078%" y="565" width="0.5641%" height="15" fill="rgb(223,110,41)" fg:x="1220" fg:w="7"/><text x="98.5578%" y="575.50"></text></g><g><title>plugins_core::finding::EntityRelationshipSet::expand (7 samples, 0.56%)</title><rect x="98.3078%" y="549" width="0.5641%" height="15" fill="rgb(208,224,4)" fg:x="1220" fg:w="7"/><text x="98.5578%" y="559.50"></text></g><g><title>plugins_core::tools::contained_by (7 samples, 0.56%)</title><rect x="98.3078%" y="533" width="0.5641%" height="15" fill="rgb(241,137,19)" fg:x="1220" fg:w="7"/><text x="98.5578%" y="543.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (6 samples, 0.48%)</title><rect x="98.3884%" y="517" width="0.4835%" height="15" fill="rgb(244,24,17)" fg:x="1221" fg:w="6"/><text x="98.6384%" y="527.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (6 samples, 0.48%)</title><rect x="98.3884%" y="501" width="0.4835%" height="15" fill="rgb(245,178,49)" fg:x="1221" fg:w="6"/><text x="98.6384%" y="511.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.48%)</title><rect x="98.3884%" y="485" width="0.4835%" height="15" fill="rgb(219,160,38)" fg:x="1221" fg:w="6"/><text x="98.6384%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="98.3884%" y="469" width="0.4835%" height="15" fill="rgb(228,137,14)" fg:x="1221" fg:w="6"/><text x="98.6384%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="98.7913%" y="453" width="0.0806%" height="15" fill="rgb(237,134,11)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="463.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="98.7913%" y="437" width="0.0806%" height="15" fill="rgb(211,126,44)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7913%" y="421" width="0.0806%" height="15" fill="rgb(226,171,33)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7913%" y="405" width="0.0806%" height="15" fill="rgb(253,99,13)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7913%" y="389" width="0.0806%" height="15" fill="rgb(244,48,7)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7913%" y="373" width="0.0806%" height="15" fill="rgb(244,217,54)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="98.7913%" y="357" width="0.0806%" height="15" fill="rgb(224,15,18)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="98.7913%" y="341" width="0.0806%" height="15" fill="rgb(244,99,12)" fg:x="1226" fg:w="1"/><text x="99.0413%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8719%" y="661" width="0.0806%" height="15" fill="rgb(233,226,8)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8719%" y="645" width="0.0806%" height="15" fill="rgb(229,211,3)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8719%" y="629" width="0.0806%" height="15" fill="rgb(216,140,21)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8719%" y="613" width="0.0806%" height="15" fill="rgb(234,122,30)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8719%" y="597" width="0.0806%" height="15" fill="rgb(236,25,46)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8719%" y="581" width="0.0806%" height="15" fill="rgb(217,52,54)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8719%" y="565" width="0.0806%" height="15" fill="rgb(222,29,26)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8719%" y="549" width="0.0806%" height="15" fill="rgb(216,177,29)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8719%" y="533" width="0.0806%" height="15" fill="rgb(247,136,51)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8719%" y="517" width="0.0806%" height="15" fill="rgb(231,47,47)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8719%" y="501" width="0.0806%" height="15" fill="rgb(211,192,36)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="511.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8719%" y="485" width="0.0806%" height="15" fill="rgb(229,156,32)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8719%" y="469" width="0.0806%" height="15" fill="rgb(248,213,20)" fg:x="1227" fg:w="1"/><text x="99.1219%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.9525%" y="613" width="0.0806%" height="15" fill="rgb(217,64,7)" fg:x="1228" fg:w="1"/><text x="99.2025%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.0330%" y="613" width="0.0806%" height="15" fill="rgb(232,142,8)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.0330%" y="597" width="0.0806%" height="15" fill="rgb(224,92,44)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="607.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.0330%" y="581" width="0.0806%" height="15" fill="rgb(214,169,17)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.0330%" y="565" width="0.0806%" height="15" fill="rgb(210,59,37)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.0330%" y="549" width="0.0806%" height="15" fill="rgb(214,116,48)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="559.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.0330%" y="533" width="0.0806%" height="15" fill="rgb(244,191,6)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="99.0330%" y="517" width="0.0806%" height="15" fill="rgb(241,50,52)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="99.0330%" y="501" width="0.0806%" height="15" fill="rgb(236,75,39)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="511.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (1 samples, 0.08%)</title><rect x="99.0330%" y="485" width="0.0806%" height="15" fill="rgb(236,99,0)" fg:x="1229" fg:w="1"/><text x="99.2830%" y="495.50"></text></g><g><title>engine::session::internal::Added::find_refs (5 samples, 0.40%)</title><rect x="98.8719%" y="693" width="0.4029%" height="15" fill="rgb(207,202,15)" fg:x="1227" fg:w="5"/><text x="99.1219%" y="703.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (5 samples, 0.40%)</title><rect x="98.8719%" y="677" width="0.4029%" height="15" fill="rgb(233,207,14)" fg:x="1227" fg:w="5"/><text x="99.1219%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="98.9525%" y="661" width="0.3223%" height="15" fill="rgb(226,27,51)" fg:x="1228" fg:w="4"/><text x="99.2025%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.32%)</title><rect x="98.9525%" y="645" width="0.3223%" height="15" fill="rgb(206,104,42)" fg:x="1228" fg:w="4"/><text x="99.2025%" y="655.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.9525%" y="629" width="0.3223%" height="15" fill="rgb(212,225,4)" fg:x="1228" fg:w="4"/><text x="99.2025%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.1136%" y="613" width="0.1612%" height="15" fill="rgb(233,96,42)" fg:x="1230" fg:w="2"/><text x="99.3636%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.1136%" y="597" width="0.1612%" height="15" fill="rgb(229,21,32)" fg:x="1230" fg:w="2"/><text x="99.3636%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="99.1942%" y="581" width="0.0806%" height="15" fill="rgb(226,216,24)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1942%" y="565" width="0.0806%" height="15" fill="rgb(221,163,17)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="99.1942%" y="549" width="0.0806%" height="15" fill="rgb(216,216,42)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="99.1942%" y="533" width="0.0806%" height="15" fill="rgb(240,118,7)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="99.1942%" y="517" width="0.0806%" height="15" fill="rgb(221,67,37)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.1942%" y="501" width="0.0806%" height="15" fill="rgb(241,32,44)" fg:x="1231" fg:w="1"/><text x="99.4442%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2748%" y="677" width="0.0806%" height="15" fill="rgb(235,204,43)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2748%" y="661" width="0.0806%" height="15" fill="rgb(213,116,10)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2748%" y="645" width="0.0806%" height="15" fill="rgb(239,15,48)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2748%" y="629" width="0.0806%" height="15" fill="rgb(207,123,36)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2748%" y="613" width="0.0806%" height="15" fill="rgb(209,103,30)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2748%" y="597" width="0.0806%" height="15" fill="rgb(238,100,19)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2748%" y="581" width="0.0806%" height="15" fill="rgb(244,30,14)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2748%" y="565" width="0.0806%" height="15" fill="rgb(249,174,6)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2748%" y="549" width="0.0806%" height="15" fill="rgb(235,213,41)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2748%" y="533" width="0.0806%" height="15" fill="rgb(213,118,6)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2748%" y="517" width="0.0806%" height="15" fill="rgb(235,44,51)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2748%" y="501" width="0.0806%" height="15" fill="rgb(217,9,53)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2748%" y="485" width="0.0806%" height="15" fill="rgb(237,172,34)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2748%" y="469" width="0.0806%" height="15" fill="rgb(206,206,11)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2748%" y="453" width="0.0806%" height="15" fill="rgb(214,149,29)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="463.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.08%)</title><rect x="99.2748%" y="437" width="0.0806%" height="15" fill="rgb(208,123,3)" fg:x="1232" fg:w="1"/><text x="99.5248%" y="447.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (2 samples, 0.16%)</title><rect x="99.3554%" y="677" width="0.1612%" height="15" fill="rgb(229,126,4)" fg:x="1233" fg:w="2"/><text x="99.6054%" y="687.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4359%" y="661" width="0.0806%" height="15" fill="rgb(222,92,36)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4359%" y="645" width="0.0806%" height="15" fill="rgb(216,39,41)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.4359%" y="629" width="0.0806%" height="15" fill="rgb(253,127,28)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="639.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.4359%" y="613" width="0.0806%" height="15" fill="rgb(249,152,51)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="623.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.4359%" y="597" width="0.0806%" height="15" fill="rgb(209,123,42)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="607.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.4359%" y="581" width="0.0806%" height="15" fill="rgb(241,118,22)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4359%" y="565" width="0.0806%" height="15" fill="rgb(208,25,7)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.4359%" y="549" width="0.0806%" height="15" fill="rgb(243,144,39)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.4359%" y="533" width="0.0806%" height="15" fill="rgb(250,50,5)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="543.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="99.4359%" y="517" width="0.0806%" height="15" fill="rgb(207,67,11)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="527.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="99.4359%" y="501" width="0.0806%" height="15" fill="rgb(245,204,40)" fg:x="1234" fg:w="1"/><text x="99.6859%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.5165%" y="629" width="0.0806%" height="15" fill="rgb(238,228,24)" fg:x="1235" fg:w="1"/><text x="99.7665%" y="639.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="99.5165%" y="677" width="0.1612%" height="15" fill="rgb(217,116,22)" fg:x="1235" fg:w="2"/><text x="99.7665%" y="687.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.5165%" y="661" width="0.1612%" height="15" fill="rgb(234,98,12)" fg:x="1235" fg:w="2"/><text x="99.7665%" y="671.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.5165%" y="645" width="0.1612%" height="15" fill="rgb(242,170,50)" fg:x="1235" fg:w="2"/><text x="99.7665%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5971%" y="629" width="0.0806%" height="15" fill="rgb(235,7,5)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5971%" y="613" width="0.0806%" height="15" fill="rgb(241,114,28)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="623.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5971%" y="597" width="0.0806%" height="15" fill="rgb(246,112,42)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5971%" y="581" width="0.0806%" height="15" fill="rgb(248,228,14)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="591.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5971%" y="565" width="0.0806%" height="15" fill="rgb(208,133,18)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.5971%" y="549" width="0.0806%" height="15" fill="rgb(207,35,49)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5971%" y="533" width="0.0806%" height="15" fill="rgb(205,68,36)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="543.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5971%" y="517" width="0.0806%" height="15" fill="rgb(245,62,40)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.5971%" y="501" width="0.0806%" height="15" fill="rgb(228,27,24)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5971%" y="485" width="0.0806%" height="15" fill="rgb(253,19,12)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.5971%" y="469" width="0.0806%" height="15" fill="rgb(232,28,20)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.5971%" y="453" width="0.0806%" height="15" fill="rgb(218,35,51)" fg:x="1236" fg:w="1"/><text x="99.8471%" y="463.50"></text></g><g><title>engine::session::Session::load_entity (11 samples, 0.89%)</title><rect x="98.8719%" y="709" width="0.8864%" height="15" fill="rgb(212,90,40)" fg:x="1227" fg:w="11"/><text x="99.1219%" y="719.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.2748%" y="693" width="0.4835%" height="15" fill="rgb(220,172,12)" fg:x="1232" fg:w="6"/><text x="99.5248%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.6777%" y="677" width="0.0806%" height="15" fill="rgb(226,159,20)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="687.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.6777%" y="661" width="0.0806%" height="15" fill="rgb(234,205,16)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6777%" y="645" width="0.0806%" height="15" fill="rgb(207,9,39)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6777%" y="629" width="0.0806%" height="15" fill="rgb(249,143,15)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="639.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.6777%" y="613" width="0.0806%" height="15" fill="rgb(253,133,29)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.6777%" y="597" width="0.0806%" height="15" fill="rgb(221,187,0)" fg:x="1237" fg:w="1"/><text x="99.9277%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::HasProps&lt;kernel::model::entity::Entity&gt;&gt;::props (1 samples, 0.08%)</title><rect x="99.7583%" y="661" width="0.0806%" height="15" fill="rgb(205,204,26)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7583%" y="645" width="0.0806%" height="15" fill="rgb(224,68,54)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7583%" y="629" width="0.0806%" height="15" fill="rgb(209,67,4)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.7583%" y="613" width="0.0806%" height="15" fill="rgb(228,229,18)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7583%" y="597" width="0.0806%" height="15" fill="rgb(231,89,13)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.7583%" y="581" width="0.0806%" height="15" fill="rgb(210,182,18)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="591.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.7583%" y="565" width="0.0806%" height="15" fill="rgb(240,105,2)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="575.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.7583%" y="549" width="0.0806%" height="15" fill="rgb(207,170,50)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="559.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.7583%" y="533" width="0.0806%" height="15" fill="rgb(232,133,24)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.7583%" y="517" width="0.0806%" height="15" fill="rgb(235,166,27)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.7583%" y="501" width="0.0806%" height="15" fill="rgb(209,19,13)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.7583%" y="485" width="0.0806%" height="15" fill="rgb(226,79,39)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.7583%" y="469" width="0.0806%" height="15" fill="rgb(222,163,10)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.7583%" y="453" width="0.0806%" height="15" fill="rgb(214,44,19)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.7583%" y="437" width="0.0806%" height="15" fill="rgb(210,217,13)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="447.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.7583%" y="421" width="0.0806%" height="15" fill="rgb(237,61,54)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.7583%" y="405" width="0.0806%" height="15" fill="rgb(226,184,24)" fg:x="1238" fg:w="1"/><text x="100.0083%" y="415.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.8388%" y="661" width="0.0806%" height="15" fill="rgb(223,226,4)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.8388%" y="645" width="0.0806%" height="15" fill="rgb(210,26,41)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="655.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.8388%" y="629" width="0.0806%" height="15" fill="rgb(220,221,6)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="99.8388%" y="613" width="0.0806%" height="15" fill="rgb(225,89,49)" fg:x="1239" fg:w="1"/><text x="100.0888%" y="623.50"></text></g><g><title>all (1,241 samples, 100%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(218,70,45)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1103.50"></text></g><g><title>simple-9b79c65b (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(238,166,21)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1087.50">simple-9b79c65b</text></g><g><title>_start (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(224,141,44)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1071.50">_start</text></g><g><title>__libc_start_main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(230,12,49)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1055.50">__libc_start_main</text></g><g><title>main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(212,174,12)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1039.50">main</text></g><g><title>std::rt::lang_start_internal (1,241 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(246,67,9)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1023.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(239,35,23)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(211,167,0)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(225,119,45)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="975.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(210,162,6)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="959.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,241 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(208,118,35)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="943.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,241 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(239,4,53)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="927.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,241 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(213,130,21)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="911.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,241 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(235,148,0)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="895.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,241 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(244,224,18)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="879.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,241 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(211,214,4)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="863.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,241 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(206,119,25)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="847.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,241 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(243,93,47)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,241 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(224,194,6)" fg:x="0" fg:w="1241"/><text x="0.2500%" y="815.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (312 samples, 25.14%)</title><rect x="74.8590%" y="789" width="25.1410%" height="15" fill="rgb(243,229,6)" fg:x="929" fg:w="312"/><text x="75.1090%" y="799.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as ..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (312 samples, 25.14%)</title><rect x="74.8590%" y="773" width="25.1410%" height="15" fill="rgb(207,23,50)" fg:x="929" fg:w="312"/><text x="75.1090%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (312 samples, 25.14%)</title><rect x="74.8590%" y="757" width="25.1410%" height="15" fill="rgb(253,192,32)" fg:x="929" fg:w="312"/><text x="75.1090%" y="767.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (167 samples, 13.46%)</title><rect x="86.5431%" y="741" width="13.4569%" height="15" fill="rgb(213,21,6)" fg:x="1074" fg:w="167"/><text x="86.7931%" y="751.50">engine::session::Ses..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (167 samples, 13.46%)</title><rect x="86.5431%" y="725" width="13.4569%" height="15" fill="rgb(243,151,13)" fg:x="1074" fg:w="167"/><text x="86.7931%" y="735.50">engine::session::Ses..</text></g><g><title>kernel::model::EntityPtrResolver::world (3 samples, 0.24%)</title><rect x="99.7583%" y="709" width="0.2417%" height="15" fill="rgb(233,165,41)" fg:x="1238" fg:w="3"/><text x="100.0083%" y="719.50"></text></g><g><title>engine::session::Session::load_entity (3 samples, 0.24%)</title><rect x="99.7583%" y="693" width="0.2417%" height="15" fill="rgb(246,176,45)" fg:x="1238" fg:w="3"/><text x="100.0083%" y="703.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (3 samples, 0.24%)</title><rect x="99.7583%" y="677" width="0.2417%" height="15" fill="rgb(217,170,52)" fg:x="1238" fg:w="3"/><text x="100.0083%" y="687.50"></text></g><g><title>kernel::model::props::Props::u64_property (1 samples, 0.08%)</title><rect x="99.9194%" y="661" width="0.0806%" height="15" fill="rgb(214,203,54)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="99.9194%" y="645" width="0.0806%" height="15" fill="rgb(248,215,49)" fg:x="1240" fg:w="1"/><text x="100.1694%" y="655.50"></text></g></svg></svg>