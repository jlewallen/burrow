<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1062" onload="init(evt)" viewBox="0 0 1200 1062" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1062" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1045.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1045.00"> </text><svg id="frames" x="10" width="1180" total_samples="1265"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0791%" y="661" width="0.0791%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="1"/><text x="0.3291%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.0791%" y="645" width="0.0791%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.3291%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0791%" y="629" width="0.0791%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="1"/><text x="0.3291%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0791%" y="613" width="0.0791%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3291%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.0791%" y="597" width="0.0791%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.3291%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0791%" y="581" width="0.0791%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.3291%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.2372%" y="613" width="0.0791%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.4872%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (5 samples, 0.40%)</title><rect x="0.3953%" y="549" width="0.3953%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="5"/><text x="0.6453%" y="559.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.5534%" y="533" width="0.2372%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="3"/><text x="0.8034%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.63%)</title><rect x="0.3953%" y="581" width="0.6324%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="8"/><text x="0.6453%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="0.3953%" y="565" width="0.6324%" height="15" fill="rgb(250,228,42)" fg:x="5" fg:w="8"/><text x="0.6453%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.7905%" y="549" width="0.2372%" height="15" fill="rgb(240,193,28)" fg:x="10" fg:w="3"/><text x="1.0405%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="0.7905%" y="533" width="0.2372%" height="15" fill="rgb(216,20,37)" fg:x="10" fg:w="3"/><text x="1.0405%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="0.8696%" y="517" width="0.1581%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="2"/><text x="1.1196%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.3439%" y="501" width="0.0791%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="1"/><text x="1.5939%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="1.2648%" y="533" width="0.2372%" height="15" fill="rgb(231,73,38)" fg:x="16" fg:w="3"/><text x="1.5148%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="1.2648%" y="517" width="0.2372%" height="15" fill="rgb(225,20,46)" fg:x="16" fg:w="3"/><text x="1.5148%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.4229%" y="501" width="0.0791%" height="15" fill="rgb(210,31,41)" fg:x="18" fg:w="1"/><text x="1.6729%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5020%" y="517" width="0.0791%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="1"/><text x="1.7520%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="1.5810%" y="517" width="0.1581%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="2"/><text x="1.8310%" y="527.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="1.5810%" y="501" width="0.1581%" height="15" fill="rgb(249,33,26)" fg:x="20" fg:w="2"/><text x="1.8310%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="1.0277%" y="581" width="0.7905%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="10"/><text x="1.2777%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.79%)</title><rect x="1.0277%" y="565" width="0.7905%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="10"/><text x="1.2777%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="1.1067%" y="549" width="0.7115%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="9"/><text x="1.3567%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="1.5020%" y="533" width="0.3162%" height="15" fill="rgb(241,131,45)" fg:x="19" fg:w="4"/><text x="1.7520%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.7391%" y="517" width="0.0791%" height="15" fill="rgb(249,31,29)" fg:x="22" fg:w="1"/><text x="1.9891%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 1.66%)</title><rect x="0.2372%" y="629" width="1.6601%" height="15" fill="rgb(225,111,53)" fg:x="3" fg:w="21"/><text x="0.4872%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (20 samples, 1.58%)</title><rect x="0.3162%" y="613" width="1.5810%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="20"/><text x="0.5662%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (20 samples, 1.58%)</title><rect x="0.3162%" y="597" width="1.5810%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="20"/><text x="0.5662%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8182%" y="581" width="0.0791%" height="15" fill="rgb(232,36,49)" fg:x="23" fg:w="1"/><text x="2.0682%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (23 samples, 1.82%)</title><rect x="0.1581%" y="645" width="1.8182%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="23"/><text x="0.4081%" y="655.50">c..</text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.8972%" y="629" width="0.0791%" height="15" fill="rgb(229,88,8)" fg:x="24" fg:w="1"/><text x="2.1472%" y="639.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (24 samples, 1.90%)</title><rect x="0.1581%" y="661" width="1.8972%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="24"/><text x="0.4081%" y="671.50">&lt;..</text></g><g><title>core::ptr::drop_in_place&lt;engine::storage::InMemoryStorage&gt; (1 samples, 0.08%)</title><rect x="1.9763%" y="645" width="0.0791%" height="15" fill="rgb(254,191,54)" fg:x="25" fg:w="1"/><text x="2.2263%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="1.9763%" y="629" width="0.0791%" height="15" fill="rgb(241,83,37)" fg:x="25" fg:w="1"/><text x="2.2263%" y="639.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="2.0553%" y="613" width="0.0791%" height="15" fill="rgb(233,36,39)" fg:x="26" fg:w="1"/><text x="2.3053%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.0553%" y="597" width="0.0791%" height="15" fill="rgb(226,3,54)" fg:x="26" fg:w="1"/><text x="2.3053%" y="607.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="2.3715%" y="549" width="0.0791%" height="15" fill="rgb(245,192,40)" fg:x="30" fg:w="1"/><text x="2.6215%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="2.3715%" y="533" width="0.0791%" height="15" fill="rgb(238,167,29)" fg:x="30" fg:w="1"/><text x="2.6215%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.3715%" y="517" width="0.0791%" height="15" fill="rgb(232,182,51)" fg:x="30" fg:w="1"/><text x="2.6215%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="2.3715%" y="501" width="0.0791%" height="15" fill="rgb(231,60,39)" fg:x="30" fg:w="1"/><text x="2.6215%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="2.3715%" y="485" width="0.0791%" height="15" fill="rgb(208,69,12)" fg:x="30" fg:w="1"/><text x="2.6215%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="2.3715%" y="469" width="0.0791%" height="15" fill="rgb(235,93,37)" fg:x="30" fg:w="1"/><text x="2.6215%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="2.3715%" y="453" width="0.0791%" height="15" fill="rgb(213,116,39)" fg:x="30" fg:w="1"/><text x="2.6215%" y="463.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="2.3715%" y="437" width="0.0791%" height="15" fill="rgb(222,207,29)" fg:x="30" fg:w="1"/><text x="2.6215%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="2.3715%" y="421" width="0.0791%" height="15" fill="rgb(206,96,30)" fg:x="30" fg:w="1"/><text x="2.6215%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.08%)</title><rect x="2.5296%" y="341" width="0.0791%" height="15" fill="rgb(218,138,4)" fg:x="32" fg:w="1"/><text x="2.7796%" y="351.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.32%)</title><rect x="2.3715%" y="565" width="0.3162%" height="15" fill="rgb(250,191,14)" fg:x="30" fg:w="4"/><text x="2.6215%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.24%)</title><rect x="2.4506%" y="549" width="0.2372%" height="15" fill="rgb(239,60,40)" fg:x="31" fg:w="3"/><text x="2.7006%" y="559.50"></text></g><g><title>core::fmt::write (3 samples, 0.24%)</title><rect x="2.4506%" y="533" width="0.2372%" height="15" fill="rgb(206,27,48)" fg:x="31" fg:w="3"/><text x="2.7006%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.24%)</title><rect x="2.4506%" y="517" width="0.2372%" height="15" fill="rgb(225,35,8)" fg:x="31" fg:w="3"/><text x="2.7006%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.5296%" y="501" width="0.1581%" height="15" fill="rgb(250,213,24)" fg:x="32" fg:w="2"/><text x="2.7796%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="2.5296%" y="485" width="0.1581%" height="15" fill="rgb(247,123,22)" fg:x="32" fg:w="2"/><text x="2.7796%" y="495.50"></text></g><g><title>alloc::string::String::push_str (2 samples, 0.16%)</title><rect x="2.5296%" y="469" width="0.1581%" height="15" fill="rgb(231,138,38)" fg:x="32" fg:w="2"/><text x="2.7796%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.16%)</title><rect x="2.5296%" y="453" width="0.1581%" height="15" fill="rgb(231,145,46)" fg:x="32" fg:w="2"/><text x="2.7796%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="2.5296%" y="437" width="0.1581%" height="15" fill="rgb(251,118,11)" fg:x="32" fg:w="2"/><text x="2.7796%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="2.5296%" y="421" width="0.1581%" height="15" fill="rgb(217,147,25)" fg:x="32" fg:w="2"/><text x="2.7796%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="2.5296%" y="405" width="0.1581%" height="15" fill="rgb(247,81,37)" fg:x="32" fg:w="2"/><text x="2.7796%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.16%)</title><rect x="2.5296%" y="389" width="0.1581%" height="15" fill="rgb(209,12,38)" fg:x="32" fg:w="2"/><text x="2.7796%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="2.5296%" y="373" width="0.1581%" height="15" fill="rgb(227,1,9)" fg:x="32" fg:w="2"/><text x="2.7796%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.16%)</title><rect x="2.5296%" y="357" width="0.1581%" height="15" fill="rgb(248,47,43)" fg:x="32" fg:w="2"/><text x="2.7796%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.6087%" y="341" width="0.0791%" height="15" fill="rgb(221,10,30)" fg:x="33" fg:w="1"/><text x="2.8587%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.08%)</title><rect x="2.6087%" y="325" width="0.0791%" height="15" fill="rgb(210,229,1)" fg:x="33" fg:w="1"/><text x="2.8587%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.08%)</title><rect x="2.6087%" y="309" width="0.0791%" height="15" fill="rgb(222,148,37)" fg:x="33" fg:w="1"/><text x="2.8587%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.08%)</title><rect x="2.6087%" y="293" width="0.0791%" height="15" fill="rgb(234,67,33)" fg:x="33" fg:w="1"/><text x="2.8587%" y="303.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.6087%" y="277" width="0.0791%" height="15" fill="rgb(247,98,35)" fg:x="33" fg:w="1"/><text x="2.8587%" y="287.50"></text></g><g><title>_IO_setb (1 samples, 0.08%)</title><rect x="2.8458%" y="517" width="0.0791%" height="15" fill="rgb(247,138,52)" fg:x="36" fg:w="1"/><text x="3.0958%" y="527.50"></text></g><g><title>dlerror (3 samples, 0.24%)</title><rect x="2.7668%" y="549" width="0.2372%" height="15" fill="rgb(213,79,30)" fg:x="35" fg:w="3"/><text x="3.0168%" y="559.50"></text></g><g><title>__asprintf (3 samples, 0.24%)</title><rect x="2.7668%" y="533" width="0.2372%" height="15" fill="rgb(246,177,23)" fg:x="35" fg:w="3"/><text x="3.0168%" y="543.50"></text></g><g><title>__strerror_r (1 samples, 0.08%)</title><rect x="2.9249%" y="517" width="0.0791%" height="15" fill="rgb(230,62,27)" fg:x="37" fg:w="1"/><text x="3.1749%" y="527.50"></text></g><g><title>dlopen (14 samples, 1.11%)</title><rect x="3.0040%" y="549" width="1.1067%" height="15" fill="rgb(216,154,8)" fg:x="38" fg:w="14"/><text x="3.2540%" y="559.50"></text></g><g><title>_dl_catch_error (13 samples, 1.03%)</title><rect x="3.0830%" y="533" width="1.0277%" height="15" fill="rgb(244,35,45)" fg:x="39" fg:w="13"/><text x="3.3330%" y="543.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.03%)</title><rect x="3.0830%" y="517" width="1.0277%" height="15" fill="rgb(251,115,12)" fg:x="39" fg:w="13"/><text x="3.3330%" y="527.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.03%)</title><rect x="3.0830%" y="501" width="1.0277%" height="15" fill="rgb(240,54,50)" fg:x="39" fg:w="13"/><text x="3.3330%" y="511.50"></text></g><g><title>_dl_catch_exception (13 samples, 1.03%)</title><rect x="3.0830%" y="485" width="1.0277%" height="15" fill="rgb(233,84,52)" fg:x="39" fg:w="13"/><text x="3.3330%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0316%" y="469" width="0.0791%" height="15" fill="rgb(207,117,47)" fg:x="51" fg:w="1"/><text x="4.2816%" y="479.50"></text></g><g><title>libloading::os::unix::Library::open (19 samples, 1.50%)</title><rect x="2.6877%" y="565" width="1.5020%" height="15" fill="rgb(249,43,39)" fg:x="34" fg:w="19"/><text x="2.9377%" y="575.50"></text></g><g><title>libloading::util::cstr_cow_from_bytes (1 samples, 0.08%)</title><rect x="4.1107%" y="549" width="0.0791%" height="15" fill="rgb(209,38,44)" fg:x="52" fg:w="1"/><text x="4.3607%" y="559.50"></text></g><g><title>&lt;&amp;str as alloc::ffi::c_str::CString::new::SpecNewImpl&gt;::spec_new_impl (1 samples, 0.08%)</title><rect x="4.1107%" y="533" width="0.0791%" height="15" fill="rgb(236,212,23)" fg:x="52" fg:w="1"/><text x="4.3607%" y="543.50"></text></g><g><title>alloc::ffi::c_str::CString::new::spec_new_impl_bytes (1 samples, 0.08%)</title><rect x="4.1107%" y="517" width="0.0791%" height="15" fill="rgb(242,79,21)" fg:x="52" fg:w="1"/><text x="4.3607%" y="527.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.08%)</title><rect x="4.1107%" y="501" width="0.0791%" height="15" fill="rgb(211,96,35)" fg:x="52" fg:w="1"/><text x="4.3607%" y="511.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (26 samples, 2.06%)</title><rect x="2.2134%" y="581" width="2.0553%" height="15" fill="rgb(253,215,40)" fg:x="28" fg:w="26"/><text x="2.4634%" y="591.50">&lt;..</text></g><g><title>std::sys::unix::os_str::Slice::to_string_lossy (1 samples, 0.08%)</title><rect x="4.1897%" y="565" width="0.0791%" height="15" fill="rgb(211,81,21)" fg:x="53" fg:w="1"/><text x="4.4397%" y="575.50"></text></g><g><title>&lt;std::time::Instant as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="4.2688%" y="581" width="0.0791%" height="15" fill="rgb(208,190,38)" fg:x="54" fg:w="1"/><text x="4.5188%" y="591.50"></text></g><g><title>std::time::Instant::duration_since (1 samples, 0.08%)</title><rect x="4.2688%" y="565" width="0.0791%" height="15" fill="rgb(235,213,38)" fg:x="54" fg:w="1"/><text x="4.5188%" y="575.50"></text></g><g><title>std::time::Instant::checked_duration_since (1 samples, 0.08%)</title><rect x="4.2688%" y="549" width="0.0791%" height="15" fill="rgb(237,122,38)" fg:x="54" fg:w="1"/><text x="4.5188%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::Instant::checked_sub_instant (1 samples, 0.08%)</title><rect x="4.2688%" y="533" width="0.0791%" height="15" fill="rgb(244,218,35)" fg:x="54" fg:w="1"/><text x="4.5188%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.08%)</title><rect x="4.2688%" y="517" width="0.0791%" height="15" fill="rgb(240,68,47)" fg:x="54" fg:w="1"/><text x="4.5188%" y="527.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (29 samples, 2.29%)</title><rect x="2.2134%" y="597" width="2.2925%" height="15" fill="rgb(210,16,53)" fg:x="28" fg:w="29"/><text x="2.4634%" y="607.50">k..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (2 samples, 0.16%)</title><rect x="4.3478%" y="581" width="0.1581%" height="15" fill="rgb(235,124,12)" fg:x="55" fg:w="2"/><text x="4.5978%" y="591.50"></text></g><g><title>clock_gettime (2 samples, 0.16%)</title><rect x="4.3478%" y="565" width="0.1581%" height="15" fill="rgb(224,169,11)" fg:x="55" fg:w="2"/><text x="4.5978%" y="575.50"></text></g><g><title>engine::session::Session::initialize (31 samples, 2.45%)</title><rect x="2.1344%" y="613" width="2.4506%" height="15" fill="rgb(250,166,2)" fg:x="27" fg:w="31"/><text x="2.3844%" y="623.50">en..</text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="4.5059%" y="597" width="0.0791%" height="15" fill="rgb(242,216,29)" fg:x="57" fg:w="1"/><text x="4.7559%" y="607.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="4.5059%" y="581" width="0.0791%" height="15" fill="rgb(230,116,27)" fg:x="57" fg:w="1"/><text x="4.7559%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.5059%" y="565" width="0.0791%" height="15" fill="rgb(228,99,48)" fg:x="57" fg:w="1"/><text x="4.7559%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="4.5059%" y="549" width="0.0791%" height="15" fill="rgb(253,11,6)" fg:x="57" fg:w="1"/><text x="4.7559%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="4.5059%" y="533" width="0.0791%" height="15" fill="rgb(247,143,39)" fg:x="57" fg:w="1"/><text x="4.7559%" y="543.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="4.5059%" y="517" width="0.0791%" height="15" fill="rgb(236,97,10)" fg:x="57" fg:w="1"/><text x="4.7559%" y="527.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="4.5850%" y="613" width="0.1581%" height="15" fill="rgb(233,208,19)" fg:x="58" fg:w="2"/><text x="4.8350%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="4.5850%" y="597" width="0.1581%" height="15" fill="rgb(216,164,2)" fg:x="58" fg:w="2"/><text x="4.8350%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="4.5850%" y="581" width="0.1581%" height="15" fill="rgb(220,129,5)" fg:x="58" fg:w="2"/><text x="4.8350%" y="591.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPluginFactory as kernel::plugins::PluginFactory&gt;::create_plugin (1 samples, 0.08%)</title><rect x="4.6640%" y="565" width="0.0791%" height="15" fill="rgb(242,17,10)" fg:x="59" fg:w="1"/><text x="4.9140%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.6640%" y="549" width="0.0791%" height="15" fill="rgb(242,107,0)" fg:x="59" fg:w="1"/><text x="4.9140%" y="559.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (35 samples, 2.77%)</title><rect x="2.0553%" y="661" width="2.7668%" height="15" fill="rgb(251,28,31)" fg:x="26" fg:w="35"/><text x="2.3053%" y="671.50">&lt;e..</text></g><g><title>engine::domain::Domain::open_session_with_middleware (35 samples, 2.77%)</title><rect x="2.0553%" y="645" width="2.7668%" height="15" fill="rgb(233,223,10)" fg:x="26" fg:w="35"/><text x="2.3053%" y="655.50">en..</text></g><g><title>engine::session::Session::new (35 samples, 2.77%)</title><rect x="2.0553%" y="629" width="2.7668%" height="15" fill="rgb(215,21,27)" fg:x="26" fg:w="35"/><text x="2.3053%" y="639.50">en..</text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="4.7431%" y="613" width="0.0791%" height="15" fill="rgb(232,23,21)" fg:x="60" fg:w="1"/><text x="4.9931%" y="623.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="4.7431%" y="597" width="0.0791%" height="15" fill="rgb(244,5,23)" fg:x="60" fg:w="1"/><text x="4.9931%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="4.8221%" y="597" width="0.1581%" height="15" fill="rgb(226,81,46)" fg:x="61" fg:w="2"/><text x="5.0721%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="4.8221%" y="645" width="0.2372%" height="15" fill="rgb(247,70,30)" fg:x="61" fg:w="3"/><text x="5.0721%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (3 samples, 0.24%)</title><rect x="4.8221%" y="629" width="0.2372%" height="15" fill="rgb(212,68,19)" fg:x="61" fg:w="3"/><text x="5.0721%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="4.8221%" y="613" width="0.2372%" height="15" fill="rgb(240,187,13)" fg:x="61" fg:w="3"/><text x="5.0721%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.9802%" y="597" width="0.0791%" height="15" fill="rgb(223,113,26)" fg:x="63" fg:w="1"/><text x="5.2302%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.9802%" y="581" width="0.0791%" height="15" fill="rgb(206,192,2)" fg:x="63" fg:w="1"/><text x="5.2302%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="5.0593%" y="597" width="0.0791%" height="15" fill="rgb(241,108,4)" fg:x="64" fg:w="1"/><text x="5.3093%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.1383%" y="565" width="0.0791%" height="15" fill="rgb(247,173,49)" fg:x="65" fg:w="1"/><text x="5.3883%" y="575.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="5.1383%" y="597" width="0.1581%" height="15" fill="rgb(224,114,35)" fg:x="65" fg:w="2"/><text x="5.3883%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="5.1383%" y="581" width="0.1581%" height="15" fill="rgb(245,159,27)" fg:x="65" fg:w="2"/><text x="5.3883%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="5.2174%" y="565" width="0.0791%" height="15" fill="rgb(245,172,44)" fg:x="66" fg:w="1"/><text x="5.4674%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.2174%" y="549" width="0.0791%" height="15" fill="rgb(236,23,11)" fg:x="66" fg:w="1"/><text x="5.4674%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.2964%" y="517" width="0.1581%" height="15" fill="rgb(205,117,38)" fg:x="67" fg:w="2"/><text x="5.5464%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.2964%" y="501" width="0.1581%" height="15" fill="rgb(237,72,25)" fg:x="67" fg:w="2"/><text x="5.5464%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3755%" y="485" width="0.0791%" height="15" fill="rgb(244,70,9)" fg:x="68" fg:w="1"/><text x="5.6255%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3755%" y="469" width="0.0791%" height="15" fill="rgb(217,125,39)" fg:x="68" fg:w="1"/><text x="5.6255%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.3755%" y="453" width="0.0791%" height="15" fill="rgb(235,36,10)" fg:x="68" fg:w="1"/><text x="5.6255%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (4 samples, 0.32%)</title><rect x="5.2964%" y="533" width="0.3162%" height="15" fill="rgb(251,123,47)" fg:x="67" fg:w="4"/><text x="5.5464%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.4545%" y="517" width="0.1581%" height="15" fill="rgb(221,13,13)" fg:x="69" fg:w="2"/><text x="5.7045%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.5336%" y="501" width="0.0791%" height="15" fill="rgb(238,131,9)" fg:x="70" fg:w="1"/><text x="5.7836%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.5336%" y="485" width="0.0791%" height="15" fill="rgb(211,50,8)" fg:x="70" fg:w="1"/><text x="5.7836%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.6126%" y="517" width="0.1581%" height="15" fill="rgb(245,182,24)" fg:x="71" fg:w="2"/><text x="5.8626%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.6126%" y="501" width="0.1581%" height="15" fill="rgb(242,14,37)" fg:x="71" fg:w="2"/><text x="5.8626%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.6917%" y="485" width="0.0791%" height="15" fill="rgb(246,228,12)" fg:x="72" fg:w="1"/><text x="5.9417%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.6917%" y="469" width="0.0791%" height="15" fill="rgb(213,55,15)" fg:x="72" fg:w="1"/><text x="5.9417%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="5.6917%" y="453" width="0.0791%" height="15" fill="rgb(209,9,3)" fg:x="72" fg:w="1"/><text x="5.9417%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.6917%" y="437" width="0.0791%" height="15" fill="rgb(230,59,30)" fg:x="72" fg:w="1"/><text x="5.9417%" y="447.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.6917%" y="421" width="0.0791%" height="15" fill="rgb(209,121,21)" fg:x="72" fg:w="1"/><text x="5.9417%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.7708%" y="453" width="0.0791%" height="15" fill="rgb(220,109,13)" fg:x="73" fg:w="1"/><text x="6.0208%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.7708%" y="437" width="0.0791%" height="15" fill="rgb(232,18,1)" fg:x="73" fg:w="1"/><text x="6.0208%" y="447.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="5.7708%" y="501" width="0.1581%" height="15" fill="rgb(215,41,42)" fg:x="73" fg:w="2"/><text x="6.0208%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7708%" y="485" width="0.1581%" height="15" fill="rgb(224,123,36)" fg:x="73" fg:w="2"/><text x="6.0208%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.7708%" y="469" width="0.1581%" height="15" fill="rgb(240,125,3)" fg:x="73" fg:w="2"/><text x="6.0208%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="5.8498%" y="453" width="0.0791%" height="15" fill="rgb(205,98,50)" fg:x="74" fg:w="1"/><text x="6.0998%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="5.8498%" y="437" width="0.0791%" height="15" fill="rgb(205,185,37)" fg:x="74" fg:w="1"/><text x="6.0998%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.8498%" y="421" width="0.0791%" height="15" fill="rgb(238,207,15)" fg:x="74" fg:w="1"/><text x="6.0998%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.8498%" y="405" width="0.0791%" height="15" fill="rgb(213,199,42)" fg:x="74" fg:w="1"/><text x="6.0998%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.8498%" y="389" width="0.0791%" height="15" fill="rgb(235,201,11)" fg:x="74" fg:w="1"/><text x="6.0998%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="5.9289%" y="485" width="0.1581%" height="15" fill="rgb(207,46,11)" fg:x="75" fg:w="2"/><text x="6.1789%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.0079%" y="469" width="0.0791%" height="15" fill="rgb(241,35,35)" fg:x="76" fg:w="1"/><text x="6.2579%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.0079%" y="453" width="0.0791%" height="15" fill="rgb(243,32,47)" fg:x="76" fg:w="1"/><text x="6.2579%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.0079%" y="437" width="0.0791%" height="15" fill="rgb(247,202,23)" fg:x="76" fg:w="1"/><text x="6.2579%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.0079%" y="421" width="0.0791%" height="15" fill="rgb(219,102,11)" fg:x="76" fg:w="1"/><text x="6.2579%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0079%" y="405" width="0.0791%" height="15" fill="rgb(243,110,44)" fg:x="76" fg:w="1"/><text x="6.2579%" y="415.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.0079%" y="389" width="0.0791%" height="15" fill="rgb(222,74,54)" fg:x="76" fg:w="1"/><text x="6.2579%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="6.1660%" y="469" width="0.1581%" height="15" fill="rgb(216,99,12)" fg:x="78" fg:w="2"/><text x="6.4160%" y="479.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="6.1660%" y="453" width="0.1581%" height="15" fill="rgb(226,22,26)" fg:x="78" fg:w="2"/><text x="6.4160%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="6.1660%" y="437" width="0.1581%" height="15" fill="rgb(217,163,10)" fg:x="78" fg:w="2"/><text x="6.4160%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="6.1660%" y="421" width="0.1581%" height="15" fill="rgb(213,25,53)" fg:x="78" fg:w="2"/><text x="6.4160%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.2451%" y="405" width="0.0791%" height="15" fill="rgb(252,105,26)" fg:x="79" fg:w="1"/><text x="6.4951%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.2451%" y="389" width="0.0791%" height="15" fill="rgb(220,39,43)" fg:x="79" fg:w="1"/><text x="6.4951%" y="399.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="6.2451%" y="373" width="0.0791%" height="15" fill="rgb(229,68,48)" fg:x="79" fg:w="1"/><text x="6.4951%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3241%" y="469" width="0.0791%" height="15" fill="rgb(252,8,32)" fg:x="80" fg:w="1"/><text x="6.5741%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.3241%" y="453" width="0.0791%" height="15" fill="rgb(223,20,43)" fg:x="80" fg:w="1"/><text x="6.5741%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="5.9289%" y="501" width="0.5534%" height="15" fill="rgb(229,81,49)" fg:x="75" fg:w="7"/><text x="6.1789%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="6.0870%" y="485" width="0.3953%" height="15" fill="rgb(236,28,36)" fg:x="77" fg:w="5"/><text x="6.3370%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4032%" y="469" width="0.0791%" height="15" fill="rgb(249,185,26)" fg:x="81" fg:w="1"/><text x="6.6532%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="5.7708%" y="517" width="0.7905%" height="15" fill="rgb(249,174,33)" fg:x="73" fg:w="10"/><text x="6.0208%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.4822%" y="501" width="0.0791%" height="15" fill="rgb(233,201,37)" fg:x="82" fg:w="1"/><text x="6.7322%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.4822%" y="485" width="0.0791%" height="15" fill="rgb(221,78,26)" fg:x="82" fg:w="1"/><text x="6.7322%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (13 samples, 1.03%)</title><rect x="5.6126%" y="533" width="1.0277%" height="15" fill="rgb(250,127,30)" fg:x="71" fg:w="13"/><text x="5.8626%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.5613%" y="517" width="0.0791%" height="15" fill="rgb(230,49,44)" fg:x="83" fg:w="1"/><text x="6.8113%" y="527.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (18 samples, 1.42%)</title><rect x="5.2964%" y="549" width="1.4229%" height="15" fill="rgb(229,67,23)" fg:x="67" fg:w="18"/><text x="5.5464%" y="559.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="6.6403%" y="533" width="0.0791%" height="15" fill="rgb(249,83,47)" fg:x="84" fg:w="1"/><text x="6.8903%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="6.6403%" y="517" width="0.0791%" height="15" fill="rgb(215,43,3)" fg:x="84" fg:w="1"/><text x="6.8903%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="6.6403%" y="501" width="0.0791%" height="15" fill="rgb(238,154,13)" fg:x="84" fg:w="1"/><text x="6.8903%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="6.6403%" y="485" width="0.0791%" height="15" fill="rgb(219,56,2)" fg:x="84" fg:w="1"/><text x="6.8903%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.6403%" y="469" width="0.0791%" height="15" fill="rgb(233,0,4)" fg:x="84" fg:w="1"/><text x="6.8903%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6403%" y="453" width="0.0791%" height="15" fill="rgb(235,30,7)" fg:x="84" fg:w="1"/><text x="6.8903%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.7194%" y="517" width="0.0791%" height="15" fill="rgb(250,79,13)" fg:x="85" fg:w="1"/><text x="6.9694%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="6.9565%" y="501" width="0.0791%" height="15" fill="rgb(211,146,34)" fg:x="88" fg:w="1"/><text x="7.2065%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="7.0356%" y="501" width="0.1581%" height="15" fill="rgb(228,22,38)" fg:x="89" fg:w="2"/><text x="7.2856%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.1146%" y="485" width="0.0791%" height="15" fill="rgb(235,168,5)" fg:x="90" fg:w="1"/><text x="7.3646%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="7.1937%" y="469" width="0.1581%" height="15" fill="rgb(221,155,16)" fg:x="91" fg:w="2"/><text x="7.4437%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="7.1937%" y="453" width="0.1581%" height="15" fill="rgb(215,215,53)" fg:x="91" fg:w="2"/><text x="7.4437%" y="463.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="7.1937%" y="437" width="0.1581%" height="15" fill="rgb(223,4,10)" fg:x="91" fg:w="2"/><text x="7.4437%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="6.7194%" y="549" width="0.7115%" height="15" fill="rgb(234,103,6)" fg:x="85" fg:w="9"/><text x="6.9694%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.71%)</title><rect x="6.7194%" y="533" width="0.7115%" height="15" fill="rgb(227,97,0)" fg:x="85" fg:w="9"/><text x="6.9694%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="6.7984%" y="517" width="0.6324%" height="15" fill="rgb(234,150,53)" fg:x="86" fg:w="8"/><text x="7.0484%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.1937%" y="501" width="0.2372%" height="15" fill="rgb(228,201,54)" fg:x="91" fg:w="3"/><text x="7.4437%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="7.1937%" y="485" width="0.2372%" height="15" fill="rgb(222,22,37)" fg:x="91" fg:w="3"/><text x="7.4437%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.3518%" y="469" width="0.0791%" height="15" fill="rgb(237,53,32)" fg:x="93" fg:w="1"/><text x="7.6018%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.3518%" y="453" width="0.0791%" height="15" fill="rgb(233,25,53)" fg:x="93" fg:w="1"/><text x="7.6018%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6680%" y="501" width="0.0791%" height="15" fill="rgb(210,40,34)" fg:x="97" fg:w="1"/><text x="7.9180%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="7.7470%" y="501" width="0.0791%" height="15" fill="rgb(241,220,44)" fg:x="98" fg:w="1"/><text x="7.9970%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="7.7470%" y="485" width="0.0791%" height="15" fill="rgb(235,28,35)" fg:x="98" fg:w="1"/><text x="7.9970%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.7470%" y="469" width="0.0791%" height="15" fill="rgb(210,56,17)" fg:x="98" fg:w="1"/><text x="7.9970%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.9051%" y="421" width="0.0791%" height="15" fill="rgb(224,130,29)" fg:x="100" fg:w="1"/><text x="8.1551%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9051%" y="453" width="0.1581%" height="15" fill="rgb(235,212,8)" fg:x="100" fg:w="2"/><text x="8.1551%" y="463.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="7.9051%" y="437" width="0.1581%" height="15" fill="rgb(223,33,50)" fg:x="100" fg:w="2"/><text x="8.1551%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="7.9842%" y="421" width="0.0791%" height="15" fill="rgb(219,149,13)" fg:x="101" fg:w="1"/><text x="8.2342%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="8.0632%" y="453" width="0.0791%" height="15" fill="rgb(250,156,29)" fg:x="102" fg:w="1"/><text x="8.3132%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0632%" y="437" width="0.0791%" height="15" fill="rgb(216,193,19)" fg:x="102" fg:w="1"/><text x="8.3132%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0632%" y="421" width="0.0791%" height="15" fill="rgb(216,135,14)" fg:x="102" fg:w="1"/><text x="8.3132%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0632%" y="405" width="0.0791%" height="15" fill="rgb(241,47,5)" fg:x="102" fg:w="1"/><text x="8.3132%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0632%" y="389" width="0.0791%" height="15" fill="rgb(233,42,35)" fg:x="102" fg:w="1"/><text x="8.3132%" y="399.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="8.0632%" y="373" width="0.0791%" height="15" fill="rgb(231,13,6)" fg:x="102" fg:w="1"/><text x="8.3132%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.0632%" y="357" width="0.0791%" height="15" fill="rgb(207,181,40)" fg:x="102" fg:w="1"/><text x="8.3132%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="8.0632%" y="341" width="0.0791%" height="15" fill="rgb(254,173,49)" fg:x="102" fg:w="1"/><text x="8.3132%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.1423%" y="421" width="0.1581%" height="15" fill="rgb(221,1,38)" fg:x="103" fg:w="2"/><text x="8.3923%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="8.1423%" y="405" width="0.1581%" height="15" fill="rgb(206,124,46)" fg:x="103" fg:w="2"/><text x="8.3923%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="8.2213%" y="389" width="0.0791%" height="15" fill="rgb(249,21,11)" fg:x="104" fg:w="1"/><text x="8.4713%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="8.3004%" y="405" width="0.0791%" height="15" fill="rgb(222,201,40)" fg:x="105" fg:w="1"/><text x="8.5504%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.47%)</title><rect x="8.1423%" y="437" width="0.4743%" height="15" fill="rgb(235,61,29)" fg:x="103" fg:w="6"/><text x="8.3923%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="8.3004%" y="421" width="0.3162%" height="15" fill="rgb(219,207,3)" fg:x="105" fg:w="4"/><text x="8.5504%" y="431.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="8.3794%" y="405" width="0.2372%" height="15" fill="rgb(222,56,46)" fg:x="106" fg:w="3"/><text x="8.6294%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 0.79%)</title><rect x="7.9051%" y="469" width="0.7905%" height="15" fill="rgb(239,76,54)" fg:x="100" fg:w="10"/><text x="8.1551%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="8.1423%" y="453" width="0.5534%" height="15" fill="rgb(231,124,27)" fg:x="103" fg:w="7"/><text x="8.3923%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6166%" y="437" width="0.0791%" height="15" fill="rgb(249,195,6)" fg:x="109" fg:w="1"/><text x="8.8666%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.87%)</title><rect x="7.9051%" y="485" width="0.8696%" height="15" fill="rgb(237,174,47)" fg:x="100" fg:w="11"/><text x="8.1551%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="8.6957%" y="469" width="0.0791%" height="15" fill="rgb(206,201,31)" fg:x="110" fg:w="1"/><text x="8.9457%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.6957%" y="453" width="0.0791%" height="15" fill="rgb(231,57,52)" fg:x="110" fg:w="1"/><text x="8.9457%" y="463.50"></text></g><g><title>engine::session::Session::flush (48 samples, 3.79%)</title><rect x="5.0593%" y="645" width="3.7945%" height="15" fill="rgb(248,177,22)" fg:x="64" fg:w="48"/><text x="5.3093%" y="655.50">engi..</text></g><g><title>engine::session::state::State::close (48 samples, 3.79%)</title><rect x="5.0593%" y="629" width="3.7945%" height="15" fill="rgb(215,211,37)" fg:x="64" fg:w="48"/><text x="5.3093%" y="639.50">engi..</text></g><g><title>engine::session::state::State::flush_entities (48 samples, 3.79%)</title><rect x="5.0593%" y="613" width="3.7945%" height="15" fill="rgb(241,128,51)" fg:x="64" fg:w="48"/><text x="5.3093%" y="623.50">engi..</text></g><g><title>core::iter::adapters::try_process (45 samples, 3.56%)</title><rect x="5.2964%" y="597" width="3.5573%" height="15" fill="rgb(227,165,31)" fg:x="67" fg:w="45"/><text x="5.5464%" y="607.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 3.56%)</title><rect x="5.2964%" y="581" width="3.5573%" height="15" fill="rgb(228,167,24)" fg:x="67" fg:w="45"/><text x="5.5464%" y="591.50">&lt;all..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (45 samples, 3.56%)</title><rect x="5.2964%" y="565" width="3.5573%" height="15" fill="rgb(228,143,12)" fg:x="67" fg:w="45"/><text x="5.5464%" y="575.50">engi..</text></g><g><title>kernel::model::any_entity_changes (18 samples, 1.42%)</title><rect x="7.4308%" y="549" width="1.4229%" height="15" fill="rgb(249,149,8)" fg:x="94" fg:w="18"/><text x="7.6808%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (18 samples, 1.42%)</title><rect x="7.4308%" y="533" width="1.4229%" height="15" fill="rgb(243,35,44)" fg:x="94" fg:w="18"/><text x="7.6808%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (18 samples, 1.42%)</title><rect x="7.4308%" y="517" width="1.4229%" height="15" fill="rgb(246,89,9)" fg:x="94" fg:w="18"/><text x="7.6808%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.03%)</title><rect x="7.8261%" y="501" width="1.0277%" height="15" fill="rgb(233,213,13)" fg:x="99" fg:w="13"/><text x="8.0761%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.7747%" y="485" width="0.0791%" height="15" fill="rgb(233,141,41)" fg:x="111" fg:w="1"/><text x="9.0247%" y="495.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="8.8538%" y="645" width="0.0791%" height="15" fill="rgb(239,167,4)" fg:x="112" fg:w="1"/><text x="9.1038%" y="655.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.8538%" y="629" width="0.0791%" height="15" fill="rgb(209,217,16)" fg:x="112" fg:w="1"/><text x="9.1038%" y="639.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="8.8538%" y="613" width="0.0791%" height="15" fill="rgb(219,88,35)" fg:x="112" fg:w="1"/><text x="9.1038%" y="623.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;&amp;str&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="8.8538%" y="597" width="0.0791%" height="15" fill="rgb(220,193,23)" fg:x="112" fg:w="1"/><text x="9.1038%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.9328%" y="613" width="0.0791%" height="15" fill="rgb(230,90,52)" fg:x="113" fg:w="1"/><text x="9.1828%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.9328%" y="597" width="0.0791%" height="15" fill="rgb(252,106,19)" fg:x="113" fg:w="1"/><text x="9.1828%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="8.9328%" y="581" width="0.0791%" height="15" fill="rgb(206,74,20)" fg:x="113" fg:w="1"/><text x="9.1828%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="8.9328%" y="565" width="0.0791%" height="15" fill="rgb(230,138,44)" fg:x="113" fg:w="1"/><text x="9.1828%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9328%" y="549" width="0.0791%" height="15" fill="rgb(235,182,43)" fg:x="113" fg:w="1"/><text x="9.1828%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.9328%" y="533" width="0.0791%" height="15" fill="rgb(242,16,51)" fg:x="113" fg:w="1"/><text x="9.1828%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.9328%" y="517" width="0.0791%" height="15" fill="rgb(248,9,4)" fg:x="113" fg:w="1"/><text x="9.1828%" y="527.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="8.9328%" y="501" width="0.0791%" height="15" fill="rgb(210,31,22)" fg:x="113" fg:w="1"/><text x="9.1828%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.9328%" y="485" width="0.0791%" height="15" fill="rgb(239,54,39)" fg:x="113" fg:w="1"/><text x="9.1828%" y="495.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.0119%" y="597" width="0.1581%" height="15" fill="rgb(230,99,41)" fg:x="114" fg:w="2"/><text x="9.2619%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="9.0119%" y="581" width="0.1581%" height="15" fill="rgb(253,106,12)" fg:x="114" fg:w="2"/><text x="9.2619%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0909%" y="565" width="0.0791%" height="15" fill="rgb(213,46,41)" fg:x="115" fg:w="1"/><text x="9.3409%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.0909%" y="549" width="0.0791%" height="15" fill="rgb(215,133,35)" fg:x="115" fg:w="1"/><text x="9.3409%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="9.0909%" y="533" width="0.0791%" height="15" fill="rgb(213,28,5)" fg:x="115" fg:w="1"/><text x="9.3409%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="9.0909%" y="517" width="0.0791%" height="15" fill="rgb(215,77,49)" fg:x="115" fg:w="1"/><text x="9.3409%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="9.0909%" y="501" width="0.0791%" height="15" fill="rgb(248,100,22)" fg:x="115" fg:w="1"/><text x="9.3409%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="9.0909%" y="485" width="0.0791%" height="15" fill="rgb(208,67,9)" fg:x="115" fg:w="1"/><text x="9.3409%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="9.0909%" y="469" width="0.0791%" height="15" fill="rgb(219,133,21)" fg:x="115" fg:w="1"/><text x="9.3409%" y="479.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (3 samples, 0.24%)</title><rect x="9.0119%" y="613" width="0.2372%" height="15" fill="rgb(246,46,29)" fg:x="114" fg:w="3"/><text x="9.2619%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="9.1700%" y="597" width="0.0791%" height="15" fill="rgb(246,185,52)" fg:x="116" fg:w="1"/><text x="9.4200%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="9.1700%" y="581" width="0.0791%" height="15" fill="rgb(252,136,11)" fg:x="116" fg:w="1"/><text x="9.4200%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1700%" y="565" width="0.0791%" height="15" fill="rgb(219,138,53)" fg:x="116" fg:w="1"/><text x="9.4200%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.1700%" y="549" width="0.0791%" height="15" fill="rgb(211,51,23)" fg:x="116" fg:w="1"/><text x="9.4200%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.1700%" y="533" width="0.0791%" height="15" fill="rgb(247,221,28)" fg:x="116" fg:w="1"/><text x="9.4200%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.1700%" y="517" width="0.0791%" height="15" fill="rgb(251,222,45)" fg:x="116" fg:w="1"/><text x="9.4200%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="9.2490%" y="549" width="0.0791%" height="15" fill="rgb(217,162,53)" fg:x="117" fg:w="1"/><text x="9.4990%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="9.2490%" y="533" width="0.0791%" height="15" fill="rgb(229,93,14)" fg:x="117" fg:w="1"/><text x="9.4990%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="9.2490%" y="517" width="0.0791%" height="15" fill="rgb(209,67,49)" fg:x="117" fg:w="1"/><text x="9.4990%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="9.2490%" y="501" width="0.0791%" height="15" fill="rgb(213,87,29)" fg:x="117" fg:w="1"/><text x="9.4990%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3281%" y="501" width="0.0791%" height="15" fill="rgb(205,151,52)" fg:x="118" fg:w="1"/><text x="9.5781%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.3281%" y="485" width="0.0791%" height="15" fill="rgb(253,215,39)" fg:x="118" fg:w="1"/><text x="9.5781%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="9.4071%" y="485" width="0.0791%" height="15" fill="rgb(221,220,41)" fg:x="119" fg:w="1"/><text x="9.6571%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4071%" y="469" width="0.0791%" height="15" fill="rgb(218,133,21)" fg:x="119" fg:w="1"/><text x="9.6571%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.4071%" y="453" width="0.0791%" height="15" fill="rgb(221,193,43)" fg:x="119" fg:w="1"/><text x="9.6571%" y="463.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (4 samples, 0.32%)</title><rect x="9.2490%" y="597" width="0.3162%" height="15" fill="rgb(240,128,52)" fg:x="117" fg:w="4"/><text x="9.4990%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (4 samples, 0.32%)</title><rect x="9.2490%" y="581" width="0.3162%" height="15" fill="rgb(253,114,12)" fg:x="117" fg:w="4"/><text x="9.4990%" y="591.50"></text></g><g><title>kernel::model::props::save_props (4 samples, 0.32%)</title><rect x="9.2490%" y="565" width="0.3162%" height="15" fill="rgb(215,223,47)" fg:x="117" fg:w="4"/><text x="9.4990%" y="575.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="9.3281%" y="549" width="0.2372%" height="15" fill="rgb(248,225,23)" fg:x="118" fg:w="3"/><text x="9.5781%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="9.3281%" y="533" width="0.2372%" height="15" fill="rgb(250,108,0)" fg:x="118" fg:w="3"/><text x="9.5781%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="9.3281%" y="517" width="0.2372%" height="15" fill="rgb(228,208,7)" fg:x="118" fg:w="3"/><text x="9.5781%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (2 samples, 0.16%)</title><rect x="9.4071%" y="501" width="0.1581%" height="15" fill="rgb(244,45,10)" fg:x="119" fg:w="2"/><text x="9.6571%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.4862%" y="485" width="0.0791%" height="15" fill="rgb(207,125,25)" fg:x="120" fg:w="1"/><text x="9.7362%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (2 samples, 0.16%)</title><rect x="9.5652%" y="597" width="0.1581%" height="15" fill="rgb(210,195,18)" fg:x="121" fg:w="2"/><text x="9.8152%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="9.5652%" y="581" width="0.1581%" height="15" fill="rgb(249,80,12)" fg:x="121" fg:w="2"/><text x="9.8152%" y="591.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="9.6443%" y="565" width="0.0791%" height="15" fill="rgb(221,65,9)" fg:x="122" fg:w="1"/><text x="9.8943%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="9.6443%" y="549" width="0.0791%" height="15" fill="rgb(235,49,36)" fg:x="122" fg:w="1"/><text x="9.8943%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7233%" y="565" width="0.0791%" height="15" fill="rgb(225,32,20)" fg:x="123" fg:w="1"/><text x="9.9733%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.7233%" y="549" width="0.0791%" height="15" fill="rgb(215,141,46)" fg:x="123" fg:w="1"/><text x="9.9733%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7233%" y="533" width="0.0791%" height="15" fill="rgb(250,160,47)" fg:x="123" fg:w="1"/><text x="9.9733%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.7233%" y="517" width="0.0791%" height="15" fill="rgb(216,222,40)" fg:x="123" fg:w="1"/><text x="9.9733%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.7233%" y="501" width="0.0791%" height="15" fill="rgb(234,217,39)" fg:x="123" fg:w="1"/><text x="9.9733%" y="511.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (12 samples, 0.95%)</title><rect x="8.9328%" y="629" width="0.9486%" height="15" fill="rgb(207,178,40)" fg:x="113" fg:w="12"/><text x="9.1828%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (8 samples, 0.63%)</title><rect x="9.2490%" y="613" width="0.6324%" height="15" fill="rgb(221,136,13)" fg:x="117" fg:w="8"/><text x="9.4990%" y="623.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="9.7233%" y="597" width="0.1581%" height="15" fill="rgb(249,199,10)" fg:x="123" fg:w="2"/><text x="9.9733%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="9.7233%" y="581" width="0.1581%" height="15" fill="rgb(249,222,13)" fg:x="123" fg:w="2"/><text x="9.9733%" y="591.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="9.8024%" y="565" width="0.0791%" height="15" fill="rgb(244,185,38)" fg:x="124" fg:w="1"/><text x="10.0524%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="9.8024%" y="549" width="0.0791%" height="15" fill="rgb(236,202,9)" fg:x="124" fg:w="1"/><text x="10.0524%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8024%" y="533" width="0.0791%" height="15" fill="rgb(250,229,37)" fg:x="124" fg:w="1"/><text x="10.0524%" y="543.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="9.8024%" y="517" width="0.0791%" height="15" fill="rgb(206,174,23)" fg:x="124" fg:w="1"/><text x="10.0524%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="9.8024%" y="501" width="0.0791%" height="15" fill="rgb(211,33,43)" fg:x="124" fg:w="1"/><text x="10.0524%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.03%)</title><rect x="8.9328%" y="645" width="1.0277%" height="15" fill="rgb(245,58,50)" fg:x="113" fg:w="13"/><text x="9.1828%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="9.8814%" y="629" width="0.0791%" height="15" fill="rgb(244,68,36)" fg:x="125" fg:w="1"/><text x="10.1314%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8814%" y="613" width="0.0791%" height="15" fill="rgb(232,229,15)" fg:x="125" fg:w="1"/><text x="10.1314%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8814%" y="597" width="0.0791%" height="15" fill="rgb(254,30,23)" fg:x="125" fg:w="1"/><text x="10.1314%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="9.8814%" y="581" width="0.0791%" height="15" fill="rgb(235,160,14)" fg:x="125" fg:w="1"/><text x="10.1314%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="9.9605%" y="613" width="0.1581%" height="15" fill="rgb(212,155,44)" fg:x="126" fg:w="2"/><text x="10.2105%" y="623.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (2 samples, 0.16%)</title><rect x="9.9605%" y="597" width="0.1581%" height="15" fill="rgb(226,2,50)" fg:x="126" fg:w="2"/><text x="10.2105%" y="607.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (2 samples, 0.16%)</title><rect x="9.9605%" y="581" width="0.1581%" height="15" fill="rgb(234,177,6)" fg:x="126" fg:w="2"/><text x="10.2105%" y="591.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::Identity&gt;&gt;::following (2 samples, 0.16%)</title><rect x="9.9605%" y="565" width="0.1581%" height="15" fill="rgb(217,24,9)" fg:x="126" fg:w="2"/><text x="10.2105%" y="575.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="9.9605%" y="549" width="0.1581%" height="15" fill="rgb(220,13,46)" fg:x="126" fg:w="2"/><text x="10.2105%" y="559.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.16%)</title><rect x="9.9605%" y="533" width="0.1581%" height="15" fill="rgb(239,221,27)" fg:x="126" fg:w="2"/><text x="10.2105%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.16%)</title><rect x="9.9605%" y="517" width="0.1581%" height="15" fill="rgb(222,198,25)" fg:x="126" fg:w="2"/><text x="10.2105%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.0395%" y="501" width="0.0791%" height="15" fill="rgb(211,99,13)" fg:x="127" fg:w="1"/><text x="10.2895%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.1186%" y="581" width="0.0791%" height="15" fill="rgb(232,111,31)" fg:x="128" fg:w="1"/><text x="10.3686%" y="591.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (4 samples, 0.32%)</title><rect x="9.9605%" y="645" width="0.3162%" height="15" fill="rgb(245,82,37)" fg:x="126" fg:w="4"/><text x="10.2105%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (4 samples, 0.32%)</title><rect x="9.9605%" y="629" width="0.3162%" height="15" fill="rgb(227,149,46)" fg:x="126" fg:w="4"/><text x="10.2105%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.1186%" y="613" width="0.1581%" height="15" fill="rgb(218,36,50)" fg:x="128" fg:w="2"/><text x="10.3686%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Carryable&gt;::serialize (2 samples, 0.16%)</title><rect x="10.1186%" y="597" width="0.1581%" height="15" fill="rgb(226,80,48)" fg:x="128" fg:w="2"/><text x="10.3686%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="10.1976%" y="581" width="0.0791%" height="15" fill="rgb(238,224,15)" fg:x="129" fg:w="1"/><text x="10.4476%" y="591.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="10.2767%" y="613" width="0.0791%" height="15" fill="rgb(241,136,10)" fg:x="130" fg:w="1"/><text x="10.5267%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="10.2767%" y="597" width="0.0791%" height="15" fill="rgb(208,32,45)" fg:x="130" fg:w="1"/><text x="10.5267%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="10.2767%" y="581" width="0.0791%" height="15" fill="rgb(207,135,9)" fg:x="130" fg:w="1"/><text x="10.5267%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.3557%" y="565" width="0.0791%" height="15" fill="rgb(206,86,44)" fg:x="131" fg:w="1"/><text x="10.6057%" y="575.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="10.3557%" y="613" width="0.1581%" height="15" fill="rgb(245,177,15)" fg:x="131" fg:w="2"/><text x="10.6057%" y="623.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Containing&gt;::serialize (2 samples, 0.16%)</title><rect x="10.3557%" y="597" width="0.1581%" height="15" fill="rgb(206,64,50)" fg:x="131" fg:w="2"/><text x="10.6057%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="10.3557%" y="581" width="0.1581%" height="15" fill="rgb(234,36,40)" fg:x="131" fg:w="2"/><text x="10.6057%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="10.4348%" y="565" width="0.0791%" height="15" fill="rgb(213,64,8)" fg:x="132" fg:w="1"/><text x="10.6848%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.4348%" y="549" width="0.0791%" height="15" fill="rgb(210,75,36)" fg:x="132" fg:w="1"/><text x="10.6848%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.4348%" y="533" width="0.0791%" height="15" fill="rgb(229,88,21)" fg:x="132" fg:w="1"/><text x="10.6848%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4348%" y="517" width="0.0791%" height="15" fill="rgb(252,204,47)" fg:x="132" fg:w="1"/><text x="10.6848%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="10.4348%" y="501" width="0.0791%" height="15" fill="rgb(208,77,27)" fg:x="132" fg:w="1"/><text x="10.6848%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.4348%" y="485" width="0.0791%" height="15" fill="rgb(221,76,26)" fg:x="132" fg:w="1"/><text x="10.6848%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="10.5929%" y="597" width="0.0791%" height="15" fill="rgb(225,139,18)" fg:x="134" fg:w="1"/><text x="10.8429%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="10.5929%" y="581" width="0.0791%" height="15" fill="rgb(230,137,11)" fg:x="134" fg:w="1"/><text x="10.8429%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.5929%" y="565" width="0.0791%" height="15" fill="rgb(212,28,1)" fg:x="134" fg:w="1"/><text x="10.8429%" y="575.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="10.5138%" y="613" width="0.2372%" height="15" fill="rgb(248,164,17)" fg:x="133" fg:w="3"/><text x="10.7638%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="10.6719%" y="597" width="0.0791%" height="15" fill="rgb(222,171,42)" fg:x="135" fg:w="1"/><text x="10.9219%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="10.6719%" y="581" width="0.0791%" height="15" fill="rgb(243,84,45)" fg:x="135" fg:w="1"/><text x="10.9219%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="10.6719%" y="565" width="0.0791%" height="15" fill="rgb(252,49,23)" fg:x="135" fg:w="1"/><text x="10.9219%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="10.6719%" y="549" width="0.0791%" height="15" fill="rgb(215,19,7)" fg:x="135" fg:w="1"/><text x="10.9219%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="10.6719%" y="533" width="0.0791%" height="15" fill="rgb(238,81,41)" fg:x="135" fg:w="1"/><text x="10.9219%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6719%" y="517" width="0.0791%" height="15" fill="rgb(210,199,37)" fg:x="135" fg:w="1"/><text x="10.9219%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6719%" y="501" width="0.0791%" height="15" fill="rgb(244,192,49)" fg:x="135" fg:w="1"/><text x="10.9219%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="10.6719%" y="485" width="0.0791%" height="15" fill="rgb(226,211,11)" fg:x="135" fg:w="1"/><text x="10.9219%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6719%" y="469" width="0.0791%" height="15" fill="rgb(236,162,54)" fg:x="135" fg:w="1"/><text x="10.9219%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="10.6719%" y="453" width="0.0791%" height="15" fill="rgb(220,229,9)" fg:x="135" fg:w="1"/><text x="10.9219%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="10.6719%" y="437" width="0.0791%" height="15" fill="rgb(250,87,22)" fg:x="135" fg:w="1"/><text x="10.9219%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="10.6719%" y="421" width="0.0791%" height="15" fill="rgb(239,43,17)" fg:x="135" fg:w="1"/><text x="10.9219%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="10.6719%" y="405" width="0.0791%" height="15" fill="rgb(231,177,25)" fg:x="135" fg:w="1"/><text x="10.9219%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6719%" y="389" width="0.0791%" height="15" fill="rgb(219,179,1)" fg:x="135" fg:w="1"/><text x="10.9219%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="10.6719%" y="373" width="0.0791%" height="15" fill="rgb(238,219,53)" fg:x="135" fg:w="1"/><text x="10.9219%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="10.6719%" y="357" width="0.0791%" height="15" fill="rgb(232,167,36)" fg:x="135" fg:w="1"/><text x="10.9219%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="10.6719%" y="341" width="0.0791%" height="15" fill="rgb(244,19,51)" fg:x="135" fg:w="1"/><text x="10.9219%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="10.6719%" y="325" width="0.0791%" height="15" fill="rgb(224,6,22)" fg:x="135" fg:w="1"/><text x="10.9219%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="10.6719%" y="309" width="0.0791%" height="15" fill="rgb(224,145,5)" fg:x="135" fg:w="1"/><text x="10.9219%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.6719%" y="293" width="0.0791%" height="15" fill="rgb(234,130,49)" fg:x="135" fg:w="1"/><text x="10.9219%" y="303.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (7 samples, 0.55%)</title><rect x="10.2767%" y="645" width="0.5534%" height="15" fill="rgb(254,6,2)" fg:x="130" fg:w="7"/><text x="10.5267%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (7 samples, 0.55%)</title><rect x="10.2767%" y="629" width="0.5534%" height="15" fill="rgb(208,96,46)" fg:x="130" fg:w="7"/><text x="10.5267%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="10.7510%" y="613" width="0.0791%" height="15" fill="rgb(239,3,39)" fg:x="136" fg:w="1"/><text x="11.0010%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="10.7510%" y="597" width="0.0791%" height="15" fill="rgb(233,210,1)" fg:x="136" fg:w="1"/><text x="11.0010%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7510%" y="581" width="0.0791%" height="15" fill="rgb(244,137,37)" fg:x="136" fg:w="1"/><text x="11.0010%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.7510%" y="565" width="0.0791%" height="15" fill="rgb(240,136,2)" fg:x="136" fg:w="1"/><text x="11.0010%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="10.7510%" y="549" width="0.0791%" height="15" fill="rgb(239,18,37)" fg:x="136" fg:w="1"/><text x="11.0010%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="10.7510%" y="533" width="0.0791%" height="15" fill="rgb(218,185,22)" fg:x="136" fg:w="1"/><text x="11.0010%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.8300%" y="581" width="0.0791%" height="15" fill="rgb(225,218,4)" fg:x="137" fg:w="1"/><text x="11.0800%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="10.8300%" y="629" width="0.1581%" height="15" fill="rgb(230,182,32)" fg:x="137" fg:w="2"/><text x="11.0800%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="10.8300%" y="613" width="0.1581%" height="15" fill="rgb(242,56,43)" fg:x="137" fg:w="2"/><text x="11.0800%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="10.8300%" y="597" width="0.1581%" height="15" fill="rgb(233,99,24)" fg:x="137" fg:w="2"/><text x="11.0800%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.9091%" y="581" width="0.0791%" height="15" fill="rgb(234,209,42)" fg:x="138" fg:w="1"/><text x="11.1591%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.9091%" y="565" width="0.0791%" height="15" fill="rgb(227,7,12)" fg:x="138" fg:w="1"/><text x="11.1591%" y="575.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::add_username_to_key (2 samples, 0.16%)</title><rect x="10.9881%" y="629" width="0.1581%" height="15" fill="rgb(245,203,43)" fg:x="139" fg:w="2"/><text x="11.2381%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="10.9881%" y="613" width="0.1581%" height="15" fill="rgb(238,205,33)" fg:x="139" fg:w="2"/><text x="11.2381%" y="623.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (2 samples, 0.16%)</title><rect x="10.9881%" y="597" width="0.1581%" height="15" fill="rgb(231,56,7)" fg:x="139" fg:w="2"/><text x="11.2381%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="11.1462%" y="629" width="0.0791%" height="15" fill="rgb(244,186,29)" fg:x="141" fg:w="1"/><text x="11.3962%" y="639.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.1462%" y="613" width="0.0791%" height="15" fill="rgb(234,111,31)" fg:x="141" fg:w="1"/><text x="11.3962%" y="623.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.1462%" y="597" width="0.0791%" height="15" fill="rgb(241,149,10)" fg:x="141" fg:w="1"/><text x="11.3962%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.1462%" y="581" width="0.0791%" height="15" fill="rgb(249,206,44)" fg:x="141" fg:w="1"/><text x="11.3962%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="11.1462%" y="565" width="0.0791%" height="15" fill="rgb(251,153,30)" fg:x="141" fg:w="1"/><text x="11.3962%" y="575.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.2253%" y="629" width="0.1581%" height="15" fill="rgb(239,152,38)" fg:x="142" fg:w="2"/><text x="11.4753%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="11.3834%" y="549" width="0.0791%" height="15" fill="rgb(249,139,47)" fg:x="144" fg:w="1"/><text x="11.6334%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="11.3834%" y="533" width="0.0791%" height="15" fill="rgb(244,64,35)" fg:x="144" fg:w="1"/><text x="11.6334%" y="543.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="11.3834%" y="629" width="0.1581%" height="15" fill="rgb(216,46,15)" fg:x="144" fg:w="2"/><text x="11.6334%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="11.3834%" y="613" width="0.1581%" height="15" fill="rgb(250,74,19)" fg:x="144" fg:w="2"/><text x="11.6334%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="11.3834%" y="597" width="0.1581%" height="15" fill="rgb(249,42,33)" fg:x="144" fg:w="2"/><text x="11.6334%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="11.3834%" y="581" width="0.1581%" height="15" fill="rgb(242,149,17)" fg:x="144" fg:w="2"/><text x="11.6334%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="11.3834%" y="565" width="0.1581%" height="15" fill="rgb(244,29,21)" fg:x="144" fg:w="2"/><text x="11.6334%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="11.4625%" y="549" width="0.0791%" height="15" fill="rgb(220,130,37)" fg:x="145" fg:w="1"/><text x="11.7125%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="11.4625%" y="533" width="0.0791%" height="15" fill="rgb(211,67,2)" fg:x="145" fg:w="1"/><text x="11.7125%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="11.4625%" y="517" width="0.0791%" height="15" fill="rgb(235,68,52)" fg:x="145" fg:w="1"/><text x="11.7125%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4625%" y="501" width="0.0791%" height="15" fill="rgb(246,142,3)" fg:x="145" fg:w="1"/><text x="11.7125%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4625%" y="485" width="0.0791%" height="15" fill="rgb(241,25,7)" fg:x="145" fg:w="1"/><text x="11.7125%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="11.4625%" y="469" width="0.0791%" height="15" fill="rgb(242,119,39)" fg:x="145" fg:w="1"/><text x="11.7125%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4625%" y="453" width="0.0791%" height="15" fill="rgb(241,98,45)" fg:x="145" fg:w="1"/><text x="11.7125%" y="463.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="11.5415%" y="613" width="0.0791%" height="15" fill="rgb(254,28,30)" fg:x="146" fg:w="1"/><text x="11.7915%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.5415%" y="597" width="0.0791%" height="15" fill="rgb(241,142,54)" fg:x="146" fg:w="1"/><text x="11.7915%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="11.5415%" y="581" width="0.0791%" height="15" fill="rgb(222,85,15)" fg:x="146" fg:w="1"/><text x="11.7915%" y="591.50"></text></g><g><title>engine::session::should_force_rollback (1 samples, 0.08%)</title><rect x="11.6206%" y="597" width="0.0791%" height="15" fill="rgb(210,85,47)" fg:x="147" fg:w="1"/><text x="11.8706%" y="607.50"></text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="11.6206%" y="581" width="0.0791%" height="15" fill="rgb(224,206,25)" fg:x="147" fg:w="1"/><text x="11.8706%" y="591.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="11.6206%" y="565" width="0.0791%" height="15" fill="rgb(243,201,19)" fg:x="147" fg:w="1"/><text x="11.8706%" y="575.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="11.6206%" y="549" width="0.0791%" height="15" fill="rgb(236,59,4)" fg:x="147" fg:w="1"/><text x="11.8706%" y="559.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="11.6206%" y="533" width="0.0791%" height="15" fill="rgb(254,179,45)" fg:x="147" fg:w="1"/><text x="11.8706%" y="543.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="11.6206%" y="517" width="0.0791%" height="15" fill="rgb(226,14,10)" fg:x="147" fg:w="1"/><text x="11.8706%" y="527.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (1 samples, 0.08%)</title><rect x="11.6206%" y="501" width="0.0791%" height="15" fill="rgb(244,27,41)" fg:x="147" fg:w="1"/><text x="11.8706%" y="511.50"></text></g><g><title>getenv (1 samples, 0.08%)</title><rect x="11.6206%" y="485" width="0.0791%" height="15" fill="rgb(235,35,32)" fg:x="147" fg:w="1"/><text x="11.8706%" y="495.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::save (2 samples, 0.16%)</title><rect x="11.6996%" y="533" width="0.1581%" height="15" fill="rgb(218,68,31)" fg:x="148" fg:w="2"/><text x="11.9496%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.6996%" y="517" width="0.1581%" height="15" fill="rgb(207,120,37)" fg:x="148" fg:w="2"/><text x="11.9496%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="11.6996%" y="501" width="0.1581%" height="15" fill="rgb(227,98,0)" fg:x="148" fg:w="2"/><text x="11.9496%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="11.6996%" y="485" width="0.1581%" height="15" fill="rgb(207,7,3)" fg:x="148" fg:w="2"/><text x="11.9496%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="11.6996%" y="469" width="0.1581%" height="15" fill="rgb(206,98,19)" fg:x="148" fg:w="2"/><text x="11.9496%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="11.6996%" y="453" width="0.1581%" height="15" fill="rgb(217,5,26)" fg:x="148" fg:w="2"/><text x="11.9496%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.6996%" y="437" width="0.1581%" height="15" fill="rgb(235,190,38)" fg:x="148" fg:w="2"/><text x="11.9496%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="11.6996%" y="421" width="0.1581%" height="15" fill="rgb(247,86,24)" fg:x="148" fg:w="2"/><text x="11.9496%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="11.6996%" y="405" width="0.1581%" height="15" fill="rgb(205,101,16)" fg:x="148" fg:w="2"/><text x="11.9496%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="11.6996%" y="389" width="0.1581%" height="15" fill="rgb(246,168,33)" fg:x="148" fg:w="2"/><text x="11.9496%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="11.6996%" y="373" width="0.1581%" height="15" fill="rgb(231,114,1)" fg:x="148" fg:w="2"/><text x="11.9496%" y="383.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="11.6996%" y="357" width="0.1581%" height="15" fill="rgb(207,184,53)" fg:x="148" fg:w="2"/><text x="11.9496%" y="367.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.6996%" y="341" width="0.1581%" height="15" fill="rgb(224,95,51)" fg:x="148" fg:w="2"/><text x="11.9496%" y="351.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (4 samples, 0.32%)</title><rect x="11.6996%" y="565" width="0.3162%" height="15" fill="rgb(212,188,45)" fg:x="148" fg:w="4"/><text x="11.9496%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (4 samples, 0.32%)</title><rect x="11.6996%" y="549" width="0.3162%" height="15" fill="rgb(223,154,38)" fg:x="148" fg:w="4"/><text x="11.9496%" y="559.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="11.8577%" y="533" width="0.1581%" height="15" fill="rgb(251,22,52)" fg:x="150" fg:w="2"/><text x="12.1077%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="12.0158%" y="517" width="0.0791%" height="15" fill="rgb(229,209,22)" fg:x="152" fg:w="1"/><text x="12.2658%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="12.0158%" y="501" width="0.0791%" height="15" fill="rgb(234,138,34)" fg:x="152" fg:w="1"/><text x="12.2658%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="12.0158%" y="485" width="0.0791%" height="15" fill="rgb(212,95,11)" fg:x="152" fg:w="1"/><text x="12.2658%" y="495.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="12.0158%" y="469" width="0.0791%" height="15" fill="rgb(240,179,47)" fg:x="152" fg:w="1"/><text x="12.2658%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="12.0158%" y="453" width="0.0791%" height="15" fill="rgb(240,163,11)" fg:x="152" fg:w="1"/><text x="12.2658%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.0158%" y="437" width="0.0791%" height="15" fill="rgb(236,37,12)" fg:x="152" fg:w="1"/><text x="12.2658%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="12.0158%" y="421" width="0.0791%" height="15" fill="rgb(232,164,16)" fg:x="152" fg:w="1"/><text x="12.2658%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.0158%" y="405" width="0.0791%" height="15" fill="rgb(244,205,15)" fg:x="152" fg:w="1"/><text x="12.2658%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="12.0949%" y="501" width="0.2372%" height="15" fill="rgb(223,117,47)" fg:x="153" fg:w="3"/><text x="12.3449%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="12.3320%" y="501" width="0.3953%" height="15" fill="rgb(244,107,35)" fg:x="156" fg:w="5"/><text x="12.5820%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="12.3320%" y="485" width="0.3953%" height="15" fill="rgb(205,140,8)" fg:x="156" fg:w="5"/><text x="12.5820%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="12.4111%" y="469" width="0.3162%" height="15" fill="rgb(228,84,46)" fg:x="157" fg:w="4"/><text x="12.6611%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="12.4111%" y="453" width="0.3162%" height="15" fill="rgb(254,188,9)" fg:x="157" fg:w="4"/><text x="12.6611%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="12.4901%" y="437" width="0.2372%" height="15" fill="rgb(206,112,54)" fg:x="158" fg:w="3"/><text x="12.7401%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="12.6482%" y="421" width="0.0791%" height="15" fill="rgb(216,84,49)" fg:x="160" fg:w="1"/><text x="12.8982%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="12.8063%" y="485" width="0.1581%" height="15" fill="rgb(214,194,35)" fg:x="162" fg:w="2"/><text x="13.0563%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="12.9644%" y="485" width="0.3953%" height="15" fill="rgb(249,28,3)" fg:x="164" fg:w="5"/><text x="13.2144%" y="495.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="13.0435%" y="469" width="0.3162%" height="15" fill="rgb(222,56,52)" fg:x="165" fg:w="4"/><text x="13.2935%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="13.0435%" y="453" width="0.3162%" height="15" fill="rgb(245,217,50)" fg:x="165" fg:w="4"/><text x="13.2935%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.24%)</title><rect x="13.1225%" y="437" width="0.2372%" height="15" fill="rgb(213,201,24)" fg:x="166" fg:w="3"/><text x="13.3725%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="13.1225%" y="421" width="0.2372%" height="15" fill="rgb(248,116,28)" fg:x="166" fg:w="3"/><text x="13.3725%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="13.1225%" y="405" width="0.2372%" height="15" fill="rgb(219,72,43)" fg:x="166" fg:w="3"/><text x="13.3725%" y="415.50"></text></g><g><title>realloc (3 samples, 0.24%)</title><rect x="13.1225%" y="389" width="0.2372%" height="15" fill="rgb(209,138,14)" fg:x="166" fg:w="3"/><text x="13.3725%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="13.3597%" y="437" width="0.0791%" height="15" fill="rgb(222,18,33)" fg:x="169" fg:w="1"/><text x="13.6097%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.4387%" y="437" width="0.0791%" height="15" fill="rgb(213,199,7)" fg:x="170" fg:w="1"/><text x="13.6887%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.4387%" y="421" width="0.0791%" height="15" fill="rgb(250,110,10)" fg:x="170" fg:w="1"/><text x="13.6887%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.4387%" y="405" width="0.0791%" height="15" fill="rgb(248,123,6)" fg:x="170" fg:w="1"/><text x="13.6887%" y="415.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.4387%" y="389" width="0.0791%" height="15" fill="rgb(206,91,31)" fg:x="170" fg:w="1"/><text x="13.6887%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="13.5178%" y="437" width="0.0791%" height="15" fill="rgb(211,154,13)" fg:x="171" fg:w="1"/><text x="13.7678%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.5178%" y="421" width="0.0791%" height="15" fill="rgb(225,148,7)" fg:x="171" fg:w="1"/><text x="13.7678%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.5178%" y="405" width="0.0791%" height="15" fill="rgb(220,160,43)" fg:x="171" fg:w="1"/><text x="13.7678%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.5178%" y="389" width="0.0791%" height="15" fill="rgb(213,52,39)" fg:x="171" fg:w="1"/><text x="13.7678%" y="399.50"></text></g><g><title>serde::ser::Serializer::collect_seq (4 samples, 0.32%)</title><rect x="13.3597%" y="469" width="0.3162%" height="15" fill="rgb(243,137,7)" fg:x="169" fg:w="4"/><text x="13.6097%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="13.3597%" y="453" width="0.3162%" height="15" fill="rgb(230,79,13)" fg:x="169" fg:w="4"/><text x="13.6097%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="13.5968%" y="437" width="0.0791%" height="15" fill="rgb(247,105,23)" fg:x="172" fg:w="1"/><text x="13.8468%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="13.5968%" y="421" width="0.0791%" height="15" fill="rgb(223,179,41)" fg:x="172" fg:w="1"/><text x="13.8468%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.5968%" y="405" width="0.0791%" height="15" fill="rgb(218,9,34)" fg:x="172" fg:w="1"/><text x="13.8468%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="13.6759%" y="469" width="0.0791%" height="15" fill="rgb(222,106,8)" fg:x="173" fg:w="1"/><text x="13.9259%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="13.8340%" y="405" width="0.0791%" height="15" fill="rgb(211,220,0)" fg:x="175" fg:w="1"/><text x="14.0840%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="13.8340%" y="389" width="0.0791%" height="15" fill="rgb(229,52,16)" fg:x="175" fg:w="1"/><text x="14.0840%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="13.8340%" y="373" width="0.0791%" height="15" fill="rgb(212,155,18)" fg:x="175" fg:w="1"/><text x="14.0840%" y="383.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="13.8340%" y="357" width="0.0791%" height="15" fill="rgb(242,21,14)" fg:x="175" fg:w="1"/><text x="14.0840%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.24%)</title><rect x="13.7549%" y="453" width="0.2372%" height="15" fill="rgb(222,19,48)" fg:x="174" fg:w="3"/><text x="14.0049%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="13.8340%" y="437" width="0.1581%" height="15" fill="rgb(232,45,27)" fg:x="175" fg:w="2"/><text x="14.0840%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="13.8340%" y="421" width="0.1581%" height="15" fill="rgb(249,103,42)" fg:x="175" fg:w="2"/><text x="14.0840%" y="431.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="13.9130%" y="405" width="0.0791%" height="15" fill="rgb(246,81,33)" fg:x="176" fg:w="1"/><text x="14.1630%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.55%)</title><rect x="13.9921%" y="437" width="0.5534%" height="15" fill="rgb(252,33,42)" fg:x="177" fg:w="7"/><text x="14.2421%" y="447.50"></text></g><g><title>std::io::Write::write_all (6 samples, 0.47%)</title><rect x="14.0711%" y="421" width="0.4743%" height="15" fill="rgb(209,212,41)" fg:x="178" fg:w="6"/><text x="14.3211%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (4 samples, 0.32%)</title><rect x="14.2292%" y="405" width="0.3162%" height="15" fill="rgb(207,154,6)" fg:x="180" fg:w="4"/><text x="14.4792%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="14.3874%" y="389" width="0.1581%" height="15" fill="rgb(223,64,47)" fg:x="182" fg:w="2"/><text x="14.6374%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="14.3874%" y="373" width="0.1581%" height="15" fill="rgb(211,161,38)" fg:x="182" fg:w="2"/><text x="14.6374%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="14.3874%" y="357" width="0.1581%" height="15" fill="rgb(219,138,40)" fg:x="182" fg:w="2"/><text x="14.6374%" y="367.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="14.3874%" y="341" width="0.1581%" height="15" fill="rgb(241,228,46)" fg:x="182" fg:w="2"/><text x="14.6374%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="14.5455%" y="437" width="0.0791%" height="15" fill="rgb(223,209,38)" fg:x="184" fg:w="1"/><text x="14.7955%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="14.5455%" y="421" width="0.0791%" height="15" fill="rgb(236,164,45)" fg:x="184" fg:w="1"/><text x="14.7955%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.5455%" y="405" width="0.0791%" height="15" fill="rgb(231,15,5)" fg:x="184" fg:w="1"/><text x="14.7955%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.5455%" y="389" width="0.0791%" height="15" fill="rgb(252,35,15)" fg:x="184" fg:w="1"/><text x="14.7955%" y="399.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="13.9921%" y="453" width="0.7905%" height="15" fill="rgb(248,181,18)" fg:x="177" fg:w="10"/><text x="14.2421%" y="463.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="14.6245%" y="437" width="0.1581%" height="15" fill="rgb(233,39,42)" fg:x="185" fg:w="2"/><text x="14.8745%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (14 samples, 1.11%)</title><rect x="13.7549%" y="469" width="1.1067%" height="15" fill="rgb(238,110,33)" fg:x="174" fg:w="14"/><text x="14.0049%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.7826%" y="453" width="0.0791%" height="15" fill="rgb(233,195,10)" fg:x="187" fg:w="1"/><text x="15.0326%" y="463.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.7826%" y="437" width="0.0791%" height="15" fill="rgb(254,105,3)" fg:x="187" fg:w="1"/><text x="15.0326%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (20 samples, 1.58%)</title><rect x="13.3597%" y="485" width="1.5810%" height="15" fill="rgb(221,225,9)" fg:x="169" fg:w="20"/><text x="13.6097%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.8617%" y="469" width="0.0791%" height="15" fill="rgb(224,227,45)" fg:x="188" fg:w="1"/><text x="15.1117%" y="479.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (37 samples, 2.92%)</title><rect x="12.0949%" y="517" width="2.9249%" height="15" fill="rgb(229,198,43)" fg:x="153" fg:w="37"/><text x="12.3449%" y="527.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (29 samples, 2.29%)</title><rect x="12.7273%" y="501" width="2.2925%" height="15" fill="rgb(206,209,35)" fg:x="161" fg:w="29"/><text x="12.9773%" y="511.50">s..</text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="14.9407%" y="485" width="0.0791%" height="15" fill="rgb(245,195,53)" fg:x="189" fg:w="1"/><text x="15.1907%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="14.9407%" y="469" width="0.0791%" height="15" fill="rgb(240,92,26)" fg:x="189" fg:w="1"/><text x="15.1907%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="14.9407%" y="453" width="0.0791%" height="15" fill="rgb(207,40,23)" fg:x="189" fg:w="1"/><text x="15.1907%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="14.9407%" y="437" width="0.0791%" height="15" fill="rgb(223,111,35)" fg:x="189" fg:w="1"/><text x="15.1907%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="14.9407%" y="421" width="0.0791%" height="15" fill="rgb(229,147,28)" fg:x="189" fg:w="1"/><text x="15.1907%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="14.9407%" y="405" width="0.0791%" height="15" fill="rgb(211,29,28)" fg:x="189" fg:w="1"/><text x="15.1907%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0198%" y="485" width="0.0791%" height="15" fill="rgb(228,72,33)" fg:x="190" fg:w="1"/><text x="15.2698%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.0988%" y="485" width="0.0791%" height="15" fill="rgb(205,214,31)" fg:x="191" fg:w="1"/><text x="15.3488%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.0988%" y="469" width="0.0791%" height="15" fill="rgb(224,111,15)" fg:x="191" fg:w="1"/><text x="15.3488%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.2569%" y="469" width="0.0791%" height="15" fill="rgb(253,21,26)" fg:x="193" fg:w="1"/><text x="15.5069%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.2569%" y="453" width="0.0791%" height="15" fill="rgb(245,139,43)" fg:x="193" fg:w="1"/><text x="15.5069%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="15.0198%" y="517" width="0.5534%" height="15" fill="rgb(252,170,7)" fg:x="190" fg:w="7"/><text x="15.2698%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7 samples, 0.55%)</title><rect x="15.0198%" y="501" width="0.5534%" height="15" fill="rgb(231,118,14)" fg:x="190" fg:w="7"/><text x="15.2698%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="15.1779%" y="485" width="0.3953%" height="15" fill="rgb(238,83,0)" fg:x="192" fg:w="5"/><text x="15.4279%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="15.3360%" y="469" width="0.2372%" height="15" fill="rgb(221,39,39)" fg:x="194" fg:w="3"/><text x="15.5860%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="15.4150%" y="453" width="0.1581%" height="15" fill="rgb(222,119,46)" fg:x="195" fg:w="2"/><text x="15.6650%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="15.4941%" y="437" width="0.0791%" height="15" fill="rgb(222,165,49)" fg:x="196" fg:w="1"/><text x="15.7441%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="15.8893%" y="453" width="0.0791%" height="15" fill="rgb(219,113,52)" fg:x="201" fg:w="1"/><text x="16.1393%" y="463.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="15.8893%" y="469" width="0.1581%" height="15" fill="rgb(214,7,15)" fg:x="201" fg:w="2"/><text x="16.1393%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="15.9684%" y="453" width="0.0791%" height="15" fill="rgb(235,32,4)" fg:x="202" fg:w="1"/><text x="16.2184%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.1265%" y="437" width="0.0791%" height="15" fill="rgb(238,90,54)" fg:x="204" fg:w="1"/><text x="16.3765%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.2055%" y="421" width="0.1581%" height="15" fill="rgb(213,208,19)" fg:x="205" fg:w="2"/><text x="16.4555%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="16.2055%" y="405" width="0.1581%" height="15" fill="rgb(233,156,4)" fg:x="205" fg:w="2"/><text x="16.4555%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.2846%" y="389" width="0.0791%" height="15" fill="rgb(207,194,5)" fg:x="206" fg:w="1"/><text x="16.5346%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="16.5217%" y="405" width="0.0791%" height="15" fill="rgb(206,111,30)" fg:x="209" fg:w="1"/><text x="16.7717%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="16.6008%" y="373" width="0.0791%" height="15" fill="rgb(243,70,54)" fg:x="210" fg:w="1"/><text x="16.8508%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6008%" y="357" width="0.0791%" height="15" fill="rgb(242,28,8)" fg:x="210" fg:w="1"/><text x="16.8508%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.6008%" y="341" width="0.0791%" height="15" fill="rgb(219,106,18)" fg:x="210" fg:w="1"/><text x="16.8508%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (8 samples, 0.63%)</title><rect x="16.2055%" y="437" width="0.6324%" height="15" fill="rgb(244,222,10)" fg:x="205" fg:w="8"/><text x="16.4555%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.47%)</title><rect x="16.3636%" y="421" width="0.4743%" height="15" fill="rgb(236,179,52)" fg:x="207" fg:w="6"/><text x="16.6136%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="16.6008%" y="405" width="0.2372%" height="15" fill="rgb(213,23,39)" fg:x="210" fg:w="3"/><text x="16.8508%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="16.6008%" y="389" width="0.2372%" height="15" fill="rgb(238,48,10)" fg:x="210" fg:w="3"/><text x="16.8508%" y="399.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="16.6798%" y="373" width="0.1581%" height="15" fill="rgb(251,196,23)" fg:x="211" fg:w="2"/><text x="16.9298%" y="383.50"></text></g><g><title>engine::session::Session::flush (68 samples, 5.38%)</title><rect x="11.5415%" y="629" width="5.3755%" height="15" fill="rgb(250,152,24)" fg:x="146" fg:w="68"/><text x="11.7915%" y="639.50">engine:..</text></g><g><title>engine::session::Session::save_changes (67 samples, 5.30%)</title><rect x="11.6206%" y="613" width="5.2964%" height="15" fill="rgb(209,150,17)" fg:x="147" fg:w="67"/><text x="11.8706%" y="623.50">engine..</text></g><g><title>engine::session::state::State::close (66 samples, 5.22%)</title><rect x="11.6996%" y="597" width="5.2174%" height="15" fill="rgb(234,202,34)" fg:x="148" fg:w="66"/><text x="11.9496%" y="607.50">engine..</text></g><g><title>engine::session::state::State::flush_entities (66 samples, 5.22%)</title><rect x="11.6996%" y="581" width="5.2174%" height="15" fill="rgb(253,148,53)" fg:x="148" fg:w="66"/><text x="11.9496%" y="591.50">engine..</text></g><g><title>core::iter::adapters::try_process (62 samples, 4.90%)</title><rect x="12.0158%" y="565" width="4.9012%" height="15" fill="rgb(218,129,16)" fg:x="152" fg:w="62"/><text x="12.2658%" y="575.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (62 samples, 4.90%)</title><rect x="12.0158%" y="549" width="4.9012%" height="15" fill="rgb(216,85,19)" fg:x="152" fg:w="62"/><text x="12.2658%" y="559.50">&lt;alloc..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (62 samples, 4.90%)</title><rect x="12.0158%" y="533" width="4.9012%" height="15" fill="rgb(235,228,7)" fg:x="152" fg:w="62"/><text x="12.2658%" y="543.50">engine..</text></g><g><title>kernel::model::any_entity_changes (17 samples, 1.34%)</title><rect x="15.5731%" y="517" width="1.3439%" height="15" fill="rgb(245,175,0)" fg:x="197" fg:w="17"/><text x="15.8231%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (16 samples, 1.26%)</title><rect x="15.6522%" y="501" width="1.2648%" height="15" fill="rgb(208,168,36)" fg:x="198" fg:w="16"/><text x="15.9022%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (16 samples, 1.26%)</title><rect x="15.6522%" y="485" width="1.2648%" height="15" fill="rgb(246,171,24)" fg:x="198" fg:w="16"/><text x="15.9022%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (11 samples, 0.87%)</title><rect x="16.0474%" y="469" width="0.8696%" height="15" fill="rgb(215,142,24)" fg:x="203" fg:w="11"/><text x="16.2974%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (10 samples, 0.79%)</title><rect x="16.1265%" y="453" width="0.7905%" height="15" fill="rgb(250,187,7)" fg:x="204" fg:w="10"/><text x="16.3765%" y="463.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="16.8379%" y="437" width="0.0791%" height="15" fill="rgb(228,66,33)" fg:x="213" fg:w="1"/><text x="17.0879%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.8379%" y="421" width="0.0791%" height="15" fill="rgb(234,215,21)" fg:x="213" fg:w="1"/><text x="17.0879%" y="431.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="16.9170%" y="629" width="0.0791%" height="15" fill="rgb(222,191,20)" fg:x="214" fg:w="1"/><text x="17.1670%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="16.9170%" y="613" width="0.0791%" height="15" fill="rgb(245,79,54)" fg:x="214" fg:w="1"/><text x="17.1670%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="16.9170%" y="597" width="0.0791%" height="15" fill="rgb(240,10,37)" fg:x="214" fg:w="1"/><text x="17.1670%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="16.9170%" y="581" width="0.0791%" height="15" fill="rgb(214,192,32)" fg:x="214" fg:w="1"/><text x="17.1670%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="16.9170%" y="565" width="0.0791%" height="15" fill="rgb(209,36,54)" fg:x="214" fg:w="1"/><text x="17.1670%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9170%" y="549" width="0.0791%" height="15" fill="rgb(220,10,11)" fg:x="214" fg:w="1"/><text x="17.1670%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="16.9170%" y="533" width="0.0791%" height="15" fill="rgb(221,106,17)" fg:x="214" fg:w="1"/><text x="17.1670%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="16.9170%" y="517" width="0.0791%" height="15" fill="rgb(251,142,44)" fg:x="214" fg:w="1"/><text x="17.1670%" y="527.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="16.9170%" y="501" width="0.0791%" height="15" fill="rgb(238,13,15)" fg:x="214" fg:w="1"/><text x="17.1670%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="16.9960%" y="565" width="0.0791%" height="15" fill="rgb(208,107,27)" fg:x="215" fg:w="1"/><text x="17.2460%" y="575.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="16.9960%" y="549" width="0.0791%" height="15" fill="rgb(205,136,37)" fg:x="215" fg:w="1"/><text x="17.2460%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="16.9960%" y="533" width="0.0791%" height="15" fill="rgb(250,205,27)" fg:x="215" fg:w="1"/><text x="17.2460%" y="543.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="16.9960%" y="597" width="0.1581%" height="15" fill="rgb(210,80,43)" fg:x="215" fg:w="2"/><text x="17.2460%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="16.9960%" y="581" width="0.1581%" height="15" fill="rgb(247,160,36)" fg:x="215" fg:w="2"/><text x="17.2460%" y="591.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="17.0751%" y="565" width="0.0791%" height="15" fill="rgb(234,13,49)" fg:x="216" fg:w="1"/><text x="17.3251%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.0751%" y="549" width="0.0791%" height="15" fill="rgb(234,122,0)" fg:x="216" fg:w="1"/><text x="17.3251%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.2332%" y="517" width="0.0791%" height="15" fill="rgb(207,146,38)" fg:x="218" fg:w="1"/><text x="17.4832%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.2332%" y="501" width="0.0791%" height="15" fill="rgb(207,177,25)" fg:x="218" fg:w="1"/><text x="17.4832%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.2332%" y="485" width="0.0791%" height="15" fill="rgb(211,178,42)" fg:x="218" fg:w="1"/><text x="17.4832%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.2332%" y="469" width="0.0791%" height="15" fill="rgb(230,69,54)" fg:x="218" fg:w="1"/><text x="17.4832%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.2332%" y="453" width="0.0791%" height="15" fill="rgb(214,135,41)" fg:x="218" fg:w="1"/><text x="17.4832%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.2332%" y="437" width="0.0791%" height="15" fill="rgb(237,67,25)" fg:x="218" fg:w="1"/><text x="17.4832%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.2332%" y="421" width="0.0791%" height="15" fill="rgb(222,189,50)" fg:x="218" fg:w="1"/><text x="17.4832%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.2332%" y="405" width="0.0791%" height="15" fill="rgb(245,148,34)" fg:x="218" fg:w="1"/><text x="17.4832%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.2332%" y="389" width="0.0791%" height="15" fill="rgb(222,29,6)" fg:x="218" fg:w="1"/><text x="17.4832%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.2332%" y="373" width="0.0791%" height="15" fill="rgb(221,189,43)" fg:x="218" fg:w="1"/><text x="17.4832%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.2332%" y="357" width="0.0791%" height="15" fill="rgb(207,36,27)" fg:x="218" fg:w="1"/><text x="17.4832%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.2332%" y="341" width="0.0791%" height="15" fill="rgb(217,90,24)" fg:x="218" fg:w="1"/><text x="17.4832%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.2332%" y="325" width="0.0791%" height="15" fill="rgb(224,66,35)" fg:x="218" fg:w="1"/><text x="17.4832%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.2332%" y="309" width="0.0791%" height="15" fill="rgb(221,13,50)" fg:x="218" fg:w="1"/><text x="17.4832%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="17.1542%" y="581" width="0.2372%" height="15" fill="rgb(236,68,49)" fg:x="217" fg:w="3"/><text x="17.4042%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="17.1542%" y="565" width="0.2372%" height="15" fill="rgb(229,146,28)" fg:x="217" fg:w="3"/><text x="17.4042%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="17.2332%" y="549" width="0.1581%" height="15" fill="rgb(225,31,38)" fg:x="218" fg:w="2"/><text x="17.4832%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="17.2332%" y="533" width="0.1581%" height="15" fill="rgb(250,208,3)" fg:x="218" fg:w="2"/><text x="17.4832%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3123%" y="517" width="0.0791%" height="15" fill="rgb(246,54,23)" fg:x="219" fg:w="1"/><text x="17.5623%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3123%" y="501" width="0.0791%" height="15" fill="rgb(243,76,11)" fg:x="219" fg:w="1"/><text x="17.5623%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="17.3123%" y="485" width="0.0791%" height="15" fill="rgb(245,21,50)" fg:x="219" fg:w="1"/><text x="17.5623%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3123%" y="469" width="0.0791%" height="15" fill="rgb(228,9,43)" fg:x="219" fg:w="1"/><text x="17.5623%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="17.3123%" y="453" width="0.0791%" height="15" fill="rgb(208,100,47)" fg:x="219" fg:w="1"/><text x="17.5623%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="17.3123%" y="437" width="0.0791%" height="15" fill="rgb(232,26,8)" fg:x="219" fg:w="1"/><text x="17.5623%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.3123%" y="421" width="0.0791%" height="15" fill="rgb(216,166,38)" fg:x="219" fg:w="1"/><text x="17.5623%" y="431.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.3123%" y="405" width="0.0791%" height="15" fill="rgb(251,202,51)" fg:x="219" fg:w="1"/><text x="17.5623%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3913%" y="549" width="0.0791%" height="15" fill="rgb(254,216,34)" fg:x="220" fg:w="1"/><text x="17.6413%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.3913%" y="533" width="0.0791%" height="15" fill="rgb(251,32,27)" fg:x="220" fg:w="1"/><text x="17.6413%" y="543.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="17.4704%" y="549" width="0.0791%" height="15" fill="rgb(208,127,28)" fg:x="221" fg:w="1"/><text x="17.7204%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (1 samples, 0.08%)</title><rect x="17.5494%" y="549" width="0.0791%" height="15" fill="rgb(224,137,22)" fg:x="222" fg:w="1"/><text x="17.7994%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="17.5494%" y="533" width="0.0791%" height="15" fill="rgb(254,70,32)" fg:x="222" fg:w="1"/><text x="17.7994%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5494%" y="517" width="0.0791%" height="15" fill="rgb(229,75,37)" fg:x="222" fg:w="1"/><text x="17.7994%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="17.5494%" y="501" width="0.0791%" height="15" fill="rgb(252,64,23)" fg:x="222" fg:w="1"/><text x="17.7994%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.5494%" y="485" width="0.0791%" height="15" fill="rgb(232,162,48)" fg:x="222" fg:w="1"/><text x="17.7994%" y="495.50"></text></g><g><title>engine::session::internal::Entities::add_entity (7 samples, 0.55%)</title><rect x="17.1542%" y="597" width="0.5534%" height="15" fill="rgb(246,160,12)" fg:x="217" fg:w="7"/><text x="17.4042%" y="607.50"></text></g><g><title>serde_json::value::to_value (4 samples, 0.32%)</title><rect x="17.3913%" y="581" width="0.3162%" height="15" fill="rgb(247,166,0)" fg:x="220" fg:w="4"/><text x="17.6413%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="17.3913%" y="565" width="0.3162%" height="15" fill="rgb(249,219,21)" fg:x="220" fg:w="4"/><text x="17.6413%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="17.6285%" y="549" width="0.0791%" height="15" fill="rgb(205,209,3)" fg:x="223" fg:w="1"/><text x="17.8785%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="17.6285%" y="533" width="0.0791%" height="15" fill="rgb(243,44,1)" fg:x="223" fg:w="1"/><text x="17.8785%" y="543.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.6285%" y="517" width="0.0791%" height="15" fill="rgb(206,159,16)" fg:x="223" fg:w="1"/><text x="17.8785%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6285%" y="501" width="0.0791%" height="15" fill="rgb(244,77,30)" fg:x="223" fg:w="1"/><text x="17.8785%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.6285%" y="485" width="0.0791%" height="15" fill="rgb(218,69,12)" fg:x="223" fg:w="1"/><text x="17.8785%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6285%" y="469" width="0.0791%" height="15" fill="rgb(212,87,7)" fg:x="223" fg:w="1"/><text x="17.8785%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="17.6285%" y="453" width="0.0791%" height="15" fill="rgb(245,114,25)" fg:x="223" fg:w="1"/><text x="17.8785%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="17.6285%" y="437" width="0.0791%" height="15" fill="rgb(210,61,42)" fg:x="223" fg:w="1"/><text x="17.8785%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.6285%" y="421" width="0.0791%" height="15" fill="rgb(211,52,33)" fg:x="223" fg:w="1"/><text x="17.8785%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (10 samples, 0.79%)</title><rect x="16.9960%" y="613" width="0.7905%" height="15" fill="rgb(234,58,33)" fg:x="215" fg:w="10"/><text x="17.2460%" y="623.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="17.7075%" y="597" width="0.0791%" height="15" fill="rgb(220,115,36)" fg:x="224" fg:w="1"/><text x="17.9575%" y="607.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="17.7075%" y="581" width="0.0791%" height="15" fill="rgb(243,153,54)" fg:x="224" fg:w="1"/><text x="17.9575%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7075%" y="565" width="0.0791%" height="15" fill="rgb(251,47,18)" fg:x="224" fg:w="1"/><text x="17.9575%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7866%" y="565" width="0.0791%" height="15" fill="rgb(242,102,42)" fg:x="225" fg:w="1"/><text x="18.0366%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7866%" y="549" width="0.0791%" height="15" fill="rgb(234,31,38)" fg:x="225" fg:w="1"/><text x="18.0366%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="17.7866%" y="533" width="0.0791%" height="15" fill="rgb(221,117,51)" fg:x="225" fg:w="1"/><text x="18.0366%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7866%" y="517" width="0.0791%" height="15" fill="rgb(212,20,18)" fg:x="225" fg:w="1"/><text x="18.0366%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="17.7866%" y="501" width="0.0791%" height="15" fill="rgb(245,133,36)" fg:x="225" fg:w="1"/><text x="18.0366%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="17.7866%" y="485" width="0.0791%" height="15" fill="rgb(212,6,19)" fg:x="225" fg:w="1"/><text x="18.0366%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="17.7866%" y="469" width="0.0791%" height="15" fill="rgb(218,1,36)" fg:x="225" fg:w="1"/><text x="18.0366%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="17.7866%" y="453" width="0.0791%" height="15" fill="rgb(246,84,54)" fg:x="225" fg:w="1"/><text x="18.0366%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7866%" y="437" width="0.0791%" height="15" fill="rgb(242,110,6)" fg:x="225" fg:w="1"/><text x="18.0366%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="17.7866%" y="421" width="0.0791%" height="15" fill="rgb(214,47,5)" fg:x="225" fg:w="1"/><text x="18.0366%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="17.7866%" y="405" width="0.0791%" height="15" fill="rgb(218,159,25)" fg:x="225" fg:w="1"/><text x="18.0366%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="17.7866%" y="389" width="0.0791%" height="15" fill="rgb(215,211,28)" fg:x="225" fg:w="1"/><text x="18.0366%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="17.7866%" y="373" width="0.0791%" height="15" fill="rgb(238,59,32)" fg:x="225" fg:w="1"/><text x="18.0366%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="17.7866%" y="357" width="0.0791%" height="15" fill="rgb(226,82,3)" fg:x="225" fg:w="1"/><text x="18.0366%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.7866%" y="341" width="0.0791%" height="15" fill="rgb(240,164,32)" fg:x="225" fg:w="1"/><text x="18.0366%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="17.8656%" y="565" width="0.0791%" height="15" fill="rgb(232,46,7)" fg:x="226" fg:w="1"/><text x="18.1156%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="17.9447%" y="501" width="0.0791%" height="15" fill="rgb(229,129,53)" fg:x="227" fg:w="1"/><text x="18.1947%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="17.9447%" y="485" width="0.0791%" height="15" fill="rgb(234,188,29)" fg:x="227" fg:w="1"/><text x="18.1947%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="18.0237%" y="501" width="0.0791%" height="15" fill="rgb(246,141,4)" fg:x="228" fg:w="1"/><text x="18.2737%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (15 samples, 1.19%)</title><rect x="16.9960%" y="629" width="1.1858%" height="15" fill="rgb(229,23,39)" fg:x="215" fg:w="15"/><text x="17.2460%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (5 samples, 0.40%)</title><rect x="17.7866%" y="613" width="0.3953%" height="15" fill="rgb(206,12,3)" fg:x="225" fg:w="5"/><text x="18.0366%" y="623.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="17.7866%" y="597" width="0.3953%" height="15" fill="rgb(252,226,20)" fg:x="225" fg:w="5"/><text x="18.0366%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="17.7866%" y="581" width="0.3953%" height="15" fill="rgb(216,123,35)" fg:x="225" fg:w="5"/><text x="18.0366%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="17.9447%" y="565" width="0.2372%" height="15" fill="rgb(212,68,40)" fg:x="227" fg:w="3"/><text x="18.1947%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.9447%" y="549" width="0.2372%" height="15" fill="rgb(254,125,32)" fg:x="227" fg:w="3"/><text x="18.1947%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="17.9447%" y="533" width="0.2372%" height="15" fill="rgb(253,97,22)" fg:x="227" fg:w="3"/><text x="18.1947%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="17.9447%" y="517" width="0.2372%" height="15" fill="rgb(241,101,14)" fg:x="227" fg:w="3"/><text x="18.1947%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="18.1028%" y="501" width="0.0791%" height="15" fill="rgb(238,103,29)" fg:x="229" fg:w="1"/><text x="18.3528%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="18.1028%" y="485" width="0.0791%" height="15" fill="rgb(233,195,47)" fg:x="229" fg:w="1"/><text x="18.3528%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;plugins_core::moving::model::Occupyable&gt; (1 samples, 0.08%)</title><rect x="18.1818%" y="597" width="0.0791%" height="15" fill="rgb(246,218,30)" fg:x="230" fg:w="1"/><text x="18.4318%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="18.2609%" y="549" width="0.0791%" height="15" fill="rgb(219,145,47)" fg:x="231" fg:w="1"/><text x="18.5109%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="18.2609%" y="565" width="0.1581%" height="15" fill="rgb(243,12,26)" fg:x="231" fg:w="2"/><text x="18.5109%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="18.3399%" y="549" width="0.0791%" height="15" fill="rgb(214,87,16)" fg:x="232" fg:w="1"/><text x="18.5899%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="18.3399%" y="533" width="0.0791%" height="15" fill="rgb(208,99,42)" fg:x="232" fg:w="1"/><text x="18.5899%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.3399%" y="517" width="0.0791%" height="15" fill="rgb(253,99,2)" fg:x="232" fg:w="1"/><text x="18.5899%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4190%" y="517" width="0.0791%" height="15" fill="rgb(220,168,23)" fg:x="233" fg:w="1"/><text x="18.6690%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4190%" y="501" width="0.0791%" height="15" fill="rgb(242,38,24)" fg:x="233" fg:w="1"/><text x="18.6690%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.4190%" y="485" width="0.0791%" height="15" fill="rgb(225,182,9)" fg:x="233" fg:w="1"/><text x="18.6690%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (4 samples, 0.32%)</title><rect x="18.2609%" y="597" width="0.3162%" height="15" fill="rgb(243,178,37)" fg:x="231" fg:w="4"/><text x="18.5109%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (4 samples, 0.32%)</title><rect x="18.2609%" y="581" width="0.3162%" height="15" fill="rgb(232,139,19)" fg:x="231" fg:w="4"/><text x="18.5109%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="18.4190%" y="565" width="0.1581%" height="15" fill="rgb(225,201,24)" fg:x="233" fg:w="2"/><text x="18.6690%" y="575.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="18.4190%" y="549" width="0.1581%" height="15" fill="rgb(221,47,46)" fg:x="233" fg:w="2"/><text x="18.6690%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="18.4190%" y="533" width="0.1581%" height="15" fill="rgb(249,23,13)" fg:x="233" fg:w="2"/><text x="18.6690%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.4980%" y="517" width="0.0791%" height="15" fill="rgb(219,9,5)" fg:x="234" fg:w="1"/><text x="18.7480%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4980%" y="501" width="0.0791%" height="15" fill="rgb(254,171,16)" fg:x="234" fg:w="1"/><text x="18.7480%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="18.4980%" y="485" width="0.0791%" height="15" fill="rgb(230,171,20)" fg:x="234" fg:w="1"/><text x="18.7480%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4980%" y="469" width="0.0791%" height="15" fill="rgb(210,71,41)" fg:x="234" fg:w="1"/><text x="18.7480%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="18.4980%" y="453" width="0.0791%" height="15" fill="rgb(206,173,20)" fg:x="234" fg:w="1"/><text x="18.7480%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="18.4980%" y="437" width="0.0791%" height="15" fill="rgb(233,88,34)" fg:x="234" fg:w="1"/><text x="18.7480%" y="447.50"></text></g><g><title>serde_json::value::de::BorrowedCowStrDeserializer::new (1 samples, 0.08%)</title><rect x="18.4980%" y="421" width="0.0791%" height="15" fill="rgb(223,209,46)" fg:x="234" fg:w="1"/><text x="18.7480%" y="431.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::occupying (8 samples, 0.63%)</title><rect x="18.1818%" y="629" width="0.6324%" height="15" fill="rgb(250,43,18)" fg:x="230" fg:w="8"/><text x="18.4318%" y="639.50"></text></g><g><title>plugins_core::tools::set_occupying (8 samples, 0.63%)</title><rect x="18.1818%" y="613" width="0.6324%" height="15" fill="rgb(208,13,10)" fg:x="230" fg:w="8"/><text x="18.4318%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (3 samples, 0.24%)</title><rect x="18.5771%" y="597" width="0.2372%" height="15" fill="rgb(212,200,36)" fg:x="235" fg:w="3"/><text x="18.8271%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (3 samples, 0.24%)</title><rect x="18.5771%" y="581" width="0.2372%" height="15" fill="rgb(225,90,30)" fg:x="235" fg:w="3"/><text x="18.8271%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.24%)</title><rect x="18.5771%" y="565" width="0.2372%" height="15" fill="rgb(236,182,39)" fg:x="235" fg:w="3"/><text x="18.8271%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.16%)</title><rect x="18.6561%" y="549" width="0.1581%" height="15" fill="rgb(212,144,35)" fg:x="236" fg:w="2"/><text x="18.9061%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8142%" y="597" width="0.0791%" height="15" fill="rgb(228,63,44)" fg:x="238" fg:w="1"/><text x="19.0642%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8142%" y="581" width="0.0791%" height="15" fill="rgb(228,109,6)" fg:x="238" fg:w="1"/><text x="19.0642%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="18.8142%" y="565" width="0.0791%" height="15" fill="rgb(238,117,24)" fg:x="238" fg:w="1"/><text x="19.0642%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8142%" y="549" width="0.0791%" height="15" fill="rgb(242,26,26)" fg:x="238" fg:w="1"/><text x="19.0642%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="18.8142%" y="533" width="0.0791%" height="15" fill="rgb(221,92,48)" fg:x="238" fg:w="1"/><text x="19.0642%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="18.8142%" y="517" width="0.0791%" height="15" fill="rgb(209,209,32)" fg:x="238" fg:w="1"/><text x="19.0642%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="18.8142%" y="501" width="0.0791%" height="15" fill="rgb(221,70,22)" fg:x="238" fg:w="1"/><text x="19.0642%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="18.8142%" y="485" width="0.0791%" height="15" fill="rgb(248,145,5)" fg:x="238" fg:w="1"/><text x="19.0642%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="18.8142%" y="469" width="0.0791%" height="15" fill="rgb(226,116,26)" fg:x="238" fg:w="1"/><text x="19.0642%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="18.8142%" y="453" width="0.0791%" height="15" fill="rgb(244,5,17)" fg:x="238" fg:w="1"/><text x="19.0642%" y="463.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (3 samples, 0.24%)</title><rect x="18.8142%" y="613" width="0.2372%" height="15" fill="rgb(252,159,33)" fg:x="238" fg:w="3"/><text x="19.0642%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="18.8933%" y="597" width="0.1581%" height="15" fill="rgb(206,71,0)" fg:x="239" fg:w="2"/><text x="19.1433%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="18.8933%" y="581" width="0.1581%" height="15" fill="rgb(233,118,54)" fg:x="239" fg:w="2"/><text x="19.1433%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="18.9723%" y="565" width="0.0791%" height="15" fill="rgb(234,83,48)" fg:x="240" fg:w="1"/><text x="19.2223%" y="575.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="18.9723%" y="549" width="0.0791%" height="15" fill="rgb(228,3,54)" fg:x="240" fg:w="1"/><text x="19.2223%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="18.9723%" y="533" width="0.0791%" height="15" fill="rgb(226,155,13)" fg:x="240" fg:w="1"/><text x="19.2223%" y="543.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::routes (4 samples, 0.32%)</title><rect x="18.8142%" y="629" width="0.3162%" height="15" fill="rgb(241,28,37)" fg:x="238" fg:w="4"/><text x="19.0642%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.0514%" y="613" width="0.0791%" height="15" fill="rgb(233,93,10)" fg:x="241" fg:w="1"/><text x="19.3014%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="19.0514%" y="597" width="0.0791%" height="15" fill="rgb(225,113,19)" fg:x="241" fg:w="1"/><text x="19.3014%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.0514%" y="581" width="0.0791%" height="15" fill="rgb(241,2,18)" fg:x="241" fg:w="1"/><text x="19.3014%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.0514%" y="565" width="0.0791%" height="15" fill="rgb(228,207,21)" fg:x="241" fg:w="1"/><text x="19.3014%" y="575.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.1304%" y="613" width="0.0791%" height="15" fill="rgb(213,211,35)" fg:x="242" fg:w="1"/><text x="19.3804%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.1304%" y="597" width="0.0791%" height="15" fill="rgb(209,83,10)" fg:x="242" fg:w="1"/><text x="19.3804%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.1304%" y="581" width="0.0791%" height="15" fill="rgb(209,164,1)" fg:x="242" fg:w="1"/><text x="19.3804%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.1304%" y="565" width="0.0791%" height="15" fill="rgb(213,184,43)" fg:x="242" fg:w="1"/><text x="19.3804%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.1304%" y="549" width="0.0791%" height="15" fill="rgb(231,61,34)" fg:x="242" fg:w="1"/><text x="19.3804%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1304%" y="533" width="0.0791%" height="15" fill="rgb(235,75,3)" fg:x="242" fg:w="1"/><text x="19.3804%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1304%" y="517" width="0.0791%" height="15" fill="rgb(220,106,47)" fg:x="242" fg:w="1"/><text x="19.3804%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="19.1304%" y="501" width="0.0791%" height="15" fill="rgb(210,196,33)" fg:x="242" fg:w="1"/><text x="19.3804%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="19.1304%" y="485" width="0.0791%" height="15" fill="rgb(229,154,42)" fg:x="242" fg:w="1"/><text x="19.3804%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="19.1304%" y="469" width="0.0791%" height="15" fill="rgb(228,114,26)" fg:x="242" fg:w="1"/><text x="19.3804%" y="479.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.2095%" y="613" width="0.0791%" height="15" fill="rgb(208,144,1)" fg:x="243" fg:w="1"/><text x="19.4595%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="19.2095%" y="597" width="0.0791%" height="15" fill="rgb(239,112,37)" fg:x="243" fg:w="1"/><text x="19.4595%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="19.2095%" y="581" width="0.0791%" height="15" fill="rgb(210,96,50)" fg:x="243" fg:w="1"/><text x="19.4595%" y="591.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="19.2095%" y="565" width="0.0791%" height="15" fill="rgb(222,178,2)" fg:x="243" fg:w="1"/><text x="19.4595%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.2885%" y="597" width="0.0791%" height="15" fill="rgb(226,74,18)" fg:x="244" fg:w="1"/><text x="19.5385%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.2885%" y="581" width="0.0791%" height="15" fill="rgb(225,67,54)" fg:x="244" fg:w="1"/><text x="19.5385%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2885%" y="565" width="0.0791%" height="15" fill="rgb(251,92,32)" fg:x="244" fg:w="1"/><text x="19.5385%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="19.2885%" y="549" width="0.0791%" height="15" fill="rgb(228,149,22)" fg:x="244" fg:w="1"/><text x="19.5385%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="19.2885%" y="533" width="0.0791%" height="15" fill="rgb(243,54,13)" fg:x="244" fg:w="1"/><text x="19.5385%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="19.2885%" y="517" width="0.0791%" height="15" fill="rgb(243,180,28)" fg:x="244" fg:w="1"/><text x="19.5385%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="19.2885%" y="501" width="0.0791%" height="15" fill="rgb(208,167,24)" fg:x="244" fg:w="1"/><text x="19.5385%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2885%" y="485" width="0.0791%" height="15" fill="rgb(245,73,45)" fg:x="244" fg:w="1"/><text x="19.5385%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="19.2885%" y="469" width="0.0791%" height="15" fill="rgb(237,203,48)" fg:x="244" fg:w="1"/><text x="19.5385%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="19.2885%" y="453" width="0.0791%" height="15" fill="rgb(211,197,16)" fg:x="244" fg:w="1"/><text x="19.5385%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="19.2885%" y="437" width="0.0791%" height="15" fill="rgb(243,99,51)" fg:x="244" fg:w="1"/><text x="19.5385%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="19.2885%" y="421" width="0.0791%" height="15" fill="rgb(215,123,29)" fg:x="244" fg:w="1"/><text x="19.5385%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="19.2885%" y="405" width="0.0791%" height="15" fill="rgb(239,186,37)" fg:x="244" fg:w="1"/><text x="19.5385%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="19.2885%" y="389" width="0.0791%" height="15" fill="rgb(252,136,39)" fg:x="244" fg:w="1"/><text x="19.5385%" y="399.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (2 samples, 0.16%)</title><rect x="19.2885%" y="613" width="0.1581%" height="15" fill="rgb(223,213,32)" fg:x="244" fg:w="2"/><text x="19.5385%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="19.3676%" y="597" width="0.0791%" height="15" fill="rgb(233,115,5)" fg:x="245" fg:w="1"/><text x="19.6176%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="19.3676%" y="581" width="0.0791%" height="15" fill="rgb(207,226,44)" fg:x="245" fg:w="1"/><text x="19.6176%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="19.3676%" y="565" width="0.0791%" height="15" fill="rgb(208,126,0)" fg:x="245" fg:w="1"/><text x="19.6176%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="19.3676%" y="549" width="0.0791%" height="15" fill="rgb(244,66,21)" fg:x="245" fg:w="1"/><text x="19.6176%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="19.3676%" y="533" width="0.0791%" height="15" fill="rgb(222,97,12)" fg:x="245" fg:w="1"/><text x="19.6176%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3676%" y="517" width="0.0791%" height="15" fill="rgb(219,213,19)" fg:x="245" fg:w="1"/><text x="19.6176%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="19.3676%" y="501" width="0.0791%" height="15" fill="rgb(252,169,30)" fg:x="245" fg:w="1"/><text x="19.6176%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (110 samples, 8.70%)</title><rect x="10.8300%" y="645" width="8.6957%" height="15" fill="rgb(206,32,51)" fg:x="137" fg:w="110"/><text x="11.0800%" y="655.50">plugins_core..</text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="19.1304%" y="629" width="0.3953%" height="15" fill="rgb(250,172,42)" fg:x="242" fg:w="5"/><text x="19.3804%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="19.4466%" y="613" width="0.0791%" height="15" fill="rgb(209,34,43)" fg:x="246" fg:w="1"/><text x="19.6966%" y="623.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="19.4466%" y="597" width="0.0791%" height="15" fill="rgb(223,11,35)" fg:x="246" fg:w="1"/><text x="19.6966%" y="607.50"></text></g><g><title>plugins_core::location::_::&lt;impl serde::ser::Serialize for plugins_core::location::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4466%" y="581" width="0.0791%" height="15" fill="rgb(251,219,26)" fg:x="246" fg:w="1"/><text x="19.6966%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.4466%" y="565" width="0.0791%" height="15" fill="rgb(231,119,3)" fg:x="246" fg:w="1"/><text x="19.6966%" y="575.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="19.4466%" y="549" width="0.0791%" height="15" fill="rgb(216,97,11)" fg:x="246" fg:w="1"/><text x="19.6966%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="19.4466%" y="533" width="0.0791%" height="15" fill="rgb(223,59,9)" fg:x="246" fg:w="1"/><text x="19.6966%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.4466%" y="517" width="0.0791%" height="15" fill="rgb(233,93,31)" fg:x="246" fg:w="1"/><text x="19.6966%" y="527.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (2 samples, 0.16%)</title><rect x="19.5257%" y="645" width="0.1581%" height="15" fill="rgb(239,81,33)" fg:x="247" fg:w="2"/><text x="19.7757%" y="655.50"></text></g><g><title>plugins_core::build::Build::new (2 samples, 0.16%)</title><rect x="19.5257%" y="629" width="0.1581%" height="15" fill="rgb(213,120,34)" fg:x="247" fg:w="2"/><text x="19.7757%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="19.6047%" y="613" width="0.0791%" height="15" fill="rgb(243,49,53)" fg:x="248" fg:w="1"/><text x="19.8547%" y="623.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="19.6047%" y="597" width="0.0791%" height="15" fill="rgb(247,216,33)" fg:x="248" fg:w="1"/><text x="19.8547%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="19.6047%" y="581" width="0.0791%" height="15" fill="rgb(226,26,14)" fg:x="248" fg:w="1"/><text x="19.8547%" y="591.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.6838%" y="613" width="0.0791%" height="15" fill="rgb(215,49,53)" fg:x="249" fg:w="1"/><text x="19.9338%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="19.6838%" y="597" width="0.0791%" height="15" fill="rgb(245,162,40)" fg:x="249" fg:w="1"/><text x="19.9338%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="19.6838%" y="581" width="0.0791%" height="15" fill="rgb(229,68,17)" fg:x="249" fg:w="1"/><text x="19.9338%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="19.6838%" y="565" width="0.0791%" height="15" fill="rgb(213,182,10)" fg:x="249" fg:w="1"/><text x="19.9338%" y="575.50"></text></g><g><title>alloc::string::String::with_capacity (1 samples, 0.08%)</title><rect x="19.7628%" y="549" width="0.0791%" height="15" fill="rgb(245,125,30)" fg:x="250" fg:w="1"/><text x="20.0128%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (2 samples, 0.16%)</title><rect x="19.7628%" y="597" width="0.1581%" height="15" fill="rgb(232,202,2)" fg:x="250" fg:w="2"/><text x="20.0128%" y="607.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (2 samples, 0.16%)</title><rect x="19.7628%" y="581" width="0.1581%" height="15" fill="rgb(237,140,51)" fg:x="250" fg:w="2"/><text x="20.0128%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (2 samples, 0.16%)</title><rect x="19.7628%" y="565" width="0.1581%" height="15" fill="rgb(236,157,25)" fg:x="250" fg:w="2"/><text x="20.0128%" y="575.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="19.8419%" y="549" width="0.0791%" height="15" fill="rgb(219,209,0)" fg:x="251" fg:w="1"/><text x="20.0919%" y="559.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="19.8419%" y="533" width="0.0791%" height="15" fill="rgb(240,116,54)" fg:x="251" fg:w="1"/><text x="20.0919%" y="543.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.8419%" y="517" width="0.0791%" height="15" fill="rgb(216,10,36)" fg:x="251" fg:w="1"/><text x="20.0919%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="19.8419%" y="501" width="0.0791%" height="15" fill="rgb(222,72,44)" fg:x="251" fg:w="1"/><text x="20.0919%" y="511.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.08%)</title><rect x="19.8419%" y="485" width="0.0791%" height="15" fill="rgb(232,159,9)" fg:x="251" fg:w="1"/><text x="20.0919%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.08%)</title><rect x="19.8419%" y="469" width="0.0791%" height="15" fill="rgb(210,39,32)" fg:x="251" fg:w="1"/><text x="20.0919%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="19.8419%" y="453" width="0.0791%" height="15" fill="rgb(216,194,45)" fg:x="251" fg:w="1"/><text x="20.0919%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.08%)</title><rect x="19.8419%" y="437" width="0.0791%" height="15" fill="rgb(218,18,35)" fg:x="251" fg:w="1"/><text x="20.0919%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="19.8419%" y="421" width="0.0791%" height="15" fill="rgb(207,83,51)" fg:x="251" fg:w="1"/><text x="20.0919%" y="431.50"></text></g><g><title>plugins_core::build::Build::new (3 samples, 0.24%)</title><rect x="19.7628%" y="613" width="0.2372%" height="15" fill="rgb(225,63,43)" fg:x="250" fg:w="3"/><text x="20.0128%" y="623.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (1 samples, 0.08%)</title><rect x="19.9209%" y="597" width="0.0791%" height="15" fill="rgb(207,57,36)" fg:x="252" fg:w="1"/><text x="20.1709%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="19.9209%" y="581" width="0.0791%" height="15" fill="rgb(216,99,33)" fg:x="252" fg:w="1"/><text x="20.1709%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="19.9209%" y="565" width="0.0791%" height="15" fill="rgb(225,42,16)" fg:x="252" fg:w="1"/><text x="20.1709%" y="575.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (1 samples, 0.08%)</title><rect x="20.0000%" y="565" width="0.0791%" height="15" fill="rgb(220,201,45)" fg:x="253" fg:w="1"/><text x="20.2500%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (1 samples, 0.08%)</title><rect x="20.0000%" y="549" width="0.0791%" height="15" fill="rgb(225,33,4)" fg:x="253" fg:w="1"/><text x="20.2500%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="20.0000%" y="533" width="0.0791%" height="15" fill="rgb(224,33,50)" fg:x="253" fg:w="1"/><text x="20.2500%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="20.0000%" y="517" width="0.0791%" height="15" fill="rgb(246,198,51)" fg:x="253" fg:w="1"/><text x="20.2500%" y="527.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="20.0000%" y="581" width="0.1581%" height="15" fill="rgb(205,22,4)" fg:x="253" fg:w="2"/><text x="20.2500%" y="591.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="20.0791%" y="565" width="0.0791%" height="15" fill="rgb(206,3,8)" fg:x="254" fg:w="1"/><text x="20.3291%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="20.0791%" y="549" width="0.0791%" height="15" fill="rgb(251,23,15)" fg:x="254" fg:w="1"/><text x="20.3291%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.0791%" y="533" width="0.0791%" height="15" fill="rgb(252,88,28)" fg:x="254" fg:w="1"/><text x="20.3291%" y="543.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="20.1581%" y="565" width="0.0791%" height="15" fill="rgb(212,127,14)" fg:x="255" fg:w="1"/><text x="20.4081%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="20.1581%" y="549" width="0.0791%" height="15" fill="rgb(247,145,37)" fg:x="255" fg:w="1"/><text x="20.4081%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="20.1581%" y="533" width="0.0791%" height="15" fill="rgb(209,117,53)" fg:x="255" fg:w="1"/><text x="20.4081%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="20.1581%" y="517" width="0.0791%" height="15" fill="rgb(212,90,42)" fg:x="255" fg:w="1"/><text x="20.4081%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="20.1581%" y="501" width="0.0791%" height="15" fill="rgb(218,164,37)" fg:x="255" fg:w="1"/><text x="20.4081%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="20.1581%" y="581" width="0.1581%" height="15" fill="rgb(246,65,34)" fg:x="255" fg:w="2"/><text x="20.4081%" y="591.50"></text></g><g><title>kernel::model::EntityPtr::new_from_entity (1 samples, 0.08%)</title><rect x="20.2372%" y="565" width="0.0791%" height="15" fill="rgb(231,100,33)" fg:x="256" fg:w="1"/><text x="20.4872%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (5 samples, 0.40%)</title><rect x="20.0000%" y="597" width="0.3953%" height="15" fill="rgb(228,126,14)" fg:x="253" fg:w="5"/><text x="20.2500%" y="607.50"></text></g><g><title>kernel::model::EntityPtrResolver::world (1 samples, 0.08%)</title><rect x="20.3162%" y="581" width="0.0791%" height="15" fill="rgb(215,173,21)" fg:x="257" fg:w="1"/><text x="20.5662%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.3953%" y="549" width="0.1581%" height="15" fill="rgb(210,6,40)" fg:x="258" fg:w="2"/><text x="20.6453%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.3953%" y="533" width="0.1581%" height="15" fill="rgb(212,48,18)" fg:x="258" fg:w="2"/><text x="20.6453%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="20.3953%" y="517" width="0.1581%" height="15" fill="rgb(230,214,11)" fg:x="258" fg:w="2"/><text x="20.6453%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="20.3953%" y="501" width="0.1581%" height="15" fill="rgb(254,105,39)" fg:x="258" fg:w="2"/><text x="20.6453%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="20.3953%" y="485" width="0.1581%" height="15" fill="rgb(245,158,5)" fg:x="258" fg:w="2"/><text x="20.6453%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="20.3953%" y="469" width="0.1581%" height="15" fill="rgb(249,208,11)" fg:x="258" fg:w="2"/><text x="20.6453%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="20.3953%" y="453" width="0.1581%" height="15" fill="rgb(210,39,28)" fg:x="258" fg:w="2"/><text x="20.6453%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="20.3953%" y="437" width="0.1581%" height="15" fill="rgb(211,56,53)" fg:x="258" fg:w="2"/><text x="20.6453%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="20.3953%" y="421" width="0.1581%" height="15" fill="rgb(226,201,30)" fg:x="258" fg:w="2"/><text x="20.6453%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="20.3953%" y="405" width="0.1581%" height="15" fill="rgb(239,101,34)" fg:x="258" fg:w="2"/><text x="20.6453%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="20.3953%" y="389" width="0.1581%" height="15" fill="rgb(226,209,5)" fg:x="258" fg:w="2"/><text x="20.6453%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="20.3953%" y="373" width="0.1581%" height="15" fill="rgb(250,105,47)" fg:x="258" fg:w="2"/><text x="20.6453%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="20.3953%" y="357" width="0.1581%" height="15" fill="rgb(230,72,3)" fg:x="258" fg:w="2"/><text x="20.6453%" y="367.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="20.3953%" y="341" width="0.1581%" height="15" fill="rgb(232,218,39)" fg:x="258" fg:w="2"/><text x="20.6453%" y="351.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="20.3953%" y="325" width="0.1581%" height="15" fill="rgb(248,166,6)" fg:x="258" fg:w="2"/><text x="20.6453%" y="335.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (12 samples, 0.95%)</title><rect x="19.6838%" y="645" width="0.9486%" height="15" fill="rgb(247,89,20)" fg:x="249" fg:w="12"/><text x="19.9338%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (12 samples, 0.95%)</title><rect x="19.6838%" y="629" width="0.9486%" height="15" fill="rgb(248,130,54)" fg:x="249" fg:w="12"/><text x="19.9338%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (8 samples, 0.63%)</title><rect x="20.0000%" y="613" width="0.6324%" height="15" fill="rgb(234,196,4)" fg:x="253" fg:w="8"/><text x="20.2500%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="20.3953%" y="597" width="0.2372%" height="15" fill="rgb(250,143,31)" fg:x="258" fg:w="3"/><text x="20.6453%" y="607.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="20.3953%" y="581" width="0.2372%" height="15" fill="rgb(211,110,34)" fg:x="258" fg:w="3"/><text x="20.6453%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="20.3953%" y="565" width="0.2372%" height="15" fill="rgb(215,124,48)" fg:x="258" fg:w="3"/><text x="20.6453%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="20.5534%" y="549" width="0.0791%" height="15" fill="rgb(216,46,13)" fg:x="260" fg:w="1"/><text x="20.8034%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.5534%" y="533" width="0.0791%" height="15" fill="rgb(205,184,25)" fg:x="260" fg:w="1"/><text x="20.8034%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="20.5534%" y="517" width="0.0791%" height="15" fill="rgb(228,1,10)" fg:x="260" fg:w="1"/><text x="20.8034%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="20.5534%" y="501" width="0.0791%" height="15" fill="rgb(213,116,27)" fg:x="260" fg:w="1"/><text x="20.8034%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.7115%" y="629" width="0.0791%" height="15" fill="rgb(241,95,50)" fg:x="262" fg:w="1"/><text x="20.9615%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="20.7115%" y="613" width="0.0791%" height="15" fill="rgb(238,48,32)" fg:x="262" fg:w="1"/><text x="20.9615%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="20.7115%" y="597" width="0.0791%" height="15" fill="rgb(235,113,49)" fg:x="262" fg:w="1"/><text x="20.9615%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="20.7115%" y="581" width="0.0791%" height="15" fill="rgb(205,127,43)" fg:x="262" fg:w="1"/><text x="20.9615%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.7115%" y="565" width="0.0791%" height="15" fill="rgb(250,162,2)" fg:x="262" fg:w="1"/><text x="20.9615%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="20.7905%" y="629" width="0.0791%" height="15" fill="rgb(220,13,41)" fg:x="263" fg:w="1"/><text x="21.0405%" y="639.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="20.7905%" y="613" width="0.0791%" height="15" fill="rgb(249,221,25)" fg:x="263" fg:w="1"/><text x="21.0405%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (1 samples, 0.08%)</title><rect x="20.7905%" y="597" width="0.0791%" height="15" fill="rgb(215,208,19)" fg:x="263" fg:w="1"/><text x="21.0405%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="20.7905%" y="581" width="0.0791%" height="15" fill="rgb(236,175,2)" fg:x="263" fg:w="1"/><text x="21.0405%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="20.7905%" y="565" width="0.0791%" height="15" fill="rgb(241,52,2)" fg:x="263" fg:w="1"/><text x="21.0405%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="20.7905%" y="549" width="0.0791%" height="15" fill="rgb(248,140,14)" fg:x="263" fg:w="1"/><text x="21.0405%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.08%)</title><rect x="20.8696%" y="597" width="0.0791%" height="15" fill="rgb(253,22,42)" fg:x="264" fg:w="1"/><text x="21.1196%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="20.8696%" y="581" width="0.0791%" height="15" fill="rgb(234,61,47)" fg:x="264" fg:w="1"/><text x="21.1196%" y="591.50"></text></g><g><title>plugins_core::build::Build::new_world (2 samples, 0.16%)</title><rect x="20.8696%" y="629" width="0.1581%" height="15" fill="rgb(208,226,15)" fg:x="264" fg:w="2"/><text x="21.1196%" y="639.50"></text></g><g><title>&lt;kernel::model::builder::EntityBuilder as core::convert::TryInto&lt;kernel::model::entity::Entity&gt;&gt;::try_into (2 samples, 0.16%)</title><rect x="20.8696%" y="613" width="0.1581%" height="15" fill="rgb(217,221,4)" fg:x="264" fg:w="2"/><text x="21.1196%" y="623.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="20.9486%" y="597" width="0.0791%" height="15" fill="rgb(212,174,34)" fg:x="265" fg:w="1"/><text x="21.1986%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0277%" y="613" width="0.0791%" height="15" fill="rgb(253,83,4)" fg:x="266" fg:w="1"/><text x="21.2777%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="21.0277%" y="597" width="0.0791%" height="15" fill="rgb(250,195,49)" fg:x="266" fg:w="1"/><text x="21.2777%" y="607.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="21.0277%" y="581" width="0.0791%" height="15" fill="rgb(241,192,25)" fg:x="266" fg:w="1"/><text x="21.2777%" y="591.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="21.0277%" y="565" width="0.0791%" height="15" fill="rgb(208,124,10)" fg:x="266" fg:w="1"/><text x="21.2777%" y="575.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="21.0277%" y="549" width="0.0791%" height="15" fill="rgb(222,33,0)" fg:x="266" fg:w="1"/><text x="21.2777%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.0277%" y="533" width="0.0791%" height="15" fill="rgb(234,209,28)" fg:x="266" fg:w="1"/><text x="21.2777%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="21.0277%" y="517" width="0.0791%" height="15" fill="rgb(224,11,23)" fg:x="266" fg:w="1"/><text x="21.2777%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="21.0277%" y="501" width="0.0791%" height="15" fill="rgb(232,99,1)" fg:x="266" fg:w="1"/><text x="21.2777%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="21.0277%" y="485" width="0.0791%" height="15" fill="rgb(237,95,45)" fg:x="266" fg:w="1"/><text x="21.2777%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="21.0277%" y="469" width="0.0791%" height="15" fill="rgb(208,109,11)" fg:x="266" fg:w="1"/><text x="21.2777%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="21.0277%" y="453" width="0.0791%" height="15" fill="rgb(216,190,48)" fg:x="266" fg:w="1"/><text x="21.2777%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="21.2648%" y="517" width="0.0791%" height="15" fill="rgb(251,171,36)" fg:x="269" fg:w="1"/><text x="21.5148%" y="527.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (3 samples, 0.24%)</title><rect x="21.2648%" y="581" width="0.2372%" height="15" fill="rgb(230,62,22)" fg:x="269" fg:w="3"/><text x="21.5148%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (3 samples, 0.24%)</title><rect x="21.2648%" y="565" width="0.2372%" height="15" fill="rgb(225,114,35)" fg:x="269" fg:w="3"/><text x="21.5148%" y="575.50"></text></g><g><title>kernel::model::props::save_props (3 samples, 0.24%)</title><rect x="21.2648%" y="549" width="0.2372%" height="15" fill="rgb(215,118,42)" fg:x="269" fg:w="3"/><text x="21.5148%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Properties&gt;::serialize (3 samples, 0.24%)</title><rect x="21.2648%" y="533" width="0.2372%" height="15" fill="rgb(243,119,21)" fg:x="269" fg:w="3"/><text x="21.5148%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.3439%" y="517" width="0.1581%" height="15" fill="rgb(252,177,53)" fg:x="270" fg:w="2"/><text x="21.5939%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="21.3439%" y="501" width="0.1581%" height="15" fill="rgb(237,209,29)" fg:x="270" fg:w="2"/><text x="21.5939%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::ser::Serialize for kernel::model::props::Property&gt;::serialize (1 samples, 0.08%)</title><rect x="21.4229%" y="485" width="0.0791%" height="15" fill="rgb(212,65,23)" fg:x="271" fg:w="1"/><text x="21.6729%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5020%" y="549" width="0.0791%" height="15" fill="rgb(230,222,46)" fg:x="272" fg:w="1"/><text x="21.7520%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.55%)</title><rect x="21.1067%" y="613" width="0.5534%" height="15" fill="rgb(215,135,32)" fg:x="267" fg:w="7"/><text x="21.3567%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (6 samples, 0.47%)</title><rect x="21.1858%" y="597" width="0.4743%" height="15" fill="rgb(246,101,22)" fg:x="268" fg:w="6"/><text x="21.4358%" y="607.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="21.5020%" y="581" width="0.1581%" height="15" fill="rgb(206,107,13)" fg:x="272" fg:w="2"/><text x="21.7520%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="21.5020%" y="565" width="0.1581%" height="15" fill="rgb(250,100,44)" fg:x="272" fg:w="2"/><text x="21.7520%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="21.5810%" y="549" width="0.0791%" height="15" fill="rgb(231,147,38)" fg:x="273" fg:w="1"/><text x="21.8310%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="21.5810%" y="533" width="0.0791%" height="15" fill="rgb(229,8,40)" fg:x="273" fg:w="1"/><text x="21.8310%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="21.5810%" y="517" width="0.0791%" height="15" fill="rgb(221,135,30)" fg:x="273" fg:w="1"/><text x="21.8310%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="21.6601%" y="613" width="0.1581%" height="15" fill="rgb(249,193,18)" fg:x="274" fg:w="2"/><text x="21.9101%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.8182%" y="597" width="0.0791%" height="15" fill="rgb(209,133,39)" fg:x="276" fg:w="1"/><text x="22.0682%" y="607.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (218 samples, 17.23%)</title><rect x="4.8221%" y="661" width="17.2332%" height="15" fill="rgb(232,100,14)" fg:x="61" fg:w="218"/><text x="5.0721%" y="671.50">&lt;tests::HoldingKeyInVessel ..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (18 samples, 1.42%)</title><rect x="20.6324%" y="645" width="1.4229%" height="15" fill="rgb(224,185,1)" fg:x="261" fg:w="18"/><text x="20.8824%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (13 samples, 1.03%)</title><rect x="21.0277%" y="629" width="1.0277%" height="15" fill="rgb(223,139,8)" fg:x="266" fg:w="13"/><text x="21.2777%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="21.8182%" y="613" width="0.2372%" height="15" fill="rgb(232,213,38)" fg:x="276" fg:w="3"/><text x="22.0682%" y="623.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="21.8972%" y="597" width="0.1581%" height="15" fill="rgb(207,94,22)" fg:x="277" fg:w="2"/><text x="22.1472%" y="607.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="21.8972%" y="581" width="0.1581%" height="15" fill="rgb(219,183,54)" fg:x="277" fg:w="2"/><text x="22.1472%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="21.8972%" y="565" width="0.1581%" height="15" fill="rgb(216,185,54)" fg:x="277" fg:w="2"/><text x="22.1472%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.8972%" y="549" width="0.1581%" height="15" fill="rgb(254,217,39)" fg:x="277" fg:w="2"/><text x="22.1472%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="21.8972%" y="533" width="0.1581%" height="15" fill="rgb(240,178,23)" fg:x="277" fg:w="2"/><text x="22.1472%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="21.8972%" y="517" width="0.1581%" height="15" fill="rgb(218,11,47)" fg:x="277" fg:w="2"/><text x="22.1472%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="21.8972%" y="501" width="0.1581%" height="15" fill="rgb(218,51,51)" fg:x="277" fg:w="2"/><text x="22.1472%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="21.9763%" y="485" width="0.0791%" height="15" fill="rgb(238,126,27)" fg:x="278" fg:w="1"/><text x="22.2263%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="21.9763%" y="469" width="0.0791%" height="15" fill="rgb(249,202,22)" fg:x="278" fg:w="1"/><text x="22.2263%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.0553%" y="661" width="0.0791%" height="15" fill="rgb(254,195,49)" fg:x="279" fg:w="1"/><text x="22.3053%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::domain::Domain&gt; (3 samples, 0.24%)</title><rect x="22.1344%" y="661" width="0.2372%" height="15" fill="rgb(208,123,14)" fg:x="280" fg:w="3"/><text x="22.3844%" y="671.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="22.2134%" y="645" width="0.1581%" height="15" fill="rgb(224,200,8)" fg:x="281" fg:w="2"/><text x="22.4634%" y="655.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="22.2134%" y="629" width="0.1581%" height="15" fill="rgb(217,61,36)" fg:x="281" fg:w="2"/><text x="22.4634%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="22.2925%" y="613" width="0.0791%" height="15" fill="rgb(206,35,45)" fg:x="282" fg:w="1"/><text x="22.5425%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="22.2925%" y="597" width="0.0791%" height="15" fill="rgb(217,65,33)" fg:x="282" fg:w="1"/><text x="22.5425%" y="607.50"></text></g><g><title>&lt;engine::storage::InMemoryStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="22.4506%" y="645" width="0.0791%" height="15" fill="rgb(222,158,48)" fg:x="284" fg:w="1"/><text x="22.7006%" y="655.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="22.4506%" y="629" width="0.0791%" height="15" fill="rgb(254,2,54)" fg:x="284" fg:w="1"/><text x="22.7006%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="22.4506%" y="613" width="0.0791%" height="15" fill="rgb(250,143,38)" fg:x="284" fg:w="1"/><text x="22.7006%" y="623.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="22.5296%" y="645" width="0.0791%" height="15" fill="rgb(248,25,0)" fg:x="285" fg:w="1"/><text x="22.7796%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="22.5296%" y="629" width="0.0791%" height="15" fill="rgb(206,152,27)" fg:x="285" fg:w="1"/><text x="22.7796%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="22.5296%" y="613" width="0.0791%" height="15" fill="rgb(240,77,30)" fg:x="285" fg:w="1"/><text x="22.7796%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="22.5296%" y="597" width="0.0791%" height="15" fill="rgb(231,5,3)" fg:x="285" fg:w="1"/><text x="22.7796%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="22.5296%" y="581" width="0.0791%" height="15" fill="rgb(207,226,32)" fg:x="285" fg:w="1"/><text x="22.7796%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="22.5296%" y="565" width="0.0791%" height="15" fill="rgb(222,207,47)" fg:x="285" fg:w="1"/><text x="22.7796%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="22.5296%" y="549" width="0.0791%" height="15" fill="rgb(229,115,45)" fg:x="285" fg:w="1"/><text x="22.7796%" y="559.50"></text></g><g><title>engine::session::should_force_rollback (2 samples, 0.16%)</title><rect x="22.6087%" y="645" width="0.1581%" height="15" fill="rgb(224,191,6)" fg:x="286" fg:w="2"/><text x="22.8587%" y="655.50"></text></g><g><title>std::env::_var (2 samples, 0.16%)</title><rect x="22.6087%" y="629" width="0.1581%" height="15" fill="rgb(230,227,24)" fg:x="286" fg:w="2"/><text x="22.8587%" y="639.50"></text></g><g><title>std::env::var_os (2 samples, 0.16%)</title><rect x="22.6087%" y="613" width="0.1581%" height="15" fill="rgb(228,80,19)" fg:x="286" fg:w="2"/><text x="22.8587%" y="623.50"></text></g><g><title>std::env::_var_os (2 samples, 0.16%)</title><rect x="22.6087%" y="597" width="0.1581%" height="15" fill="rgb(247,229,0)" fg:x="286" fg:w="2"/><text x="22.8587%" y="607.50"></text></g><g><title>std::sys::unix::os::getenv (2 samples, 0.16%)</title><rect x="22.6087%" y="581" width="0.1581%" height="15" fill="rgb(237,194,15)" fg:x="286" fg:w="2"/><text x="22.8587%" y="591.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.16%)</title><rect x="22.6087%" y="565" width="0.1581%" height="15" fill="rgb(219,203,20)" fg:x="286" fg:w="2"/><text x="22.8587%" y="575.50"></text></g><g><title>std::sys::unix::os::getenv::{{closure}} (2 samples, 0.16%)</title><rect x="22.6087%" y="549" width="0.1581%" height="15" fill="rgb(234,128,8)" fg:x="286" fg:w="2"/><text x="22.8587%" y="559.50"></text></g><g><title>getenv (2 samples, 0.16%)</title><rect x="22.6087%" y="533" width="0.1581%" height="15" fill="rgb(248,202,8)" fg:x="286" fg:w="2"/><text x="22.8587%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="22.8458%" y="581" width="0.0791%" height="15" fill="rgb(206,104,37)" fg:x="289" fg:w="1"/><text x="23.0958%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="22.8458%" y="565" width="0.0791%" height="15" fill="rgb(223,8,27)" fg:x="289" fg:w="1"/><text x="23.0958%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="22.8458%" y="549" width="0.0791%" height="15" fill="rgb(216,217,28)" fg:x="289" fg:w="1"/><text x="23.0958%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (5 samples, 0.40%)</title><rect x="22.9249%" y="549" width="0.3953%" height="15" fill="rgb(249,199,1)" fg:x="290" fg:w="5"/><text x="23.1749%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (5 samples, 0.40%)</title><rect x="22.9249%" y="533" width="0.3953%" height="15" fill="rgb(240,85,17)" fg:x="290" fg:w="5"/><text x="23.1749%" y="543.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="23.0040%" y="517" width="0.3162%" height="15" fill="rgb(206,108,45)" fg:x="291" fg:w="4"/><text x="23.2540%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="23.0830%" y="501" width="0.2372%" height="15" fill="rgb(245,210,41)" fg:x="292" fg:w="3"/><text x="23.3330%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.1621%" y="485" width="0.1581%" height="15" fill="rgb(206,13,37)" fg:x="293" fg:w="2"/><text x="23.4121%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="23.2411%" y="469" width="0.0791%" height="15" fill="rgb(250,61,18)" fg:x="294" fg:w="1"/><text x="23.4911%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="23.2411%" y="453" width="0.0791%" height="15" fill="rgb(235,172,48)" fg:x="294" fg:w="1"/><text x="23.4911%" y="463.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="23.2411%" y="437" width="0.0791%" height="15" fill="rgb(249,201,17)" fg:x="294" fg:w="1"/><text x="23.4911%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.3202%" y="533" width="0.1581%" height="15" fill="rgb(219,208,6)" fg:x="295" fg:w="2"/><text x="23.5702%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.3992%" y="517" width="0.0791%" height="15" fill="rgb(248,31,23)" fg:x="296" fg:w="1"/><text x="23.6492%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="23.5573%" y="517" width="0.0791%" height="15" fill="rgb(245,15,42)" fg:x="298" fg:w="1"/><text x="23.8073%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.5573%" y="501" width="0.0791%" height="15" fill="rgb(222,217,39)" fg:x="298" fg:w="1"/><text x="23.8073%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="23.5573%" y="485" width="0.0791%" height="15" fill="rgb(210,219,27)" fg:x="298" fg:w="1"/><text x="23.8073%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="23.5573%" y="469" width="0.0791%" height="15" fill="rgb(252,166,36)" fg:x="298" fg:w="1"/><text x="23.8073%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="23.5573%" y="453" width="0.0791%" height="15" fill="rgb(245,132,34)" fg:x="298" fg:w="1"/><text x="23.8073%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="23.6364%" y="517" width="0.1581%" height="15" fill="rgb(236,54,3)" fg:x="299" fg:w="2"/><text x="23.8864%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="23.6364%" y="501" width="0.1581%" height="15" fill="rgb(241,173,43)" fg:x="299" fg:w="2"/><text x="23.8864%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="23.6364%" y="485" width="0.1581%" height="15" fill="rgb(215,190,9)" fg:x="299" fg:w="2"/><text x="23.8864%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="23.6364%" y="469" width="0.1581%" height="15" fill="rgb(242,101,16)" fg:x="299" fg:w="2"/><text x="23.8864%" y="479.50"></text></g><g><title>ryu::pretty::format64 (1 samples, 0.08%)</title><rect x="23.7945%" y="501" width="0.0791%" height="15" fill="rgb(223,190,21)" fg:x="301" fg:w="1"/><text x="24.0445%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.32%)</title><rect x="23.8735%" y="501" width="0.3162%" height="15" fill="rgb(215,228,25)" fg:x="302" fg:w="4"/><text x="24.1235%" y="511.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.24%)</title><rect x="23.9526%" y="485" width="0.2372%" height="15" fill="rgb(225,36,22)" fg:x="303" fg:w="3"/><text x="24.2026%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="24.0316%" y="469" width="0.1581%" height="15" fill="rgb(251,106,46)" fg:x="304" fg:w="2"/><text x="24.2816%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.0316%" y="453" width="0.1581%" height="15" fill="rgb(208,90,1)" fg:x="304" fg:w="2"/><text x="24.2816%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="24.0316%" y="437" width="0.1581%" height="15" fill="rgb(243,10,4)" fg:x="304" fg:w="2"/><text x="24.2816%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="24.0316%" y="421" width="0.1581%" height="15" fill="rgb(212,137,27)" fg:x="304" fg:w="2"/><text x="24.2816%" y="431.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="24.0316%" y="405" width="0.1581%" height="15" fill="rgb(231,220,49)" fg:x="304" fg:w="2"/><text x="24.2816%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="24.2688%" y="485" width="0.0791%" height="15" fill="rgb(237,96,20)" fg:x="307" fg:w="1"/><text x="24.5188%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.2688%" y="469" width="0.0791%" height="15" fill="rgb(239,229,30)" fg:x="307" fg:w="1"/><text x="24.5188%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.2688%" y="453" width="0.0791%" height="15" fill="rgb(219,65,33)" fg:x="307" fg:w="1"/><text x="24.5188%" y="463.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.2688%" y="437" width="0.0791%" height="15" fill="rgb(243,134,7)" fg:x="307" fg:w="1"/><text x="24.5188%" y="447.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="24.3478%" y="485" width="0.1581%" height="15" fill="rgb(216,177,54)" fg:x="308" fg:w="2"/><text x="24.5978%" y="495.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="24.3478%" y="469" width="0.1581%" height="15" fill="rgb(211,160,20)" fg:x="308" fg:w="2"/><text x="24.5978%" y="479.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.4269%" y="453" width="0.0791%" height="15" fill="rgb(239,85,39)" fg:x="309" fg:w="1"/><text x="24.6769%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.79%)</title><rect x="23.7945%" y="517" width="0.7905%" height="15" fill="rgb(232,125,22)" fg:x="301" fg:w="10"/><text x="24.0445%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="24.1897%" y="501" width="0.3953%" height="15" fill="rgb(244,57,34)" fg:x="306" fg:w="5"/><text x="24.4397%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.5059%" y="485" width="0.0791%" height="15" fill="rgb(214,203,32)" fg:x="310" fg:w="1"/><text x="24.7559%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="24.5059%" y="469" width="0.0791%" height="15" fill="rgb(207,58,43)" fg:x="310" fg:w="1"/><text x="24.7559%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="24.5059%" y="453" width="0.0791%" height="15" fill="rgb(215,193,15)" fg:x="310" fg:w="1"/><text x="24.7559%" y="463.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (15 samples, 1.19%)</title><rect x="23.4783%" y="533" width="1.1858%" height="15" fill="rgb(232,15,44)" fg:x="297" fg:w="15"/><text x="23.7283%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="24.5850%" y="517" width="0.0791%" height="15" fill="rgb(212,3,48)" fg:x="311" fg:w="1"/><text x="24.8350%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="24.7431%" y="501" width="0.1581%" height="15" fill="rgb(218,128,7)" fg:x="313" fg:w="2"/><text x="24.9931%" y="511.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (26 samples, 2.06%)</title><rect x="22.9249%" y="565" width="2.0553%" height="15" fill="rgb(226,216,39)" fg:x="290" fg:w="26"/><text x="23.1749%" y="575.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (21 samples, 1.66%)</title><rect x="23.3202%" y="549" width="1.6601%" height="15" fill="rgb(243,47,51)" fg:x="295" fg:w="21"/><text x="23.5702%" y="559.50"></text></g><g><title>std::io::Write::write_all (4 samples, 0.32%)</title><rect x="24.6640%" y="533" width="0.3162%" height="15" fill="rgb(241,183,40)" fg:x="312" fg:w="4"/><text x="24.9140%" y="543.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (3 samples, 0.24%)</title><rect x="24.7431%" y="517" width="0.2372%" height="15" fill="rgb(231,217,32)" fg:x="313" fg:w="3"/><text x="24.9931%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_str (1 samples, 0.08%)</title><rect x="24.9012%" y="501" width="0.0791%" height="15" fill="rgb(229,61,38)" fg:x="315" fg:w="1"/><text x="25.1512%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="24.9802%" y="517" width="0.0791%" height="15" fill="rgb(225,210,5)" fg:x="316" fg:w="1"/><text x="25.2302%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.0593%" y="501" width="0.0791%" height="15" fill="rgb(231,79,45)" fg:x="317" fg:w="1"/><text x="25.3093%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.0593%" y="485" width="0.0791%" height="15" fill="rgb(224,100,7)" fg:x="317" fg:w="1"/><text x="25.3093%" y="495.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.1383%" y="485" width="0.1581%" height="15" fill="rgb(241,198,18)" fg:x="318" fg:w="2"/><text x="25.3883%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="25.2964%" y="485" width="0.0791%" height="15" fill="rgb(252,97,53)" fg:x="320" fg:w="1"/><text x="25.5464%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="25.3755%" y="485" width="0.0791%" height="15" fill="rgb(220,88,7)" fg:x="321" fg:w="1"/><text x="25.6255%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="24.9802%" y="565" width="0.7115%" height="15" fill="rgb(213,176,14)" fg:x="316" fg:w="9"/><text x="25.2302%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (9 samples, 0.71%)</title><rect x="24.9802%" y="549" width="0.7115%" height="15" fill="rgb(246,73,7)" fg:x="316" fg:w="9"/><text x="25.2302%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="24.9802%" y="533" width="0.7115%" height="15" fill="rgb(245,64,36)" fg:x="316" fg:w="9"/><text x="25.2302%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (8 samples, 0.63%)</title><rect x="25.0593%" y="517" width="0.6324%" height="15" fill="rgb(245,80,10)" fg:x="317" fg:w="8"/><text x="25.3093%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="25.1383%" y="501" width="0.5534%" height="15" fill="rgb(232,107,50)" fg:x="318" fg:w="7"/><text x="25.3883%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="25.4545%" y="485" width="0.2372%" height="15" fill="rgb(253,3,0)" fg:x="322" fg:w="3"/><text x="25.7045%" y="495.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="25.4545%" y="469" width="0.2372%" height="15" fill="rgb(212,99,53)" fg:x="322" fg:w="3"/><text x="25.7045%" y="479.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="25.6917%" y="501" width="0.1581%" height="15" fill="rgb(249,111,54)" fg:x="325" fg:w="2"/><text x="25.9417%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="25.9289%" y="485" width="0.0791%" height="15" fill="rgb(249,55,30)" fg:x="328" fg:w="1"/><text x="26.1789%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.0870%" y="469" width="0.0791%" height="15" fill="rgb(237,47,42)" fg:x="330" fg:w="1"/><text x="26.3370%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.1660%" y="469" width="0.0791%" height="15" fill="rgb(211,20,18)" fg:x="331" fg:w="1"/><text x="26.4160%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="26.2451%" y="453" width="0.1581%" height="15" fill="rgb(231,203,46)" fg:x="332" fg:w="2"/><text x="26.4951%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.4032%" y="421" width="0.0791%" height="15" fill="rgb(237,142,3)" fg:x="334" fg:w="1"/><text x="26.6532%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (2 samples, 0.16%)</title><rect x="26.4032%" y="453" width="0.1581%" height="15" fill="rgb(241,107,1)" fg:x="334" fg:w="2"/><text x="26.6532%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="26.4032%" y="437" width="0.1581%" height="15" fill="rgb(229,83,13)" fg:x="334" fg:w="2"/><text x="26.6532%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.4822%" y="421" width="0.0791%" height="15" fill="rgb(241,91,40)" fg:x="335" fg:w="1"/><text x="26.7322%" y="431.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.4822%" y="405" width="0.0791%" height="15" fill="rgb(225,3,45)" fg:x="335" fg:w="1"/><text x="26.7322%" y="415.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.5613%" y="437" width="0.0791%" height="15" fill="rgb(244,223,14)" fg:x="336" fg:w="1"/><text x="26.8113%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (13 samples, 1.03%)</title><rect x="25.6917%" y="533" width="1.0277%" height="15" fill="rgb(224,124,37)" fg:x="325" fg:w="13"/><text x="25.9417%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (13 samples, 1.03%)</title><rect x="25.6917%" y="517" width="1.0277%" height="15" fill="rgb(251,171,30)" fg:x="325" fg:w="13"/><text x="25.9417%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.87%)</title><rect x="25.8498%" y="501" width="0.8696%" height="15" fill="rgb(236,46,54)" fg:x="327" fg:w="11"/><text x="26.0998%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.71%)</title><rect x="26.0079%" y="485" width="0.7115%" height="15" fill="rgb(245,213,5)" fg:x="329" fg:w="9"/><text x="26.2579%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="26.2451%" y="469" width="0.4743%" height="15" fill="rgb(230,144,27)" fg:x="332" fg:w="6"/><text x="26.4951%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="26.5613%" y="453" width="0.1581%" height="15" fill="rgb(220,86,6)" fg:x="336" fg:w="2"/><text x="26.8113%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="26.6403%" y="437" width="0.0791%" height="15" fill="rgb(240,20,13)" fg:x="337" fg:w="1"/><text x="26.8903%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="26.6403%" y="421" width="0.0791%" height="15" fill="rgb(217,89,34)" fg:x="337" fg:w="1"/><text x="26.8903%" y="431.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="26.8775%" y="469" width="0.0791%" height="15" fill="rgb(229,13,5)" fg:x="340" fg:w="1"/><text x="27.1275%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="26.8775%" y="453" width="0.0791%" height="15" fill="rgb(244,67,35)" fg:x="340" fg:w="1"/><text x="27.1275%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.40%)</title><rect x="26.7194%" y="501" width="0.3953%" height="15" fill="rgb(221,40,2)" fg:x="338" fg:w="5"/><text x="26.9694%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="26.8775%" y="485" width="0.2372%" height="15" fill="rgb(237,157,21)" fg:x="340" fg:w="3"/><text x="27.1275%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="26.9565%" y="469" width="0.1581%" height="15" fill="rgb(222,94,11)" fg:x="341" fg:w="2"/><text x="27.2065%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.16%)</title><rect x="26.9565%" y="453" width="0.1581%" height="15" fill="rgb(249,113,6)" fg:x="341" fg:w="2"/><text x="27.2065%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="26.9565%" y="437" width="0.1581%" height="15" fill="rgb(238,137,36)" fg:x="341" fg:w="2"/><text x="27.2065%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.47%)</title><rect x="26.7194%" y="517" width="0.4743%" height="15" fill="rgb(210,102,26)" fg:x="338" fg:w="6"/><text x="26.9694%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="27.1146%" y="501" width="0.0791%" height="15" fill="rgb(218,30,30)" fg:x="343" fg:w="1"/><text x="27.3646%" y="511.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (20 samples, 1.58%)</title><rect x="25.6917%" y="549" width="1.5810%" height="15" fill="rgb(214,67,26)" fg:x="325" fg:w="20"/><text x="25.9417%" y="559.50"></text></g><g><title>treediff::diff::diff (7 samples, 0.55%)</title><rect x="26.7194%" y="533" width="0.5534%" height="15" fill="rgb(251,9,53)" fg:x="338" fg:w="7"/><text x="26.9694%" y="543.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="27.1937%" y="517" width="0.0791%" height="15" fill="rgb(228,204,25)" fg:x="344" fg:w="1"/><text x="27.4437%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.32%)</title><rect x="27.4308%" y="517" width="0.3162%" height="15" fill="rgb(207,153,8)" fg:x="347" fg:w="4"/><text x="27.6808%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="27.5889%" y="501" width="0.1581%" height="15" fill="rgb(242,9,16)" fg:x="349" fg:w="2"/><text x="27.8389%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.16%)</title><rect x="27.5889%" y="485" width="0.1581%" height="15" fill="rgb(217,211,10)" fg:x="349" fg:w="2"/><text x="27.8389%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="27.8261%" y="485" width="0.0791%" height="15" fill="rgb(219,228,52)" fg:x="352" fg:w="1"/><text x="28.0761%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (4 samples, 0.32%)</title><rect x="27.7470%" y="517" width="0.3162%" height="15" fill="rgb(231,92,29)" fg:x="351" fg:w="4"/><text x="27.9970%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="27.7470%" y="501" width="0.3162%" height="15" fill="rgb(232,8,23)" fg:x="351" fg:w="4"/><text x="27.9970%" y="511.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="27.9051%" y="485" width="0.1581%" height="15" fill="rgb(216,211,34)" fg:x="353" fg:w="2"/><text x="28.1551%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="27.9842%" y="469" width="0.0791%" height="15" fill="rgb(236,151,0)" fg:x="354" fg:w="1"/><text x="28.2342%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::EntityClass&gt;::serialize (2 samples, 0.16%)</title><rect x="28.0632%" y="517" width="0.1581%" height="15" fill="rgb(209,168,3)" fg:x="355" fg:w="2"/><text x="28.3132%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="28.1423%" y="501" width="0.0791%" height="15" fill="rgb(208,129,28)" fg:x="356" fg:w="1"/><text x="28.3923%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1423%" y="485" width="0.0791%" height="15" fill="rgb(229,78,22)" fg:x="356" fg:w="1"/><text x="28.3923%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.1423%" y="469" width="0.0791%" height="15" fill="rgb(228,187,13)" fg:x="356" fg:w="1"/><text x="28.3923%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.1423%" y="453" width="0.0791%" height="15" fill="rgb(240,119,24)" fg:x="356" fg:w="1"/><text x="28.3923%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.2213%" y="485" width="0.0791%" height="15" fill="rgb(209,194,42)" fg:x="357" fg:w="1"/><text x="28.4713%" y="495.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (2 samples, 0.16%)</title><rect x="28.2213%" y="517" width="0.1581%" height="15" fill="rgb(247,200,46)" fg:x="357" fg:w="2"/><text x="28.4713%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="28.2213%" y="501" width="0.1581%" height="15" fill="rgb(218,76,16)" fg:x="357" fg:w="2"/><text x="28.4713%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3004%" y="485" width="0.0791%" height="15" fill="rgb(225,21,48)" fg:x="358" fg:w="1"/><text x="28.5504%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.3004%" y="469" width="0.0791%" height="15" fill="rgb(239,223,50)" fg:x="358" fg:w="1"/><text x="28.5504%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3004%" y="453" width="0.0791%" height="15" fill="rgb(244,45,21)" fg:x="358" fg:w="1"/><text x="28.5504%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="28.5375%" y="485" width="0.0791%" height="15" fill="rgb(232,33,43)" fg:x="361" fg:w="1"/><text x="28.7875%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="28.6166%" y="469" width="0.1581%" height="15" fill="rgb(209,8,3)" fg:x="362" fg:w="2"/><text x="28.8666%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.6957%" y="453" width="0.0791%" height="15" fill="rgb(214,25,53)" fg:x="363" fg:w="1"/><text x="28.9457%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.6957%" y="437" width="0.0791%" height="15" fill="rgb(254,186,54)" fg:x="363" fg:w="1"/><text x="28.9457%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.08%)</title><rect x="28.7747%" y="453" width="0.0791%" height="15" fill="rgb(208,174,49)" fg:x="364" fg:w="1"/><text x="29.0247%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.7747%" y="437" width="0.0791%" height="15" fill="rgb(233,191,51)" fg:x="364" fg:w="1"/><text x="29.0247%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.8538%" y="421" width="0.0791%" height="15" fill="rgb(222,134,10)" fg:x="365" fg:w="1"/><text x="29.1038%" y="431.50"></text></g><g><title>serde::ser::Serializer::collect_seq (3 samples, 0.24%)</title><rect x="28.7747%" y="469" width="0.2372%" height="15" fill="rgb(230,226,20)" fg:x="364" fg:w="3"/><text x="29.0247%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="28.8538%" y="453" width="0.1581%" height="15" fill="rgb(251,111,25)" fg:x="365" fg:w="2"/><text x="29.1038%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="28.8538%" y="437" width="0.1581%" height="15" fill="rgb(224,40,46)" fg:x="365" fg:w="2"/><text x="29.1038%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.9328%" y="421" width="0.0791%" height="15" fill="rgb(236,108,47)" fg:x="366" fg:w="1"/><text x="29.1828%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.9328%" y="405" width="0.0791%" height="15" fill="rgb(234,93,0)" fg:x="366" fg:w="1"/><text x="29.1828%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="28.9328%" y="389" width="0.0791%" height="15" fill="rgb(224,213,32)" fg:x="366" fg:w="1"/><text x="29.1828%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="28.9328%" y="373" width="0.0791%" height="15" fill="rgb(251,11,48)" fg:x="366" fg:w="1"/><text x="29.1828%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9328%" y="357" width="0.0791%" height="15" fill="rgb(236,173,5)" fg:x="366" fg:w="1"/><text x="29.1828%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="28.9328%" y="341" width="0.0791%" height="15" fill="rgb(230,95,12)" fg:x="366" fg:w="1"/><text x="29.1828%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="29.4071%" y="421" width="0.0791%" height="15" fill="rgb(232,209,1)" fg:x="372" fg:w="1"/><text x="29.6571%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.4862%" y="373" width="0.0791%" height="15" fill="rgb(232,6,1)" fg:x="373" fg:w="1"/><text x="29.7362%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.55%)</title><rect x="29.0909%" y="453" width="0.5534%" height="15" fill="rgb(210,224,50)" fg:x="368" fg:w="7"/><text x="29.3409%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.47%)</title><rect x="29.1700%" y="437" width="0.4743%" height="15" fill="rgb(228,127,35)" fg:x="369" fg:w="6"/><text x="29.4200%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="29.4862%" y="421" width="0.1581%" height="15" fill="rgb(245,102,45)" fg:x="373" fg:w="2"/><text x="29.7362%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.4862%" y="405" width="0.1581%" height="15" fill="rgb(214,1,49)" fg:x="373" fg:w="2"/><text x="29.7362%" y="415.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.4862%" y="389" width="0.1581%" height="15" fill="rgb(226,163,40)" fg:x="373" fg:w="2"/><text x="29.7362%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="29.5652%" y="373" width="0.0791%" height="15" fill="rgb(239,212,28)" fg:x="374" fg:w="1"/><text x="29.8152%" y="383.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (14 samples, 1.11%)</title><rect x="28.6166%" y="485" width="1.1067%" height="15" fill="rgb(220,20,13)" fg:x="362" fg:w="14"/><text x="28.8666%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (9 samples, 0.71%)</title><rect x="29.0119%" y="469" width="0.7115%" height="15" fill="rgb(210,164,35)" fg:x="367" fg:w="9"/><text x="29.2619%" y="479.50"></text></g><g><title>serde_json::value::from::&lt;impl core::convert::From&lt;f64&gt; for serde_json::value::Value&gt;::from (1 samples, 0.08%)</title><rect x="29.6443%" y="453" width="0.0791%" height="15" fill="rgb(248,109,41)" fg:x="375" fg:w="1"/><text x="29.8943%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (18 samples, 1.42%)</title><rect x="28.4585%" y="501" width="1.4229%" height="15" fill="rgb(238,23,50)" fg:x="360" fg:w="18"/><text x="28.7085%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="29.7233%" y="485" width="0.1581%" height="15" fill="rgb(211,48,49)" fg:x="376" fg:w="2"/><text x="29.9733%" y="495.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="29.7233%" y="469" width="0.1581%" height="15" fill="rgb(223,36,21)" fg:x="376" fg:w="2"/><text x="29.9733%" y="479.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (35 samples, 2.77%)</title><rect x="27.2727%" y="549" width="2.7668%" height="15" fill="rgb(207,123,46)" fg:x="345" fg:w="35"/><text x="27.5227%" y="559.50">ke..</text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (34 samples, 2.69%)</title><rect x="27.3518%" y="533" width="2.6877%" height="15" fill="rgb(240,218,32)" fg:x="346" fg:w="34"/><text x="27.6018%" y="543.50">&lt;s..</text></g><g><title>serde::ser::Serializer::collect_map (21 samples, 1.66%)</title><rect x="28.3794%" y="517" width="1.6601%" height="15" fill="rgb(252,5,43)" fg:x="359" fg:w="21"/><text x="28.6294%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.8814%" y="501" width="0.1581%" height="15" fill="rgb(252,84,19)" fg:x="378" fg:w="2"/><text x="30.1314%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="29.8814%" y="485" width="0.1581%" height="15" fill="rgb(243,152,39)" fg:x="378" fg:w="2"/><text x="30.1314%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.9605%" y="469" width="0.0791%" height="15" fill="rgb(234,160,15)" fg:x="379" fg:w="1"/><text x="30.2105%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.0395%" y="469" width="0.0791%" height="15" fill="rgb(237,34,20)" fg:x="380" fg:w="1"/><text x="30.2895%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="30.1976%" y="357" width="0.0791%" height="15" fill="rgb(229,97,13)" fg:x="382" fg:w="1"/><text x="30.4476%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.1976%" y="341" width="0.0791%" height="15" fill="rgb(234,71,50)" fg:x="382" fg:w="1"/><text x="30.4476%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.1976%" y="325" width="0.0791%" height="15" fill="rgb(253,155,4)" fg:x="382" fg:w="1"/><text x="30.4476%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.1976%" y="373" width="0.1581%" height="15" fill="rgb(222,185,37)" fg:x="382" fg:w="2"/><text x="30.4476%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.2767%" y="357" width="0.0791%" height="15" fill="rgb(251,177,13)" fg:x="383" fg:w="1"/><text x="30.5267%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.3557%" y="373" width="0.0791%" height="15" fill="rgb(250,179,40)" fg:x="384" fg:w="1"/><text x="30.6057%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.3557%" y="357" width="0.0791%" height="15" fill="rgb(242,44,2)" fg:x="384" fg:w="1"/><text x="30.6057%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="30.1976%" y="405" width="0.3162%" height="15" fill="rgb(216,177,13)" fg:x="382" fg:w="4"/><text x="30.4476%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="30.1976%" y="389" width="0.3162%" height="15" fill="rgb(216,106,43)" fg:x="382" fg:w="4"/><text x="30.4476%" y="399.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4348%" y="373" width="0.0791%" height="15" fill="rgb(216,183,2)" fg:x="385" fg:w="1"/><text x="30.6848%" y="383.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.4348%" y="357" width="0.0791%" height="15" fill="rgb(249,75,3)" fg:x="385" fg:w="1"/><text x="30.6848%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4348%" y="341" width="0.0791%" height="15" fill="rgb(219,67,39)" fg:x="385" fg:w="1"/><text x="30.6848%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="30.5138%" y="389" width="0.1581%" height="15" fill="rgb(253,228,2)" fg:x="386" fg:w="2"/><text x="30.7638%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="30.5138%" y="373" width="0.1581%" height="15" fill="rgb(235,138,27)" fg:x="386" fg:w="2"/><text x="30.7638%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5929%" y="357" width="0.0791%" height="15" fill="rgb(236,97,51)" fg:x="387" fg:w="1"/><text x="30.8429%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.5929%" y="341" width="0.0791%" height="15" fill="rgb(240,80,30)" fg:x="387" fg:w="1"/><text x="30.8429%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.5929%" y="325" width="0.0791%" height="15" fill="rgb(230,178,19)" fg:x="387" fg:w="1"/><text x="30.8429%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="30.1976%" y="421" width="0.5534%" height="15" fill="rgb(210,190,27)" fg:x="382" fg:w="7"/><text x="30.4476%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="30.5138%" y="405" width="0.2372%" height="15" fill="rgb(222,107,31)" fg:x="386" fg:w="3"/><text x="30.7638%" y="415.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="30.6719%" y="389" width="0.0791%" height="15" fill="rgb(216,127,34)" fg:x="388" fg:w="1"/><text x="30.9219%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.6719%" y="373" width="0.0791%" height="15" fill="rgb(234,116,52)" fg:x="388" fg:w="1"/><text x="30.9219%" y="383.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="30.1976%" y="453" width="0.6324%" height="15" fill="rgb(222,124,15)" fg:x="382" fg:w="8"/><text x="30.4476%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="30.1976%" y="437" width="0.6324%" height="15" fill="rgb(231,179,28)" fg:x="382" fg:w="8"/><text x="30.4476%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.7510%" y="421" width="0.0791%" height="15" fill="rgb(226,93,45)" fg:x="389" fg:w="1"/><text x="31.0010%" y="431.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.7510%" y="405" width="0.0791%" height="15" fill="rgb(215,8,51)" fg:x="389" fg:w="1"/><text x="31.0010%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="30.7510%" y="389" width="0.0791%" height="15" fill="rgb(223,106,5)" fg:x="389" fg:w="1"/><text x="31.0010%" y="399.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="30.8300%" y="437" width="0.0791%" height="15" fill="rgb(250,191,5)" fg:x="390" fg:w="1"/><text x="31.0800%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="30.8300%" y="453" width="0.1581%" height="15" fill="rgb(242,132,44)" fg:x="390" fg:w="2"/><text x="31.0800%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.9091%" y="437" width="0.0791%" height="15" fill="rgb(251,152,29)" fg:x="391" fg:w="1"/><text x="31.1591%" y="447.50"></text></g><g><title>engine::session::state::State::close (105 samples, 8.30%)</title><rect x="22.7668%" y="645" width="8.3004%" height="15" fill="rgb(218,179,5)" fg:x="288" fg:w="105"/><text x="23.0168%" y="655.50">engine::sess..</text></g><g><title>engine::session::state::State::flush_entities (105 samples, 8.30%)</title><rect x="22.7668%" y="629" width="8.3004%" height="15" fill="rgb(227,67,19)" fg:x="288" fg:w="105"/><text x="23.0168%" y="639.50">engine::sess..</text></g><g><title>core::iter::adapters::try_process (104 samples, 8.22%)</title><rect x="22.8458%" y="613" width="8.2213%" height="15" fill="rgb(233,119,31)" fg:x="289" fg:w="104"/><text x="23.0958%" y="623.50">core::iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (104 samples, 8.22%)</title><rect x="22.8458%" y="597" width="8.2213%" height="15" fill="rgb(241,120,22)" fg:x="289" fg:w="104"/><text x="23.0958%" y="607.50">&lt;alloc::vec..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (103 samples, 8.14%)</title><rect x="22.9249%" y="581" width="8.1423%" height="15" fill="rgb(224,102,30)" fg:x="290" fg:w="103"/><text x="23.1749%" y="591.50">engine::ses..</text></g><g><title>kernel::model::any_entity_changes (68 samples, 5.38%)</title><rect x="25.6917%" y="565" width="5.3755%" height="15" fill="rgb(210,164,37)" fg:x="325" fg:w="68"/><text x="25.9417%" y="575.50">kernel:..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (13 samples, 1.03%)</title><rect x="30.0395%" y="549" width="1.0277%" height="15" fill="rgb(226,191,16)" fg:x="380" fg:w="13"/><text x="30.2895%" y="559.50"></text></g><g><title>serde_json::de::from_trait (13 samples, 1.03%)</title><rect x="30.0395%" y="533" width="1.0277%" height="15" fill="rgb(214,40,45)" fg:x="380" fg:w="13"/><text x="30.2895%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.03%)</title><rect x="30.0395%" y="517" width="1.0277%" height="15" fill="rgb(244,29,26)" fg:x="380" fg:w="13"/><text x="30.2895%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (13 samples, 1.03%)</title><rect x="30.0395%" y="501" width="1.0277%" height="15" fill="rgb(216,16,5)" fg:x="380" fg:w="13"/><text x="30.2895%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (13 samples, 1.03%)</title><rect x="30.0395%" y="485" width="1.0277%" height="15" fill="rgb(249,76,35)" fg:x="380" fg:w="13"/><text x="30.2895%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (12 samples, 0.95%)</title><rect x="30.1186%" y="469" width="0.9486%" height="15" fill="rgb(207,11,44)" fg:x="381" fg:w="12"/><text x="30.3686%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="30.9881%" y="453" width="0.0791%" height="15" fill="rgb(228,190,49)" fg:x="392" fg:w="1"/><text x="31.2381%" y="463.50"></text></g><g><title>kernel::plugins::SessionPlugins::stop (1 samples, 0.08%)</title><rect x="31.0672%" y="645" width="0.0791%" height="15" fill="rgb(214,173,12)" fg:x="393" fg:w="1"/><text x="31.3172%" y="655.50"></text></g><g><title>engine::session::Session::close (113 samples, 8.93%)</title><rect x="22.3715%" y="661" width="8.9328%" height="15" fill="rgb(218,26,35)" fg:x="283" fg:w="113"/><text x="22.6215%" y="671.50">engine::sessi..</text></g><g><title>std::time::Instant::elapsed (2 samples, 0.16%)</title><rect x="31.1462%" y="645" width="0.1581%" height="15" fill="rgb(220,200,19)" fg:x="394" fg:w="2"/><text x="31.3962%" y="655.50"></text></g><g><title>std::time::Instant::now (2 samples, 0.16%)</title><rect x="31.1462%" y="629" width="0.1581%" height="15" fill="rgb(239,95,49)" fg:x="394" fg:w="2"/><text x="31.3962%" y="639.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (2 samples, 0.16%)</title><rect x="31.1462%" y="613" width="0.1581%" height="15" fill="rgb(235,85,53)" fg:x="394" fg:w="2"/><text x="31.3962%" y="623.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="31.2253%" y="597" width="0.0791%" height="15" fill="rgb(233,133,31)" fg:x="395" fg:w="1"/><text x="31.4753%" y="607.50"></text></g><g><title>clock_getres (1 samples, 0.08%)</title><rect x="31.2253%" y="581" width="0.0791%" height="15" fill="rgb(218,25,20)" fg:x="395" fg:w="1"/><text x="31.4753%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.3834%" y="517" width="0.2372%" height="15" fill="rgb(252,210,38)" fg:x="397" fg:w="3"/><text x="31.6334%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="31.3834%" y="501" width="0.2372%" height="15" fill="rgb(242,134,21)" fg:x="397" fg:w="3"/><text x="31.6334%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="31.3834%" y="485" width="0.2372%" height="15" fill="rgb(213,28,48)" fg:x="397" fg:w="3"/><text x="31.6334%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="31.3834%" y="469" width="0.2372%" height="15" fill="rgb(250,196,2)" fg:x="397" fg:w="3"/><text x="31.6334%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="31.3834%" y="453" width="0.2372%" height="15" fill="rgb(227,5,17)" fg:x="397" fg:w="3"/><text x="31.6334%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="31.3834%" y="437" width="0.2372%" height="15" fill="rgb(221,226,24)" fg:x="397" fg:w="3"/><text x="31.6334%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="31.3834%" y="421" width="0.2372%" height="15" fill="rgb(211,5,48)" fg:x="397" fg:w="3"/><text x="31.6334%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="31.3834%" y="405" width="0.2372%" height="15" fill="rgb(219,150,6)" fg:x="397" fg:w="3"/><text x="31.6334%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="31.3834%" y="389" width="0.2372%" height="15" fill="rgb(251,46,16)" fg:x="397" fg:w="3"/><text x="31.6334%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="31.3834%" y="373" width="0.2372%" height="15" fill="rgb(220,204,40)" fg:x="397" fg:w="3"/><text x="31.6334%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="31.3834%" y="357" width="0.2372%" height="15" fill="rgb(211,85,2)" fg:x="397" fg:w="3"/><text x="31.6334%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="31.3834%" y="341" width="0.2372%" height="15" fill="rgb(229,17,7)" fg:x="397" fg:w="3"/><text x="31.6334%" y="351.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="31.3834%" y="325" width="0.2372%" height="15" fill="rgb(239,72,28)" fg:x="397" fg:w="3"/><text x="31.6334%" y="335.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="31.3834%" y="309" width="0.2372%" height="15" fill="rgb(230,47,54)" fg:x="397" fg:w="3"/><text x="31.6334%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="31.6206%" y="517" width="0.0791%" height="15" fill="rgb(214,50,8)" fg:x="400" fg:w="1"/><text x="31.8706%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="31.6206%" y="501" width="0.0791%" height="15" fill="rgb(216,198,43)" fg:x="400" fg:w="1"/><text x="31.8706%" y="511.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.55%)</title><rect x="31.3834%" y="533" width="0.5534%" height="15" fill="rgb(234,20,35)" fg:x="397" fg:w="7"/><text x="31.6334%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="31.6996%" y="517" width="0.2372%" height="15" fill="rgb(254,45,19)" fg:x="401" fg:w="3"/><text x="31.9496%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="31.6996%" y="501" width="0.2372%" height="15" fill="rgb(219,14,44)" fg:x="401" fg:w="3"/><text x="31.9496%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="31.8577%" y="485" width="0.0791%" height="15" fill="rgb(217,220,26)" fg:x="403" fg:w="1"/><text x="32.1077%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="31.8577%" y="469" width="0.0791%" height="15" fill="rgb(213,158,28)" fg:x="403" fg:w="1"/><text x="32.1077%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9368%" y="421" width="0.0791%" height="15" fill="rgb(252,51,52)" fg:x="404" fg:w="1"/><text x="32.1868%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9368%" y="405" width="0.0791%" height="15" fill="rgb(246,89,16)" fg:x="404" fg:w="1"/><text x="32.1868%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="31.9368%" y="389" width="0.0791%" height="15" fill="rgb(216,158,49)" fg:x="404" fg:w="1"/><text x="32.1868%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="31.9368%" y="373" width="0.0791%" height="15" fill="rgb(236,107,19)" fg:x="404" fg:w="1"/><text x="32.1868%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.0158%" y="357" width="0.0791%" height="15" fill="rgb(228,185,30)" fg:x="405" fg:w="1"/><text x="32.2658%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="32.0158%" y="341" width="0.0791%" height="15" fill="rgb(246,134,8)" fg:x="405" fg:w="1"/><text x="32.2658%" y="351.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="31.9368%" y="469" width="0.2372%" height="15" fill="rgb(214,143,50)" fg:x="404" fg:w="3"/><text x="32.1868%" y="479.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="31.9368%" y="453" width="0.2372%" height="15" fill="rgb(228,75,8)" fg:x="404" fg:w="3"/><text x="32.1868%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="31.9368%" y="437" width="0.2372%" height="15" fill="rgb(207,175,4)" fg:x="404" fg:w="3"/><text x="32.1868%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.0158%" y="421" width="0.1581%" height="15" fill="rgb(205,108,24)" fg:x="405" fg:w="2"/><text x="32.2658%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.0158%" y="405" width="0.1581%" height="15" fill="rgb(244,120,49)" fg:x="405" fg:w="2"/><text x="32.2658%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="32.0158%" y="389" width="0.1581%" height="15" fill="rgb(223,47,38)" fg:x="405" fg:w="2"/><text x="32.2658%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.0158%" y="373" width="0.1581%" height="15" fill="rgb(229,179,11)" fg:x="405" fg:w="2"/><text x="32.2658%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="32.0949%" y="357" width="0.0791%" height="15" fill="rgb(231,122,1)" fg:x="406" fg:w="1"/><text x="32.3449%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.0949%" y="341" width="0.0791%" height="15" fill="rgb(245,119,9)" fg:x="406" fg:w="1"/><text x="32.3449%" y="351.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="32.1739%" y="469" width="0.0791%" height="15" fill="rgb(241,163,25)" fg:x="407" fg:w="1"/><text x="32.4239%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="32.1739%" y="453" width="0.0791%" height="15" fill="rgb(217,214,3)" fg:x="407" fg:w="1"/><text x="32.4239%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="32.1739%" y="437" width="0.0791%" height="15" fill="rgb(240,86,28)" fg:x="407" fg:w="1"/><text x="32.4239%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="32.1739%" y="421" width="0.0791%" height="15" fill="rgb(215,47,9)" fg:x="407" fg:w="1"/><text x="32.4239%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.2530%" y="373" width="0.1581%" height="15" fill="rgb(252,25,45)" fg:x="408" fg:w="2"/><text x="32.5030%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.2530%" y="357" width="0.1581%" height="15" fill="rgb(251,164,9)" fg:x="408" fg:w="2"/><text x="32.5030%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="32.3320%" y="341" width="0.0791%" height="15" fill="rgb(233,194,0)" fg:x="409" fg:w="1"/><text x="32.5820%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3320%" y="325" width="0.0791%" height="15" fill="rgb(249,111,24)" fg:x="409" fg:w="1"/><text x="32.5820%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3320%" y="309" width="0.0791%" height="15" fill="rgb(250,223,3)" fg:x="409" fg:w="1"/><text x="32.5820%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.3320%" y="293" width="0.0791%" height="15" fill="rgb(236,178,37)" fg:x="409" fg:w="1"/><text x="32.5820%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3320%" y="277" width="0.0791%" height="15" fill="rgb(241,158,50)" fg:x="409" fg:w="1"/><text x="32.5820%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.3320%" y="261" width="0.0791%" height="15" fill="rgb(213,121,41)" fg:x="409" fg:w="1"/><text x="32.5820%" y="271.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="32.3320%" y="245" width="0.0791%" height="15" fill="rgb(240,92,3)" fg:x="409" fg:w="1"/><text x="32.5820%" y="255.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3320%" y="229" width="0.0791%" height="15" fill="rgb(205,123,3)" fg:x="409" fg:w="1"/><text x="32.5820%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.3320%" y="213" width="0.0791%" height="15" fill="rgb(205,97,47)" fg:x="409" fg:w="1"/><text x="32.5820%" y="223.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="32.3320%" y="197" width="0.0791%" height="15" fill="rgb(247,152,14)" fg:x="409" fg:w="1"/><text x="32.5820%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.3320%" y="181" width="0.0791%" height="15" fill="rgb(248,195,53)" fg:x="409" fg:w="1"/><text x="32.5820%" y="191.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.4111%" y="373" width="0.0791%" height="15" fill="rgb(226,201,16)" fg:x="410" fg:w="1"/><text x="32.6611%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.4111%" y="357" width="0.0791%" height="15" fill="rgb(205,98,0)" fg:x="410" fg:w="1"/><text x="32.6611%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.4111%" y="341" width="0.0791%" height="15" fill="rgb(214,191,48)" fg:x="410" fg:w="1"/><text x="32.6611%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.4111%" y="325" width="0.0791%" height="15" fill="rgb(237,112,39)" fg:x="410" fg:w="1"/><text x="32.6611%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="32.4111%" y="309" width="0.0791%" height="15" fill="rgb(247,203,27)" fg:x="410" fg:w="1"/><text x="32.6611%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (4 samples, 0.32%)</title><rect x="32.2530%" y="421" width="0.3162%" height="15" fill="rgb(235,124,28)" fg:x="408" fg:w="4"/><text x="32.5030%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="32.2530%" y="405" width="0.3162%" height="15" fill="rgb(208,207,46)" fg:x="408" fg:w="4"/><text x="32.5030%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (4 samples, 0.32%)</title><rect x="32.2530%" y="389" width="0.3162%" height="15" fill="rgb(234,176,4)" fg:x="408" fg:w="4"/><text x="32.5030%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="32.4901%" y="373" width="0.0791%" height="15" fill="rgb(230,133,28)" fg:x="411" fg:w="1"/><text x="32.7401%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.4901%" y="357" width="0.0791%" height="15" fill="rgb(211,137,40)" fg:x="411" fg:w="1"/><text x="32.7401%" y="367.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="32.4901%" y="341" width="0.0791%" height="15" fill="rgb(254,35,13)" fg:x="411" fg:w="1"/><text x="32.7401%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="32.4901%" y="325" width="0.0791%" height="15" fill="rgb(225,49,51)" fg:x="411" fg:w="1"/><text x="32.7401%" y="335.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.47%)</title><rect x="32.2530%" y="469" width="0.4743%" height="15" fill="rgb(251,10,15)" fg:x="408" fg:w="6"/><text x="32.5030%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.47%)</title><rect x="32.2530%" y="453" width="0.4743%" height="15" fill="rgb(228,207,15)" fg:x="408" fg:w="6"/><text x="32.5030%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="32.2530%" y="437" width="0.4743%" height="15" fill="rgb(241,99,19)" fg:x="408" fg:w="6"/><text x="32.5030%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="32.5692%" y="421" width="0.1581%" height="15" fill="rgb(207,104,49)" fg:x="412" fg:w="2"/><text x="32.8192%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="32.5692%" y="405" width="0.1581%" height="15" fill="rgb(234,99,18)" fg:x="412" fg:w="2"/><text x="32.8192%" y="415.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="32.6482%" y="389" width="0.0791%" height="15" fill="rgb(213,191,49)" fg:x="413" fg:w="1"/><text x="32.8982%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.8063%" y="325" width="0.0791%" height="15" fill="rgb(210,226,19)" fg:x="415" fg:w="1"/><text x="33.0563%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.8063%" y="309" width="0.0791%" height="15" fill="rgb(229,97,18)" fg:x="415" fg:w="1"/><text x="33.0563%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.8063%" y="293" width="0.0791%" height="15" fill="rgb(211,167,15)" fg:x="415" fg:w="1"/><text x="33.0563%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.8063%" y="277" width="0.0791%" height="15" fill="rgb(210,169,34)" fg:x="415" fg:w="1"/><text x="33.0563%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="32.7273%" y="405" width="0.2372%" height="15" fill="rgb(241,121,31)" fg:x="414" fg:w="3"/><text x="32.9773%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.8063%" y="389" width="0.1581%" height="15" fill="rgb(232,40,11)" fg:x="415" fg:w="2"/><text x="33.0563%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.8063%" y="373" width="0.1581%" height="15" fill="rgb(205,86,26)" fg:x="415" fg:w="2"/><text x="33.0563%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="32.8063%" y="357" width="0.1581%" height="15" fill="rgb(231,126,28)" fg:x="415" fg:w="2"/><text x="33.0563%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="32.8063%" y="341" width="0.1581%" height="15" fill="rgb(219,221,18)" fg:x="415" fg:w="2"/><text x="33.0563%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.8854%" y="325" width="0.0791%" height="15" fill="rgb(211,40,0)" fg:x="416" fg:w="1"/><text x="33.1354%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.8854%" y="309" width="0.0791%" height="15" fill="rgb(239,85,43)" fg:x="416" fg:w="1"/><text x="33.1354%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="32.8854%" y="293" width="0.0791%" height="15" fill="rgb(231,55,21)" fg:x="416" fg:w="1"/><text x="33.1354%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="32.8854%" y="277" width="0.0791%" height="15" fill="rgb(225,184,43)" fg:x="416" fg:w="1"/><text x="33.1354%" y="287.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (21 samples, 1.66%)</title><rect x="31.3834%" y="549" width="1.6601%" height="15" fill="rgb(251,158,41)" fg:x="397" fg:w="21"/><text x="31.6334%" y="559.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (14 samples, 1.11%)</title><rect x="31.9368%" y="533" width="1.1067%" height="15" fill="rgb(234,159,37)" fg:x="404" fg:w="14"/><text x="32.1868%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (14 samples, 1.11%)</title><rect x="31.9368%" y="517" width="1.1067%" height="15" fill="rgb(216,204,22)" fg:x="404" fg:w="14"/><text x="32.1868%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (14 samples, 1.11%)</title><rect x="31.9368%" y="501" width="1.1067%" height="15" fill="rgb(214,17,3)" fg:x="404" fg:w="14"/><text x="32.1868%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.11%)</title><rect x="31.9368%" y="485" width="1.1067%" height="15" fill="rgb(212,111,17)" fg:x="404" fg:w="14"/><text x="32.1868%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="32.7273%" y="469" width="0.3162%" height="15" fill="rgb(221,157,24)" fg:x="414" fg:w="4"/><text x="32.9773%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="32.7273%" y="453" width="0.3162%" height="15" fill="rgb(252,16,13)" fg:x="414" fg:w="4"/><text x="32.9773%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="32.7273%" y="437" width="0.3162%" height="15" fill="rgb(221,62,2)" fg:x="414" fg:w="4"/><text x="32.9773%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="32.7273%" y="421" width="0.3162%" height="15" fill="rgb(247,87,22)" fg:x="414" fg:w="4"/><text x="32.9773%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="32.9644%" y="405" width="0.0791%" height="15" fill="rgb(215,73,9)" fg:x="417" fg:w="1"/><text x="33.2144%" y="415.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.9644%" y="389" width="0.0791%" height="15" fill="rgb(207,175,33)" fg:x="417" fg:w="1"/><text x="33.2144%" y="399.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (22 samples, 1.74%)</title><rect x="31.3834%" y="565" width="1.7391%" height="15" fill="rgb(243,129,54)" fg:x="397" fg:w="22"/><text x="31.6334%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_world (1 samples, 0.08%)</title><rect x="33.0435%" y="549" width="0.0791%" height="15" fill="rgb(227,119,45)" fg:x="418" fg:w="1"/><text x="33.2935%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="33.1225%" y="389" width="0.0791%" height="15" fill="rgb(205,109,36)" fg:x="419" fg:w="1"/><text x="33.3725%" y="399.50"></text></g><g><title>&lt;core::char::ToLowercase as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="33.1225%" y="373" width="0.0791%" height="15" fill="rgb(205,6,39)" fg:x="419" fg:w="1"/><text x="33.3725%" y="383.50"></text></g><g><title>&lt;core::char::CaseMappingIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="33.1225%" y="357" width="0.0791%" height="15" fill="rgb(221,32,16)" fg:x="419" fg:w="1"/><text x="33.3725%" y="367.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="33.3597%" y="325" width="0.2372%" height="15" fill="rgb(228,144,50)" fg:x="422" fg:w="3"/><text x="33.6097%" y="335.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (5 samples, 0.40%)</title><rect x="33.2806%" y="357" width="0.3953%" height="15" fill="rgb(229,201,53)" fg:x="421" fg:w="5"/><text x="33.5306%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (5 samples, 0.40%)</title><rect x="33.2806%" y="341" width="0.3953%" height="15" fill="rgb(249,153,27)" fg:x="421" fg:w="5"/><text x="33.5306%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="33.5968%" y="325" width="0.0791%" height="15" fill="rgb(227,106,25)" fg:x="425" fg:w="1"/><text x="33.8468%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="33.9130%" y="309" width="0.0791%" height="15" fill="rgb(230,65,29)" fg:x="429" fg:w="1"/><text x="34.1630%" y="319.50"></text></g><g><title>&lt;replies::AreaObservation as replies::ToTaggedJson&gt;::to_tagged_json (13 samples, 1.03%)</title><rect x="33.1225%" y="405" width="1.0277%" height="15" fill="rgb(221,57,46)" fg:x="419" fg:w="13"/><text x="33.3725%" y="415.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::AreaObservation&gt;::serialize (12 samples, 0.95%)</title><rect x="33.2016%" y="389" width="0.9486%" height="15" fill="rgb(229,161,17)" fg:x="420" fg:w="12"/><text x="33.4516%" y="399.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="33.2016%" y="373" width="0.9486%" height="15" fill="rgb(222,213,11)" fg:x="420" fg:w="12"/><text x="33.4516%" y="383.50"></text></g><g><title>serde::ser::Serializer::collect_seq (6 samples, 0.47%)</title><rect x="33.6759%" y="357" width="0.4743%" height="15" fill="rgb(235,35,13)" fg:x="426" fg:w="6"/><text x="33.9259%" y="367.50"></text></g><g><title>replies::_::&lt;impl serde::ser::Serialize for replies::ObservedEntity&gt;::serialize (4 samples, 0.32%)</title><rect x="33.8340%" y="341" width="0.3162%" height="15" fill="rgb(233,158,34)" fg:x="428" fg:w="4"/><text x="34.0840%" y="351.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (4 samples, 0.32%)</title><rect x="33.8340%" y="325" width="0.3162%" height="15" fill="rgb(215,151,48)" fg:x="428" fg:w="4"/><text x="34.0840%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="33.9921%" y="309" width="0.1581%" height="15" fill="rgb(229,84,14)" fg:x="430" fg:w="2"/><text x="34.2421%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="34.0711%" y="293" width="0.0791%" height="15" fill="rgb(229,68,14)" fg:x="431" fg:w="1"/><text x="34.3211%" y="303.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (16 samples, 1.26%)</title><rect x="33.1225%" y="421" width="1.2648%" height="15" fill="rgb(243,106,26)" fg:x="419" fg:w="16"/><text x="33.3725%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (3 samples, 0.24%)</title><rect x="34.1502%" y="405" width="0.2372%" height="15" fill="rgb(206,45,38)" fg:x="432" fg:w="3"/><text x="34.4002%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (3 samples, 0.24%)</title><rect x="34.1502%" y="389" width="0.2372%" height="15" fill="rgb(226,6,15)" fg:x="432" fg:w="3"/><text x="34.4002%" y="399.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="34.1502%" y="373" width="0.2372%" height="15" fill="rgb(232,22,54)" fg:x="432" fg:w="3"/><text x="34.4002%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.7036%" y="373" width="0.0791%" height="15" fill="rgb(229,222,32)" fg:x="439" fg:w="1"/><text x="34.9536%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.7036%" y="357" width="0.0791%" height="15" fill="rgb(228,62,29)" fg:x="439" fg:w="1"/><text x="34.9536%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="34.7036%" y="341" width="0.0791%" height="15" fill="rgb(251,103,34)" fg:x="439" fg:w="1"/><text x="34.9536%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.7036%" y="325" width="0.0791%" height="15" fill="rgb(233,12,30)" fg:x="439" fg:w="1"/><text x="34.9536%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="34.7036%" y="309" width="0.0791%" height="15" fill="rgb(238,52,0)" fg:x="439" fg:w="1"/><text x="34.9536%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="34.7036%" y="293" width="0.0791%" height="15" fill="rgb(223,98,5)" fg:x="439" fg:w="1"/><text x="34.9536%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="34.7036%" y="277" width="0.0791%" height="15" fill="rgb(228,75,37)" fg:x="439" fg:w="1"/><text x="34.9536%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="34.7036%" y="261" width="0.0791%" height="15" fill="rgb(205,115,49)" fg:x="439" fg:w="1"/><text x="34.9536%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.7036%" y="245" width="0.0791%" height="15" fill="rgb(250,154,43)" fg:x="439" fg:w="1"/><text x="34.9536%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="34.7036%" y="229" width="0.0791%" height="15" fill="rgb(226,43,29)" fg:x="439" fg:w="1"/><text x="34.9536%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="34.7036%" y="213" width="0.0791%" height="15" fill="rgb(249,228,39)" fg:x="439" fg:w="1"/><text x="34.9536%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="34.7036%" y="197" width="0.0791%" height="15" fill="rgb(216,79,43)" fg:x="439" fg:w="1"/><text x="34.9536%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="34.7036%" y="181" width="0.0791%" height="15" fill="rgb(228,95,12)" fg:x="439" fg:w="1"/><text x="34.9536%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="34.7036%" y="165" width="0.0791%" height="15" fill="rgb(249,221,15)" fg:x="439" fg:w="1"/><text x="34.9536%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="34.7036%" y="149" width="0.0791%" height="15" fill="rgb(233,34,13)" fg:x="439" fg:w="1"/><text x="34.9536%" y="159.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (3 samples, 0.24%)</title><rect x="34.7826%" y="373" width="0.2372%" height="15" fill="rgb(214,103,39)" fg:x="440" fg:w="3"/><text x="35.0326%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="34.8617%" y="357" width="0.1581%" height="15" fill="rgb(251,126,39)" fg:x="441" fg:w="2"/><text x="35.1117%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="34.9407%" y="341" width="0.0791%" height="15" fill="rgb(214,216,36)" fg:x="442" fg:w="1"/><text x="35.1907%" y="351.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (7 samples, 0.55%)</title><rect x="34.6245%" y="389" width="0.5534%" height="15" fill="rgb(220,221,8)" fg:x="438" fg:w="7"/><text x="34.8745%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="35.0198%" y="373" width="0.1581%" height="15" fill="rgb(240,216,3)" fg:x="443" fg:w="2"/><text x="35.2698%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.0198%" y="357" width="0.1581%" height="15" fill="rgb(232,218,17)" fg:x="443" fg:w="2"/><text x="35.2698%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (2 samples, 0.16%)</title><rect x="35.0198%" y="341" width="0.1581%" height="15" fill="rgb(229,163,45)" fg:x="443" fg:w="2"/><text x="35.2698%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.0198%" y="325" width="0.1581%" height="15" fill="rgb(231,110,42)" fg:x="443" fg:w="2"/><text x="35.2698%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (2 samples, 0.16%)</title><rect x="35.0198%" y="309" width="0.1581%" height="15" fill="rgb(208,170,48)" fg:x="443" fg:w="2"/><text x="35.2698%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="35.0198%" y="293" width="0.1581%" height="15" fill="rgb(239,116,25)" fg:x="443" fg:w="2"/><text x="35.2698%" y="303.50"></text></g><g><title>&lt;kernel::model::base::EntityKey as core::fmt::Display&gt;::fmt (1 samples, 0.08%)</title><rect x="35.1779%" y="389" width="0.0791%" height="15" fill="rgb(219,200,50)" fg:x="445" fg:w="1"/><text x="35.4279%" y="399.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="35.1779%" y="373" width="0.0791%" height="15" fill="rgb(245,200,0)" fg:x="445" fg:w="1"/><text x="35.4279%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="35.1779%" y="357" width="0.0791%" height="15" fill="rgb(245,119,33)" fg:x="445" fg:w="1"/><text x="35.4279%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="35.1779%" y="341" width="0.0791%" height="15" fill="rgb(231,125,12)" fg:x="445" fg:w="1"/><text x="35.4279%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="35.1779%" y="325" width="0.0791%" height="15" fill="rgb(216,96,41)" fg:x="445" fg:w="1"/><text x="35.4279%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="35.2569%" y="373" width="0.0791%" height="15" fill="rgb(248,43,45)" fg:x="446" fg:w="1"/><text x="35.5069%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="35.4150%" y="325" width="0.2372%" height="15" fill="rgb(217,222,7)" fg:x="448" fg:w="3"/><text x="35.6650%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="35.4941%" y="309" width="0.1581%" height="15" fill="rgb(233,28,6)" fg:x="449" fg:w="2"/><text x="35.7441%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="35.4941%" y="293" width="0.1581%" height="15" fill="rgb(231,218,15)" fg:x="449" fg:w="2"/><text x="35.7441%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="35.4941%" y="277" width="0.1581%" height="15" fill="rgb(226,171,48)" fg:x="449" fg:w="2"/><text x="35.7441%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="35.4941%" y="261" width="0.1581%" height="15" fill="rgb(235,201,9)" fg:x="449" fg:w="2"/><text x="35.7441%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="35.4941%" y="245" width="0.1581%" height="15" fill="rgb(217,80,15)" fg:x="449" fg:w="2"/><text x="35.7441%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="35.4941%" y="229" width="0.1581%" height="15" fill="rgb(219,152,8)" fg:x="449" fg:w="2"/><text x="35.7441%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="35.4941%" y="213" width="0.1581%" height="15" fill="rgb(243,107,38)" fg:x="449" fg:w="2"/><text x="35.7441%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="35.4941%" y="197" width="0.1581%" height="15" fill="rgb(231,17,5)" fg:x="449" fg:w="2"/><text x="35.7441%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="35.4941%" y="181" width="0.1581%" height="15" fill="rgb(209,25,54)" fg:x="449" fg:w="2"/><text x="35.7441%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="35.4941%" y="165" width="0.1581%" height="15" fill="rgb(219,0,2)" fg:x="449" fg:w="2"/><text x="35.7441%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="35.4941%" y="149" width="0.1581%" height="15" fill="rgb(246,9,5)" fg:x="449" fg:w="2"/><text x="35.7441%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="35.4941%" y="133" width="0.1581%" height="15" fill="rgb(226,159,4)" fg:x="449" fg:w="2"/><text x="35.7441%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="35.4941%" y="117" width="0.1581%" height="15" fill="rgb(219,175,34)" fg:x="449" fg:w="2"/><text x="35.7441%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="35.4150%" y="341" width="0.3162%" height="15" fill="rgb(236,10,46)" fg:x="448" fg:w="4"/><text x="35.6650%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.6522%" y="325" width="0.0791%" height="15" fill="rgb(240,211,16)" fg:x="451" fg:w="1"/><text x="35.9022%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="35.6522%" y="309" width="0.0791%" height="15" fill="rgb(205,3,43)" fg:x="451" fg:w="1"/><text x="35.9022%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="35.6522%" y="293" width="0.0791%" height="15" fill="rgb(245,7,22)" fg:x="451" fg:w="1"/><text x="35.9022%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="35.6522%" y="277" width="0.0791%" height="15" fill="rgb(239,132,32)" fg:x="451" fg:w="1"/><text x="35.9022%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="35.6522%" y="261" width="0.0791%" height="15" fill="rgb(228,202,34)" fg:x="451" fg:w="1"/><text x="35.9022%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.6522%" y="245" width="0.0791%" height="15" fill="rgb(254,200,22)" fg:x="451" fg:w="1"/><text x="35.9022%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="35.6522%" y="229" width="0.0791%" height="15" fill="rgb(219,10,39)" fg:x="451" fg:w="1"/><text x="35.9022%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="35.6522%" y="213" width="0.0791%" height="15" fill="rgb(226,210,39)" fg:x="451" fg:w="1"/><text x="35.9022%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="35.6522%" y="197" width="0.0791%" height="15" fill="rgb(208,219,16)" fg:x="451" fg:w="1"/><text x="35.9022%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="35.6522%" y="181" width="0.0791%" height="15" fill="rgb(216,158,51)" fg:x="451" fg:w="1"/><text x="35.9022%" y="191.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="35.6522%" y="165" width="0.0791%" height="15" fill="rgb(233,14,44)" fg:x="451" fg:w="1"/><text x="35.9022%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.6522%" y="149" width="0.0791%" height="15" fill="rgb(237,97,39)" fg:x="451" fg:w="1"/><text x="35.9022%" y="159.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="35.8103%" y="277" width="0.1581%" height="15" fill="rgb(218,198,43)" fg:x="453" fg:w="2"/><text x="36.0603%" y="287.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="35.8893%" y="261" width="0.0791%" height="15" fill="rgb(231,104,20)" fg:x="454" fg:w="1"/><text x="36.1393%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="35.8893%" y="245" width="0.0791%" height="15" fill="rgb(254,36,13)" fg:x="454" fg:w="1"/><text x="36.1393%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (10 samples, 0.79%)</title><rect x="35.2569%" y="389" width="0.7905%" height="15" fill="rgb(248,14,50)" fg:x="446" fg:w="10"/><text x="35.5069%" y="399.50"></text></g><g><title>kernel::model::props::load_props (9 samples, 0.71%)</title><rect x="35.3360%" y="373" width="0.7115%" height="15" fill="rgb(217,107,29)" fg:x="447" fg:w="9"/><text x="35.5860%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.63%)</title><rect x="35.4150%" y="357" width="0.6324%" height="15" fill="rgb(251,169,33)" fg:x="448" fg:w="8"/><text x="35.6650%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="35.7312%" y="341" width="0.3162%" height="15" fill="rgb(217,108,32)" fg:x="452" fg:w="4"/><text x="35.9812%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="35.7312%" y="325" width="0.3162%" height="15" fill="rgb(219,66,42)" fg:x="452" fg:w="4"/><text x="35.9812%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="35.8103%" y="309" width="0.2372%" height="15" fill="rgb(206,180,7)" fg:x="453" fg:w="3"/><text x="36.0603%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="35.8103%" y="293" width="0.2372%" height="15" fill="rgb(208,226,31)" fg:x="453" fg:w="3"/><text x="36.0603%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="35.9684%" y="277" width="0.0791%" height="15" fill="rgb(218,26,49)" fg:x="455" fg:w="1"/><text x="36.2184%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="35.9684%" y="261" width="0.0791%" height="15" fill="rgb(233,197,48)" fg:x="455" fg:w="1"/><text x="36.2184%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.9684%" y="245" width="0.0791%" height="15" fill="rgb(252,181,51)" fg:x="455" fg:w="1"/><text x="36.2184%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="36.1265%" y="373" width="0.0791%" height="15" fill="rgb(253,90,19)" fg:x="457" fg:w="1"/><text x="36.3765%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.1265%" y="357" width="0.0791%" height="15" fill="rgb(215,171,30)" fg:x="457" fg:w="1"/><text x="36.3765%" y="367.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="36.2055%" y="373" width="0.0791%" height="15" fill="rgb(214,222,9)" fg:x="458" fg:w="1"/><text x="36.4555%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="36.2055%" y="357" width="0.0791%" height="15" fill="rgb(223,3,22)" fg:x="458" fg:w="1"/><text x="36.4555%" y="367.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="36.2055%" y="341" width="0.0791%" height="15" fill="rgb(225,196,46)" fg:x="458" fg:w="1"/><text x="36.4555%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2846%" y="341" width="0.0791%" height="15" fill="rgb(209,110,37)" fg:x="459" fg:w="1"/><text x="36.5346%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.2846%" y="325" width="0.0791%" height="15" fill="rgb(249,89,12)" fg:x="459" fg:w="1"/><text x="36.5346%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="36.3636%" y="309" width="0.0791%" height="15" fill="rgb(226,27,33)" fg:x="460" fg:w="1"/><text x="36.6136%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="36.3636%" y="293" width="0.0791%" height="15" fill="rgb(213,82,22)" fg:x="460" fg:w="1"/><text x="36.6136%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="36.4427%" y="277" width="0.0791%" height="15" fill="rgb(248,140,0)" fg:x="461" fg:w="1"/><text x="36.6927%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="36.5217%" y="277" width="0.0791%" height="15" fill="rgb(228,106,3)" fg:x="462" fg:w="1"/><text x="36.7717%" y="287.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.63%)</title><rect x="36.0474%" y="389" width="0.6324%" height="15" fill="rgb(209,23,37)" fg:x="456" fg:w="8"/><text x="36.2974%" y="399.50"></text></g><g><title>kernel::model::props::load_props (5 samples, 0.40%)</title><rect x="36.2846%" y="373" width="0.3953%" height="15" fill="rgb(241,93,50)" fg:x="459" fg:w="5"/><text x="36.5346%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (5 samples, 0.40%)</title><rect x="36.2846%" y="357" width="0.3953%" height="15" fill="rgb(253,46,43)" fg:x="459" fg:w="5"/><text x="36.5346%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="36.3636%" y="341" width="0.3162%" height="15" fill="rgb(226,206,43)" fg:x="460" fg:w="4"/><text x="36.6136%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.3636%" y="325" width="0.3162%" height="15" fill="rgb(217,54,7)" fg:x="460" fg:w="4"/><text x="36.6136%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="36.4427%" y="309" width="0.2372%" height="15" fill="rgb(223,5,52)" fg:x="461" fg:w="3"/><text x="36.6927%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="36.4427%" y="293" width="0.2372%" height="15" fill="rgb(206,52,46)" fg:x="461" fg:w="3"/><text x="36.6927%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="36.6008%" y="277" width="0.0791%" height="15" fill="rgb(253,136,11)" fg:x="463" fg:w="1"/><text x="36.8508%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="36.6008%" y="261" width="0.0791%" height="15" fill="rgb(208,106,33)" fg:x="463" fg:w="1"/><text x="36.8508%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.7589%" y="309" width="0.0791%" height="15" fill="rgb(206,54,4)" fg:x="465" fg:w="1"/><text x="37.0089%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="36.7589%" y="293" width="0.0791%" height="15" fill="rgb(213,3,15)" fg:x="465" fg:w="1"/><text x="37.0089%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="36.8379%" y="309" width="0.0791%" height="15" fill="rgb(252,211,39)" fg:x="466" fg:w="1"/><text x="37.0879%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="36.7589%" y="325" width="0.2372%" height="15" fill="rgb(223,6,36)" fg:x="465" fg:w="3"/><text x="37.0089%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="36.9170%" y="309" width="0.0791%" height="15" fill="rgb(252,169,45)" fg:x="467" fg:w="1"/><text x="37.1670%" y="319.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (2 samples, 0.16%)</title><rect x="36.9960%" y="261" width="0.1581%" height="15" fill="rgb(212,48,26)" fg:x="468" fg:w="2"/><text x="37.2460%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="37.1542%" y="261" width="0.0791%" height="15" fill="rgb(251,102,48)" fg:x="470" fg:w="1"/><text x="37.4042%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.1542%" y="245" width="0.0791%" height="15" fill="rgb(243,208,16)" fg:x="470" fg:w="1"/><text x="37.4042%" y="255.50"></text></g><g><title>kernel::model::EntityPtr::gid (8 samples, 0.63%)</title><rect x="36.6798%" y="389" width="0.6324%" height="15" fill="rgb(219,96,24)" fg:x="464" fg:w="8"/><text x="36.9298%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (8 samples, 0.63%)</title><rect x="36.6798%" y="373" width="0.6324%" height="15" fill="rgb(219,33,29)" fg:x="464" fg:w="8"/><text x="36.9298%" y="383.50"></text></g><g><title>kernel::model::props::load_props (8 samples, 0.63%)</title><rect x="36.6798%" y="357" width="0.6324%" height="15" fill="rgb(223,176,5)" fg:x="464" fg:w="8"/><text x="36.9298%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (8 samples, 0.63%)</title><rect x="36.6798%" y="341" width="0.6324%" height="15" fill="rgb(228,140,14)" fg:x="464" fg:w="8"/><text x="36.9298%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="36.9960%" y="325" width="0.3162%" height="15" fill="rgb(217,179,31)" fg:x="468" fg:w="4"/><text x="37.2460%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.9960%" y="309" width="0.3162%" height="15" fill="rgb(230,9,30)" fg:x="468" fg:w="4"/><text x="37.2460%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (4 samples, 0.32%)</title><rect x="36.9960%" y="293" width="0.3162%" height="15" fill="rgb(230,136,20)" fg:x="468" fg:w="4"/><text x="37.2460%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="36.9960%" y="277" width="0.3162%" height="15" fill="rgb(215,210,22)" fg:x="468" fg:w="4"/><text x="37.2460%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="37.2332%" y="261" width="0.0791%" height="15" fill="rgb(218,43,5)" fg:x="471" fg:w="1"/><text x="37.4832%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="37.2332%" y="245" width="0.0791%" height="15" fill="rgb(216,11,5)" fg:x="471" fg:w="1"/><text x="37.4832%" y="255.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (1 samples, 0.08%)</title><rect x="37.3123%" y="325" width="0.0791%" height="15" fill="rgb(209,82,29)" fg:x="472" fg:w="1"/><text x="37.5623%" y="335.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="37.3913%" y="325" width="0.0791%" height="15" fill="rgb(244,115,12)" fg:x="473" fg:w="1"/><text x="37.6413%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="37.5494%" y="245" width="0.1581%" height="15" fill="rgb(222,82,18)" fg:x="475" fg:w="2"/><text x="37.7994%" y="255.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="37.6285%" y="229" width="0.0791%" height="15" fill="rgb(249,227,8)" fg:x="476" fg:w="1"/><text x="37.8785%" y="239.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="37.6285%" y="213" width="0.0791%" height="15" fill="rgb(253,141,45)" fg:x="476" fg:w="1"/><text x="37.8785%" y="223.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="37.4704%" y="293" width="0.3953%" height="15" fill="rgb(234,184,4)" fg:x="474" fg:w="5"/><text x="37.7204%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="37.4704%" y="277" width="0.3953%" height="15" fill="rgb(218,194,23)" fg:x="474" fg:w="5"/><text x="37.7204%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (5 samples, 0.40%)</title><rect x="37.4704%" y="261" width="0.3953%" height="15" fill="rgb(235,66,41)" fg:x="474" fg:w="5"/><text x="37.7204%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="37.7075%" y="245" width="0.1581%" height="15" fill="rgb(245,217,1)" fg:x="477" fg:w="2"/><text x="37.9575%" y="255.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (2 samples, 0.16%)</title><rect x="37.7075%" y="229" width="0.1581%" height="15" fill="rgb(229,91,1)" fg:x="477" fg:w="2"/><text x="37.9575%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 0.47%)</title><rect x="37.4704%" y="309" width="0.4743%" height="15" fill="rgb(207,101,30)" fg:x="474" fg:w="6"/><text x="37.7204%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="37.8656%" y="293" width="0.0791%" height="15" fill="rgb(223,82,49)" fg:x="479" fg:w="1"/><text x="38.1156%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.1028%" y="261" width="0.0791%" height="15" fill="rgb(218,167,17)" fg:x="482" fg:w="1"/><text x="38.3528%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="38.1818%" y="261" width="0.0791%" height="15" fill="rgb(208,103,14)" fg:x="483" fg:w="1"/><text x="38.4318%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="38.1818%" y="245" width="0.0791%" height="15" fill="rgb(238,20,8)" fg:x="483" fg:w="1"/><text x="38.4318%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="38.3399%" y="245" width="0.0791%" height="15" fill="rgb(218,80,54)" fg:x="485" fg:w="1"/><text x="38.5899%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="38.4190%" y="229" width="0.1581%" height="15" fill="rgb(240,144,17)" fg:x="486" fg:w="2"/><text x="38.6690%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.71%)</title><rect x="38.4190%" y="245" width="0.7115%" height="15" fill="rgb(245,27,50)" fg:x="486" fg:w="9"/><text x="38.6690%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.55%)</title><rect x="38.5771%" y="229" width="0.5534%" height="15" fill="rgb(251,51,7)" fg:x="488" fg:w="7"/><text x="38.8271%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="39.0514%" y="213" width="0.0791%" height="15" fill="rgb(245,217,29)" fg:x="494" fg:w="1"/><text x="39.3014%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (2 samples, 0.16%)</title><rect x="39.1304%" y="245" width="0.1581%" height="15" fill="rgb(221,176,29)" fg:x="495" fg:w="2"/><text x="39.3804%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.2095%" y="229" width="0.0791%" height="15" fill="rgb(212,180,24)" fg:x="496" fg:w="1"/><text x="39.4595%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.2095%" y="213" width="0.0791%" height="15" fill="rgb(254,24,2)" fg:x="496" fg:w="1"/><text x="39.4595%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.2095%" y="197" width="0.0791%" height="15" fill="rgb(230,100,2)" fg:x="496" fg:w="1"/><text x="39.4595%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.2095%" y="181" width="0.0791%" height="15" fill="rgb(219,142,25)" fg:x="496" fg:w="1"/><text x="39.4595%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.2095%" y="165" width="0.0791%" height="15" fill="rgb(240,73,43)" fg:x="496" fg:w="1"/><text x="39.4595%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.2095%" y="149" width="0.0791%" height="15" fill="rgb(214,114,15)" fg:x="496" fg:w="1"/><text x="39.4595%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="39.6047%" y="197" width="0.0791%" height="15" fill="rgb(207,130,4)" fg:x="501" fg:w="1"/><text x="39.8547%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="39.3676%" y="229" width="0.3953%" height="15" fill="rgb(221,25,40)" fg:x="498" fg:w="5"/><text x="39.6176%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="39.6047%" y="213" width="0.1581%" height="15" fill="rgb(241,184,7)" fg:x="501" fg:w="2"/><text x="39.8547%" y="223.50"></text></g><g><title>alloc::sync::arcinner_layout_for_value_layout (1 samples, 0.08%)</title><rect x="39.6838%" y="197" width="0.0791%" height="15" fill="rgb(235,159,4)" fg:x="502" fg:w="1"/><text x="39.9338%" y="207.50"></text></g><g><title>core::alloc::layout::Layout::extend (1 samples, 0.08%)</title><rect x="39.6838%" y="181" width="0.0791%" height="15" fill="rgb(214,87,48)" fg:x="502" fg:w="1"/><text x="39.9338%" y="191.50"></text></g><g><title>core::cmp::max (1 samples, 0.08%)</title><rect x="39.6838%" y="165" width="0.0791%" height="15" fill="rgb(246,198,24)" fg:x="502" fg:w="1"/><text x="39.9338%" y="175.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.08%)</title><rect x="39.6838%" y="149" width="0.0791%" height="15" fill="rgb(209,66,40)" fg:x="502" fg:w="1"/><text x="39.9338%" y="159.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.08%)</title><rect x="39.6838%" y="133" width="0.0791%" height="15" fill="rgb(233,147,39)" fg:x="502" fg:w="1"/><text x="39.9338%" y="143.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.55%)</title><rect x="39.2885%" y="245" width="0.5534%" height="15" fill="rgb(231,145,52)" fg:x="497" fg:w="7"/><text x="39.5385%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="39.7628%" y="229" width="0.0791%" height="15" fill="rgb(206,20,26)" fg:x="503" fg:w="1"/><text x="40.0128%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="39.7628%" y="213" width="0.0791%" height="15" fill="rgb(238,220,4)" fg:x="503" fg:w="1"/><text x="40.0128%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="39.7628%" y="197" width="0.0791%" height="15" fill="rgb(252,195,42)" fg:x="503" fg:w="1"/><text x="40.0128%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="39.7628%" y="181" width="0.0791%" height="15" fill="rgb(209,10,6)" fg:x="503" fg:w="1"/><text x="40.0128%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="39.7628%" y="165" width="0.0791%" height="15" fill="rgb(229,3,52)" fg:x="503" fg:w="1"/><text x="40.0128%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="39.7628%" y="149" width="0.0791%" height="15" fill="rgb(253,49,37)" fg:x="503" fg:w="1"/><text x="40.0128%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="39.8419%" y="245" width="0.0791%" height="15" fill="rgb(240,103,49)" fg:x="504" fg:w="1"/><text x="40.0919%" y="255.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="40.0791%" y="181" width="0.0791%" height="15" fill="rgb(250,182,30)" fg:x="507" fg:w="1"/><text x="40.3291%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="40.1581%" y="181" width="0.2372%" height="15" fill="rgb(248,8,30)" fg:x="508" fg:w="3"/><text x="40.4081%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="40.1581%" y="165" width="0.2372%" height="15" fill="rgb(237,120,30)" fg:x="508" fg:w="3"/><text x="40.4081%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="40.2372%" y="149" width="0.1581%" height="15" fill="rgb(221,146,34)" fg:x="509" fg:w="2"/><text x="40.4872%" y="159.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="40.2372%" y="133" width="0.1581%" height="15" fill="rgb(242,55,13)" fg:x="509" fg:w="2"/><text x="40.4872%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="40.3953%" y="181" width="0.0791%" height="15" fill="rgb(242,112,31)" fg:x="511" fg:w="1"/><text x="40.6453%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.3953%" y="165" width="0.0791%" height="15" fill="rgb(249,192,27)" fg:x="511" fg:w="1"/><text x="40.6453%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.3953%" y="149" width="0.0791%" height="15" fill="rgb(208,204,44)" fg:x="511" fg:w="1"/><text x="40.6453%" y="159.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.3953%" y="133" width="0.0791%" height="15" fill="rgb(208,93,54)" fg:x="511" fg:w="1"/><text x="40.6453%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="40.4743%" y="181" width="0.1581%" height="15" fill="rgb(242,1,31)" fg:x="512" fg:w="2"/><text x="40.7243%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="40.4743%" y="165" width="0.1581%" height="15" fill="rgb(241,83,25)" fg:x="512" fg:w="2"/><text x="40.7243%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="40.5534%" y="149" width="0.0791%" height="15" fill="rgb(205,169,50)" fg:x="513" fg:w="1"/><text x="40.8034%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="40.5534%" y="133" width="0.0791%" height="15" fill="rgb(239,186,37)" fg:x="513" fg:w="1"/><text x="40.8034%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="40.5534%" y="117" width="0.0791%" height="15" fill="rgb(205,221,10)" fg:x="513" fg:w="1"/><text x="40.8034%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="40.6324%" y="181" width="0.0791%" height="15" fill="rgb(218,196,15)" fg:x="514" fg:w="1"/><text x="40.8824%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="40.6324%" y="165" width="0.0791%" height="15" fill="rgb(218,196,35)" fg:x="514" fg:w="1"/><text x="40.8824%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="40.6324%" y="149" width="0.0791%" height="15" fill="rgb(233,63,24)" fg:x="514" fg:w="1"/><text x="40.8824%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.6324%" y="133" width="0.0791%" height="15" fill="rgb(225,8,4)" fg:x="514" fg:w="1"/><text x="40.8824%" y="143.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="40.7115%" y="149" width="0.0791%" height="15" fill="rgb(234,105,35)" fg:x="515" fg:w="1"/><text x="40.9615%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (56 samples, 4.43%)</title><rect x="40.7115%" y="181" width="4.4269%" height="15" fill="rgb(236,21,32)" fg:x="515" fg:w="56"/><text x="40.9615%" y="191.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (56 samples, 4.43%)</title><rect x="40.7115%" y="165" width="4.4269%" height="15" fill="rgb(228,109,6)" fg:x="515" fg:w="56"/><text x="40.9615%" y="175.50">regex..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (55 samples, 4.35%)</title><rect x="40.7905%" y="149" width="4.3478%" height="15" fill="rgb(229,215,31)" fg:x="516" fg:w="55"/><text x="41.0405%" y="159.50">alloc..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="45.1383%" y="181" width="0.0791%" height="15" fill="rgb(221,52,54)" fg:x="571" fg:w="1"/><text x="45.3883%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="45.2174%" y="181" width="0.0791%" height="15" fill="rgb(252,129,43)" fg:x="572" fg:w="1"/><text x="45.4674%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (69 samples, 5.45%)</title><rect x="39.9209%" y="229" width="5.4545%" height="15" fill="rgb(248,183,27)" fg:x="505" fg:w="69"/><text x="40.1709%" y="239.50">&lt;core::..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (69 samples, 5.45%)</title><rect x="39.9209%" y="213" width="5.4545%" height="15" fill="rgb(250,0,22)" fg:x="505" fg:w="69"/><text x="40.1709%" y="223.50">regex_a..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (69 samples, 5.45%)</title><rect x="39.9209%" y="197" width="5.4545%" height="15" fill="rgb(213,166,10)" fg:x="505" fg:w="69"/><text x="40.1709%" y="207.50">regex_a..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="45.2964%" y="181" width="0.0791%" height="15" fill="rgb(207,163,36)" fg:x="573" fg:w="1"/><text x="45.5464%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.2964%" y="165" width="0.0791%" height="15" fill="rgb(208,122,22)" fg:x="573" fg:w="1"/><text x="45.5464%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.2964%" y="149" width="0.0791%" height="15" fill="rgb(207,104,49)" fg:x="573" fg:w="1"/><text x="45.5464%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="45.2964%" y="133" width="0.0791%" height="15" fill="rgb(248,211,50)" fg:x="573" fg:w="1"/><text x="45.5464%" y="143.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="45.5336%" y="213" width="0.0791%" height="15" fill="rgb(217,13,45)" fg:x="576" fg:w="1"/><text x="45.7836%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="45.6126%" y="213" width="0.2372%" height="15" fill="rgb(211,216,49)" fg:x="577" fg:w="3"/><text x="45.8626%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.7708%" y="197" width="0.0791%" height="15" fill="rgb(221,58,53)" fg:x="579" fg:w="1"/><text x="46.0208%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.7708%" y="181" width="0.0791%" height="15" fill="rgb(220,112,41)" fg:x="579" fg:w="1"/><text x="46.0208%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.7708%" y="165" width="0.0791%" height="15" fill="rgb(236,38,28)" fg:x="579" fg:w="1"/><text x="46.0208%" y="175.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="46.2451%" y="197" width="0.0791%" height="15" fill="rgb(227,195,22)" fg:x="585" fg:w="1"/><text x="46.4951%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (13 samples, 1.03%)</title><rect x="45.3755%" y="229" width="1.0277%" height="15" fill="rgb(214,55,33)" fg:x="574" fg:w="13"/><text x="45.6255%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (7 samples, 0.55%)</title><rect x="45.8498%" y="213" width="0.5534%" height="15" fill="rgb(248,80,13)" fg:x="580" fg:w="7"/><text x="46.0998%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="46.3241%" y="197" width="0.0791%" height="15" fill="rgb(238,52,6)" fg:x="586" fg:w="1"/><text x="46.5741%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.3241%" y="181" width="0.0791%" height="15" fill="rgb(224,198,47)" fg:x="586" fg:w="1"/><text x="46.5741%" y="191.50"></text></g><g><title>regex_automata::meta::strategy::new (106 samples, 8.38%)</title><rect x="38.2609%" y="261" width="8.3794%" height="15" fill="rgb(233,171,20)" fg:x="484" fg:w="106"/><text x="38.5109%" y="271.50">regex_automa..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (85 samples, 6.72%)</title><rect x="39.9209%" y="245" width="6.7194%" height="15" fill="rgb(241,30,25)" fg:x="505" fg:w="85"/><text x="40.1709%" y="255.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="46.4032%" y="229" width="0.2372%" height="15" fill="rgb(207,171,38)" fg:x="587" fg:w="3"/><text x="46.6532%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="46.4032%" y="213" width="0.2372%" height="15" fill="rgb(234,70,1)" fg:x="587" fg:w="3"/><text x="46.6532%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="46.5613%" y="197" width="0.0791%" height="15" fill="rgb(232,178,18)" fg:x="589" fg:w="1"/><text x="46.8113%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="46.5613%" y="181" width="0.0791%" height="15" fill="rgb(241,78,40)" fg:x="589" fg:w="1"/><text x="46.8113%" y="191.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (7 samples, 0.55%)</title><rect x="46.6403%" y="261" width="0.5534%" height="15" fill="rgb(222,35,25)" fg:x="590" fg:w="7"/><text x="46.8903%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (7 samples, 0.55%)</title><rect x="46.6403%" y="245" width="0.5534%" height="15" fill="rgb(207,92,16)" fg:x="590" fg:w="7"/><text x="46.8903%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="46.7194%" y="229" width="0.4743%" height="15" fill="rgb(216,59,51)" fg:x="591" fg:w="6"/><text x="46.9694%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (5 samples, 0.40%)</title><rect x="46.7984%" y="213" width="0.3953%" height="15" fill="rgb(213,80,28)" fg:x="592" fg:w="5"/><text x="47.0484%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.40%)</title><rect x="46.7984%" y="197" width="0.3953%" height="15" fill="rgb(220,93,7)" fg:x="592" fg:w="5"/><text x="47.0484%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="46.7984%" y="181" width="0.3953%" height="15" fill="rgb(225,24,44)" fg:x="592" fg:w="5"/><text x="47.0484%" y="191.50"></text></g><g><title>__libc_malloc (5 samples, 0.40%)</title><rect x="46.7984%" y="165" width="0.3953%" height="15" fill="rgb(243,74,40)" fg:x="592" fg:w="5"/><text x="47.0484%" y="175.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="47.1937%" y="213" width="0.0791%" height="15" fill="rgb(228,39,7)" fg:x="597" fg:w="1"/><text x="47.4437%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (119 samples, 9.41%)</title><rect x="37.9447%" y="309" width="9.4071%" height="15" fill="rgb(227,79,8)" fg:x="480" fg:w="119"/><text x="38.1947%" y="319.50">&lt;regex::regex..</text></g><g><title>regex::builders::Builder::build_one_string (119 samples, 9.41%)</title><rect x="37.9447%" y="293" width="9.4071%" height="15" fill="rgb(236,58,11)" fg:x="480" fg:w="119"/><text x="38.1947%" y="303.50">regex::builde..</text></g><g><title>regex_automata::meta::regex::Builder::build (119 samples, 9.41%)</title><rect x="37.9447%" y="277" width="9.4071%" height="15" fill="rgb(249,63,35)" fg:x="480" fg:w="119"/><text x="38.1947%" y="287.50">regex_automat..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="47.1937%" y="261" width="0.1581%" height="15" fill="rgb(252,114,16)" fg:x="597" fg:w="2"/><text x="47.4437%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="47.1937%" y="245" width="0.1581%" height="15" fill="rgb(254,151,24)" fg:x="597" fg:w="2"/><text x="47.4437%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="47.1937%" y="229" width="0.1581%" height="15" fill="rgb(253,54,39)" fg:x="597" fg:w="2"/><text x="47.4437%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="47.2727%" y="213" width="0.0791%" height="15" fill="rgb(243,25,45)" fg:x="598" fg:w="1"/><text x="47.5227%" y="223.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="47.3518%" y="293" width="0.1581%" height="15" fill="rgb(234,134,9)" fg:x="599" fg:w="2"/><text x="47.6018%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="47.5099%" y="277" width="0.1581%" height="15" fill="rgb(227,166,31)" fg:x="601" fg:w="2"/><text x="47.7599%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="47.5099%" y="261" width="0.1581%" height="15" fill="rgb(245,143,41)" fg:x="601" fg:w="2"/><text x="47.7599%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="47.5099%" y="245" width="0.1581%" height="15" fill="rgb(238,181,32)" fg:x="601" fg:w="2"/><text x="47.7599%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="47.5099%" y="229" width="0.1581%" height="15" fill="rgb(224,113,18)" fg:x="601" fg:w="2"/><text x="47.7599%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.5889%" y="213" width="0.0791%" height="15" fill="rgb(240,229,28)" fg:x="602" fg:w="1"/><text x="47.8389%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="47.3518%" y="309" width="0.4743%" height="15" fill="rgb(250,185,3)" fg:x="599" fg:w="6"/><text x="47.6018%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="47.5099%" y="293" width="0.3162%" height="15" fill="rgb(212,59,25)" fg:x="601" fg:w="4"/><text x="47.7599%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="47.6680%" y="277" width="0.1581%" height="15" fill="rgb(221,87,20)" fg:x="603" fg:w="2"/><text x="47.9180%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="47.7470%" y="261" width="0.0791%" height="15" fill="rgb(213,74,28)" fg:x="604" fg:w="1"/><text x="47.9970%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="47.7470%" y="245" width="0.0791%" height="15" fill="rgb(224,132,34)" fg:x="604" fg:w="1"/><text x="47.9970%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="48.3794%" y="229" width="0.0791%" height="15" fill="rgb(222,101,24)" fg:x="612" fg:w="1"/><text x="48.6294%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="48.3794%" y="213" width="0.0791%" height="15" fill="rgb(254,142,4)" fg:x="612" fg:w="1"/><text x="48.6294%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="48.3794%" y="197" width="0.0791%" height="15" fill="rgb(230,229,49)" fg:x="612" fg:w="1"/><text x="48.6294%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (12 samples, 0.95%)</title><rect x="47.8261%" y="245" width="0.9486%" height="15" fill="rgb(238,70,47)" fg:x="605" fg:w="12"/><text x="48.0761%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="48.4585%" y="229" width="0.3162%" height="15" fill="rgb(231,160,17)" fg:x="613" fg:w="4"/><text x="48.7085%" y="239.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (144 samples, 11.38%)</title><rect x="37.4704%" y="325" width="11.3834%" height="15" fill="rgb(218,68,53)" fg:x="474" fg:w="144"/><text x="37.7204%" y="335.50">indefinite::helpe..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.03%)</title><rect x="47.8261%" y="309" width="1.0277%" height="15" fill="rgb(236,111,10)" fg:x="605" fg:w="13"/><text x="48.0761%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.03%)</title><rect x="47.8261%" y="293" width="1.0277%" height="15" fill="rgb(224,34,41)" fg:x="605" fg:w="13"/><text x="48.0761%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.03%)</title><rect x="47.8261%" y="277" width="1.0277%" height="15" fill="rgb(241,118,19)" fg:x="605" fg:w="13"/><text x="48.0761%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.03%)</title><rect x="47.8261%" y="261" width="1.0277%" height="15" fill="rgb(238,129,25)" fg:x="605" fg:w="13"/><text x="48.0761%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="48.7747%" y="245" width="0.0791%" height="15" fill="rgb(238,22,31)" fg:x="617" fg:w="1"/><text x="49.0247%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="49.0119%" y="229" width="0.1581%" height="15" fill="rgb(222,174,48)" fg:x="620" fg:w="2"/><text x="49.2619%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.0909%" y="213" width="0.0791%" height="15" fill="rgb(206,152,40)" fg:x="621" fg:w="1"/><text x="49.3409%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.32%)</title><rect x="48.9328%" y="261" width="0.3162%" height="15" fill="rgb(218,99,54)" fg:x="619" fg:w="4"/><text x="49.1828%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="49.0119%" y="245" width="0.2372%" height="15" fill="rgb(220,174,26)" fg:x="620" fg:w="3"/><text x="49.2619%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.1700%" y="229" width="0.0791%" height="15" fill="rgb(245,116,9)" fg:x="622" fg:w="1"/><text x="49.4200%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.2490%" y="261" width="0.0791%" height="15" fill="rgb(209,72,35)" fg:x="623" fg:w="1"/><text x="49.4990%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.2490%" y="245" width="0.0791%" height="15" fill="rgb(226,126,21)" fg:x="623" fg:w="1"/><text x="49.4990%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.2490%" y="229" width="0.0791%" height="15" fill="rgb(227,192,1)" fg:x="623" fg:w="1"/><text x="49.4990%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="49.3281%" y="261" width="0.0791%" height="15" fill="rgb(237,180,29)" fg:x="624" fg:w="1"/><text x="49.5781%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="49.3281%" y="245" width="0.0791%" height="15" fill="rgb(230,197,35)" fg:x="624" fg:w="1"/><text x="49.5781%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="49.3281%" y="229" width="0.0791%" height="15" fill="rgb(246,193,31)" fg:x="624" fg:w="1"/><text x="49.5781%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="49.3281%" y="213" width="0.0791%" height="15" fill="rgb(241,36,4)" fg:x="624" fg:w="1"/><text x="49.5781%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.3281%" y="197" width="0.0791%" height="15" fill="rgb(241,130,17)" fg:x="624" fg:w="1"/><text x="49.5781%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="49.3281%" y="181" width="0.0791%" height="15" fill="rgb(206,137,32)" fg:x="624" fg:w="1"/><text x="49.5781%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="49.4862%" y="245" width="0.0791%" height="15" fill="rgb(237,228,51)" fg:x="626" fg:w="1"/><text x="49.7362%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="49.4862%" y="229" width="0.0791%" height="15" fill="rgb(243,6,42)" fg:x="626" fg:w="1"/><text x="49.7362%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="49.4862%" y="213" width="0.0791%" height="15" fill="rgb(251,74,28)" fg:x="626" fg:w="1"/><text x="49.7362%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="49.5652%" y="245" width="0.3953%" height="15" fill="rgb(218,20,49)" fg:x="627" fg:w="5"/><text x="49.8152%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="49.5652%" y="229" width="0.3953%" height="15" fill="rgb(238,28,14)" fg:x="627" fg:w="5"/><text x="49.8152%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="49.8814%" y="213" width="0.0791%" height="15" fill="rgb(229,40,46)" fg:x="631" fg:w="1"/><text x="50.1314%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="49.8814%" y="197" width="0.0791%" height="15" fill="rgb(244,195,20)" fg:x="631" fg:w="1"/><text x="50.1314%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="49.9605%" y="213" width="0.0791%" height="15" fill="rgb(253,56,35)" fg:x="632" fg:w="1"/><text x="50.2105%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="49.9605%" y="197" width="0.0791%" height="15" fill="rgb(210,149,44)" fg:x="632" fg:w="1"/><text x="50.2105%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="49.9605%" y="181" width="0.0791%" height="15" fill="rgb(240,135,12)" fg:x="632" fg:w="1"/><text x="50.2105%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="49.9605%" y="229" width="0.3953%" height="15" fill="rgb(251,24,50)" fg:x="632" fg:w="5"/><text x="50.2105%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="50.0395%" y="213" width="0.3162%" height="15" fill="rgb(243,200,47)" fg:x="633" fg:w="4"/><text x="50.2895%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="50.0395%" y="197" width="0.3162%" height="15" fill="rgb(224,166,26)" fg:x="633" fg:w="4"/><text x="50.2895%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="50.0395%" y="181" width="0.3162%" height="15" fill="rgb(233,0,47)" fg:x="633" fg:w="4"/><text x="50.2895%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="50.2767%" y="165" width="0.0791%" height="15" fill="rgb(253,80,5)" fg:x="636" fg:w="1"/><text x="50.5267%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.2767%" y="149" width="0.0791%" height="15" fill="rgb(214,133,25)" fg:x="636" fg:w="1"/><text x="50.5267%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.2767%" y="133" width="0.0791%" height="15" fill="rgb(209,27,14)" fg:x="636" fg:w="1"/><text x="50.5267%" y="143.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="50.2767%" y="117" width="0.0791%" height="15" fill="rgb(219,102,51)" fg:x="636" fg:w="1"/><text x="50.5267%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="50.3557%" y="213" width="0.0791%" height="15" fill="rgb(237,18,16)" fg:x="637" fg:w="1"/><text x="50.6057%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="50.4348%" y="213" width="0.2372%" height="15" fill="rgb(241,85,17)" fg:x="638" fg:w="3"/><text x="50.6848%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.5929%" y="197" width="0.0791%" height="15" fill="rgb(236,90,42)" fg:x="640" fg:w="1"/><text x="50.8429%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.5929%" y="181" width="0.0791%" height="15" fill="rgb(249,57,21)" fg:x="640" fg:w="1"/><text x="50.8429%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (10 samples, 0.79%)</title><rect x="49.9605%" y="245" width="0.7905%" height="15" fill="rgb(243,12,36)" fg:x="632" fg:w="10"/><text x="50.2105%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (5 samples, 0.40%)</title><rect x="50.3557%" y="229" width="0.3953%" height="15" fill="rgb(253,128,47)" fg:x="637" fg:w="5"/><text x="50.6057%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="50.6719%" y="213" width="0.0791%" height="15" fill="rgb(207,33,20)" fg:x="641" fg:w="1"/><text x="50.9219%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (19 samples, 1.50%)</title><rect x="49.4071%" y="261" width="1.5020%" height="15" fill="rgb(233,215,35)" fg:x="625" fg:w="19"/><text x="49.6571%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="50.7510%" y="245" width="0.1581%" height="15" fill="rgb(249,188,52)" fg:x="642" fg:w="2"/><text x="51.0010%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="50.8300%" y="229" width="0.0791%" height="15" fill="rgb(225,12,32)" fg:x="643" fg:w="1"/><text x="51.0800%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="50.8300%" y="213" width="0.0791%" height="15" fill="rgb(247,98,14)" fg:x="643" fg:w="1"/><text x="51.0800%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.8300%" y="197" width="0.0791%" height="15" fill="rgb(247,219,48)" fg:x="643" fg:w="1"/><text x="51.0800%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.8300%" y="181" width="0.0791%" height="15" fill="rgb(253,60,48)" fg:x="643" fg:w="1"/><text x="51.0800%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="50.8300%" y="165" width="0.0791%" height="15" fill="rgb(245,15,52)" fg:x="643" fg:w="1"/><text x="51.0800%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="50.9881%" y="229" width="0.0791%" height="15" fill="rgb(220,133,28)" fg:x="645" fg:w="1"/><text x="51.2381%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="50.9881%" y="213" width="0.0791%" height="15" fill="rgb(217,180,4)" fg:x="645" fg:w="1"/><text x="51.2381%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="51.0672%" y="229" width="0.0791%" height="15" fill="rgb(251,24,1)" fg:x="646" fg:w="1"/><text x="51.3172%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="51.2253%" y="213" width="0.1581%" height="15" fill="rgb(212,185,49)" fg:x="648" fg:w="2"/><text x="51.4753%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.3043%" y="197" width="0.0791%" height="15" fill="rgb(215,175,22)" fg:x="649" fg:w="1"/><text x="51.5543%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.3043%" y="181" width="0.0791%" height="15" fill="rgb(250,205,14)" fg:x="649" fg:w="1"/><text x="51.5543%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.3043%" y="165" width="0.0791%" height="15" fill="rgb(225,211,22)" fg:x="649" fg:w="1"/><text x="51.5543%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="51.3834%" y="213" width="0.0791%" height="15" fill="rgb(251,179,42)" fg:x="650" fg:w="1"/><text x="51.6334%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::char_at (1 samples, 0.08%)</title><rect x="51.3834%" y="197" width="0.0791%" height="15" fill="rgb(208,216,51)" fg:x="650" fg:w="1"/><text x="51.6334%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (6 samples, 0.47%)</title><rect x="51.1462%" y="229" width="0.4743%" height="15" fill="rgb(235,36,11)" fg:x="647" fg:w="6"/><text x="51.3962%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="51.4625%" y="213" width="0.1581%" height="15" fill="rgb(213,189,28)" fg:x="651" fg:w="2"/><text x="51.7125%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="51.4625%" y="197" width="0.1581%" height="15" fill="rgb(227,203,42)" fg:x="651" fg:w="2"/><text x="51.7125%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="51.4625%" y="181" width="0.1581%" height="15" fill="rgb(244,72,36)" fg:x="651" fg:w="2"/><text x="51.7125%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="51.4625%" y="165" width="0.1581%" height="15" fill="rgb(213,53,17)" fg:x="651" fg:w="2"/><text x="51.7125%" y="175.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_pre (1 samples, 0.08%)</title><rect x="51.6206%" y="213" width="0.0791%" height="15" fill="rgb(207,167,3)" fg:x="653" fg:w="1"/><text x="51.8706%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (11 samples, 0.87%)</title><rect x="50.9091%" y="261" width="0.8696%" height="15" fill="rgb(216,98,30)" fg:x="644" fg:w="11"/><text x="51.1591%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (11 samples, 0.87%)</title><rect x="50.9091%" y="245" width="0.8696%" height="15" fill="rgb(236,123,15)" fg:x="644" fg:w="11"/><text x="51.1591%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="51.6206%" y="229" width="0.1581%" height="15" fill="rgb(248,81,50)" fg:x="653" fg:w="2"/><text x="51.8706%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.6996%" y="213" width="0.0791%" height="15" fill="rgb(214,120,4)" fg:x="654" fg:w="1"/><text x="51.9496%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="51.8577%" y="213" width="0.0791%" height="15" fill="rgb(208,179,34)" fg:x="656" fg:w="1"/><text x="52.1077%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="51.8577%" y="197" width="0.0791%" height="15" fill="rgb(227,140,7)" fg:x="656" fg:w="1"/><text x="52.1077%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="51.8577%" y="181" width="0.0791%" height="15" fill="rgb(214,22,6)" fg:x="656" fg:w="1"/><text x="52.1077%" y="191.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="51.7787%" y="229" width="0.3162%" height="15" fill="rgb(207,137,27)" fg:x="655" fg:w="4"/><text x="52.0287%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="51.9368%" y="213" width="0.1581%" height="15" fill="rgb(210,8,46)" fg:x="657" fg:w="2"/><text x="52.1868%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (42 samples, 3.32%)</title><rect x="48.8538%" y="309" width="3.3202%" height="15" fill="rgb(240,16,54)" fg:x="618" fg:w="42"/><text x="49.1038%" y="319.50">&lt;re..</text></g><g><title>regex::builders::Builder::build_one_string (42 samples, 3.32%)</title><rect x="48.8538%" y="293" width="3.3202%" height="15" fill="rgb(211,209,29)" fg:x="618" fg:w="42"/><text x="49.1038%" y="303.50">reg..</text></g><g><title>regex_automata::meta::regex::Builder::build (42 samples, 3.32%)</title><rect x="48.8538%" y="277" width="3.3202%" height="15" fill="rgb(226,228,24)" fg:x="618" fg:w="42"/><text x="49.1038%" y="287.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (5 samples, 0.40%)</title><rect x="51.7787%" y="261" width="0.3953%" height="15" fill="rgb(222,84,9)" fg:x="655" fg:w="5"/><text x="52.0287%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (5 samples, 0.40%)</title><rect x="51.7787%" y="245" width="0.3953%" height="15" fill="rgb(234,203,30)" fg:x="655" fg:w="5"/><text x="52.0287%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="52.0949%" y="229" width="0.0791%" height="15" fill="rgb(238,109,14)" fg:x="659" fg:w="1"/><text x="52.3449%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.1739%" y="293" width="0.0791%" height="15" fill="rgb(233,206,34)" fg:x="660" fg:w="1"/><text x="52.4239%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="52.1739%" y="309" width="0.1581%" height="15" fill="rgb(220,167,47)" fg:x="660" fg:w="2"/><text x="52.4239%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="52.2530%" y="293" width="0.0791%" height="15" fill="rgb(238,105,10)" fg:x="661" fg:w="1"/><text x="52.5030%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="52.2530%" y="277" width="0.0791%" height="15" fill="rgb(213,227,17)" fg:x="661" fg:w="1"/><text x="52.5030%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="52.2530%" y="261" width="0.0791%" height="15" fill="rgb(217,132,38)" fg:x="661" fg:w="1"/><text x="52.5030%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="52.2530%" y="245" width="0.0791%" height="15" fill="rgb(242,146,4)" fg:x="661" fg:w="1"/><text x="52.5030%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.3320%" y="245" width="0.0791%" height="15" fill="rgb(212,61,9)" fg:x="662" fg:w="1"/><text x="52.5820%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="52.3320%" y="229" width="0.0791%" height="15" fill="rgb(247,126,22)" fg:x="662" fg:w="1"/><text x="52.5820%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="52.6482%" y="229" width="0.0791%" height="15" fill="rgb(220,196,2)" fg:x="666" fg:w="1"/><text x="52.8982%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="52.6482%" y="213" width="0.0791%" height="15" fill="rgb(208,46,4)" fg:x="666" fg:w="1"/><text x="52.8982%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="52.6482%" y="197" width="0.0791%" height="15" fill="rgb(252,104,46)" fg:x="666" fg:w="1"/><text x="52.8982%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (5 samples, 0.40%)</title><rect x="52.4111%" y="245" width="0.3953%" height="15" fill="rgb(237,152,48)" fg:x="663" fg:w="5"/><text x="52.6611%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="52.7273%" y="229" width="0.0791%" height="15" fill="rgb(221,59,37)" fg:x="667" fg:w="1"/><text x="52.9773%" y="239.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (51 samples, 4.03%)</title><rect x="48.8538%" y="325" width="4.0316%" height="15" fill="rgb(209,202,51)" fg:x="618" fg:w="51"/><text x="49.1038%" y="335.50">inde..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.55%)</title><rect x="52.3320%" y="309" width="0.5534%" height="15" fill="rgb(228,81,30)" fg:x="662" fg:w="7"/><text x="52.5820%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.55%)</title><rect x="52.3320%" y="293" width="0.5534%" height="15" fill="rgb(227,42,39)" fg:x="662" fg:w="7"/><text x="52.5820%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.55%)</title><rect x="52.3320%" y="277" width="0.5534%" height="15" fill="rgb(221,26,2)" fg:x="662" fg:w="7"/><text x="52.5820%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="52.3320%" y="261" width="0.5534%" height="15" fill="rgb(254,61,31)" fg:x="662" fg:w="7"/><text x="52.5820%" y="271.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="52.8063%" y="245" width="0.0791%" height="15" fill="rgb(222,173,38)" fg:x="668" fg:w="1"/><text x="53.0563%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="52.8063%" y="229" width="0.0791%" height="15" fill="rgb(218,50,12)" fg:x="668" fg:w="1"/><text x="53.0563%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="52.8063%" y="213" width="0.0791%" height="15" fill="rgb(223,88,40)" fg:x="668" fg:w="1"/><text x="53.0563%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.8063%" y="197" width="0.0791%" height="15" fill="rgb(237,54,19)" fg:x="668" fg:w="1"/><text x="53.0563%" y="207.50"></text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="52.8854%" y="325" width="0.0791%" height="15" fill="rgb(251,129,25)" fg:x="669" fg:w="1"/><text x="53.1354%" y="335.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.0435%" y="261" width="0.0791%" height="15" fill="rgb(238,97,19)" fg:x="671" fg:w="1"/><text x="53.2935%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.2016%" y="229" width="0.0791%" height="15" fill="rgb(240,169,18)" fg:x="673" fg:w="1"/><text x="53.4516%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="53.1225%" y="261" width="0.2372%" height="15" fill="rgb(230,187,49)" fg:x="672" fg:w="3"/><text x="53.3725%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="53.1225%" y="245" width="0.2372%" height="15" fill="rgb(209,44,26)" fg:x="672" fg:w="3"/><text x="53.3725%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.2806%" y="229" width="0.0791%" height="15" fill="rgb(244,0,6)" fg:x="674" fg:w="1"/><text x="53.5306%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.3597%" y="261" width="0.0791%" height="15" fill="rgb(248,18,21)" fg:x="675" fg:w="1"/><text x="53.6097%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.4387%" y="229" width="0.0791%" height="15" fill="rgb(245,180,19)" fg:x="676" fg:w="1"/><text x="53.6887%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.4387%" y="213" width="0.0791%" height="15" fill="rgb(252,118,36)" fg:x="676" fg:w="1"/><text x="53.6887%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.4387%" y="197" width="0.0791%" height="15" fill="rgb(210,224,19)" fg:x="676" fg:w="1"/><text x="53.6887%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.4387%" y="181" width="0.0791%" height="15" fill="rgb(218,30,24)" fg:x="676" fg:w="1"/><text x="53.6887%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.5178%" y="229" width="0.0791%" height="15" fill="rgb(219,75,50)" fg:x="677" fg:w="1"/><text x="53.7678%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="53.4387%" y="261" width="0.2372%" height="15" fill="rgb(234,72,50)" fg:x="676" fg:w="3"/><text x="53.6887%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="53.4387%" y="245" width="0.2372%" height="15" fill="rgb(219,100,48)" fg:x="676" fg:w="3"/><text x="53.6887%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="53.5968%" y="229" width="0.0791%" height="15" fill="rgb(253,5,41)" fg:x="678" fg:w="1"/><text x="53.8468%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="53.5968%" y="213" width="0.0791%" height="15" fill="rgb(247,181,11)" fg:x="678" fg:w="1"/><text x="53.8468%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="53.5968%" y="197" width="0.0791%" height="15" fill="rgb(222,223,25)" fg:x="678" fg:w="1"/><text x="53.8468%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.5968%" y="181" width="0.0791%" height="15" fill="rgb(214,198,28)" fg:x="678" fg:w="1"/><text x="53.8468%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.5968%" y="165" width="0.0791%" height="15" fill="rgb(230,46,43)" fg:x="678" fg:w="1"/><text x="53.8468%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="53.5968%" y="149" width="0.0791%" height="15" fill="rgb(233,65,53)" fg:x="678" fg:w="1"/><text x="53.8468%" y="159.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.6759%" y="245" width="0.0791%" height="15" fill="rgb(221,121,27)" fg:x="679" fg:w="1"/><text x="53.9259%" y="255.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="53.7549%" y="229" width="0.3162%" height="15" fill="rgb(247,70,47)" fg:x="680" fg:w="4"/><text x="54.0049%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (17 samples, 1.34%)</title><rect x="53.7549%" y="245" width="1.3439%" height="15" fill="rgb(228,85,35)" fg:x="680" fg:w="17"/><text x="54.0049%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (13 samples, 1.03%)</title><rect x="54.0711%" y="229" width="1.0277%" height="15" fill="rgb(209,50,18)" fg:x="684" fg:w="13"/><text x="54.3211%" y="239.50"></text></g><g><title>__libc_free (4 samples, 0.32%)</title><rect x="54.7826%" y="213" width="0.3162%" height="15" fill="rgb(250,19,35)" fg:x="693" fg:w="4"/><text x="55.0326%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="55.1779%" y="229" width="0.0791%" height="15" fill="rgb(253,107,29)" fg:x="698" fg:w="1"/><text x="55.4279%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="55.1779%" y="213" width="0.0791%" height="15" fill="rgb(252,179,29)" fg:x="698" fg:w="1"/><text x="55.4279%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="55.2569%" y="229" width="0.0791%" height="15" fill="rgb(238,194,6)" fg:x="699" fg:w="1"/><text x="55.5069%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (4 samples, 0.32%)</title><rect x="55.0988%" y="245" width="0.3162%" height="15" fill="rgb(238,164,29)" fg:x="697" fg:w="4"/><text x="55.3488%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="55.3360%" y="229" width="0.0791%" height="15" fill="rgb(224,25,9)" fg:x="700" fg:w="1"/><text x="55.5860%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="55.3360%" y="213" width="0.0791%" height="15" fill="rgb(244,153,23)" fg:x="700" fg:w="1"/><text x="55.5860%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="55.3360%" y="197" width="0.0791%" height="15" fill="rgb(212,203,14)" fg:x="700" fg:w="1"/><text x="55.5860%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::sparse_set::SparseSet&gt; (1 samples, 0.08%)</title><rect x="55.6522%" y="213" width="0.0791%" height="15" fill="rgb(220,164,20)" fg:x="704" fg:w="1"/><text x="55.9022%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="55.6522%" y="197" width="0.0791%" height="15" fill="rgb(222,203,48)" fg:x="704" fg:w="1"/><text x="55.9022%" y="207.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (10 samples, 0.79%)</title><rect x="55.7312%" y="213" width="0.7905%" height="15" fill="rgb(215,159,22)" fg:x="705" fg:w="10"/><text x="55.9812%" y="223.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (6 samples, 0.47%)</title><rect x="56.0474%" y="197" width="0.4743%" height="15" fill="rgb(216,183,47)" fg:x="709" fg:w="6"/><text x="56.2974%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="56.3636%" y="181" width="0.1581%" height="15" fill="rgb(229,195,25)" fg:x="713" fg:w="2"/><text x="56.6136%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.3636%" y="165" width="0.1581%" height="15" fill="rgb(224,132,51)" fg:x="713" fg:w="2"/><text x="56.6136%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="56.3636%" y="149" width="0.1581%" height="15" fill="rgb(240,63,7)" fg:x="713" fg:w="2"/><text x="56.6136%" y="159.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (20 samples, 1.58%)</title><rect x="55.4150%" y="245" width="1.5810%" height="15" fill="rgb(249,182,41)" fg:x="701" fg:w="20"/><text x="55.6650%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (20 samples, 1.58%)</title><rect x="55.4150%" y="229" width="1.5810%" height="15" fill="rgb(243,47,26)" fg:x="701" fg:w="20"/><text x="55.6650%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (6 samples, 0.47%)</title><rect x="56.5217%" y="213" width="0.4743%" height="15" fill="rgb(233,48,2)" fg:x="715" fg:w="6"/><text x="56.7717%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (5 samples, 0.40%)</title><rect x="56.6008%" y="197" width="0.3953%" height="15" fill="rgb(244,165,34)" fg:x="716" fg:w="5"/><text x="56.8508%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (5 samples, 0.40%)</title><rect x="56.6008%" y="181" width="0.3953%" height="15" fill="rgb(207,89,7)" fg:x="716" fg:w="5"/><text x="56.8508%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="56.9960%" y="245" width="0.0791%" height="15" fill="rgb(244,117,36)" fg:x="721" fg:w="1"/><text x="57.2460%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="56.9960%" y="229" width="0.0791%" height="15" fill="rgb(226,144,34)" fg:x="721" fg:w="1"/><text x="57.2460%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="56.9960%" y="213" width="0.0791%" height="15" fill="rgb(213,23,19)" fg:x="721" fg:w="1"/><text x="57.2460%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="58.1028%" y="133" width="0.2372%" height="15" fill="rgb(217,75,12)" fg:x="735" fg:w="3"/><text x="58.3528%" y="143.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.3399%" y="133" width="0.1581%" height="15" fill="rgb(224,159,17)" fg:x="738" fg:w="2"/><text x="58.5899%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (6 samples, 0.47%)</title><rect x="58.4980%" y="133" width="0.4743%" height="15" fill="rgb(217,118,1)" fg:x="740" fg:w="6"/><text x="58.7480%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="58.7352%" y="117" width="0.2372%" height="15" fill="rgb(232,180,48)" fg:x="743" fg:w="3"/><text x="58.9852%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="58.7352%" y="101" width="0.2372%" height="15" fill="rgb(230,27,33)" fg:x="743" fg:w="3"/><text x="58.9852%" y="111.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="58.8142%" y="85" width="0.1581%" height="15" fill="rgb(205,31,21)" fg:x="744" fg:w="2"/><text x="59.0642%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (2 samples, 0.16%)</title><rect x="58.9723%" y="133" width="0.1581%" height="15" fill="rgb(253,59,4)" fg:x="746" fg:w="2"/><text x="59.2223%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="59.0514%" y="117" width="0.0791%" height="15" fill="rgb(224,201,9)" fg:x="747" fg:w="1"/><text x="59.3014%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="59.0514%" y="101" width="0.0791%" height="15" fill="rgb(229,206,30)" fg:x="747" fg:w="1"/><text x="59.3014%" y="111.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.3676%" y="101" width="0.0791%" height="15" fill="rgb(212,67,47)" fg:x="751" fg:w="1"/><text x="59.6176%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.4466%" y="69" width="0.0791%" height="15" fill="rgb(211,96,50)" fg:x="752" fg:w="1"/><text x="59.6966%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="59.4466%" y="101" width="0.1581%" height="15" fill="rgb(252,114,18)" fg:x="752" fg:w="2"/><text x="59.6966%" y="111.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="59.4466%" y="85" width="0.1581%" height="15" fill="rgb(223,58,37)" fg:x="752" fg:w="2"/><text x="59.6966%" y="95.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="59.5257%" y="69" width="0.0791%" height="15" fill="rgb(237,70,4)" fg:x="753" fg:w="1"/><text x="59.7757%" y="79.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (15 samples, 1.19%)</title><rect x="59.1304%" y="133" width="1.1858%" height="15" fill="rgb(244,85,46)" fg:x="748" fg:w="15"/><text x="59.3804%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (12 samples, 0.95%)</title><rect x="59.3676%" y="117" width="0.9486%" height="15" fill="rgb(223,39,52)" fg:x="751" fg:w="12"/><text x="59.6176%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (9 samples, 0.71%)</title><rect x="59.6047%" y="101" width="0.7115%" height="15" fill="rgb(218,200,14)" fg:x="754" fg:w="9"/><text x="59.8547%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="60.1581%" y="85" width="0.1581%" height="15" fill="rgb(208,171,16)" fg:x="761" fg:w="2"/><text x="60.4081%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.1581%" y="69" width="0.1581%" height="15" fill="rgb(234,200,18)" fg:x="761" fg:w="2"/><text x="60.4081%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.1581%" y="53" width="0.1581%" height="15" fill="rgb(228,45,11)" fg:x="761" fg:w="2"/><text x="60.4081%" y="63.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.1581%" y="37" width="0.1581%" height="15" fill="rgb(237,182,11)" fg:x="761" fg:w="2"/><text x="60.4081%" y="47.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.3162%" y="101" width="0.0791%" height="15" fill="rgb(241,175,49)" fg:x="763" fg:w="1"/><text x="60.5662%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (47 samples, 3.72%)</title><rect x="60.3162%" y="133" width="3.7154%" height="15" fill="rgb(247,38,35)" fg:x="763" fg:w="47"/><text x="60.5662%" y="143.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (47 samples, 3.72%)</title><rect x="60.3162%" y="117" width="3.7154%" height="15" fill="rgb(228,39,49)" fg:x="763" fg:w="47"/><text x="60.5662%" y="127.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (46 samples, 3.64%)</title><rect x="60.3953%" y="101" width="3.6364%" height="15" fill="rgb(226,101,26)" fg:x="764" fg:w="46"/><text x="60.6453%" y="111.50">allo..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (4 samples, 0.32%)</title><rect x="64.0316%" y="133" width="0.3162%" height="15" fill="rgb(206,141,19)" fg:x="810" fg:w="4"/><text x="64.2816%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (94 samples, 7.43%)</title><rect x="57.0751%" y="229" width="7.4308%" height="15" fill="rgb(211,200,13)" fg:x="722" fg:w="94"/><text x="57.3251%" y="239.50">&lt;core::ite..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (94 samples, 7.43%)</title><rect x="57.0751%" y="213" width="7.4308%" height="15" fill="rgb(241,121,6)" fg:x="722" fg:w="94"/><text x="57.3251%" y="223.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (94 samples, 7.43%)</title><rect x="57.0751%" y="197" width="7.4308%" height="15" fill="rgb(234,221,29)" fg:x="722" fg:w="94"/><text x="57.3251%" y="207.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (92 samples, 7.27%)</title><rect x="57.2332%" y="181" width="7.2727%" height="15" fill="rgb(229,136,5)" fg:x="724" fg:w="92"/><text x="57.4832%" y="191.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (92 samples, 7.27%)</title><rect x="57.2332%" y="165" width="7.2727%" height="15" fill="rgb(238,36,11)" fg:x="724" fg:w="92"/><text x="57.4832%" y="175.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (92 samples, 7.27%)</title><rect x="57.2332%" y="149" width="7.2727%" height="15" fill="rgb(251,55,41)" fg:x="724" fg:w="92"/><text x="57.4832%" y="159.50">regex_auto..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (2 samples, 0.16%)</title><rect x="64.3478%" y="133" width="0.1581%" height="15" fill="rgb(242,34,40)" fg:x="814" fg:w="2"/><text x="64.5978%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="64.4269%" y="117" width="0.0791%" height="15" fill="rgb(215,42,17)" fg:x="815" fg:w="1"/><text x="64.6769%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="64.4269%" y="101" width="0.0791%" height="15" fill="rgb(207,44,46)" fg:x="815" fg:w="1"/><text x="64.6769%" y="111.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.4269%" y="85" width="0.0791%" height="15" fill="rgb(211,206,28)" fg:x="815" fg:w="1"/><text x="64.6769%" y="95.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.0593%" y="213" width="0.0791%" height="15" fill="rgb(237,167,16)" fg:x="823" fg:w="1"/><text x="65.3093%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (9 samples, 0.71%)</title><rect x="65.1383%" y="213" width="0.7115%" height="15" fill="rgb(233,66,6)" fg:x="824" fg:w="9"/><text x="65.3883%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="65.7708%" y="197" width="0.0791%" height="15" fill="rgb(246,123,29)" fg:x="832" fg:w="1"/><text x="66.0208%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="65.7708%" y="181" width="0.0791%" height="15" fill="rgb(209,62,40)" fg:x="832" fg:w="1"/><text x="66.0208%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="65.7708%" y="165" width="0.0791%" height="15" fill="rgb(218,4,25)" fg:x="832" fg:w="1"/><text x="66.0208%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="65.8498%" y="213" width="0.3953%" height="15" fill="rgb(253,91,49)" fg:x="833" fg:w="5"/><text x="66.0998%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (23 samples, 1.82%)</title><rect x="64.5059%" y="229" width="1.8182%" height="15" fill="rgb(228,155,29)" fg:x="816" fg:w="23"/><text x="64.7559%" y="239.50">r..</text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="66.2451%" y="213" width="0.0791%" height="15" fill="rgb(243,57,37)" fg:x="838" fg:w="1"/><text x="66.4951%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (161 samples, 12.73%)</title><rect x="53.6759%" y="261" width="12.7273%" height="15" fill="rgb(244,167,17)" fg:x="679" fg:w="161"/><text x="53.9259%" y="271.50">regex_automata::met..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (118 samples, 9.33%)</title><rect x="57.0751%" y="245" width="9.3281%" height="15" fill="rgb(207,181,38)" fg:x="722" fg:w="118"/><text x="57.3251%" y="255.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="66.3241%" y="229" width="0.0791%" height="15" fill="rgb(211,8,23)" fg:x="839" fg:w="1"/><text x="66.5741%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="66.4032%" y="213" width="0.0791%" height="15" fill="rgb(235,11,44)" fg:x="840" fg:w="1"/><text x="66.6532%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class_op (1 samples, 0.08%)</title><rect x="66.4032%" y="197" width="0.0791%" height="15" fill="rgb(248,18,52)" fg:x="840" fg:w="1"/><text x="66.6532%" y="207.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="66.4032%" y="229" width="0.1581%" height="15" fill="rgb(208,4,7)" fg:x="840" fg:w="2"/><text x="66.6532%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="66.4822%" y="213" width="0.0791%" height="15" fill="rgb(240,17,39)" fg:x="841" fg:w="1"/><text x="66.7322%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="66.4822%" y="197" width="0.0791%" height="15" fill="rgb(207,170,3)" fg:x="841" fg:w="1"/><text x="66.7322%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.4822%" y="181" width="0.0791%" height="15" fill="rgb(236,100,52)" fg:x="841" fg:w="1"/><text x="66.7322%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.4822%" y="165" width="0.0791%" height="15" fill="rgb(246,78,51)" fg:x="841" fg:w="1"/><text x="66.7322%" y="175.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (1 samples, 0.08%)</title><rect x="66.5613%" y="229" width="0.0791%" height="15" fill="rgb(211,17,15)" fg:x="842" fg:w="1"/><text x="66.8113%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="66.5613%" y="213" width="0.0791%" height="15" fill="rgb(209,59,46)" fg:x="842" fg:w="1"/><text x="66.8113%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="66.4032%" y="261" width="0.3162%" height="15" fill="rgb(210,92,25)" fg:x="840" fg:w="4"/><text x="66.6532%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="66.4032%" y="245" width="0.3162%" height="15" fill="rgb(238,174,52)" fg:x="840" fg:w="4"/><text x="66.6532%" y="255.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="66.6403%" y="229" width="0.0791%" height="15" fill="rgb(230,73,7)" fg:x="843" fg:w="1"/><text x="66.8903%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="66.7984%" y="213" width="0.2372%" height="15" fill="rgb(243,124,40)" fg:x="845" fg:w="3"/><text x="67.0484%" y="223.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="66.9565%" y="197" width="0.0791%" height="15" fill="rgb(244,170,11)" fg:x="847" fg:w="1"/><text x="67.2065%" y="207.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="66.7984%" y="229" width="0.3162%" height="15" fill="rgb(207,114,54)" fg:x="845" fg:w="4"/><text x="67.0484%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="67.0356%" y="213" width="0.0791%" height="15" fill="rgb(205,42,20)" fg:x="848" fg:w="1"/><text x="67.2856%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="67.0356%" y="197" width="0.0791%" height="15" fill="rgb(230,30,28)" fg:x="848" fg:w="1"/><text x="67.2856%" y="207.50"></text></g><g><title>regex_syntax::hir::Properties::look (1 samples, 0.08%)</title><rect x="67.2727%" y="213" width="0.0791%" height="15" fill="rgb(205,73,54)" fg:x="851" fg:w="1"/><text x="67.5227%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (183 samples, 14.47%)</title><rect x="52.9644%" y="309" width="14.4664%" height="15" fill="rgb(254,227,23)" fg:x="670" fg:w="183"/><text x="53.2144%" y="319.50">&lt;regex::regex::string:..</text></g><g><title>regex::builders::Builder::build_one_string (183 samples, 14.47%)</title><rect x="52.9644%" y="293" width="14.4664%" height="15" fill="rgb(228,202,34)" fg:x="670" fg:w="183"/><text x="53.2144%" y="303.50">regex::builders::Build..</text></g><g><title>regex_automata::meta::regex::Builder::build (182 samples, 14.39%)</title><rect x="53.0435%" y="277" width="14.3874%" height="15" fill="rgb(222,225,37)" fg:x="671" fg:w="182"/><text x="53.2935%" y="287.50">regex_automata::meta::..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (9 samples, 0.71%)</title><rect x="66.7194%" y="261" width="0.7115%" height="15" fill="rgb(221,14,54)" fg:x="844" fg:w="9"/><text x="66.9694%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (9 samples, 0.71%)</title><rect x="66.7194%" y="245" width="0.7115%" height="15" fill="rgb(254,102,2)" fg:x="844" fg:w="9"/><text x="66.9694%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="67.1146%" y="229" width="0.3162%" height="15" fill="rgb(232,104,17)" fg:x="849" fg:w="4"/><text x="67.3646%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="67.3518%" y="213" width="0.0791%" height="15" fill="rgb(250,220,14)" fg:x="852" fg:w="1"/><text x="67.6018%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="67.4308%" y="229" width="0.1581%" height="15" fill="rgb(241,158,9)" fg:x="853" fg:w="2"/><text x="67.6808%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5099%" y="213" width="0.0791%" height="15" fill="rgb(246,9,43)" fg:x="854" fg:w="1"/><text x="67.7599%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="67.4308%" y="277" width="0.2372%" height="15" fill="rgb(206,73,33)" fg:x="853" fg:w="3"/><text x="67.6808%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (3 samples, 0.24%)</title><rect x="67.4308%" y="261" width="0.2372%" height="15" fill="rgb(222,79,8)" fg:x="853" fg:w="3"/><text x="67.6808%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="67.4308%" y="245" width="0.2372%" height="15" fill="rgb(234,8,54)" fg:x="853" fg:w="3"/><text x="67.6808%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.5889%" y="229" width="0.0791%" height="15" fill="rgb(209,134,38)" fg:x="855" fg:w="1"/><text x="67.8389%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (6 samples, 0.47%)</title><rect x="67.4308%" y="309" width="0.4743%" height="15" fill="rgb(230,127,29)" fg:x="853" fg:w="6"/><text x="67.6808%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (6 samples, 0.47%)</title><rect x="67.4308%" y="293" width="0.4743%" height="15" fill="rgb(242,44,41)" fg:x="853" fg:w="6"/><text x="67.6808%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="67.6680%" y="277" width="0.2372%" height="15" fill="rgb(222,56,43)" fg:x="856" fg:w="3"/><text x="67.9180%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="67.6680%" y="261" width="0.2372%" height="15" fill="rgb(238,39,47)" fg:x="856" fg:w="3"/><text x="67.9180%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="67.7470%" y="245" width="0.1581%" height="15" fill="rgb(226,79,43)" fg:x="857" fg:w="2"/><text x="67.9970%" y="255.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="67.9051%" y="293" width="0.0791%" height="15" fill="rgb(242,105,53)" fg:x="859" fg:w="1"/><text x="68.1551%" y="303.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="67.9051%" y="277" width="0.0791%" height="15" fill="rgb(251,132,46)" fg:x="859" fg:w="1"/><text x="68.1551%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="68.3794%" y="213" width="0.1581%" height="15" fill="rgb(231,77,14)" fg:x="865" fg:w="2"/><text x="68.6294%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.4585%" y="197" width="0.0791%" height="15" fill="rgb(240,135,9)" fg:x="866" fg:w="1"/><text x="68.7085%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="68.4585%" y="181" width="0.0791%" height="15" fill="rgb(248,109,14)" fg:x="866" fg:w="1"/><text x="68.7085%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.5375%" y="213" width="0.0791%" height="15" fill="rgb(227,146,52)" fg:x="867" fg:w="1"/><text x="68.7875%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="68.5375%" y="197" width="0.0791%" height="15" fill="rgb(232,54,3)" fg:x="867" fg:w="1"/><text x="68.7875%" y="207.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="68.6166%" y="213" width="0.2372%" height="15" fill="rgb(229,201,43)" fg:x="868" fg:w="3"/><text x="68.8666%" y="223.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (11 samples, 0.87%)</title><rect x="68.0632%" y="229" width="0.8696%" height="15" fill="rgb(252,161,33)" fg:x="861" fg:w="11"/><text x="68.3132%" y="239.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="68.8538%" y="213" width="0.0791%" height="15" fill="rgb(226,146,40)" fg:x="871" fg:w="1"/><text x="69.1038%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="68.8538%" y="197" width="0.0791%" height="15" fill="rgb(219,47,25)" fg:x="871" fg:w="1"/><text x="69.1038%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="68.8538%" y="181" width="0.0791%" height="15" fill="rgb(250,135,13)" fg:x="871" fg:w="1"/><text x="69.1038%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="68.8538%" y="165" width="0.0791%" height="15" fill="rgb(219,229,18)" fg:x="871" fg:w="1"/><text x="69.1038%" y="175.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (437 samples, 34.55%)</title><rect x="34.5455%" y="405" width="34.5455%" height="15" fill="rgb(217,152,27)" fg:x="437" fg:w="437"/><text x="34.7955%" y="415.50">&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::mod..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (402 samples, 31.78%)</title><rect x="37.3123%" y="389" width="31.7787%" height="15" fill="rgb(225,71,47)" fg:x="472" fg:w="402"/><text x="37.5623%" y="399.50">plugins_core::looking::model::Unqualified::qualify</text></g><g><title>indefinite::indefinite (402 samples, 31.78%)</title><rect x="37.3123%" y="373" width="31.7787%" height="15" fill="rgb(220,139,14)" fg:x="472" fg:w="402"/><text x="37.5623%" y="383.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (402 samples, 31.78%)</title><rect x="37.3123%" y="357" width="31.7787%" height="15" fill="rgb(247,54,32)" fg:x="472" fg:w="402"/><text x="37.5623%" y="367.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (402 samples, 31.78%)</title><rect x="37.3123%" y="341" width="31.7787%" height="15" fill="rgb(252,131,39)" fg:x="472" fg:w="402"/><text x="37.5623%" y="351.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::number::Number::check (204 samples, 16.13%)</title><rect x="52.9644%" y="325" width="16.1265%" height="15" fill="rgb(210,108,39)" fg:x="670" fg:w="204"/><text x="53.2144%" y="335.50">indefinite::rules::number..</text></g><g><title>regex::regex::string::Regex::is_match_at (15 samples, 1.19%)</title><rect x="67.9051%" y="309" width="1.1858%" height="15" fill="rgb(205,23,29)" fg:x="859" fg:w="15"/><text x="68.1551%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (14 samples, 1.11%)</title><rect x="67.9842%" y="293" width="1.1067%" height="15" fill="rgb(246,139,46)" fg:x="860" fg:w="14"/><text x="68.2342%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (14 samples, 1.11%)</title><rect x="67.9842%" y="277" width="1.1067%" height="15" fill="rgb(250,81,26)" fg:x="860" fg:w="14"/><text x="68.2342%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (14 samples, 1.11%)</title><rect x="67.9842%" y="261" width="1.1067%" height="15" fill="rgb(214,104,7)" fg:x="860" fg:w="14"/><text x="68.2342%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (13 samples, 1.03%)</title><rect x="68.0632%" y="245" width="1.0277%" height="15" fill="rgb(233,189,8)" fg:x="861" fg:w="13"/><text x="68.3132%" y="255.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="68.9328%" y="229" width="0.1581%" height="15" fill="rgb(228,141,17)" fg:x="872" fg:w="2"/><text x="69.1828%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="69.0119%" y="213" width="0.0791%" height="15" fill="rgb(247,157,1)" fg:x="873" fg:w="1"/><text x="69.2619%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="69.0119%" y="197" width="0.0791%" height="15" fill="rgb(249,225,5)" fg:x="873" fg:w="1"/><text x="69.2619%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0119%" y="181" width="0.0791%" height="15" fill="rgb(242,55,13)" fg:x="873" fg:w="1"/><text x="69.2619%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0909%" y="373" width="0.0791%" height="15" fill="rgb(230,49,50)" fg:x="874" fg:w="1"/><text x="69.3409%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.0909%" y="357" width="0.0791%" height="15" fill="rgb(241,111,38)" fg:x="874" fg:w="1"/><text x="69.3409%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.0909%" y="341" width="0.0791%" height="15" fill="rgb(252,155,4)" fg:x="874" fg:w="1"/><text x="69.3409%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.0909%" y="325" width="0.0791%" height="15" fill="rgb(212,69,32)" fg:x="874" fg:w="1"/><text x="69.3409%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.0909%" y="309" width="0.0791%" height="15" fill="rgb(243,107,47)" fg:x="874" fg:w="1"/><text x="69.3409%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0909%" y="293" width="0.0791%" height="15" fill="rgb(247,130,12)" fg:x="874" fg:w="1"/><text x="69.3409%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.0909%" y="277" width="0.0791%" height="15" fill="rgb(233,74,16)" fg:x="874" fg:w="1"/><text x="69.3409%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.0909%" y="261" width="0.0791%" height="15" fill="rgb(208,58,18)" fg:x="874" fg:w="1"/><text x="69.3409%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.0909%" y="245" width="0.0791%" height="15" fill="rgb(242,225,1)" fg:x="874" fg:w="1"/><text x="69.3409%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.0909%" y="229" width="0.0791%" height="15" fill="rgb(249,39,40)" fg:x="874" fg:w="1"/><text x="69.3409%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.0909%" y="213" width="0.0791%" height="15" fill="rgb(207,72,44)" fg:x="874" fg:w="1"/><text x="69.3409%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0909%" y="197" width="0.0791%" height="15" fill="rgb(215,193,12)" fg:x="874" fg:w="1"/><text x="69.3409%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="69.0909%" y="389" width="0.1581%" height="15" fill="rgb(248,41,39)" fg:x="874" fg:w="2"/><text x="69.3409%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1700%" y="373" width="0.0791%" height="15" fill="rgb(253,85,4)" fg:x="875" fg:w="1"/><text x="69.4200%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.1700%" y="357" width="0.0791%" height="15" fill="rgb(243,70,31)" fg:x="875" fg:w="1"/><text x="69.4200%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1700%" y="341" width="0.0791%" height="15" fill="rgb(253,195,26)" fg:x="875" fg:w="1"/><text x="69.4200%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="69.1700%" y="325" width="0.0791%" height="15" fill="rgb(243,42,11)" fg:x="875" fg:w="1"/><text x="69.4200%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="69.1700%" y="309" width="0.0791%" height="15" fill="rgb(239,66,17)" fg:x="875" fg:w="1"/><text x="69.4200%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="69.1700%" y="293" width="0.0791%" height="15" fill="rgb(217,132,21)" fg:x="875" fg:w="1"/><text x="69.4200%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="69.1700%" y="277" width="0.0791%" height="15" fill="rgb(252,202,21)" fg:x="875" fg:w="1"/><text x="69.4200%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1700%" y="261" width="0.0791%" height="15" fill="rgb(233,98,36)" fg:x="875" fg:w="1"/><text x="69.4200%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="69.1700%" y="245" width="0.0791%" height="15" fill="rgb(216,153,54)" fg:x="875" fg:w="1"/><text x="69.4200%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="69.1700%" y="229" width="0.0791%" height="15" fill="rgb(250,99,7)" fg:x="875" fg:w="1"/><text x="69.4200%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="69.1700%" y="213" width="0.0791%" height="15" fill="rgb(207,56,50)" fg:x="875" fg:w="1"/><text x="69.4200%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="69.1700%" y="197" width="0.0791%" height="15" fill="rgb(244,61,34)" fg:x="875" fg:w="1"/><text x="69.4200%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="69.1700%" y="181" width="0.0791%" height="15" fill="rgb(241,50,38)" fg:x="875" fg:w="1"/><text x="69.4200%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.1700%" y="165" width="0.0791%" height="15" fill="rgb(212,166,30)" fg:x="875" fg:w="1"/><text x="69.4200%" y="175.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::LoadAndStoreScope&gt;::load_scope (2 samples, 0.16%)</title><rect x="69.2490%" y="389" width="0.1581%" height="15" fill="rgb(249,127,32)" fg:x="876" fg:w="2"/><text x="69.4990%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.16%)</title><rect x="69.2490%" y="373" width="0.1581%" height="15" fill="rgb(209,103,0)" fg:x="876" fg:w="2"/><text x="69.4990%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.4071%" y="357" width="0.0791%" height="15" fill="rgb(238,209,51)" fg:x="878" fg:w="1"/><text x="69.6571%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4862%" y="325" width="0.0791%" height="15" fill="rgb(237,56,23)" fg:x="879" fg:w="1"/><text x="69.7362%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Acls&gt;::deserialize (2 samples, 0.16%)</title><rect x="69.4862%" y="357" width="0.1581%" height="15" fill="rgb(215,153,46)" fg:x="879" fg:w="2"/><text x="69.7362%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.4862%" y="341" width="0.1581%" height="15" fill="rgb(224,49,31)" fg:x="879" fg:w="2"/><text x="69.7362%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="69.5652%" y="325" width="0.0791%" height="15" fill="rgb(250,18,42)" fg:x="880" fg:w="1"/><text x="69.8152%" y="335.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="69.5652%" y="309" width="0.0791%" height="15" fill="rgb(215,176,39)" fg:x="880" fg:w="1"/><text x="69.8152%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.8024%" y="309" width="0.0791%" height="15" fill="rgb(223,77,29)" fg:x="883" fg:w="1"/><text x="70.0524%" y="319.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.9605%" y="261" width="0.0791%" height="15" fill="rgb(234,94,52)" fg:x="885" fg:w="1"/><text x="70.2105%" y="271.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (3 samples, 0.24%)</title><rect x="69.8814%" y="309" width="0.2372%" height="15" fill="rgb(220,154,50)" fg:x="884" fg:w="3"/><text x="70.1314%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="69.9605%" y="293" width="0.1581%" height="15" fill="rgb(212,11,10)" fg:x="885" fg:w="2"/><text x="70.2105%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="69.9605%" y="277" width="0.1581%" height="15" fill="rgb(205,166,19)" fg:x="885" fg:w="2"/><text x="70.2105%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.0395%" y="261" width="0.0791%" height="15" fill="rgb(244,198,16)" fg:x="886" fg:w="1"/><text x="70.2895%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.0395%" y="245" width="0.0791%" height="15" fill="rgb(219,69,12)" fg:x="886" fg:w="1"/><text x="70.2895%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="70.0395%" y="229" width="0.0791%" height="15" fill="rgb(245,30,7)" fg:x="886" fg:w="1"/><text x="70.2895%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (14 samples, 1.11%)</title><rect x="69.0909%" y="405" width="1.1067%" height="15" fill="rgb(218,221,48)" fg:x="874" fg:w="14"/><text x="69.3409%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (10 samples, 0.79%)</title><rect x="69.4071%" y="389" width="0.7905%" height="15" fill="rgb(216,66,15)" fg:x="878" fg:w="10"/><text x="69.6571%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (10 samples, 0.79%)</title><rect x="69.4071%" y="373" width="0.7905%" height="15" fill="rgb(226,122,50)" fg:x="878" fg:w="10"/><text x="69.6571%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (7 samples, 0.55%)</title><rect x="69.6443%" y="357" width="0.5534%" height="15" fill="rgb(239,156,16)" fg:x="881" fg:w="7"/><text x="69.8943%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (6 samples, 0.47%)</title><rect x="69.7233%" y="341" width="0.4743%" height="15" fill="rgb(224,27,38)" fg:x="882" fg:w="6"/><text x="69.9733%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (6 samples, 0.47%)</title><rect x="69.7233%" y="325" width="0.4743%" height="15" fill="rgb(224,39,27)" fg:x="882" fg:w="6"/><text x="69.9733%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="70.1186%" y="309" width="0.0791%" height="15" fill="rgb(215,92,29)" fg:x="887" fg:w="1"/><text x="70.3686%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.1186%" y="293" width="0.0791%" height="15" fill="rgb(207,159,16)" fg:x="887" fg:w="1"/><text x="70.3686%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_string (1 samples, 0.08%)</title><rect x="70.1186%" y="277" width="0.0791%" height="15" fill="rgb(238,163,47)" fg:x="887" fg:w="1"/><text x="70.3686%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1976%" y="341" width="0.0791%" height="15" fill="rgb(219,91,49)" fg:x="888" fg:w="1"/><text x="70.4476%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1976%" y="325" width="0.0791%" height="15" fill="rgb(227,167,31)" fg:x="888" fg:w="1"/><text x="70.4476%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.1976%" y="309" width="0.0791%" height="15" fill="rgb(234,80,54)" fg:x="888" fg:w="1"/><text x="70.4476%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="70.1976%" y="293" width="0.0791%" height="15" fill="rgb(212,114,2)" fg:x="888" fg:w="1"/><text x="70.4476%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.1976%" y="277" width="0.0791%" height="15" fill="rgb(234,50,24)" fg:x="888" fg:w="1"/><text x="70.4476%" y="287.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.2767%" y="341" width="0.0791%" height="15" fill="rgb(221,68,8)" fg:x="889" fg:w="1"/><text x="70.5267%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.2767%" y="325" width="0.0791%" height="15" fill="rgb(254,180,31)" fg:x="889" fg:w="1"/><text x="70.5267%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="70.2767%" y="309" width="0.0791%" height="15" fill="rgb(247,130,50)" fg:x="889" fg:w="1"/><text x="70.5267%" y="319.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.4348%" y="213" width="0.0791%" height="15" fill="rgb(211,109,4)" fg:x="891" fg:w="1"/><text x="70.6848%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.4348%" y="197" width="0.0791%" height="15" fill="rgb(238,50,21)" fg:x="891" fg:w="1"/><text x="70.6848%" y="207.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="70.4348%" y="181" width="0.0791%" height="15" fill="rgb(225,57,45)" fg:x="891" fg:w="1"/><text x="70.6848%" y="191.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.4348%" y="165" width="0.0791%" height="15" fill="rgb(209,196,50)" fg:x="891" fg:w="1"/><text x="70.6848%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4348%" y="149" width="0.0791%" height="15" fill="rgb(242,140,13)" fg:x="891" fg:w="1"/><text x="70.6848%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="70.5138%" y="213" width="0.0791%" height="15" fill="rgb(217,111,7)" fg:x="892" fg:w="1"/><text x="70.7638%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="70.3557%" y="245" width="0.3953%" height="15" fill="rgb(253,193,51)" fg:x="890" fg:w="5"/><text x="70.6057%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="70.3557%" y="229" width="0.3953%" height="15" fill="rgb(252,70,29)" fg:x="890" fg:w="5"/><text x="70.6057%" y="239.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (2 samples, 0.16%)</title><rect x="70.5929%" y="213" width="0.1581%" height="15" fill="rgb(232,127,12)" fg:x="893" fg:w="2"/><text x="70.8429%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="70.5929%" y="197" width="0.1581%" height="15" fill="rgb(211,180,21)" fg:x="893" fg:w="2"/><text x="70.8429%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.6719%" y="181" width="0.0791%" height="15" fill="rgb(229,72,13)" fg:x="894" fg:w="1"/><text x="70.9219%" y="191.50"></text></g><g><title>kernel::model::entity::Entity::from_value (6 samples, 0.47%)</title><rect x="70.3557%" y="341" width="0.4743%" height="15" fill="rgb(240,211,49)" fg:x="890" fg:w="6"/><text x="70.6057%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (6 samples, 0.47%)</title><rect x="70.3557%" y="325" width="0.4743%" height="15" fill="rgb(219,149,40)" fg:x="890" fg:w="6"/><text x="70.6057%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="70.3557%" y="309" width="0.4743%" height="15" fill="rgb(210,127,46)" fg:x="890" fg:w="6"/><text x="70.6057%" y="319.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (6 samples, 0.47%)</title><rect x="70.3557%" y="293" width="0.4743%" height="15" fill="rgb(220,106,7)" fg:x="890" fg:w="6"/><text x="70.6057%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (6 samples, 0.47%)</title><rect x="70.3557%" y="277" width="0.4743%" height="15" fill="rgb(249,31,22)" fg:x="890" fg:w="6"/><text x="70.6057%" y="287.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (6 samples, 0.47%)</title><rect x="70.3557%" y="261" width="0.4743%" height="15" fill="rgb(253,1,49)" fg:x="890" fg:w="6"/><text x="70.6057%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7510%" y="245" width="0.0791%" height="15" fill="rgb(227,144,33)" fg:x="895" fg:w="1"/><text x="71.0010%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="70.7510%" y="229" width="0.0791%" height="15" fill="rgb(249,163,44)" fg:x="895" fg:w="1"/><text x="71.0010%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7510%" y="213" width="0.0791%" height="15" fill="rgb(234,15,39)" fg:x="895" fg:w="1"/><text x="71.0010%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="70.7510%" y="197" width="0.0791%" height="15" fill="rgb(207,66,16)" fg:x="895" fg:w="1"/><text x="71.0010%" y="207.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (9 samples, 0.71%)</title><rect x="70.1976%" y="357" width="0.7115%" height="15" fill="rgb(233,112,24)" fg:x="888" fg:w="9"/><text x="70.4476%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="70.8300%" y="341" width="0.0791%" height="15" fill="rgb(230,90,22)" fg:x="896" fg:w="1"/><text x="71.0800%" y="351.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="70.8300%" y="325" width="0.0791%" height="15" fill="rgb(229,61,13)" fg:x="896" fg:w="1"/><text x="71.0800%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8300%" y="309" width="0.0791%" height="15" fill="rgb(225,57,24)" fg:x="896" fg:w="1"/><text x="71.0800%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8300%" y="293" width="0.0791%" height="15" fill="rgb(208,169,48)" fg:x="896" fg:w="1"/><text x="71.0800%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8300%" y="277" width="0.0791%" height="15" fill="rgb(244,218,51)" fg:x="896" fg:w="1"/><text x="71.0800%" y="287.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8300%" y="261" width="0.0791%" height="15" fill="rgb(214,148,10)" fg:x="896" fg:w="1"/><text x="71.0800%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8300%" y="245" width="0.0791%" height="15" fill="rgb(225,174,27)" fg:x="896" fg:w="1"/><text x="71.0800%" y="255.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8300%" y="229" width="0.0791%" height="15" fill="rgb(230,96,26)" fg:x="896" fg:w="1"/><text x="71.0800%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8300%" y="213" width="0.0791%" height="15" fill="rgb(232,10,30)" fg:x="896" fg:w="1"/><text x="71.0800%" y="223.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8300%" y="197" width="0.0791%" height="15" fill="rgb(222,8,50)" fg:x="896" fg:w="1"/><text x="71.0800%" y="207.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8300%" y="181" width="0.0791%" height="15" fill="rgb(213,81,27)" fg:x="896" fg:w="1"/><text x="71.0800%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="70.8300%" y="165" width="0.0791%" height="15" fill="rgb(245,50,10)" fg:x="896" fg:w="1"/><text x="71.0800%" y="175.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="70.8300%" y="149" width="0.0791%" height="15" fill="rgb(216,100,18)" fg:x="896" fg:w="1"/><text x="71.0800%" y="159.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (503 samples, 39.76%)</title><rect x="31.3834%" y="629" width="39.7628%" height="15" fill="rgb(236,147,54)" fg:x="397" fg:w="503"/><text x="31.6334%" y="639.50">&lt;engine::session::Session as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (503 samples, 39.76%)</title><rect x="31.3834%" y="613" width="39.7628%" height="15" fill="rgb(205,143,26)" fg:x="397" fg:w="503"/><text x="31.6334%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (503 samples, 39.76%)</title><rect x="31.3834%" y="597" width="39.7628%" height="15" fill="rgb(236,26,9)" fg:x="397" fg:w="503"/><text x="31.6334%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (503 samples, 39.76%)</title><rect x="31.3834%" y="581" width="39.7628%" height="15" fill="rgb(221,165,53)" fg:x="397" fg:w="503"/><text x="31.6334%" y="591.50">&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (481 samples, 38.02%)</title><rect x="33.1225%" y="565" width="38.0237%" height="15" fill="rgb(214,110,17)" fg:x="419" fg:w="481"/><text x="33.3725%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (481 samples, 38.02%)</title><rect x="33.1225%" y="549" width="38.0237%" height="15" fill="rgb(237,197,12)" fg:x="419" fg:w="481"/><text x="33.3725%" y="559.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Mid..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (481 samples, 38.02%)</title><rect x="33.1225%" y="533" width="38.0237%" height="15" fill="rgb(205,84,17)" fg:x="419" fg:w="481"/><text x="33.3725%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (481 samples, 38.02%)</title><rect x="33.1225%" y="517" width="38.0237%" height="15" fill="rgb(237,18,45)" fg:x="419" fg:w="481"/><text x="33.3725%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (481 samples, 38.02%)</title><rect x="33.1225%" y="501" width="38.0237%" height="15" fill="rgb(221,87,14)" fg:x="419" fg:w="481"/><text x="33.3725%" y="511.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (481 samples, 38.02%)</title><rect x="33.1225%" y="485" width="38.0237%" height="15" fill="rgb(238,186,15)" fg:x="419" fg:w="481"/><text x="33.3725%" y="495.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (481 samples, 38.02%)</title><rect x="33.1225%" y="469" width="38.0237%" height="15" fill="rgb(208,115,11)" fg:x="419" fg:w="481"/><text x="33.3725%" y="479.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;:..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (481 samples, 38.02%)</title><rect x="33.1225%" y="453" width="38.0237%" height="15" fill="rgb(254,175,0)" fg:x="419" fg:w="481"/><text x="33.3725%" y="463.50">&lt;engine::session::state::State as kernel::actions::Performer&gt;:..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (481 samples, 38.02%)</title><rect x="33.1225%" y="437" width="38.0237%" height="15" fill="rgb(227,24,42)" fg:x="419" fg:w="481"/><text x="33.3725%" y="447.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions..</text></g><g><title>plugins_core::looking::model::new_area_observation (465 samples, 36.76%)</title><rect x="34.3874%" y="421" width="36.7589%" height="15" fill="rgb(223,211,37)" fg:x="435" fg:w="465"/><text x="34.6374%" y="431.50">plugins_core::looking::model::new_area_observation</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (12 samples, 0.95%)</title><rect x="70.1976%" y="405" width="0.9486%" height="15" fill="rgb(235,49,27)" fg:x="888" fg:w="12"/><text x="70.4476%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (12 samples, 0.95%)</title><rect x="70.1976%" y="389" width="0.9486%" height="15" fill="rgb(254,97,51)" fg:x="888" fg:w="12"/><text x="70.4476%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (12 samples, 0.95%)</title><rect x="70.1976%" y="373" width="0.9486%" height="15" fill="rgb(249,51,40)" fg:x="888" fg:w="12"/><text x="70.4476%" y="383.50"></text></g><g><title>engine::session::internal::Maps::lookup_entity (3 samples, 0.24%)</title><rect x="70.9091%" y="357" width="0.2372%" height="15" fill="rgb(210,128,45)" fg:x="897" fg:w="3"/><text x="71.1591%" y="367.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="71.0672%" y="341" width="0.0791%" height="15" fill="rgb(224,137,50)" fg:x="899" fg:w="1"/><text x="71.3172%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.2253%" y="597" width="0.0791%" height="15" fill="rgb(242,15,9)" fg:x="901" fg:w="1"/><text x="71.4753%" y="607.50"></text></g><g><title>&lt;kernel::model::EntityPtr as engine::users::model::HasUsernames&gt;::find_name_key (4 samples, 0.32%)</title><rect x="71.1462%" y="629" width="0.3162%" height="15" fill="rgb(233,187,41)" fg:x="900" fg:w="4"/><text x="71.3962%" y="639.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="71.1462%" y="613" width="0.3162%" height="15" fill="rgb(227,2,29)" fg:x="900" fg:w="4"/><text x="71.3962%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="71.3043%" y="597" width="0.1581%" height="15" fill="rgb(222,70,3)" fg:x="902" fg:w="2"/><text x="71.5543%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="71.3043%" y="581" width="0.1581%" height="15" fill="rgb(213,11,42)" fg:x="902" fg:w="2"/><text x="71.5543%" y="591.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::from_box (1 samples, 0.08%)</title><rect x="71.4625%" y="629" width="0.0791%" height="15" fill="rgb(225,150,9)" fg:x="904" fg:w="1"/><text x="71.7125%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.6996%" y="533" width="0.1581%" height="15" fill="rgb(230,162,45)" fg:x="907" fg:w="2"/><text x="71.9496%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="71.6996%" y="517" width="0.1581%" height="15" fill="rgb(222,14,52)" fg:x="907" fg:w="2"/><text x="71.9496%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="71.6996%" y="501" width="0.1581%" height="15" fill="rgb(254,198,14)" fg:x="907" fg:w="2"/><text x="71.9496%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="71.6996%" y="485" width="0.1581%" height="15" fill="rgb(220,217,30)" fg:x="907" fg:w="2"/><text x="71.9496%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="71.6996%" y="469" width="0.1581%" height="15" fill="rgb(215,146,41)" fg:x="907" fg:w="2"/><text x="71.9496%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.6996%" y="453" width="0.1581%" height="15" fill="rgb(217,27,36)" fg:x="907" fg:w="2"/><text x="71.9496%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.16%)</title><rect x="71.6996%" y="437" width="0.1581%" height="15" fill="rgb(219,218,39)" fg:x="907" fg:w="2"/><text x="71.9496%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="71.6996%" y="421" width="0.1581%" height="15" fill="rgb(219,4,42)" fg:x="907" fg:w="2"/><text x="71.9496%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.16%)</title><rect x="71.6996%" y="405" width="0.1581%" height="15" fill="rgb(249,119,36)" fg:x="907" fg:w="2"/><text x="71.9496%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="71.6996%" y="389" width="0.1581%" height="15" fill="rgb(209,23,33)" fg:x="907" fg:w="2"/><text x="71.9496%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.16%)</title><rect x="71.6996%" y="373" width="0.1581%" height="15" fill="rgb(211,10,0)" fg:x="907" fg:w="2"/><text x="71.9496%" y="383.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="71.6996%" y="357" width="0.1581%" height="15" fill="rgb(208,99,37)" fg:x="907" fg:w="2"/><text x="71.9496%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="71.5415%" y="581" width="0.3953%" height="15" fill="rgb(213,132,31)" fg:x="905" fg:w="5"/><text x="71.7915%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="71.6206%" y="565" width="0.3162%" height="15" fill="rgb(243,129,40)" fg:x="906" fg:w="4"/><text x="71.8706%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="71.6996%" y="549" width="0.2372%" height="15" fill="rgb(210,66,33)" fg:x="907" fg:w="3"/><text x="71.9496%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8577%" y="533" width="0.0791%" height="15" fill="rgb(209,189,4)" fg:x="909" fg:w="1"/><text x="72.1077%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="71.8577%" y="517" width="0.0791%" height="15" fill="rgb(214,107,37)" fg:x="909" fg:w="1"/><text x="72.1077%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="71.8577%" y="501" width="0.0791%" height="15" fill="rgb(245,88,54)" fg:x="909" fg:w="1"/><text x="72.1077%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0158%" y="533" width="0.0791%" height="15" fill="rgb(205,146,20)" fg:x="911" fg:w="1"/><text x="72.2658%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0158%" y="517" width="0.0791%" height="15" fill="rgb(220,161,25)" fg:x="911" fg:w="1"/><text x="72.2658%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0158%" y="501" width="0.0791%" height="15" fill="rgb(215,152,15)" fg:x="911" fg:w="1"/><text x="72.2658%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.0158%" y="485" width="0.0791%" height="15" fill="rgb(233,192,44)" fg:x="911" fg:w="1"/><text x="72.2658%" y="495.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0158%" y="469" width="0.0791%" height="15" fill="rgb(240,170,46)" fg:x="911" fg:w="1"/><text x="72.2658%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1739%" y="485" width="0.0791%" height="15" fill="rgb(207,104,33)" fg:x="913" fg:w="1"/><text x="72.4239%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1739%" y="469" width="0.0791%" height="15" fill="rgb(219,21,39)" fg:x="913" fg:w="1"/><text x="72.4239%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.1739%" y="453" width="0.0791%" height="15" fill="rgb(214,133,29)" fg:x="913" fg:w="1"/><text x="72.4239%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.1739%" y="437" width="0.0791%" height="15" fill="rgb(226,93,6)" fg:x="913" fg:w="1"/><text x="72.4239%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.2530%" y="389" width="0.0791%" height="15" fill="rgb(252,222,34)" fg:x="914" fg:w="1"/><text x="72.5030%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="72.2530%" y="373" width="0.0791%" height="15" fill="rgb(252,92,48)" fg:x="914" fg:w="1"/><text x="72.5030%" y="383.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.2530%" y="357" width="0.0791%" height="15" fill="rgb(245,223,24)" fg:x="914" fg:w="1"/><text x="72.5030%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="72.2530%" y="485" width="0.1581%" height="15" fill="rgb(205,176,3)" fg:x="914" fg:w="2"/><text x="72.5030%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="72.2530%" y="469" width="0.1581%" height="15" fill="rgb(235,151,15)" fg:x="914" fg:w="2"/><text x="72.5030%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="72.2530%" y="453" width="0.1581%" height="15" fill="rgb(237,209,11)" fg:x="914" fg:w="2"/><text x="72.5030%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.2530%" y="437" width="0.1581%" height="15" fill="rgb(243,227,24)" fg:x="914" fg:w="2"/><text x="72.5030%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.2530%" y="421" width="0.1581%" height="15" fill="rgb(239,193,16)" fg:x="914" fg:w="2"/><text x="72.5030%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (2 samples, 0.16%)</title><rect x="72.2530%" y="405" width="0.1581%" height="15" fill="rgb(231,27,9)" fg:x="914" fg:w="2"/><text x="72.5030%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="72.3320%" y="389" width="0.0791%" height="15" fill="rgb(219,169,10)" fg:x="915" fg:w="1"/><text x="72.5820%" y="399.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::invalid_type (1 samples, 0.08%)</title><rect x="72.3320%" y="373" width="0.0791%" height="15" fill="rgb(244,229,43)" fg:x="915" fg:w="1"/><text x="72.5820%" y="383.50"></text></g><g><title>&lt;serde_json::error::Error as serde::de::Error&gt;::custom (1 samples, 0.08%)</title><rect x="72.3320%" y="357" width="0.0791%" height="15" fill="rgb(254,38,20)" fg:x="915" fg:w="1"/><text x="72.5820%" y="367.50"></text></g><g><title>serde_json::error::make_error (1 samples, 0.08%)</title><rect x="72.3320%" y="341" width="0.0791%" height="15" fill="rgb(250,47,30)" fg:x="915" fg:w="1"/><text x="72.5820%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.08%)</title><rect x="72.3320%" y="325" width="0.0791%" height="15" fill="rgb(224,124,36)" fg:x="915" fg:w="1"/><text x="72.5820%" y="335.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="72.3320%" y="309" width="0.0791%" height="15" fill="rgb(246,68,51)" fg:x="915" fg:w="1"/><text x="72.5820%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="72.0949%" y="533" width="0.3953%" height="15" fill="rgb(253,43,49)" fg:x="912" fg:w="5"/><text x="72.3449%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="72.0949%" y="517" width="0.3953%" height="15" fill="rgb(219,54,36)" fg:x="912" fg:w="5"/><text x="72.3449%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="72.1739%" y="501" width="0.3162%" height="15" fill="rgb(227,133,34)" fg:x="913" fg:w="4"/><text x="72.4239%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="72.4111%" y="485" width="0.0791%" height="15" fill="rgb(247,227,15)" fg:x="916" fg:w="1"/><text x="72.6611%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="72.4111%" y="469" width="0.0791%" height="15" fill="rgb(229,96,14)" fg:x="916" fg:w="1"/><text x="72.6611%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.4111%" y="453" width="0.0791%" height="15" fill="rgb(220,79,17)" fg:x="916" fg:w="1"/><text x="72.6611%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.71%)</title><rect x="71.9368%" y="581" width="0.7115%" height="15" fill="rgb(205,131,53)" fg:x="910" fg:w="9"/><text x="72.1868%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.71%)</title><rect x="71.9368%" y="565" width="0.7115%" height="15" fill="rgb(209,50,29)" fg:x="910" fg:w="9"/><text x="72.1868%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (9 samples, 0.71%)</title><rect x="71.9368%" y="549" width="0.7115%" height="15" fill="rgb(245,86,46)" fg:x="910" fg:w="9"/><text x="72.1868%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.4901%" y="533" width="0.1581%" height="15" fill="rgb(235,66,46)" fg:x="917" fg:w="2"/><text x="72.7401%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.4901%" y="517" width="0.1581%" height="15" fill="rgb(232,148,31)" fg:x="917" fg:w="2"/><text x="72.7401%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.4901%" y="501" width="0.1581%" height="15" fill="rgb(217,149,8)" fg:x="917" fg:w="2"/><text x="72.7401%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.4901%" y="485" width="0.1581%" height="15" fill="rgb(209,183,11)" fg:x="917" fg:w="2"/><text x="72.7401%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.4901%" y="469" width="0.1581%" height="15" fill="rgb(208,55,20)" fg:x="917" fg:w="2"/><text x="72.7401%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.4901%" y="453" width="0.1581%" height="15" fill="rgb(218,39,14)" fg:x="917" fg:w="2"/><text x="72.7401%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.5692%" y="437" width="0.0791%" height="15" fill="rgb(216,169,33)" fg:x="918" fg:w="1"/><text x="72.8192%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.6482%" y="517" width="0.0791%" height="15" fill="rgb(233,80,24)" fg:x="919" fg:w="1"/><text x="72.8982%" y="527.50"></text></g><g><title>engine::session::internal::Added::find_refs (16 samples, 1.26%)</title><rect x="71.5415%" y="613" width="1.2648%" height="15" fill="rgb(213,179,31)" fg:x="905" fg:w="16"/><text x="71.7915%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (16 samples, 1.26%)</title><rect x="71.5415%" y="597" width="1.2648%" height="15" fill="rgb(209,19,5)" fg:x="905" fg:w="16"/><text x="71.7915%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="72.6482%" y="581" width="0.1581%" height="15" fill="rgb(219,18,35)" fg:x="919" fg:w="2"/><text x="72.8982%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="72.6482%" y="565" width="0.1581%" height="15" fill="rgb(209,169,16)" fg:x="919" fg:w="2"/><text x="72.8982%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="72.6482%" y="549" width="0.1581%" height="15" fill="rgb(245,90,51)" fg:x="919" fg:w="2"/><text x="72.8982%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="72.6482%" y="533" width="0.1581%" height="15" fill="rgb(220,99,45)" fg:x="919" fg:w="2"/><text x="72.8982%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="72.7273%" y="517" width="0.0791%" height="15" fill="rgb(249,89,25)" fg:x="920" fg:w="1"/><text x="72.9773%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="72.7273%" y="501" width="0.0791%" height="15" fill="rgb(239,193,0)" fg:x="920" fg:w="1"/><text x="72.9773%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.7273%" y="485" width="0.0791%" height="15" fill="rgb(231,126,1)" fg:x="920" fg:w="1"/><text x="72.9773%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8063%" y="597" width="0.0791%" height="15" fill="rgb(243,166,3)" fg:x="921" fg:w="1"/><text x="73.0563%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8063%" y="581" width="0.0791%" height="15" fill="rgb(223,22,34)" fg:x="921" fg:w="1"/><text x="73.0563%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8063%" y="565" width="0.0791%" height="15" fill="rgb(251,52,51)" fg:x="921" fg:w="1"/><text x="73.0563%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8854%" y="549" width="0.0791%" height="15" fill="rgb(221,165,28)" fg:x="922" fg:w="1"/><text x="73.1354%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8854%" y="533" width="0.0791%" height="15" fill="rgb(218,121,47)" fg:x="922" fg:w="1"/><text x="73.1354%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="72.8854%" y="517" width="0.0791%" height="15" fill="rgb(209,120,9)" fg:x="922" fg:w="1"/><text x="73.1354%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8854%" y="501" width="0.0791%" height="15" fill="rgb(236,68,12)" fg:x="922" fg:w="1"/><text x="73.1354%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="72.8854%" y="485" width="0.0791%" height="15" fill="rgb(225,194,26)" fg:x="922" fg:w="1"/><text x="73.1354%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="72.8854%" y="469" width="0.0791%" height="15" fill="rgb(231,84,39)" fg:x="922" fg:w="1"/><text x="73.1354%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="72.8854%" y="453" width="0.0791%" height="15" fill="rgb(210,11,45)" fg:x="922" fg:w="1"/><text x="73.1354%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="72.8854%" y="437" width="0.0791%" height="15" fill="rgb(224,54,52)" fg:x="922" fg:w="1"/><text x="73.1354%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="72.8854%" y="421" width="0.0791%" height="15" fill="rgb(238,102,14)" fg:x="922" fg:w="1"/><text x="73.1354%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="72.8854%" y="405" width="0.0791%" height="15" fill="rgb(243,160,52)" fg:x="922" fg:w="1"/><text x="73.1354%" y="415.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="72.8854%" y="597" width="0.1581%" height="15" fill="rgb(216,114,19)" fg:x="922" fg:w="2"/><text x="73.1354%" y="607.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="72.8854%" y="581" width="0.1581%" height="15" fill="rgb(244,166,37)" fg:x="922" fg:w="2"/><text x="73.1354%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="72.8854%" y="565" width="0.1581%" height="15" fill="rgb(246,29,44)" fg:x="922" fg:w="2"/><text x="73.1354%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="72.9644%" y="549" width="0.0791%" height="15" fill="rgb(215,56,53)" fg:x="923" fg:w="1"/><text x="73.2144%" y="559.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="73.0435%" y="597" width="0.0791%" height="15" fill="rgb(217,60,2)" fg:x="924" fg:w="1"/><text x="73.2935%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.0435%" y="581" width="0.0791%" height="15" fill="rgb(207,26,24)" fg:x="924" fg:w="1"/><text x="73.2935%" y="591.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="73.0435%" y="565" width="0.0791%" height="15" fill="rgb(252,210,15)" fg:x="924" fg:w="1"/><text x="73.2935%" y="575.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="73.0435%" y="549" width="0.0791%" height="15" fill="rgb(253,209,26)" fg:x="924" fg:w="1"/><text x="73.2935%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.2016%" y="517" width="0.0791%" height="15" fill="rgb(238,170,14)" fg:x="926" fg:w="1"/><text x="73.4516%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.2806%" y="517" width="0.0791%" height="15" fill="rgb(216,178,15)" fg:x="927" fg:w="1"/><text x="73.5306%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.3597%" y="469" width="0.0791%" height="15" fill="rgb(250,197,2)" fg:x="928" fg:w="1"/><text x="73.6097%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.3597%" y="453" width="0.0791%" height="15" fill="rgb(212,70,42)" fg:x="928" fg:w="1"/><text x="73.6097%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="73.3597%" y="437" width="0.0791%" height="15" fill="rgb(227,213,9)" fg:x="928" fg:w="1"/><text x="73.6097%" y="447.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="73.1225%" y="597" width="0.3953%" height="15" fill="rgb(245,99,25)" fg:x="925" fg:w="5"/><text x="73.3725%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="73.1225%" y="581" width="0.3953%" height="15" fill="rgb(250,82,29)" fg:x="925" fg:w="5"/><text x="73.3725%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.1225%" y="565" width="0.3953%" height="15" fill="rgb(241,226,54)" fg:x="925" fg:w="5"/><text x="73.3725%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (5 samples, 0.40%)</title><rect x="73.1225%" y="549" width="0.3953%" height="15" fill="rgb(221,99,41)" fg:x="925" fg:w="5"/><text x="73.3725%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="73.1225%" y="533" width="0.3953%" height="15" fill="rgb(213,90,21)" fg:x="925" fg:w="5"/><text x="73.3725%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.3597%" y="517" width="0.1581%" height="15" fill="rgb(205,208,24)" fg:x="928" fg:w="2"/><text x="73.6097%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="73.3597%" y="501" width="0.1581%" height="15" fill="rgb(246,31,12)" fg:x="928" fg:w="2"/><text x="73.6097%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="73.3597%" y="485" width="0.1581%" height="15" fill="rgb(213,154,6)" fg:x="928" fg:w="2"/><text x="73.6097%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.4387%" y="469" width="0.0791%" height="15" fill="rgb(222,163,29)" fg:x="929" fg:w="1"/><text x="73.6887%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4387%" y="453" width="0.0791%" height="15" fill="rgb(227,201,8)" fg:x="929" fg:w="1"/><text x="73.6887%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.4387%" y="437" width="0.0791%" height="15" fill="rgb(233,9,32)" fg:x="929" fg:w="1"/><text x="73.6887%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5968%" y="405" width="0.0791%" height="15" fill="rgb(217,54,24)" fg:x="931" fg:w="1"/><text x="73.8468%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.5178%" y="453" width="0.2372%" height="15" fill="rgb(235,192,0)" fg:x="930" fg:w="3"/><text x="73.7678%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="73.5178%" y="437" width="0.2372%" height="15" fill="rgb(235,45,9)" fg:x="930" fg:w="3"/><text x="73.7678%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="73.5178%" y="421" width="0.2372%" height="15" fill="rgb(246,42,40)" fg:x="930" fg:w="3"/><text x="73.7678%" y="431.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.08%)</title><rect x="73.6759%" y="405" width="0.0791%" height="15" fill="rgb(248,111,24)" fg:x="932" fg:w="1"/><text x="73.9259%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="73.5178%" y="469" width="0.3162%" height="15" fill="rgb(249,65,22)" fg:x="930" fg:w="4"/><text x="73.7678%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="73.7549%" y="453" width="0.0791%" height="15" fill="rgb(238,111,51)" fg:x="933" fg:w="1"/><text x="74.0049%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="73.7549%" y="437" width="0.0791%" height="15" fill="rgb(250,118,22)" fg:x="933" fg:w="1"/><text x="74.0049%" y="447.50"></text></g><g><title>engine::session::Session::load_entity (30 samples, 2.37%)</title><rect x="71.5415%" y="629" width="2.3715%" height="15" fill="rgb(234,84,26)" fg:x="905" fg:w="30"/><text x="71.7915%" y="639.50">en..</text></g><g><title>engine::session::internal::Entities::add_persisted (14 samples, 1.11%)</title><rect x="72.8063%" y="613" width="1.1067%" height="15" fill="rgb(243,172,12)" fg:x="921" fg:w="14"/><text x="73.0563%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (5 samples, 0.40%)</title><rect x="73.5178%" y="597" width="0.3953%" height="15" fill="rgb(236,150,49)" fg:x="930" fg:w="5"/><text x="73.7678%" y="607.50"></text></g><g><title>serde_json::de::from_trait (5 samples, 0.40%)</title><rect x="73.5178%" y="581" width="0.3953%" height="15" fill="rgb(225,197,26)" fg:x="930" fg:w="5"/><text x="73.7678%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="73.5178%" y="565" width="0.3953%" height="15" fill="rgb(214,17,42)" fg:x="930" fg:w="5"/><text x="73.7678%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="73.5178%" y="549" width="0.3953%" height="15" fill="rgb(224,165,40)" fg:x="930" fg:w="5"/><text x="73.7678%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="73.5178%" y="533" width="0.3953%" height="15" fill="rgb(246,100,4)" fg:x="930" fg:w="5"/><text x="73.7678%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="73.5178%" y="517" width="0.3953%" height="15" fill="rgb(222,103,0)" fg:x="930" fg:w="5"/><text x="73.7678%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="73.5178%" y="501" width="0.3953%" height="15" fill="rgb(227,189,26)" fg:x="930" fg:w="5"/><text x="73.7678%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="73.5178%" y="485" width="0.3953%" height="15" fill="rgb(214,202,17)" fg:x="930" fg:w="5"/><text x="73.7678%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="73.8340%" y="469" width="0.0791%" height="15" fill="rgb(229,111,3)" fg:x="934" fg:w="1"/><text x="74.0840%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9921%" y="549" width="0.0791%" height="15" fill="rgb(229,172,15)" fg:x="936" fg:w="1"/><text x="74.2421%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9921%" y="533" width="0.0791%" height="15" fill="rgb(230,224,35)" fg:x="936" fg:w="1"/><text x="74.2421%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.9921%" y="517" width="0.0791%" height="15" fill="rgb(251,141,6)" fg:x="936" fg:w="1"/><text x="74.2421%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9921%" y="501" width="0.0791%" height="15" fill="rgb(225,208,6)" fg:x="936" fg:w="1"/><text x="74.2421%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.9921%" y="485" width="0.0791%" height="15" fill="rgb(246,181,16)" fg:x="936" fg:w="1"/><text x="74.2421%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.9921%" y="469" width="0.0791%" height="15" fill="rgb(227,129,36)" fg:x="936" fg:w="1"/><text x="74.2421%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.9921%" y="453" width="0.0791%" height="15" fill="rgb(248,117,24)" fg:x="936" fg:w="1"/><text x="74.2421%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.9921%" y="437" width="0.0791%" height="15" fill="rgb(214,185,35)" fg:x="936" fg:w="1"/><text x="74.2421%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9921%" y="421" width="0.0791%" height="15" fill="rgb(236,150,34)" fg:x="936" fg:w="1"/><text x="74.2421%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.9921%" y="405" width="0.0791%" height="15" fill="rgb(243,228,27)" fg:x="936" fg:w="1"/><text x="74.2421%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.9921%" y="389" width="0.0791%" height="15" fill="rgb(245,77,44)" fg:x="936" fg:w="1"/><text x="74.2421%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.9921%" y="373" width="0.0791%" height="15" fill="rgb(235,214,42)" fg:x="936" fg:w="1"/><text x="74.2421%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.9921%" y="357" width="0.0791%" height="15" fill="rgb(221,74,3)" fg:x="936" fg:w="1"/><text x="74.2421%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.9921%" y="341" width="0.0791%" height="15" fill="rgb(206,121,29)" fg:x="936" fg:w="1"/><text x="74.2421%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.9921%" y="325" width="0.0791%" height="15" fill="rgb(249,131,53)" fg:x="936" fg:w="1"/><text x="74.2421%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.9921%" y="581" width="0.2372%" height="15" fill="rgb(236,170,29)" fg:x="936" fg:w="3"/><text x="74.2421%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.9921%" y="565" width="0.2372%" height="15" fill="rgb(247,96,15)" fg:x="936" fg:w="3"/><text x="74.2421%" y="575.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="74.0711%" y="549" width="0.1581%" height="15" fill="rgb(211,210,7)" fg:x="937" fg:w="2"/><text x="74.3211%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="74.2292%" y="581" width="0.1581%" height="15" fill="rgb(240,88,50)" fg:x="939" fg:w="2"/><text x="74.4792%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="74.2292%" y="565" width="0.1581%" height="15" fill="rgb(209,229,26)" fg:x="939" fg:w="2"/><text x="74.4792%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="74.3083%" y="549" width="0.0791%" height="15" fill="rgb(210,68,23)" fg:x="940" fg:w="1"/><text x="74.5583%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.3083%" y="533" width="0.0791%" height="15" fill="rgb(229,180,13)" fg:x="940" fg:w="1"/><text x="74.5583%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.3083%" y="517" width="0.0791%" height="15" fill="rgb(236,53,44)" fg:x="940" fg:w="1"/><text x="74.5583%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="74.3083%" y="501" width="0.0791%" height="15" fill="rgb(244,214,29)" fg:x="940" fg:w="1"/><text x="74.5583%" y="511.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="74.3874%" y="581" width="0.0791%" height="15" fill="rgb(220,75,29)" fg:x="941" fg:w="1"/><text x="74.6374%" y="591.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.3874%" y="565" width="0.0791%" height="15" fill="rgb(214,183,37)" fg:x="941" fg:w="1"/><text x="74.6374%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::_::&lt;impl serde::de::Deserialize for kernel::model::entity::Entity&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.08%)</title><rect x="74.4664%" y="533" width="0.0791%" height="15" fill="rgb(239,117,29)" fg:x="942" fg:w="1"/><text x="74.7164%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5455%" y="453" width="0.0791%" height="15" fill="rgb(237,171,35)" fg:x="943" fg:w="1"/><text x="74.7955%" y="463.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5455%" y="533" width="0.1581%" height="15" fill="rgb(229,178,53)" fg:x="943" fg:w="2"/><text x="74.7955%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.5455%" y="517" width="0.1581%" height="15" fill="rgb(210,102,19)" fg:x="943" fg:w="2"/><text x="74.7955%" y="527.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="74.5455%" y="501" width="0.1581%" height="15" fill="rgb(235,127,22)" fg:x="943" fg:w="2"/><text x="74.7955%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (2 samples, 0.16%)</title><rect x="74.5455%" y="485" width="0.1581%" height="15" fill="rgb(244,31,31)" fg:x="943" fg:w="2"/><text x="74.7955%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="74.5455%" y="469" width="0.1581%" height="15" fill="rgb(231,43,21)" fg:x="943" fg:w="2"/><text x="74.7955%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="74.6245%" y="453" width="0.0791%" height="15" fill="rgb(217,131,35)" fg:x="944" fg:w="1"/><text x="74.8745%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (5 samples, 0.40%)</title><rect x="74.4664%" y="581" width="0.3953%" height="15" fill="rgb(221,149,4)" fg:x="942" fg:w="5"/><text x="74.7164%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (5 samples, 0.40%)</title><rect x="74.4664%" y="565" width="0.3953%" height="15" fill="rgb(232,170,28)" fg:x="942" fg:w="5"/><text x="74.7164%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (5 samples, 0.40%)</title><rect x="74.4664%" y="549" width="0.3953%" height="15" fill="rgb(238,56,10)" fg:x="942" fg:w="5"/><text x="74.7164%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="74.7036%" y="533" width="0.1581%" height="15" fill="rgb(235,196,14)" fg:x="945" fg:w="2"/><text x="74.9536%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="74.7036%" y="517" width="0.1581%" height="15" fill="rgb(216,45,48)" fg:x="945" fg:w="2"/><text x="74.9536%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.7826%" y="501" width="0.0791%" height="15" fill="rgb(238,213,17)" fg:x="946" fg:w="1"/><text x="75.0326%" y="511.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.7826%" y="485" width="0.0791%" height="15" fill="rgb(212,13,2)" fg:x="946" fg:w="1"/><text x="75.0326%" y="495.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="74.7826%" y="469" width="0.0791%" height="15" fill="rgb(240,114,20)" fg:x="946" fg:w="1"/><text x="75.0326%" y="479.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="74.8617%" y="469" width="0.0791%" height="15" fill="rgb(228,41,40)" fg:x="947" fg:w="1"/><text x="75.1117%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.9407%" y="421" width="0.1581%" height="15" fill="rgb(244,132,35)" fg:x="948" fg:w="2"/><text x="75.1907%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="74.9407%" y="405" width="0.1581%" height="15" fill="rgb(253,189,4)" fg:x="948" fg:w="2"/><text x="75.1907%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="74.9407%" y="389" width="0.1581%" height="15" fill="rgb(224,37,19)" fg:x="948" fg:w="2"/><text x="75.1907%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="74.8617%" y="485" width="0.3162%" height="15" fill="rgb(235,223,18)" fg:x="947" fg:w="4"/><text x="75.1117%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.9407%" y="469" width="0.2372%" height="15" fill="rgb(235,163,25)" fg:x="948" fg:w="3"/><text x="75.1907%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="74.9407%" y="453" width="0.2372%" height="15" fill="rgb(217,145,28)" fg:x="948" fg:w="3"/><text x="75.1907%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="74.9407%" y="437" width="0.2372%" height="15" fill="rgb(223,223,32)" fg:x="948" fg:w="3"/><text x="75.1907%" y="447.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.0988%" y="421" width="0.0791%" height="15" fill="rgb(227,189,39)" fg:x="950" fg:w="1"/><text x="75.3488%" y="431.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="75.0988%" y="405" width="0.0791%" height="15" fill="rgb(248,10,22)" fg:x="950" fg:w="1"/><text x="75.3488%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.47%)</title><rect x="74.8617%" y="517" width="0.4743%" height="15" fill="rgb(248,46,39)" fg:x="947" fg:w="6"/><text x="75.1117%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="74.8617%" y="501" width="0.4743%" height="15" fill="rgb(248,113,48)" fg:x="947" fg:w="6"/><text x="75.1117%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="75.1779%" y="485" width="0.1581%" height="15" fill="rgb(245,16,25)" fg:x="951" fg:w="2"/><text x="75.4279%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="75.3360%" y="517" width="0.0791%" height="15" fill="rgb(249,152,16)" fg:x="953" fg:w="1"/><text x="75.5860%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.3360%" y="501" width="0.0791%" height="15" fill="rgb(250,16,1)" fg:x="953" fg:w="1"/><text x="75.5860%" y="511.50"></text></g><g><title>engine::session::Session::evaluate_and_perform (559 samples, 44.19%)</title><rect x="31.3043%" y="661" width="44.1897%" height="15" fill="rgb(249,138,3)" fg:x="396" fg:w="559"/><text x="31.5543%" y="671.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::session::Session::evaluate_and_perform_as (559 samples, 44.19%)</title><rect x="31.3043%" y="645" width="44.1897%" height="15" fill="rgb(227,71,41)" fg:x="396" fg:w="559"/><text x="31.5543%" y="655.50">engine::session::Session::evaluate_and_perform_as</text></g><g><title>kernel::model::EntityPtrResolver::world (20 samples, 1.58%)</title><rect x="73.9130%" y="629" width="1.5810%" height="15" fill="rgb(209,184,23)" fg:x="935" fg:w="20"/><text x="74.1630%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (20 samples, 1.58%)</title><rect x="73.9130%" y="613" width="1.5810%" height="15" fill="rgb(223,215,31)" fg:x="935" fg:w="20"/><text x="74.1630%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (20 samples, 1.58%)</title><rect x="73.9130%" y="597" width="1.5810%" height="15" fill="rgb(210,146,28)" fg:x="935" fg:w="20"/><text x="74.1630%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.63%)</title><rect x="74.8617%" y="581" width="0.6324%" height="15" fill="rgb(209,183,41)" fg:x="947" fg:w="8"/><text x="75.1117%" y="591.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.63%)</title><rect x="74.8617%" y="565" width="0.6324%" height="15" fill="rgb(209,224,45)" fg:x="947" fg:w="8"/><text x="75.1117%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="74.8617%" y="549" width="0.6324%" height="15" fill="rgb(224,209,51)" fg:x="947" fg:w="8"/><text x="75.1117%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="74.8617%" y="533" width="0.6324%" height="15" fill="rgb(223,17,39)" fg:x="947" fg:w="8"/><text x="75.1117%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4150%" y="517" width="0.0791%" height="15" fill="rgb(234,204,37)" fg:x="954" fg:w="1"/><text x="75.6650%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="75.4150%" y="501" width="0.0791%" height="15" fill="rgb(236,120,5)" fg:x="954" fg:w="1"/><text x="75.6650%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="75.4150%" y="485" width="0.0791%" height="15" fill="rgb(248,97,27)" fg:x="954" fg:w="1"/><text x="75.6650%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (956 samples, 75.57%)</title><rect x="0.0000%" y="709" width="75.5731%" height="15" fill="rgb(240,66,17)" fg:x="0" fg:w="956"/><text x="0.2500%" y="719.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (956 samples, 75.57%)</title><rect x="0.0000%" y="693" width="75.5731%" height="15" fill="rgb(210,79,3)" fg:x="0" fg:w="956"/><text x="0.2500%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (955 samples, 75.49%)</title><rect x="0.0791%" y="677" width="75.4941%" height="15" fill="rgb(214,176,27)" fg:x="1" fg:w="955"/><text x="0.3291%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>tests::make_domain (1 samples, 0.08%)</title><rect x="75.4941%" y="661" width="0.0791%" height="15" fill="rgb(235,185,3)" fg:x="955" fg:w="1"/><text x="75.7441%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="75.4941%" y="645" width="0.0791%" height="15" fill="rgb(227,24,12)" fg:x="955" fg:w="1"/><text x="75.7441%" y="655.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.4941%" y="629" width="0.0791%" height="15" fill="rgb(252,169,48)" fg:x="955" fg:w="1"/><text x="75.7441%" y="639.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.4941%" y="613" width="0.0791%" height="15" fill="rgb(212,65,1)" fg:x="955" fg:w="1"/><text x="75.7441%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.5731%" y="629" width="0.0791%" height="15" fill="rgb(242,39,24)" fg:x="956" fg:w="1"/><text x="75.8231%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.5731%" y="613" width="0.0791%" height="15" fill="rgb(249,32,23)" fg:x="956" fg:w="1"/><text x="75.8231%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.5731%" y="597" width="0.0791%" height="15" fill="rgb(251,195,23)" fg:x="956" fg:w="1"/><text x="75.8231%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="75.5731%" y="661" width="0.1581%" height="15" fill="rgb(236,174,8)" fg:x="956" fg:w="2"/><text x="75.8231%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="75.5731%" y="645" width="0.1581%" height="15" fill="rgb(220,197,8)" fg:x="956" fg:w="2"/><text x="75.8231%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="75.6522%" y="629" width="0.0791%" height="15" fill="rgb(240,108,37)" fg:x="957" fg:w="1"/><text x="75.9022%" y="639.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.7312%" y="645" width="0.0791%" height="15" fill="rgb(232,176,24)" fg:x="958" fg:w="1"/><text x="75.9812%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.7312%" y="629" width="0.0791%" height="15" fill="rgb(243,35,29)" fg:x="958" fg:w="1"/><text x="75.9812%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="75.8103%" y="549" width="0.1581%" height="15" fill="rgb(210,37,18)" fg:x="959" fg:w="2"/><text x="76.0603%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.1265%" y="517" width="0.0791%" height="15" fill="rgb(224,184,40)" fg:x="963" fg:w="1"/><text x="76.3765%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="75.8103%" y="581" width="0.4743%" height="15" fill="rgb(236,39,29)" fg:x="959" fg:w="6"/><text x="76.0603%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.47%)</title><rect x="75.8103%" y="565" width="0.4743%" height="15" fill="rgb(232,48,39)" fg:x="959" fg:w="6"/><text x="76.0603%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="75.9684%" y="549" width="0.3162%" height="15" fill="rgb(236,34,42)" fg:x="961" fg:w="4"/><text x="76.2184%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="76.0474%" y="533" width="0.2372%" height="15" fill="rgb(243,106,37)" fg:x="962" fg:w="3"/><text x="76.2974%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.2055%" y="517" width="0.0791%" height="15" fill="rgb(218,96,6)" fg:x="964" fg:w="1"/><text x="76.4555%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2055%" y="501" width="0.0791%" height="15" fill="rgb(235,130,12)" fg:x="964" fg:w="1"/><text x="76.4555%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.2846%" y="549" width="0.0791%" height="15" fill="rgb(231,95,0)" fg:x="965" fg:w="1"/><text x="76.5346%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.3636%" y="549" width="0.0791%" height="15" fill="rgb(228,12,23)" fg:x="966" fg:w="1"/><text x="76.6136%" y="559.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.95%)</title><rect x="75.8103%" y="597" width="0.9486%" height="15" fill="rgb(216,12,1)" fg:x="959" fg:w="12"/><text x="76.0603%" y="607.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="76.2846%" y="581" width="0.4743%" height="15" fill="rgb(219,59,3)" fg:x="965" fg:w="6"/><text x="76.5346%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.47%)</title><rect x="76.2846%" y="565" width="0.4743%" height="15" fill="rgb(215,208,46)" fg:x="965" fg:w="6"/><text x="76.5346%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="76.4427%" y="549" width="0.3162%" height="15" fill="rgb(254,224,29)" fg:x="967" fg:w="4"/><text x="76.6927%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="76.6798%" y="533" width="0.0791%" height="15" fill="rgb(232,14,29)" fg:x="970" fg:w="1"/><text x="76.9298%" y="543.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="76.6798%" y="517" width="0.0791%" height="15" fill="rgb(208,45,52)" fg:x="970" fg:w="1"/><text x="76.9298%" y="527.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.11%)</title><rect x="75.7312%" y="661" width="1.1067%" height="15" fill="rgb(234,191,28)" fg:x="958" fg:w="14"/><text x="75.9812%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;engine::session::state::State&gt;&gt; (13 samples, 1.03%)</title><rect x="75.8103%" y="645" width="1.0277%" height="15" fill="rgb(244,67,43)" fg:x="959" fg:w="13"/><text x="76.0603%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.03%)</title><rect x="75.8103%" y="629" width="1.0277%" height="15" fill="rgb(236,189,24)" fg:x="959" fg:w="13"/><text x="76.0603%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::internal::LoadedEntity&gt; (13 samples, 1.03%)</title><rect x="75.8103%" y="613" width="1.0277%" height="15" fill="rgb(239,214,33)" fg:x="959" fg:w="13"/><text x="76.0603%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.7589%" y="597" width="0.0791%" height="15" fill="rgb(226,176,41)" fg:x="971" fg:w="1"/><text x="77.0089%" y="607.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::new_cyclic (1 samples, 0.08%)</title><rect x="76.8379%" y="613" width="0.0791%" height="15" fill="rgb(248,47,8)" fg:x="972" fg:w="1"/><text x="77.0879%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="76.8379%" y="597" width="0.0791%" height="15" fill="rgb(218,81,44)" fg:x="972" fg:w="1"/><text x="77.0879%" y="607.50"></text></g><g><title>__pthread_mutex_lock (1 samples, 0.08%)</title><rect x="76.9170%" y="485" width="0.0791%" height="15" fill="rgb(213,98,6)" fg:x="973" fg:w="1"/><text x="77.1670%" y="495.50"></text></g><g><title>__pthread_mutex_unlock (1 samples, 0.08%)</title><rect x="76.9960%" y="485" width="0.0791%" height="15" fill="rgb(222,85,22)" fg:x="974" fg:w="1"/><text x="77.2460%" y="495.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="76.9170%" y="581" width="0.3162%" height="15" fill="rgb(239,46,39)" fg:x="973" fg:w="4"/><text x="77.1670%" y="591.50"></text></g><g><title>libloading::os::unix::Library::open (4 samples, 0.32%)</title><rect x="76.9170%" y="565" width="0.3162%" height="15" fill="rgb(237,12,29)" fg:x="973" fg:w="4"/><text x="77.1670%" y="575.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="76.9170%" y="549" width="0.3162%" height="15" fill="rgb(214,77,8)" fg:x="973" fg:w="4"/><text x="77.1670%" y="559.50"></text></g><g><title>_dl_catch_error (4 samples, 0.32%)</title><rect x="76.9170%" y="533" width="0.3162%" height="15" fill="rgb(217,168,37)" fg:x="973" fg:w="4"/><text x="77.1670%" y="543.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="76.9170%" y="517" width="0.3162%" height="15" fill="rgb(221,217,23)" fg:x="973" fg:w="4"/><text x="77.1670%" y="527.50"></text></g><g><title>_dl_catch_exception (4 samples, 0.32%)</title><rect x="76.9170%" y="501" width="0.3162%" height="15" fill="rgb(243,229,36)" fg:x="973" fg:w="4"/><text x="77.1670%" y="511.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="77.0751%" y="485" width="0.1581%" height="15" fill="rgb(251,163,40)" fg:x="975" fg:w="2"/><text x="77.3251%" y="495.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (6 samples, 0.47%)</title><rect x="76.8379%" y="661" width="0.4743%" height="15" fill="rgb(237,222,12)" fg:x="972" fg:w="6"/><text x="77.0879%" y="671.50"></text></g><g><title>engine::domain::Domain::open_session_with_middleware (6 samples, 0.47%)</title><rect x="76.8379%" y="645" width="0.4743%" height="15" fill="rgb(248,132,6)" fg:x="972" fg:w="6"/><text x="77.0879%" y="655.50"></text></g><g><title>engine::session::Session::new (6 samples, 0.47%)</title><rect x="76.8379%" y="629" width="0.4743%" height="15" fill="rgb(227,167,50)" fg:x="972" fg:w="6"/><text x="77.0879%" y="639.50"></text></g><g><title>engine::session::Session::initialize (5 samples, 0.40%)</title><rect x="76.9170%" y="613" width="0.3953%" height="15" fill="rgb(242,84,37)" fg:x="973" fg:w="5"/><text x="77.1670%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="76.9170%" y="597" width="0.3953%" height="15" fill="rgb(212,4,50)" fg:x="973" fg:w="5"/><text x="77.1670%" y="607.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="77.2332%" y="581" width="0.0791%" height="15" fill="rgb(230,228,32)" fg:x="977" fg:w="1"/><text x="77.4832%" y="591.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="77.2332%" y="565" width="0.0791%" height="15" fill="rgb(248,217,23)" fg:x="977" fg:w="1"/><text x="77.4832%" y="575.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="77.3123%" y="645" width="0.0791%" height="15" fill="rgb(238,197,32)" fg:x="978" fg:w="1"/><text x="77.5623%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::Json&gt; (1 samples, 0.08%)</title><rect x="77.3123%" y="629" width="0.0791%" height="15" fill="rgb(236,106,1)" fg:x="978" fg:w="1"/><text x="77.5623%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="77.3123%" y="613" width="0.0791%" height="15" fill="rgb(219,228,13)" fg:x="978" fg:w="1"/><text x="77.5623%" y="623.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="77.3913%" y="597" width="0.0791%" height="15" fill="rgb(238,30,35)" fg:x="979" fg:w="1"/><text x="77.6413%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="77.3913%" y="581" width="0.0791%" height="15" fill="rgb(236,70,23)" fg:x="979" fg:w="1"/><text x="77.6413%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="77.3913%" y="565" width="0.0791%" height="15" fill="rgb(249,104,48)" fg:x="979" fg:w="1"/><text x="77.6413%" y="575.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="77.5494%" y="533" width="0.1581%" height="15" fill="rgb(254,117,50)" fg:x="981" fg:w="2"/><text x="77.7994%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.5494%" y="517" width="0.1581%" height="15" fill="rgb(223,152,4)" fg:x="981" fg:w="2"/><text x="77.7994%" y="527.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="77.5494%" y="501" width="0.1581%" height="15" fill="rgb(245,6,2)" fg:x="981" fg:w="2"/><text x="77.7994%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="77.5494%" y="485" width="0.1581%" height="15" fill="rgb(249,150,24)" fg:x="981" fg:w="2"/><text x="77.7994%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="77.6285%" y="469" width="0.0791%" height="15" fill="rgb(228,185,42)" fg:x="982" fg:w="1"/><text x="77.8785%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.7075%" y="517" width="0.0791%" height="15" fill="rgb(226,39,33)" fg:x="983" fg:w="1"/><text x="77.9575%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="77.8656%" y="501" width="0.0791%" height="15" fill="rgb(221,166,19)" fg:x="985" fg:w="1"/><text x="78.1156%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8656%" y="485" width="0.0791%" height="15" fill="rgb(209,109,2)" fg:x="985" fg:w="1"/><text x="78.1156%" y="495.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="77.8656%" y="469" width="0.0791%" height="15" fill="rgb(252,216,26)" fg:x="985" fg:w="1"/><text x="78.1156%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="77.8656%" y="453" width="0.0791%" height="15" fill="rgb(227,173,36)" fg:x="985" fg:w="1"/><text x="78.1156%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="77.8656%" y="437" width="0.0791%" height="15" fill="rgb(209,90,7)" fg:x="985" fg:w="1"/><text x="78.1156%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="77.9447%" y="501" width="0.1581%" height="15" fill="rgb(250,194,11)" fg:x="986" fg:w="2"/><text x="78.1947%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.0237%" y="485" width="0.0791%" height="15" fill="rgb(220,72,50)" fg:x="987" fg:w="1"/><text x="78.2737%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.0237%" y="469" width="0.0791%" height="15" fill="rgb(222,106,48)" fg:x="987" fg:w="1"/><text x="78.2737%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.0237%" y="453" width="0.0791%" height="15" fill="rgb(216,220,45)" fg:x="987" fg:w="1"/><text x="78.2737%" y="463.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="77.5494%" y="549" width="0.6324%" height="15" fill="rgb(234,112,18)" fg:x="981" fg:w="8"/><text x="77.7994%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.47%)</title><rect x="77.7075%" y="533" width="0.4743%" height="15" fill="rgb(206,179,9)" fg:x="983" fg:w="6"/><text x="77.9575%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="77.7866%" y="517" width="0.3953%" height="15" fill="rgb(215,115,40)" fg:x="984" fg:w="5"/><text x="78.0366%" y="527.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="78.1028%" y="501" width="0.0791%" height="15" fill="rgb(222,69,34)" fg:x="988" fg:w="1"/><text x="78.3528%" y="511.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="78.1028%" y="485" width="0.0791%" height="15" fill="rgb(209,161,10)" fg:x="988" fg:w="1"/><text x="78.3528%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="78.1028%" y="469" width="0.0791%" height="15" fill="rgb(217,6,38)" fg:x="988" fg:w="1"/><text x="78.3528%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="549" width="0.0791%" height="15" fill="rgb(229,229,48)" fg:x="989" fg:w="1"/><text x="78.4318%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="533" width="0.0791%" height="15" fill="rgb(225,21,28)" fg:x="989" fg:w="1"/><text x="78.4318%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="517" width="0.0791%" height="15" fill="rgb(206,33,13)" fg:x="989" fg:w="1"/><text x="78.4318%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="501" width="0.0791%" height="15" fill="rgb(242,178,17)" fg:x="989" fg:w="1"/><text x="78.4318%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="485" width="0.0791%" height="15" fill="rgb(220,162,5)" fg:x="989" fg:w="1"/><text x="78.4318%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="469" width="0.0791%" height="15" fill="rgb(210,33,43)" fg:x="989" fg:w="1"/><text x="78.4318%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="78.1818%" y="453" width="0.0791%" height="15" fill="rgb(216,116,54)" fg:x="989" fg:w="1"/><text x="78.4318%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.1818%" y="437" width="0.0791%" height="15" fill="rgb(249,92,24)" fg:x="989" fg:w="1"/><text x="78.4318%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2609%" y="501" width="0.0791%" height="15" fill="rgb(231,189,14)" fg:x="990" fg:w="1"/><text x="78.5109%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.2609%" y="485" width="0.0791%" height="15" fill="rgb(230,8,41)" fg:x="990" fg:w="1"/><text x="78.5109%" y="495.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.3399%" y="469" width="0.0791%" height="15" fill="rgb(249,7,27)" fg:x="991" fg:w="1"/><text x="78.5899%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3399%" y="453" width="0.0791%" height="15" fill="rgb(232,86,5)" fg:x="991" fg:w="1"/><text x="78.5899%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.3399%" y="437" width="0.0791%" height="15" fill="rgb(224,175,18)" fg:x="991" fg:w="1"/><text x="78.5899%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.3399%" y="421" width="0.0791%" height="15" fill="rgb(220,129,12)" fg:x="991" fg:w="1"/><text x="78.5899%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="78.3399%" y="405" width="0.0791%" height="15" fill="rgb(210,19,36)" fg:x="991" fg:w="1"/><text x="78.5899%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3399%" y="389" width="0.0791%" height="15" fill="rgb(219,96,14)" fg:x="991" fg:w="1"/><text x="78.5899%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.3399%" y="373" width="0.0791%" height="15" fill="rgb(249,106,1)" fg:x="991" fg:w="1"/><text x="78.5899%" y="383.50"></text></g><g><title>engine::session::Session::flush (14 samples, 1.11%)</title><rect x="77.3913%" y="645" width="1.1067%" height="15" fill="rgb(249,155,20)" fg:x="979" fg:w="14"/><text x="77.6413%" y="655.50"></text></g><g><title>engine::session::state::State::close (14 samples, 1.11%)</title><rect x="77.3913%" y="629" width="1.1067%" height="15" fill="rgb(244,168,9)" fg:x="979" fg:w="14"/><text x="77.6413%" y="639.50"></text></g><g><title>engine::session::state::State::flush_entities (14 samples, 1.11%)</title><rect x="77.3913%" y="613" width="1.1067%" height="15" fill="rgb(216,23,50)" fg:x="979" fg:w="14"/><text x="77.6413%" y="623.50"></text></g><g><title>core::iter::adapters::try_process (13 samples, 1.03%)</title><rect x="77.4704%" y="597" width="1.0277%" height="15" fill="rgb(224,219,20)" fg:x="980" fg:w="13"/><text x="77.7204%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 1.03%)</title><rect x="77.4704%" y="581" width="1.0277%" height="15" fill="rgb(222,156,15)" fg:x="980" fg:w="13"/><text x="77.7204%" y="591.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (13 samples, 1.03%)</title><rect x="77.4704%" y="565" width="1.0277%" height="15" fill="rgb(231,97,17)" fg:x="980" fg:w="13"/><text x="77.7204%" y="575.50"></text></g><g><title>kernel::model::any_entity_changes (3 samples, 0.24%)</title><rect x="78.2609%" y="549" width="0.2372%" height="15" fill="rgb(218,70,48)" fg:x="990" fg:w="3"/><text x="78.5109%" y="559.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="78.2609%" y="533" width="0.2372%" height="15" fill="rgb(212,196,52)" fg:x="990" fg:w="3"/><text x="78.5109%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="78.2609%" y="517" width="0.2372%" height="15" fill="rgb(243,203,18)" fg:x="990" fg:w="3"/><text x="78.5109%" y="527.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="78.3399%" y="501" width="0.1581%" height="15" fill="rgb(252,125,41)" fg:x="991" fg:w="2"/><text x="78.5899%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="78.3399%" y="485" width="0.1581%" height="15" fill="rgb(223,180,33)" fg:x="991" fg:w="2"/><text x="78.5899%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.4190%" y="469" width="0.0791%" height="15" fill="rgb(254,159,46)" fg:x="992" fg:w="1"/><text x="78.6690%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="78.4980%" y="565" width="0.0791%" height="15" fill="rgb(254,38,10)" fg:x="993" fg:w="1"/><text x="78.7480%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="78.4980%" y="549" width="0.0791%" height="15" fill="rgb(208,217,32)" fg:x="993" fg:w="1"/><text x="78.7480%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.4980%" y="533" width="0.0791%" height="15" fill="rgb(221,120,13)" fg:x="993" fg:w="1"/><text x="78.7480%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.4980%" y="517" width="0.0791%" height="15" fill="rgb(246,54,52)" fg:x="993" fg:w="1"/><text x="78.7480%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="78.4980%" y="501" width="0.0791%" height="15" fill="rgb(242,34,25)" fg:x="993" fg:w="1"/><text x="78.7480%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4980%" y="485" width="0.0791%" height="15" fill="rgb(247,209,9)" fg:x="993" fg:w="1"/><text x="78.7480%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="78.4980%" y="469" width="0.0791%" height="15" fill="rgb(228,71,26)" fg:x="993" fg:w="1"/><text x="78.7480%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="78.4980%" y="453" width="0.0791%" height="15" fill="rgb(222,145,49)" fg:x="993" fg:w="1"/><text x="78.7480%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="78.4980%" y="437" width="0.0791%" height="15" fill="rgb(218,121,17)" fg:x="993" fg:w="1"/><text x="78.7480%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="78.4980%" y="421" width="0.0791%" height="15" fill="rgb(244,50,7)" fg:x="993" fg:w="1"/><text x="78.7480%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4980%" y="405" width="0.0791%" height="15" fill="rgb(246,229,37)" fg:x="993" fg:w="1"/><text x="78.7480%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="78.4980%" y="389" width="0.0791%" height="15" fill="rgb(225,18,5)" fg:x="993" fg:w="1"/><text x="78.7480%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="78.4980%" y="373" width="0.0791%" height="15" fill="rgb(213,204,8)" fg:x="993" fg:w="1"/><text x="78.7480%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="78.4980%" y="357" width="0.0791%" height="15" fill="rgb(238,103,6)" fg:x="993" fg:w="1"/><text x="78.7480%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="78.4980%" y="341" width="0.0791%" height="15" fill="rgb(222,25,35)" fg:x="993" fg:w="1"/><text x="78.7480%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="78.4980%" y="325" width="0.0791%" height="15" fill="rgb(213,203,35)" fg:x="993" fg:w="1"/><text x="78.7480%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="78.4980%" y="309" width="0.0791%" height="15" fill="rgb(221,79,53)" fg:x="993" fg:w="1"/><text x="78.7480%" y="319.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="78.4980%" y="597" width="0.1581%" height="15" fill="rgb(243,200,35)" fg:x="993" fg:w="2"/><text x="78.7480%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="78.4980%" y="581" width="0.1581%" height="15" fill="rgb(248,60,25)" fg:x="993" fg:w="2"/><text x="78.7480%" y="591.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="78.5771%" y="565" width="0.0791%" height="15" fill="rgb(227,53,46)" fg:x="994" fg:w="1"/><text x="78.8271%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.5771%" y="549" width="0.0791%" height="15" fill="rgb(216,120,32)" fg:x="994" fg:w="1"/><text x="78.8271%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6561%" y="565" width="0.0791%" height="15" fill="rgb(220,134,1)" fg:x="995" fg:w="1"/><text x="78.9061%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="78.6561%" y="549" width="0.0791%" height="15" fill="rgb(237,168,5)" fg:x="995" fg:w="1"/><text x="78.9061%" y="559.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="78.4980%" y="645" width="0.3162%" height="15" fill="rgb(231,100,33)" fg:x="993" fg:w="4"/><text x="78.7480%" y="655.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="78.4980%" y="629" width="0.3162%" height="15" fill="rgb(236,177,47)" fg:x="993" fg:w="4"/><text x="78.7480%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_entity (4 samples, 0.32%)</title><rect x="78.4980%" y="613" width="0.3162%" height="15" fill="rgb(235,7,49)" fg:x="993" fg:w="4"/><text x="78.7480%" y="623.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="78.6561%" y="597" width="0.1581%" height="15" fill="rgb(232,119,22)" fg:x="995" fg:w="2"/><text x="78.9061%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="78.6561%" y="581" width="0.1581%" height="15" fill="rgb(254,73,53)" fg:x="995" fg:w="2"/><text x="78.9061%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="78.7352%" y="565" width="0.0791%" height="15" fill="rgb(251,35,20)" fg:x="996" fg:w="1"/><text x="78.9852%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (1 samples, 0.08%)</title><rect x="78.7352%" y="549" width="0.0791%" height="15" fill="rgb(241,119,20)" fg:x="996" fg:w="1"/><text x="78.9852%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7352%" y="533" width="0.0791%" height="15" fill="rgb(207,102,14)" fg:x="996" fg:w="1"/><text x="78.9852%" y="543.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7352%" y="517" width="0.0791%" height="15" fill="rgb(248,201,50)" fg:x="996" fg:w="1"/><text x="78.9852%" y="527.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7352%" y="501" width="0.0791%" height="15" fill="rgb(222,185,44)" fg:x="996" fg:w="1"/><text x="78.9852%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="78.7352%" y="485" width="0.0791%" height="15" fill="rgb(218,107,18)" fg:x="996" fg:w="1"/><text x="78.9852%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="78.7352%" y="469" width="0.0791%" height="15" fill="rgb(237,177,39)" fg:x="996" fg:w="1"/><text x="78.9852%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.8142%" y="613" width="0.0791%" height="15" fill="rgb(246,69,6)" fg:x="997" fg:w="1"/><text x="79.0642%" y="623.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::carryable (2 samples, 0.16%)</title><rect x="78.8142%" y="645" width="0.1581%" height="15" fill="rgb(234,208,37)" fg:x="997" fg:w="2"/><text x="79.0642%" y="655.50"></text></g><g><title>plugins_core::tools::set_quantity (2 samples, 0.16%)</title><rect x="78.8142%" y="629" width="0.1581%" height="15" fill="rgb(225,4,6)" fg:x="997" fg:w="2"/><text x="79.0642%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="78.8933%" y="613" width="0.0791%" height="15" fill="rgb(233,45,0)" fg:x="998" fg:w="1"/><text x="79.1433%" y="623.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="78.8933%" y="597" width="0.0791%" height="15" fill="rgb(226,136,5)" fg:x="998" fg:w="1"/><text x="79.1433%" y="607.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="78.8933%" y="581" width="0.0791%" height="15" fill="rgb(211,91,47)" fg:x="998" fg:w="1"/><text x="79.1433%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="78.9723%" y="501" width="0.0791%" height="15" fill="rgb(242,88,51)" fg:x="999" fg:w="1"/><text x="79.2223%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="78.9723%" y="485" width="0.0791%" height="15" fill="rgb(230,91,28)" fg:x="999" fg:w="1"/><text x="79.2223%" y="495.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="78.9723%" y="613" width="0.1581%" height="15" fill="rgb(254,186,29)" fg:x="999" fg:w="2"/><text x="79.2223%" y="623.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="78.9723%" y="597" width="0.1581%" height="15" fill="rgb(238,6,4)" fg:x="999" fg:w="2"/><text x="79.2223%" y="607.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="78.9723%" y="581" width="0.1581%" height="15" fill="rgb(221,151,16)" fg:x="999" fg:w="2"/><text x="79.2223%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="78.9723%" y="565" width="0.1581%" height="15" fill="rgb(251,143,52)" fg:x="999" fg:w="2"/><text x="79.2223%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="78.9723%" y="549" width="0.1581%" height="15" fill="rgb(206,90,15)" fg:x="999" fg:w="2"/><text x="79.2223%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="78.9723%" y="533" width="0.1581%" height="15" fill="rgb(218,35,8)" fg:x="999" fg:w="2"/><text x="79.2223%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="78.9723%" y="517" width="0.1581%" height="15" fill="rgb(239,215,6)" fg:x="999" fg:w="2"/><text x="79.2223%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.0514%" y="501" width="0.0791%" height="15" fill="rgb(245,116,39)" fg:x="1000" fg:w="1"/><text x="79.3014%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.0514%" y="485" width="0.0791%" height="15" fill="rgb(242,65,28)" fg:x="1000" fg:w="1"/><text x="79.3014%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="79.0514%" y="469" width="0.0791%" height="15" fill="rgb(252,132,53)" fg:x="1000" fg:w="1"/><text x="79.3014%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.0514%" y="453" width="0.0791%" height="15" fill="rgb(224,159,50)" fg:x="1000" fg:w="1"/><text x="79.3014%" y="463.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.1304%" y="597" width="0.0791%" height="15" fill="rgb(224,93,4)" fg:x="1001" fg:w="1"/><text x="79.3804%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.1304%" y="581" width="0.0791%" height="15" fill="rgb(208,81,34)" fg:x="1001" fg:w="1"/><text x="79.3804%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1304%" y="565" width="0.0791%" height="15" fill="rgb(233,92,54)" fg:x="1001" fg:w="1"/><text x="79.3804%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (1 samples, 0.08%)</title><rect x="79.1304%" y="549" width="0.0791%" height="15" fill="rgb(237,21,14)" fg:x="1001" fg:w="1"/><text x="79.3804%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.1304%" y="533" width="0.0791%" height="15" fill="rgb(249,128,51)" fg:x="1001" fg:w="1"/><text x="79.3804%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.1304%" y="517" width="0.0791%" height="15" fill="rgb(223,129,24)" fg:x="1001" fg:w="1"/><text x="79.3804%" y="527.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.2095%" y="565" width="0.0791%" height="15" fill="rgb(231,168,25)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.2095%" y="549" width="0.0791%" height="15" fill="rgb(224,39,20)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.2095%" y="533" width="0.0791%" height="15" fill="rgb(225,152,53)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2095%" y="517" width="0.0791%" height="15" fill="rgb(252,17,24)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2095%" y="501" width="0.0791%" height="15" fill="rgb(250,114,30)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="79.2095%" y="485" width="0.0791%" height="15" fill="rgb(229,5,4)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2095%" y="469" width="0.0791%" height="15" fill="rgb(225,176,49)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2095%" y="453" width="0.0791%" height="15" fill="rgb(224,221,49)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.2095%" y="437" width="0.0791%" height="15" fill="rgb(253,169,27)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.2095%" y="421" width="0.0791%" height="15" fill="rgb(211,206,16)" fg:x="1002" fg:w="1"/><text x="79.4595%" y="431.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="79.1304%" y="613" width="0.2372%" height="15" fill="rgb(244,87,35)" fg:x="1001" fg:w="3"/><text x="79.3804%" y="623.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (2 samples, 0.16%)</title><rect x="79.2095%" y="597" width="0.1581%" height="15" fill="rgb(246,28,10)" fg:x="1002" fg:w="2"/><text x="79.4595%" y="607.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (2 samples, 0.16%)</title><rect x="79.2095%" y="581" width="0.1581%" height="15" fill="rgb(229,12,44)" fg:x="1002" fg:w="2"/><text x="79.4595%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="79.2885%" y="565" width="0.0791%" height="15" fill="rgb(210,145,37)" fg:x="1003" fg:w="1"/><text x="79.5385%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.2885%" y="549" width="0.0791%" height="15" fill="rgb(227,112,52)" fg:x="1003" fg:w="1"/><text x="79.5385%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.2885%" y="533" width="0.0791%" height="15" fill="rgb(238,155,34)" fg:x="1003" fg:w="1"/><text x="79.5385%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.2885%" y="517" width="0.0791%" height="15" fill="rgb(239,226,36)" fg:x="1003" fg:w="1"/><text x="79.5385%" y="527.50"></text></g><g><title>plugins_core::build::BuildEntityPtr::holding (6 samples, 0.47%)</title><rect x="78.9723%" y="645" width="0.4743%" height="15" fill="rgb(230,16,23)" fg:x="999" fg:w="6"/><text x="79.2223%" y="655.50"></text></g><g><title>plugins_core::tools::set_container (6 samples, 0.47%)</title><rect x="78.9723%" y="629" width="0.4743%" height="15" fill="rgb(236,171,36)" fg:x="999" fg:w="6"/><text x="79.2223%" y="639.50"></text></g><g><title>plugins_core::location::Location::set (1 samples, 0.08%)</title><rect x="79.3676%" y="613" width="0.0791%" height="15" fill="rgb(221,22,14)" fg:x="1004" fg:w="1"/><text x="79.6176%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.3676%" y="597" width="0.0791%" height="15" fill="rgb(242,43,11)" fg:x="1004" fg:w="1"/><text x="79.6176%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="79.4466%" y="597" width="0.0791%" height="15" fill="rgb(232,69,23)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::entity_ref (1 samples, 0.08%)</title><rect x="79.4466%" y="581" width="0.0791%" height="15" fill="rgb(216,180,54)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="591.50"></text></g><g><title>kernel::model::entity_ref::EntityRef::new_from_entity (1 samples, 0.08%)</title><rect x="79.4466%" y="565" width="0.0791%" height="15" fill="rgb(216,5,24)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="79.4466%" y="549" width="0.0791%" height="15" fill="rgb(225,89,9)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="79.4466%" y="533" width="0.0791%" height="15" fill="rgb(243,75,33)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="543.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="79.4466%" y="517" width="0.0791%" height="15" fill="rgb(247,141,45)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="79.4466%" y="501" width="0.0791%" height="15" fill="rgb(232,177,36)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="79.4466%" y="485" width="0.0791%" height="15" fill="rgb(219,125,36)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="79.4466%" y="469" width="0.0791%" height="15" fill="rgb(227,94,9)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="79.4466%" y="453" width="0.0791%" height="15" fill="rgb(240,34,52)" fg:x="1005" fg:w="1"/><text x="79.6966%" y="463.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="79.4466%" y="629" width="0.1581%" height="15" fill="rgb(216,45,12)" fg:x="1005" fg:w="2"/><text x="79.6966%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="79.4466%" y="613" width="0.1581%" height="15" fill="rgb(246,21,19)" fg:x="1005" fg:w="2"/><text x="79.6966%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="79.5257%" y="597" width="0.0791%" height="15" fill="rgb(213,98,42)" fg:x="1006" fg:w="1"/><text x="79.7757%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="79.6047%" y="501" width="0.0791%" height="15" fill="rgb(250,136,47)" fg:x="1007" fg:w="1"/><text x="79.8547%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6047%" y="485" width="0.0791%" height="15" fill="rgb(251,124,27)" fg:x="1007" fg:w="1"/><text x="79.8547%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6047%" y="469" width="0.0791%" height="15" fill="rgb(229,180,14)" fg:x="1007" fg:w="1"/><text x="79.8547%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.6838%" y="485" width="0.0791%" height="15" fill="rgb(245,216,25)" fg:x="1008" fg:w="1"/><text x="79.9338%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.6838%" y="469" width="0.0791%" height="15" fill="rgb(251,43,5)" fg:x="1008" fg:w="1"/><text x="79.9338%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.6838%" y="453" width="0.0791%" height="15" fill="rgb(250,128,24)" fg:x="1008" fg:w="1"/><text x="79.9338%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="79.7628%" y="469" width="0.0791%" height="15" fill="rgb(217,117,27)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="79.7628%" y="453" width="0.0791%" height="15" fill="rgb(245,147,4)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.7628%" y="437" width="0.0791%" height="15" fill="rgb(242,201,35)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="79.7628%" y="421" width="0.0791%" height="15" fill="rgb(218,181,1)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="79.7628%" y="405" width="0.0791%" height="15" fill="rgb(222,6,29)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="79.7628%" y="389" width="0.0791%" height="15" fill="rgb(208,186,3)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="79.7628%" y="373" width="0.0791%" height="15" fill="rgb(216,36,26)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="79.7628%" y="357" width="0.0791%" height="15" fill="rgb(248,201,23)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="79.7628%" y="341" width="0.0791%" height="15" fill="rgb(251,170,31)" fg:x="1009" fg:w="1"/><text x="80.0128%" y="351.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="79.9209%" y="453" width="0.0791%" height="15" fill="rgb(207,110,25)" fg:x="1011" fg:w="1"/><text x="80.1709%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.0000%" y="437" width="0.0791%" height="15" fill="rgb(250,54,15)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="447.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0000%" y="421" width="0.0791%" height="15" fill="rgb(227,68,33)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="431.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.0000%" y="405" width="0.0791%" height="15" fill="rgb(238,34,41)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0000%" y="389" width="0.0791%" height="15" fill="rgb(220,11,15)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="80.0000%" y="373" width="0.0791%" height="15" fill="rgb(246,111,35)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="80.0000%" y="357" width="0.0791%" height="15" fill="rgb(209,88,53)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="367.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="80.0000%" y="341" width="0.0791%" height="15" fill="rgb(231,185,47)" fg:x="1012" fg:w="1"/><text x="80.2500%" y="351.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="80.0791%" y="437" width="0.0791%" height="15" fill="rgb(233,154,1)" fg:x="1013" fg:w="1"/><text x="80.3291%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="80.0791%" y="421" width="0.0791%" height="15" fill="rgb(225,15,46)" fg:x="1013" fg:w="1"/><text x="80.3291%" y="431.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.0791%" y="405" width="0.0791%" height="15" fill="rgb(211,135,41)" fg:x="1013" fg:w="1"/><text x="80.3291%" y="415.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.0791%" y="389" width="0.0791%" height="15" fill="rgb(208,54,0)" fg:x="1013" fg:w="1"/><text x="80.3291%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="80.0791%" y="373" width="0.0791%" height="15" fill="rgb(244,136,14)" fg:x="1013" fg:w="1"/><text x="80.3291%" y="383.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="79.8419%" y="469" width="0.3953%" height="15" fill="rgb(241,56,14)" fg:x="1010" fg:w="5"/><text x="80.0919%" y="479.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="80.0000%" y="453" width="0.2372%" height="15" fill="rgb(205,80,24)" fg:x="1012" fg:w="3"/><text x="80.2500%" y="463.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.1581%" y="437" width="0.0791%" height="15" fill="rgb(220,57,4)" fg:x="1014" fg:w="1"/><text x="80.4081%" y="447.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="80.1581%" y="421" width="0.0791%" height="15" fill="rgb(226,193,50)" fg:x="1014" fg:w="1"/><text x="80.4081%" y="431.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="79.6047%" y="517" width="0.7115%" height="15" fill="rgb(231,168,22)" fg:x="1007" fg:w="9"/><text x="79.8547%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (8 samples, 0.63%)</title><rect x="79.6838%" y="501" width="0.6324%" height="15" fill="rgb(254,215,14)" fg:x="1008" fg:w="8"/><text x="79.9338%" y="511.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="79.7628%" y="485" width="0.5534%" height="15" fill="rgb(211,115,16)" fg:x="1009" fg:w="7"/><text x="80.0128%" y="495.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="80.2372%" y="469" width="0.0791%" height="15" fill="rgb(236,210,16)" fg:x="1015" fg:w="1"/><text x="80.4872%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="80.3162%" y="517" width="0.1581%" height="15" fill="rgb(221,94,12)" fg:x="1016" fg:w="2"/><text x="80.5662%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="80.3162%" y="501" width="0.1581%" height="15" fill="rgb(235,218,49)" fg:x="1016" fg:w="2"/><text x="80.5662%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="80.3953%" y="485" width="0.0791%" height="15" fill="rgb(217,114,14)" fg:x="1017" fg:w="1"/><text x="80.6453%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="80.3953%" y="469" width="0.0791%" height="15" fill="rgb(216,145,22)" fg:x="1017" fg:w="1"/><text x="80.6453%" y="479.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="80.5534%" y="469" width="0.0791%" height="15" fill="rgb(217,112,39)" fg:x="1019" fg:w="1"/><text x="80.8034%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.5534%" y="453" width="0.0791%" height="15" fill="rgb(225,85,32)" fg:x="1019" fg:w="1"/><text x="80.8034%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="80.5534%" y="437" width="0.0791%" height="15" fill="rgb(245,209,47)" fg:x="1019" fg:w="1"/><text x="80.8034%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeVec as serde::ser::SerializeSeq&gt;::end (1 samples, 0.08%)</title><rect x="80.5534%" y="421" width="0.0791%" height="15" fill="rgb(218,220,15)" fg:x="1019" fg:w="1"/><text x="80.8034%" y="431.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="80.6324%" y="469" width="0.0791%" height="15" fill="rgb(222,202,31)" fg:x="1020" fg:w="1"/><text x="80.8824%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="80.6324%" y="453" width="0.0791%" height="15" fill="rgb(243,203,4)" fg:x="1020" fg:w="1"/><text x="80.8824%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="80.7115%" y="437" width="0.0791%" height="15" fill="rgb(237,92,17)" fg:x="1021" fg:w="1"/><text x="80.9615%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7905%" y="389" width="0.0791%" height="15" fill="rgb(231,119,7)" fg:x="1022" fg:w="1"/><text x="81.0405%" y="399.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="80.7905%" y="373" width="0.0791%" height="15" fill="rgb(237,82,41)" fg:x="1022" fg:w="1"/><text x="81.0405%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.7905%" y="357" width="0.0791%" height="15" fill="rgb(226,81,48)" fg:x="1022" fg:w="1"/><text x="81.0405%" y="367.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="80.8696%" y="373" width="0.0791%" height="15" fill="rgb(234,70,51)" fg:x="1023" fg:w="1"/><text x="81.1196%" y="383.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="80.8696%" y="357" width="0.0791%" height="15" fill="rgb(251,86,4)" fg:x="1023" fg:w="1"/><text x="81.1196%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="80.9486%" y="373" width="0.0791%" height="15" fill="rgb(244,144,28)" fg:x="1024" fg:w="1"/><text x="81.1986%" y="383.50"></text></g><g><title>engine::session::Session::flush (19 samples, 1.50%)</title><rect x="79.6047%" y="629" width="1.5020%" height="15" fill="rgb(232,161,39)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="639.50"></text></g><g><title>engine::session::Session::save_changes (19 samples, 1.50%)</title><rect x="79.6047%" y="613" width="1.5020%" height="15" fill="rgb(247,34,51)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="623.50"></text></g><g><title>engine::session::state::State::close (19 samples, 1.50%)</title><rect x="79.6047%" y="597" width="1.5020%" height="15" fill="rgb(225,132,2)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="607.50"></text></g><g><title>engine::session::state::State::flush_entities (19 samples, 1.50%)</title><rect x="79.6047%" y="581" width="1.5020%" height="15" fill="rgb(209,159,44)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="591.50"></text></g><g><title>core::iter::adapters::try_process (19 samples, 1.50%)</title><rect x="79.6047%" y="565" width="1.5020%" height="15" fill="rgb(251,214,1)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 1.50%)</title><rect x="79.6047%" y="549" width="1.5020%" height="15" fill="rgb(247,84,47)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="559.50"></text></g><g><title>engine::session::state::SavesEntities::check_for_changes (19 samples, 1.50%)</title><rect x="79.6047%" y="533" width="1.5020%" height="15" fill="rgb(240,111,43)" fg:x="1007" fg:w="19"/><text x="79.8547%" y="543.50"></text></g><g><title>kernel::model::any_entity_changes (8 samples, 0.63%)</title><rect x="80.4743%" y="517" width="0.6324%" height="15" fill="rgb(215,214,35)" fg:x="1018" fg:w="8"/><text x="80.7243%" y="527.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="80.4743%" y="501" width="0.6324%" height="15" fill="rgb(248,207,23)" fg:x="1018" fg:w="8"/><text x="80.7243%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="80.4743%" y="485" width="0.6324%" height="15" fill="rgb(214,186,4)" fg:x="1018" fg:w="8"/><text x="80.7243%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="80.7115%" y="469" width="0.3953%" height="15" fill="rgb(220,133,22)" fg:x="1021" fg:w="5"/><text x="80.9615%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (5 samples, 0.40%)</title><rect x="80.7115%" y="453" width="0.3953%" height="15" fill="rgb(239,134,19)" fg:x="1021" fg:w="5"/><text x="80.9615%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="80.7905%" y="437" width="0.3162%" height="15" fill="rgb(250,140,9)" fg:x="1022" fg:w="4"/><text x="81.0405%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="80.7905%" y="421" width="0.3162%" height="15" fill="rgb(225,59,14)" fg:x="1022" fg:w="4"/><text x="81.0405%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="80.7905%" y="405" width="0.3162%" height="15" fill="rgb(214,152,51)" fg:x="1022" fg:w="4"/><text x="81.0405%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="80.8696%" y="389" width="0.2372%" height="15" fill="rgb(251,227,43)" fg:x="1023" fg:w="3"/><text x="81.1196%" y="399.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="81.0277%" y="373" width="0.0791%" height="15" fill="rgb(241,96,17)" fg:x="1025" fg:w="1"/><text x="81.2777%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="81.0277%" y="357" width="0.0791%" height="15" fill="rgb(234,198,43)" fg:x="1025" fg:w="1"/><text x="81.2777%" y="367.50"></text></g><g><title>engine::identifiers::model::fetch_add_one (2 samples, 0.16%)</title><rect x="81.1067%" y="597" width="0.1581%" height="15" fill="rgb(220,108,29)" fg:x="1026" fg:w="2"/><text x="81.3567%" y="607.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (2 samples, 0.16%)</title><rect x="81.1067%" y="581" width="0.1581%" height="15" fill="rgb(226,163,33)" fg:x="1026" fg:w="2"/><text x="81.3567%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="81.1067%" y="565" width="0.1581%" height="15" fill="rgb(205,194,45)" fg:x="1026" fg:w="2"/><text x="81.3567%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.1067%" y="549" width="0.1581%" height="15" fill="rgb(206,143,44)" fg:x="1026" fg:w="2"/><text x="81.3567%" y="559.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (2 samples, 0.16%)</title><rect x="81.1067%" y="533" width="0.1581%" height="15" fill="rgb(236,136,36)" fg:x="1026" fg:w="2"/><text x="81.3567%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.1067%" y="517" width="0.1581%" height="15" fill="rgb(249,172,42)" fg:x="1026" fg:w="2"/><text x="81.3567%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1858%" y="501" width="0.0791%" height="15" fill="rgb(216,139,23)" fg:x="1027" fg:w="1"/><text x="81.4358%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.1858%" y="485" width="0.0791%" height="15" fill="rgb(207,166,20)" fg:x="1027" fg:w="1"/><text x="81.4358%" y="495.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.2648%" y="581" width="0.0791%" height="15" fill="rgb(210,209,22)" fg:x="1028" fg:w="1"/><text x="81.5148%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.2648%" y="565" width="0.0791%" height="15" fill="rgb(232,118,20)" fg:x="1028" fg:w="1"/><text x="81.5148%" y="575.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="81.2648%" y="549" width="0.0791%" height="15" fill="rgb(238,113,42)" fg:x="1028" fg:w="1"/><text x="81.5148%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::scopes::StoreScope&gt;::store_scope (1 samples, 0.08%)</title><rect x="81.2648%" y="533" width="0.0791%" height="15" fill="rgb(231,42,5)" fg:x="1028" fg:w="1"/><text x="81.5148%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.2648%" y="517" width="0.0791%" height="15" fill="rgb(243,166,24)" fg:x="1028" fg:w="1"/><text x="81.5148%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="81.2648%" y="501" width="0.0791%" height="15" fill="rgb(237,226,12)" fg:x="1028" fg:w="1"/><text x="81.5148%" y="511.50"></text></g><g><title>plugins_core::build::Build::save (4 samples, 0.32%)</title><rect x="81.1067%" y="629" width="0.3162%" height="15" fill="rgb(229,133,24)" fg:x="1026" fg:w="4"/><text x="81.3567%" y="639.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (4 samples, 0.32%)</title><rect x="81.1067%" y="613" width="0.3162%" height="15" fill="rgb(238,33,43)" fg:x="1026" fg:w="4"/><text x="81.3567%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.2648%" y="597" width="0.1581%" height="15" fill="rgb(227,59,38)" fg:x="1028" fg:w="2"/><text x="81.5148%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="81.3439%" y="581" width="0.0791%" height="15" fill="rgb(230,97,0)" fg:x="1029" fg:w="1"/><text x="81.5939%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.3439%" y="565" width="0.0791%" height="15" fill="rgb(250,173,50)" fg:x="1029" fg:w="1"/><text x="81.5939%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3439%" y="549" width="0.0791%" height="15" fill="rgb(240,15,50)" fg:x="1029" fg:w="1"/><text x="81.5939%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4229%" y="597" width="0.0791%" height="15" fill="rgb(221,93,22)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.4229%" y="581" width="0.0791%" height="15" fill="rgb(245,180,53)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="81.4229%" y="565" width="0.0791%" height="15" fill="rgb(231,88,51)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.4229%" y="549" width="0.0791%" height="15" fill="rgb(240,58,21)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="81.4229%" y="533" width="0.0791%" height="15" fill="rgb(237,21,10)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="81.4229%" y="517" width="0.0791%" height="15" fill="rgb(218,43,11)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="81.4229%" y="501" width="0.0791%" height="15" fill="rgb(218,221,29)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="81.4229%" y="485" width="0.0791%" height="15" fill="rgb(214,118,42)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="81.4229%" y="469" width="0.0791%" height="15" fill="rgb(251,200,26)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="81.4229%" y="453" width="0.0791%" height="15" fill="rgb(237,101,39)" fg:x="1030" fg:w="1"/><text x="81.6729%" y="463.50"></text></g><g><title>&lt;core::cell::RefCell&lt;O&gt; as kernel::model::scopes::OpenScopeRefMut&lt;O&gt;&gt;::scope_mut (2 samples, 0.16%)</title><rect x="81.4229%" y="613" width="0.1581%" height="15" fill="rgb(251,117,11)" fg:x="1030" fg:w="2"/><text x="81.6729%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.5020%" y="597" width="0.0791%" height="15" fill="rgb(216,223,23)" fg:x="1031" fg:w="1"/><text x="81.7520%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.5020%" y="581" width="0.0791%" height="15" fill="rgb(251,54,12)" fg:x="1031" fg:w="1"/><text x="81.7520%" y="591.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (28 samples, 2.21%)</title><rect x="79.4466%" y="645" width="2.2134%" height="15" fill="rgb(254,176,54)" fg:x="1005" fg:w="28"/><text x="79.6966%" y="655.50">p..</text></g><g><title>plugins_core::build::BuildEntityPtr::routes (3 samples, 0.24%)</title><rect x="81.4229%" y="629" width="0.2372%" height="15" fill="rgb(210,32,8)" fg:x="1030" fg:w="3"/><text x="81.6729%" y="639.50"></text></g><g><title>kernel::model::scopes::OpenedScopeRefMut&lt;T,O&gt;::save (1 samples, 0.08%)</title><rect x="81.5810%" y="613" width="0.0791%" height="15" fill="rgb(235,52,38)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="623.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::Occupyable&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5810%" y="597" width="0.0791%" height="15" fill="rgb(231,4,44)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5810%" y="581" width="0.0791%" height="15" fill="rgb(249,2,32)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="591.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="81.5810%" y="565" width="0.0791%" height="15" fill="rgb(224,65,26)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_variant (1 samples, 0.08%)</title><rect x="81.5810%" y="549" width="0.0791%" height="15" fill="rgb(250,73,40)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="559.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::ser::Serialize for plugins_core::moving::model::SimpleRoute&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5810%" y="533" width="0.0791%" height="15" fill="rgb(253,177,16)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5810%" y="517" width="0.0791%" height="15" fill="rgb(217,32,34)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="527.50"></text></g><g><title>kernel::model::entity_ref::_::&lt;impl serde::ser::Serialize for kernel::model::entity_ref::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="81.5810%" y="501" width="0.0791%" height="15" fill="rgb(212,7,10)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.5810%" y="485" width="0.0791%" height="15" fill="rgb(245,89,8)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="81.5810%" y="469" width="0.0791%" height="15" fill="rgb(237,16,53)" fg:x="1032" fg:w="1"/><text x="81.8310%" y="479.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="81.6601%" y="581" width="0.0791%" height="15" fill="rgb(250,204,30)" fg:x="1033" fg:w="1"/><text x="81.9101%" y="591.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.6601%" y="565" width="0.0791%" height="15" fill="rgb(208,77,27)" fg:x="1033" fg:w="1"/><text x="81.9101%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.6601%" y="549" width="0.0791%" height="15" fill="rgb(250,204,28)" fg:x="1033" fg:w="1"/><text x="81.9101%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.6601%" y="533" width="0.0791%" height="15" fill="rgb(244,63,21)" fg:x="1033" fg:w="1"/><text x="81.9101%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.6601%" y="517" width="0.0791%" height="15" fill="rgb(236,85,44)" fg:x="1033" fg:w="1"/><text x="81.9101%" y="527.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.6601%" y="501" width="0.0791%" height="15" fill="rgb(215,98,4)" fg:x="1033" fg:w="1"/><text x="81.9101%" y="511.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="81.7391%" y="533" width="0.0791%" height="15" fill="rgb(235,38,11)" fg:x="1034" fg:w="1"/><text x="81.9891%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="81.7391%" y="517" width="0.0791%" height="15" fill="rgb(254,186,25)" fg:x="1034" fg:w="1"/><text x="81.9891%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.7391%" y="501" width="0.0791%" height="15" fill="rgb(225,55,31)" fg:x="1034" fg:w="1"/><text x="81.9891%" y="511.50"></text></g><g><title>plugins_core::build::BuildSurroundings::make (3 samples, 0.24%)</title><rect x="81.6601%" y="645" width="0.2372%" height="15" fill="rgb(211,15,21)" fg:x="1033" fg:w="3"/><text x="81.9101%" y="655.50"></text></g><g><title>plugins_core::build::QuickThing::make (3 samples, 0.24%)</title><rect x="81.6601%" y="629" width="0.2372%" height="15" fill="rgb(215,187,41)" fg:x="1033" fg:w="3"/><text x="81.9101%" y="639.50"></text></g><g><title>plugins_core::build::Build::save (3 samples, 0.24%)</title><rect x="81.6601%" y="613" width="0.2372%" height="15" fill="rgb(248,69,32)" fg:x="1033" fg:w="3"/><text x="81.9101%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="81.6601%" y="597" width="0.2372%" height="15" fill="rgb(252,102,52)" fg:x="1033" fg:w="3"/><text x="81.9101%" y="607.50"></text></g><g><title>engine::session::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="81.7391%" y="581" width="0.1581%" height="15" fill="rgb(253,140,32)" fg:x="1034" fg:w="2"/><text x="81.9891%" y="591.50"></text></g><g><title>serde_json::value::to_value (2 samples, 0.16%)</title><rect x="81.7391%" y="565" width="0.1581%" height="15" fill="rgb(216,56,42)" fg:x="1034" fg:w="2"/><text x="81.9891%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 0.16%)</title><rect x="81.7391%" y="549" width="0.1581%" height="15" fill="rgb(216,184,14)" fg:x="1034" fg:w="2"/><text x="81.9891%" y="559.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="81.8182%" y="533" width="0.0791%" height="15" fill="rgb(237,187,27)" fg:x="1035" fg:w="1"/><text x="82.0682%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.8182%" y="517" width="0.0791%" height="15" fill="rgb(219,65,3)" fg:x="1035" fg:w="1"/><text x="82.0682%" y="527.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="81.8972%" y="629" width="0.0791%" height="15" fill="rgb(245,83,25)" fg:x="1036" fg:w="1"/><text x="82.1472%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="81.8972%" y="613" width="0.0791%" height="15" fill="rgb(214,205,45)" fg:x="1036" fg:w="1"/><text x="82.1472%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="81.9763%" y="613" width="0.0791%" height="15" fill="rgb(241,20,18)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="81.9763%" y="597" width="0.0791%" height="15" fill="rgb(232,163,23)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="607.50"></text></g><g><title>&lt;kernel::model::base::EntityGid as engine::session::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="81.9763%" y="581" width="0.0791%" height="15" fill="rgb(214,5,46)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="591.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="81.9763%" y="565" width="0.0791%" height="15" fill="rgb(229,78,17)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="575.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="81.9763%" y="549" width="0.0791%" height="15" fill="rgb(248,89,10)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="559.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="81.9763%" y="533" width="0.0791%" height="15" fill="rgb(248,54,15)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="81.9763%" y="517" width="0.0791%" height="15" fill="rgb(223,116,6)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="81.9763%" y="501" width="0.0791%" height="15" fill="rgb(205,125,38)" fg:x="1037" fg:w="1"/><text x="82.2263%" y="511.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (61 samples, 4.82%)</title><rect x="77.3123%" y="661" width="4.8221%" height="15" fill="rgb(251,78,38)" fg:x="978" fg:w="61"/><text x="77.5623%" y="671.50">&lt;tests..</text></g><g><title>plugins_core::build::BuildSurroundings::new_in_session (3 samples, 0.24%)</title><rect x="81.8972%" y="645" width="0.2372%" height="15" fill="rgb(253,78,28)" fg:x="1036" fg:w="3"/><text x="82.1472%" y="655.50"></text></g><g><title>plugins_core::build::Build::save (2 samples, 0.16%)</title><rect x="81.9763%" y="629" width="0.1581%" height="15" fill="rgb(209,120,3)" fg:x="1037" fg:w="2"/><text x="82.2263%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="82.0553%" y="613" width="0.0791%" height="15" fill="rgb(238,229,9)" fg:x="1038" fg:w="1"/><text x="82.3053%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="82.0553%" y="597" width="0.0791%" height="15" fill="rgb(253,159,18)" fg:x="1038" fg:w="1"/><text x="82.3053%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="82.0553%" y="581" width="0.0791%" height="15" fill="rgb(244,42,34)" fg:x="1038" fg:w="1"/><text x="82.3053%" y="591.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="82.1344%" y="645" width="0.0791%" height="15" fill="rgb(224,8,7)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="655.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="82.1344%" y="629" width="0.0791%" height="15" fill="rgb(210,201,45)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="82.1344%" y="613" width="0.0791%" height="15" fill="rgb(252,185,21)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="623.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="82.1344%" y="597" width="0.0791%" height="15" fill="rgb(223,131,1)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="607.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="82.1344%" y="581" width="0.0791%" height="15" fill="rgb(245,141,16)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="591.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="82.1344%" y="565" width="0.0791%" height="15" fill="rgb(229,55,45)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="575.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="82.1344%" y="549" width="0.0791%" height="15" fill="rgb(208,92,15)" fg:x="1039" fg:w="1"/><text x="82.3844%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="82.2134%" y="549" width="0.0791%" height="15" fill="rgb(234,185,47)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="559.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.2134%" y="533" width="0.0791%" height="15" fill="rgb(253,104,50)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="543.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.2134%" y="517" width="0.0791%" height="15" fill="rgb(205,70,7)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="527.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.2134%" y="501" width="0.0791%" height="15" fill="rgb(240,178,43)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.2134%" y="485" width="0.0791%" height="15" fill="rgb(214,112,2)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.2134%" y="469" width="0.0791%" height="15" fill="rgb(206,46,17)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.2134%" y="453" width="0.0791%" height="15" fill="rgb(225,220,16)" fg:x="1040" fg:w="1"/><text x="82.4634%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.2925%" y="533" width="0.1581%" height="15" fill="rgb(238,65,40)" fg:x="1041" fg:w="2"/><text x="82.5425%" y="543.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.2925%" y="517" width="0.1581%" height="15" fill="rgb(230,151,21)" fg:x="1041" fg:w="2"/><text x="82.5425%" y="527.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="82.4506%" y="501" width="0.0791%" height="15" fill="rgb(218,58,49)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="511.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="82.4506%" y="485" width="0.0791%" height="15" fill="rgb(219,179,14)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="495.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="82.4506%" y="469" width="0.0791%" height="15" fill="rgb(223,72,1)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="479.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="82.4506%" y="453" width="0.0791%" height="15" fill="rgb(238,126,10)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="82.4506%" y="437" width="0.0791%" height="15" fill="rgb(224,206,38)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.4506%" y="421" width="0.0791%" height="15" fill="rgb(212,201,54)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="431.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="82.4506%" y="405" width="0.0791%" height="15" fill="rgb(218,154,48)" fg:x="1043" fg:w="1"/><text x="82.7006%" y="415.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (6 samples, 0.47%)</title><rect x="82.2134%" y="565" width="0.4743%" height="15" fill="rgb(232,93,24)" fg:x="1040" fg:w="6"/><text x="82.4634%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="82.2925%" y="549" width="0.3953%" height="15" fill="rgb(245,30,21)" fg:x="1041" fg:w="5"/><text x="82.5425%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="82.4506%" y="533" width="0.2372%" height="15" fill="rgb(242,148,29)" fg:x="1043" fg:w="3"/><text x="82.7006%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="82.4506%" y="517" width="0.2372%" height="15" fill="rgb(244,153,54)" fg:x="1043" fg:w="3"/><text x="82.7006%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="82.5296%" y="501" width="0.1581%" height="15" fill="rgb(252,87,22)" fg:x="1044" fg:w="2"/><text x="82.7796%" y="511.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.16%)</title><rect x="82.5296%" y="485" width="0.1581%" height="15" fill="rgb(210,51,29)" fg:x="1044" fg:w="2"/><text x="82.7796%" y="495.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="82.5296%" y="469" width="0.1581%" height="15" fill="rgb(242,136,47)" fg:x="1044" fg:w="2"/><text x="82.7796%" y="479.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="82.5296%" y="453" width="0.1581%" height="15" fill="rgb(238,68,4)" fg:x="1044" fg:w="2"/><text x="82.7796%" y="463.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="82.6877%" y="533" width="0.0791%" height="15" fill="rgb(242,161,30)" fg:x="1046" fg:w="1"/><text x="82.9377%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="82.7668%" y="517" width="0.0791%" height="15" fill="rgb(218,58,44)" fg:x="1047" fg:w="1"/><text x="83.0168%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="82.6877%" y="565" width="0.2372%" height="15" fill="rgb(252,125,32)" fg:x="1046" fg:w="3"/><text x="82.9377%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.24%)</title><rect x="82.6877%" y="549" width="0.2372%" height="15" fill="rgb(219,178,0)" fg:x="1046" fg:w="3"/><text x="82.9377%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="82.7668%" y="533" width="0.1581%" height="15" fill="rgb(213,152,7)" fg:x="1047" fg:w="2"/><text x="83.0168%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8458%" y="517" width="0.0791%" height="15" fill="rgb(249,109,34)" fg:x="1048" fg:w="1"/><text x="83.0958%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8458%" y="501" width="0.0791%" height="15" fill="rgb(232,96,21)" fg:x="1048" fg:w="1"/><text x="83.0958%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8458%" y="485" width="0.0791%" height="15" fill="rgb(228,27,39)" fg:x="1048" fg:w="1"/><text x="83.0958%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="82.8458%" y="469" width="0.0791%" height="15" fill="rgb(211,182,52)" fg:x="1048" fg:w="1"/><text x="83.0958%" y="479.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.0830%" y="485" width="0.0791%" height="15" fill="rgb(234,178,38)" fg:x="1051" fg:w="1"/><text x="83.3330%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.3202%" y="469" width="0.0791%" height="15" fill="rgb(221,111,3)" fg:x="1054" fg:w="1"/><text x="83.5702%" y="479.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.3202%" y="453" width="0.0791%" height="15" fill="rgb(228,175,21)" fg:x="1054" fg:w="1"/><text x="83.5702%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.3992%" y="453" width="0.0791%" height="15" fill="rgb(228,174,43)" fg:x="1055" fg:w="1"/><text x="83.6492%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="83.4783%" y="437" width="0.0791%" height="15" fill="rgb(211,191,0)" fg:x="1056" fg:w="1"/><text x="83.7283%" y="447.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="83.5573%" y="437" width="0.0791%" height="15" fill="rgb(253,117,3)" fg:x="1057" fg:w="1"/><text x="83.8073%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="82.9249%" y="533" width="0.7905%" height="15" fill="rgb(241,127,19)" fg:x="1049" fg:w="10"/><text x="83.1749%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (10 samples, 0.79%)</title><rect x="82.9249%" y="517" width="0.7905%" height="15" fill="rgb(218,103,12)" fg:x="1049" fg:w="10"/><text x="83.1749%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (10 samples, 0.79%)</title><rect x="82.9249%" y="501" width="0.7905%" height="15" fill="rgb(236,214,43)" fg:x="1049" fg:w="10"/><text x="83.1749%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.55%)</title><rect x="83.1621%" y="485" width="0.5534%" height="15" fill="rgb(244,144,19)" fg:x="1052" fg:w="7"/><text x="83.4121%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="83.3992%" y="469" width="0.3162%" height="15" fill="rgb(246,188,10)" fg:x="1055" fg:w="4"/><text x="83.6492%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="83.4783%" y="453" width="0.2372%" height="15" fill="rgb(212,193,33)" fg:x="1056" fg:w="3"/><text x="83.7283%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="83.6364%" y="437" width="0.0791%" height="15" fill="rgb(241,51,29)" fg:x="1058" fg:w="1"/><text x="83.8864%" y="447.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (11 samples, 0.87%)</title><rect x="82.9249%" y="549" width="0.8696%" height="15" fill="rgb(211,58,19)" fg:x="1049" fg:w="11"/><text x="83.1749%" y="559.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="83.7154%" y="533" width="0.0791%" height="15" fill="rgb(229,111,26)" fg:x="1059" fg:w="1"/><text x="83.9654%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7154%" y="517" width="0.0791%" height="15" fill="rgb(213,115,40)" fg:x="1059" fg:w="1"/><text x="83.9654%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="83.7154%" y="501" width="0.0791%" height="15" fill="rgb(209,56,44)" fg:x="1059" fg:w="1"/><text x="83.9654%" y="511.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="83.7154%" y="485" width="0.0791%" height="15" fill="rgb(230,108,32)" fg:x="1059" fg:w="1"/><text x="83.9654%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="83.9526%" y="517" width="0.1581%" height="15" fill="rgb(216,165,31)" fg:x="1062" fg:w="2"/><text x="84.2026%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.0316%" y="501" width="0.0791%" height="15" fill="rgb(218,122,21)" fg:x="1063" fg:w="1"/><text x="84.2816%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="84.1107%" y="501" width="0.0791%" height="15" fill="rgb(223,224,47)" fg:x="1064" fg:w="1"/><text x="84.3607%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="84.1897%" y="485" width="0.0791%" height="15" fill="rgb(238,102,44)" fg:x="1065" fg:w="1"/><text x="84.4397%" y="495.50"></text></g><g><title>serde::ser::Serializer::collect_seq (2 samples, 0.16%)</title><rect x="84.2688%" y="469" width="0.1581%" height="15" fill="rgb(236,46,40)" fg:x="1066" fg:w="2"/><text x="84.5188%" y="479.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="84.2688%" y="453" width="0.1581%" height="15" fill="rgb(247,202,50)" fg:x="1066" fg:w="2"/><text x="84.5188%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="84.2688%" y="437" width="0.1581%" height="15" fill="rgb(209,99,20)" fg:x="1066" fg:w="2"/><text x="84.5188%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3478%" y="421" width="0.0791%" height="15" fill="rgb(252,27,34)" fg:x="1067" fg:w="1"/><text x="84.5978%" y="431.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.3478%" y="405" width="0.0791%" height="15" fill="rgb(215,206,23)" fg:x="1067" fg:w="1"/><text x="84.5978%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.3478%" y="389" width="0.0791%" height="15" fill="rgb(212,135,36)" fg:x="1067" fg:w="1"/><text x="84.5978%" y="399.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (9 samples, 0.71%)</title><rect x="83.7945%" y="549" width="0.7115%" height="15" fill="rgb(240,189,1)" fg:x="1060" fg:w="9"/><text x="84.0445%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (8 samples, 0.63%)</title><rect x="83.8735%" y="533" width="0.6324%" height="15" fill="rgb(242,56,20)" fg:x="1061" fg:w="8"/><text x="84.1235%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_map (5 samples, 0.40%)</title><rect x="84.1107%" y="517" width="0.3953%" height="15" fill="rgb(247,132,33)" fg:x="1064" fg:w="5"/><text x="84.3607%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (4 samples, 0.32%)</title><rect x="84.1897%" y="501" width="0.3162%" height="15" fill="rgb(208,149,11)" fg:x="1065" fg:w="4"/><text x="84.4397%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="84.2688%" y="485" width="0.2372%" height="15" fill="rgb(211,33,11)" fg:x="1066" fg:w="3"/><text x="84.5188%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="84.4269%" y="469" width="0.0791%" height="15" fill="rgb(221,29,38)" fg:x="1068" fg:w="1"/><text x="84.6769%" y="479.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="84.4269%" y="453" width="0.0791%" height="15" fill="rgb(206,182,49)" fg:x="1068" fg:w="1"/><text x="84.6769%" y="463.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.6640%" y="469" width="0.0791%" height="15" fill="rgb(216,140,1)" fg:x="1071" fg:w="1"/><text x="84.9140%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.8221%" y="373" width="0.0791%" height="15" fill="rgb(232,57,40)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.8221%" y="357" width="0.0791%" height="15" fill="rgb(224,186,18)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="84.8221%" y="341" width="0.0791%" height="15" fill="rgb(215,121,11)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="84.8221%" y="325" width="0.0791%" height="15" fill="rgb(245,147,10)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="335.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8221%" y="309" width="0.0791%" height="15" fill="rgb(238,153,13)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="319.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="84.8221%" y="293" width="0.0791%" height="15" fill="rgb(233,108,0)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="84.8221%" y="277" width="0.0791%" height="15" fill="rgb(212,157,17)" fg:x="1073" fg:w="1"/><text x="85.0721%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.8221%" y="405" width="0.1581%" height="15" fill="rgb(225,213,38)" fg:x="1073" fg:w="2"/><text x="85.0721%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.8221%" y="389" width="0.1581%" height="15" fill="rgb(248,16,11)" fg:x="1073" fg:w="2"/><text x="85.0721%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.9012%" y="373" width="0.0791%" height="15" fill="rgb(241,33,4)" fg:x="1074" fg:w="1"/><text x="85.1512%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.9012%" y="357" width="0.0791%" height="15" fill="rgb(222,26,43)" fg:x="1074" fg:w="1"/><text x="85.1512%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="84.9802%" y="357" width="0.0791%" height="15" fill="rgb(243,29,36)" fg:x="1075" fg:w="1"/><text x="85.2302%" y="367.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="84.9802%" y="341" width="0.0791%" height="15" fill="rgb(241,9,27)" fg:x="1075" fg:w="1"/><text x="85.2302%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.8221%" y="453" width="0.3162%" height="15" fill="rgb(205,117,26)" fg:x="1073" fg:w="4"/><text x="85.0721%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="84.8221%" y="437" width="0.3162%" height="15" fill="rgb(209,80,39)" fg:x="1073" fg:w="4"/><text x="85.0721%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="84.8221%" y="421" width="0.3162%" height="15" fill="rgb(239,155,6)" fg:x="1073" fg:w="4"/><text x="85.0721%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.9802%" y="405" width="0.1581%" height="15" fill="rgb(212,104,12)" fg:x="1075" fg:w="2"/><text x="85.2302%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="84.9802%" y="389" width="0.1581%" height="15" fill="rgb(234,204,3)" fg:x="1075" fg:w="2"/><text x="85.2302%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="84.9802%" y="373" width="0.1581%" height="15" fill="rgb(251,218,7)" fg:x="1075" fg:w="2"/><text x="85.2302%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.0593%" y="357" width="0.0791%" height="15" fill="rgb(221,81,32)" fg:x="1076" fg:w="1"/><text x="85.3093%" y="367.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.0593%" y="341" width="0.0791%" height="15" fill="rgb(214,152,26)" fg:x="1076" fg:w="1"/><text x="85.3093%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.0593%" y="325" width="0.0791%" height="15" fill="rgb(223,22,3)" fg:x="1076" fg:w="1"/><text x="85.3093%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.55%)</title><rect x="84.6640%" y="485" width="0.5534%" height="15" fill="rgb(207,174,7)" fg:x="1071" fg:w="7"/><text x="84.9140%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.47%)</title><rect x="84.7431%" y="469" width="0.4743%" height="15" fill="rgb(224,19,52)" fg:x="1072" fg:w="6"/><text x="84.9931%" y="479.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.1383%" y="453" width="0.0791%" height="15" fill="rgb(228,24,14)" fg:x="1077" fg:w="1"/><text x="85.3883%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.1383%" y="437" width="0.0791%" height="15" fill="rgb(230,153,43)" fg:x="1077" fg:w="1"/><text x="85.3883%" y="447.50"></text></g><g><title>engine::session::Session::close (41 samples, 3.24%)</title><rect x="82.1344%" y="661" width="3.2411%" height="15" fill="rgb(231,106,12)" fg:x="1039" fg:w="41"/><text x="82.3844%" y="671.50">eng..</text></g><g><title>engine::session::state::State::close (40 samples, 3.16%)</title><rect x="82.2134%" y="645" width="3.1621%" height="15" fill="rgb(215,92,2)" fg:x="1040" fg:w="40"/><text x="82.4634%" y="655.50">eng..</text></g><g><title>engine::session::state::State::flush_entities (40 samples, 3.16%)</title><rect x="82.2134%" y="629" width="3.1621%" height="15" fill="rgb(249,143,25)" fg:x="1040" fg:w="40"/><text x="82.4634%" y="639.50">eng..</text></g><g><title>core::iter::adapters::try_process (40 samples, 3.16%)</title><rect x="82.2134%" y="613" width="3.1621%" height="15" fill="rgb(252,7,35)" fg:x="1040" fg:w="40"/><text x="82.4634%" y="623.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 3.16%)</title><rect x="82.2134%" y="597" width="3.1621%" height="15" fill="rgb(216,69,40)" fg:x="1040" fg:w="40"/><text x="82.4634%" y="607.50">&lt;al..</text></g><g><title>engine::session::state::SavesEntities::check_for_changes (40 samples, 3.16%)</title><rect x="82.2134%" y="581" width="3.1621%" height="15" fill="rgb(240,36,33)" fg:x="1040" fg:w="40"/><text x="82.4634%" y="591.50">eng..</text></g><g><title>kernel::model::any_entity_changes (31 samples, 2.45%)</title><rect x="82.9249%" y="565" width="2.4506%" height="15" fill="rgb(231,128,14)" fg:x="1049" fg:w="31"/><text x="83.1749%" y="575.50">ke..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (11 samples, 0.87%)</title><rect x="84.5059%" y="549" width="0.8696%" height="15" fill="rgb(245,143,14)" fg:x="1069" fg:w="11"/><text x="84.7559%" y="559.50"></text></g><g><title>serde_json::de::from_trait (11 samples, 0.87%)</title><rect x="84.5059%" y="533" width="0.8696%" height="15" fill="rgb(222,130,28)" fg:x="1069" fg:w="11"/><text x="84.7559%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (11 samples, 0.87%)</title><rect x="84.5059%" y="517" width="0.8696%" height="15" fill="rgb(212,10,48)" fg:x="1069" fg:w="11"/><text x="84.7559%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.79%)</title><rect x="84.5850%" y="501" width="0.7905%" height="15" fill="rgb(254,118,45)" fg:x="1070" fg:w="10"/><text x="84.8350%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="85.2174%" y="485" width="0.1581%" height="15" fill="rgb(228,6,45)" fg:x="1078" fg:w="2"/><text x="85.4674%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.2964%" y="469" width="0.0791%" height="15" fill="rgb(241,18,35)" fg:x="1079" fg:w="1"/><text x="85.5464%" y="479.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="85.3755%" y="533" width="0.0791%" height="15" fill="rgb(227,214,53)" fg:x="1080" fg:w="1"/><text x="85.6255%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="85.3755%" y="517" width="0.0791%" height="15" fill="rgb(224,107,51)" fg:x="1080" fg:w="1"/><text x="85.6255%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.3755%" y="501" width="0.0791%" height="15" fill="rgb(248,60,28)" fg:x="1080" fg:w="1"/><text x="85.6255%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="85.3755%" y="485" width="0.0791%" height="15" fill="rgb(249,101,23)" fg:x="1080" fg:w="1"/><text x="85.6255%" y="495.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="85.4545%" y="469" width="0.0791%" height="15" fill="rgb(228,51,19)" fg:x="1081" fg:w="1"/><text x="85.7045%" y="479.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.4545%" y="453" width="0.0791%" height="15" fill="rgb(213,20,6)" fg:x="1081" fg:w="1"/><text x="85.7045%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="85.4545%" y="437" width="0.0791%" height="15" fill="rgb(212,124,10)" fg:x="1081" fg:w="1"/><text x="85.7045%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="85.4545%" y="421" width="0.0791%" height="15" fill="rgb(248,3,40)" fg:x="1081" fg:w="1"/><text x="85.7045%" y="431.50"></text></g><g><title>kernel::model::entity::Entity::from_value (2 samples, 0.16%)</title><rect x="85.5336%" y="469" width="0.1581%" height="15" fill="rgb(223,178,23)" fg:x="1082" fg:w="2"/><text x="85.7836%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="85.5336%" y="453" width="0.1581%" height="15" fill="rgb(240,132,45)" fg:x="1082" fg:w="2"/><text x="85.7836%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="85.5336%" y="437" width="0.1581%" height="15" fill="rgb(245,164,36)" fg:x="1082" fg:w="2"/><text x="85.7836%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.6126%" y="421" width="0.0791%" height="15" fill="rgb(231,188,53)" fg:x="1083" fg:w="1"/><text x="85.8626%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="85.6126%" y="405" width="0.0791%" height="15" fill="rgb(237,198,39)" fg:x="1083" fg:w="1"/><text x="85.8626%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="85.6126%" y="389" width="0.0791%" height="15" fill="rgb(223,120,35)" fg:x="1083" fg:w="1"/><text x="85.8626%" y="399.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.6126%" y="373" width="0.0791%" height="15" fill="rgb(253,107,49)" fg:x="1083" fg:w="1"/><text x="85.8626%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.6126%" y="357" width="0.0791%" height="15" fill="rgb(216,44,31)" fg:x="1083" fg:w="1"/><text x="85.8626%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="85.6126%" y="341" width="0.0791%" height="15" fill="rgb(253,87,21)" fg:x="1083" fg:w="1"/><text x="85.8626%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.6917%" y="293" width="0.0791%" height="15" fill="rgb(226,18,2)" fg:x="1084" fg:w="1"/><text x="85.9417%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="85.6917%" y="277" width="0.0791%" height="15" fill="rgb(216,8,46)" fg:x="1084" fg:w="1"/><text x="85.9417%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="85.6917%" y="261" width="0.0791%" height="15" fill="rgb(226,140,39)" fg:x="1084" fg:w="1"/><text x="85.9417%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.6917%" y="341" width="0.1581%" height="15" fill="rgb(221,194,54)" fg:x="1084" fg:w="2"/><text x="85.9417%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="85.6917%" y="325" width="0.1581%" height="15" fill="rgb(213,92,11)" fg:x="1084" fg:w="2"/><text x="85.9417%" y="335.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="85.6917%" y="309" width="0.1581%" height="15" fill="rgb(229,162,46)" fg:x="1084" fg:w="2"/><text x="85.9417%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.7708%" y="293" width="0.0791%" height="15" fill="rgb(214,111,36)" fg:x="1085" fg:w="1"/><text x="86.0208%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.7708%" y="277" width="0.0791%" height="15" fill="rgb(207,6,21)" fg:x="1085" fg:w="1"/><text x="86.0208%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="85.6917%" y="373" width="0.2372%" height="15" fill="rgb(213,127,38)" fg:x="1084" fg:w="3"/><text x="85.9417%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="85.6917%" y="357" width="0.2372%" height="15" fill="rgb(238,118,32)" fg:x="1084" fg:w="3"/><text x="85.9417%" y="367.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.8498%" y="341" width="0.0791%" height="15" fill="rgb(240,139,39)" fg:x="1086" fg:w="1"/><text x="86.0998%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.8498%" y="325" width="0.0791%" height="15" fill="rgb(235,10,37)" fg:x="1086" fg:w="1"/><text x="86.0998%" y="335.50"></text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (7 samples, 0.55%)</title><rect x="85.4545%" y="533" width="0.5534%" height="15" fill="rgb(249,171,38)" fg:x="1081" fg:w="7"/><text x="85.7045%" y="543.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (7 samples, 0.55%)</title><rect x="85.4545%" y="517" width="0.5534%" height="15" fill="rgb(242,144,32)" fg:x="1081" fg:w="7"/><text x="85.7045%" y="527.50"></text></g><g><title>engine::session::Session::load_entity (7 samples, 0.55%)</title><rect x="85.4545%" y="501" width="0.5534%" height="15" fill="rgb(217,117,21)" fg:x="1081" fg:w="7"/><text x="85.7045%" y="511.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (7 samples, 0.55%)</title><rect x="85.4545%" y="485" width="0.5534%" height="15" fill="rgb(249,87,1)" fg:x="1081" fg:w="7"/><text x="85.7045%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (4 samples, 0.32%)</title><rect x="85.6917%" y="469" width="0.3162%" height="15" fill="rgb(248,196,48)" fg:x="1084" fg:w="4"/><text x="85.9417%" y="479.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="85.6917%" y="453" width="0.3162%" height="15" fill="rgb(251,206,33)" fg:x="1084" fg:w="4"/><text x="85.9417%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="85.6917%" y="437" width="0.3162%" height="15" fill="rgb(232,141,28)" fg:x="1084" fg:w="4"/><text x="85.9417%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="85.6917%" y="421" width="0.3162%" height="15" fill="rgb(209,167,14)" fg:x="1084" fg:w="4"/><text x="85.9417%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="85.6917%" y="405" width="0.3162%" height="15" fill="rgb(225,11,50)" fg:x="1084" fg:w="4"/><text x="85.9417%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="85.6917%" y="389" width="0.3162%" height="15" fill="rgb(209,50,20)" fg:x="1084" fg:w="4"/><text x="85.9417%" y="399.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="85.9289%" y="373" width="0.0791%" height="15" fill="rgb(212,17,46)" fg:x="1087" fg:w="1"/><text x="86.1789%" y="383.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="85.9289%" y="357" width="0.0791%" height="15" fill="rgb(216,101,39)" fg:x="1087" fg:w="1"/><text x="86.1789%" y="367.50"></text></g><g><title>&lt;engine::session::MakeSurroundings as core::convert::TryInto&lt;kernel::surround::Surroundings&gt;&gt;::try_into (9 samples, 0.71%)</title><rect x="85.3755%" y="565" width="0.7115%" height="15" fill="rgb(212,228,48)" fg:x="1080" fg:w="9"/><text x="85.6255%" y="575.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::finder::Finder&gt;::find_location (9 samples, 0.71%)</title><rect x="85.3755%" y="549" width="0.7115%" height="15" fill="rgb(250,6,50)" fg:x="1080" fg:w="9"/><text x="85.6255%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0079%" y="533" width="0.0791%" height="15" fill="rgb(250,160,48)" fg:x="1088" fg:w="1"/><text x="86.2579%" y="543.50"></text></g><g><title>&lt;kernel::actions::Effect as core::convert::TryFrom&lt;replies::AreaObservation&gt;&gt;::try_from (1 samples, 0.08%)</title><rect x="86.0870%" y="421" width="0.0791%" height="15" fill="rgb(244,216,33)" fg:x="1089" fg:w="1"/><text x="86.3370%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::AreaObservation&gt; (1 samples, 0.08%)</title><rect x="86.0870%" y="405" width="0.0791%" height="15" fill="rgb(207,157,5)" fg:x="1089" fg:w="1"/><text x="86.3370%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;replies::ObservedEntity&gt; (1 samples, 0.08%)</title><rect x="86.0870%" y="389" width="0.0791%" height="15" fill="rgb(228,199,8)" fg:x="1089" fg:w="1"/><text x="86.3370%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.0870%" y="373" width="0.0791%" height="15" fill="rgb(227,80,20)" fg:x="1089" fg:w="1"/><text x="86.3370%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.3241%" y="373" width="0.0791%" height="15" fill="rgb(222,9,33)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.3241%" y="357" width="0.0791%" height="15" fill="rgb(239,44,28)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="367.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.3241%" y="341" width="0.0791%" height="15" fill="rgb(249,187,43)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.3241%" y="325" width="0.0791%" height="15" fill="rgb(216,141,28)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.3241%" y="309" width="0.0791%" height="15" fill="rgb(230,154,53)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.3241%" y="293" width="0.0791%" height="15" fill="rgb(227,82,4)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.3241%" y="277" width="0.0791%" height="15" fill="rgb(220,107,16)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.3241%" y="261" width="0.0791%" height="15" fill="rgb(207,187,2)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="86.3241%" y="245" width="0.0791%" height="15" fill="rgb(210,162,52)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.3241%" y="229" width="0.0791%" height="15" fill="rgb(217,216,49)" fg:x="1092" fg:w="1"/><text x="86.5741%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="86.3241%" y="389" width="0.2372%" height="15" fill="rgb(218,146,49)" fg:x="1092" fg:w="3"/><text x="86.5741%" y="399.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="86.4032%" y="373" width="0.1581%" height="15" fill="rgb(216,55,40)" fg:x="1093" fg:w="2"/><text x="86.6532%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.4032%" y="357" width="0.1581%" height="15" fill="rgb(208,196,21)" fg:x="1093" fg:w="2"/><text x="86.6532%" y="367.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Kind&gt;::deserialize (2 samples, 0.16%)</title><rect x="86.4032%" y="341" width="0.1581%" height="15" fill="rgb(242,117,42)" fg:x="1093" fg:w="2"/><text x="86.6532%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.4032%" y="325" width="0.1581%" height="15" fill="rgb(210,11,23)" fg:x="1093" fg:w="2"/><text x="86.6532%" y="335.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::Identity&gt;::deserialize (2 samples, 0.16%)</title><rect x="86.4032%" y="309" width="0.1581%" height="15" fill="rgb(217,110,2)" fg:x="1093" fg:w="2"/><text x="86.6532%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="86.4032%" y="293" width="0.1581%" height="15" fill="rgb(229,77,54)" fg:x="1093" fg:w="2"/><text x="86.6532%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="86.5613%" y="373" width="0.0791%" height="15" fill="rgb(218,53,16)" fg:x="1095" fg:w="1"/><text x="86.8113%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="86.5613%" y="389" width="0.1581%" height="15" fill="rgb(215,38,13)" fg:x="1095" fg:w="2"/><text x="86.8113%" y="399.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="86.6403%" y="373" width="0.0791%" height="15" fill="rgb(235,42,18)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="86.6403%" y="357" width="0.0791%" height="15" fill="rgb(219,66,54)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.6403%" y="341" width="0.0791%" height="15" fill="rgb(222,205,4)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.6403%" y="325" width="0.0791%" height="15" fill="rgb(227,213,46)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="86.6403%" y="309" width="0.0791%" height="15" fill="rgb(250,145,42)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.6403%" y="293" width="0.0791%" height="15" fill="rgb(219,15,2)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="86.6403%" y="277" width="0.0791%" height="15" fill="rgb(231,181,52)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="86.6403%" y="261" width="0.0791%" height="15" fill="rgb(235,1,42)" fg:x="1096" fg:w="1"/><text x="86.8903%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="86.7984%" y="373" width="0.0791%" height="15" fill="rgb(249,88,27)" fg:x="1098" fg:w="1"/><text x="87.0484%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="86.8775%" y="341" width="0.1581%" height="15" fill="rgb(235,145,16)" fg:x="1099" fg:w="2"/><text x="87.1275%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="86.9565%" y="325" width="0.0791%" height="15" fill="rgb(237,114,19)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9565%" y="309" width="0.0791%" height="15" fill="rgb(238,51,50)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="86.9565%" y="293" width="0.0791%" height="15" fill="rgb(205,194,25)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="303.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="86.9565%" y="277" width="0.0791%" height="15" fill="rgb(215,203,17)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="287.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="86.9565%" y="261" width="0.0791%" height="15" fill="rgb(233,112,49)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="271.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="86.9565%" y="245" width="0.0791%" height="15" fill="rgb(241,130,26)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="86.9565%" y="229" width="0.0791%" height="15" fill="rgb(252,223,19)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="86.9565%" y="213" width="0.0791%" height="15" fill="rgb(211,95,25)" fg:x="1100" fg:w="1"/><text x="87.2065%" y="223.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.47%)</title><rect x="86.7194%" y="389" width="0.4743%" height="15" fill="rgb(251,182,27)" fg:x="1097" fg:w="6"/><text x="86.9694%" y="399.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="86.8775%" y="373" width="0.3162%" height="15" fill="rgb(238,24,4)" fg:x="1099" fg:w="4"/><text x="87.1275%" y="383.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="86.8775%" y="357" width="0.3162%" height="15" fill="rgb(224,220,25)" fg:x="1099" fg:w="4"/><text x="87.1275%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.0356%" y="341" width="0.1581%" height="15" fill="rgb(239,133,26)" fg:x="1101" fg:w="2"/><text x="87.2856%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.1146%" y="325" width="0.0791%" height="15" fill="rgb(211,94,48)" fg:x="1102" fg:w="1"/><text x="87.3646%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="87.1146%" y="309" width="0.0791%" height="15" fill="rgb(239,87,6)" fg:x="1102" fg:w="1"/><text x="87.3646%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="87.1146%" y="293" width="0.0791%" height="15" fill="rgb(227,62,0)" fg:x="1102" fg:w="1"/><text x="87.3646%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="87.1146%" y="277" width="0.0791%" height="15" fill="rgb(211,226,4)" fg:x="1102" fg:w="1"/><text x="87.3646%" y="287.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.1146%" y="261" width="0.0791%" height="15" fill="rgb(253,38,52)" fg:x="1102" fg:w="1"/><text x="87.3646%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.1937%" y="325" width="0.0791%" height="15" fill="rgb(229,126,40)" fg:x="1103" fg:w="1"/><text x="87.4437%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="87.1937%" y="309" width="0.0791%" height="15" fill="rgb(229,165,44)" fg:x="1103" fg:w="1"/><text x="87.4437%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.2727%" y="229" width="0.0791%" height="15" fill="rgb(247,95,47)" fg:x="1104" fg:w="1"/><text x="87.5227%" y="239.50"></text></g><g><title>kernel::model::EntityPtr::gid (3 samples, 0.24%)</title><rect x="87.1937%" y="389" width="0.2372%" height="15" fill="rgb(216,140,30)" fg:x="1103" fg:w="3"/><text x="87.4437%" y="399.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="87.1937%" y="373" width="0.2372%" height="15" fill="rgb(246,214,8)" fg:x="1103" fg:w="3"/><text x="87.4437%" y="383.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="87.1937%" y="357" width="0.2372%" height="15" fill="rgb(227,224,15)" fg:x="1103" fg:w="3"/><text x="87.4437%" y="367.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (3 samples, 0.24%)</title><rect x="87.1937%" y="341" width="0.2372%" height="15" fill="rgb(233,175,4)" fg:x="1103" fg:w="3"/><text x="87.4437%" y="351.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.2727%" y="325" width="0.1581%" height="15" fill="rgb(221,66,45)" fg:x="1104" fg:w="2"/><text x="87.5227%" y="335.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.2727%" y="309" width="0.1581%" height="15" fill="rgb(221,178,18)" fg:x="1104" fg:w="2"/><text x="87.5227%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="87.2727%" y="293" width="0.1581%" height="15" fill="rgb(213,81,29)" fg:x="1104" fg:w="2"/><text x="87.5227%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.2727%" y="277" width="0.1581%" height="15" fill="rgb(220,89,49)" fg:x="1104" fg:w="2"/><text x="87.5227%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="87.2727%" y="261" width="0.1581%" height="15" fill="rgb(227,60,33)" fg:x="1104" fg:w="2"/><text x="87.5227%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="87.2727%" y="245" width="0.1581%" height="15" fill="rgb(205,113,12)" fg:x="1104" fg:w="2"/><text x="87.5227%" y="255.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="87.3518%" y="229" width="0.0791%" height="15" fill="rgb(211,32,1)" fg:x="1105" fg:w="1"/><text x="87.6018%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.3518%" y="213" width="0.0791%" height="15" fill="rgb(246,2,12)" fg:x="1105" fg:w="1"/><text x="87.6018%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="87.5099%" y="309" width="0.0791%" height="15" fill="rgb(243,37,27)" fg:x="1107" fg:w="1"/><text x="87.7599%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="87.5889%" y="309" width="0.1581%" height="15" fill="rgb(248,211,31)" fg:x="1108" fg:w="2"/><text x="87.8389%" y="319.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="87.5889%" y="293" width="0.1581%" height="15" fill="rgb(242,146,47)" fg:x="1108" fg:w="2"/><text x="87.8389%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (2 samples, 0.16%)</title><rect x="87.5889%" y="277" width="0.1581%" height="15" fill="rgb(206,70,20)" fg:x="1108" fg:w="2"/><text x="87.8389%" y="287.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="87.5889%" y="261" width="0.1581%" height="15" fill="rgb(215,10,51)" fg:x="1108" fg:w="2"/><text x="87.8389%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (3 samples, 0.24%)</title><rect x="87.8261%" y="245" width="0.2372%" height="15" fill="rgb(243,178,53)" fg:x="1111" fg:w="3"/><text x="88.0761%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (3 samples, 0.24%)</title><rect x="87.8261%" y="229" width="0.2372%" height="15" fill="rgb(233,221,20)" fg:x="1111" fg:w="3"/><text x="88.0761%" y="239.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="88.0632%" y="245" width="0.0791%" height="15" fill="rgb(218,95,35)" fg:x="1114" fg:w="1"/><text x="88.3132%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="88.0632%" y="229" width="0.0791%" height="15" fill="rgb(229,13,5)" fg:x="1114" fg:w="1"/><text x="88.3132%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="88.1423%" y="181" width="0.0791%" height="15" fill="rgb(252,164,30)" fg:x="1115" fg:w="1"/><text x="88.3923%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (2 samples, 0.16%)</title><rect x="88.2213%" y="181" width="0.1581%" height="15" fill="rgb(232,68,36)" fg:x="1116" fg:w="2"/><text x="88.4713%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (2 samples, 0.16%)</title><rect x="88.2213%" y="165" width="0.1581%" height="15" fill="rgb(219,59,54)" fg:x="1116" fg:w="2"/><text x="88.4713%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="88.2213%" y="149" width="0.1581%" height="15" fill="rgb(250,92,33)" fg:x="1116" fg:w="2"/><text x="88.4713%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="88.2213%" y="133" width="0.1581%" height="15" fill="rgb(229,162,54)" fg:x="1116" fg:w="2"/><text x="88.4713%" y="143.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="88.2213%" y="117" width="0.1581%" height="15" fill="rgb(244,114,52)" fg:x="1116" fg:w="2"/><text x="88.4713%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (24 samples, 1.90%)</title><rect x="88.3794%" y="181" width="1.8972%" height="15" fill="rgb(212,211,43)" fg:x="1118" fg:w="24"/><text x="88.6294%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (24 samples, 1.90%)</title><rect x="88.3794%" y="165" width="1.8972%" height="15" fill="rgb(226,147,8)" fg:x="1118" fg:w="24"/><text x="88.6294%" y="175.50">r..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (24 samples, 1.90%)</title><rect x="88.3794%" y="149" width="1.8972%" height="15" fill="rgb(226,23,13)" fg:x="1118" fg:w="24"/><text x="88.6294%" y="159.50">a..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (29 samples, 2.29%)</title><rect x="88.1423%" y="229" width="2.2925%" height="15" fill="rgb(240,63,4)" fg:x="1115" fg:w="29"/><text x="88.3923%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (29 samples, 2.29%)</title><rect x="88.1423%" y="213" width="2.2925%" height="15" fill="rgb(221,1,32)" fg:x="1115" fg:w="29"/><text x="88.3923%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (29 samples, 2.29%)</title><rect x="88.1423%" y="197" width="2.2925%" height="15" fill="rgb(242,117,10)" fg:x="1115" fg:w="29"/><text x="88.3923%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (2 samples, 0.16%)</title><rect x="90.2767%" y="181" width="0.1581%" height="15" fill="rgb(249,172,44)" fg:x="1142" fg:w="2"/><text x="90.5267%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="90.3557%" y="165" width="0.0791%" height="15" fill="rgb(244,46,45)" fg:x="1143" fg:w="1"/><text x="90.6057%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (1 samples, 0.08%)</title><rect x="90.5138%" y="213" width="0.0791%" height="15" fill="rgb(206,43,17)" fg:x="1145" fg:w="1"/><text x="90.7638%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="90.5138%" y="197" width="0.0791%" height="15" fill="rgb(239,218,39)" fg:x="1145" fg:w="1"/><text x="90.7638%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="90.5138%" y="181" width="0.0791%" height="15" fill="rgb(208,169,54)" fg:x="1145" fg:w="1"/><text x="90.7638%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="90.5138%" y="165" width="0.0791%" height="15" fill="rgb(247,25,42)" fg:x="1145" fg:w="1"/><text x="90.7638%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (5 samples, 0.40%)</title><rect x="90.5929%" y="213" width="0.3953%" height="15" fill="rgb(226,23,31)" fg:x="1146" fg:w="5"/><text x="90.8429%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (8 samples, 0.63%)</title><rect x="90.4348%" y="229" width="0.6324%" height="15" fill="rgb(247,16,28)" fg:x="1144" fg:w="8"/><text x="90.6848%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (1 samples, 0.08%)</title><rect x="90.9881%" y="213" width="0.0791%" height="15" fill="rgb(231,147,38)" fg:x="1151" fg:w="1"/><text x="91.2381%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (1 samples, 0.08%)</title><rect x="91.0672%" y="229" width="0.0791%" height="15" fill="rgb(253,81,48)" fg:x="1152" fg:w="1"/><text x="91.3172%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="91.0672%" y="213" width="0.0791%" height="15" fill="rgb(249,222,43)" fg:x="1152" fg:w="1"/><text x="91.3172%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (43 samples, 3.40%)</title><rect x="87.8261%" y="261" width="3.3992%" height="15" fill="rgb(221,3,27)" fg:x="1111" fg:w="43"/><text x="88.0761%" y="271.50">reg..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (39 samples, 3.08%)</title><rect x="88.1423%" y="245" width="3.0830%" height="15" fill="rgb(228,180,5)" fg:x="1115" fg:w="39"/><text x="88.3923%" y="255.50">reg..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="91.1462%" y="229" width="0.0791%" height="15" fill="rgb(227,131,42)" fg:x="1153" fg:w="1"/><text x="91.3962%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="91.2253%" y="213" width="0.0791%" height="15" fill="rgb(212,3,39)" fg:x="1154" fg:w="1"/><text x="91.4753%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (47 samples, 3.72%)</title><rect x="87.7470%" y="309" width="3.7154%" height="15" fill="rgb(226,45,5)" fg:x="1110" fg:w="47"/><text x="87.9970%" y="319.50">&lt;reg..</text></g><g><title>regex::builders::Builder::build_one_string (47 samples, 3.72%)</title><rect x="87.7470%" y="293" width="3.7154%" height="15" fill="rgb(215,167,45)" fg:x="1110" fg:w="47"/><text x="87.9970%" y="303.50">rege..</text></g><g><title>regex_automata::meta::regex::Builder::build (46 samples, 3.64%)</title><rect x="87.8261%" y="277" width="3.6364%" height="15" fill="rgb(250,218,53)" fg:x="1111" fg:w="46"/><text x="88.0761%" y="287.50">rege..</text></g><g><title>regex_syntax::ast::parse::Parser::parse (3 samples, 0.24%)</title><rect x="91.2253%" y="261" width="0.2372%" height="15" fill="rgb(207,140,0)" fg:x="1154" fg:w="3"/><text x="91.4753%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (3 samples, 0.24%)</title><rect x="91.2253%" y="245" width="0.2372%" height="15" fill="rgb(238,133,51)" fg:x="1154" fg:w="3"/><text x="91.4753%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="91.2253%" y="229" width="0.2372%" height="15" fill="rgb(218,203,53)" fg:x="1154" fg:w="3"/><text x="91.4753%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="91.3043%" y="213" width="0.1581%" height="15" fill="rgb(226,184,25)" fg:x="1155" fg:w="2"/><text x="91.5543%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="91.3043%" y="197" width="0.1581%" height="15" fill="rgb(231,121,21)" fg:x="1155" fg:w="2"/><text x="91.5543%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="91.3043%" y="181" width="0.1581%" height="15" fill="rgb(251,14,34)" fg:x="1155" fg:w="2"/><text x="91.5543%" y="191.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="91.3043%" y="165" width="0.1581%" height="15" fill="rgb(249,193,11)" fg:x="1155" fg:w="2"/><text x="91.5543%" y="175.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (53 samples, 4.19%)</title><rect x="87.5099%" y="325" width="4.1897%" height="15" fill="rgb(220,172,37)" fg:x="1107" fg:w="53"/><text x="87.7599%" y="335.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (3 samples, 0.24%)</title><rect x="91.4625%" y="309" width="0.2372%" height="15" fill="rgb(231,229,43)" fg:x="1157" fg:w="3"/><text x="91.7125%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (3 samples, 0.24%)</title><rect x="91.4625%" y="293" width="0.2372%" height="15" fill="rgb(250,161,5)" fg:x="1157" fg:w="3"/><text x="91.7125%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (3 samples, 0.24%)</title><rect x="91.4625%" y="277" width="0.2372%" height="15" fill="rgb(218,225,18)" fg:x="1157" fg:w="3"/><text x="91.7125%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (3 samples, 0.24%)</title><rect x="91.4625%" y="261" width="0.2372%" height="15" fill="rgb(245,45,42)" fg:x="1157" fg:w="3"/><text x="91.7125%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (3 samples, 0.24%)</title><rect x="91.4625%" y="245" width="0.2372%" height="15" fill="rgb(211,115,1)" fg:x="1157" fg:w="3"/><text x="91.7125%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.6206%" y="229" width="0.0791%" height="15" fill="rgb(248,133,52)" fg:x="1159" fg:w="1"/><text x="91.8706%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6206%" y="213" width="0.0791%" height="15" fill="rgb(238,100,21)" fg:x="1159" fg:w="1"/><text x="91.8706%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.6206%" y="197" width="0.0791%" height="15" fill="rgb(247,144,11)" fg:x="1159" fg:w="1"/><text x="91.8706%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="91.6996%" y="261" width="0.0791%" height="15" fill="rgb(206,164,16)" fg:x="1160" fg:w="1"/><text x="91.9496%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="91.6996%" y="245" width="0.0791%" height="15" fill="rgb(222,34,3)" fg:x="1160" fg:w="1"/><text x="91.9496%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="91.6996%" y="229" width="0.0791%" height="15" fill="rgb(248,82,4)" fg:x="1160" fg:w="1"/><text x="91.9496%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="91.6996%" y="213" width="0.0791%" height="15" fill="rgb(228,81,46)" fg:x="1160" fg:w="1"/><text x="91.9496%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="91.6996%" y="197" width="0.0791%" height="15" fill="rgb(227,67,47)" fg:x="1160" fg:w="1"/><text x="91.9496%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="91.6996%" y="181" width="0.0791%" height="15" fill="rgb(215,93,53)" fg:x="1160" fg:w="1"/><text x="91.9496%" y="191.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (2 samples, 0.16%)</title><rect x="91.8577%" y="245" width="0.1581%" height="15" fill="rgb(248,194,39)" fg:x="1162" fg:w="2"/><text x="92.1077%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="91.8577%" y="229" width="0.1581%" height="15" fill="rgb(215,5,19)" fg:x="1162" fg:w="2"/><text x="92.1077%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="92.0158%" y="229" width="0.0791%" height="15" fill="rgb(226,215,51)" fg:x="1164" fg:w="1"/><text x="92.2658%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (1 samples, 0.08%)</title><rect x="92.0158%" y="213" width="0.0791%" height="15" fill="rgb(225,56,26)" fg:x="1164" fg:w="1"/><text x="92.2658%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="92.0158%" y="197" width="0.0791%" height="15" fill="rgb(222,75,29)" fg:x="1164" fg:w="1"/><text x="92.2658%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="92.0158%" y="181" width="0.0791%" height="15" fill="rgb(236,139,6)" fg:x="1164" fg:w="1"/><text x="92.2658%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="92.0158%" y="165" width="0.0791%" height="15" fill="rgb(223,137,36)" fg:x="1164" fg:w="1"/><text x="92.2658%" y="175.50"></text></g><g><title>regex_automata::meta::strategy::new (7 samples, 0.55%)</title><rect x="91.7787%" y="261" width="0.5534%" height="15" fill="rgb(226,99,2)" fg:x="1161" fg:w="7"/><text x="92.0287%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (4 samples, 0.32%)</title><rect x="92.0158%" y="245" width="0.3162%" height="15" fill="rgb(206,133,23)" fg:x="1164" fg:w="4"/><text x="92.2658%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="92.0949%" y="229" width="0.2372%" height="15" fill="rgb(243,173,15)" fg:x="1165" fg:w="3"/><text x="92.3449%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="92.1739%" y="213" width="0.1581%" height="15" fill="rgb(228,69,28)" fg:x="1166" fg:w="2"/><text x="92.4239%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (1 samples, 0.08%)</title><rect x="92.3320%" y="261" width="0.0791%" height="15" fill="rgb(212,51,22)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (1 samples, 0.08%)</title><rect x="92.3320%" y="245" width="0.0791%" height="15" fill="rgb(227,113,0)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="92.3320%" y="229" width="0.0791%" height="15" fill="rgb(252,84,27)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="92.3320%" y="213" width="0.0791%" height="15" fill="rgb(223,145,39)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.3320%" y="197" width="0.0791%" height="15" fill="rgb(239,219,30)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.3320%" y="181" width="0.0791%" height="15" fill="rgb(224,196,39)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.3320%" y="165" width="0.0791%" height="15" fill="rgb(205,35,43)" fg:x="1168" fg:w="1"/><text x="92.5820%" y="175.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (11 samples, 0.87%)</title><rect x="91.6996%" y="309" width="0.8696%" height="15" fill="rgb(228,201,21)" fg:x="1160" fg:w="11"/><text x="91.9496%" y="319.50"></text></g><g><title>regex::builders::Builder::build_one_string (11 samples, 0.87%)</title><rect x="91.6996%" y="293" width="0.8696%" height="15" fill="rgb(237,118,16)" fg:x="1160" fg:w="11"/><text x="91.9496%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (11 samples, 0.87%)</title><rect x="91.6996%" y="277" width="0.8696%" height="15" fill="rgb(241,17,19)" fg:x="1160" fg:w="11"/><text x="91.9496%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (2 samples, 0.16%)</title><rect x="92.4111%" y="261" width="0.1581%" height="15" fill="rgb(214,10,25)" fg:x="1169" fg:w="2"/><text x="92.6611%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="92.4111%" y="245" width="0.1581%" height="15" fill="rgb(238,37,29)" fg:x="1169" fg:w="2"/><text x="92.6611%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (2 samples, 0.16%)</title><rect x="92.4111%" y="229" width="0.1581%" height="15" fill="rgb(253,83,25)" fg:x="1169" fg:w="2"/><text x="92.6611%" y="239.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.16%)</title><rect x="92.4111%" y="213" width="0.1581%" height="15" fill="rgb(234,192,12)" fg:x="1169" fg:w="2"/><text x="92.6611%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="92.4901%" y="197" width="0.0791%" height="15" fill="rgb(241,216,45)" fg:x="1170" fg:w="1"/><text x="92.7401%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.4901%" y="181" width="0.0791%" height="15" fill="rgb(242,22,33)" fg:x="1170" fg:w="1"/><text x="92.7401%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.4901%" y="165" width="0.0791%" height="15" fill="rgb(231,105,49)" fg:x="1170" fg:w="1"/><text x="92.7401%" y="175.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (1 samples, 0.08%)</title><rect x="92.5692%" y="309" width="0.0791%" height="15" fill="rgb(218,204,15)" fg:x="1171" fg:w="1"/><text x="92.8192%" y="319.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (1 samples, 0.08%)</title><rect x="92.5692%" y="293" width="0.0791%" height="15" fill="rgb(235,138,41)" fg:x="1171" fg:w="1"/><text x="92.8192%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="92.5692%" y="277" width="0.0791%" height="15" fill="rgb(246,0,9)" fg:x="1171" fg:w="1"/><text x="92.8192%" y="287.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="92.5692%" y="261" width="0.0791%" height="15" fill="rgb(210,74,4)" fg:x="1171" fg:w="1"/><text x="92.8192%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (1 samples, 0.08%)</title><rect x="92.6482%" y="309" width="0.0791%" height="15" fill="rgb(250,60,41)" fg:x="1172" fg:w="1"/><text x="92.8982%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::marker::Sync+core::panic::unwind_safe::UnwindSafe&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="92.6482%" y="293" width="0.0791%" height="15" fill="rgb(220,115,12)" fg:x="1172" fg:w="1"/><text x="92.8982%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.6482%" y="277" width="0.0791%" height="15" fill="rgb(237,100,13)" fg:x="1172" fg:w="1"/><text x="92.8982%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="92.6482%" y="261" width="0.0791%" height="15" fill="rgb(213,55,26)" fg:x="1172" fg:w="1"/><text x="92.8982%" y="271.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="92.6482%" y="245" width="0.0791%" height="15" fill="rgb(216,17,4)" fg:x="1172" fg:w="1"/><text x="92.8982%" y="255.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (17 samples, 1.34%)</title><rect x="91.6996%" y="325" width="1.3439%" height="15" fill="rgb(220,153,47)" fg:x="1160" fg:w="17"/><text x="91.9496%" y="335.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (4 samples, 0.32%)</title><rect x="92.7273%" y="309" width="0.3162%" height="15" fill="rgb(215,131,9)" fg:x="1173" fg:w="4"/><text x="92.9773%" y="319.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (4 samples, 0.32%)</title><rect x="92.7273%" y="293" width="0.3162%" height="15" fill="rgb(233,46,42)" fg:x="1173" fg:w="4"/><text x="92.9773%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (4 samples, 0.32%)</title><rect x="92.7273%" y="277" width="0.3162%" height="15" fill="rgb(226,86,7)" fg:x="1173" fg:w="4"/><text x="92.9773%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (4 samples, 0.32%)</title><rect x="92.7273%" y="261" width="0.3162%" height="15" fill="rgb(239,226,21)" fg:x="1173" fg:w="4"/><text x="92.9773%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (2 samples, 0.16%)</title><rect x="92.8854%" y="245" width="0.1581%" height="15" fill="rgb(244,137,22)" fg:x="1175" fg:w="2"/><text x="93.1354%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="92.9644%" y="229" width="0.0791%" height="15" fill="rgb(211,139,35)" fg:x="1176" fg:w="1"/><text x="93.2144%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="92.9644%" y="213" width="0.0791%" height="15" fill="rgb(214,62,50)" fg:x="1176" fg:w="1"/><text x="93.2144%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="92.9644%" y="197" width="0.0791%" height="15" fill="rgb(212,113,44)" fg:x="1176" fg:w="1"/><text x="93.2144%" y="207.50"></text></g><g><title>&lt;regex::builders::Builder as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="93.0435%" y="293" width="0.0791%" height="15" fill="rgb(226,150,43)" fg:x="1177" fg:w="1"/><text x="93.2935%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Config::nfa_size_limit (1 samples, 0.08%)</title><rect x="93.0435%" y="277" width="0.0791%" height="15" fill="rgb(250,71,37)" fg:x="1177" fg:w="1"/><text x="93.2935%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="93.1225%" y="229" width="0.0791%" height="15" fill="rgb(219,76,19)" fg:x="1178" fg:w="1"/><text x="93.3725%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.2016%" y="229" width="0.0791%" height="15" fill="rgb(250,39,11)" fg:x="1179" fg:w="1"/><text x="93.4516%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="93.1225%" y="261" width="0.2372%" height="15" fill="rgb(230,64,31)" fg:x="1178" fg:w="3"/><text x="93.3725%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="93.1225%" y="245" width="0.2372%" height="15" fill="rgb(208,222,23)" fg:x="1178" fg:w="3"/><text x="93.3725%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="93.2806%" y="229" width="0.0791%" height="15" fill="rgb(227,125,18)" fg:x="1180" fg:w="1"/><text x="93.5306%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (1 samples, 0.08%)</title><rect x="93.3597%" y="261" width="0.0791%" height="15" fill="rgb(234,210,9)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="271.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.3597%" y="245" width="0.0791%" height="15" fill="rgb(217,127,24)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="93.3597%" y="229" width="0.0791%" height="15" fill="rgb(239,141,48)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="239.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="93.3597%" y="213" width="0.0791%" height="15" fill="rgb(227,109,8)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="93.3597%" y="197" width="0.0791%" height="15" fill="rgb(235,184,23)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="93.3597%" y="181" width="0.0791%" height="15" fill="rgb(227,226,48)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="93.3597%" y="165" width="0.0791%" height="15" fill="rgb(206,150,11)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="175.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="93.3597%" y="149" width="0.0791%" height="15" fill="rgb(254,2,33)" fg:x="1181" fg:w="1"/><text x="93.6097%" y="159.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="93.5178%" y="229" width="0.1581%" height="15" fill="rgb(243,160,20)" fg:x="1183" fg:w="2"/><text x="93.7678%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (9 samples, 0.71%)</title><rect x="93.5178%" y="245" width="0.7115%" height="15" fill="rgb(218,208,30)" fg:x="1183" fg:w="9"/><text x="93.7678%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (7 samples, 0.55%)</title><rect x="93.6759%" y="229" width="0.5534%" height="15" fill="rgb(224,120,49)" fg:x="1185" fg:w="7"/><text x="93.9259%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="94.1502%" y="213" width="0.0791%" height="15" fill="rgb(246,12,2)" fg:x="1191" fg:w="1"/><text x="94.4002%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="94.2292%" y="245" width="0.0791%" height="15" fill="rgb(236,117,3)" fg:x="1192" fg:w="1"/><text x="94.4792%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (1 samples, 0.08%)</title><rect x="94.2292%" y="229" width="0.0791%" height="15" fill="rgb(216,128,52)" fg:x="1192" fg:w="1"/><text x="94.4792%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (1 samples, 0.08%)</title><rect x="94.3874%" y="213" width="0.0791%" height="15" fill="rgb(246,145,19)" fg:x="1194" fg:w="1"/><text x="94.6374%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="94.3874%" y="197" width="0.0791%" height="15" fill="rgb(222,11,46)" fg:x="1194" fg:w="1"/><text x="94.6374%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="94.3874%" y="181" width="0.0791%" height="15" fill="rgb(245,82,36)" fg:x="1194" fg:w="1"/><text x="94.6374%" y="191.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="94.3874%" y="165" width="0.0791%" height="15" fill="rgb(250,73,51)" fg:x="1194" fg:w="1"/><text x="94.6374%" y="175.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (1 samples, 0.08%)</title><rect x="94.4664%" y="213" width="0.0791%" height="15" fill="rgb(221,189,23)" fg:x="1195" fg:w="1"/><text x="94.7164%" y="223.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (5 samples, 0.40%)</title><rect x="94.3083%" y="245" width="0.3953%" height="15" fill="rgb(210,33,7)" fg:x="1193" fg:w="5"/><text x="94.5583%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="94.3083%" y="229" width="0.3953%" height="15" fill="rgb(210,107,22)" fg:x="1193" fg:w="5"/><text x="94.5583%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (2 samples, 0.16%)</title><rect x="94.5455%" y="213" width="0.1581%" height="15" fill="rgb(222,116,37)" fg:x="1196" fg:w="2"/><text x="94.7955%" y="223.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (2 samples, 0.16%)</title><rect x="94.5455%" y="197" width="0.1581%" height="15" fill="rgb(254,17,48)" fg:x="1196" fg:w="2"/><text x="94.7955%" y="207.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (2 samples, 0.16%)</title><rect x="94.5455%" y="181" width="0.1581%" height="15" fill="rgb(224,36,32)" fg:x="1196" fg:w="2"/><text x="94.7955%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.3360%" y="101" width="0.0791%" height="15" fill="rgb(232,90,46)" fg:x="1206" fg:w="1"/><text x="95.5860%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (6 samples, 0.47%)</title><rect x="95.1779%" y="133" width="0.4743%" height="15" fill="rgb(241,66,40)" fg:x="1204" fg:w="6"/><text x="95.4279%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (5 samples, 0.40%)</title><rect x="95.2569%" y="117" width="0.3953%" height="15" fill="rgb(249,184,29)" fg:x="1205" fg:w="5"/><text x="95.5069%" y="127.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (3 samples, 0.24%)</title><rect x="95.4150%" y="101" width="0.2372%" height="15" fill="rgb(231,181,1)" fg:x="1207" fg:w="3"/><text x="95.6650%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="95.5731%" y="85" width="0.0791%" height="15" fill="rgb(224,94,2)" fg:x="1209" fg:w="1"/><text x="95.8231%" y="95.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (15 samples, 1.19%)</title><rect x="95.6522%" y="133" width="1.1858%" height="15" fill="rgb(229,170,15)" fg:x="1210" fg:w="15"/><text x="95.9022%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (15 samples, 1.19%)</title><rect x="95.6522%" y="117" width="1.1858%" height="15" fill="rgb(240,127,35)" fg:x="1210" fg:w="15"/><text x="95.9022%" y="127.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (15 samples, 1.19%)</title><rect x="95.6522%" y="101" width="1.1858%" height="15" fill="rgb(248,196,34)" fg:x="1210" fg:w="15"/><text x="95.9022%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.21%)</title><rect x="94.7036%" y="229" width="2.2134%" height="15" fill="rgb(236,137,7)" fg:x="1198" fg:w="28"/><text x="94.9536%" y="239.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.21%)</title><rect x="94.7036%" y="213" width="2.2134%" height="15" fill="rgb(235,127,16)" fg:x="1198" fg:w="28"/><text x="94.9536%" y="223.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.21%)</title><rect x="94.7036%" y="197" width="2.2134%" height="15" fill="rgb(250,192,54)" fg:x="1198" fg:w="28"/><text x="94.9536%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (28 samples, 2.21%)</title><rect x="94.7036%" y="181" width="2.2134%" height="15" fill="rgb(218,98,20)" fg:x="1198" fg:w="28"/><text x="94.9536%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (28 samples, 2.21%)</title><rect x="94.7036%" y="165" width="2.2134%" height="15" fill="rgb(230,176,47)" fg:x="1198" fg:w="28"/><text x="94.9536%" y="175.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (28 samples, 2.21%)</title><rect x="94.7036%" y="149" width="2.2134%" height="15" fill="rgb(244,2,33)" fg:x="1198" fg:w="28"/><text x="94.9536%" y="159.50">r..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (1 samples, 0.08%)</title><rect x="96.8379%" y="133" width="0.0791%" height="15" fill="rgb(231,100,17)" fg:x="1225" fg:w="1"/><text x="97.0879%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8379%" y="117" width="0.0791%" height="15" fill="rgb(245,23,12)" fg:x="1225" fg:w="1"/><text x="97.0879%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8379%" y="101" width="0.0791%" height="15" fill="rgb(249,55,22)" fg:x="1225" fg:w="1"/><text x="97.0879%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (31 samples, 2.45%)</title><rect x="94.7036%" y="245" width="2.4506%" height="15" fill="rgb(207,134,9)" fg:x="1198" fg:w="31"/><text x="94.9536%" y="255.50">re..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (3 samples, 0.24%)</title><rect x="96.9170%" y="229" width="0.2372%" height="15" fill="rgb(218,134,0)" fg:x="1226" fg:w="3"/><text x="97.1670%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (2 samples, 0.16%)</title><rect x="96.9960%" y="213" width="0.1581%" height="15" fill="rgb(213,212,33)" fg:x="1227" fg:w="2"/><text x="97.2460%" y="223.50"></text></g><g><title>regex_automata::meta::strategy::new (48 samples, 3.79%)</title><rect x="93.4387%" y="261" width="3.7945%" height="15" fill="rgb(252,106,18)" fg:x="1182" fg:w="48"/><text x="93.6887%" y="271.50">rege..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="97.1542%" y="245" width="0.0791%" height="15" fill="rgb(208,126,42)" fg:x="1229" fg:w="1"/><text x="97.4042%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (2 samples, 0.16%)</title><rect x="97.2332%" y="261" width="0.1581%" height="15" fill="rgb(246,175,29)" fg:x="1230" fg:w="2"/><text x="97.4832%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (2 samples, 0.16%)</title><rect x="97.2332%" y="245" width="0.1581%" height="15" fill="rgb(215,13,50)" fg:x="1230" fg:w="2"/><text x="97.4832%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (1 samples, 0.08%)</title><rect x="97.3123%" y="229" width="0.0791%" height="15" fill="rgb(216,172,15)" fg:x="1231" fg:w="1"/><text x="97.5623%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.3123%" y="213" width="0.0791%" height="15" fill="rgb(212,103,13)" fg:x="1231" fg:w="1"/><text x="97.5623%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3123%" y="197" width="0.0791%" height="15" fill="rgb(231,171,36)" fg:x="1231" fg:w="1"/><text x="97.5623%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3123%" y="181" width="0.0791%" height="15" fill="rgb(250,123,20)" fg:x="1231" fg:w="1"/><text x="97.5623%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3123%" y="165" width="0.0791%" height="15" fill="rgb(212,53,50)" fg:x="1231" fg:w="1"/><text x="97.5623%" y="175.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="97.3913%" y="229" width="0.0791%" height="15" fill="rgb(243,54,12)" fg:x="1232" fg:w="1"/><text x="97.6413%" y="239.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.4704%" y="229" width="0.0791%" height="15" fill="rgb(234,101,34)" fg:x="1233" fg:w="1"/><text x="97.7204%" y="239.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="97.4704%" y="213" width="0.0791%" height="15" fill="rgb(254,67,22)" fg:x="1233" fg:w="1"/><text x="97.7204%" y="223.50"></text></g><g><title>regex_syntax::unicode::perl_digit (1 samples, 0.08%)</title><rect x="97.4704%" y="197" width="0.0791%" height="15" fill="rgb(250,35,47)" fg:x="1233" fg:w="1"/><text x="97.7204%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.4704%" y="181" width="0.0791%" height="15" fill="rgb(226,126,38)" fg:x="1233" fg:w="1"/><text x="97.7204%" y="191.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="97.5494%" y="213" width="0.0791%" height="15" fill="rgb(216,138,53)" fg:x="1234" fg:w="1"/><text x="97.7994%" y="223.50"></text></g><g><title>&lt;regex::regex::string::Regex as core::str::traits::FromStr&gt;::from_str (59 samples, 4.66%)</title><rect x="93.0435%" y="309" width="4.6640%" height="15" fill="rgb(246,199,43)" fg:x="1177" fg:w="59"/><text x="93.2935%" y="319.50">&lt;rege..</text></g><g><title>regex::builders::Builder::build_one_string (58 samples, 4.58%)</title><rect x="93.1225%" y="293" width="4.5850%" height="15" fill="rgb(232,125,11)" fg:x="1178" fg:w="58"/><text x="93.3725%" y="303.50">regex..</text></g><g><title>regex_automata::meta::regex::Builder::build (58 samples, 4.58%)</title><rect x="93.1225%" y="277" width="4.5850%" height="15" fill="rgb(218,219,45)" fg:x="1178" fg:w="58"/><text x="93.3725%" y="287.50">regex..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="97.3913%" y="261" width="0.3162%" height="15" fill="rgb(216,102,54)" fg:x="1232" fg:w="4"/><text x="97.6413%" y="271.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="97.3913%" y="245" width="0.3162%" height="15" fill="rgb(250,228,7)" fg:x="1232" fg:w="4"/><text x="97.6413%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (2 samples, 0.16%)</title><rect x="97.5494%" y="229" width="0.1581%" height="15" fill="rgb(226,125,25)" fg:x="1234" fg:w="2"/><text x="97.7994%" y="239.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="97.6285%" y="213" width="0.0791%" height="15" fill="rgb(224,165,27)" fg:x="1235" fg:w="1"/><text x="97.8785%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="97.7075%" y="213" width="0.1581%" height="15" fill="rgb(233,86,3)" fg:x="1236" fg:w="2"/><text x="97.9575%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="97.7075%" y="197" width="0.1581%" height="15" fill="rgb(228,116,20)" fg:x="1236" fg:w="2"/><text x="97.9575%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="97.7075%" y="181" width="0.1581%" height="15" fill="rgb(209,192,17)" fg:x="1236" fg:w="2"/><text x="97.9575%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="97.8656%" y="213" width="0.0791%" height="15" fill="rgb(224,88,34)" fg:x="1238" fg:w="1"/><text x="98.1156%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="97.8656%" y="197" width="0.0791%" height="15" fill="rgb(233,38,6)" fg:x="1238" fg:w="1"/><text x="98.1156%" y="207.50"></text></g><g><title>&lt;&amp;kernel::model::EntityPtr as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (153 samples, 12.09%)</title><rect x="86.1660%" y="405" width="12.0949%" height="15" fill="rgb(212,59,30)" fg:x="1090" fg:w="153"/><text x="86.4160%" y="415.50">&lt;&amp;kernel::model::E..</text></g><g><title>plugins_core::looking::model::Unqualified::qualify (137 samples, 10.83%)</title><rect x="87.4308%" y="389" width="10.8300%" height="15" fill="rgb(213,80,3)" fg:x="1106" fg:w="137"/><text x="87.6808%" y="399.50">plugins_core::lo..</text></g><g><title>indefinite::indefinite (137 samples, 10.83%)</title><rect x="87.4308%" y="373" width="10.8300%" height="15" fill="rgb(251,178,7)" fg:x="1106" fg:w="137"/><text x="87.6808%" y="383.50">indefinite::inde..</text></g><g><title>indefinite::methods::indefinite (137 samples, 10.83%)</title><rect x="87.4308%" y="357" width="10.8300%" height="15" fill="rgb(213,154,26)" fg:x="1106" fg:w="137"/><text x="87.6808%" y="367.50">indefinite::meth..</text></g><g><title>indefinite::methods::apply_rules (137 samples, 10.83%)</title><rect x="87.4308%" y="341" width="10.8300%" height="15" fill="rgb(238,165,49)" fg:x="1106" fg:w="137"/><text x="87.6808%" y="351.50">indefinite::meth..</text></g><g><title>indefinite::rules::number::Number::check (66 samples, 5.22%)</title><rect x="93.0435%" y="325" width="5.2174%" height="15" fill="rgb(248,91,46)" fg:x="1177" fg:w="66"/><text x="93.2935%" y="335.50">indefi..</text></g><g><title>regex::regex::string::Regex::is_match_at (7 samples, 0.55%)</title><rect x="97.7075%" y="309" width="0.5534%" height="15" fill="rgb(244,21,52)" fg:x="1236" fg:w="7"/><text x="97.9575%" y="319.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (7 samples, 0.55%)</title><rect x="97.7075%" y="293" width="0.5534%" height="15" fill="rgb(247,122,20)" fg:x="1236" fg:w="7"/><text x="97.9575%" y="303.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (7 samples, 0.55%)</title><rect x="97.7075%" y="277" width="0.5534%" height="15" fill="rgb(218,27,9)" fg:x="1236" fg:w="7"/><text x="97.9575%" y="287.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::create_cache (7 samples, 0.55%)</title><rect x="97.7075%" y="261" width="0.5534%" height="15" fill="rgb(246,7,6)" fg:x="1236" fg:w="7"/><text x="97.9575%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="97.7075%" y="245" width="0.5534%" height="15" fill="rgb(227,135,54)" fg:x="1236" fg:w="7"/><text x="97.9575%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (7 samples, 0.55%)</title><rect x="97.7075%" y="229" width="0.5534%" height="15" fill="rgb(247,14,11)" fg:x="1236" fg:w="7"/><text x="97.9575%" y="239.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="97.9447%" y="213" width="0.3162%" height="15" fill="rgb(206,149,34)" fg:x="1239" fg:w="4"/><text x="98.1947%" y="223.50"></text></g><g><title>plugins_core::moving::model::_::&lt;impl serde::de::Deserialize for plugins_core::moving::model::Route&gt;::deserialize (2 samples, 0.16%)</title><rect x="98.3399%" y="309" width="0.1581%" height="15" fill="rgb(227,228,4)" fg:x="1244" fg:w="2"/><text x="98.5899%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3399%" y="293" width="0.1581%" height="15" fill="rgb(238,218,28)" fg:x="1244" fg:w="2"/><text x="98.5899%" y="303.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3399%" y="277" width="0.1581%" height="15" fill="rgb(252,86,40)" fg:x="1244" fg:w="2"/><text x="98.5899%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.3399%" y="261" width="0.1581%" height="15" fill="rgb(251,225,11)" fg:x="1244" fg:w="2"/><text x="98.5899%" y="271.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.3399%" y="245" width="0.1581%" height="15" fill="rgb(206,46,49)" fg:x="1244" fg:w="2"/><text x="98.5899%" y="255.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::de::Deserialize for kernel::model::base::EntityGid&gt;::deserialize (1 samples, 0.08%)</title><rect x="98.4190%" y="229" width="0.0791%" height="15" fill="rgb(245,128,24)" fg:x="1245" fg:w="1"/><text x="98.6690%" y="239.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (4 samples, 0.32%)</title><rect x="98.2609%" y="405" width="0.3162%" height="15" fill="rgb(219,177,34)" fg:x="1243" fg:w="4"/><text x="98.5109%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="98.2609%" y="389" width="0.3162%" height="15" fill="rgb(218,60,48)" fg:x="1243" fg:w="4"/><text x="98.5109%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="98.2609%" y="373" width="0.3162%" height="15" fill="rgb(221,11,5)" fg:x="1243" fg:w="4"/><text x="98.5109%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (3 samples, 0.24%)</title><rect x="98.3399%" y="357" width="0.2372%" height="15" fill="rgb(220,148,13)" fg:x="1244" fg:w="3"/><text x="98.5899%" y="367.50"></text></g><g><title>serde_json::value::de::visit_array (3 samples, 0.24%)</title><rect x="98.3399%" y="341" width="0.2372%" height="15" fill="rgb(210,16,3)" fg:x="1244" fg:w="3"/><text x="98.5899%" y="351.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (3 samples, 0.24%)</title><rect x="98.3399%" y="325" width="0.2372%" height="15" fill="rgb(236,80,2)" fg:x="1244" fg:w="3"/><text x="98.5899%" y="335.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="98.4980%" y="309" width="0.0791%" height="15" fill="rgb(239,129,19)" fg:x="1246" fg:w="1"/><text x="98.7480%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="98.4980%" y="293" width="0.0791%" height="15" fill="rgb(220,106,35)" fg:x="1246" fg:w="1"/><text x="98.7480%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5771%" y="341" width="0.0791%" height="15" fill="rgb(252,139,45)" fg:x="1247" fg:w="1"/><text x="98.8271%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5771%" y="325" width="0.0791%" height="15" fill="rgb(229,8,36)" fg:x="1247" fg:w="1"/><text x="98.8271%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5771%" y="309" width="0.0791%" height="15" fill="rgb(230,126,33)" fg:x="1247" fg:w="1"/><text x="98.8271%" y="319.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5771%" y="293" width="0.0791%" height="15" fill="rgb(239,140,21)" fg:x="1247" fg:w="1"/><text x="98.8271%" y="303.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.5771%" y="277" width="0.0791%" height="15" fill="rgb(254,104,9)" fg:x="1247" fg:w="1"/><text x="98.8271%" y="287.50"></text></g><g><title>&lt;engine::session::Session as kernel::actions::Performer&gt;::perform (169 samples, 13.36%)</title><rect x="85.3755%" y="629" width="13.3597%" height="15" fill="rgb(239,52,14)" fg:x="1080" fg:w="169"/><text x="85.6255%" y="639.50">&lt;engine::session::Se..</text></g><g><title>kernel::plugins::mw::apply_middleware (169 samples, 13.36%)</title><rect x="85.3755%" y="613" width="13.3597%" height="15" fill="rgb(208,227,44)" fg:x="1080" fg:w="169"/><text x="85.6255%" y="623.50">kernel::plugins::mw:..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (169 samples, 13.36%)</title><rect x="85.3755%" y="597" width="13.3597%" height="15" fill="rgb(246,18,19)" fg:x="1080" fg:w="169"/><text x="85.6255%" y="607.50">kernel::plugins::mw:..</text></g><g><title>&lt;engine::session::ExpandSurroundingsMiddleware as kernel::plugins::mw::Middleware&gt;::handle (169 samples, 13.36%)</title><rect x="85.3755%" y="581" width="13.3597%" height="15" fill="rgb(235,228,25)" fg:x="1080" fg:w="169"/><text x="85.6255%" y="591.50">&lt;engine::session::Ex..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.65%)</title><rect x="86.0870%" y="565" width="12.6482%" height="15" fill="rgb(240,156,20)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="575.50">kernel::plugins::mw..</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (160 samples, 12.65%)</title><rect x="86.0870%" y="549" width="12.6482%" height="15" fill="rgb(224,8,20)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="559.50">&lt;plugins_dynlib::Dy..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.65%)</title><rect x="86.0870%" y="533" width="12.6482%" height="15" fill="rgb(214,12,52)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="543.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (160 samples, 12.65%)</title><rect x="86.0870%" y="517" width="12.6482%" height="15" fill="rgb(211,220,47)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="527.50">core::ops::function..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (160 samples, 12.65%)</title><rect x="86.0870%" y="501" width="12.6482%" height="15" fill="rgb(250,173,5)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="511.50">kernel::plugins::mw..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (160 samples, 12.65%)</title><rect x="86.0870%" y="485" width="12.6482%" height="15" fill="rgb(250,125,52)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="495.50">core::ops::function..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (160 samples, 12.65%)</title><rect x="86.0870%" y="469" width="12.6482%" height="15" fill="rgb(209,133,18)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="479.50">&lt;alloc::boxed::Box&lt;..</text></g><g><title>&lt;engine::session::state::State as kernel::actions::Performer&gt;::perform (160 samples, 12.65%)</title><rect x="86.0870%" y="453" width="12.6482%" height="15" fill="rgb(216,173,22)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="463.50">&lt;engine::session::s..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (160 samples, 12.65%)</title><rect x="86.0870%" y="437" width="12.6482%" height="15" fill="rgb(205,3,22)" fg:x="1089" fg:w="160"/><text x="86.3370%" y="447.50">&lt;plugins_core::look..</text></g><g><title>plugins_core::looking::model::new_area_observation (159 samples, 12.57%)</title><rect x="86.1660%" y="421" width="12.5692%" height="15" fill="rgb(248,22,20)" fg:x="1090" fg:w="159"/><text x="86.4160%" y="431.50">plugins_core::looki..</text></g><g><title>&lt;kernel::model::entity_ref::EntityRef as kernel::model::IntoEntityPtr&gt;::to_entity (2 samples, 0.16%)</title><rect x="98.5771%" y="405" width="0.1581%" height="15" fill="rgb(233,6,29)" fg:x="1247" fg:w="2"/><text x="98.8271%" y="415.50"></text></g><g><title>kernel::model::EntityPtrResolver::entity (2 samples, 0.16%)</title><rect x="98.5771%" y="389" width="0.1581%" height="15" fill="rgb(240,22,54)" fg:x="1247" fg:w="2"/><text x="98.8271%" y="399.50"></text></g><g><title>engine::session::Session::load_entity (2 samples, 0.16%)</title><rect x="98.5771%" y="373" width="0.1581%" height="15" fill="rgb(231,133,32)" fg:x="1247" fg:w="2"/><text x="98.8271%" y="383.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="98.5771%" y="357" width="0.1581%" height="15" fill="rgb(248,193,4)" fg:x="1247" fg:w="2"/><text x="98.8271%" y="367.50"></text></g><g><title>engine::session::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="98.6561%" y="341" width="0.0791%" height="15" fill="rgb(211,178,46)" fg:x="1248" fg:w="1"/><text x="98.9061%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="98.6561%" y="325" width="0.0791%" height="15" fill="rgb(224,5,42)" fg:x="1248" fg:w="1"/><text x="98.9061%" y="335.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="98.6561%" y="309" width="0.0791%" height="15" fill="rgb(239,176,25)" fg:x="1248" fg:w="1"/><text x="98.9061%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="98.6561%" y="293" width="0.0791%" height="15" fill="rgb(245,187,50)" fg:x="1248" fg:w="1"/><text x="98.9061%" y="303.50"></text></g><g><title>&lt;kernel::session::SetSession&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="98.7352%" y="629" width="0.0791%" height="15" fill="rgb(248,24,15)" fg:x="1249" fg:w="1"/><text x="98.9852%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="98.8142%" y="533" width="0.0791%" height="15" fill="rgb(205,166,13)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8142%" y="517" width="0.0791%" height="15" fill="rgb(208,114,23)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8142%" y="501" width="0.0791%" height="15" fill="rgb(239,127,18)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="98.8142%" y="485" width="0.0791%" height="15" fill="rgb(219,154,28)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="98.8142%" y="469" width="0.0791%" height="15" fill="rgb(225,157,23)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="98.8142%" y="453" width="0.0791%" height="15" fill="rgb(219,8,6)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8142%" y="437" width="0.0791%" height="15" fill="rgb(212,47,6)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="98.8142%" y="421" width="0.0791%" height="15" fill="rgb(224,190,4)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="98.8142%" y="405" width="0.0791%" height="15" fill="rgb(239,183,29)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="98.8142%" y="389" width="0.0791%" height="15" fill="rgb(213,57,7)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="98.8142%" y="373" width="0.0791%" height="15" fill="rgb(216,148,1)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="98.8142%" y="357" width="0.0791%" height="15" fill="rgb(236,182,29)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="98.8142%" y="341" width="0.0791%" height="15" fill="rgb(244,120,48)" fg:x="1250" fg:w="1"/><text x="99.0642%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8142%" y="581" width="0.1581%" height="15" fill="rgb(206,71,34)" fg:x="1250" fg:w="2"/><text x="99.0642%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8142%" y="565" width="0.1581%" height="15" fill="rgb(242,32,6)" fg:x="1250" fg:w="2"/><text x="99.0642%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="98.8142%" y="549" width="0.1581%" height="15" fill="rgb(241,35,3)" fg:x="1250" fg:w="2"/><text x="99.0642%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="98.8933%" y="533" width="0.0791%" height="15" fill="rgb(222,62,19)" fg:x="1251" fg:w="1"/><text x="99.1433%" y="543.50"></text></g><g><title>engine::session::internal::Added::find_refs (4 samples, 0.32%)</title><rect x="98.8142%" y="613" width="0.3162%" height="15" fill="rgb(223,110,41)" fg:x="1250" fg:w="4"/><text x="99.0642%" y="623.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (4 samples, 0.32%)</title><rect x="98.8142%" y="597" width="0.3162%" height="15" fill="rgb(208,224,4)" fg:x="1250" fg:w="4"/><text x="99.0642%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.9723%" y="581" width="0.1581%" height="15" fill="rgb(241,137,19)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.9723%" y="565" width="0.1581%" height="15" fill="rgb(244,24,17)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="575.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.9723%" y="549" width="0.1581%" height="15" fill="rgb(245,178,49)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.9723%" y="533" width="0.1581%" height="15" fill="rgb(219,160,38)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.9723%" y="517" width="0.1581%" height="15" fill="rgb(228,137,14)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="527.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.9723%" y="501" width="0.1581%" height="15" fill="rgb(237,134,11)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="98.9723%" y="485" width="0.1581%" height="15" fill="rgb(211,126,44)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::flatten::Flatten&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="98.9723%" y="469" width="0.1581%" height="15" fill="rgb(226,171,33)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="479.50"></text></g><g><title>kernel::model::entity_ref::find_entity_refs (2 samples, 0.16%)</title><rect x="98.9723%" y="453" width="0.1581%" height="15" fill="rgb(253,99,13)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="98.9723%" y="437" width="0.1581%" height="15" fill="rgb(244,48,7)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="98.9723%" y="421" width="0.1581%" height="15" fill="rgb(244,217,54)" fg:x="1252" fg:w="2"/><text x="99.2223%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_u64 (1 samples, 0.08%)</title><rect x="99.0514%" y="405" width="0.0791%" height="15" fill="rgb(224,15,18)" fg:x="1253" fg:w="1"/><text x="99.3014%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde_json::value::Value&gt;::invalid_type (1 samples, 0.08%)</title><rect x="99.0514%" y="389" width="0.0791%" height="15" fill="rgb(244,99,12)" fg:x="1253" fg:w="1"/><text x="99.3014%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1304%" y="565" width="0.0791%" height="15" fill="rgb(233,226,8)" fg:x="1254" fg:w="1"/><text x="99.3804%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1304%" y="549" width="0.0791%" height="15" fill="rgb(229,211,3)" fg:x="1254" fg:w="1"/><text x="99.3804%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.1304%" y="533" width="0.0791%" height="15" fill="rgb(216,140,21)" fg:x="1254" fg:w="1"/><text x="99.3804%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1304%" y="597" width="0.1581%" height="15" fill="rgb(234,122,30)" fg:x="1254" fg:w="2"/><text x="99.3804%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.1304%" y="581" width="0.1581%" height="15" fill="rgb(236,25,46)" fg:x="1254" fg:w="2"/><text x="99.3804%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2095%" y="565" width="0.0791%" height="15" fill="rgb(217,52,54)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="99.2095%" y="549" width="0.0791%" height="15" fill="rgb(222,29,26)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="99.2095%" y="533" width="0.0791%" height="15" fill="rgb(216,177,29)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="99.2095%" y="517" width="0.0791%" height="15" fill="rgb(247,136,51)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="99.2095%" y="501" width="0.0791%" height="15" fill="rgb(231,47,47)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2095%" y="485" width="0.0791%" height="15" fill="rgb(211,192,36)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2095%" y="469" width="0.0791%" height="15" fill="rgb(229,156,32)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2095%" y="453" width="0.0791%" height="15" fill="rgb(248,213,20)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2095%" y="437" width="0.0791%" height="15" fill="rgb(217,64,7)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2095%" y="421" width="0.0791%" height="15" fill="rgb(232,142,8)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2095%" y="405" width="0.0791%" height="15" fill="rgb(224,92,44)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="415.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="99.2095%" y="389" width="0.0791%" height="15" fill="rgb(214,169,17)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="99.2095%" y="373" width="0.0791%" height="15" fill="rgb(210,59,37)" fg:x="1255" fg:w="1"/><text x="99.4595%" y="383.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="99.2885%" y="597" width="0.0791%" height="15" fill="rgb(214,116,48)" fg:x="1256" fg:w="1"/><text x="99.5385%" y="607.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="99.2885%" y="581" width="0.0791%" height="15" fill="rgb(244,191,6)" fg:x="1256" fg:w="1"/><text x="99.5385%" y="591.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (1 samples, 0.08%)</title><rect x="99.2885%" y="565" width="0.0791%" height="15" fill="rgb(241,50,52)" fg:x="1256" fg:w="1"/><text x="99.5385%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2885%" y="549" width="0.0791%" height="15" fill="rgb(236,75,39)" fg:x="1256" fg:w="1"/><text x="99.5385%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.2885%" y="533" width="0.0791%" height="15" fill="rgb(236,99,0)" fg:x="1256" fg:w="1"/><text x="99.5385%" y="543.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.3676%" y="597" width="0.0791%" height="15" fill="rgb(207,202,15)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.3676%" y="581" width="0.0791%" height="15" fill="rgb(233,207,14)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3676%" y="565" width="0.0791%" height="15" fill="rgb(226,27,51)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3676%" y="549" width="0.0791%" height="15" fill="rgb(206,104,42)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.3676%" y="533" width="0.0791%" height="15" fill="rgb(212,225,4)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="543.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3676%" y="517" width="0.0791%" height="15" fill="rgb(233,96,42)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="527.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3676%" y="501" width="0.0791%" height="15" fill="rgb(229,21,32)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3676%" y="485" width="0.0791%" height="15" fill="rgb(226,216,24)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="495.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.3676%" y="469" width="0.0791%" height="15" fill="rgb(221,163,17)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="479.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3676%" y="453" width="0.0791%" height="15" fill="rgb(216,216,42)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="463.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.3676%" y="437" width="0.0791%" height="15" fill="rgb(240,118,7)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.3676%" y="421" width="0.0791%" height="15" fill="rgb(221,67,37)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="431.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.3676%" y="405" width="0.0791%" height="15" fill="rgb(241,32,44)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="415.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.3676%" y="389" width="0.0791%" height="15" fill="rgb(235,204,43)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.3676%" y="373" width="0.0791%" height="15" fill="rgb(213,116,10)" fg:x="1257" fg:w="1"/><text x="99.6176%" y="383.50"></text></g><g><title>engine::session::Session::load_entity (9 samples, 0.71%)</title><rect x="98.8142%" y="629" width="0.7115%" height="15" fill="rgb(239,15,48)" fg:x="1250" fg:w="9"/><text x="99.0642%" y="639.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="99.1304%" y="613" width="0.3953%" height="15" fill="rgb(207,123,36)" fg:x="1254" fg:w="5"/><text x="99.3804%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (1 samples, 0.08%)</title><rect x="99.4466%" y="597" width="0.0791%" height="15" fill="rgb(209,103,30)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.4466%" y="581" width="0.0791%" height="15" fill="rgb(238,100,19)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4466%" y="565" width="0.0791%" height="15" fill="rgb(244,30,14)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="575.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4466%" y="549" width="0.0791%" height="15" fill="rgb(249,174,6)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4466%" y="533" width="0.0791%" height="15" fill="rgb(235,213,41)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4466%" y="517" width="0.0791%" height="15" fill="rgb(213,118,6)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4466%" y="501" width="0.0791%" height="15" fill="rgb(235,44,51)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4466%" y="485" width="0.0791%" height="15" fill="rgb(217,9,53)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4466%" y="469" width="0.0791%" height="15" fill="rgb(237,172,34)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.4466%" y="453" width="0.0791%" height="15" fill="rgb(206,206,11)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.4466%" y="437" width="0.0791%" height="15" fill="rgb(214,149,29)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.4466%" y="421" width="0.0791%" height="15" fill="rgb(208,123,3)" fg:x="1258" fg:w="1"/><text x="99.6966%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5257%" y="581" width="0.0791%" height="15" fill="rgb(229,126,4)" fg:x="1259" fg:w="1"/><text x="99.7757%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5257%" y="565" width="0.0791%" height="15" fill="rgb(222,92,36)" fg:x="1259" fg:w="1"/><text x="99.7757%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5257%" y="549" width="0.0791%" height="15" fill="rgb(216,39,41)" fg:x="1259" fg:w="1"/><text x="99.7757%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5257%" y="533" width="0.0791%" height="15" fill="rgb(253,127,28)" fg:x="1259" fg:w="1"/><text x="99.7757%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="99.5257%" y="517" width="0.0791%" height="15" fill="rgb(249,152,51)" fg:x="1259" fg:w="1"/><text x="99.7757%" y="527.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.5257%" y="501" width="0.0791%" height="15" fill="rgb(209,123,42)" fg:x="1259" fg:w="1"/><text x="99.7757%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.6047%" y="581" width="0.1581%" height="15" fill="rgb(241,118,22)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="591.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.6047%" y="565" width="0.1581%" height="15" fill="rgb(208,25,7)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="575.50"></text></g><g><title>&lt;O as kernel::model::scopes::OpenScope&lt;O&gt;&gt;::scope (2 samples, 0.16%)</title><rect x="99.6047%" y="549" width="0.1581%" height="15" fill="rgb(243,144,39)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6047%" y="533" width="0.1581%" height="15" fill="rgb(250,50,5)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6047%" y="517" width="0.1581%" height="15" fill="rgb(207,67,11)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6047%" y="501" width="0.1581%" height="15" fill="rgb(245,204,40)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6047%" y="485" width="0.1581%" height="15" fill="rgb(238,228,24)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="99.6047%" y="469" width="0.1581%" height="15" fill="rgb(217,116,22)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6047%" y="453" width="0.1581%" height="15" fill="rgb(234,98,12)" fg:x="1260" fg:w="2"/><text x="99.8547%" y="463.50"></text></g><g><title>kernel::model::entity::Entity::from_value (1 samples, 0.08%)</title><rect x="99.7628%" y="581" width="0.0791%" height="15" fill="rgb(242,170,50)" fg:x="1262" fg:w="1"/><text x="100.0128%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.7628%" y="565" width="0.0791%" height="15" fill="rgb(235,7,5)" fg:x="1262" fg:w="1"/><text x="100.0128%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7628%" y="549" width="0.0791%" height="15" fill="rgb(241,114,28)" fg:x="1262" fg:w="1"/><text x="100.0128%" y="559.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for std::collections::hash::map::HashMap&lt;K,V,S&gt;&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.7628%" y="533" width="0.0791%" height="15" fill="rgb(246,112,42)" fg:x="1262" fg:w="1"/><text x="100.0128%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7628%" y="517" width="0.0791%" height="15" fill="rgb(248,228,14)" fg:x="1262" fg:w="1"/><text x="100.0128%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.8419%" y="485" width="0.0791%" height="15" fill="rgb(208,133,18)" fg:x="1263" fg:w="1"/><text x="100.0919%" y="495.50"></text></g><g><title>all (1,265 samples, 100%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(207,35,49)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="1023.50"></text></g><g><title>simple-d600e672 (1,265 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(205,68,36)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="1007.50">simple-d600e672</text></g><g><title>_start (1,265 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(245,62,40)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="991.50">_start</text></g><g><title>__libc_start_main (1,265 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(228,27,24)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="975.50">__libc_start_main</text></g><g><title>main (1,265 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(253,19,12)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="959.50">main</text></g><g><title>std::rt::lang_start_internal (1,265 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(232,28,20)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="943.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,265 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(218,35,51)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,265 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(212,90,40)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,265 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(220,172,12)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="895.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,265 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(226,159,20)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="879.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,265 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(234,205,16)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="863.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,265 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(207,9,39)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="847.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,265 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(249,143,15)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="831.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,265 samples, 100.00%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(253,133,29)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="815.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,265 samples, 100.00%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(221,187,0)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="799.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,265 samples, 100.00%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(205,204,26)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="783.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,265 samples, 100.00%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(224,68,54)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="767.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,265 samples, 100.00%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(209,67,4)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="751.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,265 samples, 100.00%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(228,229,18)" fg:x="0" fg:w="1265"/><text x="0.2500%" y="735.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (309 samples, 24.43%)</title><rect x="75.5731%" y="709" width="24.4269%" height="15" fill="rgb(231,89,13)" fg:x="956" fg:w="309"/><text x="75.8231%" y="719.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (309 samples, 24.43%)</title><rect x="75.5731%" y="693" width="24.4269%" height="15" fill="rgb(210,182,18)" fg:x="956" fg:w="309"/><text x="75.8231%" y="703.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (309 samples, 24.43%)</title><rect x="75.5731%" y="677" width="24.4269%" height="15" fill="rgb(240,105,2)" fg:x="956" fg:w="309"/><text x="75.8231%" y="687.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (185 samples, 14.62%)</title><rect x="85.3755%" y="661" width="14.6245%" height="15" fill="rgb(207,170,50)" fg:x="1080" fg:w="185"/><text x="85.6255%" y="671.50">engine::session::Sessi..</text></g><g><title>engine::session::Session::evaluate_and_perform_as (185 samples, 14.62%)</title><rect x="85.3755%" y="645" width="14.6245%" height="15" fill="rgb(232,133,24)" fg:x="1080" fg:w="185"/><text x="85.6255%" y="655.50">engine::session::Sessi..</text></g><g><title>kernel::model::EntityPtrResolver::world (6 samples, 0.47%)</title><rect x="99.5257%" y="629" width="0.4743%" height="15" fill="rgb(235,166,27)" fg:x="1259" fg:w="6"/><text x="99.7757%" y="639.50"></text></g><g><title>engine::session::Session::load_entity (6 samples, 0.47%)</title><rect x="99.5257%" y="613" width="0.4743%" height="15" fill="rgb(209,19,13)" fg:x="1259" fg:w="6"/><text x="99.7757%" y="623.50"></text></g><g><title>engine::session::internal::Entities::add_persisted (6 samples, 0.47%)</title><rect x="99.5257%" y="597" width="0.4743%" height="15" fill="rgb(226,79,39)" fg:x="1259" fg:w="6"/><text x="99.7757%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (2 samples, 0.16%)</title><rect x="99.8419%" y="581" width="0.1581%" height="15" fill="rgb(222,163,10)" fg:x="1263" fg:w="2"/><text x="100.0919%" y="591.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="99.8419%" y="565" width="0.1581%" height="15" fill="rgb(214,44,19)" fg:x="1263" fg:w="2"/><text x="100.0919%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8419%" y="549" width="0.1581%" height="15" fill="rgb(210,217,13)" fg:x="1263" fg:w="2"/><text x="100.0919%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8419%" y="533" width="0.1581%" height="15" fill="rgb(237,61,54)" fg:x="1263" fg:w="2"/><text x="100.0919%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="99.8419%" y="517" width="0.1581%" height="15" fill="rgb(226,184,24)" fg:x="1263" fg:w="2"/><text x="100.0919%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="99.8419%" y="501" width="0.1581%" height="15" fill="rgb(223,226,4)" fg:x="1263" fg:w="2"/><text x="100.0919%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.9209%" y="485" width="0.0791%" height="15" fill="rgb(210,26,41)" fg:x="1264" fg:w="1"/><text x="100.1709%" y="495.50"></text></g></svg></svg>