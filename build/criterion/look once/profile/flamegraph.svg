<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1158" onload="init(evt)" viewBox="0 0 1200 1158" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1158" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1141.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1141.00"> </text><svg id="frames" x="10" width="1180" total_samples="1262"><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="0.0000%" y="741" width="0.0792%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.0000%" y="725" width="0.0792%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0000%" y="709" width="0.0792%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.0792%" y="709" width="0.0792%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3292%" y="719.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.2377%" y="629" width="0.0792%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.4877%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="0.3170%" y="613" width="0.1585%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="2"/><text x="0.5670%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="0.3170%" y="597" width="0.1585%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="2"/><text x="0.5670%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="0.3962%" y="581" width="0.0792%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="1"/><text x="0.6462%" y="591.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="0.4754%" y="613" width="0.1585%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="2"/><text x="0.7254%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="0.6339%" y="613" width="0.0792%" height="15" fill="rgb(220,122,19)" fg:x="8" fg:w="1"/><text x="0.8839%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="0.7132%" y="597" width="0.0792%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="1"/><text x="0.9632%" y="607.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="0.8716%" y="581" width="0.2377%" height="15" fill="rgb(240,193,28)" fg:x="11" fg:w="3"/><text x="1.1216%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (15 samples, 1.19%)</title><rect x="0.0000%" y="757" width="1.1886%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="15"/><text x="0.2500%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (14 samples, 1.11%)</title><rect x="0.0792%" y="741" width="1.1094%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="14"/><text x="0.3292%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.11%)</title><rect x="0.0792%" y="725" width="1.1094%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="14"/><text x="0.3292%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (13 samples, 1.03%)</title><rect x="0.1585%" y="709" width="1.0301%" height="15" fill="rgb(231,73,38)" fg:x="2" fg:w="13"/><text x="0.4085%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.03%)</title><rect x="0.1585%" y="693" width="1.0301%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="13"/><text x="0.4085%" y="703.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 1.03%)</title><rect x="0.1585%" y="677" width="1.0301%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="13"/><text x="0.4085%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (13 samples, 1.03%)</title><rect x="0.1585%" y="661" width="1.0301%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="13"/><text x="0.4085%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.95%)</title><rect x="0.2377%" y="645" width="0.9509%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="12"/><text x="0.4877%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (11 samples, 0.87%)</title><rect x="0.3170%" y="629" width="0.8716%" height="15" fill="rgb(249,33,26)" fg:x="4" fg:w="11"/><text x="0.5670%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="0.7132%" y="613" width="0.4754%" height="15" fill="rgb(235,183,28)" fg:x="9" fg:w="6"/><text x="0.9632%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.40%)</title><rect x="0.7924%" y="597" width="0.3962%" height="15" fill="rgb(221,5,38)" fg:x="10" fg:w="5"/><text x="1.0424%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="1.1094%" y="581" width="0.0792%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="1"/><text x="1.3594%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="1.1094%" y="565" width="0.0792%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="1"/><text x="1.3594%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.1094%" y="549" width="0.0792%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="1"/><text x="1.3594%" y="559.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="1.1886%" y="677" width="0.0792%" height="15" fill="rgb(225,111,53)" fg:x="15" fg:w="1"/><text x="1.4386%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="1.1886%" y="661" width="0.0792%" height="15" fill="rgb(238,160,17)" fg:x="15" fg:w="1"/><text x="1.4386%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="1.1886%" y="645" width="0.0792%" height="15" fill="rgb(214,148,48)" fg:x="15" fg:w="1"/><text x="1.4386%" y="655.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="1.1886%" y="629" width="0.0792%" height="15" fill="rgb(232,36,49)" fg:x="15" fg:w="1"/><text x="1.4386%" y="639.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="1.1886%" y="613" width="0.0792%" height="15" fill="rgb(209,103,24)" fg:x="15" fg:w="1"/><text x="1.4386%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (2 samples, 0.16%)</title><rect x="1.1886%" y="725" width="0.1585%" height="15" fill="rgb(229,88,8)" fg:x="15" fg:w="2"/><text x="1.4386%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="1.1886%" y="709" width="0.1585%" height="15" fill="rgb(213,181,19)" fg:x="15" fg:w="2"/><text x="1.4386%" y="719.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="1.1886%" y="693" width="0.1585%" height="15" fill="rgb(254,191,54)" fg:x="15" fg:w="2"/><text x="1.4386%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="1.2678%" y="677" width="0.0792%" height="15" fill="rgb(241,83,37)" fg:x="16" fg:w="1"/><text x="1.5178%" y="687.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="1.2678%" y="661" width="0.0792%" height="15" fill="rgb(233,36,39)" fg:x="16" fg:w="1"/><text x="1.5178%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="1.2678%" y="645" width="0.0792%" height="15" fill="rgb(226,3,54)" fg:x="16" fg:w="1"/><text x="1.5178%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="1.2678%" y="629" width="0.0792%" height="15" fill="rgb(245,192,40)" fg:x="16" fg:w="1"/><text x="1.5178%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2678%" y="613" width="0.0792%" height="15" fill="rgb(238,167,29)" fg:x="16" fg:w="1"/><text x="1.5178%" y="623.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="1.2678%" y="597" width="0.0792%" height="15" fill="rgb(232,182,51)" fg:x="16" fg:w="1"/><text x="1.5178%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2678%" y="581" width="0.0792%" height="15" fill="rgb(231,60,39)" fg:x="16" fg:w="1"/><text x="1.5178%" y="591.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="1.2678%" y="565" width="0.0792%" height="15" fill="rgb(208,69,12)" fg:x="16" fg:w="1"/><text x="1.5178%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2678%" y="549" width="0.0792%" height="15" fill="rgb(235,93,37)" fg:x="16" fg:w="1"/><text x="1.5178%" y="559.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2678%" y="533" width="0.0792%" height="15" fill="rgb(213,116,39)" fg:x="16" fg:w="1"/><text x="1.5178%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="1.2678%" y="517" width="0.0792%" height="15" fill="rgb(222,207,29)" fg:x="16" fg:w="1"/><text x="1.5178%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="1.2678%" y="501" width="0.0792%" height="15" fill="rgb(206,96,30)" fg:x="16" fg:w="1"/><text x="1.5178%" y="511.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="1.2678%" y="485" width="0.0792%" height="15" fill="rgb(218,138,4)" fg:x="16" fg:w="1"/><text x="1.5178%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="1.2678%" y="469" width="0.0792%" height="15" fill="rgb(250,191,14)" fg:x="16" fg:w="1"/><text x="1.5178%" y="479.50"></text></g><g><title>kernel::plugins::RegisteredPlugins::create_plugins (2 samples, 0.16%)</title><rect x="1.3471%" y="725" width="0.1585%" height="15" fill="rgb(239,60,40)" fg:x="17" fg:w="2"/><text x="1.5971%" y="735.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.16%)</title><rect x="1.3471%" y="709" width="0.1585%" height="15" fill="rgb(206,27,48)" fg:x="17" fg:w="2"/><text x="1.5971%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="1.4263%" y="693" width="0.0792%" height="15" fill="rgb(225,35,8)" fg:x="18" fg:w="1"/><text x="1.6763%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="1.5848%" y="677" width="0.0792%" height="15" fill="rgb(250,213,24)" fg:x="20" fg:w="1"/><text x="1.8348%" y="687.50"></text></g><g><title>dlerror (2 samples, 0.16%)</title><rect x="1.6640%" y="677" width="0.1585%" height="15" fill="rgb(247,123,22)" fg:x="21" fg:w="2"/><text x="1.9140%" y="687.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.95%)</title><rect x="1.1886%" y="757" width="0.9509%" height="15" fill="rgb(231,138,38)" fg:x="15" fg:w="12"/><text x="1.4386%" y="767.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.95%)</title><rect x="1.1886%" y="741" width="0.9509%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="12"/><text x="1.4386%" y="751.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (8 samples, 0.63%)</title><rect x="1.5055%" y="725" width="0.6339%" height="15" fill="rgb(251,118,11)" fg:x="19" fg:w="8"/><text x="1.7555%" y="735.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (8 samples, 0.63%)</title><rect x="1.5055%" y="709" width="0.6339%" height="15" fill="rgb(217,147,25)" fg:x="19" fg:w="8"/><text x="1.7555%" y="719.50"></text></g><g><title>libloading::os::unix::Library::open (7 samples, 0.55%)</title><rect x="1.5848%" y="693" width="0.5547%" height="15" fill="rgb(247,81,37)" fg:x="20" fg:w="7"/><text x="1.8348%" y="703.50"></text></g><g><title>dlopen (4 samples, 0.32%)</title><rect x="1.8225%" y="677" width="0.3170%" height="15" fill="rgb(209,12,38)" fg:x="23" fg:w="4"/><text x="2.0725%" y="687.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="1.9017%" y="661" width="0.2377%" height="15" fill="rgb(227,1,9)" fg:x="24" fg:w="3"/><text x="2.1517%" y="671.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.9017%" y="645" width="0.2377%" height="15" fill="rgb(248,47,43)" fg:x="24" fg:w="3"/><text x="2.1517%" y="655.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.9017%" y="629" width="0.2377%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="3"/><text x="2.1517%" y="639.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="1.9017%" y="613" width="0.2377%" height="15" fill="rgb(210,229,1)" fg:x="24" fg:w="3"/><text x="2.1517%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;kernel::model::entry::Entry&gt;&gt; (1 samples, 0.08%)</title><rect x="2.1395%" y="741" width="0.0792%" height="15" fill="rgb(222,148,37)" fg:x="27" fg:w="1"/><text x="2.3895%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="2.1395%" y="725" width="0.0792%" height="15" fill="rgb(234,67,33)" fg:x="27" fg:w="1"/><text x="2.3895%" y="735.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="2.1395%" y="709" width="0.0792%" height="15" fill="rgb(247,98,35)" fg:x="27" fg:w="1"/><text x="2.3895%" y="719.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="2.2187%" y="709" width="0.0792%" height="15" fill="rgb(247,138,52)" fg:x="28" fg:w="1"/><text x="2.4687%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="2.2187%" y="693" width="0.0792%" height="15" fill="rgb(213,79,30)" fg:x="28" fg:w="1"/><text x="2.4687%" y="703.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.2979%" y="645" width="0.0792%" height="15" fill="rgb(246,177,23)" fg:x="29" fg:w="1"/><text x="2.5479%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.2979%" y="629" width="0.0792%" height="15" fill="rgb(230,62,27)" fg:x="29" fg:w="1"/><text x="2.5479%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.2979%" y="613" width="0.0792%" height="15" fill="rgb(216,154,8)" fg:x="29" fg:w="1"/><text x="2.5479%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.2979%" y="597" width="0.0792%" height="15" fill="rgb(244,35,45)" fg:x="29" fg:w="1"/><text x="2.5479%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="2.2979%" y="581" width="0.0792%" height="15" fill="rgb(251,115,12)" fg:x="29" fg:w="1"/><text x="2.5479%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="2.2979%" y="565" width="0.0792%" height="15" fill="rgb(240,54,50)" fg:x="29" fg:w="1"/><text x="2.5479%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="2.2979%" y="549" width="0.0792%" height="15" fill="rgb(233,84,52)" fg:x="29" fg:w="1"/><text x="2.5479%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="2.2979%" y="661" width="0.1585%" height="15" fill="rgb(207,117,47)" fg:x="29" fg:w="2"/><text x="2.5479%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.3772%" y="645" width="0.0792%" height="15" fill="rgb(249,43,39)" fg:x="30" fg:w="1"/><text x="2.6272%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="2.5357%" y="629" width="0.0792%" height="15" fill="rgb(209,38,44)" fg:x="32" fg:w="1"/><text x="2.7857%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="2.6149%" y="629" width="0.0792%" height="15" fill="rgb(236,212,23)" fg:x="33" fg:w="1"/><text x="2.8649%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6149%" y="613" width="0.0792%" height="15" fill="rgb(242,79,21)" fg:x="33" fg:w="1"/><text x="2.8649%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="2.6149%" y="597" width="0.0792%" height="15" fill="rgb(211,96,35)" fg:x="33" fg:w="1"/><text x="2.8649%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.6149%" y="581" width="0.0792%" height="15" fill="rgb(253,215,40)" fg:x="33" fg:w="1"/><text x="2.8649%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6941%" y="613" width="0.0792%" height="15" fill="rgb(211,81,21)" fg:x="34" fg:w="1"/><text x="2.9441%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6941%" y="597" width="0.0792%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="1"/><text x="2.9441%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="2.6941%" y="581" width="0.0792%" height="15" fill="rgb(235,213,38)" fg:x="34" fg:w="1"/><text x="2.9441%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="2.6941%" y="629" width="0.1585%" height="15" fill="rgb(237,122,38)" fg:x="34" fg:w="2"/><text x="2.9441%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="2.7734%" y="613" width="0.0792%" height="15" fill="rgb(244,218,35)" fg:x="35" fg:w="1"/><text x="3.0234%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.7734%" y="597" width="0.0792%" height="15" fill="rgb(240,68,47)" fg:x="35" fg:w="1"/><text x="3.0234%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.7734%" y="581" width="0.0792%" height="15" fill="rgb(210,16,53)" fg:x="35" fg:w="1"/><text x="3.0234%" y="591.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (9 samples, 0.71%)</title><rect x="2.2979%" y="677" width="0.7132%" height="15" fill="rgb(235,124,12)" fg:x="29" fg:w="9"/><text x="2.5479%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (7 samples, 0.55%)</title><rect x="2.4564%" y="661" width="0.5547%" height="15" fill="rgb(224,169,11)" fg:x="31" fg:w="7"/><text x="2.7064%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="2.5357%" y="645" width="0.4754%" height="15" fill="rgb(250,166,2)" fg:x="32" fg:w="6"/><text x="2.7857%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="2.8526%" y="629" width="0.1585%" height="15" fill="rgb(242,216,29)" fg:x="36" fg:w="2"/><text x="3.1026%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="2.9319%" y="613" width="0.0792%" height="15" fill="rgb(230,116,27)" fg:x="37" fg:w="1"/><text x="3.1819%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="2.9319%" y="597" width="0.0792%" height="15" fill="rgb(228,99,48)" fg:x="37" fg:w="1"/><text x="3.1819%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.24%)</title><rect x="3.0111%" y="629" width="0.2377%" height="15" fill="rgb(253,11,6)" fg:x="38" fg:w="3"/><text x="3.2611%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="3.3281%" y="597" width="0.0792%" height="15" fill="rgb(247,143,39)" fg:x="42" fg:w="1"/><text x="3.5781%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.3281%" y="581" width="0.0792%" height="15" fill="rgb(236,97,10)" fg:x="42" fg:w="1"/><text x="3.5781%" y="591.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="3.3281%" y="565" width="0.0792%" height="15" fill="rgb(233,208,19)" fg:x="42" fg:w="1"/><text x="3.5781%" y="575.50"></text></g><g><title>engine::session::Session::flush (16 samples, 1.27%)</title><rect x="2.2187%" y="741" width="1.2678%" height="15" fill="rgb(216,164,2)" fg:x="28" fg:w="16"/><text x="2.4687%" y="751.50"></text></g><g><title>engine::session::Session::save_entity_changes (16 samples, 1.27%)</title><rect x="2.2187%" y="725" width="1.2678%" height="15" fill="rgb(220,129,5)" fg:x="28" fg:w="16"/><text x="2.4687%" y="735.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (15 samples, 1.19%)</title><rect x="2.2979%" y="709" width="1.1886%" height="15" fill="rgb(242,17,10)" fg:x="29" fg:w="15"/><text x="2.5479%" y="719.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (15 samples, 1.19%)</title><rect x="2.2979%" y="693" width="1.1886%" height="15" fill="rgb(242,107,0)" fg:x="29" fg:w="15"/><text x="2.5479%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="3.0111%" y="677" width="0.4754%" height="15" fill="rgb(251,28,31)" fg:x="38" fg:w="6"/><text x="3.2611%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (6 samples, 0.48%)</title><rect x="3.0111%" y="661" width="0.4754%" height="15" fill="rgb(233,223,10)" fg:x="38" fg:w="6"/><text x="3.2611%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (6 samples, 0.48%)</title><rect x="3.0111%" y="645" width="0.4754%" height="15" fill="rgb(215,21,27)" fg:x="38" fg:w="6"/><text x="3.2611%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="3.2488%" y="629" width="0.2377%" height="15" fill="rgb(232,23,21)" fg:x="41" fg:w="3"/><text x="3.4988%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="3.3281%" y="613" width="0.1585%" height="15" fill="rgb(244,5,23)" fg:x="42" fg:w="2"/><text x="3.5781%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.4073%" y="597" width="0.0792%" height="15" fill="rgb(226,81,46)" fg:x="43" fg:w="1"/><text x="3.6573%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="3.4073%" y="581" width="0.0792%" height="15" fill="rgb(247,70,30)" fg:x="43" fg:w="1"/><text x="3.6573%" y="591.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.4865%" y="725" width="0.0792%" height="15" fill="rgb(212,68,19)" fg:x="44" fg:w="1"/><text x="3.7365%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.4865%" y="709" width="0.0792%" height="15" fill="rgb(240,187,13)" fg:x="44" fg:w="1"/><text x="3.7365%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.4865%" y="693" width="0.0792%" height="15" fill="rgb(223,113,26)" fg:x="44" fg:w="1"/><text x="3.7365%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="3.4865%" y="677" width="0.0792%" height="15" fill="rgb(206,192,2)" fg:x="44" fg:w="1"/><text x="3.7365%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.4865%" y="661" width="0.0792%" height="15" fill="rgb(241,108,4)" fg:x="44" fg:w="1"/><text x="3.7365%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.4865%" y="645" width="0.0792%" height="15" fill="rgb(247,173,49)" fg:x="44" fg:w="1"/><text x="3.7365%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.4865%" y="629" width="0.0792%" height="15" fill="rgb(224,114,35)" fg:x="44" fg:w="1"/><text x="3.7365%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4865%" y="613" width="0.0792%" height="15" fill="rgb(245,159,27)" fg:x="44" fg:w="1"/><text x="3.7365%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.4865%" y="597" width="0.0792%" height="15" fill="rgb(245,172,44)" fg:x="44" fg:w="1"/><text x="3.7365%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4865%" y="581" width="0.0792%" height="15" fill="rgb(236,23,11)" fg:x="44" fg:w="1"/><text x="3.7365%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.4865%" y="565" width="0.0792%" height="15" fill="rgb(205,117,38)" fg:x="44" fg:w="1"/><text x="3.7365%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4865%" y="549" width="0.0792%" height="15" fill="rgb(237,72,25)" fg:x="44" fg:w="1"/><text x="3.7365%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.4865%" y="533" width="0.0792%" height="15" fill="rgb(244,70,9)" fg:x="44" fg:w="1"/><text x="3.7365%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4865%" y="517" width="0.0792%" height="15" fill="rgb(217,125,39)" fg:x="44" fg:w="1"/><text x="3.7365%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="3.4865%" y="501" width="0.0792%" height="15" fill="rgb(235,36,10)" fg:x="44" fg:w="1"/><text x="3.7365%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.4865%" y="485" width="0.0792%" height="15" fill="rgb(251,123,47)" fg:x="44" fg:w="1"/><text x="3.7365%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="3.4865%" y="469" width="0.0792%" height="15" fill="rgb(221,13,13)" fg:x="44" fg:w="1"/><text x="3.7365%" y="479.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="3.4865%" y="453" width="0.0792%" height="15" fill="rgb(238,131,9)" fg:x="44" fg:w="1"/><text x="3.7365%" y="463.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="3.5658%" y="709" width="0.0792%" height="15" fill="rgb(211,50,8)" fg:x="45" fg:w="1"/><text x="3.8158%" y="719.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5658%" y="693" width="0.0792%" height="15" fill="rgb(245,182,24)" fg:x="45" fg:w="1"/><text x="3.8158%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5658%" y="677" width="0.0792%" height="15" fill="rgb(242,14,37)" fg:x="45" fg:w="1"/><text x="3.8158%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="3.5658%" y="661" width="0.0792%" height="15" fill="rgb(246,228,12)" fg:x="45" fg:w="1"/><text x="3.8158%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="3.5658%" y="645" width="0.0792%" height="15" fill="rgb(213,55,15)" fg:x="45" fg:w="1"/><text x="3.8158%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5658%" y="629" width="0.0792%" height="15" fill="rgb(209,9,3)" fg:x="45" fg:w="1"/><text x="3.8158%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.5658%" y="613" width="0.0792%" height="15" fill="rgb(230,59,30)" fg:x="45" fg:w="1"/><text x="3.8158%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="3.5658%" y="597" width="0.0792%" height="15" fill="rgb(209,121,21)" fg:x="45" fg:w="1"/><text x="3.8158%" y="607.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="3.4865%" y="741" width="0.2377%" height="15" fill="rgb(220,109,13)" fg:x="44" fg:w="3"/><text x="3.7365%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (2 samples, 0.16%)</title><rect x="3.5658%" y="725" width="0.1585%" height="15" fill="rgb(232,18,1)" fg:x="45" fg:w="2"/><text x="3.8158%" y="735.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (1 samples, 0.08%)</title><rect x="3.6450%" y="709" width="0.0792%" height="15" fill="rgb(215,41,42)" fg:x="46" fg:w="1"/><text x="3.8950%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (1 samples, 0.08%)</title><rect x="3.6450%" y="693" width="0.0792%" height="15" fill="rgb(224,123,36)" fg:x="46" fg:w="1"/><text x="3.8950%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="3.6450%" y="677" width="0.0792%" height="15" fill="rgb(240,125,3)" fg:x="46" fg:w="1"/><text x="3.8950%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.6450%" y="661" width="0.0792%" height="15" fill="rgb(205,98,50)" fg:x="46" fg:w="1"/><text x="3.8950%" y="671.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="3.6450%" y="645" width="0.0792%" height="15" fill="rgb(205,185,37)" fg:x="46" fg:w="1"/><text x="3.8950%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="3.6450%" y="629" width="0.0792%" height="15" fill="rgb(238,207,15)" fg:x="46" fg:w="1"/><text x="3.8950%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="3.6450%" y="613" width="0.0792%" height="15" fill="rgb(213,199,42)" fg:x="46" fg:w="1"/><text x="3.8950%" y="623.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.7242%" y="741" width="0.0792%" height="15" fill="rgb(235,201,11)" fg:x="47" fg:w="1"/><text x="3.9742%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.7242%" y="725" width="0.0792%" height="15" fill="rgb(207,46,11)" fg:x="47" fg:w="1"/><text x="3.9742%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.7242%" y="709" width="0.0792%" height="15" fill="rgb(241,35,35)" fg:x="47" fg:w="1"/><text x="3.9742%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.7242%" y="693" width="0.0792%" height="15" fill="rgb(243,32,47)" fg:x="47" fg:w="1"/><text x="3.9742%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.7242%" y="677" width="0.0792%" height="15" fill="rgb(247,202,23)" fg:x="47" fg:w="1"/><text x="3.9742%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.7242%" y="661" width="0.0792%" height="15" fill="rgb(219,102,11)" fg:x="47" fg:w="1"/><text x="3.9742%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.7242%" y="645" width="0.0792%" height="15" fill="rgb(243,110,44)" fg:x="47" fg:w="1"/><text x="3.9742%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7242%" y="629" width="0.0792%" height="15" fill="rgb(222,74,54)" fg:x="47" fg:w="1"/><text x="3.9742%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7242%" y="613" width="0.0792%" height="15" fill="rgb(216,99,12)" fg:x="47" fg:w="1"/><text x="3.9742%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7242%" y="597" width="0.0792%" height="15" fill="rgb(226,22,26)" fg:x="47" fg:w="1"/><text x="3.9742%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="3.7242%" y="581" width="0.0792%" height="15" fill="rgb(217,163,10)" fg:x="47" fg:w="1"/><text x="3.9742%" y="591.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="3.8035%" y="741" width="0.0792%" height="15" fill="rgb(213,25,53)" fg:x="48" fg:w="1"/><text x="4.0535%" y="751.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="3.8035%" y="725" width="0.0792%" height="15" fill="rgb(252,105,26)" fg:x="48" fg:w="1"/><text x="4.0535%" y="735.50"></text></g><g><title>kernel::model::props::Props::set_property (1 samples, 0.08%)</title><rect x="3.8035%" y="709" width="0.0792%" height="15" fill="rgb(220,39,43)" fg:x="48" fg:w="1"/><text x="4.0535%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8035%" y="693" width="0.0792%" height="15" fill="rgb(229,68,48)" fg:x="48" fg:w="1"/><text x="4.0535%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="3.8035%" y="677" width="0.0792%" height="15" fill="rgb(252,8,32)" fg:x="48" fg:w="1"/><text x="4.0535%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.8827%" y="725" width="0.0792%" height="15" fill="rgb(223,20,43)" fg:x="49" fg:w="1"/><text x="4.1327%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.8827%" y="709" width="0.0792%" height="15" fill="rgb(229,81,49)" fg:x="49" fg:w="1"/><text x="4.1327%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.8827%" y="693" width="0.0792%" height="15" fill="rgb(236,28,36)" fg:x="49" fg:w="1"/><text x="4.1327%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.8827%" y="677" width="0.0792%" height="15" fill="rgb(249,185,26)" fg:x="49" fg:w="1"/><text x="4.1327%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.8827%" y="661" width="0.0792%" height="15" fill="rgb(249,174,33)" fg:x="49" fg:w="1"/><text x="4.1327%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.8827%" y="645" width="0.0792%" height="15" fill="rgb(233,201,37)" fg:x="49" fg:w="1"/><text x="4.1327%" y="655.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.8827%" y="629" width="0.0792%" height="15" fill="rgb(221,78,26)" fg:x="49" fg:w="1"/><text x="4.1327%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8827%" y="613" width="0.0792%" height="15" fill="rgb(250,127,30)" fg:x="49" fg:w="1"/><text x="4.1327%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.8827%" y="597" width="0.0792%" height="15" fill="rgb(230,49,44)" fg:x="49" fg:w="1"/><text x="4.1327%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8827%" y="581" width="0.0792%" height="15" fill="rgb(229,67,23)" fg:x="49" fg:w="1"/><text x="4.1327%" y="591.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="3.8827%" y="565" width="0.0792%" height="15" fill="rgb(249,83,47)" fg:x="49" fg:w="1"/><text x="4.1327%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8827%" y="549" width="0.0792%" height="15" fill="rgb(215,43,3)" fg:x="49" fg:w="1"/><text x="4.1327%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="3.8827%" y="533" width="0.0792%" height="15" fill="rgb(238,154,13)" fg:x="49" fg:w="1"/><text x="4.1327%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="3.8827%" y="517" width="0.0792%" height="15" fill="rgb(219,56,2)" fg:x="49" fg:w="1"/><text x="4.1327%" y="527.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="3.9620%" y="677" width="0.0792%" height="15" fill="rgb(233,0,4)" fg:x="50" fg:w="1"/><text x="4.2120%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="3.9620%" y="661" width="0.0792%" height="15" fill="rgb(235,30,7)" fg:x="50" fg:w="1"/><text x="4.2120%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="3.9620%" y="645" width="0.0792%" height="15" fill="rgb(250,79,13)" fg:x="50" fg:w="1"/><text x="4.2120%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="3.9620%" y="629" width="0.0792%" height="15" fill="rgb(211,146,34)" fg:x="50" fg:w="1"/><text x="4.2120%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="3.9620%" y="613" width="0.0792%" height="15" fill="rgb(228,22,38)" fg:x="50" fg:w="1"/><text x="4.2120%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="3.9620%" y="597" width="0.0792%" height="15" fill="rgb(235,168,5)" fg:x="50" fg:w="1"/><text x="4.2120%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="3.9620%" y="581" width="0.0792%" height="15" fill="rgb(221,155,16)" fg:x="50" fg:w="1"/><text x="4.2120%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9620%" y="565" width="0.0792%" height="15" fill="rgb(215,215,53)" fg:x="50" fg:w="1"/><text x="4.2120%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="3.9620%" y="549" width="0.0792%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="1"/><text x="4.2120%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9620%" y="533" width="0.0792%" height="15" fill="rgb(234,103,6)" fg:x="50" fg:w="1"/><text x="4.2120%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9620%" y="517" width="0.0792%" height="15" fill="rgb(227,97,0)" fg:x="50" fg:w="1"/><text x="4.2120%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9620%" y="501" width="0.0792%" height="15" fill="rgb(234,150,53)" fg:x="50" fg:w="1"/><text x="4.2120%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="3.9620%" y="485" width="0.0792%" height="15" fill="rgb(228,201,54)" fg:x="50" fg:w="1"/><text x="4.2120%" y="495.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="4.0412%" y="661" width="0.0792%" height="15" fill="rgb(222,22,37)" fg:x="51" fg:w="1"/><text x="4.2912%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="4.0412%" y="645" width="0.0792%" height="15" fill="rgb(237,53,32)" fg:x="51" fg:w="1"/><text x="4.2912%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="4.0412%" y="629" width="0.0792%" height="15" fill="rgb(233,25,53)" fg:x="51" fg:w="1"/><text x="4.2912%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="4.0412%" y="613" width="0.0792%" height="15" fill="rgb(210,40,34)" fg:x="51" fg:w="1"/><text x="4.2912%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="4.0412%" y="597" width="0.0792%" height="15" fill="rgb(241,220,44)" fg:x="51" fg:w="1"/><text x="4.2912%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.0412%" y="581" width="0.0792%" height="15" fill="rgb(235,28,35)" fg:x="51" fg:w="1"/><text x="4.2912%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0412%" y="565" width="0.0792%" height="15" fill="rgb(210,56,17)" fg:x="51" fg:w="1"/><text x="4.2912%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="4.0412%" y="549" width="0.0792%" height="15" fill="rgb(224,130,29)" fg:x="51" fg:w="1"/><text x="4.2912%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0412%" y="533" width="0.0792%" height="15" fill="rgb(235,212,8)" fg:x="51" fg:w="1"/><text x="4.2912%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0412%" y="517" width="0.0792%" height="15" fill="rgb(223,33,50)" fg:x="51" fg:w="1"/><text x="4.2912%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="4.0412%" y="501" width="0.0792%" height="15" fill="rgb(219,149,13)" fg:x="51" fg:w="1"/><text x="4.2912%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.0412%" y="485" width="0.0792%" height="15" fill="rgb(250,156,29)" fg:x="51" fg:w="1"/><text x="4.2912%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="4.1204%" y="661" width="0.0792%" height="15" fill="rgb(216,193,19)" fg:x="52" fg:w="1"/><text x="4.3704%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;kernel::model::entity::EntityRef&gt;&gt; (1 samples, 0.08%)</title><rect x="4.1204%" y="645" width="0.0792%" height="15" fill="rgb(216,135,14)" fg:x="52" fg:w="1"/><text x="4.3704%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.1204%" y="629" width="0.0792%" height="15" fill="rgb(241,47,5)" fg:x="52" fg:w="1"/><text x="4.3704%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="4.1997%" y="613" width="0.0792%" height="15" fill="rgb(233,42,35)" fg:x="53" fg:w="1"/><text x="4.4497%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.1997%" y="597" width="0.0792%" height="15" fill="rgb(231,13,6)" fg:x="53" fg:w="1"/><text x="4.4497%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.1997%" y="581" width="0.0792%" height="15" fill="rgb(207,181,40)" fg:x="53" fg:w="1"/><text x="4.4497%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.1997%" y="565" width="0.0792%" height="15" fill="rgb(254,173,49)" fg:x="53" fg:w="1"/><text x="4.4497%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1997%" y="549" width="0.0792%" height="15" fill="rgb(221,1,38)" fg:x="53" fg:w="1"/><text x="4.4497%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="4.1997%" y="533" width="0.0792%" height="15" fill="rgb(206,124,46)" fg:x="53" fg:w="1"/><text x="4.4497%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1997%" y="517" width="0.0792%" height="15" fill="rgb(249,21,11)" fg:x="53" fg:w="1"/><text x="4.4497%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="4.1997%" y="501" width="0.0792%" height="15" fill="rgb(222,201,40)" fg:x="53" fg:w="1"/><text x="4.4497%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="4.1997%" y="485" width="0.0792%" height="15" fill="rgb(235,61,29)" fg:x="53" fg:w="1"/><text x="4.4497%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="3.9620%" y="725" width="0.3962%" height="15" fill="rgb(219,207,3)" fg:x="50" fg:w="5"/><text x="4.2120%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="3.9620%" y="709" width="0.3962%" height="15" fill="rgb(222,56,46)" fg:x="50" fg:w="5"/><text x="4.2120%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="3.9620%" y="693" width="0.3962%" height="15" fill="rgb(239,76,54)" fg:x="50" fg:w="5"/><text x="4.2120%" y="703.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="4.0412%" y="677" width="0.3170%" height="15" fill="rgb(231,124,27)" fg:x="51" fg:w="4"/><text x="4.2912%" y="687.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="4.1997%" y="661" width="0.1585%" height="15" fill="rgb(249,195,6)" fg:x="53" fg:w="2"/><text x="4.4497%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="4.1997%" y="645" width="0.1585%" height="15" fill="rgb(237,174,47)" fg:x="53" fg:w="2"/><text x="4.4497%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="4.1997%" y="629" width="0.1585%" height="15" fill="rgb(206,201,31)" fg:x="53" fg:w="2"/><text x="4.4497%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="4.2789%" y="613" width="0.0792%" height="15" fill="rgb(231,57,52)" fg:x="54" fg:w="1"/><text x="4.5289%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="4.2789%" y="597" width="0.0792%" height="15" fill="rgb(248,177,22)" fg:x="54" fg:w="1"/><text x="4.5289%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="4.2789%" y="581" width="0.0792%" height="15" fill="rgb(215,211,37)" fg:x="54" fg:w="1"/><text x="4.5289%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2789%" y="565" width="0.0792%" height="15" fill="rgb(241,128,51)" fg:x="54" fg:w="1"/><text x="4.5289%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2789%" y="549" width="0.0792%" height="15" fill="rgb(227,165,31)" fg:x="54" fg:w="1"/><text x="4.5289%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2789%" y="533" width="0.0792%" height="15" fill="rgb(228,167,24)" fg:x="54" fg:w="1"/><text x="4.5289%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2789%" y="517" width="0.0792%" height="15" fill="rgb(228,143,12)" fg:x="54" fg:w="1"/><text x="4.5289%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="4.2789%" y="501" width="0.0792%" height="15" fill="rgb(249,149,8)" fg:x="54" fg:w="1"/><text x="4.5289%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2789%" y="485" width="0.0792%" height="15" fill="rgb(243,35,44)" fg:x="54" fg:w="1"/><text x="4.5289%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="4.2789%" y="469" width="0.0792%" height="15" fill="rgb(246,89,9)" fg:x="54" fg:w="1"/><text x="4.5289%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="4.2789%" y="453" width="0.0792%" height="15" fill="rgb(233,213,13)" fg:x="54" fg:w="1"/><text x="4.5289%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="4.2789%" y="437" width="0.0792%" height="15" fill="rgb(233,141,41)" fg:x="54" fg:w="1"/><text x="4.5289%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="4.2789%" y="421" width="0.0792%" height="15" fill="rgb(239,167,4)" fg:x="54" fg:w="1"/><text x="4.5289%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2789%" y="405" width="0.0792%" height="15" fill="rgb(209,217,16)" fg:x="54" fg:w="1"/><text x="4.5289%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="4.2789%" y="389" width="0.0792%" height="15" fill="rgb(219,88,35)" fg:x="54" fg:w="1"/><text x="4.5289%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="4.2789%" y="373" width="0.0792%" height="15" fill="rgb(220,193,23)" fg:x="54" fg:w="1"/><text x="4.5289%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="4.2789%" y="357" width="0.0792%" height="15" fill="rgb(230,90,52)" fg:x="54" fg:w="1"/><text x="4.5289%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="4.2789%" y="341" width="0.0792%" height="15" fill="rgb(252,106,19)" fg:x="54" fg:w="1"/><text x="4.5289%" y="351.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="4.2789%" y="325" width="0.0792%" height="15" fill="rgb(206,74,20)" fg:x="54" fg:w="1"/><text x="4.5289%" y="335.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="4.2789%" y="309" width="0.0792%" height="15" fill="rgb(230,138,44)" fg:x="54" fg:w="1"/><text x="4.5289%" y="319.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::commit (1 samples, 0.08%)</title><rect x="4.3582%" y="693" width="0.0792%" height="15" fill="rgb(235,182,43)" fg:x="55" fg:w="1"/><text x="4.6082%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.3582%" y="677" width="0.0792%" height="15" fill="rgb(242,16,51)" fg:x="55" fg:w="1"/><text x="4.6082%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="4.4374%" y="693" width="0.0792%" height="15" fill="rgb(248,9,4)" fg:x="56" fg:w="1"/><text x="4.6874%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="4.4374%" y="677" width="0.0792%" height="15" fill="rgb(210,31,22)" fg:x="56" fg:w="1"/><text x="4.6874%" y="687.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="4.4374%" y="661" width="0.0792%" height="15" fill="rgb(239,54,39)" fg:x="56" fg:w="1"/><text x="4.6874%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.4374%" y="645" width="0.0792%" height="15" fill="rgb(230,99,41)" fg:x="56" fg:w="1"/><text x="4.6874%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="4.5166%" y="677" width="0.0792%" height="15" fill="rgb(253,106,12)" fg:x="57" fg:w="1"/><text x="4.7666%" y="687.50"></text></g><g><title>engine::identifiers::model::set_gid (2 samples, 0.16%)</title><rect x="4.5166%" y="693" width="0.1585%" height="15" fill="rgb(213,46,41)" fg:x="57" fg:w="2"/><text x="4.7666%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="4.5959%" y="677" width="0.0792%" height="15" fill="rgb(215,133,35)" fg:x="58" fg:w="1"/><text x="4.8459%" y="687.50"></text></g><g><title>engine::identifiers::model::_::&lt;impl serde::ser::Serialize for engine::identifiers::model::Identifiers&gt;::serialize (1 samples, 0.08%)</title><rect x="4.5959%" y="661" width="0.0792%" height="15" fill="rgb(213,28,5)" fg:x="58" fg:w="1"/><text x="4.8459%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="4.5959%" y="645" width="0.0792%" height="15" fill="rgb(215,77,49)" fg:x="58" fg:w="1"/><text x="4.8459%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="4.5959%" y="629" width="0.0792%" height="15" fill="rgb(248,100,22)" fg:x="58" fg:w="1"/><text x="4.8459%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.7544%" y="645" width="0.0792%" height="15" fill="rgb(208,67,9)" fg:x="60" fg:w="1"/><text x="5.0044%" y="655.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="4.8336%" y="645" width="0.0792%" height="15" fill="rgb(219,133,21)" fg:x="61" fg:w="1"/><text x="5.0836%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="4.8336%" y="629" width="0.0792%" height="15" fill="rgb(246,46,29)" fg:x="61" fg:w="1"/><text x="5.0836%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="4.9921%" y="629" width="0.0792%" height="15" fill="rgb(246,185,52)" fg:x="63" fg:w="1"/><text x="5.2421%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="5.1506%" y="597" width="0.0792%" height="15" fill="rgb(252,136,11)" fg:x="65" fg:w="1"/><text x="5.4006%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.2298%" y="581" width="0.1585%" height="15" fill="rgb(219,138,53)" fg:x="66" fg:w="2"/><text x="5.4798%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="5.2298%" y="565" width="0.1585%" height="15" fill="rgb(211,51,23)" fg:x="66" fg:w="2"/><text x="5.4798%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3090%" y="549" width="0.0792%" height="15" fill="rgb(247,221,28)" fg:x="67" fg:w="1"/><text x="5.5590%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3090%" y="533" width="0.0792%" height="15" fill="rgb(251,222,45)" fg:x="67" fg:w="1"/><text x="5.5590%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="5.3090%" y="517" width="0.0792%" height="15" fill="rgb(217,162,53)" fg:x="67" fg:w="1"/><text x="5.5590%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.0713%" y="629" width="0.3962%" height="15" fill="rgb(229,93,14)" fg:x="64" fg:w="5"/><text x="5.3213%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="5.0713%" y="613" width="0.3962%" height="15" fill="rgb(209,67,49)" fg:x="64" fg:w="5"/><text x="5.3213%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="5.2298%" y="597" width="0.2377%" height="15" fill="rgb(213,87,29)" fg:x="66" fg:w="3"/><text x="5.4798%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="5.3883%" y="581" width="0.0792%" height="15" fill="rgb(205,151,52)" fg:x="68" fg:w="1"/><text x="5.6383%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="5.3883%" y="565" width="0.0792%" height="15" fill="rgb(253,215,39)" fg:x="68" fg:w="1"/><text x="5.6383%" y="575.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (12 samples, 0.95%)</title><rect x="4.6751%" y="661" width="0.9509%" height="15" fill="rgb(221,220,41)" fg:x="59" fg:w="12"/><text x="4.9251%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (9 samples, 0.71%)</title><rect x="4.9128%" y="645" width="0.7132%" height="15" fill="rgb(218,133,21)" fg:x="62" fg:w="9"/><text x="5.1628%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="5.4675%" y="629" width="0.1585%" height="15" fill="rgb(221,193,43)" fg:x="69" fg:w="2"/><text x="5.7175%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="5.4675%" y="613" width="0.1585%" height="15" fill="rgb(240,128,52)" fg:x="69" fg:w="2"/><text x="5.7175%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (2 samples, 0.16%)</title><rect x="5.4675%" y="597" width="0.1585%" height="15" fill="rgb(253,114,12)" fg:x="69" fg:w="2"/><text x="5.7175%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="5.4675%" y="581" width="0.1585%" height="15" fill="rgb(215,223,47)" fg:x="69" fg:w="2"/><text x="5.7175%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="5.5468%" y="565" width="0.0792%" height="15" fill="rgb(248,225,23)" fg:x="70" fg:w="1"/><text x="5.7968%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="5.5468%" y="549" width="0.0792%" height="15" fill="rgb(250,108,0)" fg:x="70" fg:w="1"/><text x="5.7968%" y="559.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.6260%" y="629" width="0.0792%" height="15" fill="rgb(228,208,7)" fg:x="71" fg:w="1"/><text x="5.8760%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.16%)</title><rect x="5.7052%" y="597" width="0.1585%" height="15" fill="rgb(244,45,10)" fg:x="72" fg:w="2"/><text x="5.9552%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.7845%" y="581" width="0.0792%" height="15" fill="rgb(207,125,25)" fg:x="73" fg:w="1"/><text x="6.0345%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="5.6260%" y="661" width="0.3170%" height="15" fill="rgb(210,195,18)" fg:x="71" fg:w="4"/><text x="5.8760%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="5.6260%" y="645" width="0.3170%" height="15" fill="rgb(249,80,12)" fg:x="71" fg:w="4"/><text x="5.8760%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.7052%" y="629" width="0.2377%" height="15" fill="rgb(221,65,9)" fg:x="72" fg:w="3"/><text x="5.9552%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3 samples, 0.24%)</title><rect x="5.7052%" y="613" width="0.2377%" height="15" fill="rgb(235,49,36)" fg:x="72" fg:w="3"/><text x="5.9552%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="5.8637%" y="597" width="0.0792%" height="15" fill="rgb(225,32,20)" fg:x="74" fg:w="1"/><text x="6.1137%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="5.8637%" y="581" width="0.0792%" height="15" fill="rgb(215,141,46)" fg:x="74" fg:w="1"/><text x="6.1137%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tracing::span::EnteredSpan&gt; (1 samples, 0.08%)</title><rect x="5.9429%" y="661" width="0.0792%" height="15" fill="rgb(250,160,47)" fg:x="75" fg:w="1"/><text x="6.1929%" y="671.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (1 samples, 0.08%)</title><rect x="6.0222%" y="645" width="0.0792%" height="15" fill="rgb(216,222,40)" fg:x="76" fg:w="1"/><text x="6.2722%" y="655.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="6.0222%" y="629" width="0.0792%" height="15" fill="rgb(234,217,39)" fg:x="76" fg:w="1"/><text x="6.2722%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="6.0222%" y="613" width="0.0792%" height="15" fill="rgb(207,178,40)" fg:x="76" fg:w="1"/><text x="6.2722%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="6.0222%" y="597" width="0.0792%" height="15" fill="rgb(221,136,13)" fg:x="76" fg:w="1"/><text x="6.2722%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.0222%" y="581" width="0.0792%" height="15" fill="rgb(249,199,10)" fg:x="76" fg:w="1"/><text x="6.2722%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.1014%" y="597" width="0.0792%" height="15" fill="rgb(249,222,13)" fg:x="77" fg:w="1"/><text x="6.3514%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::end (1 samples, 0.08%)</title><rect x="6.1807%" y="581" width="0.0792%" height="15" fill="rgb(244,185,38)" fg:x="78" fg:w="1"/><text x="6.4307%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2599%" y="565" width="0.0792%" height="15" fill="rgb(236,202,9)" fg:x="79" fg:w="1"/><text x="6.5099%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.2599%" y="549" width="0.0792%" height="15" fill="rgb(250,229,37)" fg:x="79" fg:w="1"/><text x="6.5099%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.2599%" y="533" width="0.0792%" height="15" fill="rgb(206,174,23)" fg:x="79" fg:w="1"/><text x="6.5099%" y="543.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.3391%" y="565" width="0.0792%" height="15" fill="rgb(211,33,43)" fg:x="80" fg:w="1"/><text x="6.5891%" y="575.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="6.3391%" y="549" width="0.0792%" height="15" fill="rgb(245,58,50)" fg:x="80" fg:w="1"/><text x="6.5891%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.3391%" y="533" width="0.0792%" height="15" fill="rgb(244,68,36)" fg:x="80" fg:w="1"/><text x="6.5891%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5769%" y="469" width="0.0792%" height="15" fill="rgb(232,229,15)" fg:x="83" fg:w="1"/><text x="6.8269%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.5769%" y="453" width="0.0792%" height="15" fill="rgb(254,30,23)" fg:x="83" fg:w="1"/><text x="6.8269%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.5769%" y="437" width="0.0792%" height="15" fill="rgb(235,160,14)" fg:x="83" fg:w="1"/><text x="6.8269%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6561%" y="437" width="0.0792%" height="15" fill="rgb(212,155,44)" fg:x="84" fg:w="1"/><text x="6.9061%" y="447.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="6.6561%" y="421" width="0.0792%" height="15" fill="rgb(226,2,50)" fg:x="84" fg:w="1"/><text x="6.9061%" y="431.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.6561%" y="405" width="0.0792%" height="15" fill="rgb(234,177,6)" fg:x="84" fg:w="1"/><text x="6.9061%" y="415.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="6.6561%" y="453" width="0.1585%" height="15" fill="rgb(217,24,9)" fg:x="84" fg:w="2"/><text x="6.9061%" y="463.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="6.7353%" y="437" width="0.0792%" height="15" fill="rgb(220,13,46)" fg:x="85" fg:w="1"/><text x="6.9853%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="6.4976%" y="549" width="0.3962%" height="15" fill="rgb(239,221,27)" fg:x="82" fg:w="5"/><text x="6.7476%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (5 samples, 0.40%)</title><rect x="6.4976%" y="533" width="0.3962%" height="15" fill="rgb(222,198,25)" fg:x="82" fg:w="5"/><text x="6.7476%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (5 samples, 0.40%)</title><rect x="6.4976%" y="517" width="0.3962%" height="15" fill="rgb(211,99,13)" fg:x="82" fg:w="5"/><text x="6.7476%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (4 samples, 0.32%)</title><rect x="6.5769%" y="501" width="0.3170%" height="15" fill="rgb(232,111,31)" fg:x="83" fg:w="4"/><text x="6.8269%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="6.5769%" y="485" width="0.3170%" height="15" fill="rgb(245,82,37)" fg:x="83" fg:w="4"/><text x="6.8269%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="6.6561%" y="469" width="0.2377%" height="15" fill="rgb(227,149,46)" fg:x="84" fg:w="3"/><text x="6.9061%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8146%" y="453" width="0.0792%" height="15" fill="rgb(218,36,50)" fg:x="86" fg:w="1"/><text x="7.0646%" y="463.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 0.71%)</title><rect x="6.2599%" y="581" width="0.7132%" height="15" fill="rgb(226,80,48)" fg:x="79" fg:w="9"/><text x="6.5099%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (7 samples, 0.55%)</title><rect x="6.4184%" y="565" width="0.5547%" height="15" fill="rgb(238,224,15)" fg:x="81" fg:w="7"/><text x="6.6684%" y="575.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="6.8938%" y="549" width="0.0792%" height="15" fill="rgb(241,136,10)" fg:x="87" fg:w="1"/><text x="7.1438%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (11 samples, 0.87%)</title><rect x="6.1807%" y="597" width="0.8716%" height="15" fill="rgb(208,32,45)" fg:x="78" fg:w="11"/><text x="6.4307%" y="607.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="6.9731%" y="581" width="0.0792%" height="15" fill="rgb(207,135,9)" fg:x="88" fg:w="1"/><text x="7.2231%" y="591.50"></text></g><g><title>engine::session::Session::flush (35 samples, 2.77%)</title><rect x="4.3582%" y="725" width="2.7734%" height="15" fill="rgb(206,86,44)" fg:x="55" fg:w="35"/><text x="4.6082%" y="735.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (35 samples, 2.77%)</title><rect x="4.3582%" y="709" width="2.7734%" height="15" fill="rgb(245,177,15)" fg:x="55" fg:w="35"/><text x="4.6082%" y="719.50">en..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (31 samples, 2.46%)</title><rect x="4.6751%" y="693" width="2.4564%" height="15" fill="rgb(206,64,50)" fg:x="59" fg:w="31"/><text x="4.9251%" y="703.50">en..</text></g><g><title>engine::session::SavesEntities::check_for_changes (31 samples, 2.46%)</title><rect x="4.6751%" y="677" width="2.4564%" height="15" fill="rgb(234,36,40)" fg:x="59" fg:w="31"/><text x="4.9251%" y="687.50">en..</text></g><g><title>kernel::model::any_entity_changes (14 samples, 1.11%)</title><rect x="6.0222%" y="661" width="1.1094%" height="15" fill="rgb(213,64,8)" fg:x="76" fg:w="14"/><text x="6.2722%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (13 samples, 1.03%)</title><rect x="6.1014%" y="645" width="1.0301%" height="15" fill="rgb(210,75,36)" fg:x="77" fg:w="13"/><text x="6.3514%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (13 samples, 1.03%)</title><rect x="6.1014%" y="629" width="1.0301%" height="15" fill="rgb(229,88,21)" fg:x="77" fg:w="13"/><text x="6.3514%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (13 samples, 1.03%)</title><rect x="6.1014%" y="613" width="1.0301%" height="15" fill="rgb(252,204,47)" fg:x="77" fg:w="13"/><text x="6.3514%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="7.0523%" y="597" width="0.0792%" height="15" fill="rgb(208,77,27)" fg:x="89" fg:w="1"/><text x="7.3023%" y="607.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="7.1315%" y="725" width="0.0792%" height="15" fill="rgb(221,76,26)" fg:x="90" fg:w="1"/><text x="7.3815%" y="735.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="7.1315%" y="709" width="0.0792%" height="15" fill="rgb(225,139,18)" fg:x="90" fg:w="1"/><text x="7.3815%" y="719.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.1315%" y="693" width="0.0792%" height="15" fill="rgb(230,137,11)" fg:x="90" fg:w="1"/><text x="7.3815%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="7.2108%" y="645" width="0.0792%" height="15" fill="rgb(212,28,1)" fg:x="91" fg:w="1"/><text x="7.4608%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="7.2108%" y="629" width="0.0792%" height="15" fill="rgb(248,164,17)" fg:x="91" fg:w="1"/><text x="7.4608%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="7.2108%" y="613" width="0.0792%" height="15" fill="rgb(222,171,42)" fg:x="91" fg:w="1"/><text x="7.4608%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2108%" y="597" width="0.0792%" height="15" fill="rgb(243,84,45)" fg:x="91" fg:w="1"/><text x="7.4608%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2108%" y="581" width="0.0792%" height="15" fill="rgb(252,49,23)" fg:x="91" fg:w="1"/><text x="7.4608%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2108%" y="565" width="0.0792%" height="15" fill="rgb(215,19,7)" fg:x="91" fg:w="1"/><text x="7.4608%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="7.2108%" y="549" width="0.0792%" height="15" fill="rgb(238,81,41)" fg:x="91" fg:w="1"/><text x="7.4608%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2108%" y="533" width="0.0792%" height="15" fill="rgb(210,199,37)" fg:x="91" fg:w="1"/><text x="7.4608%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.2108%" y="517" width="0.0792%" height="15" fill="rgb(244,192,49)" fg:x="91" fg:w="1"/><text x="7.4608%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.2108%" y="501" width="0.0792%" height="15" fill="rgb(226,211,11)" fg:x="91" fg:w="1"/><text x="7.4608%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.2108%" y="485" width="0.0792%" height="15" fill="rgb(236,162,54)" fg:x="91" fg:w="1"/><text x="7.4608%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.2108%" y="469" width="0.0792%" height="15" fill="rgb(220,229,9)" fg:x="91" fg:w="1"/><text x="7.4608%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2108%" y="453" width="0.0792%" height="15" fill="rgb(250,87,22)" fg:x="91" fg:w="1"/><text x="7.4608%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.2108%" y="437" width="0.0792%" height="15" fill="rgb(239,43,17)" fg:x="91" fg:w="1"/><text x="7.4608%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.2108%" y="421" width="0.0792%" height="15" fill="rgb(231,177,25)" fg:x="91" fg:w="1"/><text x="7.4608%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.2108%" y="405" width="0.0792%" height="15" fill="rgb(219,179,1)" fg:x="91" fg:w="1"/><text x="7.4608%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.2108%" y="389" width="0.0792%" height="15" fill="rgb(238,219,53)" fg:x="91" fg:w="1"/><text x="7.4608%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.2108%" y="373" width="0.0792%" height="15" fill="rgb(232,167,36)" fg:x="91" fg:w="1"/><text x="7.4608%" y="383.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.2108%" y="357" width="0.0792%" height="15" fill="rgb(244,19,51)" fg:x="91" fg:w="1"/><text x="7.4608%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2900%" y="597" width="0.0792%" height="15" fill="rgb(224,6,22)" fg:x="92" fg:w="1"/><text x="7.5400%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="7.2900%" y="581" width="0.0792%" height="15" fill="rgb(224,145,5)" fg:x="92" fg:w="1"/><text x="7.5400%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2900%" y="565" width="0.0792%" height="15" fill="rgb(234,130,49)" fg:x="92" fg:w="1"/><text x="7.5400%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="7.2900%" y="549" width="0.0792%" height="15" fill="rgb(254,6,2)" fg:x="92" fg:w="1"/><text x="7.5400%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.2900%" y="533" width="0.0792%" height="15" fill="rgb(208,96,46)" fg:x="92" fg:w="1"/><text x="7.5400%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="7.2900%" y="517" width="0.0792%" height="15" fill="rgb(239,3,39)" fg:x="92" fg:w="1"/><text x="7.5400%" y="527.50"></text></g><g><title>plugins_core::build::Build::holding (3 samples, 0.24%)</title><rect x="7.2108%" y="725" width="0.2377%" height="15" fill="rgb(233,210,1)" fg:x="91" fg:w="3"/><text x="7.4608%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (3 samples, 0.24%)</title><rect x="7.2108%" y="709" width="0.2377%" height="15" fill="rgb(244,137,37)" fg:x="91" fg:w="3"/><text x="7.4608%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="7.2108%" y="693" width="0.2377%" height="15" fill="rgb(240,136,2)" fg:x="91" fg:w="3"/><text x="7.4608%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="7.2108%" y="677" width="0.2377%" height="15" fill="rgb(239,18,37)" fg:x="91" fg:w="3"/><text x="7.4608%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="7.2108%" y="661" width="0.2377%" height="15" fill="rgb(218,185,22)" fg:x="91" fg:w="3"/><text x="7.4608%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="7.2900%" y="645" width="0.1585%" height="15" fill="rgb(225,218,4)" fg:x="92" fg:w="2"/><text x="7.5400%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="7.2900%" y="629" width="0.1585%" height="15" fill="rgb(230,182,32)" fg:x="92" fg:w="2"/><text x="7.5400%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="7.2900%" y="613" width="0.1585%" height="15" fill="rgb(242,56,43)" fg:x="92" fg:w="2"/><text x="7.5400%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3693%" y="597" width="0.0792%" height="15" fill="rgb(233,99,24)" fg:x="93" fg:w="1"/><text x="7.6193%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3693%" y="581" width="0.0792%" height="15" fill="rgb(234,209,42)" fg:x="93" fg:w="1"/><text x="7.6193%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3693%" y="565" width="0.0792%" height="15" fill="rgb(227,7,12)" fg:x="93" fg:w="1"/><text x="7.6193%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3693%" y="549" width="0.0792%" height="15" fill="rgb(245,203,43)" fg:x="93" fg:w="1"/><text x="7.6193%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.3693%" y="533" width="0.0792%" height="15" fill="rgb(238,205,33)" fg:x="93" fg:w="1"/><text x="7.6193%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3693%" y="517" width="0.0792%" height="15" fill="rgb(231,56,7)" fg:x="93" fg:w="1"/><text x="7.6193%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="7.3693%" y="501" width="0.0792%" height="15" fill="rgb(244,186,29)" fg:x="93" fg:w="1"/><text x="7.6193%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.3693%" y="485" width="0.0792%" height="15" fill="rgb(234,111,31)" fg:x="93" fg:w="1"/><text x="7.6193%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="7.3693%" y="469" width="0.0792%" height="15" fill="rgb(241,149,10)" fg:x="93" fg:w="1"/><text x="7.6193%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="7.4485%" y="549" width="0.1585%" height="15" fill="rgb(249,206,44)" fg:x="94" fg:w="2"/><text x="7.6985%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.5277%" y="533" width="0.0792%" height="15" fill="rgb(251,153,30)" fg:x="95" fg:w="1"/><text x="7.7777%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="7.4485%" y="613" width="0.2377%" height="15" fill="rgb(239,152,38)" fg:x="94" fg:w="3"/><text x="7.6985%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="7.4485%" y="597" width="0.2377%" height="15" fill="rgb(249,139,47)" fg:x="94" fg:w="3"/><text x="7.6985%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="7.4485%" y="581" width="0.2377%" height="15" fill="rgb(244,64,35)" fg:x="94" fg:w="3"/><text x="7.6985%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="7.4485%" y="565" width="0.2377%" height="15" fill="rgb(216,46,15)" fg:x="94" fg:w="3"/><text x="7.6985%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6070%" y="549" width="0.0792%" height="15" fill="rgb(250,74,19)" fg:x="96" fg:w="1"/><text x="7.8570%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="7.6070%" y="533" width="0.0792%" height="15" fill="rgb(249,42,33)" fg:x="96" fg:w="1"/><text x="7.8570%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="7.6070%" y="517" width="0.0792%" height="15" fill="rgb(242,149,17)" fg:x="96" fg:w="1"/><text x="7.8570%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="7.6070%" y="501" width="0.0792%" height="15" fill="rgb(244,29,21)" fg:x="96" fg:w="1"/><text x="7.8570%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="7.6070%" y="485" width="0.0792%" height="15" fill="rgb(220,130,37)" fg:x="96" fg:w="1"/><text x="7.8570%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6070%" y="469" width="0.0792%" height="15" fill="rgb(211,67,2)" fg:x="96" fg:w="1"/><text x="7.8570%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="7.6070%" y="453" width="0.0792%" height="15" fill="rgb(235,68,52)" fg:x="96" fg:w="1"/><text x="7.8570%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="7.6070%" y="437" width="0.0792%" height="15" fill="rgb(246,142,3)" fg:x="96" fg:w="1"/><text x="7.8570%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="7.6070%" y="421" width="0.0792%" height="15" fill="rgb(241,25,7)" fg:x="96" fg:w="1"/><text x="7.8570%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="7.6070%" y="405" width="0.0792%" height="15" fill="rgb(242,119,39)" fg:x="96" fg:w="1"/><text x="7.8570%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="7.6070%" y="389" width="0.0792%" height="15" fill="rgb(241,98,45)" fg:x="96" fg:w="1"/><text x="7.8570%" y="399.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="7.6070%" y="373" width="0.0792%" height="15" fill="rgb(254,28,30)" fg:x="96" fg:w="1"/><text x="7.8570%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="7.6862%" y="549" width="0.0792%" height="15" fill="rgb(241,142,54)" fg:x="97" fg:w="1"/><text x="7.9362%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="7.6862%" y="581" width="0.1585%" height="15" fill="rgb(222,85,15)" fg:x="97" fg:w="2"/><text x="7.9362%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="7.6862%" y="565" width="0.1585%" height="15" fill="rgb(210,85,47)" fg:x="97" fg:w="2"/><text x="7.9362%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="7.7655%" y="549" width="0.0792%" height="15" fill="rgb(224,206,25)" fg:x="98" fg:w="1"/><text x="8.0155%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="7.7655%" y="533" width="0.0792%" height="15" fill="rgb(243,201,19)" fg:x="98" fg:w="1"/><text x="8.0155%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="7.7655%" y="517" width="0.0792%" height="15" fill="rgb(236,59,4)" fg:x="98" fg:w="1"/><text x="8.0155%" y="527.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (6 samples, 0.48%)</title><rect x="7.4485%" y="677" width="0.4754%" height="15" fill="rgb(254,179,45)" fg:x="94" fg:w="6"/><text x="7.6985%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (6 samples, 0.48%)</title><rect x="7.4485%" y="661" width="0.4754%" height="15" fill="rgb(226,14,10)" fg:x="94" fg:w="6"/><text x="7.6985%" y="671.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="7.4485%" y="645" width="0.4754%" height="15" fill="rgb(244,27,41)" fg:x="94" fg:w="6"/><text x="7.6985%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="7.4485%" y="629" width="0.4754%" height="15" fill="rgb(235,35,32)" fg:x="94" fg:w="6"/><text x="7.6985%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (3 samples, 0.24%)</title><rect x="7.6862%" y="613" width="0.2377%" height="15" fill="rgb(218,68,31)" fg:x="97" fg:w="3"/><text x="7.9362%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="7.6862%" y="597" width="0.2377%" height="15" fill="rgb(207,120,37)" fg:x="97" fg:w="3"/><text x="7.9362%" y="607.50"></text></g><g><title>serde_json::value::de::MapDeserializer::new (1 samples, 0.08%)</title><rect x="7.8447%" y="581" width="0.0792%" height="15" fill="rgb(227,98,0)" fg:x="99" fg:w="1"/><text x="8.0947%" y="591.50"></text></g><g><title>plugins_core::build::Build::into_entry (7 samples, 0.55%)</title><rect x="7.4485%" y="725" width="0.5547%" height="15" fill="rgb(207,7,3)" fg:x="94" fg:w="7"/><text x="7.6985%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (7 samples, 0.55%)</title><rect x="7.4485%" y="709" width="0.5547%" height="15" fill="rgb(206,98,19)" fg:x="94" fg:w="7"/><text x="7.6985%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (7 samples, 0.55%)</title><rect x="7.4485%" y="693" width="0.5547%" height="15" fill="rgb(217,5,26)" fg:x="94" fg:w="7"/><text x="7.6985%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="7.9239%" y="677" width="0.0792%" height="15" fill="rgb(235,190,38)" fg:x="100" fg:w="1"/><text x="8.1739%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (1 samples, 0.08%)</title><rect x="7.9239%" y="661" width="0.0792%" height="15" fill="rgb(247,86,24)" fg:x="100" fg:w="1"/><text x="8.1739%" y="671.50"></text></g><g><title>kernel::model::entry::Entry::scope_mut (1 samples, 0.08%)</title><rect x="8.0032%" y="693" width="0.0792%" height="15" fill="rgb(205,101,16)" fg:x="101" fg:w="1"/><text x="8.2532%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="8.0824%" y="645" width="0.0792%" height="15" fill="rgb(246,168,33)" fg:x="102" fg:w="1"/><text x="8.3324%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="8.0824%" y="629" width="0.0792%" height="15" fill="rgb(231,114,1)" fg:x="102" fg:w="1"/><text x="8.3324%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="8.0824%" y="613" width="0.0792%" height="15" fill="rgb(207,184,53)" fg:x="102" fg:w="1"/><text x="8.3324%" y="623.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="8.0824%" y="597" width="0.0792%" height="15" fill="rgb(224,95,51)" fg:x="102" fg:w="1"/><text x="8.3324%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1616%" y="597" width="0.0792%" height="15" fill="rgb(212,188,45)" fg:x="103" fg:w="1"/><text x="8.4116%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1616%" y="581" width="0.0792%" height="15" fill="rgb(223,154,38)" fg:x="103" fg:w="1"/><text x="8.4116%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="8.1616%" y="565" width="0.0792%" height="15" fill="rgb(251,22,52)" fg:x="103" fg:w="1"/><text x="8.4116%" y="575.50"></text></g><g><title>plugins_core::build::Build::occupying (4 samples, 0.32%)</title><rect x="8.0032%" y="725" width="0.3170%" height="15" fill="rgb(229,209,22)" fg:x="101" fg:w="4"/><text x="8.2532%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (4 samples, 0.32%)</title><rect x="8.0032%" y="709" width="0.3170%" height="15" fill="rgb(234,138,34)" fg:x="101" fg:w="4"/><text x="8.2532%" y="719.50"></text></g><g><title>plugins_core::moving::model::Occupyable::start_occupying (3 samples, 0.24%)</title><rect x="8.0824%" y="693" width="0.2377%" height="15" fill="rgb(212,95,11)" fg:x="102" fg:w="3"/><text x="8.3324%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="8.0824%" y="677" width="0.2377%" height="15" fill="rgb(240,179,47)" fg:x="102" fg:w="3"/><text x="8.3324%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="8.0824%" y="661" width="0.2377%" height="15" fill="rgb(240,163,11)" fg:x="102" fg:w="3"/><text x="8.3324%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="8.1616%" y="645" width="0.1585%" height="15" fill="rgb(236,37,12)" fg:x="103" fg:w="2"/><text x="8.4116%" y="655.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="8.1616%" y="629" width="0.1585%" height="15" fill="rgb(232,164,16)" fg:x="103" fg:w="2"/><text x="8.4116%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="8.1616%" y="613" width="0.1585%" height="15" fill="rgb(244,205,15)" fg:x="103" fg:w="2"/><text x="8.4116%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.2409%" y="597" width="0.0792%" height="15" fill="rgb(223,117,47)" fg:x="104" fg:w="1"/><text x="8.4909%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2409%" y="581" width="0.0792%" height="15" fill="rgb(244,107,35)" fg:x="104" fg:w="1"/><text x="8.4909%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.2409%" y="565" width="0.0792%" height="15" fill="rgb(205,140,8)" fg:x="104" fg:w="1"/><text x="8.4909%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2409%" y="549" width="0.0792%" height="15" fill="rgb(228,84,46)" fg:x="104" fg:w="1"/><text x="8.4909%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="8.2409%" y="533" width="0.0792%" height="15" fill="rgb(254,188,9)" fg:x="104" fg:w="1"/><text x="8.4909%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2409%" y="517" width="0.0792%" height="15" fill="rgb(206,112,54)" fg:x="104" fg:w="1"/><text x="8.4909%" y="527.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="8.2409%" y="501" width="0.0792%" height="15" fill="rgb(216,84,49)" fg:x="104" fg:w="1"/><text x="8.4909%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="8.2409%" y="485" width="0.0792%" height="15" fill="rgb(214,194,35)" fg:x="104" fg:w="1"/><text x="8.4909%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.2409%" y="469" width="0.0792%" height="15" fill="rgb(249,28,3)" fg:x="104" fg:w="1"/><text x="8.4909%" y="479.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::add_username_to_key (1 samples, 0.08%)</title><rect x="8.3201%" y="709" width="0.0792%" height="15" fill="rgb(222,56,52)" fg:x="105" fg:w="1"/><text x="8.5701%" y="719.50"></text></g><g><title>engine::users::model::add_username_to_key (1 samples, 0.08%)</title><rect x="8.3201%" y="693" width="0.0792%" height="15" fill="rgb(245,217,50)" fg:x="105" fg:w="1"/><text x="8.5701%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="8.3201%" y="677" width="0.0792%" height="15" fill="rgb(213,201,24)" fg:x="105" fg:w="1"/><text x="8.5701%" y="687.50"></text></g><g><title>engine::users::model::_::&lt;impl serde::ser::Serialize for engine::users::model::Usernames&gt;::serialize (1 samples, 0.08%)</title><rect x="8.3201%" y="661" width="0.0792%" height="15" fill="rgb(248,116,28)" fg:x="105" fg:w="1"/><text x="8.5701%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="8.3201%" y="645" width="0.0792%" height="15" fill="rgb(219,72,43)" fg:x="105" fg:w="1"/><text x="8.5701%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="8.3201%" y="629" width="0.0792%" height="15" fill="rgb(209,138,14)" fg:x="105" fg:w="1"/><text x="8.5701%" y="639.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.3201%" y="613" width="0.0792%" height="15" fill="rgb(222,18,33)" fg:x="105" fg:w="1"/><text x="8.5701%" y="623.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (58 samples, 4.60%)</title><rect x="3.8827%" y="741" width="4.5959%" height="15" fill="rgb(213,199,7)" fg:x="49" fg:w="58"/><text x="4.1327%" y="751.50">plugi..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="8.3201%" y="725" width="0.1585%" height="15" fill="rgb(250,110,10)" fg:x="105" fg:w="2"/><text x="8.5701%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="8.3994%" y="709" width="0.0792%" height="15" fill="rgb(248,123,6)" fg:x="106" fg:w="1"/><text x="8.6494%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="8.3994%" y="693" width="0.0792%" height="15" fill="rgb(206,91,31)" fg:x="106" fg:w="1"/><text x="8.6494%" y="703.50"></text></g><g><title>plugins_core::build::BuildSurroundings::entity (1 samples, 0.08%)</title><rect x="8.4786%" y="741" width="0.0792%" height="15" fill="rgb(211,154,13)" fg:x="107" fg:w="1"/><text x="8.7286%" y="751.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="8.4786%" y="725" width="0.0792%" height="15" fill="rgb(225,148,7)" fg:x="107" fg:w="1"/><text x="8.7286%" y="735.50"></text></g><g><title>kernel::model::entity::Entity::new_blank (1 samples, 0.08%)</title><rect x="8.4786%" y="709" width="0.0792%" height="15" fill="rgb(220,160,43)" fg:x="107" fg:w="1"/><text x="8.7286%" y="719.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_key (1 samples, 0.08%)</title><rect x="8.4786%" y="693" width="0.0792%" height="15" fill="rgb(213,52,39)" fg:x="107" fg:w="1"/><text x="8.7286%" y="703.50"></text></g><g><title>&lt;engine::sequences::DeterministicKeys as engine::sequences::Sequence&lt;kernel::model::base::EntityKey&gt;&gt;::following (1 samples, 0.08%)</title><rect x="8.4786%" y="677" width="0.0792%" height="15" fill="rgb(243,137,7)" fg:x="107" fg:w="1"/><text x="8.7286%" y="687.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.4786%" y="661" width="0.0792%" height="15" fill="rgb(230,79,13)" fg:x="107" fg:w="1"/><text x="8.7286%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.4786%" y="645" width="0.0792%" height="15" fill="rgb(247,105,23)" fg:x="107" fg:w="1"/><text x="8.7286%" y="655.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.4786%" y="629" width="0.0792%" height="15" fill="rgb(223,179,41)" fg:x="107" fg:w="1"/><text x="8.7286%" y="639.50"></text></g><g><title>plugins_core::build::BuildSurroundings::hands (1 samples, 0.08%)</title><rect x="8.5578%" y="741" width="0.0792%" height="15" fill="rgb(218,9,34)" fg:x="108" fg:w="1"/><text x="8.8078%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.5578%" y="725" width="0.0792%" height="15" fill="rgb(222,106,8)" fg:x="108" fg:w="1"/><text x="8.8078%" y="735.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.5578%" y="709" width="0.0792%" height="15" fill="rgb(211,220,0)" fg:x="108" fg:w="1"/><text x="8.8078%" y="719.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="8.5578%" y="693" width="0.0792%" height="15" fill="rgb(229,52,16)" fg:x="108" fg:w="1"/><text x="8.8078%" y="703.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (83 samples, 6.58%)</title><rect x="2.1395%" y="757" width="6.5769%" height="15" fill="rgb(212,155,18)" fg:x="27" fg:w="83"/><text x="2.3895%" y="767.50">&lt;tests::H..</text></g><g><title>plugins_core::build::BuildSurroundings::make (1 samples, 0.08%)</title><rect x="8.6371%" y="741" width="0.0792%" height="15" fill="rgb(242,21,14)" fg:x="109" fg:w="1"/><text x="8.8871%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (1 samples, 0.08%)</title><rect x="8.6371%" y="725" width="0.0792%" height="15" fill="rgb(222,19,48)" fg:x="109" fg:w="1"/><text x="8.8871%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="8.6371%" y="709" width="0.0792%" height="15" fill="rgb(232,45,27)" fg:x="109" fg:w="1"/><text x="8.8871%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="8.6371%" y="693" width="0.0792%" height="15" fill="rgb(249,103,42)" fg:x="109" fg:w="1"/><text x="8.8871%" y="703.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="8.7163%" y="741" width="0.0792%" height="15" fill="rgb(246,81,33)" fg:x="110" fg:w="1"/><text x="8.9663%" y="751.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="8.7163%" y="725" width="0.0792%" height="15" fill="rgb(252,33,42)" fg:x="110" fg:w="1"/><text x="8.9663%" y="735.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.7163%" y="709" width="0.0792%" height="15" fill="rgb(209,212,41)" fg:x="110" fg:w="1"/><text x="8.9663%" y="719.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="8.7163%" y="693" width="0.0792%" height="15" fill="rgb(207,154,6)" fg:x="110" fg:w="1"/><text x="8.9663%" y="703.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="8.7163%" y="677" width="0.0792%" height="15" fill="rgb(223,64,47)" fg:x="110" fg:w="1"/><text x="8.9663%" y="687.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal (1 samples, 0.08%)</title><rect x="8.7163%" y="661" width="0.0792%" height="15" fill="rgb(211,161,38)" fg:x="110" fg:w="1"/><text x="8.9663%" y="671.50"></text></g><g><title>&lt;core::time::Duration as core::fmt::Debug&gt;::fmt::fmt_decimal::{{closure}} (1 samples, 0.08%)</title><rect x="8.7163%" y="645" width="0.0792%" height="15" fill="rgb(219,138,40)" fg:x="110" fg:w="1"/><text x="8.9663%" y="655.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="8.7163%" y="629" width="0.0792%" height="15" fill="rgb(241,228,46)" fg:x="110" fg:w="1"/><text x="8.9663%" y="639.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="8.7163%" y="613" width="0.0792%" height="15" fill="rgb(223,209,38)" fg:x="110" fg:w="1"/><text x="8.9663%" y="623.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.08%)</title><rect x="8.7163%" y="597" width="0.0792%" height="15" fill="rgb(236,164,45)" fg:x="110" fg:w="1"/><text x="8.9663%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="8.7956%" y="725" width="0.2377%" height="15" fill="rgb(231,15,5)" fg:x="111" fg:w="3"/><text x="9.0456%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="8.9540%" y="709" width="0.0792%" height="15" fill="rgb(252,35,15)" fg:x="113" fg:w="1"/><text x="9.2040%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="8.9540%" y="693" width="0.0792%" height="15" fill="rgb(248,181,18)" fg:x="113" fg:w="1"/><text x="9.2040%" y="703.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="8.9540%" y="677" width="0.0792%" height="15" fill="rgb(233,39,42)" fg:x="113" fg:w="1"/><text x="9.2040%" y="687.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="9.0333%" y="725" width="0.0792%" height="15" fill="rgb(238,110,33)" fg:x="114" fg:w="1"/><text x="9.2833%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.08%)</title><rect x="9.0333%" y="709" width="0.0792%" height="15" fill="rgb(233,195,10)" fg:x="114" fg:w="1"/><text x="9.2833%" y="719.50"></text></g><g><title>engine::session::SavesEntities::save_entity (1 samples, 0.08%)</title><rect x="9.0333%" y="693" width="0.0792%" height="15" fill="rgb(254,105,3)" fg:x="114" fg:w="1"/><text x="9.2833%" y="703.50"></text></g><g><title>kernel::model::base::EntityKey::new (1 samples, 0.08%)</title><rect x="9.0333%" y="677" width="0.0792%" height="15" fill="rgb(221,225,9)" fg:x="114" fg:w="1"/><text x="9.2833%" y="687.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="9.1125%" y="725" width="0.0792%" height="15" fill="rgb(224,227,45)" fg:x="115" fg:w="1"/><text x="9.3625%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="9.1125%" y="709" width="0.0792%" height="15" fill="rgb(229,198,43)" fg:x="115" fg:w="1"/><text x="9.3625%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="9.1125%" y="693" width="0.0792%" height="15" fill="rgb(206,209,35)" fg:x="115" fg:w="1"/><text x="9.3625%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="9.1125%" y="677" width="0.0792%" height="15" fill="rgb(245,195,53)" fg:x="115" fg:w="1"/><text x="9.3625%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.16%)</title><rect x="9.1918%" y="677" width="0.1585%" height="15" fill="rgb(240,92,26)" fg:x="116" fg:w="2"/><text x="9.4418%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="9.3502%" y="677" width="0.0792%" height="15" fill="rgb(207,40,23)" fg:x="118" fg:w="1"/><text x="9.6002%" y="687.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.3502%" y="661" width="0.0792%" height="15" fill="rgb(223,111,35)" fg:x="118" fg:w="1"/><text x="9.6002%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.3502%" y="645" width="0.0792%" height="15" fill="rgb(229,147,28)" fg:x="118" fg:w="1"/><text x="9.6002%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.5087%" y="661" width="0.0792%" height="15" fill="rgb(211,29,28)" fg:x="120" fg:w="1"/><text x="9.7587%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.5087%" y="645" width="0.0792%" height="15" fill="rgb(228,72,33)" fg:x="120" fg:w="1"/><text x="9.7587%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.5087%" y="629" width="0.0792%" height="15" fill="rgb(205,214,31)" fg:x="120" fg:w="1"/><text x="9.7587%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="9.5087%" y="613" width="0.0792%" height="15" fill="rgb(224,111,15)" fg:x="120" fg:w="1"/><text x="9.7587%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.5880%" y="661" width="0.0792%" height="15" fill="rgb(253,21,26)" fg:x="121" fg:w="1"/><text x="9.8380%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="9.7464%" y="645" width="0.0792%" height="15" fill="rgb(245,139,43)" fg:x="123" fg:w="1"/><text x="9.9964%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7464%" y="629" width="0.0792%" height="15" fill="rgb(252,170,7)" fg:x="123" fg:w="1"/><text x="9.9964%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.7464%" y="613" width="0.0792%" height="15" fill="rgb(231,118,14)" fg:x="123" fg:w="1"/><text x="9.9964%" y="623.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.8257%" y="645" width="0.0792%" height="15" fill="rgb(238,83,0)" fg:x="124" fg:w="1"/><text x="10.0757%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.8257%" y="629" width="0.0792%" height="15" fill="rgb(221,39,39)" fg:x="124" fg:w="1"/><text x="10.0757%" y="639.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9049%" y="629" width="0.0792%" height="15" fill="rgb(222,119,46)" fg:x="125" fg:w="1"/><text x="10.1549%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9049%" y="613" width="0.0792%" height="15" fill="rgb(222,165,49)" fg:x="125" fg:w="1"/><text x="10.1549%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="9.9049%" y="597" width="0.0792%" height="15" fill="rgb(219,113,52)" fg:x="125" fg:w="1"/><text x="10.1549%" y="607.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="9.9049%" y="645" width="0.1585%" height="15" fill="rgb(214,7,15)" fg:x="125" fg:w="2"/><text x="10.1549%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9842%" y="629" width="0.0792%" height="15" fill="rgb(235,32,4)" fg:x="126" fg:w="1"/><text x="10.2342%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9842%" y="613" width="0.0792%" height="15" fill="rgb(238,90,54)" fg:x="126" fg:w="1"/><text x="10.2342%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="9.9842%" y="597" width="0.0792%" height="15" fill="rgb(213,208,19)" fg:x="126" fg:w="1"/><text x="10.2342%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="9.9842%" y="581" width="0.0792%" height="15" fill="rgb(233,156,4)" fg:x="126" fg:w="1"/><text x="10.2342%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="9.9842%" y="565" width="0.0792%" height="15" fill="rgb(207,194,5)" fg:x="126" fg:w="1"/><text x="10.2342%" y="575.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (6 samples, 0.48%)</title><rect x="9.6672%" y="661" width="0.4754%" height="15" fill="rgb(206,111,30)" fg:x="122" fg:w="6"/><text x="9.9172%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.0634%" y="645" width="0.0792%" height="15" fill="rgb(243,70,54)" fg:x="127" fg:w="1"/><text x="10.3134%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.0634%" y="629" width="0.0792%" height="15" fill="rgb(242,28,8)" fg:x="127" fg:w="1"/><text x="10.3134%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.87%)</title><rect x="9.4295%" y="677" width="0.8716%" height="15" fill="rgb(219,106,18)" fg:x="119" fg:w="11"/><text x="9.6795%" y="687.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="10.1426%" y="661" width="0.1585%" height="15" fill="rgb(244,222,10)" fg:x="128" fg:w="2"/><text x="10.3926%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (2 samples, 0.16%)</title><rect x="10.1426%" y="645" width="0.1585%" height="15" fill="rgb(236,179,52)" fg:x="128" fg:w="2"/><text x="10.3926%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.2219%" y="629" width="0.0792%" height="15" fill="rgb(213,23,39)" fg:x="129" fg:w="1"/><text x="10.4719%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (15 samples, 1.19%)</title><rect x="9.1918%" y="693" width="1.1886%" height="15" fill="rgb(238,48,10)" fg:x="116" fg:w="15"/><text x="9.4418%" y="703.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="10.3011%" y="677" width="0.0792%" height="15" fill="rgb(251,196,23)" fg:x="130" fg:w="1"/><text x="10.5511%" y="687.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="10.3011%" y="661" width="0.0792%" height="15" fill="rgb(250,152,24)" fg:x="130" fg:w="1"/><text x="10.5511%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="10.3011%" y="645" width="0.0792%" height="15" fill="rgb(209,150,17)" fg:x="130" fg:w="1"/><text x="10.5511%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="10.3011%" y="629" width="0.0792%" height="15" fill="rgb(234,202,34)" fg:x="130" fg:w="1"/><text x="10.5511%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.3803%" y="661" width="0.0792%" height="15" fill="rgb(253,148,53)" fg:x="131" fg:w="1"/><text x="10.6303%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="10.3803%" y="693" width="0.1585%" height="15" fill="rgb(218,129,16)" fg:x="131" fg:w="2"/><text x="10.6303%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="10.3803%" y="677" width="0.1585%" height="15" fill="rgb(216,85,19)" fg:x="131" fg:w="2"/><text x="10.6303%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.4596%" y="661" width="0.0792%" height="15" fill="rgb(235,228,7)" fg:x="132" fg:w="1"/><text x="10.7096%" y="671.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.4596%" y="645" width="0.0792%" height="15" fill="rgb(245,175,0)" fg:x="132" fg:w="1"/><text x="10.7096%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.6181%" y="581" width="0.0792%" height="15" fill="rgb(208,168,36)" fg:x="134" fg:w="1"/><text x="10.8681%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="10.6973%" y="581" width="0.0792%" height="15" fill="rgb(246,171,24)" fg:x="135" fg:w="1"/><text x="10.9473%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.5388%" y="661" width="0.3170%" height="15" fill="rgb(215,142,24)" fg:x="133" fg:w="4"/><text x="10.7888%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.32%)</title><rect x="10.5388%" y="645" width="0.3170%" height="15" fill="rgb(250,187,7)" fg:x="133" fg:w="4"/><text x="10.7888%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.5388%" y="629" width="0.3170%" height="15" fill="rgb(228,66,33)" fg:x="133" fg:w="4"/><text x="10.7888%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.5388%" y="613" width="0.3170%" height="15" fill="rgb(234,215,21)" fg:x="133" fg:w="4"/><text x="10.7888%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (4 samples, 0.32%)</title><rect x="10.5388%" y="597" width="0.3170%" height="15" fill="rgb(222,191,20)" fg:x="133" fg:w="4"/><text x="10.7888%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7765%" y="581" width="0.0792%" height="15" fill="rgb(245,79,54)" fg:x="136" fg:w="1"/><text x="11.0265%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="10.7765%" y="565" width="0.0792%" height="15" fill="rgb(240,10,37)" fg:x="136" fg:w="1"/><text x="11.0265%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="10.7765%" y="549" width="0.0792%" height="15" fill="rgb(214,192,32)" fg:x="136" fg:w="1"/><text x="11.0265%" y="559.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (5 samples, 0.40%)</title><rect x="10.5388%" y="677" width="0.3962%" height="15" fill="rgb(209,36,54)" fg:x="133" fg:w="5"/><text x="10.7888%" y="687.50"></text></g><g><title>treediff::diff::diff (1 samples, 0.08%)</title><rect x="10.8558%" y="661" width="0.0792%" height="15" fill="rgb(220,10,11)" fg:x="137" fg:w="1"/><text x="11.1058%" y="671.50"></text></g><g><title>treediff::value::serde_json::&lt;impl treediff::traitdef::Value for serde_json::value::Value&gt;::items (1 samples, 0.08%)</title><rect x="10.8558%" y="645" width="0.0792%" height="15" fill="rgb(221,106,17)" fg:x="137" fg:w="1"/><text x="11.1058%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="10.8558%" y="629" width="0.0792%" height="15" fill="rgb(251,142,44)" fg:x="137" fg:w="1"/><text x="11.1058%" y="639.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="11.0935%" y="645" width="0.0792%" height="15" fill="rgb(238,13,15)" fg:x="140" fg:w="1"/><text x="11.3435%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.0935%" y="629" width="0.0792%" height="15" fill="rgb(208,107,27)" fg:x="140" fg:w="1"/><text x="11.3435%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.0935%" y="613" width="0.0792%" height="15" fill="rgb(205,136,37)" fg:x="140" fg:w="1"/><text x="11.3435%" y="623.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Identity&gt;::serialize (1 samples, 0.08%)</title><rect x="11.1727%" y="645" width="0.0792%" height="15" fill="rgb(250,205,27)" fg:x="141" fg:w="1"/><text x="11.4227%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="11.1727%" y="629" width="0.0792%" height="15" fill="rgb(210,80,43)" fg:x="141" fg:w="1"/><text x="11.4227%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2520%" y="597" width="0.1585%" height="15" fill="rgb(247,160,36)" fg:x="142" fg:w="2"/><text x="11.5020%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="11.2520%" y="581" width="0.1585%" height="15" fill="rgb(234,13,49)" fg:x="142" fg:w="2"/><text x="11.5020%" y="591.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="11.2520%" y="565" width="0.1585%" height="15" fill="rgb(234,122,0)" fg:x="142" fg:w="2"/><text x="11.5020%" y="575.50"></text></g><g><title>serde::ser::Serializer::collect_seq (1 samples, 0.08%)</title><rect x="11.4105%" y="597" width="0.0792%" height="15" fill="rgb(207,146,38)" fg:x="144" fg:w="1"/><text x="11.6605%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.4105%" y="581" width="0.0792%" height="15" fill="rgb(207,177,25)" fg:x="144" fg:w="1"/><text x="11.6605%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.4105%" y="565" width="0.0792%" height="15" fill="rgb(211,178,42)" fg:x="144" fg:w="1"/><text x="11.6605%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4105%" y="549" width="0.0792%" height="15" fill="rgb(230,69,54)" fg:x="144" fg:w="1"/><text x="11.6605%" y="559.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.4105%" y="533" width="0.0792%" height="15" fill="rgb(214,135,41)" fg:x="144" fg:w="1"/><text x="11.6605%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="11.4105%" y="517" width="0.0792%" height="15" fill="rgb(237,67,25)" fg:x="144" fg:w="1"/><text x="11.6605%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="11.2520%" y="613" width="0.4754%" height="15" fill="rgb(222,189,50)" fg:x="142" fg:w="6"/><text x="11.5020%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="11.4897%" y="597" width="0.2377%" height="15" fill="rgb(245,148,34)" fg:x="145" fg:w="3"/><text x="11.7397%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="11.4897%" y="581" width="0.2377%" height="15" fill="rgb(222,29,6)" fg:x="145" fg:w="3"/><text x="11.7397%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="11.4897%" y="565" width="0.2377%" height="15" fill="rgb(221,189,43)" fg:x="145" fg:w="3"/><text x="11.7397%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.6482%" y="549" width="0.0792%" height="15" fill="rgb(207,36,27)" fg:x="147" fg:w="1"/><text x="11.8982%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="11.6482%" y="533" width="0.0792%" height="15" fill="rgb(217,90,24)" fg:x="147" fg:w="1"/><text x="11.8982%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="11.6482%" y="517" width="0.0792%" height="15" fill="rgb(224,66,35)" fg:x="147" fg:w="1"/><text x="11.8982%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.6482%" y="501" width="0.0792%" height="15" fill="rgb(221,13,50)" fg:x="147" fg:w="1"/><text x="11.8982%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (7 samples, 0.55%)</title><rect x="11.2520%" y="629" width="0.5547%" height="15" fill="rgb(236,68,49)" fg:x="142" fg:w="7"/><text x="11.5020%" y="639.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="11.7274%" y="613" width="0.0792%" height="15" fill="rgb(229,146,28)" fg:x="148" fg:w="1"/><text x="11.9774%" y="623.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (12 samples, 0.95%)</title><rect x="10.9350%" y="677" width="0.9509%" height="15" fill="rgb(225,31,38)" fg:x="138" fg:w="12"/><text x="11.1850%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (12 samples, 0.95%)</title><rect x="10.9350%" y="661" width="0.9509%" height="15" fill="rgb(250,208,3)" fg:x="138" fg:w="12"/><text x="11.1850%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (8 samples, 0.63%)</title><rect x="11.2520%" y="645" width="0.6339%" height="15" fill="rgb(246,54,23)" fg:x="142" fg:w="8"/><text x="11.5020%" y="655.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="11.8067%" y="629" width="0.0792%" height="15" fill="rgb(243,76,11)" fg:x="149" fg:w="1"/><text x="12.0567%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="12.0444%" y="533" width="0.0792%" height="15" fill="rgb(245,21,50)" fg:x="152" fg:w="1"/><text x="12.2944%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.0444%" y="517" width="0.0792%" height="15" fill="rgb(228,9,43)" fg:x="152" fg:w="1"/><text x="12.2944%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.0444%" y="501" width="0.0792%" height="15" fill="rgb(208,100,47)" fg:x="152" fg:w="1"/><text x="12.2944%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="12.0444%" y="549" width="0.1585%" height="15" fill="rgb(232,26,8)" fg:x="152" fg:w="2"/><text x="12.2944%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="12.1236%" y="533" width="0.0792%" height="15" fill="rgb(216,166,38)" fg:x="153" fg:w="1"/><text x="12.3736%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1236%" y="517" width="0.0792%" height="15" fill="rgb(251,202,51)" fg:x="153" fg:w="1"/><text x="12.3736%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.1236%" y="501" width="0.0792%" height="15" fill="rgb(254,216,34)" fg:x="153" fg:w="1"/><text x="12.3736%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.1236%" y="485" width="0.0792%" height="15" fill="rgb(251,32,27)" fg:x="153" fg:w="1"/><text x="12.3736%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (4 samples, 0.32%)</title><rect x="11.9651%" y="581" width="0.3170%" height="15" fill="rgb(208,127,28)" fg:x="151" fg:w="4"/><text x="12.2151%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="11.9651%" y="565" width="0.3170%" height="15" fill="rgb(224,137,22)" fg:x="151" fg:w="4"/><text x="12.2151%" y="575.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="12.2029%" y="549" width="0.0792%" height="15" fill="rgb(254,70,32)" fg:x="154" fg:w="1"/><text x="12.4529%" y="559.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.2029%" y="533" width="0.0792%" height="15" fill="rgb(229,75,37)" fg:x="154" fg:w="1"/><text x="12.4529%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.16%)</title><rect x="12.2821%" y="581" width="0.1585%" height="15" fill="rgb(252,64,23)" fg:x="155" fg:w="2"/><text x="12.5321%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.08%)</title><rect x="12.3613%" y="565" width="0.0792%" height="15" fill="rgb(232,162,48)" fg:x="156" fg:w="1"/><text x="12.6113%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="11.8859%" y="613" width="0.6339%" height="15" fill="rgb(246,160,12)" fg:x="150" fg:w="8"/><text x="12.1359%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (7 samples, 0.55%)</title><rect x="11.9651%" y="597" width="0.5547%" height="15" fill="rgb(247,166,0)" fg:x="151" fg:w="7"/><text x="12.2151%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4406%" y="581" width="0.0792%" height="15" fill="rgb(249,219,21)" fg:x="157" fg:w="1"/><text x="12.6906%" y="591.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.4406%" y="565" width="0.0792%" height="15" fill="rgb(205,209,3)" fg:x="157" fg:w="1"/><text x="12.6906%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="12.4406%" y="549" width="0.0792%" height="15" fill="rgb(243,44,1)" fg:x="157" fg:w="1"/><text x="12.6906%" y="559.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (43 samples, 3.41%)</title><rect x="9.1918%" y="725" width="3.4073%" height="15" fill="rgb(206,159,16)" fg:x="116" fg:w="43"/><text x="9.4418%" y="735.50">eng..</text></g><g><title>engine::session::SavesEntities::check_for_changes (43 samples, 3.41%)</title><rect x="9.1918%" y="709" width="3.4073%" height="15" fill="rgb(244,77,30)" fg:x="116" fg:w="43"/><text x="9.4418%" y="719.50">eng..</text></g><g><title>kernel::model::any_entity_changes (26 samples, 2.06%)</title><rect x="10.5388%" y="693" width="2.0602%" height="15" fill="rgb(218,69,12)" fg:x="133" fg:w="26"/><text x="10.7888%" y="703.50">k..</text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (9 samples, 0.71%)</title><rect x="11.8859%" y="677" width="0.7132%" height="15" fill="rgb(212,87,7)" fg:x="150" fg:w="9"/><text x="12.1359%" y="687.50"></text></g><g><title>serde_json::de::from_trait (9 samples, 0.71%)</title><rect x="11.8859%" y="661" width="0.7132%" height="15" fill="rgb(245,114,25)" fg:x="150" fg:w="9"/><text x="12.1359%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (9 samples, 0.71%)</title><rect x="11.8859%" y="645" width="0.7132%" height="15" fill="rgb(210,61,42)" fg:x="150" fg:w="9"/><text x="12.1359%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (9 samples, 0.71%)</title><rect x="11.8859%" y="629" width="0.7132%" height="15" fill="rgb(211,52,33)" fg:x="150" fg:w="9"/><text x="12.1359%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="12.5198%" y="613" width="0.0792%" height="15" fill="rgb(234,58,33)" fg:x="158" fg:w="1"/><text x="12.7698%" y="623.50"></text></g><g><title>engine::session::Session::close (50 samples, 3.96%)</title><rect x="8.7163%" y="757" width="3.9620%" height="15" fill="rgb(220,115,36)" fg:x="110" fg:w="50"/><text x="8.9663%" y="767.50">engi..</text></g><g><title>engine::session::Session::save_entity_changes (49 samples, 3.88%)</title><rect x="8.7956%" y="741" width="3.8827%" height="15" fill="rgb(243,153,54)" fg:x="111" fg:w="49"/><text x="9.0456%" y="751.50">engi..</text></g><g><title>std::env::_var (1 samples, 0.08%)</title><rect x="12.5990%" y="725" width="0.0792%" height="15" fill="rgb(251,47,18)" fg:x="159" fg:w="1"/><text x="12.8490%" y="735.50"></text></g><g><title>std::env::var_os (1 samples, 0.08%)</title><rect x="12.5990%" y="709" width="0.0792%" height="15" fill="rgb(242,102,42)" fg:x="159" fg:w="1"/><text x="12.8490%" y="719.50"></text></g><g><title>std::env::_var_os (1 samples, 0.08%)</title><rect x="12.5990%" y="693" width="0.0792%" height="15" fill="rgb(234,31,38)" fg:x="159" fg:w="1"/><text x="12.8490%" y="703.50"></text></g><g><title>std::sys::unix::os::getenv (1 samples, 0.08%)</title><rect x="12.5990%" y="677" width="0.0792%" height="15" fill="rgb(221,117,51)" fg:x="159" fg:w="1"/><text x="12.8490%" y="687.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (1 samples, 0.08%)</title><rect x="12.5990%" y="661" width="0.0792%" height="15" fill="rgb(212,20,18)" fg:x="159" fg:w="1"/><text x="12.8490%" y="671.50"></text></g><g><title>core::ffi::c_str::CStr::from_bytes_with_nul (1 samples, 0.08%)</title><rect x="12.5990%" y="645" width="0.0792%" height="15" fill="rgb(245,133,36)" fg:x="159" fg:w="1"/><text x="12.8490%" y="655.50"></text></g><g><title>core::slice::memchr::memchr (1 samples, 0.08%)</title><rect x="12.5990%" y="629" width="0.0792%" height="15" fill="rgb(212,6,19)" fg:x="159" fg:w="1"/><text x="12.8490%" y="639.50"></text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.08%)</title><rect x="12.5990%" y="613" width="0.0792%" height="15" fill="rgb(218,1,36)" fg:x="159" fg:w="1"/><text x="12.8490%" y="623.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.6783%" y="533" width="0.0792%" height="15" fill="rgb(246,84,54)" fg:x="160" fg:w="1"/><text x="12.9283%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="12.6783%" y="613" width="0.1585%" height="15" fill="rgb(242,110,6)" fg:x="160" fg:w="2"/><text x="12.9283%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="12.6783%" y="597" width="0.1585%" height="15" fill="rgb(214,47,5)" fg:x="160" fg:w="2"/><text x="12.9283%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.6783%" y="581" width="0.1585%" height="15" fill="rgb(218,159,25)" fg:x="160" fg:w="2"/><text x="12.9283%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.6783%" y="565" width="0.1585%" height="15" fill="rgb(215,211,28)" fg:x="160" fg:w="2"/><text x="12.9283%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="12.6783%" y="549" width="0.1585%" height="15" fill="rgb(238,59,32)" fg:x="160" fg:w="2"/><text x="12.9283%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="12.7575%" y="533" width="0.0792%" height="15" fill="rgb(226,82,3)" fg:x="161" fg:w="1"/><text x="13.0075%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="12.8368%" y="613" width="0.0792%" height="15" fill="rgb(240,164,32)" fg:x="162" fg:w="1"/><text x="13.0868%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="12.9160%" y="517" width="0.0792%" height="15" fill="rgb(232,46,7)" fg:x="163" fg:w="1"/><text x="13.1660%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9160%" y="501" width="0.0792%" height="15" fill="rgb(229,129,53)" fg:x="163" fg:w="1"/><text x="13.1660%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9160%" y="485" width="0.0792%" height="15" fill="rgb(234,188,29)" fg:x="163" fg:w="1"/><text x="13.1660%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.9160%" y="469" width="0.0792%" height="15" fill="rgb(246,141,4)" fg:x="163" fg:w="1"/><text x="13.1660%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.9160%" y="453" width="0.0792%" height="15" fill="rgb(229,23,39)" fg:x="163" fg:w="1"/><text x="13.1660%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.9160%" y="437" width="0.0792%" height="15" fill="rgb(206,12,3)" fg:x="163" fg:w="1"/><text x="13.1660%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9160%" y="421" width="0.0792%" height="15" fill="rgb(252,226,20)" fg:x="163" fg:w="1"/><text x="13.1660%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9160%" y="405" width="0.0792%" height="15" fill="rgb(216,123,35)" fg:x="163" fg:w="1"/><text x="13.1660%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.9160%" y="389" width="0.0792%" height="15" fill="rgb(212,68,40)" fg:x="163" fg:w="1"/><text x="13.1660%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.9160%" y="373" width="0.0792%" height="15" fill="rgb(254,125,32)" fg:x="163" fg:w="1"/><text x="13.1660%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.9160%" y="357" width="0.0792%" height="15" fill="rgb(253,97,22)" fg:x="163" fg:w="1"/><text x="13.1660%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="12.9160%" y="341" width="0.0792%" height="15" fill="rgb(241,101,14)" fg:x="163" fg:w="1"/><text x="13.1660%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="12.9160%" y="325" width="0.0792%" height="15" fill="rgb(238,103,29)" fg:x="163" fg:w="1"/><text x="13.1660%" y="335.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (2 samples, 0.16%)</title><rect x="12.9160%" y="613" width="0.1585%" height="15" fill="rgb(233,195,47)" fg:x="163" fg:w="2"/><text x="13.1660%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (2 samples, 0.16%)</title><rect x="12.9160%" y="597" width="0.1585%" height="15" fill="rgb(246,218,30)" fg:x="163" fg:w="2"/><text x="13.1660%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9160%" y="581" width="0.1585%" height="15" fill="rgb(219,145,47)" fg:x="163" fg:w="2"/><text x="13.1660%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9160%" y="565" width="0.1585%" height="15" fill="rgb(243,12,26)" fg:x="163" fg:w="2"/><text x="13.1660%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9160%" y="549" width="0.1585%" height="15" fill="rgb(214,87,16)" fg:x="163" fg:w="2"/><text x="13.1660%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="12.9160%" y="533" width="0.1585%" height="15" fill="rgb(208,99,42)" fg:x="163" fg:w="2"/><text x="13.1660%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9952%" y="517" width="0.0792%" height="15" fill="rgb(253,99,2)" fg:x="164" fg:w="1"/><text x="13.2452%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="12.9952%" y="501" width="0.0792%" height="15" fill="rgb(220,168,23)" fg:x="164" fg:w="1"/><text x="13.2452%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="12.9952%" y="485" width="0.0792%" height="15" fill="rgb(242,38,24)" fg:x="164" fg:w="1"/><text x="13.2452%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="12.9952%" y="469" width="0.0792%" height="15" fill="rgb(225,182,9)" fg:x="164" fg:w="1"/><text x="13.2452%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="12.9952%" y="453" width="0.0792%" height="15" fill="rgb(243,178,37)" fg:x="164" fg:w="1"/><text x="13.2452%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9952%" y="437" width="0.0792%" height="15" fill="rgb(232,139,19)" fg:x="164" fg:w="1"/><text x="13.2452%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="12.9952%" y="421" width="0.0792%" height="15" fill="rgb(225,201,24)" fg:x="164" fg:w="1"/><text x="13.2452%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="12.9952%" y="405" width="0.0792%" height="15" fill="rgb(221,47,46)" fg:x="164" fg:w="1"/><text x="13.2452%" y="415.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.08%)</title><rect x="12.9952%" y="389" width="0.0792%" height="15" fill="rgb(249,23,13)" fg:x="164" fg:w="1"/><text x="13.2452%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.08%)</title><rect x="12.9952%" y="373" width="0.0792%" height="15" fill="rgb(219,9,5)" fg:x="164" fg:w="1"/><text x="13.2452%" y="383.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::load (1 samples, 0.08%)</title><rect x="13.0745%" y="517" width="0.0792%" height="15" fill="rgb(254,171,16)" fg:x="165" fg:w="1"/><text x="13.3245%" y="527.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="13.1537%" y="501" width="0.0792%" height="15" fill="rgb(230,171,20)" fg:x="166" fg:w="1"/><text x="13.4037%" y="511.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="13.1537%" y="485" width="0.0792%" height="15" fill="rgb(210,71,41)" fg:x="166" fg:w="1"/><text x="13.4037%" y="495.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="13.1537%" y="469" width="0.0792%" height="15" fill="rgb(206,173,20)" fg:x="166" fg:w="1"/><text x="13.4037%" y="479.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="13.1537%" y="453" width="0.0792%" height="15" fill="rgb(233,88,34)" fg:x="166" fg:w="1"/><text x="13.4037%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="13.1537%" y="437" width="0.0792%" height="15" fill="rgb(223,209,46)" fg:x="166" fg:w="1"/><text x="13.4037%" y="447.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.1537%" y="421" width="0.0792%" height="15" fill="rgb(250,43,18)" fg:x="166" fg:w="1"/><text x="13.4037%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1537%" y="405" width="0.0792%" height="15" fill="rgb(208,13,10)" fg:x="166" fg:w="1"/><text x="13.4037%" y="415.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.1537%" y="389" width="0.0792%" height="15" fill="rgb(212,200,36)" fg:x="166" fg:w="1"/><text x="13.4037%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1537%" y="373" width="0.0792%" height="15" fill="rgb(225,90,30)" fg:x="166" fg:w="1"/><text x="13.4037%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.1537%" y="357" width="0.0792%" height="15" fill="rgb(236,182,39)" fg:x="166" fg:w="1"/><text x="13.4037%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.1537%" y="341" width="0.0792%" height="15" fill="rgb(212,144,35)" fg:x="166" fg:w="1"/><text x="13.4037%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="13.1537%" y="325" width="0.0792%" height="15" fill="rgb(228,63,44)" fg:x="166" fg:w="1"/><text x="13.4037%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="13.1537%" y="309" width="0.0792%" height="15" fill="rgb(228,109,6)" fg:x="166" fg:w="1"/><text x="13.4037%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.1537%" y="293" width="0.0792%" height="15" fill="rgb(238,117,24)" fg:x="166" fg:w="1"/><text x="13.4037%" y="303.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (3 samples, 0.24%)</title><rect x="13.0745%" y="613" width="0.2377%" height="15" fill="rgb(242,26,26)" fg:x="165" fg:w="3"/><text x="13.3245%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (3 samples, 0.24%)</title><rect x="13.0745%" y="597" width="0.2377%" height="15" fill="rgb(221,92,48)" fg:x="165" fg:w="3"/><text x="13.3245%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (3 samples, 0.24%)</title><rect x="13.0745%" y="581" width="0.2377%" height="15" fill="rgb(209,209,32)" fg:x="165" fg:w="3"/><text x="13.3245%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="13.0745%" y="565" width="0.2377%" height="15" fill="rgb(221,70,22)" fg:x="165" fg:w="3"/><text x="13.3245%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (3 samples, 0.24%)</title><rect x="13.0745%" y="549" width="0.2377%" height="15" fill="rgb(248,145,5)" fg:x="165" fg:w="3"/><text x="13.3245%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (3 samples, 0.24%)</title><rect x="13.0745%" y="533" width="0.2377%" height="15" fill="rgb(226,116,26)" fg:x="165" fg:w="3"/><text x="13.3245%" y="543.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="13.1537%" y="517" width="0.1585%" height="15" fill="rgb(244,5,17)" fg:x="166" fg:w="2"/><text x="13.4037%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (1 samples, 0.08%)</title><rect x="13.2330%" y="501" width="0.0792%" height="15" fill="rgb(252,159,33)" fg:x="167" fg:w="1"/><text x="13.4830%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="13.2330%" y="485" width="0.0792%" height="15" fill="rgb(206,71,0)" fg:x="167" fg:w="1"/><text x="13.4830%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="13.2330%" y="469" width="0.0792%" height="15" fill="rgb(233,118,54)" fg:x="167" fg:w="1"/><text x="13.4830%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="13.2330%" y="453" width="0.0792%" height="15" fill="rgb(234,83,48)" fg:x="167" fg:w="1"/><text x="13.4830%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2330%" y="437" width="0.0792%" height="15" fill="rgb(228,3,54)" fg:x="167" fg:w="1"/><text x="13.4830%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="13.2330%" y="421" width="0.0792%" height="15" fill="rgb(226,155,13)" fg:x="167" fg:w="1"/><text x="13.4830%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="13.2330%" y="405" width="0.0792%" height="15" fill="rgb(241,28,37)" fg:x="167" fg:w="1"/><text x="13.4830%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (1 samples, 0.08%)</title><rect x="13.2330%" y="389" width="0.0792%" height="15" fill="rgb(233,93,10)" fg:x="167" fg:w="1"/><text x="13.4830%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.2330%" y="373" width="0.0792%" height="15" fill="rgb(225,113,19)" fg:x="167" fg:w="1"/><text x="13.4830%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="13.2330%" y="357" width="0.0792%" height="15" fill="rgb(241,2,18)" fg:x="167" fg:w="1"/><text x="13.4830%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.2330%" y="341" width="0.0792%" height="15" fill="rgb(228,207,21)" fg:x="167" fg:w="1"/><text x="13.4830%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.2330%" y="325" width="0.0792%" height="15" fill="rgb(213,211,35)" fg:x="167" fg:w="1"/><text x="13.4830%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.2330%" y="309" width="0.0792%" height="15" fill="rgb(209,83,10)" fg:x="167" fg:w="1"/><text x="13.4830%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.2330%" y="293" width="0.0792%" height="15" fill="rgb(209,164,1)" fg:x="167" fg:w="1"/><text x="13.4830%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="13.2330%" y="277" width="0.0792%" height="15" fill="rgb(213,184,43)" fg:x="167" fg:w="1"/><text x="13.4830%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="13.5499%" y="437" width="0.0792%" height="15" fill="rgb(231,61,34)" fg:x="171" fg:w="1"/><text x="13.7999%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="13.6292%" y="341" width="0.0792%" height="15" fill="rgb(235,75,3)" fg:x="172" fg:w="1"/><text x="13.8792%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="13.6292%" y="325" width="0.0792%" height="15" fill="rgb(220,106,47)" fg:x="172" fg:w="1"/><text x="13.8792%" y="335.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="13.7084%" y="165" width="0.1585%" height="15" fill="rgb(210,196,33)" fg:x="173" fg:w="2"/><text x="13.9584%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.6292%" y="389" width="0.3170%" height="15" fill="rgb(229,154,42)" fg:x="172" fg:w="4"/><text x="13.8792%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.6292%" y="373" width="0.3170%" height="15" fill="rgb(228,114,26)" fg:x="172" fg:w="4"/><text x="13.8792%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="13.6292%" y="357" width="0.3170%" height="15" fill="rgb(208,144,1)" fg:x="172" fg:w="4"/><text x="13.8792%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.7084%" y="341" width="0.2377%" height="15" fill="rgb(239,112,37)" fg:x="173" fg:w="3"/><text x="13.9584%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="13.7084%" y="325" width="0.2377%" height="15" fill="rgb(210,96,50)" fg:x="173" fg:w="3"/><text x="13.9584%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.24%)</title><rect x="13.7084%" y="309" width="0.2377%" height="15" fill="rgb(222,178,2)" fg:x="173" fg:w="3"/><text x="13.9584%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.24%)</title><rect x="13.7084%" y="293" width="0.2377%" height="15" fill="rgb(226,74,18)" fg:x="173" fg:w="3"/><text x="13.9584%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.24%)</title><rect x="13.7084%" y="277" width="0.2377%" height="15" fill="rgb(225,67,54)" fg:x="173" fg:w="3"/><text x="13.9584%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="13.7084%" y="261" width="0.2377%" height="15" fill="rgb(251,92,32)" fg:x="173" fg:w="3"/><text x="13.9584%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.24%)</title><rect x="13.7084%" y="245" width="0.2377%" height="15" fill="rgb(228,149,22)" fg:x="173" fg:w="3"/><text x="13.9584%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.24%)</title><rect x="13.7084%" y="229" width="0.2377%" height="15" fill="rgb(243,54,13)" fg:x="173" fg:w="3"/><text x="13.9584%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.24%)</title><rect x="13.7084%" y="213" width="0.2377%" height="15" fill="rgb(243,180,28)" fg:x="173" fg:w="3"/><text x="13.9584%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.24%)</title><rect x="13.7084%" y="197" width="0.2377%" height="15" fill="rgb(208,167,24)" fg:x="173" fg:w="3"/><text x="13.9584%" y="207.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.24%)</title><rect x="13.7084%" y="181" width="0.2377%" height="15" fill="rgb(245,73,45)" fg:x="173" fg:w="3"/><text x="13.9584%" y="191.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="13.8669%" y="165" width="0.0792%" height="15" fill="rgb(237,203,48)" fg:x="175" fg:w="1"/><text x="14.1169%" y="175.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="13.8669%" y="149" width="0.0792%" height="15" fill="rgb(211,197,16)" fg:x="175" fg:w="1"/><text x="14.1169%" y="159.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (7 samples, 0.55%)</title><rect x="13.6292%" y="405" width="0.5547%" height="15" fill="rgb(243,99,51)" fg:x="172" fg:w="7"/><text x="13.8792%" y="415.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="13.9461%" y="389" width="0.2377%" height="15" fill="rgb(215,123,29)" fg:x="176" fg:w="3"/><text x="14.1961%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1838%" y="405" width="0.0792%" height="15" fill="rgb(239,186,37)" fg:x="179" fg:w="1"/><text x="14.4338%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="14.1838%" y="389" width="0.0792%" height="15" fill="rgb(252,136,39)" fg:x="179" fg:w="1"/><text x="14.4338%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1838%" y="373" width="0.0792%" height="15" fill="rgb(223,213,32)" fg:x="179" fg:w="1"/><text x="14.4338%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1838%" y="357" width="0.0792%" height="15" fill="rgb(233,115,5)" fg:x="179" fg:w="1"/><text x="14.4338%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="14.1838%" y="341" width="0.0792%" height="15" fill="rgb(207,226,44)" fg:x="179" fg:w="1"/><text x="14.4338%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.1838%" y="325" width="0.0792%" height="15" fill="rgb(208,126,0)" fg:x="179" fg:w="1"/><text x="14.4338%" y="335.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.2631%" y="277" width="0.0792%" height="15" fill="rgb(244,66,21)" fg:x="180" fg:w="1"/><text x="14.5131%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.2631%" y="261" width="0.0792%" height="15" fill="rgb(222,97,12)" fg:x="180" fg:w="1"/><text x="14.5131%" y="271.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (11 samples, 0.87%)</title><rect x="13.5499%" y="453" width="0.8716%" height="15" fill="rgb(219,213,19)" fg:x="171" fg:w="11"/><text x="13.7999%" y="463.50"></text></g><g><title>kernel::model::props::load_props (10 samples, 0.79%)</title><rect x="13.6292%" y="437" width="0.7924%" height="15" fill="rgb(252,169,30)" fg:x="172" fg:w="10"/><text x="13.8792%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (10 samples, 0.79%)</title><rect x="13.6292%" y="421" width="0.7924%" height="15" fill="rgb(206,32,51)" fg:x="172" fg:w="10"/><text x="13.8792%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.2631%" y="405" width="0.1585%" height="15" fill="rgb(250,172,42)" fg:x="180" fg:w="2"/><text x="14.5131%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.2631%" y="389" width="0.1585%" height="15" fill="rgb(209,34,43)" fg:x="180" fg:w="2"/><text x="14.5131%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.2631%" y="373" width="0.1585%" height="15" fill="rgb(223,11,35)" fg:x="180" fg:w="2"/><text x="14.5131%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.2631%" y="357" width="0.1585%" height="15" fill="rgb(251,219,26)" fg:x="180" fg:w="2"/><text x="14.5131%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="14.2631%" y="341" width="0.1585%" height="15" fill="rgb(231,119,3)" fg:x="180" fg:w="2"/><text x="14.5131%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.2631%" y="325" width="0.1585%" height="15" fill="rgb(216,97,11)" fg:x="180" fg:w="2"/><text x="14.5131%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.2631%" y="309" width="0.1585%" height="15" fill="rgb(223,59,9)" fg:x="180" fg:w="2"/><text x="14.5131%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.2631%" y="293" width="0.1585%" height="15" fill="rgb(233,93,31)" fg:x="180" fg:w="2"/><text x="14.5131%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="14.3423%" y="277" width="0.0792%" height="15" fill="rgb(239,81,33)" fg:x="181" fg:w="1"/><text x="14.5923%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="14.3423%" y="261" width="0.0792%" height="15" fill="rgb(213,120,34)" fg:x="181" fg:w="1"/><text x="14.5923%" y="271.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.3423%" y="245" width="0.0792%" height="15" fill="rgb(243,49,53)" fg:x="181" fg:w="1"/><text x="14.5923%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,kernel::model::props::Property)&gt; (1 samples, 0.08%)</title><rect x="14.5008%" y="437" width="0.0792%" height="15" fill="rgb(247,216,33)" fg:x="183" fg:w="1"/><text x="14.7508%" y="447.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.5008%" y="421" width="0.0792%" height="15" fill="rgb(226,26,14)" fg:x="183" fg:w="1"/><text x="14.7508%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.5800%" y="405" width="0.1585%" height="15" fill="rgb(215,49,53)" fg:x="184" fg:w="2"/><text x="14.8300%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="14.5800%" y="389" width="0.1585%" height="15" fill="rgb(245,162,40)" fg:x="184" fg:w="2"/><text x="14.8300%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.5800%" y="373" width="0.1585%" height="15" fill="rgb(229,68,17)" fg:x="184" fg:w="2"/><text x="14.8300%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.5800%" y="357" width="0.1585%" height="15" fill="rgb(213,182,10)" fg:x="184" fg:w="2"/><text x="14.8300%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.5800%" y="341" width="0.1585%" height="15" fill="rgb(245,125,30)" fg:x="184" fg:w="2"/><text x="14.8300%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="14.5800%" y="325" width="0.1585%" height="15" fill="rgb(232,202,2)" fg:x="184" fg:w="2"/><text x="14.8300%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="14.6593%" y="309" width="0.0792%" height="15" fill="rgb(237,140,51)" fg:x="185" fg:w="1"/><text x="14.9093%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (8 samples, 0.63%)</title><rect x="14.4216%" y="453" width="0.6339%" height="15" fill="rgb(236,157,25)" fg:x="182" fg:w="8"/><text x="14.6716%" y="463.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="14.5800%" y="437" width="0.4754%" height="15" fill="rgb(219,209,0)" fg:x="184" fg:w="6"/><text x="14.8300%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="14.5800%" y="421" width="0.4754%" height="15" fill="rgb(240,116,54)" fg:x="184" fg:w="6"/><text x="14.8300%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (4 samples, 0.32%)</title><rect x="14.7385%" y="405" width="0.3170%" height="15" fill="rgb(216,10,36)" fg:x="186" fg:w="4"/><text x="14.9885%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.7385%" y="389" width="0.3170%" height="15" fill="rgb(222,72,44)" fg:x="186" fg:w="4"/><text x="14.9885%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (4 samples, 0.32%)</title><rect x="14.7385%" y="373" width="0.3170%" height="15" fill="rgb(232,159,9)" fg:x="186" fg:w="4"/><text x="14.9885%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="14.7385%" y="357" width="0.3170%" height="15" fill="rgb(210,39,32)" fg:x="186" fg:w="4"/><text x="14.9885%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="14.8177%" y="341" width="0.2377%" height="15" fill="rgb(216,194,45)" fg:x="187" fg:w="3"/><text x="15.0677%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="14.8177%" y="325" width="0.2377%" height="15" fill="rgb(218,18,35)" fg:x="187" fg:w="3"/><text x="15.0677%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (2 samples, 0.16%)</title><rect x="14.8970%" y="309" width="0.1585%" height="15" fill="rgb(207,83,51)" fg:x="188" fg:w="2"/><text x="15.1470%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="14.8970%" y="293" width="0.1585%" height="15" fill="rgb(225,63,43)" fg:x="188" fg:w="2"/><text x="15.1470%" y="303.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="14.9762%" y="277" width="0.0792%" height="15" fill="rgb(207,57,36)" fg:x="189" fg:w="1"/><text x="15.2262%" y="287.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="15.1347%" y="405" width="0.0792%" height="15" fill="rgb(216,99,33)" fg:x="191" fg:w="1"/><text x="15.3847%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="15.1347%" y="389" width="0.0792%" height="15" fill="rgb(225,42,16)" fg:x="191" fg:w="1"/><text x="15.3847%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="15.1347%" y="373" width="0.0792%" height="15" fill="rgb(220,201,45)" fg:x="191" fg:w="1"/><text x="15.3847%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="15.1347%" y="357" width="0.0792%" height="15" fill="rgb(225,33,4)" fg:x="191" fg:w="1"/><text x="15.3847%" y="367.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_uppercase (1 samples, 0.08%)</title><rect x="15.2139%" y="389" width="0.0792%" height="15" fill="rgb(224,33,50)" fg:x="192" fg:w="1"/><text x="15.4639%" y="399.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.08%)</title><rect x="15.2139%" y="373" width="0.0792%" height="15" fill="rgb(246,198,51)" fg:x="192" fg:w="1"/><text x="15.4639%" y="383.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.4517%" y="293" width="0.0792%" height="15" fill="rgb(205,22,4)" fg:x="195" fg:w="1"/><text x="15.7017%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="15.4517%" y="277" width="0.0792%" height="15" fill="rgb(206,3,8)" fg:x="195" fg:w="1"/><text x="15.7017%" y="287.50"></text></g><g><title>regex_automata::util::determinize::epsilon_closure (1 samples, 0.08%)</title><rect x="15.4517%" y="261" width="0.0792%" height="15" fill="rgb(251,23,15)" fg:x="195" fg:w="1"/><text x="15.7017%" y="271.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (4 samples, 0.32%)</title><rect x="15.2932%" y="309" width="0.3170%" height="15" fill="rgb(252,88,28)" fg:x="193" fg:w="4"/><text x="15.5432%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="15.5309%" y="293" width="0.0792%" height="15" fill="rgb(212,127,14)" fg:x="196" fg:w="1"/><text x="15.7809%" y="303.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (1 samples, 0.08%)</title><rect x="15.5309%" y="277" width="0.0792%" height="15" fill="rgb(247,145,37)" fg:x="196" fg:w="1"/><text x="15.7809%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="15.2932%" y="373" width="0.3962%" height="15" fill="rgb(209,117,53)" fg:x="193" fg:w="5"/><text x="15.5432%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="15.2932%" y="357" width="0.3962%" height="15" fill="rgb(212,90,42)" fg:x="193" fg:w="5"/><text x="15.5432%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (5 samples, 0.40%)</title><rect x="15.2932%" y="341" width="0.3962%" height="15" fill="rgb(218,164,37)" fg:x="193" fg:w="5"/><text x="15.5432%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (5 samples, 0.40%)</title><rect x="15.2932%" y="325" width="0.3962%" height="15" fill="rgb(246,65,34)" fg:x="193" fg:w="5"/><text x="15.5432%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_rev (1 samples, 0.08%)</title><rect x="15.6101%" y="309" width="0.0792%" height="15" fill="rgb(231,100,33)" fg:x="197" fg:w="1"/><text x="15.8601%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="15.6101%" y="293" width="0.0792%" height="15" fill="rgb(228,126,14)" fg:x="197" fg:w="1"/><text x="15.8601%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="15.6894%" y="357" width="0.0792%" height="15" fill="rgb(215,173,21)" fg:x="198" fg:w="1"/><text x="15.9394%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="15.7686%" y="325" width="0.1585%" height="15" fill="rgb(210,6,40)" fg:x="199" fg:w="2"/><text x="16.0186%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="15.8479%" y="309" width="0.0792%" height="15" fill="rgb(212,48,18)" fg:x="200" fg:w="1"/><text x="16.0979%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (2 samples, 0.16%)</title><rect x="15.9271%" y="325" width="0.1585%" height="15" fill="rgb(230,214,11)" fg:x="201" fg:w="2"/><text x="16.1771%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="15.9271%" y="309" width="0.1585%" height="15" fill="rgb(254,105,39)" fg:x="201" fg:w="2"/><text x="16.1771%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.0063%" y="293" width="0.0792%" height="15" fill="rgb(245,158,5)" fg:x="202" fg:w="1"/><text x="16.2563%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (5 samples, 0.40%)</title><rect x="15.7686%" y="341" width="0.3962%" height="15" fill="rgb(249,208,11)" fg:x="199" fg:w="5"/><text x="16.0186%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="16.0856%" y="325" width="0.0792%" height="15" fill="rgb(210,39,28)" fg:x="203" fg:w="1"/><text x="16.3356%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="16.0856%" y="309" width="0.0792%" height="15" fill="rgb(211,56,53)" fg:x="203" fg:w="1"/><text x="16.3356%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.71%)</title><rect x="15.6894%" y="373" width="0.7132%" height="15" fill="rgb(226,201,30)" fg:x="198" fg:w="9"/><text x="15.9394%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (8 samples, 0.63%)</title><rect x="15.7686%" y="357" width="0.6339%" height="15" fill="rgb(239,101,34)" fg:x="199" fg:w="8"/><text x="16.0186%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="16.1648%" y="341" width="0.2377%" height="15" fill="rgb(226,209,5)" fg:x="204" fg:w="3"/><text x="16.4148%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (3 samples, 0.24%)</title><rect x="16.1648%" y="325" width="0.2377%" height="15" fill="rgb(250,105,47)" fg:x="204" fg:w="3"/><text x="16.4148%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="16.2441%" y="309" width="0.1585%" height="15" fill="rgb(230,72,3)" fg:x="205" fg:w="2"/><text x="16.4941%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="16.4025%" y="341" width="0.0792%" height="15" fill="rgb(232,218,39)" fg:x="207" fg:w="1"/><text x="16.6525%" y="351.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="16.4025%" y="325" width="0.0792%" height="15" fill="rgb(248,166,6)" fg:x="207" fg:w="1"/><text x="16.6525%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.16%)</title><rect x="16.4025%" y="357" width="0.1585%" height="15" fill="rgb(247,89,20)" fg:x="207" fg:w="2"/><text x="16.6525%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="16.4818%" y="341" width="0.0792%" height="15" fill="rgb(248,130,54)" fg:x="208" fg:w="1"/><text x="16.7318%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="16.4818%" y="325" width="0.0792%" height="15" fill="rgb(234,196,4)" fg:x="208" fg:w="1"/><text x="16.7318%" y="335.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="16.4818%" y="309" width="0.0792%" height="15" fill="rgb(250,143,31)" fg:x="208" fg:w="1"/><text x="16.7318%" y="319.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="16.4818%" y="293" width="0.0792%" height="15" fill="rgb(211,110,34)" fg:x="208" fg:w="1"/><text x="16.7318%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.5610%" y="357" width="0.0792%" height="15" fill="rgb(215,124,48)" fg:x="209" fg:w="1"/><text x="16.8110%" y="367.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="16.7195%" y="325" width="0.0792%" height="15" fill="rgb(216,46,13)" fg:x="211" fg:w="1"/><text x="16.9695%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (3 samples, 0.24%)</title><rect x="16.7987%" y="325" width="0.2377%" height="15" fill="rgb(205,184,25)" fg:x="212" fg:w="3"/><text x="17.0487%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="16.8780%" y="309" width="0.1585%" height="15" fill="rgb(228,1,10)" fg:x="213" fg:w="2"/><text x="17.1280%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="16.9572%" y="293" width="0.0792%" height="15" fill="rgb(213,116,27)" fg:x="214" fg:w="1"/><text x="17.2072%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="17.4326%" y="309" width="0.0792%" height="15" fill="rgb(241,95,50)" fg:x="220" fg:w="1"/><text x="17.6826%" y="319.50"></text></g><g><title>__libc_malloc (4 samples, 0.32%)</title><rect x="17.5119%" y="309" width="0.3170%" height="15" fill="rgb(238,48,32)" fg:x="221" fg:w="4"/><text x="17.7619%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (15 samples, 1.19%)</title><rect x="17.8288%" y="309" width="1.1886%" height="15" fill="rgb(235,113,49)" fg:x="225" fg:w="15"/><text x="18.0788%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.11%)</title><rect x="17.9081%" y="293" width="1.1094%" height="15" fill="rgb(205,127,43)" fg:x="226" fg:w="14"/><text x="18.1581%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="18.8590%" y="277" width="0.1585%" height="15" fill="rgb(250,162,2)" fg:x="238" fg:w="2"/><text x="19.1090%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="19.0174%" y="309" width="0.0792%" height="15" fill="rgb(220,13,41)" fg:x="240" fg:w="1"/><text x="19.2674%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="19.0174%" y="293" width="0.0792%" height="15" fill="rgb(249,221,25)" fg:x="240" fg:w="1"/><text x="19.2674%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="19.0967%" y="293" width="0.0792%" height="15" fill="rgb(215,208,19)" fg:x="241" fg:w="1"/><text x="19.3467%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="19.0967%" y="277" width="0.0792%" height="15" fill="rgb(236,175,2)" fg:x="241" fg:w="1"/><text x="19.3467%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="19.0967%" y="261" width="0.0792%" height="15" fill="rgb(241,52,2)" fg:x="241" fg:w="1"/><text x="19.3467%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (7 samples, 0.55%)</title><rect x="19.0967%" y="309" width="0.5547%" height="15" fill="rgb(248,140,14)" fg:x="241" fg:w="7"/><text x="19.3467%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (6 samples, 0.48%)</title><rect x="19.1759%" y="293" width="0.4754%" height="15" fill="rgb(253,22,42)" fg:x="242" fg:w="6"/><text x="19.4259%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (2 samples, 0.16%)</title><rect x="19.4929%" y="277" width="0.1585%" height="15" fill="rgb(234,61,47)" fg:x="246" fg:w="2"/><text x="19.7429%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="19.6513%" y="309" width="0.1585%" height="15" fill="rgb(208,226,15)" fg:x="248" fg:w="2"/><text x="19.9013%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (2 samples, 0.16%)</title><rect x="19.6513%" y="293" width="0.1585%" height="15" fill="rgb(217,221,4)" fg:x="248" fg:w="2"/><text x="19.9013%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="19.7306%" y="277" width="0.0792%" height="15" fill="rgb(212,174,34)" fg:x="249" fg:w="1"/><text x="19.9806%" y="287.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="19.9683%" y="245" width="0.0792%" height="15" fill="rgb(253,83,4)" fg:x="252" fg:w="1"/><text x="20.2183%" y="255.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="20.0475%" y="245" width="0.0792%" height="15" fill="rgb(250,195,49)" fg:x="253" fg:w="1"/><text x="20.2975%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="20.1268%" y="245" width="0.1585%" height="15" fill="rgb(241,192,25)" fg:x="254" fg:w="2"/><text x="20.3768%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="20.2060%" y="229" width="0.0792%" height="15" fill="rgb(208,124,10)" fg:x="255" fg:w="1"/><text x="20.4560%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="20.2060%" y="213" width="0.0792%" height="15" fill="rgb(222,33,0)" fg:x="255" fg:w="1"/><text x="20.4560%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.3645%" y="197" width="0.0792%" height="15" fill="rgb(234,209,28)" fg:x="257" fg:w="1"/><text x="20.6145%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (3 samples, 0.24%)</title><rect x="20.2853%" y="245" width="0.2377%" height="15" fill="rgb(224,11,23)" fg:x="256" fg:w="3"/><text x="20.5353%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="20.3645%" y="229" width="0.1585%" height="15" fill="rgb(232,99,1)" fg:x="257" fg:w="2"/><text x="20.6145%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.3645%" y="213" width="0.1585%" height="15" fill="rgb(237,95,45)" fg:x="257" fg:w="2"/><text x="20.6145%" y="223.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.4437%" y="197" width="0.0792%" height="15" fill="rgb(208,109,11)" fg:x="258" fg:w="1"/><text x="20.6937%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="20.6022%" y="181" width="0.0792%" height="15" fill="rgb(216,190,48)" fg:x="260" fg:w="1"/><text x="20.8522%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (3 samples, 0.24%)</title><rect x="20.5230%" y="245" width="0.2377%" height="15" fill="rgb(251,171,36)" fg:x="259" fg:w="3"/><text x="20.7730%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (3 samples, 0.24%)</title><rect x="20.5230%" y="229" width="0.2377%" height="15" fill="rgb(230,62,22)" fg:x="259" fg:w="3"/><text x="20.7730%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="20.6022%" y="213" width="0.1585%" height="15" fill="rgb(225,114,35)" fg:x="260" fg:w="2"/><text x="20.8522%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.6022%" y="197" width="0.1585%" height="15" fill="rgb(215,118,42)" fg:x="260" fg:w="2"/><text x="20.8522%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="20.6815%" y="181" width="0.0792%" height="15" fill="rgb(243,119,21)" fg:x="261" fg:w="1"/><text x="20.9315%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="20.7607%" y="229" width="0.1585%" height="15" fill="rgb(252,177,53)" fg:x="262" fg:w="2"/><text x="21.0107%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="20.7607%" y="213" width="0.1585%" height="15" fill="rgb(237,209,29)" fg:x="262" fg:w="2"/><text x="21.0107%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="20.7607%" y="197" width="0.1585%" height="15" fill="rgb(212,65,23)" fg:x="262" fg:w="2"/><text x="21.0107%" y="207.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="20.7607%" y="181" width="0.1585%" height="15" fill="rgb(230,222,46)" fg:x="262" fg:w="2"/><text x="21.0107%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (103 samples, 8.16%)</title><rect x="19.8098%" y="293" width="8.1616%" height="15" fill="rgb(215,135,32)" fg:x="250" fg:w="103"/><text x="20.0598%" y="303.50">&lt;core::iter..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (103 samples, 8.16%)</title><rect x="19.8098%" y="277" width="8.1616%" height="15" fill="rgb(246,101,22)" fg:x="250" fg:w="103"/><text x="20.0598%" y="287.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (103 samples, 8.16%)</title><rect x="19.8098%" y="261" width="8.1616%" height="15" fill="rgb(206,107,13)" fg:x="250" fg:w="103"/><text x="20.0598%" y="271.50">regex_autom..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (91 samples, 7.21%)</title><rect x="20.7607%" y="245" width="7.2108%" height="15" fill="rgb(250,100,44)" fg:x="262" fg:w="91"/><text x="21.0107%" y="255.50">regex_auto..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (89 samples, 7.05%)</title><rect x="20.9192%" y="229" width="7.0523%" height="15" fill="rgb(231,147,38)" fg:x="264" fg:w="89"/><text x="21.1692%" y="239.50">regex_aut..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (89 samples, 7.05%)</title><rect x="20.9192%" y="213" width="7.0523%" height="15" fill="rgb(229,8,40)" fg:x="264" fg:w="89"/><text x="21.1692%" y="223.50">alloc::ve..</text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="28.1300%" y="277" width="0.1585%" height="15" fill="rgb(221,135,30)" fg:x="355" fg:w="2"/><text x="28.3800%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="28.2884%" y="277" width="0.0792%" height="15" fill="rgb(249,193,18)" fg:x="357" fg:w="1"/><text x="28.5384%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="28.3677%" y="277" width="0.0792%" height="15" fill="rgb(209,133,39)" fg:x="358" fg:w="1"/><text x="28.6177%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="28.3677%" y="261" width="0.0792%" height="15" fill="rgb(232,100,14)" fg:x="358" fg:w="1"/><text x="28.6177%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="28.3677%" y="245" width="0.0792%" height="15" fill="rgb(224,185,1)" fg:x="358" fg:w="1"/><text x="28.6177%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (3 samples, 0.24%)</title><rect x="28.4469%" y="277" width="0.2377%" height="15" fill="rgb(223,139,8)" fg:x="359" fg:w="3"/><text x="28.6969%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="28.5261%" y="261" width="0.1585%" height="15" fill="rgb(232,213,38)" fg:x="360" fg:w="2"/><text x="28.7761%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="28.5261%" y="245" width="0.1585%" height="15" fill="rgb(207,94,22)" fg:x="360" fg:w="2"/><text x="28.7761%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="28.5261%" y="229" width="0.1585%" height="15" fill="rgb(219,183,54)" fg:x="360" fg:w="2"/><text x="28.7761%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="28.6846%" y="277" width="0.3170%" height="15" fill="rgb(216,185,54)" fg:x="362" fg:w="4"/><text x="28.9346%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (15 samples, 1.19%)</title><rect x="27.9715%" y="293" width="1.1886%" height="15" fill="rgb(254,217,39)" fg:x="353" fg:w="15"/><text x="28.2215%" y="303.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (2 samples, 0.16%)</title><rect x="29.0016%" y="277" width="0.1585%" height="15" fill="rgb(240,178,23)" fg:x="366" fg:w="2"/><text x="29.2516%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (2 samples, 0.16%)</title><rect x="29.0016%" y="261" width="0.1585%" height="15" fill="rgb(218,11,47)" fg:x="366" fg:w="2"/><text x="29.2516%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="29.0016%" y="245" width="0.1585%" height="15" fill="rgb(218,51,51)" fg:x="366" fg:w="2"/><text x="29.2516%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="29.0016%" y="229" width="0.1585%" height="15" fill="rgb(238,126,27)" fg:x="366" fg:w="2"/><text x="29.2516%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="29.0808%" y="213" width="0.0792%" height="15" fill="rgb(249,202,22)" fg:x="367" fg:w="1"/><text x="29.3308%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="29.2393%" y="277" width="0.0792%" height="15" fill="rgb(254,195,49)" fg:x="369" fg:w="1"/><text x="29.4893%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="29.2393%" y="261" width="0.0792%" height="15" fill="rgb(208,123,14)" fg:x="369" fg:w="1"/><text x="29.4893%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="29.2393%" y="245" width="0.0792%" height="15" fill="rgb(224,200,8)" fg:x="369" fg:w="1"/><text x="29.4893%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (3 samples, 0.24%)</title><rect x="29.1601%" y="293" width="0.2377%" height="15" fill="rgb(217,61,36)" fg:x="368" fg:w="3"/><text x="29.4101%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="29.3185%" y="277" width="0.0792%" height="15" fill="rgb(206,35,45)" fg:x="370" fg:w="1"/><text x="29.5685%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (122 samples, 9.67%)</title><rect x="19.8098%" y="309" width="9.6672%" height="15" fill="rgb(217,65,33)" fg:x="250" fg:w="122"/><text x="20.0598%" y="319.50">regex_automata..</text></g><g><title>regex_syntax::hir::Hir::dot (1 samples, 0.08%)</title><rect x="29.3978%" y="293" width="0.0792%" height="15" fill="rgb(222,158,48)" fg:x="371" fg:w="1"/><text x="29.6478%" y="303.50"></text></g><g><title>regex_syntax::hir::ClassBytes::empty (1 samples, 0.08%)</title><rect x="29.3978%" y="277" width="0.0792%" height="15" fill="rgb(254,2,54)" fg:x="371" fg:w="1"/><text x="29.6478%" y="287.50"></text></g><g><title>regex_automata::util::prefilter::prefixes (1 samples, 0.08%)</title><rect x="29.4770%" y="309" width="0.0792%" height="15" fill="rgb(250,143,38)" fg:x="372" fg:w="1"/><text x="29.7270%" y="319.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="29.4770%" y="293" width="0.0792%" height="15" fill="rgb(248,25,0)" fg:x="372" fg:w="1"/><text x="29.7270%" y="303.50"></text></g><g><title>regex_automata::meta::strategy::new (159 samples, 12.60%)</title><rect x="17.0365%" y="325" width="12.5990%" height="15" fill="rgb(206,152,27)" fg:x="215" fg:w="159"/><text x="17.2865%" y="335.50">regex_automata::met..</text></g><g><title>regex_automata::util::prefilter::suffixes (1 samples, 0.08%)</title><rect x="29.5563%" y="309" width="0.0792%" height="15" fill="rgb(240,77,30)" fg:x="373" fg:w="1"/><text x="29.8063%" y="319.50"></text></g><g><title>regex_syntax::hir::literal::Extractor::extract (1 samples, 0.08%)</title><rect x="29.5563%" y="293" width="0.0792%" height="15" fill="rgb(231,5,3)" fg:x="373" fg:w="1"/><text x="29.8063%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="29.7147%" y="293" width="0.2377%" height="15" fill="rgb(207,226,32)" fg:x="375" fg:w="3"/><text x="29.9647%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="29.7147%" y="277" width="0.2377%" height="15" fill="rgb(222,207,47)" fg:x="375" fg:w="3"/><text x="29.9647%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="29.7147%" y="261" width="0.2377%" height="15" fill="rgb(229,115,45)" fg:x="375" fg:w="3"/><text x="29.9647%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="29.7147%" y="245" width="0.2377%" height="15" fill="rgb(224,191,6)" fg:x="375" fg:w="3"/><text x="29.9647%" y="255.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="29.7147%" y="229" width="0.2377%" height="15" fill="rgb(230,227,24)" fg:x="375" fg:w="3"/><text x="29.9647%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (5 samples, 0.40%)</title><rect x="29.6355%" y="325" width="0.3962%" height="15" fill="rgb(228,80,19)" fg:x="374" fg:w="5"/><text x="29.8855%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (5 samples, 0.40%)</title><rect x="29.6355%" y="309" width="0.3962%" height="15" fill="rgb(247,229,0)" fg:x="374" fg:w="5"/><text x="29.8855%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="29.9525%" y="293" width="0.0792%" height="15" fill="rgb(237,194,15)" fg:x="378" fg:w="1"/><text x="30.2025%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="29.9525%" y="277" width="0.0792%" height="15" fill="rgb(219,203,20)" fg:x="378" fg:w="1"/><text x="30.2025%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.1109%" y="277" width="0.0792%" height="15" fill="rgb(234,128,8)" fg:x="380" fg:w="1"/><text x="30.3609%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.1109%" y="261" width="0.0792%" height="15" fill="rgb(248,202,8)" fg:x="380" fg:w="1"/><text x="30.3609%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="30.1109%" y="245" width="0.0792%" height="15" fill="rgb(206,104,37)" fg:x="380" fg:w="1"/><text x="30.3609%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="30.1109%" y="293" width="0.3170%" height="15" fill="rgb(223,8,27)" fg:x="380" fg:w="4"/><text x="30.3609%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (3 samples, 0.24%)</title><rect x="30.1902%" y="277" width="0.2377%" height="15" fill="rgb(216,217,28)" fg:x="381" fg:w="3"/><text x="30.4402%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="30.3487%" y="261" width="0.0792%" height="15" fill="rgb(249,199,1)" fg:x="383" fg:w="1"/><text x="30.5987%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="30.4279%" y="293" width="0.0792%" height="15" fill="rgb(240,85,17)" fg:x="384" fg:w="1"/><text x="30.6779%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="30.4279%" y="277" width="0.0792%" height="15" fill="rgb(206,108,45)" fg:x="384" fg:w="1"/><text x="30.6779%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="30.4279%" y="261" width="0.0792%" height="15" fill="rgb(245,210,41)" fg:x="384" fg:w="1"/><text x="30.6779%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="30.4279%" y="245" width="0.0792%" height="15" fill="rgb(206,13,37)" fg:x="384" fg:w="1"/><text x="30.6779%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="30.4279%" y="229" width="0.0792%" height="15" fill="rgb(250,61,18)" fg:x="384" fg:w="1"/><text x="30.6779%" y="239.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (177 samples, 14.03%)</title><rect x="16.6403%" y="341" width="14.0254%" height="15" fill="rgb(235,172,48)" fg:x="210" fg:w="177"/><text x="16.8903%" y="351.50">regex_automata::meta:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (8 samples, 0.63%)</title><rect x="30.0317%" y="325" width="0.6339%" height="15" fill="rgb(249,201,17)" fg:x="379" fg:w="8"/><text x="30.2817%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (8 samples, 0.63%)</title><rect x="30.0317%" y="309" width="0.6339%" height="15" fill="rgb(219,208,6)" fg:x="379" fg:w="8"/><text x="30.2817%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="30.5071%" y="293" width="0.1585%" height="15" fill="rgb(248,31,23)" fg:x="385" fg:w="2"/><text x="30.7571%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="30.5071%" y="277" width="0.1585%" height="15" fill="rgb(245,15,42)" fg:x="385" fg:w="2"/><text x="30.7571%" y="287.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="30.5071%" y="261" width="0.1585%" height="15" fill="rgb(222,217,39)" fg:x="385" fg:w="2"/><text x="30.7571%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (181 samples, 14.34%)</title><rect x="16.4025%" y="373" width="14.3423%" height="15" fill="rgb(210,219,27)" fg:x="207" fg:w="181"/><text x="16.6525%" y="383.50">regex::regex::string::..</text></g><g><title>regex::builders::Builder::build_one_string (178 samples, 14.10%)</title><rect x="16.6403%" y="357" width="14.1046%" height="15" fill="rgb(252,166,36)" fg:x="210" fg:w="178"/><text x="16.8903%" y="367.50">regex::builders::Buil..</text></g><g><title>regex_automata::meta::regex::Builder::configure (1 samples, 0.08%)</title><rect x="30.6656%" y="341" width="0.0792%" height="15" fill="rgb(245,132,34)" fg:x="387" fg:w="1"/><text x="30.9156%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="31.6957%" y="261" width="0.0792%" height="15" fill="rgb(236,54,3)" fg:x="400" fg:w="1"/><text x="31.9457%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="31.6165%" y="293" width="0.2377%" height="15" fill="rgb(241,173,43)" fg:x="399" fg:w="3"/><text x="31.8665%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="31.6957%" y="277" width="0.1585%" height="15" fill="rgb(215,190,9)" fg:x="400" fg:w="2"/><text x="31.9457%" y="287.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="31.7750%" y="261" width="0.0792%" height="15" fill="rgb(242,101,16)" fg:x="401" fg:w="1"/><text x="32.0250%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (17 samples, 1.35%)</title><rect x="30.7448%" y="309" width="1.3471%" height="15" fill="rgb(223,190,21)" fg:x="388" fg:w="17"/><text x="30.9948%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (3 samples, 0.24%)</title><rect x="31.8542%" y="293" width="0.2377%" height="15" fill="rgb(215,228,25)" fg:x="402" fg:w="3"/><text x="32.1042%" y="303.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="32.0919%" y="261" width="0.1585%" height="15" fill="rgb(225,36,22)" fg:x="405" fg:w="2"/><text x="32.3419%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (20 samples, 1.58%)</title><rect x="30.7448%" y="325" width="1.5848%" height="15" fill="rgb(251,106,46)" fg:x="388" fg:w="20"/><text x="30.9948%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (3 samples, 0.24%)</title><rect x="32.0919%" y="309" width="0.2377%" height="15" fill="rgb(208,90,1)" fg:x="405" fg:w="3"/><text x="32.3419%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="32.0919%" y="293" width="0.2377%" height="15" fill="rgb(243,10,4)" fg:x="405" fg:w="3"/><text x="32.3419%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="32.0919%" y="277" width="0.2377%" height="15" fill="rgb(212,137,27)" fg:x="405" fg:w="3"/><text x="32.3419%" y="287.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="32.2504%" y="261" width="0.0792%" height="15" fill="rgb(231,220,49)" fg:x="407" fg:w="1"/><text x="32.5004%" y="271.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="32.2504%" y="245" width="0.0792%" height="15" fill="rgb(237,96,20)" fg:x="407" fg:w="1"/><text x="32.5004%" y="255.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (218 samples, 17.27%)</title><rect x="15.2932%" y="389" width="17.2742%" height="15" fill="rgb(239,229,30)" fg:x="193" fg:w="218"/><text x="15.5432%" y="399.50">indefinite::helper::Helper:..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (23 samples, 1.82%)</title><rect x="30.7448%" y="373" width="1.8225%" height="15" fill="rgb(219,65,33)" fg:x="388" fg:w="23"/><text x="30.9948%" y="383.50">r..</text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (23 samples, 1.82%)</title><rect x="30.7448%" y="357" width="1.8225%" height="15" fill="rgb(243,134,7)" fg:x="388" fg:w="23"/><text x="30.9948%" y="367.50">r..</text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (23 samples, 1.82%)</title><rect x="30.7448%" y="341" width="1.8225%" height="15" fill="rgb(216,177,54)" fg:x="388" fg:w="23"/><text x="30.9948%" y="351.50">&lt;..</text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (3 samples, 0.24%)</title><rect x="32.3296%" y="325" width="0.2377%" height="15" fill="rgb(211,160,20)" fg:x="408" fg:w="3"/><text x="32.5796%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="32.4089%" y="309" width="0.1585%" height="15" fill="rgb(239,85,39)" fg:x="409" fg:w="2"/><text x="32.6589%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="32.4881%" y="293" width="0.0792%" height="15" fill="rgb(232,125,22)" fg:x="410" fg:w="1"/><text x="32.7381%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="32.4881%" y="277" width="0.0792%" height="15" fill="rgb(244,57,34)" fg:x="410" fg:w="1"/><text x="32.7381%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="32.4881%" y="261" width="0.0792%" height="15" fill="rgb(214,203,32)" fg:x="410" fg:w="1"/><text x="32.7381%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.5674%" y="341" width="0.0792%" height="15" fill="rgb(207,58,43)" fg:x="411" fg:w="1"/><text x="32.8174%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.6466%" y="325" width="0.0792%" height="15" fill="rgb(215,193,15)" fg:x="412" fg:w="1"/><text x="32.8966%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="32.7258%" y="309" width="0.0792%" height="15" fill="rgb(232,15,44)" fg:x="413" fg:w="1"/><text x="32.9758%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (3 samples, 0.24%)</title><rect x="32.7258%" y="325" width="0.2377%" height="15" fill="rgb(212,3,48)" fg:x="413" fg:w="3"/><text x="32.9758%" y="335.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="32.8051%" y="309" width="0.1585%" height="15" fill="rgb(218,128,7)" fg:x="414" fg:w="2"/><text x="33.0551%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="32.9635%" y="309" width="0.0792%" height="15" fill="rgb(226,216,39)" fg:x="416" fg:w="1"/><text x="33.2135%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (6 samples, 0.48%)</title><rect x="32.6466%" y="341" width="0.4754%" height="15" fill="rgb(243,47,51)" fg:x="412" fg:w="6"/><text x="32.8966%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (2 samples, 0.16%)</title><rect x="32.9635%" y="325" width="0.1585%" height="15" fill="rgb(241,183,40)" fg:x="416" fg:w="2"/><text x="33.2135%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.0428%" y="309" width="0.0792%" height="15" fill="rgb(231,217,32)" fg:x="417" fg:w="1"/><text x="33.2928%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="33.0428%" y="293" width="0.0792%" height="15" fill="rgb(229,61,38)" fg:x="417" fg:w="1"/><text x="33.2928%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.0428%" y="277" width="0.0792%" height="15" fill="rgb(225,210,5)" fg:x="417" fg:w="1"/><text x="33.2928%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="33.1220%" y="325" width="0.0792%" height="15" fill="rgb(231,79,45)" fg:x="418" fg:w="1"/><text x="33.3720%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.1220%" y="309" width="0.0792%" height="15" fill="rgb(224,100,7)" fg:x="418" fg:w="1"/><text x="33.3720%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (9 samples, 0.71%)</title><rect x="32.5674%" y="373" width="0.7132%" height="15" fill="rgb(241,198,18)" fg:x="411" fg:w="9"/><text x="32.8174%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (9 samples, 0.71%)</title><rect x="32.5674%" y="357" width="0.7132%" height="15" fill="rgb(252,97,53)" fg:x="411" fg:w="9"/><text x="32.8174%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (2 samples, 0.16%)</title><rect x="33.1220%" y="341" width="0.1585%" height="15" fill="rgb(220,88,7)" fg:x="418" fg:w="2"/><text x="33.3720%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (1 samples, 0.08%)</title><rect x="33.2013%" y="325" width="0.0792%" height="15" fill="rgb(213,176,14)" fg:x="419" fg:w="1"/><text x="33.4513%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="33.2013%" y="309" width="0.0792%" height="15" fill="rgb(246,73,7)" fg:x="419" fg:w="1"/><text x="33.4513%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (1 samples, 0.08%)</title><rect x="33.2805%" y="325" width="0.0792%" height="15" fill="rgb(245,64,36)" fg:x="420" fg:w="1"/><text x="33.5305%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="33.2805%" y="309" width="0.0792%" height="15" fill="rgb(245,80,10)" fg:x="420" fg:w="1"/><text x="33.5305%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::into_nfa (1 samples, 0.08%)</title><rect x="33.2805%" y="293" width="0.0792%" height="15" fill="rgb(232,107,50)" fg:x="420" fg:w="1"/><text x="33.5305%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="33.2805%" y="357" width="0.1585%" height="15" fill="rgb(253,3,0)" fg:x="420" fg:w="2"/><text x="33.5305%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="33.2805%" y="341" width="0.1585%" height="15" fill="rgb(212,99,53)" fg:x="420" fg:w="2"/><text x="33.5305%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="33.3597%" y="325" width="0.0792%" height="15" fill="rgb(249,111,54)" fg:x="421" fg:w="1"/><text x="33.6097%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (16 samples, 1.27%)</title><rect x="33.5182%" y="309" width="1.2678%" height="15" fill="rgb(249,55,30)" fg:x="423" fg:w="16"/><text x="33.7682%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (16 samples, 1.27%)</title><rect x="33.5182%" y="293" width="1.2678%" height="15" fill="rgb(237,47,42)" fg:x="423" fg:w="16"/><text x="33.7682%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="34.4691%" y="277" width="0.3170%" height="15" fill="rgb(211,20,18)" fg:x="435" fg:w="4"/><text x="34.7191%" y="287.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (21 samples, 1.66%)</title><rect x="33.2805%" y="373" width="1.6640%" height="15" fill="rgb(231,203,46)" fg:x="420" fg:w="21"/><text x="33.5305%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (19 samples, 1.51%)</title><rect x="33.4390%" y="357" width="1.5055%" height="15" fill="rgb(237,142,3)" fg:x="422" fg:w="19"/><text x="33.6890%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (19 samples, 1.51%)</title><rect x="33.4390%" y="341" width="1.5055%" height="15" fill="rgb(241,107,1)" fg:x="422" fg:w="19"/><text x="33.6890%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (19 samples, 1.51%)</title><rect x="33.4390%" y="325" width="1.5055%" height="15" fill="rgb(229,83,13)" fg:x="422" fg:w="19"/><text x="33.6890%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (2 samples, 0.16%)</title><rect x="34.7861%" y="309" width="0.1585%" height="15" fill="rgb(241,91,40)" fg:x="439" fg:w="2"/><text x="35.0361%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (2 samples, 0.16%)</title><rect x="34.7861%" y="293" width="0.1585%" height="15" fill="rgb(225,3,45)" fg:x="439" fg:w="2"/><text x="35.0361%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="34.8653%" y="277" width="0.0792%" height="15" fill="rgb(244,223,14)" fg:x="440" fg:w="1"/><text x="35.1153%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="34.8653%" y="261" width="0.0792%" height="15" fill="rgb(224,124,37)" fg:x="440" fg:w="1"/><text x="35.1153%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="34.9445%" y="357" width="0.0792%" height="15" fill="rgb(251,171,30)" fg:x="441" fg:w="1"/><text x="35.1945%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="34.9445%" y="341" width="0.0792%" height="15" fill="rgb(236,46,54)" fg:x="441" fg:w="1"/><text x="35.1945%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="35.1823%" y="293" width="0.0792%" height="15" fill="rgb(245,213,5)" fg:x="444" fg:w="1"/><text x="35.4323%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="35.1823%" y="277" width="0.0792%" height="15" fill="rgb(230,144,27)" fg:x="444" fg:w="1"/><text x="35.4323%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.1823%" y="261" width="0.0792%" height="15" fill="rgb(220,86,6)" fg:x="444" fg:w="1"/><text x="35.4323%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="35.1823%" y="245" width="0.0792%" height="15" fill="rgb(240,20,13)" fg:x="444" fg:w="1"/><text x="35.4323%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.1030%" y="325" width="0.2377%" height="15" fill="rgb(217,89,34)" fg:x="443" fg:w="3"/><text x="35.3530%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.1823%" y="309" width="0.1585%" height="15" fill="rgb(229,13,5)" fg:x="444" fg:w="2"/><text x="35.4323%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;regex_syntax::hir::Hir&gt;&gt; (1 samples, 0.08%)</title><rect x="35.2615%" y="293" width="0.0792%" height="15" fill="rgb(244,67,35)" fg:x="445" fg:w="1"/><text x="35.5115%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="35.3407%" y="325" width="0.0792%" height="15" fill="rgb(221,40,2)" fg:x="446" fg:w="1"/><text x="35.5907%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="35.3407%" y="309" width="0.0792%" height="15" fill="rgb(237,157,21)" fg:x="446" fg:w="1"/><text x="35.5907%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="35.3407%" y="293" width="0.0792%" height="15" fill="rgb(222,94,11)" fg:x="446" fg:w="1"/><text x="35.5907%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.4200%" y="293" width="0.0792%" height="15" fill="rgb(249,113,6)" fg:x="447" fg:w="1"/><text x="35.6700%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (3 samples, 0.24%)</title><rect x="35.4200%" y="325" width="0.2377%" height="15" fill="rgb(238,137,36)" fg:x="447" fg:w="3"/><text x="35.6700%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="35.4200%" y="309" width="0.2377%" height="15" fill="rgb(210,102,26)" fg:x="447" fg:w="3"/><text x="35.6700%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="35.4992%" y="293" width="0.1585%" height="15" fill="rgb(218,30,30)" fg:x="448" fg:w="2"/><text x="35.7492%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="35.4992%" y="277" width="0.1585%" height="15" fill="rgb(214,67,26)" fg:x="448" fg:w="2"/><text x="35.7492%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="35.5784%" y="261" width="0.0792%" height="15" fill="rgb(251,9,53)" fg:x="449" fg:w="1"/><text x="35.8284%" y="271.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="35.8162%" y="293" width="0.1585%" height="15" fill="rgb(228,204,25)" fg:x="452" fg:w="2"/><text x="36.0662%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;core::option::Option&lt;alloc::sync::Arc&lt;str&gt;&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="35.9746%" y="293" width="0.0792%" height="15" fill="rgb(207,153,8)" fg:x="454" fg:w="1"/><text x="36.2246%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (26 samples, 2.06%)</title><rect x="35.8162%" y="309" width="2.0602%" height="15" fill="rgb(242,9,16)" fg:x="452" fg:w="26"/><text x="36.0662%" y="319.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (23 samples, 1.82%)</title><rect x="36.0539%" y="293" width="1.8225%" height="15" fill="rgb(217,211,10)" fg:x="455" fg:w="23"/><text x="36.3039%" y="303.50">c..</text></g><g><title>__libc_free (6 samples, 0.48%)</title><rect x="37.4010%" y="277" width="0.4754%" height="15" fill="rgb(219,228,52)" fg:x="472" fg:w="6"/><text x="37.6510%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (5 samples, 0.40%)</title><rect x="38.0349%" y="293" width="0.3962%" height="15" fill="rgb(231,92,29)" fg:x="480" fg:w="5"/><text x="38.2849%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::configure (1 samples, 0.08%)</title><rect x="38.4311%" y="293" width="0.0792%" height="15" fill="rgb(232,8,23)" fg:x="485" fg:w="1"/><text x="38.6811%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (9 samples, 0.71%)</title><rect x="37.8764%" y="309" width="0.7132%" height="15" fill="rgb(216,211,34)" fg:x="478" fg:w="9"/><text x="38.1264%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="38.5103%" y="293" width="0.0792%" height="15" fill="rgb(236,151,0)" fg:x="486" fg:w="1"/><text x="38.7603%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="38.5103%" y="277" width="0.0792%" height="15" fill="rgb(209,168,3)" fg:x="486" fg:w="1"/><text x="38.7603%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="38.5103%" y="261" width="0.0792%" height="15" fill="rgb(208,129,28)" fg:x="486" fg:w="1"/><text x="38.7603%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="38.5103%" y="245" width="0.0792%" height="15" fill="rgb(229,78,22)" fg:x="486" fg:w="1"/><text x="38.7603%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="38.5103%" y="229" width="0.0792%" height="15" fill="rgb(228,187,13)" fg:x="486" fg:w="1"/><text x="38.7603%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="39.0650%" y="277" width="0.3962%" height="15" fill="rgb(240,119,24)" fg:x="493" fg:w="5"/><text x="39.3150%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.40%)</title><rect x="39.0650%" y="261" width="0.3962%" height="15" fill="rgb(209,194,42)" fg:x="493" fg:w="5"/><text x="39.3150%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.40%)</title><rect x="39.0650%" y="245" width="0.3962%" height="15" fill="rgb(247,200,46)" fg:x="493" fg:w="5"/><text x="39.3150%" y="255.50"></text></g><g><title>realloc (5 samples, 0.40%)</title><rect x="39.0650%" y="229" width="0.3962%" height="15" fill="rgb(218,76,16)" fg:x="493" fg:w="5"/><text x="39.3150%" y="239.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (9 samples, 0.71%)</title><rect x="39.4612%" y="277" width="0.7132%" height="15" fill="rgb(225,21,48)" fg:x="498" fg:w="9"/><text x="39.7112%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (5 samples, 0.40%)</title><rect x="39.7781%" y="261" width="0.3962%" height="15" fill="rgb(239,223,50)" fg:x="502" fg:w="5"/><text x="40.0281%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (8 samples, 0.63%)</title><rect x="40.2536%" y="261" width="0.6339%" height="15" fill="rgb(244,45,21)" fg:x="508" fg:w="8"/><text x="40.5036%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (8 samples, 0.63%)</title><rect x="40.2536%" y="245" width="0.6339%" height="15" fill="rgb(232,33,43)" fg:x="508" fg:w="8"/><text x="40.5036%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (30 samples, 2.38%)</title><rect x="38.5895%" y="309" width="2.3772%" height="15" fill="rgb(209,8,3)" fg:x="487" fg:w="30"/><text x="38.8395%" y="319.50">re..</text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (29 samples, 2.30%)</title><rect x="38.6688%" y="293" width="2.2979%" height="15" fill="rgb(214,25,53)" fg:x="488" fg:w="29"/><text x="38.9188%" y="303.50">r..</text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (10 samples, 0.79%)</title><rect x="40.1743%" y="277" width="0.7924%" height="15" fill="rgb(254,186,54)" fg:x="507" fg:w="10"/><text x="40.4243%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::swap (1 samples, 0.08%)</title><rect x="40.8875%" y="261" width="0.0792%" height="15" fill="rgb(208,174,49)" fg:x="516" fg:w="1"/><text x="41.1375%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="40.9667%" y="309" width="0.1585%" height="15" fill="rgb(233,191,51)" fg:x="517" fg:w="2"/><text x="41.2167%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="41.0460%" y="293" width="0.0792%" height="15" fill="rgb(222,134,10)" fg:x="518" fg:w="1"/><text x="41.2960%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.2044%" y="277" width="0.0792%" height="15" fill="rgb(230,226,20)" fg:x="520" fg:w="1"/><text x="41.4544%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add_capture_start (2 samples, 0.16%)</title><rect x="41.2837%" y="261" width="0.1585%" height="15" fill="rgb(251,111,25)" fg:x="521" fg:w="2"/><text x="41.5337%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="41.2837%" y="245" width="0.1585%" height="15" fill="rgb(224,40,46)" fg:x="521" fg:w="2"/><text x="41.5337%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="41.2837%" y="229" width="0.1585%" height="15" fill="rgb(236,108,47)" fg:x="521" fg:w="2"/><text x="41.5337%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="41.2837%" y="213" width="0.1585%" height="15" fill="rgb(234,93,0)" fg:x="521" fg:w="2"/><text x="41.5337%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="41.4422%" y="213" width="0.0792%" height="15" fill="rgb(224,213,32)" fg:x="523" fg:w="1"/><text x="41.6922%" y="223.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.63%)</title><rect x="42.0761%" y="197" width="0.6339%" height="15" fill="rgb(251,11,48)" fg:x="531" fg:w="8"/><text x="42.3261%" y="207.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="42.7100%" y="197" width="0.1585%" height="15" fill="rgb(236,173,5)" fg:x="539" fg:w="2"/><text x="42.9600%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (5 samples, 0.40%)</title><rect x="42.8685%" y="197" width="0.3962%" height="15" fill="rgb(230,95,12)" fg:x="541" fg:w="5"/><text x="43.1185%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (5 samples, 0.40%)</title><rect x="43.2647%" y="197" width="0.3962%" height="15" fill="rgb(232,209,1)" fg:x="546" fg:w="5"/><text x="43.5147%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="43.5024%" y="181" width="0.1585%" height="15" fill="rgb(232,6,1)" fg:x="549" fg:w="2"/><text x="43.7524%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="43.5024%" y="165" width="0.1585%" height="15" fill="rgb(210,224,50)" fg:x="549" fg:w="2"/><text x="43.7524%" y="175.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="43.5024%" y="149" width="0.1585%" height="15" fill="rgb(228,127,35)" fg:x="549" fg:w="2"/><text x="43.7524%" y="159.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="44.1363%" y="165" width="0.1585%" height="15" fill="rgb(245,102,45)" fg:x="557" fg:w="2"/><text x="44.3863%" y="175.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="44.3740%" y="133" width="0.2377%" height="15" fill="rgb(214,1,49)" fg:x="560" fg:w="3"/><text x="44.6240%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.63%)</title><rect x="44.2948%" y="165" width="0.6339%" height="15" fill="rgb(226,163,40)" fg:x="559" fg:w="8"/><text x="44.5448%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.63%)</title><rect x="44.2948%" y="149" width="0.6339%" height="15" fill="rgb(239,212,28)" fg:x="559" fg:w="8"/><text x="44.5448%" y="159.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="44.6117%" y="133" width="0.3170%" height="15" fill="rgb(220,20,13)" fg:x="563" fg:w="4"/><text x="44.8617%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (26 samples, 2.06%)</title><rect x="43.6609%" y="197" width="2.0602%" height="15" fill="rgb(210,164,35)" fg:x="551" fg:w="26"/><text x="43.9109%" y="207.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (25 samples, 1.98%)</title><rect x="43.7401%" y="181" width="1.9810%" height="15" fill="rgb(248,109,41)" fg:x="552" fg:w="25"/><text x="43.9901%" y="191.50">r..</text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (10 samples, 0.79%)</title><rect x="44.9287%" y="165" width="0.7924%" height="15" fill="rgb(238,23,50)" fg:x="567" fg:w="10"/><text x="45.1787%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (3 samples, 0.24%)</title><rect x="45.4834%" y="149" width="0.2377%" height="15" fill="rgb(211,48,49)" fg:x="574" fg:w="3"/><text x="45.7334%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="45.6418%" y="133" width="0.0792%" height="15" fill="rgb(223,36,21)" fg:x="576" fg:w="1"/><text x="45.8918%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="45.6418%" y="117" width="0.0792%" height="15" fill="rgb(207,123,46)" fg:x="576" fg:w="1"/><text x="45.8918%" y="127.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="45.6418%" y="101" width="0.0792%" height="15" fill="rgb(240,218,32)" fg:x="576" fg:w="1"/><text x="45.8918%" y="111.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (77 samples, 6.10%)</title><rect x="45.7211%" y="197" width="6.1014%" height="15" fill="rgb(252,5,43)" fg:x="577" fg:w="77"/><text x="45.9711%" y="207.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (77 samples, 6.10%)</title><rect x="45.7211%" y="181" width="6.1014%" height="15" fill="rgb(252,84,19)" fg:x="577" fg:w="77"/><text x="45.9711%" y="191.50">regex_au..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (77 samples, 6.10%)</title><rect x="45.7211%" y="165" width="6.1014%" height="15" fill="rgb(243,152,39)" fg:x="577" fg:w="77"/><text x="45.9711%" y="175.50">alloc::v..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (5 samples, 0.40%)</title><rect x="51.8225%" y="197" width="0.3962%" height="15" fill="rgb(234,160,15)" fg:x="654" fg:w="5"/><text x="52.0725%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="52.1395%" y="181" width="0.0792%" height="15" fill="rgb(237,34,20)" fg:x="658" fg:w="1"/><text x="52.3895%" y="191.50"></text></g><g><title>regex_syntax::utf8::Utf8Sequence::as_slice (1 samples, 0.08%)</title><rect x="52.2187%" y="197" width="0.0792%" height="15" fill="rgb(229,97,13)" fg:x="659" fg:w="1"/><text x="52.4687%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (150 samples, 11.89%)</title><rect x="41.2044%" y="293" width="11.8859%" height="15" fill="rgb(234,71,50)" fg:x="520" fg:w="150"/><text x="41.4544%" y="303.50">&lt;core::iter::adapt..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (149 samples, 11.81%)</title><rect x="41.2837%" y="277" width="11.8067%" height="15" fill="rgb(253,155,4)" fg:x="521" fg:w="149"/><text x="41.5337%" y="287.50">regex_automata::nf..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (147 samples, 11.65%)</title><rect x="41.4422%" y="261" width="11.6482%" height="15" fill="rgb(222,185,37)" fg:x="523" fg:w="147"/><text x="41.6922%" y="271.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (147 samples, 11.65%)</title><rect x="41.4422%" y="245" width="11.6482%" height="15" fill="rgb(251,177,13)" fg:x="523" fg:w="147"/><text x="41.6922%" y="255.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (147 samples, 11.65%)</title><rect x="41.4422%" y="229" width="11.6482%" height="15" fill="rgb(250,179,40)" fg:x="523" fg:w="147"/><text x="41.6922%" y="239.50">regex_automata::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (146 samples, 11.57%)</title><rect x="41.5214%" y="213" width="11.5689%" height="15" fill="rgb(242,44,2)" fg:x="524" fg:w="146"/><text x="41.7714%" y="223.50">regex_automata::n..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (10 samples, 0.79%)</title><rect x="52.2979%" y="197" width="0.7924%" height="15" fill="rgb(216,177,13)" fg:x="660" fg:w="10"/><text x="52.5479%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="52.7734%" y="181" width="0.3170%" height="15" fill="rgb(216,106,43)" fg:x="666" fg:w="4"/><text x="53.0234%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="52.9319%" y="165" width="0.1585%" height="15" fill="rgb(216,183,2)" fg:x="668" fg:w="2"/><text x="53.1819%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.0111%" y="149" width="0.0792%" height="15" fill="rgb(249,75,3)" fg:x="669" fg:w="1"/><text x="53.2611%" y="159.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="53.4865%" y="277" width="0.0792%" height="15" fill="rgb(219,67,39)" fg:x="675" fg:w="1"/><text x="53.7365%" y="287.50"></text></g><g><title>__libc_malloc (3 samples, 0.24%)</title><rect x="53.5658%" y="277" width="0.2377%" height="15" fill="rgb(253,228,2)" fg:x="676" fg:w="3"/><text x="53.8158%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="53.8035%" y="277" width="0.0792%" height="15" fill="rgb(235,138,27)" fg:x="679" fg:w="1"/><text x="54.0535%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8035%" y="261" width="0.0792%" height="15" fill="rgb(236,97,51)" fg:x="679" fg:w="1"/><text x="54.0535%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.8035%" y="245" width="0.0792%" height="15" fill="rgb(240,80,30)" fg:x="679" fg:w="1"/><text x="54.0535%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="53.8827%" y="277" width="0.0792%" height="15" fill="rgb(230,178,19)" fg:x="680" fg:w="1"/><text x="54.1327%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="53.8827%" y="261" width="0.0792%" height="15" fill="rgb(210,190,27)" fg:x="680" fg:w="1"/><text x="54.1327%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="53.8827%" y="245" width="0.0792%" height="15" fill="rgb(222,107,31)" fg:x="680" fg:w="1"/><text x="54.1327%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (17 samples, 1.35%)</title><rect x="53.9620%" y="277" width="1.3471%" height="15" fill="rgb(216,127,34)" fg:x="681" fg:w="17"/><text x="54.2120%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.63%)</title><rect x="54.6751%" y="261" width="0.6339%" height="15" fill="rgb(234,116,52)" fg:x="690" fg:w="8"/><text x="54.9251%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.63%)</title><rect x="54.6751%" y="245" width="0.6339%" height="15" fill="rgb(222,124,15)" fg:x="690" fg:w="8"/><text x="54.9251%" y="255.50"></text></g><g><title>realloc (8 samples, 0.63%)</title><rect x="54.6751%" y="229" width="0.6339%" height="15" fill="rgb(231,179,28)" fg:x="690" fg:w="8"/><text x="54.9251%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (10 samples, 0.79%)</title><rect x="55.3090%" y="277" width="0.7924%" height="15" fill="rgb(226,93,45)" fg:x="698" fg:w="10"/><text x="55.5590%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.24%)</title><rect x="55.8637%" y="261" width="0.2377%" height="15" fill="rgb(215,8,51)" fg:x="705" fg:w="3"/><text x="56.1137%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="55.9429%" y="245" width="0.1585%" height="15" fill="rgb(223,106,5)" fg:x="706" fg:w="2"/><text x="56.1929%" y="255.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="56.0222%" y="229" width="0.0792%" height="15" fill="rgb(250,191,5)" fg:x="707" fg:w="1"/><text x="56.2722%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::remap (2 samples, 0.16%)</title><rect x="56.1014%" y="277" width="0.1585%" height="15" fill="rgb(242,132,44)" fg:x="708" fg:w="2"/><text x="56.3514%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (261 samples, 20.68%)</title><rect x="35.6577%" y="325" width="20.6815%" height="15" fill="rgb(251,152,29)" fg:x="450" fg:w="261"/><text x="35.9077%" y="335.50">regex_automata::meta::strategy::n..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (192 samples, 15.21%)</title><rect x="41.1252%" y="309" width="15.2139%" height="15" fill="rgb(218,179,5)" fg:x="519" fg:w="192"/><text x="41.3752%" y="319.50">regex_automata::nfa::th..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (41 samples, 3.25%)</title><rect x="53.0903%" y="293" width="3.2488%" height="15" fill="rgb(227,67,19)" fg:x="670" fg:w="41"/><text x="53.3403%" y="303.50">reg..</text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="56.2599%" y="277" width="0.0792%" height="15" fill="rgb(233,119,31)" fg:x="710" fg:w="1"/><text x="56.5099%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="56.4976%" y="277" width="0.0792%" height="15" fill="rgb(241,120,22)" fg:x="713" fg:w="1"/><text x="56.7476%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="56.5769%" y="277" width="0.0792%" height="15" fill="rgb(224,102,30)" fg:x="714" fg:w="1"/><text x="56.8269%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="56.4976%" y="293" width="0.2377%" height="15" fill="rgb(210,164,37)" fg:x="713" fg:w="3"/><text x="56.7476%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="56.6561%" y="277" width="0.0792%" height="15" fill="rgb(226,191,16)" fg:x="715" fg:w="1"/><text x="56.9061%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="56.6561%" y="261" width="0.0792%" height="15" fill="rgb(214,40,45)" fg:x="715" fg:w="1"/><text x="56.9061%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="56.6561%" y="245" width="0.0792%" height="15" fill="rgb(244,29,26)" fg:x="715" fg:w="1"/><text x="56.9061%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="56.6561%" y="229" width="0.0792%" height="15" fill="rgb(216,16,5)" fg:x="715" fg:w="1"/><text x="56.9061%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group (2 samples, 0.16%)</title><rect x="56.7353%" y="293" width="0.1585%" height="15" fill="rgb(249,76,35)" fg:x="716" fg:w="2"/><text x="56.9853%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="56.8146%" y="277" width="0.0792%" height="15" fill="rgb(207,11,44)" fg:x="717" fg:w="1"/><text x="57.0646%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="56.8938%" y="277" width="0.1585%" height="15" fill="rgb(228,190,49)" fg:x="718" fg:w="2"/><text x="57.1438%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="56.8938%" y="261" width="0.1585%" height="15" fill="rgb(214,173,12)" fg:x="718" fg:w="2"/><text x="57.1438%" y="271.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="56.8938%" y="245" width="0.1585%" height="15" fill="rgb(218,26,35)" fg:x="718" fg:w="2"/><text x="57.1438%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_group (3 samples, 0.24%)</title><rect x="56.8938%" y="293" width="0.2377%" height="15" fill="rgb(220,200,19)" fg:x="718" fg:w="3"/><text x="57.1438%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_group (1 samples, 0.08%)</title><rect x="57.0523%" y="277" width="0.0792%" height="15" fill="rgb(239,95,49)" fg:x="720" fg:w="1"/><text x="57.3023%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::parse::NestLimiter&lt;P&gt; as regex_syntax::ast::visitor::Visitor&gt;::visit_pre (1 samples, 0.08%)</title><rect x="57.1315%" y="277" width="0.0792%" height="15" fill="rgb(235,85,53)" fg:x="721" fg:w="1"/><text x="57.3815%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (13 samples, 1.03%)</title><rect x="56.3391%" y="325" width="1.0301%" height="15" fill="rgb(233,133,31)" fg:x="711" fg:w="13"/><text x="56.5891%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (13 samples, 1.03%)</title><rect x="56.3391%" y="309" width="1.0301%" height="15" fill="rgb(218,25,20)" fg:x="711" fg:w="13"/><text x="56.5891%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (3 samples, 0.24%)</title><rect x="57.1315%" y="293" width="0.2377%" height="15" fill="rgb(252,210,38)" fg:x="721" fg:w="3"/><text x="57.3815%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="57.2108%" y="277" width="0.1585%" height="15" fill="rgb(242,134,21)" fg:x="722" fg:w="2"/><text x="57.4608%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="57.4485%" y="277" width="0.0792%" height="15" fill="rgb(213,28,48)" fg:x="725" fg:w="1"/><text x="57.6985%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="57.4485%" y="261" width="0.0792%" height="15" fill="rgb(250,196,2)" fg:x="725" fg:w="1"/><text x="57.6985%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="57.4485%" y="245" width="0.0792%" height="15" fill="rgb(227,5,17)" fg:x="725" fg:w="1"/><text x="57.6985%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (6 samples, 0.48%)</title><rect x="57.5277%" y="277" width="0.4754%" height="15" fill="rgb(221,226,24)" fg:x="726" fg:w="6"/><text x="57.7777%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (3 samples, 0.24%)</title><rect x="57.7655%" y="261" width="0.2377%" height="15" fill="rgb(211,5,48)" fg:x="729" fg:w="3"/><text x="58.0155%" y="271.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (8 samples, 0.63%)</title><rect x="57.4485%" y="293" width="0.6339%" height="15" fill="rgb(219,150,6)" fg:x="725" fg:w="8"/><text x="57.6985%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (1 samples, 0.08%)</title><rect x="58.0032%" y="277" width="0.0792%" height="15" fill="rgb(251,46,16)" fg:x="732" fg:w="1"/><text x="58.2532%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.0824%" y="277" width="0.0792%" height="15" fill="rgb(220,204,40)" fg:x="733" fg:w="1"/><text x="58.3324%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::class (1 samples, 0.08%)</title><rect x="58.1616%" y="277" width="0.0792%" height="15" fill="rgb(211,85,2)" fg:x="734" fg:w="1"/><text x="58.4116%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::class (1 samples, 0.08%)</title><rect x="58.1616%" y="261" width="0.0792%" height="15" fill="rgb(229,17,7)" fg:x="734" fg:w="1"/><text x="58.4116%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.1616%" y="245" width="0.0792%" height="15" fill="rgb(239,72,28)" fg:x="734" fg:w="1"/><text x="58.4116%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (4 samples, 0.32%)</title><rect x="58.0824%" y="293" width="0.3170%" height="15" fill="rgb(230,47,54)" fg:x="733" fg:w="4"/><text x="58.3324%" y="303.50"></text></g><g><title>regex_syntax::hir::Hir::concat (2 samples, 0.16%)</title><rect x="58.2409%" y="277" width="0.1585%" height="15" fill="rgb(214,50,8)" fg:x="735" fg:w="2"/><text x="58.4909%" y="287.50"></text></g><g><title>regex_syntax::hir::Hir::into_parts (1 samples, 0.08%)</title><rect x="58.3201%" y="261" width="0.0792%" height="15" fill="rgb(216,198,43)" fg:x="736" fg:w="1"/><text x="58.5701%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="58.3201%" y="245" width="0.0792%" height="15" fill="rgb(234,20,35)" fg:x="736" fg:w="1"/><text x="58.5701%" y="255.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (296 samples, 23.45%)</title><rect x="35.0238%" y="341" width="23.4548%" height="15" fill="rgb(254,45,19)" fg:x="442" fg:w="296"/><text x="35.2738%" y="351.50">regex_automata::meta::regex::Builder:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (14 samples, 1.11%)</title><rect x="57.3693%" y="325" width="1.1094%" height="15" fill="rgb(219,14,44)" fg:x="724" fg:w="14"/><text x="57.6193%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (14 samples, 1.11%)</title><rect x="57.3693%" y="309" width="1.1094%" height="15" fill="rgb(217,220,26)" fg:x="724" fg:w="14"/><text x="57.6193%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="58.3994%" y="293" width="0.0792%" height="15" fill="rgb(213,158,28)" fg:x="737" fg:w="1"/><text x="58.6494%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="58.3994%" y="277" width="0.0792%" height="15" fill="rgb(252,51,52)" fg:x="737" fg:w="1"/><text x="58.6494%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="58.3994%" y="261" width="0.0792%" height="15" fill="rgb(246,89,16)" fg:x="737" fg:w="1"/><text x="58.6494%" y="271.50"></text></g><g><title>indefinite::rules::number::Number::check (328 samples, 25.99%)</title><rect x="32.5674%" y="389" width="25.9905%" height="15" fill="rgb(216,158,49)" fg:x="411" fg:w="328"/><text x="32.8174%" y="399.50">indefinite::rules::number::Number::check</text></g><g><title>regex::regex::string::Regex::new (298 samples, 23.61%)</title><rect x="34.9445%" y="373" width="23.6133%" height="15" fill="rgb(236,107,19)" fg:x="441" fg:w="298"/><text x="35.1945%" y="383.50">regex::regex::string::Regex::new</text></g><g><title>regex::builders::Builder::build_one_string (297 samples, 23.53%)</title><rect x="35.0238%" y="357" width="23.5341%" height="15" fill="rgb(228,185,30)" fg:x="442" fg:w="297"/><text x="35.2738%" y="367.50">regex::builders::Builder::build_one_s..</text></g><g><title>regex_automata::meta::regex::Builder::syntax (1 samples, 0.08%)</title><rect x="58.4786%" y="341" width="0.0792%" height="15" fill="rgb(246,134,8)" fg:x="738" fg:w="1"/><text x="58.7286%" y="351.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorBuilder::case_insensitive (1 samples, 0.08%)</title><rect x="58.4786%" y="325" width="0.0792%" height="15" fill="rgb(214,143,50)" fg:x="738" fg:w="1"/><text x="58.7286%" y="335.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (2 samples, 0.16%)</title><rect x="58.5578%" y="357" width="0.1585%" height="15" fill="rgb(228,75,8)" fg:x="739" fg:w="2"/><text x="58.8078%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (2 samples, 0.16%)</title><rect x="58.5578%" y="341" width="0.1585%" height="15" fill="rgb(207,175,4)" fg:x="739" fg:w="2"/><text x="58.8078%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (2 samples, 0.16%)</title><rect x="58.5578%" y="325" width="0.1585%" height="15" fill="rgb(205,108,24)" fg:x="739" fg:w="2"/><text x="58.8078%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.7163%" y="357" width="0.0792%" height="15" fill="rgb(244,120,49)" fg:x="741" fg:w="1"/><text x="58.9663%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.7956%" y="325" width="0.0792%" height="15" fill="rgb(223,47,38)" fg:x="742" fg:w="1"/><text x="59.0456%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.7956%" y="309" width="0.0792%" height="15" fill="rgb(229,179,11)" fg:x="742" fg:w="1"/><text x="59.0456%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="58.7956%" y="293" width="0.0792%" height="15" fill="rgb(231,122,1)" fg:x="742" fg:w="1"/><text x="59.0456%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.7956%" y="277" width="0.0792%" height="15" fill="rgb(245,119,9)" fg:x="742" fg:w="1"/><text x="59.0456%" y="287.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="58.8748%" y="309" width="0.0792%" height="15" fill="rgb(241,163,25)" fg:x="743" fg:w="1"/><text x="59.1248%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="58.8748%" y="293" width="0.0792%" height="15" fill="rgb(217,214,3)" fg:x="743" fg:w="1"/><text x="59.1248%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (4 samples, 0.32%)</title><rect x="58.7956%" y="357" width="0.3170%" height="15" fill="rgb(240,86,28)" fg:x="742" fg:w="4"/><text x="59.0456%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (4 samples, 0.32%)</title><rect x="58.7956%" y="341" width="0.3170%" height="15" fill="rgb(215,47,9)" fg:x="742" fg:w="4"/><text x="59.0456%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (3 samples, 0.24%)</title><rect x="58.8748%" y="325" width="0.2377%" height="15" fill="rgb(252,25,45)" fg:x="743" fg:w="3"/><text x="59.1248%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::hybrid::dfa::Cache&gt; (2 samples, 0.16%)</title><rect x="58.9540%" y="309" width="0.1585%" height="15" fill="rgb(251,164,9)" fg:x="744" fg:w="2"/><text x="59.2040%" y="319.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="58.9540%" y="293" width="0.1585%" height="15" fill="rgb(233,194,0)" fg:x="744" fg:w="2"/><text x="59.2040%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="59.2710%" y="309" width="0.1585%" height="15" fill="rgb(249,111,24)" fg:x="748" fg:w="2"/><text x="59.5210%" y="319.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="59.2710%" y="293" width="0.1585%" height="15" fill="rgb(250,223,3)" fg:x="748" fg:w="2"/><text x="59.5210%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="59.3502%" y="277" width="0.0792%" height="15" fill="rgb(236,178,37)" fg:x="749" fg:w="1"/><text x="59.6002%" y="287.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="59.3502%" y="261" width="0.0792%" height="15" fill="rgb(241,158,50)" fg:x="749" fg:w="1"/><text x="59.6002%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="59.5087%" y="293" width="0.0792%" height="15" fill="rgb(213,121,41)" fg:x="751" fg:w="1"/><text x="59.7587%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="59.5880%" y="293" width="0.0792%" height="15" fill="rgb(240,92,3)" fg:x="752" fg:w="1"/><text x="59.8380%" y="303.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="59.5880%" y="277" width="0.0792%" height="15" fill="rgb(205,123,3)" fg:x="752" fg:w="1"/><text x="59.8380%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="59.6672%" y="277" width="0.1585%" height="15" fill="rgb(205,97,47)" fg:x="753" fg:w="2"/><text x="59.9172%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (5 samples, 0.40%)</title><rect x="59.6672%" y="293" width="0.3962%" height="15" fill="rgb(247,152,14)" fg:x="753" fg:w="5"/><text x="59.9172%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (3 samples, 0.24%)</title><rect x="59.8257%" y="277" width="0.2377%" height="15" fill="rgb(248,195,53)" fg:x="755" fg:w="3"/><text x="60.0757%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="59.9842%" y="261" width="0.0792%" height="15" fill="rgb(226,201,16)" fg:x="757" fg:w="1"/><text x="60.2342%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="59.9842%" y="245" width="0.0792%" height="15" fill="rgb(205,98,0)" fg:x="757" fg:w="1"/><text x="60.2342%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (1 samples, 0.08%)</title><rect x="60.0634%" y="293" width="0.0792%" height="15" fill="rgb(214,191,48)" fg:x="758" fg:w="1"/><text x="60.3134%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="60.0634%" y="277" width="0.0792%" height="15" fill="rgb(237,112,39)" fg:x="758" fg:w="1"/><text x="60.3134%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="60.1426%" y="261" width="0.0792%" height="15" fill="rgb(247,203,27)" fg:x="759" fg:w="1"/><text x="60.3926%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.1426%" y="245" width="0.0792%" height="15" fill="rgb(235,124,28)" fg:x="759" fg:w="1"/><text x="60.3926%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.1426%" y="229" width="0.0792%" height="15" fill="rgb(208,207,46)" fg:x="759" fg:w="1"/><text x="60.3926%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="60.1426%" y="213" width="0.0792%" height="15" fill="rgb(234,176,4)" fg:x="759" fg:w="1"/><text x="60.3926%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.40%)</title><rect x="60.1426%" y="277" width="0.3962%" height="15" fill="rgb(230,133,28)" fg:x="759" fg:w="5"/><text x="60.3926%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (4 samples, 0.32%)</title><rect x="60.2219%" y="261" width="0.3170%" height="15" fill="rgb(211,137,40)" fg:x="760" fg:w="4"/><text x="60.4719%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="60.2219%" y="245" width="0.3170%" height="15" fill="rgb(254,35,13)" fg:x="760" fg:w="4"/><text x="60.4719%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (4 samples, 0.32%)</title><rect x="60.2219%" y="229" width="0.3170%" height="15" fill="rgb(225,49,51)" fg:x="760" fg:w="4"/><text x="60.4719%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (2 samples, 0.16%)</title><rect x="60.3803%" y="213" width="0.1585%" height="15" fill="rgb(251,10,15)" fg:x="762" fg:w="2"/><text x="60.6303%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="60.3803%" y="197" width="0.1585%" height="15" fill="rgb(228,207,15)" fg:x="762" fg:w="2"/><text x="60.6303%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="60.3803%" y="181" width="0.1585%" height="15" fill="rgb(241,99,19)" fg:x="762" fg:w="2"/><text x="60.6303%" y="191.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="60.3803%" y="165" width="0.1585%" height="15" fill="rgb(207,104,49)" fg:x="762" fg:w="2"/><text x="60.6303%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="60.5388%" y="277" width="0.0792%" height="15" fill="rgb(234,99,18)" fg:x="764" fg:w="1"/><text x="60.7888%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.5388%" y="261" width="0.0792%" height="15" fill="rgb(213,191,49)" fg:x="764" fg:w="1"/><text x="60.7888%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="60.5388%" y="245" width="0.0792%" height="15" fill="rgb(210,226,19)" fg:x="764" fg:w="1"/><text x="60.7888%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="60.5388%" y="229" width="0.0792%" height="15" fill="rgb(229,97,18)" fg:x="764" fg:w="1"/><text x="60.7888%" y="239.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (2 samples, 0.16%)</title><rect x="60.6973%" y="261" width="0.1585%" height="15" fill="rgb(211,167,15)" fg:x="766" fg:w="2"/><text x="60.9473%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="60.7765%" y="245" width="0.0792%" height="15" fill="rgb(210,169,34)" fg:x="767" fg:w="1"/><text x="61.0265%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (12 samples, 0.95%)</title><rect x="60.1426%" y="293" width="0.9509%" height="15" fill="rgb(241,121,31)" fg:x="759" fg:w="12"/><text x="60.3926%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="60.6181%" y="277" width="0.4754%" height="15" fill="rgb(232,40,11)" fg:x="765" fg:w="6"/><text x="60.8681%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="60.8558%" y="261" width="0.2377%" height="15" fill="rgb(205,86,26)" fg:x="768" fg:w="3"/><text x="61.1058%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (22 samples, 1.74%)</title><rect x="59.4295%" y="309" width="1.7433%" height="15" fill="rgb(231,126,28)" fg:x="750" fg:w="22"/><text x="59.6795%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="61.0935%" y="293" width="0.0792%" height="15" fill="rgb(219,221,18)" fg:x="771" fg:w="1"/><text x="61.3435%" y="303.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (2 samples, 0.16%)</title><rect x="61.2520%" y="261" width="0.1585%" height="15" fill="rgb(211,40,0)" fg:x="773" fg:w="2"/><text x="61.5020%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="61.3312%" y="245" width="0.0792%" height="15" fill="rgb(239,85,43)" fg:x="774" fg:w="1"/><text x="61.5812%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="61.3312%" y="229" width="0.0792%" height="15" fill="rgb(231,55,21)" fg:x="774" fg:w="1"/><text x="61.5812%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="61.3312%" y="213" width="0.0792%" height="15" fill="rgb(225,184,43)" fg:x="774" fg:w="1"/><text x="61.5812%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="61.4105%" y="261" width="0.0792%" height="15" fill="rgb(251,158,41)" fg:x="775" fg:w="1"/><text x="61.6605%" y="271.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::bump_space (1 samples, 0.08%)</title><rect x="61.4105%" y="245" width="0.0792%" height="15" fill="rgb(234,159,37)" fg:x="775" fg:w="1"/><text x="61.6605%" y="255.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="61.4897%" y="261" width="0.0792%" height="15" fill="rgb(216,204,22)" fg:x="776" fg:w="1"/><text x="61.7397%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (1 samples, 0.08%)</title><rect x="61.4897%" y="245" width="0.0792%" height="15" fill="rgb(214,17,3)" fg:x="776" fg:w="1"/><text x="61.7397%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="61.4897%" y="229" width="0.0792%" height="15" fill="rgb(212,111,17)" fg:x="776" fg:w="1"/><text x="61.7397%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (7 samples, 0.55%)</title><rect x="61.1727%" y="277" width="0.5547%" height="15" fill="rgb(221,157,24)" fg:x="772" fg:w="7"/><text x="61.4227%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (2 samples, 0.16%)</title><rect x="61.5689%" y="261" width="0.1585%" height="15" fill="rgb(252,16,13)" fg:x="777" fg:w="2"/><text x="61.8189%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="61.5689%" y="245" width="0.1585%" height="15" fill="rgb(221,62,2)" fg:x="777" fg:w="2"/><text x="61.8189%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="61.5689%" y="229" width="0.1585%" height="15" fill="rgb(247,87,22)" fg:x="777" fg:w="2"/><text x="61.8189%" y="239.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="61.5689%" y="213" width="0.1585%" height="15" fill="rgb(215,73,9)" fg:x="777" fg:w="2"/><text x="61.8189%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (8 samples, 0.63%)</title><rect x="61.1727%" y="309" width="0.6339%" height="15" fill="rgb(207,175,33)" fg:x="772" fg:w="8"/><text x="61.4227%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (8 samples, 0.63%)</title><rect x="61.1727%" y="293" width="0.6339%" height="15" fill="rgb(243,129,54)" fg:x="772" fg:w="8"/><text x="61.4227%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="61.7274%" y="277" width="0.0792%" height="15" fill="rgb(227,119,45)" fg:x="779" fg:w="1"/><text x="61.9774%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="61.8859%" y="261" width="0.0792%" height="15" fill="rgb(205,109,36)" fg:x="781" fg:w="1"/><text x="62.1359%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::slice::sort::merge_sort::RunVec&lt;alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}},alloc::slice::stable_sort&lt;regex_syntax::ast::Span,&lt;regex_syntax::ast::Span as core::cmp::PartialOrd&gt;::lt&gt;::{{closure}}&gt;&gt; (1 samples, 0.08%)</title><rect x="61.8859%" y="245" width="0.0792%" height="15" fill="rgb(205,6,39)" fg:x="781" fg:w="1"/><text x="62.1359%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="61.8067%" y="277" width="0.2377%" height="15" fill="rgb(221,32,16)" fg:x="780" fg:w="3"/><text x="62.0567%" y="287.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::push (1 samples, 0.08%)</title><rect x="61.9651%" y="261" width="0.0792%" height="15" fill="rgb(228,144,50)" fg:x="782" fg:w="1"/><text x="62.2151%" y="271.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (38 samples, 3.01%)</title><rect x="59.1125%" y="325" width="3.0111%" height="15" fill="rgb(229,201,53)" fg:x="746" fg:w="38"/><text x="59.3625%" y="335.50">reg..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="61.8067%" y="309" width="0.3170%" height="15" fill="rgb(249,153,27)" fg:x="780" fg:w="4"/><text x="62.0567%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="61.8067%" y="293" width="0.3170%" height="15" fill="rgb(227,106,25)" fg:x="780" fg:w="4"/><text x="62.0567%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="62.0444%" y="277" width="0.0792%" height="15" fill="rgb(230,65,29)" fg:x="783" fg:w="1"/><text x="62.2944%" y="287.50"></text></g><g><title>regex::regex::string::Regex::new (39 samples, 3.09%)</title><rect x="59.1125%" y="357" width="3.0903%" height="15" fill="rgb(221,57,46)" fg:x="746" fg:w="39"/><text x="59.3625%" y="367.50">reg..</text></g><g><title>regex::builders::Builder::build_one_string (39 samples, 3.09%)</title><rect x="59.1125%" y="341" width="3.0903%" height="15" fill="rgb(229,161,17)" fg:x="746" fg:w="39"/><text x="59.3625%" y="351.50">reg..</text></g><g><title>regex_automata::meta::regex::Config::utf8_empty (1 samples, 0.08%)</title><rect x="62.1236%" y="325" width="0.0792%" height="15" fill="rgb(222,213,11)" fg:x="784" fg:w="1"/><text x="62.3736%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="62.5198%" y="277" width="0.0792%" height="15" fill="rgb(235,35,13)" fg:x="789" fg:w="1"/><text x="62.7698%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="62.2821%" y="293" width="0.4754%" height="15" fill="rgb(233,158,34)" fg:x="786" fg:w="6"/><text x="62.5321%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (2 samples, 0.16%)</title><rect x="62.5990%" y="277" width="0.1585%" height="15" fill="rgb(215,151,48)" fg:x="790" fg:w="2"/><text x="62.8490%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (8 samples, 0.63%)</title><rect x="62.2821%" y="309" width="0.6339%" height="15" fill="rgb(229,84,14)" fg:x="786" fg:w="8"/><text x="62.5321%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (2 samples, 0.16%)</title><rect x="62.7575%" y="293" width="0.1585%" height="15" fill="rgb(229,68,14)" fg:x="792" fg:w="2"/><text x="63.0075%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.8368%" y="277" width="0.0792%" height="15" fill="rgb(243,106,26)" fg:x="793" fg:w="1"/><text x="63.0868%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.8368%" y="261" width="0.0792%" height="15" fill="rgb(206,45,38)" fg:x="793" fg:w="1"/><text x="63.0868%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.8368%" y="245" width="0.0792%" height="15" fill="rgb(226,6,15)" fg:x="793" fg:w="1"/><text x="63.0868%" y="255.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (625 samples, 49.52%)</title><rect x="13.4707%" y="469" width="49.5246%" height="15" fill="rgb(232,22,54)" fg:x="170" fg:w="625"/><text x="13.7207%" y="479.50">&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::O..</text></g><g><title>plugins_core::looking::model::qualify_name (605 samples, 47.94%)</title><rect x="15.0555%" y="453" width="47.9398%" height="15" fill="rgb(229,222,32)" fg:x="190" fg:w="605"/><text x="15.3055%" y="463.50">plugins_core::looking::model::qualify_name</text></g><g><title>indefinite::indefinite (604 samples, 47.86%)</title><rect x="15.1347%" y="437" width="47.8605%" height="15" fill="rgb(228,62,29)" fg:x="191" fg:w="604"/><text x="15.3847%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (604 samples, 47.86%)</title><rect x="15.1347%" y="421" width="47.8605%" height="15" fill="rgb(251,103,34)" fg:x="191" fg:w="604"/><text x="15.3847%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (603 samples, 47.78%)</title><rect x="15.2139%" y="405" width="47.7813%" height="15" fill="rgb(233,12,30)" fg:x="192" fg:w="603"/><text x="15.4639%" y="415.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (56 samples, 4.44%)</title><rect x="58.5578%" y="389" width="4.4374%" height="15" fill="rgb(238,52,0)" fg:x="739" fg:w="56"/><text x="58.8078%" y="399.50">indef..</text></g><g><title>indefinite::helper::Helper::starts_with_vowel (56 samples, 4.44%)</title><rect x="58.5578%" y="373" width="4.4374%" height="15" fill="rgb(223,98,5)" fg:x="739" fg:w="56"/><text x="58.8078%" y="383.50">indef..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (10 samples, 0.79%)</title><rect x="62.2029%" y="357" width="0.7924%" height="15" fill="rgb(228,75,37)" fg:x="785" fg:w="10"/><text x="62.4529%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (9 samples, 0.71%)</title><rect x="62.2821%" y="341" width="0.7132%" height="15" fill="rgb(205,115,49)" fg:x="786" fg:w="9"/><text x="62.5321%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (9 samples, 0.71%)</title><rect x="62.2821%" y="325" width="0.7132%" height="15" fill="rgb(250,154,43)" fg:x="786" fg:w="9"/><text x="62.5321%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="62.9160%" y="309" width="0.0792%" height="15" fill="rgb(226,43,29)" fg:x="794" fg:w="1"/><text x="63.1660%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="62.9160%" y="293" width="0.0792%" height="15" fill="rgb(249,228,39)" fg:x="794" fg:w="1"/><text x="63.1660%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="62.9160%" y="277" width="0.0792%" height="15" fill="rgb(216,79,43)" fg:x="794" fg:w="1"/><text x="63.1660%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="62.9160%" y="261" width="0.0792%" height="15" fill="rgb(228,95,12)" fg:x="794" fg:w="1"/><text x="63.1660%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="62.9160%" y="245" width="0.0792%" height="15" fill="rgb(249,221,15)" fg:x="794" fg:w="1"/><text x="63.1660%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::EntityRef as kernel::model::IntoEntry&gt;::into_entry (1 samples, 0.08%)</title><rect x="62.9952%" y="469" width="0.0792%" height="15" fill="rgb(233,34,13)" fg:x="795" fg:w="1"/><text x="63.2452%" y="479.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="62.9952%" y="453" width="0.0792%" height="15" fill="rgb(214,103,39)" fg:x="795" fg:w="1"/><text x="63.2452%" y="463.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="62.9952%" y="437" width="0.0792%" height="15" fill="rgb(251,126,39)" fg:x="795" fg:w="1"/><text x="63.2452%" y="447.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="62.9952%" y="421" width="0.0792%" height="15" fill="rgb(214,216,36)" fg:x="795" fg:w="1"/><text x="63.2452%" y="431.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="62.9952%" y="405" width="0.0792%" height="15" fill="rgb(220,221,8)" fg:x="795" fg:w="1"/><text x="63.2452%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="62.9952%" y="389" width="0.0792%" height="15" fill="rgb(240,216,3)" fg:x="795" fg:w="1"/><text x="63.2452%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="62.9952%" y="373" width="0.0792%" height="15" fill="rgb(232,218,17)" fg:x="795" fg:w="1"/><text x="63.2452%" y="383.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="62.9952%" y="357" width="0.0792%" height="15" fill="rgb(229,163,45)" fg:x="795" fg:w="1"/><text x="63.2452%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entry::Entry&gt; (1 samples, 0.08%)</title><rect x="63.0745%" y="469" width="0.0792%" height="15" fill="rgb(231,110,42)" fg:x="796" fg:w="1"/><text x="63.3245%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::entity::EntityRef&gt; (1 samples, 0.08%)</title><rect x="63.0745%" y="453" width="0.0792%" height="15" fill="rgb(208,170,48)" fg:x="796" fg:w="1"/><text x="63.3245%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="63.0745%" y="437" width="0.0792%" height="15" fill="rgb(239,116,25)" fg:x="796" fg:w="1"/><text x="63.3245%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.2330%" y="389" width="0.0792%" height="15" fill="rgb(219,200,50)" fg:x="798" fg:w="1"/><text x="63.4830%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.2330%" y="373" width="0.0792%" height="15" fill="rgb(245,200,0)" fg:x="798" fg:w="1"/><text x="63.4830%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.2330%" y="357" width="0.0792%" height="15" fill="rgb(245,119,33)" fg:x="798" fg:w="1"/><text x="63.4830%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.2330%" y="341" width="0.0792%" height="15" fill="rgb(231,125,12)" fg:x="798" fg:w="1"/><text x="63.4830%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.2330%" y="325" width="0.0792%" height="15" fill="rgb(216,96,41)" fg:x="798" fg:w="1"/><text x="63.4830%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.2330%" y="309" width="0.0792%" height="15" fill="rgb(248,43,45)" fg:x="798" fg:w="1"/><text x="63.4830%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="63.2330%" y="293" width="0.0792%" height="15" fill="rgb(217,222,7)" fg:x="798" fg:w="1"/><text x="63.4830%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="63.2330%" y="277" width="0.0792%" height="15" fill="rgb(233,28,6)" fg:x="798" fg:w="1"/><text x="63.4830%" y="287.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (3 samples, 0.24%)</title><rect x="63.1537%" y="437" width="0.2377%" height="15" fill="rgb(231,218,15)" fg:x="797" fg:w="3"/><text x="63.4037%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.1537%" y="421" width="0.2377%" height="15" fill="rgb(226,171,48)" fg:x="797" fg:w="3"/><text x="63.4037%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="63.2330%" y="405" width="0.1585%" height="15" fill="rgb(235,201,9)" fg:x="798" fg:w="2"/><text x="63.4830%" y="415.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="63.3122%" y="389" width="0.0792%" height="15" fill="rgb(217,80,15)" fg:x="799" fg:w="1"/><text x="63.5622%" y="399.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="63.3122%" y="373" width="0.0792%" height="15" fill="rgb(219,152,8)" fg:x="799" fg:w="1"/><text x="63.5622%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.4707%" y="181" width="0.0792%" height="15" fill="rgb(243,107,38)" fg:x="801" fg:w="1"/><text x="63.7207%" y="191.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.4707%" y="197" width="0.1585%" height="15" fill="rgb(231,17,5)" fg:x="801" fg:w="2"/><text x="63.7207%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="63.5499%" y="181" width="0.0792%" height="15" fill="rgb(209,25,54)" fg:x="802" fg:w="1"/><text x="63.7999%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (3 samples, 0.24%)</title><rect x="63.4707%" y="293" width="0.2377%" height="15" fill="rgb(219,0,2)" fg:x="801" fg:w="3"/><text x="63.7207%" y="303.50"></text></g><g><title>kernel::model::props::load_props (3 samples, 0.24%)</title><rect x="63.4707%" y="277" width="0.2377%" height="15" fill="rgb(246,9,5)" fg:x="801" fg:w="3"/><text x="63.7207%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (3 samples, 0.24%)</title><rect x="63.4707%" y="261" width="0.2377%" height="15" fill="rgb(226,159,4)" fg:x="801" fg:w="3"/><text x="63.7207%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.4707%" y="245" width="0.2377%" height="15" fill="rgb(219,175,34)" fg:x="801" fg:w="3"/><text x="63.7207%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.4707%" y="229" width="0.2377%" height="15" fill="rgb(236,10,46)" fg:x="801" fg:w="3"/><text x="63.7207%" y="239.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="63.4707%" y="213" width="0.2377%" height="15" fill="rgb(240,211,16)" fg:x="801" fg:w="3"/><text x="63.7207%" y="223.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6292%" y="197" width="0.0792%" height="15" fill="rgb(205,3,43)" fg:x="803" fg:w="1"/><text x="63.8792%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.6292%" y="181" width="0.0792%" height="15" fill="rgb(245,7,22)" fg:x="803" fg:w="1"/><text x="63.8792%" y="191.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.6292%" y="165" width="0.0792%" height="15" fill="rgb(239,132,32)" fg:x="803" fg:w="1"/><text x="63.8792%" y="175.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.6292%" y="149" width="0.0792%" height="15" fill="rgb(228,202,34)" fg:x="803" fg:w="1"/><text x="63.8792%" y="159.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.6292%" y="133" width="0.0792%" height="15" fill="rgb(254,200,22)" fg:x="803" fg:w="1"/><text x="63.8792%" y="143.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (4 samples, 0.32%)</title><rect x="63.4707%" y="325" width="0.3170%" height="15" fill="rgb(219,10,39)" fg:x="801" fg:w="4"/><text x="63.7207%" y="335.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (4 samples, 0.32%)</title><rect x="63.4707%" y="309" width="0.3170%" height="15" fill="rgb(226,210,39)" fg:x="801" fg:w="4"/><text x="63.7207%" y="319.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="63.7084%" y="293" width="0.0792%" height="15" fill="rgb(208,219,16)" fg:x="804" fg:w="1"/><text x="63.9584%" y="303.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="63.7084%" y="277" width="0.0792%" height="15" fill="rgb(216,158,51)" fg:x="804" fg:w="1"/><text x="63.9584%" y="287.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="63.7084%" y="261" width="0.0792%" height="15" fill="rgb(233,14,44)" fg:x="804" fg:w="1"/><text x="63.9584%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7084%" y="245" width="0.0792%" height="15" fill="rgb(237,97,39)" fg:x="804" fg:w="1"/><text x="63.9584%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.7084%" y="229" width="0.0792%" height="15" fill="rgb(218,198,43)" fg:x="804" fg:w="1"/><text x="63.9584%" y="239.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7084%" y="213" width="0.0792%" height="15" fill="rgb(231,104,20)" fg:x="804" fg:w="1"/><text x="63.9584%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.7084%" y="197" width="0.0792%" height="15" fill="rgb(254,36,13)" fg:x="804" fg:w="1"/><text x="63.9584%" y="207.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="63.7084%" y="181" width="0.0792%" height="15" fill="rgb(248,14,50)" fg:x="804" fg:w="1"/><text x="63.9584%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.7084%" y="165" width="0.0792%" height="15" fill="rgb(217,107,29)" fg:x="804" fg:w="1"/><text x="63.9584%" y="175.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="63.7084%" y="149" width="0.0792%" height="15" fill="rgb(251,169,33)" fg:x="804" fg:w="1"/><text x="63.9584%" y="159.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="63.7084%" y="133" width="0.0792%" height="15" fill="rgb(217,108,32)" fg:x="804" fg:w="1"/><text x="63.9584%" y="143.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="63.7084%" y="117" width="0.0792%" height="15" fill="rgb(219,66,42)" fg:x="804" fg:w="1"/><text x="63.9584%" y="127.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="63.7876%" y="213" width="0.0792%" height="15" fill="rgb(206,180,7)" fg:x="805" fg:w="1"/><text x="64.0376%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.7876%" y="197" width="0.0792%" height="15" fill="rgb(208,226,31)" fg:x="805" fg:w="1"/><text x="64.0376%" y="207.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.7876%" y="277" width="0.1585%" height="15" fill="rgb(218,26,49)" fg:x="805" fg:w="2"/><text x="64.0376%" y="287.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.7876%" y="261" width="0.1585%" height="15" fill="rgb(233,197,48)" fg:x="805" fg:w="2"/><text x="64.0376%" y="271.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.7876%" y="245" width="0.1585%" height="15" fill="rgb(252,181,51)" fg:x="805" fg:w="2"/><text x="64.0376%" y="255.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="63.7876%" y="229" width="0.1585%" height="15" fill="rgb(253,90,19)" fg:x="805" fg:w="2"/><text x="64.0376%" y="239.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.8669%" y="213" width="0.0792%" height="15" fill="rgb(215,171,30)" fg:x="806" fg:w="1"/><text x="64.1169%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="63.8669%" y="197" width="0.0792%" height="15" fill="rgb(214,222,9)" fg:x="806" fg:w="1"/><text x="64.1169%" y="207.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="63.8669%" y="181" width="0.0792%" height="15" fill="rgb(223,3,22)" fg:x="806" fg:w="1"/><text x="64.1169%" y="191.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="63.8669%" y="165" width="0.0792%" height="15" fill="rgb(225,196,46)" fg:x="806" fg:w="1"/><text x="64.1169%" y="175.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="63.8669%" y="149" width="0.0792%" height="15" fill="rgb(209,110,37)" fg:x="806" fg:w="1"/><text x="64.1169%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.8669%" y="133" width="0.0792%" height="15" fill="rgb(249,89,12)" fg:x="806" fg:w="1"/><text x="64.1169%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="63.8669%" y="117" width="0.0792%" height="15" fill="rgb(226,27,33)" fg:x="806" fg:w="1"/><text x="64.1169%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="63.8669%" y="101" width="0.0792%" height="15" fill="rgb(213,82,22)" fg:x="806" fg:w="1"/><text x="64.1169%" y="111.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="63.8669%" y="85" width="0.0792%" height="15" fill="rgb(248,140,0)" fg:x="806" fg:w="1"/><text x="64.1169%" y="95.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="63.8669%" y="69" width="0.0792%" height="15" fill="rgb(228,106,3)" fg:x="806" fg:w="1"/><text x="64.1169%" y="79.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="63.8669%" y="53" width="0.0792%" height="15" fill="rgb(209,23,37)" fg:x="806" fg:w="1"/><text x="64.1169%" y="63.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (4 samples, 0.32%)</title><rect x="63.7876%" y="325" width="0.3170%" height="15" fill="rgb(241,93,50)" fg:x="805" fg:w="4"/><text x="64.0376%" y="335.50"></text></g><g><title>kernel::model::props::load_props (4 samples, 0.32%)</title><rect x="63.7876%" y="309" width="0.3170%" height="15" fill="rgb(253,46,43)" fg:x="805" fg:w="4"/><text x="64.0376%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (4 samples, 0.32%)</title><rect x="63.7876%" y="293" width="0.3170%" height="15" fill="rgb(226,206,43)" fg:x="805" fg:w="4"/><text x="64.0376%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="63.9461%" y="277" width="0.1585%" height="15" fill="rgb(217,54,7)" fg:x="807" fg:w="2"/><text x="64.1961%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="63.9461%" y="261" width="0.1585%" height="15" fill="rgb(223,5,52)" fg:x="807" fg:w="2"/><text x="64.1961%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.0254%" y="245" width="0.0792%" height="15" fill="rgb(206,52,46)" fg:x="808" fg:w="1"/><text x="64.2754%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.0254%" y="229" width="0.0792%" height="15" fill="rgb(253,136,11)" fg:x="808" fg:w="1"/><text x="64.2754%" y="239.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="64.1046%" y="325" width="0.0792%" height="15" fill="rgb(208,106,33)" fg:x="809" fg:w="1"/><text x="64.3546%" y="335.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1046%" y="309" width="0.0792%" height="15" fill="rgb(206,54,4)" fg:x="809" fg:w="1"/><text x="64.3546%" y="319.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.1046%" y="293" width="0.0792%" height="15" fill="rgb(213,3,15)" fg:x="809" fg:w="1"/><text x="64.3546%" y="303.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.1838%" y="133" width="0.0792%" height="15" fill="rgb(252,211,39)" fg:x="810" fg:w="1"/><text x="64.4338%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.1838%" y="117" width="0.0792%" height="15" fill="rgb(223,6,36)" fg:x="810" fg:w="1"/><text x="64.4338%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.1838%" y="101" width="0.0792%" height="15" fill="rgb(252,169,45)" fg:x="810" fg:w="1"/><text x="64.4338%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.1838%" y="85" width="0.0792%" height="15" fill="rgb(212,48,26)" fg:x="810" fg:w="1"/><text x="64.4338%" y="95.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.16%)</title><rect x="64.1838%" y="165" width="0.1585%" height="15" fill="rgb(251,102,48)" fg:x="810" fg:w="2"/><text x="64.4338%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="64.1838%" y="149" width="0.1585%" height="15" fill="rgb(243,208,16)" fg:x="810" fg:w="2"/><text x="64.4338%" y="159.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.2631%" y="133" width="0.0792%" height="15" fill="rgb(219,96,24)" fg:x="811" fg:w="1"/><text x="64.5131%" y="143.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="64.1838%" y="309" width="0.2377%" height="15" fill="rgb(219,33,29)" fg:x="810" fg:w="3"/><text x="64.4338%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="64.1838%" y="293" width="0.2377%" height="15" fill="rgb(223,176,5)" fg:x="810" fg:w="3"/><text x="64.4338%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="64.1838%" y="277" width="0.2377%" height="15" fill="rgb(228,140,14)" fg:x="810" fg:w="3"/><text x="64.4338%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.1838%" y="261" width="0.2377%" height="15" fill="rgb(217,179,31)" fg:x="810" fg:w="3"/><text x="64.4338%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (3 samples, 0.24%)</title><rect x="64.1838%" y="245" width="0.2377%" height="15" fill="rgb(230,9,30)" fg:x="810" fg:w="3"/><text x="64.4338%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="64.1838%" y="229" width="0.2377%" height="15" fill="rgb(230,136,20)" fg:x="810" fg:w="3"/><text x="64.4338%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (3 samples, 0.24%)</title><rect x="64.1838%" y="213" width="0.2377%" height="15" fill="rgb(215,210,22)" fg:x="810" fg:w="3"/><text x="64.4338%" y="223.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.24%)</title><rect x="64.1838%" y="197" width="0.2377%" height="15" fill="rgb(218,43,5)" fg:x="810" fg:w="3"/><text x="64.4338%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="64.1838%" y="181" width="0.2377%" height="15" fill="rgb(216,11,5)" fg:x="810" fg:w="3"/><text x="64.4338%" y="191.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.3423%" y="165" width="0.0792%" height="15" fill="rgb(209,82,29)" fg:x="812" fg:w="1"/><text x="64.5923%" y="175.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.3423%" y="149" width="0.0792%" height="15" fill="rgb(244,115,12)" fg:x="812" fg:w="1"/><text x="64.5923%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.3423%" y="133" width="0.0792%" height="15" fill="rgb(222,82,18)" fg:x="812" fg:w="1"/><text x="64.5923%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.3423%" y="117" width="0.0792%" height="15" fill="rgb(249,227,8)" fg:x="812" fg:w="1"/><text x="64.5923%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="64.3423%" y="101" width="0.0792%" height="15" fill="rgb(253,141,45)" fg:x="812" fg:w="1"/><text x="64.5923%" y="111.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (2 samples, 0.16%)</title><rect x="64.4216%" y="213" width="0.1585%" height="15" fill="rgb(234,184,4)" fg:x="813" fg:w="2"/><text x="64.6716%" y="223.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="64.4216%" y="229" width="0.2377%" height="15" fill="rgb(218,194,23)" fg:x="813" fg:w="3"/><text x="64.6716%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="64.5800%" y="213" width="0.0792%" height="15" fill="rgb(235,66,41)" fg:x="815" fg:w="1"/><text x="64.8300%" y="223.50"></text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (657 samples, 52.06%)</title><rect x="12.6783%" y="629" width="52.0602%" height="15" fill="rgb(245,217,1)" fg:x="160" fg:w="657"/><text x="12.9283%" y="639.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>kernel::plugins::mw::apply_middleware (649 samples, 51.43%)</title><rect x="13.3122%" y="613" width="51.4263%" height="15" fill="rgb(229,91,1)" fg:x="168" fg:w="649"/><text x="13.5622%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (649 samples, 51.43%)</title><rect x="13.3122%" y="597" width="51.4263%" height="15" fill="rgb(207,101,30)" fg:x="168" fg:w="649"/><text x="13.5622%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (649 samples, 51.43%)</title><rect x="13.3122%" y="581" width="51.4263%" height="15" fill="rgb(223,82,49)" fg:x="168" fg:w="649"/><text x="13.5622%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (649 samples, 51.43%)</title><rect x="13.3122%" y="565" width="51.4263%" height="15" fill="rgb(218,167,17)" fg:x="168" fg:w="649"/><text x="13.5622%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (649 samples, 51.43%)</title><rect x="13.3122%" y="549" width="51.4263%" height="15" fill="rgb(208,103,14)" fg:x="168" fg:w="649"/><text x="13.5622%" y="559.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (649 samples, 51.43%)</title><rect x="13.3122%" y="533" width="51.4263%" height="15" fill="rgb(238,20,8)" fg:x="168" fg:w="649"/><text x="13.5622%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (649 samples, 51.43%)</title><rect x="13.3122%" y="517" width="51.4263%" height="15" fill="rgb(218,80,54)" fg:x="168" fg:w="649"/><text x="13.5622%" y="527.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (648 samples, 51.35%)</title><rect x="13.3914%" y="501" width="51.3471%" height="15" fill="rgb(240,144,17)" fg:x="169" fg:w="648"/><text x="13.6414%" y="511.50">&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform</text></g><g><title>plugins_core::looking::model::new_area_observation (648 samples, 51.35%)</title><rect x="13.3914%" y="485" width="51.3471%" height="15" fill="rgb(245,27,50)" fg:x="169" fg:w="648"/><text x="13.6414%" y="495.50">plugins_core::looking::model::new_area_observation</text></g><g><title>kernel::model::entry::Entry::scope (20 samples, 1.58%)</title><rect x="63.1537%" y="469" width="1.5848%" height="15" fill="rgb(251,51,7)" fg:x="797" fg:w="20"/><text x="63.4037%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (20 samples, 1.58%)</title><rect x="63.1537%" y="453" width="1.5848%" height="15" fill="rgb(245,217,29)" fg:x="797" fg:w="20"/><text x="63.4037%" y="463.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (17 samples, 1.35%)</title><rect x="63.3914%" y="437" width="1.3471%" height="15" fill="rgb(221,176,29)" fg:x="800" fg:w="17"/><text x="63.6414%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (17 samples, 1.35%)</title><rect x="63.3914%" y="421" width="1.3471%" height="15" fill="rgb(212,180,24)" fg:x="800" fg:w="17"/><text x="63.6414%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 1.35%)</title><rect x="63.3914%" y="405" width="1.3471%" height="15" fill="rgb(254,24,2)" fg:x="800" fg:w="17"/><text x="63.6414%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (17 samples, 1.35%)</title><rect x="63.3914%" y="389" width="1.3471%" height="15" fill="rgb(230,100,2)" fg:x="800" fg:w="17"/><text x="63.6414%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (17 samples, 1.35%)</title><rect x="63.3914%" y="373" width="1.3471%" height="15" fill="rgb(219,142,25)" fg:x="800" fg:w="17"/><text x="63.6414%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (17 samples, 1.35%)</title><rect x="63.3914%" y="357" width="1.3471%" height="15" fill="rgb(240,73,43)" fg:x="800" fg:w="17"/><text x="63.6414%" y="367.50"></text></g><g><title>engine::internal::Entities::add_persisted (17 samples, 1.35%)</title><rect x="63.3914%" y="341" width="1.3471%" height="15" fill="rgb(214,114,15)" fg:x="800" fg:w="17"/><text x="63.6414%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity (7 samples, 0.55%)</title><rect x="64.1838%" y="325" width="0.5547%" height="15" fill="rgb(207,130,4)" fg:x="810" fg:w="7"/><text x="64.4338%" y="335.50"></text></g><g><title>serde_json::de::from_trait (4 samples, 0.32%)</title><rect x="64.4216%" y="309" width="0.3170%" height="15" fill="rgb(221,25,40)" fg:x="813" fg:w="4"/><text x="64.6716%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.4216%" y="293" width="0.3170%" height="15" fill="rgb(241,184,7)" fg:x="813" fg:w="4"/><text x="64.6716%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.4216%" y="277" width="0.3170%" height="15" fill="rgb(235,159,4)" fg:x="813" fg:w="4"/><text x="64.6716%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (4 samples, 0.32%)</title><rect x="64.4216%" y="261" width="0.3170%" height="15" fill="rgb(214,87,48)" fg:x="813" fg:w="4"/><text x="64.6716%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (4 samples, 0.32%)</title><rect x="64.4216%" y="245" width="0.3170%" height="15" fill="rgb(246,198,24)" fg:x="813" fg:w="4"/><text x="64.6716%" y="255.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.6593%" y="229" width="0.0792%" height="15" fill="rgb(209,66,40)" fg:x="816" fg:w="1"/><text x="64.9093%" y="239.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6593%" y="213" width="0.0792%" height="15" fill="rgb(233,147,39)" fg:x="816" fg:w="1"/><text x="64.9093%" y="223.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.6593%" y="197" width="0.0792%" height="15" fill="rgb(231,145,52)" fg:x="816" fg:w="1"/><text x="64.9093%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.6593%" y="181" width="0.0792%" height="15" fill="rgb(206,20,26)" fg:x="816" fg:w="1"/><text x="64.9093%" y="191.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="64.6593%" y="165" width="0.0792%" height="15" fill="rgb(238,220,4)" fg:x="816" fg:w="1"/><text x="64.9093%" y="175.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="64.7385%" y="565" width="0.0792%" height="15" fill="rgb(252,195,42)" fg:x="817" fg:w="1"/><text x="64.9885%" y="575.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="64.7385%" y="549" width="0.0792%" height="15" fill="rgb(209,10,6)" fg:x="817" fg:w="1"/><text x="64.9885%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="64.7385%" y="533" width="0.0792%" height="15" fill="rgb(229,3,52)" fg:x="817" fg:w="1"/><text x="64.9885%" y="543.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="64.7385%" y="517" width="0.0792%" height="15" fill="rgb(253,49,37)" fg:x="817" fg:w="1"/><text x="64.9885%" y="527.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="64.7385%" y="501" width="0.0792%" height="15" fill="rgb(240,103,49)" fg:x="817" fg:w="1"/><text x="64.9885%" y="511.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7385%" y="485" width="0.0792%" height="15" fill="rgb(250,182,30)" fg:x="817" fg:w="1"/><text x="64.9885%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7385%" y="469" width="0.0792%" height="15" fill="rgb(248,8,30)" fg:x="817" fg:w="1"/><text x="64.9885%" y="479.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="64.7385%" y="453" width="0.0792%" height="15" fill="rgb(237,120,30)" fg:x="817" fg:w="1"/><text x="64.9885%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7385%" y="437" width="0.0792%" height="15" fill="rgb(221,146,34)" fg:x="817" fg:w="1"/><text x="64.9885%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="64.7385%" y="421" width="0.0792%" height="15" fill="rgb(242,55,13)" fg:x="817" fg:w="1"/><text x="64.9885%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="64.7385%" y="405" width="0.0792%" height="15" fill="rgb(242,112,31)" fg:x="817" fg:w="1"/><text x="64.9885%" y="415.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="64.7385%" y="389" width="0.0792%" height="15" fill="rgb(249,192,27)" fg:x="817" fg:w="1"/><text x="64.9885%" y="399.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="64.8177%" y="485" width="0.0792%" height="15" fill="rgb(208,204,44)" fg:x="818" fg:w="1"/><text x="65.0677%" y="495.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="64.8970%" y="437" width="0.0792%" height="15" fill="rgb(208,93,54)" fg:x="819" fg:w="1"/><text x="65.1470%" y="447.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="64.8970%" y="421" width="0.0792%" height="15" fill="rgb(242,1,31)" fg:x="819" fg:w="1"/><text x="65.1470%" y="431.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.08%)</title><rect x="64.8970%" y="405" width="0.0792%" height="15" fill="rgb(241,83,25)" fg:x="819" fg:w="1"/><text x="65.1470%" y="415.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="64.8970%" y="485" width="0.1585%" height="15" fill="rgb(205,169,50)" fg:x="819" fg:w="2"/><text x="65.1470%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="64.8970%" y="469" width="0.1585%" height="15" fill="rgb(239,186,37)" fg:x="819" fg:w="2"/><text x="65.1470%" y="479.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="64.8970%" y="453" width="0.1585%" height="15" fill="rgb(205,221,10)" fg:x="819" fg:w="2"/><text x="65.1470%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="64.9762%" y="437" width="0.0792%" height="15" fill="rgb(218,196,15)" fg:x="820" fg:w="1"/><text x="65.2262%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="64.9762%" y="421" width="0.0792%" height="15" fill="rgb(218,196,35)" fg:x="820" fg:w="1"/><text x="65.2262%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde::__private::de::content::Content&gt; (1 samples, 0.08%)</title><rect x="64.9762%" y="405" width="0.0792%" height="15" fill="rgb(233,63,24)" fg:x="820" fg:w="1"/><text x="65.2262%" y="415.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (4 samples, 0.32%)</title><rect x="64.8177%" y="549" width="0.3170%" height="15" fill="rgb(225,8,4)" fg:x="818" fg:w="4"/><text x="65.0677%" y="559.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (4 samples, 0.32%)</title><rect x="64.8177%" y="533" width="0.3170%" height="15" fill="rgb(234,105,35)" fg:x="818" fg:w="4"/><text x="65.0677%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (4 samples, 0.32%)</title><rect x="64.8177%" y="517" width="0.3170%" height="15" fill="rgb(236,21,32)" fg:x="818" fg:w="4"/><text x="65.0677%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (4 samples, 0.32%)</title><rect x="64.8177%" y="501" width="0.3170%" height="15" fill="rgb(228,109,6)" fg:x="818" fg:w="4"/><text x="65.0677%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.0555%" y="485" width="0.0792%" height="15" fill="rgb(229,215,31)" fg:x="821" fg:w="1"/><text x="65.3055%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.0555%" y="469" width="0.0792%" height="15" fill="rgb(221,52,54)" fg:x="821" fg:w="1"/><text x="65.3055%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="65.0555%" y="453" width="0.0792%" height="15" fill="rgb(252,129,43)" fg:x="821" fg:w="1"/><text x="65.3055%" y="463.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="65.0555%" y="437" width="0.0792%" height="15" fill="rgb(248,183,27)" fg:x="821" fg:w="1"/><text x="65.3055%" y="447.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="65.0555%" y="421" width="0.0792%" height="15" fill="rgb(250,0,22)" fg:x="821" fg:w="1"/><text x="65.3055%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="64.7385%" y="597" width="0.4754%" height="15" fill="rgb(213,166,10)" fg:x="817" fg:w="6"/><text x="64.9885%" y="607.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="64.7385%" y="581" width="0.4754%" height="15" fill="rgb(207,163,36)" fg:x="817" fg:w="6"/><text x="64.9885%" y="591.50"></text></g><g><title>kernel::model::deserialize_entity (5 samples, 0.40%)</title><rect x="64.8177%" y="565" width="0.3962%" height="15" fill="rgb(208,122,22)" fg:x="818" fg:w="5"/><text x="65.0677%" y="575.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="65.1347%" y="549" width="0.0792%" height="15" fill="rgb(207,104,49)" fg:x="822" fg:w="1"/><text x="65.3847%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.1347%" y="533" width="0.0792%" height="15" fill="rgb(248,211,50)" fg:x="822" fg:w="1"/><text x="65.3847%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.1347%" y="517" width="0.0792%" height="15" fill="rgb(217,13,45)" fg:x="822" fg:w="1"/><text x="65.3847%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.1347%" y="501" width="0.0792%" height="15" fill="rgb(211,216,49)" fg:x="822" fg:w="1"/><text x="65.3847%" y="511.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.1347%" y="485" width="0.0792%" height="15" fill="rgb(221,58,53)" fg:x="822" fg:w="1"/><text x="65.3847%" y="495.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.1347%" y="469" width="0.0792%" height="15" fill="rgb(220,112,41)" fg:x="822" fg:w="1"/><text x="65.3847%" y="479.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.1347%" y="453" width="0.0792%" height="15" fill="rgb(236,38,28)" fg:x="822" fg:w="1"/><text x="65.3847%" y="463.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="65.1347%" y="437" width="0.0792%" height="15" fill="rgb(227,195,22)" fg:x="822" fg:w="1"/><text x="65.3847%" y="447.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="65.1347%" y="421" width="0.0792%" height="15" fill="rgb(214,55,33)" fg:x="822" fg:w="1"/><text x="65.3847%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (7 samples, 0.55%)</title><rect x="64.7385%" y="613" width="0.5547%" height="15" fill="rgb(248,80,13)" fg:x="817" fg:w="7"/><text x="64.9885%" y="623.50"></text></g><g><title>kernel::model::entry::Entry::new (1 samples, 0.08%)</title><rect x="65.2139%" y="597" width="0.0792%" height="15" fill="rgb(238,52,6)" fg:x="823" fg:w="1"/><text x="65.4639%" y="607.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="65.2139%" y="581" width="0.0792%" height="15" fill="rgb(224,198,47)" fg:x="823" fg:w="1"/><text x="65.4639%" y="591.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.2139%" y="565" width="0.0792%" height="15" fill="rgb(233,171,20)" fg:x="823" fg:w="1"/><text x="65.4639%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.2139%" y="549" width="0.0792%" height="15" fill="rgb(241,30,25)" fg:x="823" fg:w="1"/><text x="65.4639%" y="559.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="65.2139%" y="533" width="0.0792%" height="15" fill="rgb(207,171,38)" fg:x="823" fg:w="1"/><text x="65.4639%" y="543.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="65.2139%" y="517" width="0.0792%" height="15" fill="rgb(234,70,1)" fg:x="823" fg:w="1"/><text x="65.4639%" y="527.50"></text></g><g><title>core::fmt::Formatter::write_fmt (1 samples, 0.08%)</title><rect x="65.2139%" y="501" width="0.0792%" height="15" fill="rgb(232,178,18)" fg:x="823" fg:w="1"/><text x="65.4639%" y="511.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="65.2139%" y="485" width="0.0792%" height="15" fill="rgb(241,78,40)" fg:x="823" fg:w="1"/><text x="65.4639%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (825 samples, 65.37%)</title><rect x="0.0000%" y="805" width="65.3724%" height="15" fill="rgb(222,35,25)" fg:x="0" fg:w="825"/><text x="0.2500%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (825 samples, 65.37%)</title><rect x="0.0000%" y="789" width="65.3724%" height="15" fill="rgb(207,92,16)" fg:x="0" fg:w="825"/><text x="0.2500%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (825 samples, 65.37%)</title><rect x="0.0000%" y="773" width="65.3724%" height="15" fill="rgb(216,59,51)" fg:x="0" fg:w="825"/><text x="0.2500%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (665 samples, 52.69%)</title><rect x="12.6783%" y="757" width="52.6941%" height="15" fill="rgb(213,80,28)" fg:x="160" fg:w="665"/><text x="12.9283%" y="767.50">engine::session::Session::evaluate_and_perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (665 samples, 52.69%)</title><rect x="12.6783%" y="741" width="52.6941%" height="15" fill="rgb(220,93,7)" fg:x="160" fg:w="665"/><text x="12.9283%" y="751.50">engine::perform::StandardPerformer::evaluate_and_perform</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (665 samples, 52.69%)</title><rect x="12.6783%" y="725" width="52.6941%" height="15" fill="rgb(225,24,44)" fg:x="160" fg:w="665"/><text x="12.9283%" y="735.50">&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>core::iter::adapters::try_process (665 samples, 52.69%)</title><rect x="12.6783%" y="709" width="52.6941%" height="15" fill="rgb(243,74,40)" fg:x="160" fg:w="665"/><text x="12.9283%" y="719.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (665 samples, 52.69%)</title><rect x="12.6783%" y="693" width="52.6941%" height="15" fill="rgb(228,39,7)" fg:x="160" fg:w="665"/><text x="12.9283%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (665 samples, 52.69%)</title><rect x="12.6783%" y="677" width="52.6941%" height="15" fill="rgb(227,79,8)" fg:x="160" fg:w="665"/><text x="12.9283%" y="687.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fo..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (665 samples, 52.69%)</title><rect x="12.6783%" y="661" width="52.6941%" height="15" fill="rgb(236,58,11)" fg:x="160" fg:w="665"/><text x="12.9283%" y="671.50">&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (665 samples, 52.69%)</title><rect x="12.6783%" y="645" width="52.6941%" height="15" fill="rgb(249,63,35)" fg:x="160" fg:w="665"/><text x="12.9283%" y="655.50">&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform</text></g><g><title>engine::perform::StandardPerformer::evaluate_living (8 samples, 0.63%)</title><rect x="64.7385%" y="629" width="0.6339%" height="15" fill="rgb(252,114,16)" fg:x="817" fg:w="8"/><text x="64.9885%" y="639.50"></text></g><g><title>&lt;kernel::model::entry::Entry as engine::users::model::HasUsernames&gt;::find_name_key (1 samples, 0.08%)</title><rect x="65.2932%" y="613" width="0.0792%" height="15" fill="rgb(254,151,24)" fg:x="824" fg:w="1"/><text x="65.5432%" y="623.50"></text></g><g><title>engine::users::model::username_to_key (1 samples, 0.08%)</title><rect x="65.2932%" y="597" width="0.0792%" height="15" fill="rgb(253,54,39)" fg:x="824" fg:w="1"/><text x="65.5432%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="65.2932%" y="581" width="0.0792%" height="15" fill="rgb(243,25,45)" fg:x="824" fg:w="1"/><text x="65.5432%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.2932%" y="565" width="0.0792%" height="15" fill="rgb(234,134,9)" fg:x="824" fg:w="1"/><text x="65.5432%" y="575.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="65.2932%" y="549" width="0.0792%" height="15" fill="rgb(227,166,31)" fg:x="824" fg:w="1"/><text x="65.5432%" y="559.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="65.2932%" y="533" width="0.0792%" height="15" fill="rgb(245,143,41)" fg:x="824" fg:w="1"/><text x="65.5432%" y="543.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.3724%" y="629" width="0.0792%" height="15" fill="rgb(238,181,32)" fg:x="825" fg:w="1"/><text x="65.6224%" y="639.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="65.3724%" y="677" width="0.1585%" height="15" fill="rgb(224,113,18)" fg:x="825" fg:w="2"/><text x="65.6224%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;kernel::model::scopes::JsonValue&gt; (2 samples, 0.16%)</title><rect x="65.3724%" y="661" width="0.1585%" height="15" fill="rgb(240,229,28)" fg:x="825" fg:w="2"/><text x="65.6224%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="65.3724%" y="645" width="0.1585%" height="15" fill="rgb(250,185,3)" fg:x="825" fg:w="2"/><text x="65.6224%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4517%" y="629" width="0.0792%" height="15" fill="rgb(212,59,25)" fg:x="826" fg:w="1"/><text x="65.7017%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="65.4517%" y="613" width="0.0792%" height="15" fill="rgb(221,87,20)" fg:x="826" fg:w="1"/><text x="65.7017%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="65.4517%" y="597" width="0.0792%" height="15" fill="rgb(213,74,28)" fg:x="826" fg:w="1"/><text x="65.7017%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.4517%" y="581" width="0.0792%" height="15" fill="rgb(224,132,34)" fg:x="826" fg:w="1"/><text x="65.7017%" y="591.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.3724%" y="757" width="0.2377%" height="15" fill="rgb(222,101,24)" fg:x="825" fg:w="3"/><text x="65.6224%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::session::State&gt; (3 samples, 0.24%)</title><rect x="65.3724%" y="741" width="0.2377%" height="15" fill="rgb(254,142,4)" fg:x="825" fg:w="3"/><text x="65.6224%" y="751.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.3724%" y="725" width="0.2377%" height="15" fill="rgb(230,229,49)" fg:x="825" fg:w="3"/><text x="65.6224%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;engine::internal::LoadedEntity&gt; (3 samples, 0.24%)</title><rect x="65.3724%" y="709" width="0.2377%" height="15" fill="rgb(238,70,47)" fg:x="825" fg:w="3"/><text x="65.6224%" y="719.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.24%)</title><rect x="65.3724%" y="693" width="0.2377%" height="15" fill="rgb(231,160,17)" fg:x="825" fg:w="3"/><text x="65.6224%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="65.5309%" y="677" width="0.0792%" height="15" fill="rgb(218,68,53)" fg:x="827" fg:w="1"/><text x="65.7809%" y="687.50"></text></g><g><title>&lt;kernel::model::EntityPtr as core::convert::From&lt;kernel::model::entity::Entity&gt;&gt;::from (1 samples, 0.08%)</title><rect x="65.6101%" y="677" width="0.0792%" height="15" fill="rgb(236,111,10)" fg:x="828" fg:w="1"/><text x="65.8601%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (1 samples, 0.08%)</title><rect x="65.6101%" y="661" width="0.0792%" height="15" fill="rgb(224,34,41)" fg:x="828" fg:w="1"/><text x="65.8601%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="65.6101%" y="645" width="0.0792%" height="15" fill="rgb(241,118,19)" fg:x="828" fg:w="1"/><text x="65.8601%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.6101%" y="629" width="0.0792%" height="15" fill="rgb(238,129,25)" fg:x="828" fg:w="1"/><text x="65.8601%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.6101%" y="613" width="0.0792%" height="15" fill="rgb(238,22,31)" fg:x="828" fg:w="1"/><text x="65.8601%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.6101%" y="597" width="0.0792%" height="15" fill="rgb(222,174,48)" fg:x="828" fg:w="1"/><text x="65.8601%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.6101%" y="581" width="0.0792%" height="15" fill="rgb(206,152,40)" fg:x="828" fg:w="1"/><text x="65.8601%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.6101%" y="565" width="0.0792%" height="15" fill="rgb(218,99,54)" fg:x="828" fg:w="1"/><text x="65.8601%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.6101%" y="549" width="0.0792%" height="15" fill="rgb(220,174,26)" fg:x="828" fg:w="1"/><text x="65.8601%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="65.6101%" y="533" width="0.0792%" height="15" fill="rgb(245,116,9)" fg:x="828" fg:w="1"/><text x="65.8601%" y="543.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="65.6101%" y="517" width="0.0792%" height="15" fill="rgb(209,72,35)" fg:x="828" fg:w="1"/><text x="65.8601%" y="527.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="65.6101%" y="501" width="0.0792%" height="15" fill="rgb(226,126,21)" fg:x="828" fg:w="1"/><text x="65.8601%" y="511.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="65.6894%" y="677" width="0.0792%" height="15" fill="rgb(227,192,1)" fg:x="829" fg:w="1"/><text x="65.9394%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="65.6894%" y="661" width="0.0792%" height="15" fill="rgb(237,180,29)" fg:x="829" fg:w="1"/><text x="65.9394%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="65.6894%" y="645" width="0.0792%" height="15" fill="rgb(230,197,35)" fg:x="829" fg:w="1"/><text x="65.9394%" y="655.50"></text></g><g><title>kernel::session::get_my_session (1 samples, 0.08%)</title><rect x="65.6894%" y="629" width="0.0792%" height="15" fill="rgb(246,193,31)" fg:x="829" fg:w="1"/><text x="65.9394%" y="639.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (1 samples, 0.08%)</title><rect x="65.7686%" y="661" width="0.0792%" height="15" fill="rgb(241,36,4)" fg:x="830" fg:w="1"/><text x="66.0186%" y="671.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (1 samples, 0.08%)</title><rect x="65.7686%" y="645" width="0.0792%" height="15" fill="rgb(241,130,17)" fg:x="830" fg:w="1"/><text x="66.0186%" y="655.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="65.7686%" y="629" width="0.0792%" height="15" fill="rgb(206,137,32)" fg:x="830" fg:w="1"/><text x="66.0186%" y="639.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="65.7686%" y="613" width="0.0792%" height="15" fill="rgb(237,228,51)" fg:x="830" fg:w="1"/><text x="66.0186%" y="623.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (5 samples, 0.40%)</title><rect x="65.6101%" y="725" width="0.3962%" height="15" fill="rgb(243,6,42)" fg:x="828" fg:w="5"/><text x="65.8601%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (5 samples, 0.40%)</title><rect x="65.6101%" y="709" width="0.3962%" height="15" fill="rgb(251,74,28)" fg:x="828" fg:w="5"/><text x="65.8601%" y="719.50"></text></g><g><title>engine::internal::Entities::add_persisted (5 samples, 0.40%)</title><rect x="65.6101%" y="693" width="0.3962%" height="15" fill="rgb(218,20,49)" fg:x="828" fg:w="5"/><text x="65.8601%" y="703.50"></text></g><g><title>kernel::model::deserialize_entity (3 samples, 0.24%)</title><rect x="65.7686%" y="677" width="0.2377%" height="15" fill="rgb(238,28,14)" fg:x="830" fg:w="3"/><text x="66.0186%" y="687.50"></text></g><g><title>serde_json::de::from_trait (2 samples, 0.16%)</title><rect x="65.8479%" y="661" width="0.1585%" height="15" fill="rgb(229,40,46)" fg:x="831" fg:w="2"/><text x="66.0979%" y="671.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.8479%" y="645" width="0.1585%" height="15" fill="rgb(244,195,20)" fg:x="831" fg:w="2"/><text x="66.0979%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.8479%" y="629" width="0.1585%" height="15" fill="rgb(253,56,35)" fg:x="831" fg:w="2"/><text x="66.0979%" y="639.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.8479%" y="613" width="0.1585%" height="15" fill="rgb(210,149,44)" fg:x="831" fg:w="2"/><text x="66.0979%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.8479%" y="597" width="0.1585%" height="15" fill="rgb(240,135,12)" fg:x="831" fg:w="2"/><text x="66.0979%" y="607.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.8479%" y="581" width="0.1585%" height="15" fill="rgb(251,24,50)" fg:x="831" fg:w="2"/><text x="66.0979%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.8479%" y="565" width="0.1585%" height="15" fill="rgb(243,200,47)" fg:x="831" fg:w="2"/><text x="66.0979%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.8479%" y="549" width="0.1585%" height="15" fill="rgb(224,166,26)" fg:x="831" fg:w="2"/><text x="66.0979%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.8479%" y="533" width="0.1585%" height="15" fill="rgb(233,0,47)" fg:x="831" fg:w="2"/><text x="66.0979%" y="543.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.8479%" y="517" width="0.1585%" height="15" fill="rgb(253,80,5)" fg:x="831" fg:w="2"/><text x="66.0979%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.8479%" y="501" width="0.1585%" height="15" fill="rgb(214,133,25)" fg:x="831" fg:w="2"/><text x="66.0979%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (2 samples, 0.16%)</title><rect x="65.8479%" y="485" width="0.1585%" height="15" fill="rgb(209,27,14)" fg:x="831" fg:w="2"/><text x="66.0979%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.16%)</title><rect x="65.8479%" y="469" width="0.1585%" height="15" fill="rgb(219,102,51)" fg:x="831" fg:w="2"/><text x="66.0979%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="65.9271%" y="453" width="0.0792%" height="15" fill="rgb(237,18,16)" fg:x="832" fg:w="1"/><text x="66.1771%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="65.9271%" y="437" width="0.0792%" height="15" fill="rgb(241,85,17)" fg:x="832" fg:w="1"/><text x="66.1771%" y="447.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="66.0063%" y="725" width="0.0792%" height="15" fill="rgb(236,90,42)" fg:x="833" fg:w="1"/><text x="66.2563%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="66.0063%" y="709" width="0.0792%" height="15" fill="rgb(249,57,21)" fg:x="833" fg:w="1"/><text x="66.2563%" y="719.50"></text></g><g><title>anyhow::error::&lt;impl anyhow::Error&gt;::construct (1 samples, 0.08%)</title><rect x="66.0856%" y="693" width="0.0792%" height="15" fill="rgb(243,12,36)" fg:x="834" fg:w="1"/><text x="66.3356%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="66.0856%" y="677" width="0.0792%" height="15" fill="rgb(253,128,47)" fg:x="834" fg:w="1"/><text x="66.3356%" y="687.50"></text></g><g><title>&lt;plugins_dynlib::DynamicPlugin as kernel::plugins::Plugin&gt;::initialize (4 samples, 0.32%)</title><rect x="66.0856%" y="709" width="0.3170%" height="15" fill="rgb(207,33,20)" fg:x="834" fg:w="4"/><text x="66.3356%" y="719.50"></text></g><g><title>libloading::os::unix::Library::open (3 samples, 0.24%)</title><rect x="66.1648%" y="693" width="0.2377%" height="15" fill="rgb(233,215,35)" fg:x="835" fg:w="3"/><text x="66.4148%" y="703.50"></text></g><g><title>dlopen (3 samples, 0.24%)</title><rect x="66.1648%" y="677" width="0.2377%" height="15" fill="rgb(249,188,52)" fg:x="835" fg:w="3"/><text x="66.4148%" y="687.50"></text></g><g><title>_dl_catch_error (3 samples, 0.24%)</title><rect x="66.1648%" y="661" width="0.2377%" height="15" fill="rgb(225,12,32)" fg:x="835" fg:w="3"/><text x="66.4148%" y="671.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.1648%" y="645" width="0.2377%" height="15" fill="rgb(247,98,14)" fg:x="835" fg:w="3"/><text x="66.4148%" y="655.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.24%)</title><rect x="66.1648%" y="629" width="0.2377%" height="15" fill="rgb(247,219,48)" fg:x="835" fg:w="3"/><text x="66.4148%" y="639.50"></text></g><g><title>_dl_catch_exception (2 samples, 0.16%)</title><rect x="66.2441%" y="613" width="0.1585%" height="15" fill="rgb(253,60,48)" fg:x="836" fg:w="2"/><text x="66.4941%" y="623.50"></text></g><g><title>kernel::plugins::SessionPlugins::initialize (5 samples, 0.40%)</title><rect x="66.0856%" y="725" width="0.3962%" height="15" fill="rgb(245,15,52)" fg:x="834" fg:w="5"/><text x="66.3356%" y="735.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.08%)</title><rect x="66.4025%" y="709" width="0.0792%" height="15" fill="rgb(220,133,28)" fg:x="838" fg:w="1"/><text x="66.6525%" y="719.50"></text></g><g><title>clock_gettime (1 samples, 0.08%)</title><rect x="66.4025%" y="693" width="0.0792%" height="15" fill="rgb(217,180,4)" fg:x="838" fg:w="1"/><text x="66.6525%" y="703.50"></text></g><g><title>&lt;engine::domain::Domain as engine::domain::SessionOpener&gt;::open_session (12 samples, 0.95%)</title><rect x="65.6101%" y="757" width="0.9509%" height="15" fill="rgb(251,24,1)" fg:x="828" fg:w="12"/><text x="65.8601%" y="767.50"></text></g><g><title>engine::session::Session::new (12 samples, 0.95%)</title><rect x="65.6101%" y="741" width="0.9509%" height="15" fill="rgb(212,185,49)" fg:x="828" fg:w="12"/><text x="65.8601%" y="751.50"></text></g><g><title>kernel::plugins::SessionPlugins::middleware (1 samples, 0.08%)</title><rect x="66.4818%" y="725" width="0.0792%" height="15" fill="rgb(215,175,22)" fg:x="839" fg:w="1"/><text x="66.7318%" y="735.50"></text></g><g><title>core::iter::adapters::try_process (1 samples, 0.08%)</title><rect x="66.4818%" y="709" width="0.0792%" height="15" fill="rgb(250,205,14)" fg:x="839" fg:w="1"/><text x="66.7318%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.4818%" y="693" width="0.0792%" height="15" fill="rgb(225,211,22)" fg:x="839" fg:w="1"/><text x="66.7318%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.4818%" y="677" width="0.0792%" height="15" fill="rgb(251,179,42)" fg:x="839" fg:w="1"/><text x="66.7318%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="66.7195%" y="709" width="0.0792%" height="15" fill="rgb(208,216,51)" fg:x="842" fg:w="1"/><text x="66.9695%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7195%" y="693" width="0.0792%" height="15" fill="rgb(235,36,11)" fg:x="842" fg:w="1"/><text x="66.9695%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7195%" y="677" width="0.0792%" height="15" fill="rgb(213,189,28)" fg:x="842" fg:w="1"/><text x="66.9695%" y="687.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7195%" y="661" width="0.0792%" height="15" fill="rgb(227,203,42)" fg:x="842" fg:w="1"/><text x="66.9695%" y="671.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="66.7987%" y="661" width="0.0792%" height="15" fill="rgb(244,72,36)" fg:x="843" fg:w="1"/><text x="67.0487%" y="671.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.7987%" y="645" width="0.0792%" height="15" fill="rgb(213,53,17)" fg:x="843" fg:w="1"/><text x="67.0487%" y="655.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.7987%" y="629" width="0.0792%" height="15" fill="rgb(207,167,3)" fg:x="843" fg:w="1"/><text x="67.0487%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.7987%" y="613" width="0.0792%" height="15" fill="rgb(216,98,30)" fg:x="843" fg:w="1"/><text x="67.0487%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.7987%" y="597" width="0.0792%" height="15" fill="rgb(236,123,15)" fg:x="843" fg:w="1"/><text x="67.0487%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="66.7987%" y="581" width="0.0792%" height="15" fill="rgb(248,81,50)" fg:x="843" fg:w="1"/><text x="67.0487%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="66.7987%" y="565" width="0.0792%" height="15" fill="rgb(214,120,4)" fg:x="843" fg:w="1"/><text x="67.0487%" y="575.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="66.7987%" y="549" width="0.0792%" height="15" fill="rgb(208,179,34)" fg:x="843" fg:w="1"/><text x="67.0487%" y="559.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="66.9572%" y="581" width="0.0792%" height="15" fill="rgb(227,140,7)" fg:x="845" fg:w="1"/><text x="67.2072%" y="591.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="66.9572%" y="565" width="0.0792%" height="15" fill="rgb(214,22,6)" fg:x="845" fg:w="1"/><text x="67.2072%" y="575.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="66.9572%" y="549" width="0.0792%" height="15" fill="rgb(207,137,27)" fg:x="845" fg:w="1"/><text x="67.2072%" y="559.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="66.9572%" y="533" width="0.0792%" height="15" fill="rgb(210,8,46)" fg:x="845" fg:w="1"/><text x="67.2072%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="66.9572%" y="517" width="0.0792%" height="15" fill="rgb(240,16,54)" fg:x="845" fg:w="1"/><text x="67.2072%" y="527.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.8780%" y="613" width="0.2377%" height="15" fill="rgb(211,209,29)" fg:x="844" fg:w="3"/><text x="67.1280%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.24%)</title><rect x="66.8780%" y="597" width="0.2377%" height="15" fill="rgb(226,228,24)" fg:x="844" fg:w="3"/><text x="67.1280%" y="607.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.0365%" y="581" width="0.0792%" height="15" fill="rgb(222,84,9)" fg:x="846" fg:w="1"/><text x="67.2865%" y="591.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.0365%" y="565" width="0.0792%" height="15" fill="rgb(234,203,30)" fg:x="846" fg:w="1"/><text x="67.2865%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.0365%" y="549" width="0.0792%" height="15" fill="rgb(238,109,14)" fg:x="846" fg:w="1"/><text x="67.2865%" y="559.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (5 samples, 0.40%)</title><rect x="66.7987%" y="677" width="0.3962%" height="15" fill="rgb(233,206,34)" fg:x="843" fg:w="5"/><text x="67.0487%" y="687.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="66.8780%" y="661" width="0.3170%" height="15" fill="rgb(220,167,47)" fg:x="844" fg:w="4"/><text x="67.1280%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="66.8780%" y="645" width="0.3170%" height="15" fill="rgb(238,105,10)" fg:x="844" fg:w="4"/><text x="67.1280%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="66.8780%" y="629" width="0.3170%" height="15" fill="rgb(213,227,17)" fg:x="844" fg:w="4"/><text x="67.1280%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="67.1157%" y="613" width="0.0792%" height="15" fill="rgb(217,132,38)" fg:x="847" fg:w="1"/><text x="67.3657%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="67.1157%" y="597" width="0.0792%" height="15" fill="rgb(242,146,4)" fg:x="847" fg:w="1"/><text x="67.3657%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="67.1157%" y="581" width="0.0792%" height="15" fill="rgb(212,61,9)" fg:x="847" fg:w="1"/><text x="67.3657%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.1949%" y="677" width="0.0792%" height="15" fill="rgb(247,126,22)" fg:x="848" fg:w="1"/><text x="67.4449%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="67.1949%" y="661" width="0.0792%" height="15" fill="rgb(220,196,2)" fg:x="848" fg:w="1"/><text x="67.4449%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.1949%" y="645" width="0.0792%" height="15" fill="rgb(208,46,4)" fg:x="848" fg:w="1"/><text x="67.4449%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="67.1949%" y="629" width="0.0792%" height="15" fill="rgb(252,104,46)" fg:x="848" fg:w="1"/><text x="67.4449%" y="639.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.1949%" y="613" width="0.0792%" height="15" fill="rgb(237,152,48)" fg:x="848" fg:w="1"/><text x="67.4449%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.16%)</title><rect x="67.3534%" y="629" width="0.1585%" height="15" fill="rgb(221,59,37)" fg:x="850" fg:w="2"/><text x="67.6034%" y="639.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.4326%" y="613" width="0.0792%" height="15" fill="rgb(209,202,51)" fg:x="851" fg:w="1"/><text x="67.6826%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.08%)</title><rect x="67.4326%" y="597" width="0.0792%" height="15" fill="rgb(228,81,30)" fg:x="851" fg:w="1"/><text x="67.6826%" y="607.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5119%" y="629" width="0.0792%" height="15" fill="rgb(227,42,39)" fg:x="852" fg:w="1"/><text x="67.7619%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.5119%" y="613" width="0.0792%" height="15" fill="rgb(221,26,2)" fg:x="852" fg:w="1"/><text x="67.7619%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5119%" y="597" width="0.0792%" height="15" fill="rgb(254,61,31)" fg:x="852" fg:w="1"/><text x="67.7619%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="67.5119%" y="581" width="0.0792%" height="15" fill="rgb(222,173,38)" fg:x="852" fg:w="1"/><text x="67.7619%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="67.5911%" y="597" width="0.0792%" height="15" fill="rgb(218,50,12)" fg:x="853" fg:w="1"/><text x="67.8411%" y="607.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="67.5911%" y="581" width="0.0792%" height="15" fill="rgb(223,88,40)" fg:x="853" fg:w="1"/><text x="67.8411%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.5911%" y="565" width="0.0792%" height="15" fill="rgb(237,54,19)" fg:x="853" fg:w="1"/><text x="67.8411%" y="575.50"></text></g><g><title>engine::session::Session::flush (13 samples, 1.03%)</title><rect x="66.7195%" y="741" width="1.0301%" height="15" fill="rgb(251,129,25)" fg:x="842" fg:w="13"/><text x="66.9695%" y="751.50"></text></g><g><title>engine::session::Session::save_entity_changes (13 samples, 1.03%)</title><rect x="66.7195%" y="725" width="1.0301%" height="15" fill="rgb(238,97,19)" fg:x="842" fg:w="13"/><text x="66.9695%" y="735.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (12 samples, 0.95%)</title><rect x="66.7987%" y="709" width="0.9509%" height="15" fill="rgb(240,169,18)" fg:x="843" fg:w="12"/><text x="67.0487%" y="719.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (12 samples, 0.95%)</title><rect x="66.7987%" y="693" width="0.9509%" height="15" fill="rgb(230,187,49)" fg:x="843" fg:w="12"/><text x="67.0487%" y="703.50"></text></g><g><title>kernel::model::any_entity_changes (6 samples, 0.48%)</title><rect x="67.2742%" y="677" width="0.4754%" height="15" fill="rgb(209,44,26)" fg:x="849" fg:w="6"/><text x="67.5242%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (6 samples, 0.48%)</title><rect x="67.2742%" y="661" width="0.4754%" height="15" fill="rgb(244,0,6)" fg:x="849" fg:w="6"/><text x="67.5242%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (6 samples, 0.48%)</title><rect x="67.2742%" y="645" width="0.4754%" height="15" fill="rgb(248,18,21)" fg:x="849" fg:w="6"/><text x="67.5242%" y="655.50"></text></g><g><title>serde::ser::Serializer::collect_map (2 samples, 0.16%)</title><rect x="67.5911%" y="629" width="0.1585%" height="15" fill="rgb(245,180,19)" fg:x="853" fg:w="2"/><text x="67.8411%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="67.5911%" y="613" width="0.1585%" height="15" fill="rgb(252,118,36)" fg:x="853" fg:w="2"/><text x="67.8411%" y="623.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.08%)</title><rect x="67.6704%" y="597" width="0.0792%" height="15" fill="rgb(210,224,19)" fg:x="854" fg:w="1"/><text x="67.9204%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.6704%" y="581" width="0.0792%" height="15" fill="rgb(218,30,24)" fg:x="854" fg:w="1"/><text x="67.9204%" y="591.50"></text></g><g><title>plugins_core::build::Build::holding (1 samples, 0.08%)</title><rect x="67.7496%" y="741" width="0.0792%" height="15" fill="rgb(219,75,50)" fg:x="855" fg:w="1"/><text x="67.9996%" y="751.50"></text></g><g><title>plugins_core::tools::set_container (1 samples, 0.08%)</title><rect x="67.7496%" y="725" width="0.0792%" height="15" fill="rgb(234,72,50)" fg:x="855" fg:w="1"/><text x="67.9996%" y="735.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="67.7496%" y="709" width="0.0792%" height="15" fill="rgb(219,100,48)" fg:x="855" fg:w="1"/><text x="67.9996%" y="719.50"></text></g><g><title>plugins_core::carrying::model::_::&lt;impl serde::ser::Serialize for plugins_core::carrying::model::Location&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7496%" y="693" width="0.0792%" height="15" fill="rgb(253,5,41)" fg:x="855" fg:w="1"/><text x="67.9996%" y="703.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.7496%" y="677" width="0.0792%" height="15" fill="rgb(247,181,11)" fg:x="855" fg:w="1"/><text x="67.9996%" y="687.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::EntityRef&gt;::serialize (1 samples, 0.08%)</title><rect x="67.7496%" y="661" width="0.0792%" height="15" fill="rgb(222,223,25)" fg:x="855" fg:w="1"/><text x="67.9996%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="67.7496%" y="645" width="0.0792%" height="15" fill="rgb(214,198,28)" fg:x="855" fg:w="1"/><text x="67.9996%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="67.7496%" y="629" width="0.0792%" height="15" fill="rgb(230,46,43)" fg:x="855" fg:w="1"/><text x="67.9996%" y="639.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="67.8288%" y="741" width="0.0792%" height="15" fill="rgb(233,65,53)" fg:x="856" fg:w="1"/><text x="68.0788%" y="751.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="67.8288%" y="725" width="0.0792%" height="15" fill="rgb(221,121,27)" fg:x="856" fg:w="1"/><text x="68.0788%" y="735.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="67.8288%" y="709" width="0.0792%" height="15" fill="rgb(247,70,47)" fg:x="856" fg:w="1"/><text x="68.0788%" y="719.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.8288%" y="693" width="0.0792%" height="15" fill="rgb(228,85,35)" fg:x="856" fg:w="1"/><text x="68.0788%" y="703.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.8288%" y="677" width="0.0792%" height="15" fill="rgb(209,50,18)" fg:x="856" fg:w="1"/><text x="68.0788%" y="687.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.8288%" y="661" width="0.0792%" height="15" fill="rgb(250,19,35)" fg:x="856" fg:w="1"/><text x="68.0788%" y="671.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.8288%" y="645" width="0.0792%" height="15" fill="rgb(253,107,29)" fg:x="856" fg:w="1"/><text x="68.0788%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8288%" y="629" width="0.0792%" height="15" fill="rgb(252,179,29)" fg:x="856" fg:w="1"/><text x="68.0788%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8288%" y="613" width="0.0792%" height="15" fill="rgb(238,194,6)" fg:x="856" fg:w="1"/><text x="68.0788%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8288%" y="597" width="0.0792%" height="15" fill="rgb(238,164,29)" fg:x="856" fg:w="1"/><text x="68.0788%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8288%" y="581" width="0.0792%" height="15" fill="rgb(224,25,9)" fg:x="856" fg:w="1"/><text x="68.0788%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="67.8288%" y="565" width="0.0792%" height="15" fill="rgb(244,153,23)" fg:x="856" fg:w="1"/><text x="68.0788%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="67.8288%" y="549" width="0.0792%" height="15" fill="rgb(212,203,14)" fg:x="856" fg:w="1"/><text x="68.0788%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="67.8288%" y="533" width="0.0792%" height="15" fill="rgb(220,164,20)" fg:x="856" fg:w="1"/><text x="68.0788%" y="543.50"></text></g><g><title>plugins_core::build::Build::into_entry (1 samples, 0.08%)</title><rect x="67.9081%" y="677" width="0.0792%" height="15" fill="rgb(222,203,48)" fg:x="857" fg:w="1"/><text x="68.1581%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="67.9081%" y="661" width="0.0792%" height="15" fill="rgb(215,159,22)" fg:x="857" fg:w="1"/><text x="68.1581%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="67.9081%" y="645" width="0.0792%" height="15" fill="rgb(216,183,47)" fg:x="857" fg:w="1"/><text x="68.1581%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="67.9081%" y="629" width="0.0792%" height="15" fill="rgb(229,195,25)" fg:x="857" fg:w="1"/><text x="68.1581%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="67.9081%" y="613" width="0.0792%" height="15" fill="rgb(224,132,51)" fg:x="857" fg:w="1"/><text x="68.1581%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="67.9081%" y="597" width="0.0792%" height="15" fill="rgb(240,63,7)" fg:x="857" fg:w="1"/><text x="68.1581%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="67.9081%" y="581" width="0.0792%" height="15" fill="rgb(249,182,41)" fg:x="857" fg:w="1"/><text x="68.1581%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.9081%" y="565" width="0.0792%" height="15" fill="rgb(243,47,26)" fg:x="857" fg:w="1"/><text x="68.1581%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9081%" y="549" width="0.0792%" height="15" fill="rgb(233,48,2)" fg:x="857" fg:w="1"/><text x="68.1581%" y="559.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.9081%" y="533" width="0.0792%" height="15" fill="rgb(244,165,34)" fg:x="857" fg:w="1"/><text x="68.1581%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9081%" y="517" width="0.0792%" height="15" fill="rgb(207,89,7)" fg:x="857" fg:w="1"/><text x="68.1581%" y="527.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="67.9081%" y="501" width="0.0792%" height="15" fill="rgb(244,117,36)" fg:x="857" fg:w="1"/><text x="68.1581%" y="511.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9081%" y="485" width="0.0792%" height="15" fill="rgb(226,144,34)" fg:x="857" fg:w="1"/><text x="68.1581%" y="495.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="67.9081%" y="469" width="0.0792%" height="15" fill="rgb(213,23,19)" fg:x="857" fg:w="1"/><text x="68.1581%" y="479.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="67.9081%" y="453" width="0.0792%" height="15" fill="rgb(217,75,12)" fg:x="857" fg:w="1"/><text x="68.1581%" y="463.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="67.9081%" y="437" width="0.0792%" height="15" fill="rgb(224,159,17)" fg:x="857" fg:w="1"/><text x="68.1581%" y="447.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="67.9873%" y="661" width="0.1585%" height="15" fill="rgb(217,118,1)" fg:x="858" fg:w="2"/><text x="68.2373%" y="671.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="67.9873%" y="645" width="0.1585%" height="15" fill="rgb(232,180,48)" fg:x="858" fg:w="2"/><text x="68.2373%" y="655.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="67.9873%" y="629" width="0.1585%" height="15" fill="rgb(230,27,33)" fg:x="858" fg:w="2"/><text x="68.2373%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="68.0666%" y="613" width="0.0792%" height="15" fill="rgb(205,31,21)" fg:x="859" fg:w="1"/><text x="68.3166%" y="623.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="68.0666%" y="597" width="0.0792%" height="15" fill="rgb(253,59,4)" fg:x="859" fg:w="1"/><text x="68.3166%" y="607.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="68.0666%" y="581" width="0.0792%" height="15" fill="rgb(224,201,9)" fg:x="859" fg:w="1"/><text x="68.3166%" y="591.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="68.0666%" y="565" width="0.0792%" height="15" fill="rgb(229,206,30)" fg:x="859" fg:w="1"/><text x="68.3166%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="68.1458%" y="613" width="0.0792%" height="15" fill="rgb(212,67,47)" fg:x="860" fg:w="1"/><text x="68.3958%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.1458%" y="597" width="0.0792%" height="15" fill="rgb(211,96,50)" fg:x="860" fg:w="1"/><text x="68.3958%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.1458%" y="581" width="0.0792%" height="15" fill="rgb(252,114,18)" fg:x="860" fg:w="1"/><text x="68.3958%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.1458%" y="565" width="0.0792%" height="15" fill="rgb(223,58,37)" fg:x="860" fg:w="1"/><text x="68.3958%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.1458%" y="549" width="0.0792%" height="15" fill="rgb(237,70,4)" fg:x="860" fg:w="1"/><text x="68.3958%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.1458%" y="533" width="0.0792%" height="15" fill="rgb(244,85,46)" fg:x="860" fg:w="1"/><text x="68.3958%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.1458%" y="517" width="0.0792%" height="15" fill="rgb(223,39,52)" fg:x="860" fg:w="1"/><text x="68.3958%" y="527.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.1458%" y="501" width="0.0792%" height="15" fill="rgb(218,200,14)" fg:x="860" fg:w="1"/><text x="68.3958%" y="511.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.1458%" y="485" width="0.0792%" height="15" fill="rgb(208,171,16)" fg:x="860" fg:w="1"/><text x="68.3958%" y="495.50"></text></g><g><title>core::iter::adapters::try_process (5 samples, 0.40%)</title><rect x="67.9081%" y="725" width="0.3962%" height="15" fill="rgb(234,200,18)" fg:x="857" fg:w="5"/><text x="68.1581%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.40%)</title><rect x="67.9081%" y="709" width="0.3962%" height="15" fill="rgb(228,45,11)" fg:x="857" fg:w="5"/><text x="68.1581%" y="719.50"></text></g><g><title>plugins_core::build::QuickThing::make (5 samples, 0.40%)</title><rect x="67.9081%" y="693" width="0.3962%" height="15" fill="rgb(237,182,11)" fg:x="857" fg:w="5"/><text x="68.1581%" y="703.50"></text></g><g><title>plugins_core::build::Build::leads_to (4 samples, 0.32%)</title><rect x="67.9873%" y="677" width="0.3170%" height="15" fill="rgb(241,175,49)" fg:x="858" fg:w="4"/><text x="68.2373%" y="687.50"></text></g><g><title>plugins_core::tools::leads_to (2 samples, 0.16%)</title><rect x="68.1458%" y="661" width="0.1585%" height="15" fill="rgb(247,38,35)" fg:x="860" fg:w="2"/><text x="68.3958%" y="671.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="68.1458%" y="645" width="0.1585%" height="15" fill="rgb(228,39,49)" fg:x="860" fg:w="2"/><text x="68.3958%" y="655.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="68.1458%" y="629" width="0.1585%" height="15" fill="rgb(226,101,26)" fg:x="860" fg:w="2"/><text x="68.3958%" y="639.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="68.2250%" y="613" width="0.0792%" height="15" fill="rgb(206,141,19)" fg:x="861" fg:w="1"/><text x="68.4750%" y="623.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="68.2250%" y="597" width="0.0792%" height="15" fill="rgb(211,200,13)" fg:x="861" fg:w="1"/><text x="68.4750%" y="607.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="68.2250%" y="581" width="0.0792%" height="15" fill="rgb(241,121,6)" fg:x="861" fg:w="1"/><text x="68.4750%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.2250%" y="565" width="0.0792%" height="15" fill="rgb(234,221,29)" fg:x="861" fg:w="1"/><text x="68.4750%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="68.2250%" y="549" width="0.0792%" height="15" fill="rgb(229,136,5)" fg:x="861" fg:w="1"/><text x="68.4750%" y="559.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.2250%" y="533" width="0.0792%" height="15" fill="rgb(238,36,11)" fg:x="861" fg:w="1"/><text x="68.4750%" y="543.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="68.3043%" y="629" width="0.0792%" height="15" fill="rgb(251,55,41)" fg:x="862" fg:w="1"/><text x="68.5543%" y="639.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="68.3043%" y="613" width="0.0792%" height="15" fill="rgb(242,34,40)" fg:x="862" fg:w="1"/><text x="68.5543%" y="623.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.3043%" y="597" width="0.0792%" height="15" fill="rgb(215,42,17)" fg:x="862" fg:w="1"/><text x="68.5543%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.3043%" y="581" width="0.0792%" height="15" fill="rgb(207,44,46)" fg:x="862" fg:w="1"/><text x="68.5543%" y="591.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="68.3835%" y="629" width="0.0792%" height="15" fill="rgb(211,206,28)" fg:x="863" fg:w="1"/><text x="68.6335%" y="639.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (4 samples, 0.32%)</title><rect x="68.3043%" y="661" width="0.3170%" height="15" fill="rgb(237,167,16)" fg:x="862" fg:w="4"/><text x="68.5543%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.32%)</title><rect x="68.3043%" y="645" width="0.3170%" height="15" fill="rgb(233,66,6)" fg:x="862" fg:w="4"/><text x="68.5543%" y="655.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.16%)</title><rect x="68.4628%" y="629" width="0.1585%" height="15" fill="rgb(246,123,29)" fg:x="864" fg:w="2"/><text x="68.7128%" y="639.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="68.5420%" y="613" width="0.0792%" height="15" fill="rgb(209,62,40)" fg:x="865" fg:w="1"/><text x="68.7920%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="68.5420%" y="597" width="0.0792%" height="15" fill="rgb(218,4,25)" fg:x="865" fg:w="1"/><text x="68.7920%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.6212%" y="629" width="0.0792%" height="15" fill="rgb(253,91,49)" fg:x="866" fg:w="1"/><text x="68.8712%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="68.6212%" y="661" width="0.1585%" height="15" fill="rgb(228,155,29)" fg:x="866" fg:w="2"/><text x="68.8712%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.16%)</title><rect x="68.6212%" y="645" width="0.1585%" height="15" fill="rgb(243,57,37)" fg:x="866" fg:w="2"/><text x="68.8712%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.7005%" y="629" width="0.0792%" height="15" fill="rgb(244,167,17)" fg:x="867" fg:w="1"/><text x="68.9505%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="68.7005%" y="613" width="0.0792%" height="15" fill="rgb(207,181,38)" fg:x="867" fg:w="1"/><text x="68.9505%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="68.7005%" y="597" width="0.0792%" height="15" fill="rgb(211,8,23)" fg:x="867" fg:w="1"/><text x="68.9505%" y="607.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="68.7005%" y="581" width="0.0792%" height="15" fill="rgb(235,11,44)" fg:x="867" fg:w="1"/><text x="68.9505%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="68.9382%" y="533" width="0.0792%" height="15" fill="rgb(248,18,52)" fg:x="870" fg:w="1"/><text x="69.1882%" y="543.50"></text></g><g><title>engine::session::Session::flush (10 samples, 0.79%)</title><rect x="68.3043%" y="725" width="0.7924%" height="15" fill="rgb(208,4,7)" fg:x="862" fg:w="10"/><text x="68.5543%" y="735.50"></text></g><g><title>engine::session::Session::save_entity_changes (10 samples, 0.79%)</title><rect x="68.3043%" y="709" width="0.7924%" height="15" fill="rgb(240,17,39)" fg:x="862" fg:w="10"/><text x="68.5543%" y="719.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (10 samples, 0.79%)</title><rect x="68.3043%" y="693" width="0.7924%" height="15" fill="rgb(207,170,3)" fg:x="862" fg:w="10"/><text x="68.5543%" y="703.50"></text></g><g><title>engine::session::SavesEntities::check_for_changes (10 samples, 0.79%)</title><rect x="68.3043%" y="677" width="0.7924%" height="15" fill="rgb(236,100,52)" fg:x="862" fg:w="10"/><text x="68.5543%" y="687.50"></text></g><g><title>kernel::model::any_entity_changes (4 samples, 0.32%)</title><rect x="68.7797%" y="661" width="0.3170%" height="15" fill="rgb(246,78,51)" fg:x="868" fg:w="4"/><text x="69.0297%" y="671.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (3 samples, 0.24%)</title><rect x="68.8590%" y="645" width="0.2377%" height="15" fill="rgb(211,17,15)" fg:x="869" fg:w="3"/><text x="69.1090%" y="655.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 0.24%)</title><rect x="68.8590%" y="629" width="0.2377%" height="15" fill="rgb(209,59,46)" fg:x="869" fg:w="3"/><text x="69.1090%" y="639.50"></text></g><g><title>serde::ser::Serializer::collect_map (3 samples, 0.24%)</title><rect x="68.8590%" y="613" width="0.2377%" height="15" fill="rgb(210,92,25)" fg:x="869" fg:w="3"/><text x="69.1090%" y="623.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.16%)</title><rect x="68.9382%" y="597" width="0.1585%" height="15" fill="rgb(238,174,52)" fg:x="870" fg:w="2"/><text x="69.1882%" y="607.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.9382%" y="581" width="0.1585%" height="15" fill="rgb(230,73,7)" fg:x="870" fg:w="2"/><text x="69.1882%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="68.9382%" y="565" width="0.1585%" height="15" fill="rgb(243,124,40)" fg:x="870" fg:w="2"/><text x="69.1882%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="68.9382%" y="549" width="0.1585%" height="15" fill="rgb(244,170,11)" fg:x="870" fg:w="2"/><text x="69.1882%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0174%" y="533" width="0.0792%" height="15" fill="rgb(207,114,54)" fg:x="871" fg:w="1"/><text x="69.2674%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0174%" y="517" width="0.0792%" height="15" fill="rgb(205,42,20)" fg:x="871" fg:w="1"/><text x="69.2674%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0174%" y="501" width="0.0792%" height="15" fill="rgb(230,30,28)" fg:x="871" fg:w="1"/><text x="69.2674%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="69.0174%" y="485" width="0.0792%" height="15" fill="rgb(205,73,54)" fg:x="871" fg:w="1"/><text x="69.2674%" y="495.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (1 samples, 0.08%)</title><rect x="69.0174%" y="469" width="0.0792%" height="15" fill="rgb(254,227,23)" fg:x="871" fg:w="1"/><text x="69.2674%" y="479.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.0174%" y="453" width="0.0792%" height="15" fill="rgb(228,202,34)" fg:x="871" fg:w="1"/><text x="69.2674%" y="463.50"></text></g><g><title>kernel::model::EntityPtr::new_blank (1 samples, 0.08%)</title><rect x="69.0967%" y="725" width="0.0792%" height="15" fill="rgb(222,225,37)" fg:x="872" fg:w="1"/><text x="69.3467%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::entry (1 samples, 0.08%)</title><rect x="69.1759%" y="693" width="0.0792%" height="15" fill="rgb(221,14,54)" fg:x="873" fg:w="1"/><text x="69.4259%" y="703.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.1759%" y="677" width="0.0792%" height="15" fill="rgb(254,102,2)" fg:x="873" fg:w="1"/><text x="69.4259%" y="687.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="69.1759%" y="709" width="0.1585%" height="15" fill="rgb(232,104,17)" fg:x="873" fg:w="2"/><text x="69.4259%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="69.2552%" y="693" width="0.0792%" height="15" fill="rgb(250,220,14)" fg:x="874" fg:w="1"/><text x="69.5052%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="69.2552%" y="677" width="0.0792%" height="15" fill="rgb(241,158,9)" fg:x="874" fg:w="1"/><text x="69.5052%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.2552%" y="661" width="0.0792%" height="15" fill="rgb(246,9,43)" fg:x="874" fg:w="1"/><text x="69.5052%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.2552%" y="645" width="0.0792%" height="15" fill="rgb(206,73,33)" fg:x="874" fg:w="1"/><text x="69.5052%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.2552%" y="629" width="0.0792%" height="15" fill="rgb(222,79,8)" fg:x="874" fg:w="1"/><text x="69.5052%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.2552%" y="613" width="0.0792%" height="15" fill="rgb(234,8,54)" fg:x="874" fg:w="1"/><text x="69.5052%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2552%" y="597" width="0.0792%" height="15" fill="rgb(209,134,38)" fg:x="874" fg:w="1"/><text x="69.5052%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.2552%" y="581" width="0.0792%" height="15" fill="rgb(230,127,29)" fg:x="874" fg:w="1"/><text x="69.5052%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.2552%" y="565" width="0.0792%" height="15" fill="rgb(242,44,41)" fg:x="874" fg:w="1"/><text x="69.5052%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.2552%" y="549" width="0.0792%" height="15" fill="rgb(222,56,43)" fg:x="874" fg:w="1"/><text x="69.5052%" y="559.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.3344%" y="661" width="0.0792%" height="15" fill="rgb(238,39,47)" fg:x="875" fg:w="1"/><text x="69.5844%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.3344%" y="645" width="0.0792%" height="15" fill="rgb(226,79,43)" fg:x="875" fg:w="1"/><text x="69.5844%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.3344%" y="629" width="0.0792%" height="15" fill="rgb(242,105,53)" fg:x="875" fg:w="1"/><text x="69.5844%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3344%" y="613" width="0.0792%" height="15" fill="rgb(251,132,46)" fg:x="875" fg:w="1"/><text x="69.5844%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3344%" y="597" width="0.0792%" height="15" fill="rgb(231,77,14)" fg:x="875" fg:w="1"/><text x="69.5844%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="69.3344%" y="581" width="0.0792%" height="15" fill="rgb(240,135,9)" fg:x="875" fg:w="1"/><text x="69.5844%" y="591.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="69.3344%" y="693" width="0.1585%" height="15" fill="rgb(248,109,14)" fg:x="875" fg:w="2"/><text x="69.5844%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="69.3344%" y="677" width="0.1585%" height="15" fill="rgb(227,146,52)" fg:x="875" fg:w="2"/><text x="69.5844%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (1 samples, 0.08%)</title><rect x="69.4136%" y="661" width="0.0792%" height="15" fill="rgb(232,54,3)" fg:x="876" fg:w="1"/><text x="69.6636%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.4136%" y="645" width="0.0792%" height="15" fill="rgb(229,201,43)" fg:x="876" fg:w="1"/><text x="69.6636%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.4136%" y="629" width="0.0792%" height="15" fill="rgb(252,161,33)" fg:x="876" fg:w="1"/><text x="69.6636%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4136%" y="613" width="0.0792%" height="15" fill="rgb(226,146,40)" fg:x="876" fg:w="1"/><text x="69.6636%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4136%" y="597" width="0.0792%" height="15" fill="rgb(219,47,25)" fg:x="876" fg:w="1"/><text x="69.6636%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="69.4136%" y="581" width="0.0792%" height="15" fill="rgb(250,135,13)" fg:x="876" fg:w="1"/><text x="69.6636%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="69.4136%" y="565" width="0.0792%" height="15" fill="rgb(219,229,18)" fg:x="876" fg:w="1"/><text x="69.6636%" y="575.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (1 samples, 0.08%)</title><rect x="69.4929%" y="645" width="0.0792%" height="15" fill="rgb(217,152,27)" fg:x="877" fg:w="1"/><text x="69.7429%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.4929%" y="629" width="0.0792%" height="15" fill="rgb(225,71,47)" fg:x="877" fg:w="1"/><text x="69.7429%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.4929%" y="613" width="0.0792%" height="15" fill="rgb(220,139,14)" fg:x="877" fg:w="1"/><text x="69.7429%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4929%" y="597" width="0.0792%" height="15" fill="rgb(247,54,32)" fg:x="877" fg:w="1"/><text x="69.7429%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4929%" y="581" width="0.0792%" height="15" fill="rgb(252,131,39)" fg:x="877" fg:w="1"/><text x="69.7429%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.4929%" y="565" width="0.0792%" height="15" fill="rgb(210,108,39)" fg:x="877" fg:w="1"/><text x="69.7429%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4929%" y="549" width="0.0792%" height="15" fill="rgb(205,23,29)" fg:x="877" fg:w="1"/><text x="69.7429%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.4929%" y="533" width="0.0792%" height="15" fill="rgb(246,139,46)" fg:x="877" fg:w="1"/><text x="69.7429%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.4929%" y="517" width="0.0792%" height="15" fill="rgb(250,81,26)" fg:x="877" fg:w="1"/><text x="69.7429%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.4929%" y="501" width="0.0792%" height="15" fill="rgb(214,104,7)" fg:x="877" fg:w="1"/><text x="69.7429%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.4929%" y="485" width="0.0792%" height="15" fill="rgb(233,189,8)" fg:x="877" fg:w="1"/><text x="69.7429%" y="495.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="69.5721%" y="629" width="0.0792%" height="15" fill="rgb(228,141,17)" fg:x="878" fg:w="1"/><text x="69.8221%" y="639.50"></text></g><g><title>plugins_core::build::Build::holding (7 samples, 0.55%)</title><rect x="69.1759%" y="725" width="0.5547%" height="15" fill="rgb(247,157,1)" fg:x="873" fg:w="7"/><text x="69.4259%" y="735.50"></text></g><g><title>plugins_core::tools::set_container (5 samples, 0.40%)</title><rect x="69.3344%" y="709" width="0.3962%" height="15" fill="rgb(249,225,5)" fg:x="875" fg:w="5"/><text x="69.5844%" y="719.50"></text></g><g><title>plugins_core::carrying::model::Containing::start_carrying (3 samples, 0.24%)</title><rect x="69.4929%" y="693" width="0.2377%" height="15" fill="rgb(242,55,13)" fg:x="877" fg:w="3"/><text x="69.7429%" y="703.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (3 samples, 0.24%)</title><rect x="69.4929%" y="677" width="0.2377%" height="15" fill="rgb(230,49,50)" fg:x="877" fg:w="3"/><text x="69.7429%" y="687.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (3 samples, 0.24%)</title><rect x="69.4929%" y="661" width="0.2377%" height="15" fill="rgb(241,111,38)" fg:x="877" fg:w="3"/><text x="69.7429%" y="671.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="69.5721%" y="645" width="0.1585%" height="15" fill="rgb(252,155,4)" fg:x="878" fg:w="2"/><text x="69.8221%" y="655.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="69.6513%" y="629" width="0.0792%" height="15" fill="rgb(212,69,32)" fg:x="879" fg:w="1"/><text x="69.9013%" y="639.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="69.6513%" y="613" width="0.0792%" height="15" fill="rgb(243,107,47)" fg:x="879" fg:w="1"/><text x="69.9013%" y="623.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6513%" y="597" width="0.0792%" height="15" fill="rgb(247,130,12)" fg:x="879" fg:w="1"/><text x="69.9013%" y="607.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6513%" y="581" width="0.0792%" height="15" fill="rgb(233,74,16)" fg:x="879" fg:w="1"/><text x="69.9013%" y="591.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.6513%" y="565" width="0.0792%" height="15" fill="rgb(208,58,18)" fg:x="879" fg:w="1"/><text x="69.9013%" y="575.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6513%" y="549" width="0.0792%" height="15" fill="rgb(242,225,1)" fg:x="879" fg:w="1"/><text x="69.9013%" y="559.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.6513%" y="533" width="0.0792%" height="15" fill="rgb(249,39,40)" fg:x="879" fg:w="1"/><text x="69.9013%" y="543.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.6513%" y="517" width="0.0792%" height="15" fill="rgb(207,72,44)" fg:x="879" fg:w="1"/><text x="69.9013%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="69.6513%" y="501" width="0.0792%" height="15" fill="rgb(215,193,12)" fg:x="879" fg:w="1"/><text x="69.9013%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="69.6513%" y="485" width="0.0792%" height="15" fill="rgb(248,41,39)" fg:x="879" fg:w="1"/><text x="69.9013%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7306%" y="613" width="0.0792%" height="15" fill="rgb(253,85,4)" fg:x="880" fg:w="1"/><text x="69.9806%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="69.7306%" y="597" width="0.0792%" height="15" fill="rgb(243,70,31)" fg:x="880" fg:w="1"/><text x="69.9806%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7306%" y="581" width="0.0792%" height="15" fill="rgb(253,195,26)" fg:x="880" fg:w="1"/><text x="69.9806%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7306%" y="565" width="0.0792%" height="15" fill="rgb(243,42,11)" fg:x="880" fg:w="1"/><text x="69.9806%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7306%" y="549" width="0.0792%" height="15" fill="rgb(239,66,17)" fg:x="880" fg:w="1"/><text x="69.9806%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="69.7306%" y="533" width="0.0792%" height="15" fill="rgb(217,132,21)" fg:x="880" fg:w="1"/><text x="69.9806%" y="543.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="69.7306%" y="677" width="0.1585%" height="15" fill="rgb(252,202,21)" fg:x="880" fg:w="2"/><text x="69.9806%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="69.7306%" y="661" width="0.1585%" height="15" fill="rgb(233,98,36)" fg:x="880" fg:w="2"/><text x="69.9806%" y="671.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="69.7306%" y="645" width="0.1585%" height="15" fill="rgb(216,153,54)" fg:x="880" fg:w="2"/><text x="69.9806%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="69.7306%" y="629" width="0.1585%" height="15" fill="rgb(250,99,7)" fg:x="880" fg:w="2"/><text x="69.9806%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8098%" y="613" width="0.0792%" height="15" fill="rgb(207,56,50)" fg:x="881" fg:w="1"/><text x="70.0598%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="597" width="0.0792%" height="15" fill="rgb(244,61,34)" fg:x="881" fg:w="1"/><text x="70.0598%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8098%" y="581" width="0.0792%" height="15" fill="rgb(241,50,38)" fg:x="881" fg:w="1"/><text x="70.0598%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="565" width="0.0792%" height="15" fill="rgb(212,166,30)" fg:x="881" fg:w="1"/><text x="70.0598%" y="575.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="69.8098%" y="549" width="0.0792%" height="15" fill="rgb(249,127,32)" fg:x="881" fg:w="1"/><text x="70.0598%" y="559.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="533" width="0.0792%" height="15" fill="rgb(209,103,0)" fg:x="881" fg:w="1"/><text x="70.0598%" y="543.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="69.8098%" y="517" width="0.0792%" height="15" fill="rgb(238,209,51)" fg:x="881" fg:w="1"/><text x="70.0598%" y="527.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="501" width="0.0792%" height="15" fill="rgb(237,56,23)" fg:x="881" fg:w="1"/><text x="70.0598%" y="511.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="69.8098%" y="485" width="0.0792%" height="15" fill="rgb(215,153,46)" fg:x="881" fg:w="1"/><text x="70.0598%" y="495.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="69.8098%" y="469" width="0.0792%" height="15" fill="rgb(224,49,31)" fg:x="881" fg:w="1"/><text x="70.0598%" y="479.50"></text></g><g><title>plugins_core::build::Build::into_entry (3 samples, 0.24%)</title><rect x="69.7306%" y="725" width="0.2377%" height="15" fill="rgb(250,18,42)" fg:x="880" fg:w="3"/><text x="69.9806%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (3 samples, 0.24%)</title><rect x="69.7306%" y="709" width="0.2377%" height="15" fill="rgb(215,176,39)" fg:x="880" fg:w="3"/><text x="69.9806%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (3 samples, 0.24%)</title><rect x="69.7306%" y="693" width="0.2377%" height="15" fill="rgb(223,77,29)" fg:x="880" fg:w="3"/><text x="69.9806%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="69.8891%" y="677" width="0.0792%" height="15" fill="rgb(234,94,52)" fg:x="882" fg:w="1"/><text x="70.1391%" y="687.50"></text></g><g><title>plugins_core::build::Build::named (1 samples, 0.08%)</title><rect x="69.9683%" y="725" width="0.0792%" height="15" fill="rgb(220,154,50)" fg:x="883" fg:w="1"/><text x="70.2183%" y="735.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_name (1 samples, 0.08%)</title><rect x="69.9683%" y="709" width="0.0792%" height="15" fill="rgb(212,11,10)" fg:x="883" fg:w="1"/><text x="70.2183%" y="719.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="69.9683%" y="693" width="0.0792%" height="15" fill="rgb(205,166,19)" fg:x="883" fg:w="1"/><text x="70.2183%" y="703.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="69.9683%" y="677" width="0.0792%" height="15" fill="rgb(244,198,16)" fg:x="883" fg:w="1"/><text x="70.2183%" y="687.50"></text></g><g><title>&lt;kernel::model::props::Properties as kernel::model::scopes::Scope&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9683%" y="661" width="0.0792%" height="15" fill="rgb(219,69,12)" fg:x="883" fg:w="1"/><text x="70.2183%" y="671.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9683%" y="645" width="0.0792%" height="15" fill="rgb(245,30,7)" fg:x="883" fg:w="1"/><text x="70.2183%" y="655.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="69.9683%" y="629" width="0.0792%" height="15" fill="rgb(218,221,48)" fg:x="883" fg:w="1"/><text x="70.2183%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9683%" y="613" width="0.0792%" height="15" fill="rgb(216,66,15)" fg:x="883" fg:w="1"/><text x="70.2183%" y="623.50"></text></g><g><title>serde::ser::Serializer::collect_map (1 samples, 0.08%)</title><rect x="69.9683%" y="597" width="0.0792%" height="15" fill="rgb(226,122,50)" fg:x="883" fg:w="1"/><text x="70.2183%" y="607.50"></text></g><g><title>serde_json::value::to_value (1 samples, 0.08%)</title><rect x="69.9683%" y="581" width="0.0792%" height="15" fill="rgb(239,156,16)" fg:x="883" fg:w="1"/><text x="70.2183%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9683%" y="565" width="0.0792%" height="15" fill="rgb(224,27,38)" fg:x="883" fg:w="1"/><text x="70.2183%" y="575.50"></text></g><g><title>kernel::model::base::_::&lt;impl serde::ser::Serialize for kernel::model::base::Acls&gt;::serialize (1 samples, 0.08%)</title><rect x="69.9683%" y="549" width="0.0792%" height="15" fill="rgb(224,39,27)" fg:x="883" fg:w="1"/><text x="70.2183%" y="559.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (1 samples, 0.08%)</title><rect x="69.9683%" y="533" width="0.0792%" height="15" fill="rgb(215,92,29)" fg:x="883" fg:w="1"/><text x="70.2183%" y="543.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="69.9683%" y="517" width="0.0792%" height="15" fill="rgb(207,159,16)" fg:x="883" fg:w="1"/><text x="70.2183%" y="527.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (1 samples, 0.08%)</title><rect x="70.0475%" y="709" width="0.0792%" height="15" fill="rgb(238,163,47)" fg:x="884" fg:w="1"/><text x="70.2975%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (1 samples, 0.08%)</title><rect x="70.0475%" y="693" width="0.0792%" height="15" fill="rgb(219,91,49)" fg:x="884" fg:w="1"/><text x="70.2975%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.0475%" y="677" width="0.0792%" height="15" fill="rgb(227,167,31)" fg:x="884" fg:w="1"/><text x="70.2975%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.0475%" y="661" width="0.0792%" height="15" fill="rgb(234,80,54)" fg:x="884" fg:w="1"/><text x="70.2975%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.0475%" y="645" width="0.0792%" height="15" fill="rgb(212,114,2)" fg:x="884" fg:w="1"/><text x="70.2975%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.0475%" y="629" width="0.0792%" height="15" fill="rgb(234,50,24)" fg:x="884" fg:w="1"/><text x="70.2975%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.0475%" y="613" width="0.0792%" height="15" fill="rgb(221,68,8)" fg:x="884" fg:w="1"/><text x="70.2975%" y="623.50"></text></g><g><title>kernel::model::props::Props::property_named (1 samples, 0.08%)</title><rect x="70.1268%" y="645" width="0.0792%" height="15" fill="rgb(254,180,31)" fg:x="885" fg:w="1"/><text x="70.3768%" y="655.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.1268%" y="629" width="0.0792%" height="15" fill="rgb(247,130,50)" fg:x="885" fg:w="1"/><text x="70.3768%" y="639.50"></text></g><g><title>plugins_core::build::Build::occupying (3 samples, 0.24%)</title><rect x="70.0475%" y="725" width="0.2377%" height="15" fill="rgb(211,109,4)" fg:x="884" fg:w="3"/><text x="70.2975%" y="735.50"></text></g><g><title>plugins_core::tools::set_occupying (2 samples, 0.16%)</title><rect x="70.1268%" y="709" width="0.1585%" height="15" fill="rgb(238,50,21)" fg:x="885" fg:w="2"/><text x="70.3768%" y="719.50"></text></g><g><title>kernel::model::entry::&lt;impl core::convert::TryFrom&lt;&amp;kernel::model::entry::Entry&gt; for kernel::model::entity::EntityRef&gt;::try_from (2 samples, 0.16%)</title><rect x="70.1268%" y="693" width="0.1585%" height="15" fill="rgb(225,57,45)" fg:x="885" fg:w="2"/><text x="70.3768%" y="703.50"></text></g><g><title>kernel::model::entity::EntityRef::new_from_raw (2 samples, 0.16%)</title><rect x="70.1268%" y="677" width="0.1585%" height="15" fill="rgb(209,196,50)" fg:x="885" fg:w="2"/><text x="70.3768%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (2 samples, 0.16%)</title><rect x="70.1268%" y="661" width="0.1585%" height="15" fill="rgb(242,140,13)" fg:x="885" fg:w="2"/><text x="70.3768%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.2060%" y="645" width="0.0792%" height="15" fill="rgb(217,111,7)" fg:x="886" fg:w="1"/><text x="70.4560%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.2060%" y="629" width="0.0792%" height="15" fill="rgb(253,193,51)" fg:x="886" fg:w="1"/><text x="70.4560%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.2060%" y="613" width="0.0792%" height="15" fill="rgb(252,70,29)" fg:x="886" fg:w="1"/><text x="70.4560%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2060%" y="597" width="0.0792%" height="15" fill="rgb(232,127,12)" fg:x="886" fg:w="1"/><text x="70.4560%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.2060%" y="581" width="0.0792%" height="15" fill="rgb(211,180,21)" fg:x="886" fg:w="1"/><text x="70.4560%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2060%" y="565" width="0.0792%" height="15" fill="rgb(229,72,13)" fg:x="886" fg:w="1"/><text x="70.4560%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.2060%" y="549" width="0.0792%" height="15" fill="rgb(240,211,49)" fg:x="886" fg:w="1"/><text x="70.4560%" y="559.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.2853%" y="645" width="0.0792%" height="15" fill="rgb(219,149,40)" fg:x="887" fg:w="1"/><text x="70.5353%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.2853%" y="629" width="0.0792%" height="15" fill="rgb(210,127,46)" fg:x="887" fg:w="1"/><text x="70.5353%" y="639.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.2853%" y="613" width="0.0792%" height="15" fill="rgb(220,106,7)" fg:x="887" fg:w="1"/><text x="70.5353%" y="623.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2853%" y="597" width="0.0792%" height="15" fill="rgb(249,31,22)" fg:x="887" fg:w="1"/><text x="70.5353%" y="607.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="70.2853%" y="581" width="0.0792%" height="15" fill="rgb(253,1,49)" fg:x="887" fg:w="1"/><text x="70.5353%" y="591.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="70.2853%" y="565" width="0.0792%" height="15" fill="rgb(227,144,33)" fg:x="887" fg:w="1"/><text x="70.5353%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="70.2853%" y="549" width="0.0792%" height="15" fill="rgb(249,163,44)" fg:x="887" fg:w="1"/><text x="70.5353%" y="559.50"></text></g><g><title>plugins_core::build::BuildSurroundings::build (32 samples, 2.54%)</title><rect x="67.9081%" y="741" width="2.5357%" height="15" fill="rgb(234,15,39)" fg:x="857" fg:w="32"/><text x="68.1581%" y="751.50">pl..</text></g><g><title>plugins_core::build::Build::with_username (2 samples, 0.16%)</title><rect x="70.2853%" y="725" width="0.1585%" height="15" fill="rgb(207,66,16)" fg:x="887" fg:w="2"/><text x="70.5353%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.2853%" y="709" width="0.1585%" height="15" fill="rgb(233,112,24)" fg:x="887" fg:w="2"/><text x="70.5353%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.2853%" y="693" width="0.1585%" height="15" fill="rgb(230,90,22)" fg:x="887" fg:w="2"/><text x="70.5353%" y="703.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (2 samples, 0.16%)</title><rect x="70.2853%" y="677" width="0.1585%" height="15" fill="rgb(229,61,13)" fg:x="887" fg:w="2"/><text x="70.5353%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (2 samples, 0.16%)</title><rect x="70.2853%" y="661" width="0.1585%" height="15" fill="rgb(225,57,24)" fg:x="887" fg:w="2"/><text x="70.5353%" y="671.50"></text></g><g><title>kernel::model::props::save_props (1 samples, 0.08%)</title><rect x="70.3645%" y="645" width="0.0792%" height="15" fill="rgb(208,169,48)" fg:x="888" fg:w="1"/><text x="70.6145%" y="655.50"></text></g><g><title>kernel::model::scopes::ScopesMut::replace_scope (1 samples, 0.08%)</title><rect x="70.3645%" y="629" width="0.0792%" height="15" fill="rgb(244,218,51)" fg:x="888" fg:w="1"/><text x="70.6145%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.3645%" y="613" width="0.0792%" height="15" fill="rgb(214,148,10)" fg:x="888" fg:w="1"/><text x="70.6145%" y="623.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.3645%" y="597" width="0.0792%" height="15" fill="rgb(225,174,27)" fg:x="888" fg:w="1"/><text x="70.6145%" y="607.50"></text></g><g><title>&lt;engine::sequences::GlobalIds as engine::internal::AssignEntityId&gt;::assign (1 samples, 0.08%)</title><rect x="70.4437%" y="677" width="0.0792%" height="15" fill="rgb(230,96,26)" fg:x="889" fg:w="1"/><text x="70.6937%" y="687.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::set_gid (1 samples, 0.08%)</title><rect x="70.4437%" y="661" width="0.0792%" height="15" fill="rgb(232,10,30)" fg:x="889" fg:w="1"/><text x="70.6937%" y="671.50"></text></g><g><title>kernel::model::props::load_props (1 samples, 0.08%)</title><rect x="70.4437%" y="645" width="0.0792%" height="15" fill="rgb(222,8,50)" fg:x="889" fg:w="1"/><text x="70.6937%" y="655.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.4437%" y="629" width="0.0792%" height="15" fill="rgb(213,81,27)" fg:x="889" fg:w="1"/><text x="70.6937%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4437%" y="613" width="0.0792%" height="15" fill="rgb(245,50,10)" fg:x="889" fg:w="1"/><text x="70.6937%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4437%" y="597" width="0.0792%" height="15" fill="rgb(216,100,18)" fg:x="889" fg:w="1"/><text x="70.6937%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="70.4437%" y="581" width="0.0792%" height="15" fill="rgb(236,147,54)" fg:x="889" fg:w="1"/><text x="70.6937%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.4437%" y="565" width="0.0792%" height="15" fill="rgb(205,143,26)" fg:x="889" fg:w="1"/><text x="70.6937%" y="575.50"></text></g><g><title>&lt;tests::HoldingKeyInVessel as tests::WorldFixture&gt;::prepare (51 samples, 4.04%)</title><rect x="66.5610%" y="757" width="4.0412%" height="15" fill="rgb(236,26,9)" fg:x="840" fg:w="51"/><text x="66.8110%" y="767.50">&lt;tes..</text></g><g><title>plugins_core::build::BuildSurroundings::make (2 samples, 0.16%)</title><rect x="70.4437%" y="741" width="0.1585%" height="15" fill="rgb(221,165,53)" fg:x="889" fg:w="2"/><text x="70.6937%" y="751.50"></text></g><g><title>plugins_core::build::QuickThing::make (2 samples, 0.16%)</title><rect x="70.4437%" y="725" width="0.1585%" height="15" fill="rgb(214,110,17)" fg:x="889" fg:w="2"/><text x="70.6937%" y="735.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::add_entity (2 samples, 0.16%)</title><rect x="70.4437%" y="709" width="0.1585%" height="15" fill="rgb(237,197,12)" fg:x="889" fg:w="2"/><text x="70.6937%" y="719.50"></text></g><g><title>engine::internal::Entities::add_entity (2 samples, 0.16%)</title><rect x="70.4437%" y="693" width="0.1585%" height="15" fill="rgb(205,84,17)" fg:x="889" fg:w="2"/><text x="70.6937%" y="703.50"></text></g><g><title>engine::internal::EntityMap::add_entity (1 samples, 0.08%)</title><rect x="70.5230%" y="677" width="0.0792%" height="15" fill="rgb(237,18,45)" fg:x="890" fg:w="1"/><text x="70.7730%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="70.5230%" y="661" width="0.0792%" height="15" fill="rgb(221,87,14)" fg:x="890" fg:w="1"/><text x="70.7730%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="70.5230%" y="645" width="0.0792%" height="15" fill="rgb(238,186,15)" fg:x="890" fg:w="1"/><text x="70.7730%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="70.5230%" y="629" width="0.0792%" height="15" fill="rgb(208,115,11)" fg:x="890" fg:w="1"/><text x="70.7730%" y="639.50"></text></g><g><title>&lt;engine::storage::InMemoryEntityStorage as engine::storage::EntityStorage&gt;::save (1 samples, 0.08%)</title><rect x="70.6022%" y="693" width="0.0792%" height="15" fill="rgb(254,175,0)" fg:x="891" fg:w="1"/><text x="70.8522%" y="703.50"></text></g><g><title>alloc::vec::in_place_collect::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.16%)</title><rect x="70.6022%" y="725" width="0.1585%" height="15" fill="rgb(227,24,42)" fg:x="891" fg:w="2"/><text x="70.8522%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.16%)</title><rect x="70.6022%" y="709" width="0.1585%" height="15" fill="rgb(223,211,37)" fg:x="891" fg:w="2"/><text x="70.8522%" y="719.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="70.6815%" y="693" width="0.0792%" height="15" fill="rgb(235,49,27)" fg:x="892" fg:w="1"/><text x="70.9315%" y="703.50"></text></g><g><title>engine::identifiers::model::get_gid (1 samples, 0.08%)</title><rect x="70.7607%" y="725" width="0.0792%" height="15" fill="rgb(254,97,51)" fg:x="893" fg:w="1"/><text x="71.0107%" y="735.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="70.7607%" y="709" width="0.0792%" height="15" fill="rgb(249,51,40)" fg:x="893" fg:w="1"/><text x="71.0107%" y="719.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="70.7607%" y="693" width="0.0792%" height="15" fill="rgb(210,128,45)" fg:x="893" fg:w="1"/><text x="71.0107%" y="703.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="70.7607%" y="677" width="0.0792%" height="15" fill="rgb(224,137,50)" fg:x="893" fg:w="1"/><text x="71.0107%" y="687.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.16%)</title><rect x="70.9192%" y="677" width="0.1585%" height="15" fill="rgb(242,15,9)" fg:x="895" fg:w="2"/><text x="71.1692%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="70.9984%" y="661" width="0.0792%" height="15" fill="rgb(233,187,41)" fg:x="896" fg:w="1"/><text x="71.2484%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="70.9984%" y="645" width="0.0792%" height="15" fill="rgb(227,2,29)" fg:x="896" fg:w="1"/><text x="71.2484%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.1569%" y="661" width="0.0792%" height="15" fill="rgb(222,70,3)" fg:x="898" fg:w="1"/><text x="71.4069%" y="671.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2361%" y="645" width="0.0792%" height="15" fill="rgb(213,11,42)" fg:x="899" fg:w="1"/><text x="71.4861%" y="655.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2361%" y="629" width="0.0792%" height="15" fill="rgb(225,150,9)" fg:x="899" fg:w="1"/><text x="71.4861%" y="639.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2361%" y="613" width="0.0792%" height="15" fill="rgb(230,162,45)" fg:x="899" fg:w="1"/><text x="71.4861%" y="623.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.08%)</title><rect x="71.2361%" y="597" width="0.0792%" height="15" fill="rgb(222,14,52)" fg:x="899" fg:w="1"/><text x="71.4861%" y="607.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.08%)</title><rect x="71.2361%" y="581" width="0.0792%" height="15" fill="rgb(254,198,14)" fg:x="899" fg:w="1"/><text x="71.4861%" y="591.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.2361%" y="565" width="0.0792%" height="15" fill="rgb(220,217,30)" fg:x="899" fg:w="1"/><text x="71.4861%" y="575.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.2361%" y="549" width="0.0792%" height="15" fill="rgb(215,146,41)" fg:x="899" fg:w="1"/><text x="71.4861%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.2361%" y="533" width="0.0792%" height="15" fill="rgb(217,27,36)" fg:x="899" fg:w="1"/><text x="71.4861%" y="543.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.16%)</title><rect x="71.2361%" y="661" width="0.1585%" height="15" fill="rgb(219,218,39)" fg:x="899" fg:w="2"/><text x="71.4861%" y="671.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3154%" y="645" width="0.0792%" height="15" fill="rgb(219,4,42)" fg:x="900" fg:w="1"/><text x="71.5654%" y="655.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3154%" y="629" width="0.0792%" height="15" fill="rgb(249,119,36)" fg:x="900" fg:w="1"/><text x="71.5654%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.3154%" y="613" width="0.0792%" height="15" fill="rgb(209,23,33)" fg:x="900" fg:w="1"/><text x="71.5654%" y="623.50"></text></g><g><title>&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt (8 samples, 0.63%)</title><rect x="70.8399%" y="693" width="0.6339%" height="15" fill="rgb(211,10,0)" fg:x="894" fg:w="8"/><text x="71.0899%" y="703.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (5 samples, 0.40%)</title><rect x="71.0777%" y="677" width="0.3962%" height="15" fill="rgb(208,99,37)" fg:x="897" fg:w="5"/><text x="71.3277%" y="687.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.08%)</title><rect x="71.3946%" y="661" width="0.0792%" height="15" fill="rgb(213,132,31)" fg:x="901" fg:w="1"/><text x="71.6446%" y="671.50"></text></g><g><title>&lt;&lt;serde_json::value::Value as core::fmt::Display&gt;::fmt::WriterFormatter as std::io::Write&gt;::write (1 samples, 0.08%)</title><rect x="71.3946%" y="645" width="0.0792%" height="15" fill="rgb(243,129,40)" fg:x="901" fg:w="1"/><text x="71.6446%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="71.3946%" y="629" width="0.0792%" height="15" fill="rgb(210,66,33)" fg:x="901" fg:w="1"/><text x="71.6446%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="71.3946%" y="613" width="0.0792%" height="15" fill="rgb(209,189,4)" fg:x="901" fg:w="1"/><text x="71.6446%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="71.3946%" y="597" width="0.0792%" height="15" fill="rgb(214,107,37)" fg:x="901" fg:w="1"/><text x="71.6446%" y="607.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="71.3946%" y="581" width="0.0792%" height="15" fill="rgb(245,88,54)" fg:x="901" fg:w="1"/><text x="71.6446%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.4739%" y="693" width="0.0792%" height="15" fill="rgb(205,146,20)" fg:x="902" fg:w="1"/><text x="71.7239%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.4739%" y="677" width="0.0792%" height="15" fill="rgb(220,161,25)" fg:x="902" fg:w="1"/><text x="71.7239%" y="687.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.4739%" y="661" width="0.0792%" height="15" fill="rgb(215,152,15)" fg:x="902" fg:w="1"/><text x="71.7239%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="71.5531%" y="661" width="0.0792%" height="15" fill="rgb(233,192,44)" fg:x="903" fg:w="1"/><text x="71.8031%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="71.5531%" y="645" width="0.0792%" height="15" fill="rgb(240,170,46)" fg:x="903" fg:w="1"/><text x="71.8031%" y="655.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="71.5531%" y="629" width="0.0792%" height="15" fill="rgb(207,104,33)" fg:x="903" fg:w="1"/><text x="71.8031%" y="639.50"></text></g><g><title>&lt;kernel::model::compare::TreeDiff as kernel::model::compare::CompareChanges&lt;serde_json::value::Value,serde_json::value::Value&gt;&gt;::any_changes (4 samples, 0.32%)</title><rect x="71.5531%" y="677" width="0.3170%" height="15" fill="rgb(219,21,39)" fg:x="903" fg:w="4"/><text x="71.8031%" y="687.50"></text></g><g><title>treediff::diff::diff (3 samples, 0.24%)</title><rect x="71.6323%" y="661" width="0.2377%" height="15" fill="rgb(214,133,29)" fg:x="904" fg:w="3"/><text x="71.8823%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="71.6323%" y="645" width="0.2377%" height="15" fill="rgb(226,93,6)" fg:x="904" fg:w="3"/><text x="71.8823%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.24%)</title><rect x="71.6323%" y="629" width="0.2377%" height="15" fill="rgb(252,222,34)" fg:x="904" fg:w="3"/><text x="71.8823%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.7908%" y="613" width="0.0792%" height="15" fill="rgb(252,92,48)" fg:x="906" fg:w="1"/><text x="72.0408%" y="623.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.08%)</title><rect x="71.7908%" y="597" width="0.0792%" height="15" fill="rgb(245,223,24)" fg:x="906" fg:w="1"/><text x="72.0408%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.08%)</title><rect x="71.7908%" y="581" width="0.0792%" height="15" fill="rgb(205,176,3)" fg:x="906" fg:w="1"/><text x="72.0408%" y="591.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::end (1 samples, 0.08%)</title><rect x="71.8700%" y="661" width="0.0792%" height="15" fill="rgb(235,151,15)" fg:x="907" fg:w="1"/><text x="72.1200%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="71.9493%" y="581" width="0.0792%" height="15" fill="rgb(237,209,11)" fg:x="908" fg:w="1"/><text x="72.1993%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0285%" y="565" width="0.0792%" height="15" fill="rgb(243,227,24)" fg:x="909" fg:w="1"/><text x="72.2785%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.0285%" y="549" width="0.0792%" height="15" fill="rgb(239,193,16)" fg:x="909" fg:w="1"/><text x="72.2785%" y="559.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.0285%" y="533" width="0.0792%" height="15" fill="rgb(231,27,9)" fg:x="909" fg:w="1"/><text x="72.2785%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="72.1078%" y="517" width="0.0792%" height="15" fill="rgb(219,169,10)" fg:x="910" fg:w="1"/><text x="72.3578%" y="527.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (4 samples, 0.32%)</title><rect x="72.0285%" y="581" width="0.3170%" height="15" fill="rgb(244,229,43)" fg:x="909" fg:w="4"/><text x="72.2785%" y="591.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.1078%" y="565" width="0.2377%" height="15" fill="rgb(254,38,20)" fg:x="910" fg:w="3"/><text x="72.3578%" y="575.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 0.24%)</title><rect x="72.1078%" y="549" width="0.2377%" height="15" fill="rgb(250,47,30)" fg:x="910" fg:w="3"/><text x="72.3578%" y="559.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (3 samples, 0.24%)</title><rect x="72.1078%" y="533" width="0.2377%" height="15" fill="rgb(224,124,36)" fg:x="910" fg:w="3"/><text x="72.3578%" y="543.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (2 samples, 0.16%)</title><rect x="72.1870%" y="517" width="0.1585%" height="15" fill="rgb(246,68,51)" fg:x="911" fg:w="2"/><text x="72.4370%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (2 samples, 0.16%)</title><rect x="72.1870%" y="501" width="0.1585%" height="15" fill="rgb(253,43,49)" fg:x="911" fg:w="2"/><text x="72.4370%" y="511.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.08%)</title><rect x="72.2662%" y="485" width="0.0792%" height="15" fill="rgb(219,54,36)" fg:x="912" fg:w="1"/><text x="72.5162%" y="495.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2662%" y="469" width="0.0792%" height="15" fill="rgb(227,133,34)" fg:x="912" fg:w="1"/><text x="72.5162%" y="479.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.2662%" y="453" width="0.0792%" height="15" fill="rgb(247,227,15)" fg:x="912" fg:w="1"/><text x="72.5162%" y="463.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.2662%" y="437" width="0.0792%" height="15" fill="rgb(229,96,14)" fg:x="912" fg:w="1"/><text x="72.5162%" y="447.50"></text></g><g><title>&lt;serde_json::value::ser::Serializer as serde::ser::Serializer&gt;::serialize_newtype_struct (6 samples, 0.48%)</title><rect x="71.9493%" y="629" width="0.4754%" height="15" fill="rgb(220,79,17)" fg:x="908" fg:w="6"/><text x="72.1993%" y="639.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeMap&gt;::serialize_value (6 samples, 0.48%)</title><rect x="71.9493%" y="613" width="0.4754%" height="15" fill="rgb(205,131,53)" fg:x="908" fg:w="6"/><text x="72.1993%" y="623.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (6 samples, 0.48%)</title><rect x="71.9493%" y="597" width="0.4754%" height="15" fill="rgb(209,50,29)" fg:x="908" fg:w="6"/><text x="72.1993%" y="607.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.3455%" y="581" width="0.0792%" height="15" fill="rgb(245,86,46)" fg:x="913" fg:w="1"/><text x="72.5955%" y="591.50"></text></g><g><title>kernel::model::entity::_::&lt;impl serde::ser::Serialize for kernel::model::entity::Entity&gt;::serialize (8 samples, 0.63%)</title><rect x="71.8700%" y="677" width="0.6339%" height="15" fill="rgb(235,66,46)" fg:x="907" fg:w="8"/><text x="72.1200%" y="687.50"></text></g><g><title>&lt;serde_json::value::ser::SerializeMap as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 0.55%)</title><rect x="71.9493%" y="661" width="0.5547%" height="15" fill="rgb(232,148,31)" fg:x="908" fg:w="7"/><text x="72.1993%" y="671.50"></text></g><g><title>serde::ser::Serializer::collect_map (7 samples, 0.55%)</title><rect x="71.9493%" y="645" width="0.5547%" height="15" fill="rgb(217,149,8)" fg:x="908" fg:w="7"/><text x="72.1993%" y="655.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.4247%" y="629" width="0.0792%" height="15" fill="rgb(209,183,11)" fg:x="914" fg:w="1"/><text x="72.6747%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.5832%" y="533" width="0.0792%" height="15" fill="rgb(208,55,20)" fg:x="916" fg:w="1"/><text x="72.8332%" y="543.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.5832%" y="517" width="0.0792%" height="15" fill="rgb(218,39,14)" fg:x="916" fg:w="1"/><text x="72.8332%" y="527.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.5832%" y="501" width="0.0792%" height="15" fill="rgb(216,169,33)" fg:x="916" fg:w="1"/><text x="72.8332%" y="511.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="72.5832%" y="485" width="0.0792%" height="15" fill="rgb(233,80,24)" fg:x="916" fg:w="1"/><text x="72.8332%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6624%" y="517" width="0.0792%" height="15" fill="rgb(213,179,31)" fg:x="917" fg:w="1"/><text x="72.9124%" y="527.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6624%" y="501" width="0.0792%" height="15" fill="rgb(209,19,5)" fg:x="917" fg:w="1"/><text x="72.9124%" y="511.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6624%" y="485" width="0.0792%" height="15" fill="rgb(219,18,35)" fg:x="917" fg:w="1"/><text x="72.9124%" y="495.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6624%" y="469" width="0.0792%" height="15" fill="rgb(209,169,16)" fg:x="917" fg:w="1"/><text x="72.9124%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6624%" y="453" width="0.0792%" height="15" fill="rgb(245,90,51)" fg:x="917" fg:w="1"/><text x="72.9124%" y="463.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="72.6624%" y="437" width="0.0792%" height="15" fill="rgb(220,99,45)" fg:x="917" fg:w="1"/><text x="72.9124%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="72.6624%" y="421" width="0.0792%" height="15" fill="rgb(249,89,25)" fg:x="917" fg:w="1"/><text x="72.9124%" y="431.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="72.7417%" y="517" width="0.0792%" height="15" fill="rgb(239,193,0)" fg:x="918" fg:w="1"/><text x="72.9917%" y="527.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.5040%" y="581" width="0.3962%" height="15" fill="rgb(231,126,1)" fg:x="915" fg:w="5"/><text x="72.7540%" y="591.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.40%)</title><rect x="72.5040%" y="565" width="0.3962%" height="15" fill="rgb(243,166,3)" fg:x="915" fg:w="5"/><text x="72.7540%" y="575.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.40%)</title><rect x="72.5040%" y="549" width="0.3962%" height="15" fill="rgb(223,22,34)" fg:x="915" fg:w="5"/><text x="72.7540%" y="559.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.24%)</title><rect x="72.6624%" y="533" width="0.2377%" height="15" fill="rgb(251,52,51)" fg:x="917" fg:w="3"/><text x="72.9124%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="72.8209%" y="517" width="0.0792%" height="15" fill="rgb(221,165,28)" fg:x="919" fg:w="1"/><text x="73.0709%" y="527.50"></text></g><g><title>engine::session::Session::close (32 samples, 2.54%)</title><rect x="70.6022%" y="757" width="2.5357%" height="15" fill="rgb(218,121,47)" fg:x="891" fg:w="32"/><text x="70.8522%" y="767.50">en..</text></g><g><title>engine::session::Session::save_entity_changes (32 samples, 2.54%)</title><rect x="70.6022%" y="741" width="2.5357%" height="15" fill="rgb(209,120,9)" fg:x="891" fg:w="32"/><text x="70.8522%" y="751.50">en..</text></g><g><title>engine::internal::Entities::foreach_entity_mut (29 samples, 2.30%)</title><rect x="70.8399%" y="725" width="2.2979%" height="15" fill="rgb(236,68,12)" fg:x="894" fg:w="29"/><text x="71.0899%" y="735.50">e..</text></g><g><title>engine::session::SavesEntities::check_for_changes (29 samples, 2.30%)</title><rect x="70.8399%" y="709" width="2.2979%" height="15" fill="rgb(225,194,26)" fg:x="894" fg:w="29"/><text x="71.0899%" y="719.50">e..</text></g><g><title>kernel::model::any_entity_changes (20 samples, 1.58%)</title><rect x="71.5531%" y="693" width="1.5848%" height="15" fill="rgb(231,84,39)" fg:x="903" fg:w="20"/><text x="71.8031%" y="703.50"></text></g><g><title>serde_json::value::de::&lt;impl core::str::traits::FromStr for serde_json::value::Value&gt;::from_str (8 samples, 0.63%)</title><rect x="72.5040%" y="677" width="0.6339%" height="15" fill="rgb(210,11,45)" fg:x="915" fg:w="8"/><text x="72.7540%" y="687.50"></text></g><g><title>serde_json::de::from_trait (8 samples, 0.63%)</title><rect x="72.5040%" y="661" width="0.6339%" height="15" fill="rgb(224,54,52)" fg:x="915" fg:w="8"/><text x="72.7540%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="72.5040%" y="645" width="0.6339%" height="15" fill="rgb(238,102,14)" fg:x="915" fg:w="8"/><text x="72.7540%" y="655.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="72.5040%" y="629" width="0.6339%" height="15" fill="rgb(243,160,52)" fg:x="915" fg:w="8"/><text x="72.7540%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (8 samples, 0.63%)</title><rect x="72.5040%" y="613" width="0.6339%" height="15" fill="rgb(216,114,19)" fg:x="915" fg:w="8"/><text x="72.7540%" y="623.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (8 samples, 0.63%)</title><rect x="72.5040%" y="597" width="0.6339%" height="15" fill="rgb(244,166,37)" fg:x="915" fg:w="8"/><text x="72.7540%" y="607.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.24%)</title><rect x="72.9002%" y="581" width="0.2377%" height="15" fill="rgb(246,29,44)" fg:x="920" fg:w="3"/><text x="73.1502%" y="591.50"></text></g><g><title>&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (3 samples, 0.24%)</title><rect x="72.9002%" y="565" width="0.2377%" height="15" fill="rgb(215,56,53)" fg:x="920" fg:w="3"/><text x="73.1502%" y="575.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::Evaluator&gt;::evaluate (1 samples, 0.08%)</title><rect x="73.1379%" y="661" width="0.0792%" height="15" fill="rgb(217,60,2)" fg:x="923" fg:w="1"/><text x="73.3879%" y="671.50"></text></g><g><title>&lt;plugins_core::carrying::CarryingPlugin as kernel::plugins::ParsesActions&gt;::try_parse_action (1 samples, 0.08%)</title><rect x="73.1379%" y="645" width="0.0792%" height="15" fill="rgb(207,26,24)" fg:x="923" fg:w="1"/><text x="73.3879%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="73.2171%" y="581" width="0.0792%" height="15" fill="rgb(252,210,15)" fg:x="924" fg:w="1"/><text x="73.4671%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="73.2171%" y="613" width="0.1585%" height="15" fill="rgb(253,209,26)" fg:x="924" fg:w="2"/><text x="73.4671%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.16%)</title><rect x="73.2171%" y="597" width="0.1585%" height="15" fill="rgb(238,170,14)" fg:x="924" fg:w="2"/><text x="73.4671%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (1 samples, 0.08%)</title><rect x="73.2964%" y="581" width="0.0792%" height="15" fill="rgb(216,178,15)" fg:x="925" fg:w="1"/><text x="73.5464%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="73.2964%" y="565" width="0.0792%" height="15" fill="rgb(250,197,2)" fg:x="925" fg:w="1"/><text x="73.5464%" y="575.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="73.2964%" y="549" width="0.0792%" height="15" fill="rgb(212,70,42)" fg:x="925" fg:w="1"/><text x="73.5464%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.4548%" y="517" width="0.0792%" height="15" fill="rgb(227,213,9)" fg:x="927" fg:w="1"/><text x="73.7048%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.3756%" y="565" width="0.2377%" height="15" fill="rgb(245,99,25)" fg:x="926" fg:w="3"/><text x="73.6256%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="73.3756%" y="549" width="0.2377%" height="15" fill="rgb(250,82,29)" fg:x="926" fg:w="3"/><text x="73.6256%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="73.4548%" y="533" width="0.1585%" height="15" fill="rgb(241,226,54)" fg:x="927" fg:w="2"/><text x="73.7048%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5341%" y="517" width="0.0792%" height="15" fill="rgb(221,99,41)" fg:x="928" fg:w="1"/><text x="73.7841%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.5341%" y="501" width="0.0792%" height="15" fill="rgb(213,90,21)" fg:x="928" fg:w="1"/><text x="73.7841%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="73.5341%" y="485" width="0.0792%" height="15" fill="rgb(205,208,24)" fg:x="928" fg:w="1"/><text x="73.7841%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="73.5341%" y="469" width="0.0792%" height="15" fill="rgb(246,31,12)" fg:x="928" fg:w="1"/><text x="73.7841%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="73.5341%" y="453" width="0.0792%" height="15" fill="rgb(213,154,6)" fg:x="928" fg:w="1"/><text x="73.7841%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5341%" y="437" width="0.0792%" height="15" fill="rgb(222,163,29)" fg:x="928" fg:w="1"/><text x="73.7841%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="73.5341%" y="421" width="0.0792%" height="15" fill="rgb(227,201,8)" fg:x="928" fg:w="1"/><text x="73.7841%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="73.5341%" y="405" width="0.0792%" height="15" fill="rgb(233,9,32)" fg:x="928" fg:w="1"/><text x="73.7841%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="73.5341%" y="389" width="0.0792%" height="15" fill="rgb(217,54,24)" fg:x="928" fg:w="1"/><text x="73.7841%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="73.5341%" y="373" width="0.0792%" height="15" fill="rgb(235,192,0)" fg:x="928" fg:w="1"/><text x="73.7841%" y="383.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="73.5341%" y="357" width="0.0792%" height="15" fill="rgb(235,45,9)" fg:x="928" fg:w="1"/><text x="73.7841%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.5341%" y="341" width="0.0792%" height="15" fill="rgb(246,42,40)" fg:x="928" fg:w="1"/><text x="73.7841%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6133%" y="565" width="0.0792%" height="15" fill="rgb(248,111,24)" fg:x="929" fg:w="1"/><text x="73.8633%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="73.6133%" y="549" width="0.0792%" height="15" fill="rgb(249,65,22)" fg:x="929" fg:w="1"/><text x="73.8633%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="73.6133%" y="533" width="0.0792%" height="15" fill="rgb(238,111,51)" fg:x="929" fg:w="1"/><text x="73.8633%" y="543.50"></text></g><g><title>engine::internal::Entities::foreach_entity_mut (5 samples, 0.40%)</title><rect x="73.3756%" y="613" width="0.3962%" height="15" fill="rgb(250,118,22)" fg:x="926" fg:w="5"/><text x="73.6256%" y="623.50"></text></g><g><title>kernel::model::scopes::Scopes::modified (5 samples, 0.40%)</title><rect x="73.3756%" y="597" width="0.3962%" height="15" fill="rgb(234,84,26)" fg:x="926" fg:w="5"/><text x="73.6256%" y="607.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (5 samples, 0.40%)</title><rect x="73.3756%" y="581" width="0.3962%" height="15" fill="rgb(243,172,12)" fg:x="926" fg:w="5"/><text x="73.6256%" y="591.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.6926%" y="565" width="0.0792%" height="15" fill="rgb(236,150,49)" fg:x="930" fg:w="1"/><text x="73.9426%" y="575.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7718%" y="373" width="0.0792%" height="15" fill="rgb(225,197,26)" fg:x="931" fg:w="1"/><text x="74.0218%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7718%" y="357" width="0.0792%" height="15" fill="rgb(214,17,42)" fg:x="931" fg:w="1"/><text x="74.0218%" y="367.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.7718%" y="341" width="0.0792%" height="15" fill="rgb(224,165,40)" fg:x="931" fg:w="1"/><text x="74.0218%" y="351.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7718%" y="325" width="0.0792%" height="15" fill="rgb(246,100,4)" fg:x="931" fg:w="1"/><text x="74.0218%" y="335.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7718%" y="309" width="0.0792%" height="15" fill="rgb(222,103,0)" fg:x="931" fg:w="1"/><text x="74.0218%" y="319.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.7718%" y="293" width="0.0792%" height="15" fill="rgb(227,189,26)" fg:x="931" fg:w="1"/><text x="74.0218%" y="303.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="73.7718%" y="277" width="0.0792%" height="15" fill="rgb(214,202,17)" fg:x="931" fg:w="1"/><text x="74.0218%" y="287.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="73.7718%" y="261" width="0.0792%" height="15" fill="rgb(229,111,3)" fg:x="931" fg:w="1"/><text x="74.0218%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="73.7718%" y="245" width="0.0792%" height="15" fill="rgb(229,172,15)" fg:x="931" fg:w="1"/><text x="74.0218%" y="255.50"></text></g><g><title>engine::perform::StandardPerformer::evaluate_living_surroundings (2 samples, 0.16%)</title><rect x="73.7718%" y="613" width="0.1585%" height="15" fill="rgb(230,224,35)" fg:x="931" fg:w="2"/><text x="74.0218%" y="623.50"></text></g><g><title>&lt;plugins_core::finding::DefaultFinder as kernel::Finder&gt;::find_location (2 samples, 0.16%)</title><rect x="73.7718%" y="597" width="0.1585%" height="15" fill="rgb(251,141,6)" fg:x="931" fg:w="2"/><text x="74.0218%" y="607.50"></text></g><g><title>kernel::model::entry::Entry::scope (2 samples, 0.16%)</title><rect x="73.7718%" y="581" width="0.1585%" height="15" fill="rgb(225,208,6)" fg:x="931" fg:w="2"/><text x="74.0218%" y="591.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="73.7718%" y="565" width="0.1585%" height="15" fill="rgb(246,181,16)" fg:x="931" fg:w="2"/><text x="74.0218%" y="575.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (2 samples, 0.16%)</title><rect x="73.7718%" y="549" width="0.1585%" height="15" fill="rgb(227,129,36)" fg:x="931" fg:w="2"/><text x="74.0218%" y="559.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (2 samples, 0.16%)</title><rect x="73.7718%" y="533" width="0.1585%" height="15" fill="rgb(248,117,24)" fg:x="931" fg:w="2"/><text x="74.0218%" y="543.50"></text></g><g><title>engine::internal::Entities::add_persisted (2 samples, 0.16%)</title><rect x="73.7718%" y="517" width="0.1585%" height="15" fill="rgb(214,185,35)" fg:x="931" fg:w="2"/><text x="74.0218%" y="527.50"></text></g><g><title>kernel::model::deserialize_entity (2 samples, 0.16%)</title><rect x="73.7718%" y="501" width="0.1585%" height="15" fill="rgb(236,150,34)" fg:x="931" fg:w="2"/><text x="74.0218%" y="511.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (2 samples, 0.16%)</title><rect x="73.7718%" y="485" width="0.1585%" height="15" fill="rgb(243,228,27)" fg:x="931" fg:w="2"/><text x="74.0218%" y="495.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (2 samples, 0.16%)</title><rect x="73.7718%" y="469" width="0.1585%" height="15" fill="rgb(245,77,44)" fg:x="931" fg:w="2"/><text x="74.0218%" y="479.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (2 samples, 0.16%)</title><rect x="73.7718%" y="453" width="0.1585%" height="15" fill="rgb(235,214,42)" fg:x="931" fg:w="2"/><text x="74.0218%" y="463.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.7718%" y="437" width="0.1585%" height="15" fill="rgb(221,74,3)" fg:x="931" fg:w="2"/><text x="74.0218%" y="447.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="73.7718%" y="421" width="0.1585%" height="15" fill="rgb(206,121,29)" fg:x="931" fg:w="2"/><text x="74.0218%" y="431.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="73.7718%" y="405" width="0.1585%" height="15" fill="rgb(249,131,53)" fg:x="931" fg:w="2"/><text x="74.0218%" y="415.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="73.7718%" y="389" width="0.1585%" height="15" fill="rgb(236,170,29)" fg:x="931" fg:w="2"/><text x="74.0218%" y="399.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8510%" y="373" width="0.0792%" height="15" fill="rgb(247,96,15)" fg:x="932" fg:w="1"/><text x="74.1010%" y="383.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="73.8510%" y="357" width="0.0792%" height="15" fill="rgb(211,210,7)" fg:x="932" fg:w="1"/><text x="74.1010%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="73.8510%" y="341" width="0.0792%" height="15" fill="rgb(240,88,50)" fg:x="932" fg:w="1"/><text x="74.1010%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="73.8510%" y="325" width="0.0792%" height="15" fill="rgb(209,229,26)" fg:x="932" fg:w="1"/><text x="74.1010%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0887%" y="405" width="0.0792%" height="15" fill="rgb(210,68,23)" fg:x="935" fg:w="1"/><text x="74.3387%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (1 samples, 0.08%)</title><rect x="74.0887%" y="389" width="0.0792%" height="15" fill="rgb(229,180,13)" fg:x="935" fg:w="1"/><text x="74.3387%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0887%" y="373" width="0.0792%" height="15" fill="rgb(236,53,44)" fg:x="935" fg:w="1"/><text x="74.3387%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.0887%" y="357" width="0.0792%" height="15" fill="rgb(244,214,29)" fg:x="935" fg:w="1"/><text x="74.3387%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.0887%" y="341" width="0.0792%" height="15" fill="rgb(220,75,29)" fg:x="935" fg:w="1"/><text x="74.3387%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.0887%" y="325" width="0.0792%" height="15" fill="rgb(214,183,37)" fg:x="935" fg:w="1"/><text x="74.3387%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.0887%" y="309" width="0.0792%" height="15" fill="rgb(239,117,29)" fg:x="935" fg:w="1"/><text x="74.3387%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0887%" y="293" width="0.0792%" height="15" fill="rgb(237,171,35)" fg:x="935" fg:w="1"/><text x="74.3387%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.0887%" y="277" width="0.0792%" height="15" fill="rgb(229,178,53)" fg:x="935" fg:w="1"/><text x="74.3387%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.0887%" y="261" width="0.0792%" height="15" fill="rgb(210,102,19)" fg:x="935" fg:w="1"/><text x="74.3387%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.0887%" y="245" width="0.0792%" height="15" fill="rgb(235,127,22)" fg:x="935" fg:w="1"/><text x="74.3387%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.0887%" y="229" width="0.0792%" height="15" fill="rgb(244,31,31)" fg:x="935" fg:w="1"/><text x="74.3387%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.0887%" y="213" width="0.0792%" height="15" fill="rgb(231,43,21)" fg:x="935" fg:w="1"/><text x="74.3387%" y="223.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="74.0887%" y="197" width="0.0792%" height="15" fill="rgb(217,131,35)" fg:x="935" fg:w="1"/><text x="74.3387%" y="207.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.0887%" y="181" width="0.0792%" height="15" fill="rgb(221,149,4)" fg:x="935" fg:w="1"/><text x="74.3387%" y="191.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::desc (2 samples, 0.16%)</title><rect x="74.0887%" y="453" width="0.1585%" height="15" fill="rgb(232,170,28)" fg:x="935" fg:w="2"/><text x="74.3387%" y="463.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="74.0887%" y="437" width="0.1585%" height="15" fill="rgb(238,56,10)" fg:x="935" fg:w="2"/><text x="74.3387%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="74.0887%" y="421" width="0.1585%" height="15" fill="rgb(235,196,14)" fg:x="935" fg:w="2"/><text x="74.3387%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1680%" y="405" width="0.0792%" height="15" fill="rgb(216,45,48)" fg:x="936" fg:w="1"/><text x="74.4180%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.1680%" y="389" width="0.0792%" height="15" fill="rgb(238,213,17)" fg:x="936" fg:w="1"/><text x="74.4180%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1680%" y="373" width="0.0792%" height="15" fill="rgb(212,13,2)" fg:x="936" fg:w="1"/><text x="74.4180%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1680%" y="357" width="0.0792%" height="15" fill="rgb(240,114,20)" fg:x="936" fg:w="1"/><text x="74.4180%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.1680%" y="341" width="0.0792%" height="15" fill="rgb(228,41,40)" fg:x="936" fg:w="1"/><text x="74.4180%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.1680%" y="325" width="0.0792%" height="15" fill="rgb(244,132,35)" fg:x="936" fg:w="1"/><text x="74.4180%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3265%" y="341" width="0.0792%" height="15" fill="rgb(253,189,4)" fg:x="938" fg:w="1"/><text x="74.5765%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.3265%" y="325" width="0.0792%" height="15" fill="rgb(224,37,19)" fg:x="938" fg:w="1"/><text x="74.5765%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.3265%" y="309" width="0.0792%" height="15" fill="rgb(235,223,18)" fg:x="938" fg:w="1"/><text x="74.5765%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.3265%" y="293" width="0.0792%" height="15" fill="rgb(235,163,25)" fg:x="938" fg:w="1"/><text x="74.5765%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.3265%" y="277" width="0.0792%" height="15" fill="rgb(217,145,28)" fg:x="938" fg:w="1"/><text x="74.5765%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3265%" y="261" width="0.0792%" height="15" fill="rgb(223,223,32)" fg:x="938" fg:w="1"/><text x="74.5765%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="74.3265%" y="245" width="0.0792%" height="15" fill="rgb(227,189,39)" fg:x="938" fg:w="1"/><text x="74.5765%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="74.3265%" y="229" width="0.0792%" height="15" fill="rgb(248,10,22)" fg:x="938" fg:w="1"/><text x="74.5765%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="74.3265%" y="213" width="0.0792%" height="15" fill="rgb(248,46,39)" fg:x="938" fg:w="1"/><text x="74.5765%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="74.3265%" y="197" width="0.0792%" height="15" fill="rgb(248,113,48)" fg:x="938" fg:w="1"/><text x="74.5765%" y="207.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="74.3265%" y="181" width="0.0792%" height="15" fill="rgb(245,16,25)" fg:x="938" fg:w="1"/><text x="74.5765%" y="191.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.3265%" y="165" width="0.0792%" height="15" fill="rgb(249,152,16)" fg:x="938" fg:w="1"/><text x="74.5765%" y="175.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3265%" y="389" width="0.1585%" height="15" fill="rgb(250,16,1)" fg:x="938" fg:w="2"/><text x="74.5765%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3265%" y="373" width="0.1585%" height="15" fill="rgb(249,138,3)" fg:x="938" fg:w="2"/><text x="74.5765%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="74.3265%" y="357" width="0.1585%" height="15" fill="rgb(227,71,41)" fg:x="938" fg:w="2"/><text x="74.5765%" y="367.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="74.4057%" y="341" width="0.0792%" height="15" fill="rgb(209,184,23)" fg:x="939" fg:w="1"/><text x="74.6557%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3 samples, 0.24%)</title><rect x="74.3265%" y="405" width="0.2377%" height="15" fill="rgb(223,215,31)" fg:x="938" fg:w="3"/><text x="74.5765%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4849%" y="389" width="0.0792%" height="15" fill="rgb(210,146,28)" fg:x="940" fg:w="1"/><text x="74.7349%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="74.4849%" y="373" width="0.0792%" height="15" fill="rgb(209,183,41)" fg:x="940" fg:w="1"/><text x="74.7349%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.08%)</title><rect x="74.4849%" y="357" width="0.0792%" height="15" fill="rgb(209,224,45)" fg:x="940" fg:w="1"/><text x="74.7349%" y="367.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.08%)</title><rect x="74.4849%" y="341" width="0.0792%" height="15" fill="rgb(224,209,51)" fg:x="940" fg:w="1"/><text x="74.7349%" y="351.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.08%)</title><rect x="74.4849%" y="325" width="0.0792%" height="15" fill="rgb(223,17,39)" fg:x="940" fg:w="1"/><text x="74.7349%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4849%" y="309" width="0.0792%" height="15" fill="rgb(234,204,37)" fg:x="940" fg:w="1"/><text x="74.7349%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="74.4849%" y="293" width="0.0792%" height="15" fill="rgb(236,120,5)" fg:x="940" fg:w="1"/><text x="74.7349%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5642%" y="405" width="0.0792%" height="15" fill="rgb(248,97,27)" fg:x="941" fg:w="1"/><text x="74.8142%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (1 samples, 0.08%)</title><rect x="74.5642%" y="389" width="0.0792%" height="15" fill="rgb(240,66,17)" fg:x="941" fg:w="1"/><text x="74.8142%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5642%" y="373" width="0.0792%" height="15" fill="rgb(210,79,3)" fg:x="941" fg:w="1"/><text x="74.8142%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.08%)</title><rect x="74.5642%" y="357" width="0.0792%" height="15" fill="rgb(214,176,27)" fg:x="941" fg:w="1"/><text x="74.8142%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="74.5642%" y="341" width="0.0792%" height="15" fill="rgb(235,185,3)" fg:x="941" fg:w="1"/><text x="74.8142%" y="351.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="74.5642%" y="325" width="0.0792%" height="15" fill="rgb(227,24,12)" fg:x="941" fg:w="1"/><text x="74.8142%" y="335.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::name (6 samples, 0.48%)</title><rect x="74.2472%" y="453" width="0.4754%" height="15" fill="rgb(252,169,48)" fg:x="937" fg:w="6"/><text x="74.4972%" y="463.50"></text></g><g><title>kernel::model::props::load_props (6 samples, 0.48%)</title><rect x="74.2472%" y="437" width="0.4754%" height="15" fill="rgb(212,65,1)" fg:x="937" fg:w="6"/><text x="74.4972%" y="447.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (6 samples, 0.48%)</title><rect x="74.2472%" y="421" width="0.4754%" height="15" fill="rgb(242,39,24)" fg:x="937" fg:w="6"/><text x="74.4972%" y="431.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6434%" y="405" width="0.0792%" height="15" fill="rgb(249,32,23)" fg:x="942" fg:w="1"/><text x="74.8934%" y="415.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6434%" y="389" width="0.0792%" height="15" fill="rgb(251,195,23)" fg:x="942" fg:w="1"/><text x="74.8934%" y="399.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6434%" y="373" width="0.0792%" height="15" fill="rgb(236,174,8)" fg:x="942" fg:w="1"/><text x="74.8934%" y="383.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6434%" y="357" width="0.0792%" height="15" fill="rgb(220,197,8)" fg:x="942" fg:w="1"/><text x="74.8934%" y="367.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="74.6434%" y="341" width="0.0792%" height="15" fill="rgb(240,108,37)" fg:x="942" fg:w="1"/><text x="74.8934%" y="351.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6434%" y="325" width="0.0792%" height="15" fill="rgb(232,176,24)" fg:x="942" fg:w="1"/><text x="74.8934%" y="335.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="74.6434%" y="309" width="0.0792%" height="15" fill="rgb(243,35,29)" fg:x="942" fg:w="1"/><text x="74.8934%" y="319.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6434%" y="293" width="0.0792%" height="15" fill="rgb(210,37,18)" fg:x="942" fg:w="1"/><text x="74.8934%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="74.6434%" y="277" width="0.0792%" height="15" fill="rgb(224,184,40)" fg:x="942" fg:w="1"/><text x="74.8934%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="74.6434%" y="261" width="0.0792%" height="15" fill="rgb(236,39,29)" fg:x="942" fg:w="1"/><text x="74.8934%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="74.6434%" y="245" width="0.0792%" height="15" fill="rgb(232,48,39)" fg:x="942" fg:w="1"/><text x="74.8934%" y="255.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="74.6434%" y="229" width="0.0792%" height="15" fill="rgb(236,34,42)" fg:x="942" fg:w="1"/><text x="74.8934%" y="239.50"></text></g><g><title>kernel::model::entry::Entry::scope (1 samples, 0.08%)</title><rect x="74.7227%" y="453" width="0.0792%" height="15" fill="rgb(243,106,37)" fg:x="943" fg:w="1"/><text x="74.9727%" y="463.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (1 samples, 0.08%)</title><rect x="74.7227%" y="437" width="0.0792%" height="15" fill="rgb(218,96,6)" fg:x="943" fg:w="1"/><text x="74.9727%" y="447.50"></text></g><g><title>&lt;plugins_core::carrying::model::Carryable as core::default::Default&gt;::default (1 samples, 0.08%)</title><rect x="74.7227%" y="421" width="0.0792%" height="15" fill="rgb(235,130,12)" fg:x="943" fg:w="1"/><text x="74.9727%" y="431.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::new_identity (1 samples, 0.08%)</title><rect x="74.7227%" y="405" width="0.0792%" height="15" fill="rgb(231,95,0)" fg:x="943" fg:w="1"/><text x="74.9727%" y="415.50"></text></g><g><title>alloc::fmt::format::format_inner (1 samples, 0.08%)</title><rect x="74.8019%" y="405" width="0.0792%" height="15" fill="rgb(228,12,23)" fg:x="944" fg:w="1"/><text x="75.0519%" y="415.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.08%)</title><rect x="74.8019%" y="389" width="0.0792%" height="15" fill="rgb(216,12,1)" fg:x="944" fg:w="1"/><text x="75.0519%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="74.8019%" y="373" width="0.0792%" height="15" fill="rgb(219,59,3)" fg:x="944" fg:w="1"/><text x="75.0519%" y="383.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.08%)</title><rect x="74.8019%" y="357" width="0.0792%" height="15" fill="rgb(215,208,46)" fg:x="944" fg:w="1"/><text x="75.0519%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="74.8019%" y="341" width="0.0792%" height="15" fill="rgb(254,224,29)" fg:x="944" fg:w="1"/><text x="75.0519%" y="351.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8811%" y="277" width="0.0792%" height="15" fill="rgb(232,14,29)" fg:x="945" fg:w="1"/><text x="75.1311%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 0.08%)</title><rect x="74.8811%" y="261" width="0.0792%" height="15" fill="rgb(208,45,52)" fg:x="945" fg:w="1"/><text x="75.1311%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.08%)</title><rect x="74.8811%" y="245" width="0.0792%" height="15" fill="rgb(234,191,28)" fg:x="945" fg:w="1"/><text x="75.1311%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="74.8811%" y="229" width="0.0792%" height="15" fill="rgb(244,67,43)" fg:x="945" fg:w="1"/><text x="75.1311%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="74.8811%" y="213" width="0.0792%" height="15" fill="rgb(236,189,24)" fg:x="945" fg:w="1"/><text x="75.1311%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.24%)</title><rect x="74.8811%" y="373" width="0.2377%" height="15" fill="rgb(239,214,33)" fg:x="945" fg:w="3"/><text x="75.1311%" y="383.50"></text></g><g><title>&lt;regex_automata::meta::regex::Split as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="74.8811%" y="357" width="0.2377%" height="15" fill="rgb(226,176,41)" fg:x="945" fg:w="3"/><text x="75.1311%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search (3 samples, 0.24%)</title><rect x="74.8811%" y="341" width="0.2377%" height="15" fill="rgb(248,47,8)" fg:x="945" fg:w="3"/><text x="75.1311%" y="351.50"></text></g><g><title>regex_automata::hybrid::regex::Regex::try_search (3 samples, 0.24%)</title><rect x="74.8811%" y="325" width="0.2377%" height="15" fill="rgb(218,81,44)" fg:x="945" fg:w="3"/><text x="75.1311%" y="335.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="74.8811%" y="309" width="0.2377%" height="15" fill="rgb(213,98,6)" fg:x="945" fg:w="3"/><text x="75.1311%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (3 samples, 0.24%)</title><rect x="74.8811%" y="293" width="0.2377%" height="15" fill="rgb(222,85,22)" fg:x="945" fg:w="3"/><text x="75.1311%" y="303.50"></text></g><g><title>regex_automata::util::determinize::next (2 samples, 0.16%)</title><rect x="74.9604%" y="277" width="0.1585%" height="15" fill="rgb(239,46,39)" fg:x="946" fg:w="2"/><text x="75.2104%" y="287.50"></text></g><g><title>regex_automata::util::determinize::add_nfa_states (2 samples, 0.16%)</title><rect x="74.9604%" y="261" width="0.1585%" height="15" fill="rgb(237,12,29)" fg:x="946" fg:w="2"/><text x="75.2104%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (2 samples, 0.16%)</title><rect x="75.1189%" y="373" width="0.1585%" height="15" fill="rgb(214,77,8)" fg:x="948" fg:w="2"/><text x="75.3689%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (1 samples, 0.08%)</title><rect x="75.1981%" y="357" width="0.0792%" height="15" fill="rgb(217,168,37)" fg:x="949" fg:w="1"/><text x="75.4481%" y="367.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.1981%" y="341" width="0.0792%" height="15" fill="rgb(221,217,23)" fg:x="949" fg:w="1"/><text x="75.4481%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::wrappers::Hybrid&gt; (1 samples, 0.08%)</title><rect x="75.1981%" y="325" width="0.0792%" height="15" fill="rgb(243,229,36)" fg:x="949" fg:w="1"/><text x="75.4481%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="75.1981%" y="309" width="0.0792%" height="15" fill="rgb(251,163,40)" fg:x="949" fg:w="1"/><text x="75.4481%" y="319.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="75.1981%" y="293" width="0.0792%" height="15" fill="rgb(237,222,12)" fg:x="949" fg:w="1"/><text x="75.4481%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Class&gt; (1 samples, 0.08%)</title><rect x="75.2773%" y="325" width="0.0792%" height="15" fill="rgb(248,132,6)" fg:x="950" fg:w="1"/><text x="75.5273%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="75.2773%" y="309" width="0.0792%" height="15" fill="rgb(227,167,50)" fg:x="950" fg:w="1"/><text x="75.5273%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="75.2773%" y="293" width="0.0792%" height="15" fill="rgb(242,84,37)" fg:x="950" fg:w="1"/><text x="75.5273%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="75.2773%" y="277" width="0.0792%" height="15" fill="rgb(212,4,50)" fg:x="950" fg:w="1"/><text x="75.5273%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="75.2773%" y="261" width="0.0792%" height="15" fill="rgb(230,228,32)" fg:x="950" fg:w="1"/><text x="75.5273%" y="271.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="75.2773%" y="245" width="0.0792%" height="15" fill="rgb(248,217,23)" fg:x="950" fg:w="1"/><text x="75.5273%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (14 samples, 1.11%)</title><rect x="75.5151%" y="309" width="1.1094%" height="15" fill="rgb(238,197,32)" fg:x="953" fg:w="14"/><text x="75.7651%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (14 samples, 1.11%)</title><rect x="75.5151%" y="293" width="1.1094%" height="15" fill="rgb(236,106,1)" fg:x="953" fg:w="14"/><text x="75.7651%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (1 samples, 0.08%)</title><rect x="76.6244%" y="309" width="0.0792%" height="15" fill="rgb(219,228,13)" fg:x="967" fg:w="1"/><text x="76.8744%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="76.6244%" y="293" width="0.0792%" height="15" fill="rgb(238,30,35)" fg:x="967" fg:w="1"/><text x="76.8744%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::range_trie::RangeTrie&gt;&gt; (1 samples, 0.08%)</title><rect x="76.6244%" y="277" width="0.0792%" height="15" fill="rgb(236,70,23)" fg:x="967" fg:w="1"/><text x="76.8744%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="76.6244%" y="261" width="0.0792%" height="15" fill="rgb(249,104,48)" fg:x="967" fg:w="1"/><text x="76.8744%" y="271.50"></text></g><g><title>regex_automata::meta::wrappers::PikeVM::new (2 samples, 0.16%)</title><rect x="76.7036%" y="309" width="0.1585%" height="15" fill="rgb(254,117,50)" fg:x="968" fg:w="2"/><text x="76.9536%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="76.7829%" y="293" width="0.0792%" height="15" fill="rgb(223,152,4)" fg:x="969" fg:w="1"/><text x="77.0329%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (4 samples, 0.32%)</title><rect x="76.9414%" y="245" width="0.3170%" height="15" fill="rgb(245,6,2)" fg:x="971" fg:w="4"/><text x="77.1914%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (4 samples, 0.32%)</title><rect x="76.9414%" y="229" width="0.3170%" height="15" fill="rgb(249,150,24)" fg:x="971" fg:w="4"/><text x="77.1914%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="77.0998%" y="213" width="0.1585%" height="15" fill="rgb(228,185,42)" fg:x="973" fg:w="2"/><text x="77.3498%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="77.1791%" y="197" width="0.0792%" height="15" fill="rgb(226,39,33)" fg:x="974" fg:w="1"/><text x="77.4291%" y="207.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="77.1791%" y="181" width="0.0792%" height="15" fill="rgb(221,166,19)" fg:x="974" fg:w="1"/><text x="77.4291%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (48 samples, 3.80%)</title><rect x="77.2583%" y="245" width="3.8035%" height="15" fill="rgb(209,109,2)" fg:x="975" fg:w="48"/><text x="77.5083%" y="255.50">rege..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (48 samples, 3.80%)</title><rect x="77.2583%" y="229" width="3.8035%" height="15" fill="rgb(252,216,26)" fg:x="975" fg:w="48"/><text x="77.5083%" y="239.50">rege..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (48 samples, 3.80%)</title><rect x="77.2583%" y="213" width="3.8035%" height="15" fill="rgb(227,173,36)" fg:x="975" fg:w="48"/><text x="77.5083%" y="223.50">allo..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (54 samples, 4.28%)</title><rect x="76.8621%" y="293" width="4.2789%" height="15" fill="rgb(209,90,7)" fg:x="970" fg:w="54"/><text x="77.1121%" y="303.50">&lt;core..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (54 samples, 4.28%)</title><rect x="76.8621%" y="277" width="4.2789%" height="15" fill="rgb(250,194,11)" fg:x="970" fg:w="54"/><text x="77.1121%" y="287.50">regex..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (53 samples, 4.20%)</title><rect x="76.9414%" y="261" width="4.1997%" height="15" fill="rgb(220,72,50)" fg:x="971" fg:w="53"/><text x="77.1914%" y="271.50">regex..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (1 samples, 0.08%)</title><rect x="81.0618%" y="245" width="0.0792%" height="15" fill="rgb(222,106,48)" fg:x="1023" fg:w="1"/><text x="81.3118%" y="255.50"></text></g><g><title>__libc_calloc (1 samples, 0.08%)</title><rect x="81.2995%" y="277" width="0.0792%" height="15" fill="rgb(216,220,45)" fg:x="1026" fg:w="1"/><text x="81.5495%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.3788%" y="277" width="0.0792%" height="15" fill="rgb(234,112,18)" fg:x="1027" fg:w="1"/><text x="81.6288%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.3788%" y="261" width="0.0792%" height="15" fill="rgb(206,179,9)" fg:x="1027" fg:w="1"/><text x="81.6288%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.3788%" y="245" width="0.0792%" height="15" fill="rgb(215,115,40)" fg:x="1027" fg:w="1"/><text x="81.6288%" y="255.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (4 samples, 0.32%)</title><rect x="81.4580%" y="277" width="0.3170%" height="15" fill="rgb(222,69,34)" fg:x="1028" fg:w="4"/><text x="81.7080%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="81.6165%" y="261" width="0.1585%" height="15" fill="rgb(209,161,10)" fg:x="1030" fg:w="2"/><text x="81.8665%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="81.6165%" y="245" width="0.1585%" height="15" fill="rgb(217,6,38)" fg:x="1030" fg:w="2"/><text x="81.8665%" y="255.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="81.6165%" y="229" width="0.1585%" height="15" fill="rgb(229,229,48)" fg:x="1030" fg:w="2"/><text x="81.8665%" y="239.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="81.8542%" y="261" width="0.0792%" height="15" fill="rgb(225,21,28)" fg:x="1033" fg:w="1"/><text x="82.1042%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="81.9334%" y="261" width="0.0792%" height="15" fill="rgb(206,33,13)" fg:x="1034" fg:w="1"/><text x="82.1834%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="81.9334%" y="245" width="0.0792%" height="15" fill="rgb(242,178,17)" fg:x="1034" fg:w="1"/><text x="82.1834%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="81.9334%" y="229" width="0.0792%" height="15" fill="rgb(220,162,5)" fg:x="1034" fg:w="1"/><text x="82.1834%" y="239.50"></text></g><g><title>regex_automata::meta::strategy::new (85 samples, 6.74%)</title><rect x="75.3566%" y="325" width="6.7353%" height="15" fill="rgb(210,33,43)" fg:x="951" fg:w="85"/><text x="75.6066%" y="335.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (66 samples, 5.23%)</title><rect x="76.8621%" y="309" width="5.2298%" height="15" fill="rgb(216,116,54)" fg:x="970" fg:w="66"/><text x="77.1121%" y="319.50">regex_..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (12 samples, 0.95%)</title><rect x="81.1410%" y="293" width="0.9509%" height="15" fill="rgb(249,92,24)" fg:x="1024" fg:w="12"/><text x="81.3910%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="81.7750%" y="277" width="0.3170%" height="15" fill="rgb(231,189,14)" fg:x="1032" fg:w="4"/><text x="82.0250%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="82.0127%" y="261" width="0.0792%" height="15" fill="rgb(230,8,41)" fg:x="1035" fg:w="1"/><text x="82.2627%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="82.0127%" y="245" width="0.0792%" height="15" fill="rgb(249,7,27)" fg:x="1035" fg:w="1"/><text x="82.2627%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="82.0127%" y="229" width="0.0792%" height="15" fill="rgb(232,86,5)" fg:x="1035" fg:w="1"/><text x="82.2627%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="82.0127%" y="213" width="0.0792%" height="15" fill="rgb(224,175,18)" fg:x="1035" fg:w="1"/><text x="82.2627%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class_range (1 samples, 0.08%)</title><rect x="82.0919%" y="277" width="0.0792%" height="15" fill="rgb(220,129,12)" fg:x="1036" fg:w="1"/><text x="82.3419%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (4 samples, 0.32%)</title><rect x="82.0919%" y="293" width="0.3170%" height="15" fill="rgb(210,19,36)" fg:x="1036" fg:w="4"/><text x="82.3419%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (3 samples, 0.24%)</title><rect x="82.1712%" y="277" width="0.2377%" height="15" fill="rgb(219,96,14)" fg:x="1037" fg:w="3"/><text x="82.4212%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="82.2504%" y="261" width="0.1585%" height="15" fill="rgb(249,106,1)" fg:x="1038" fg:w="2"/><text x="82.5004%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.2504%" y="245" width="0.1585%" height="15" fill="rgb(249,155,20)" fg:x="1038" fg:w="2"/><text x="82.5004%" y="255.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="82.2504%" y="229" width="0.1585%" height="15" fill="rgb(244,168,9)" fg:x="1038" fg:w="2"/><text x="82.5004%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (1 samples, 0.08%)</title><rect x="82.4089%" y="293" width="0.0792%" height="15" fill="rgb(216,23,50)" fg:x="1040" fg:w="1"/><text x="82.6589%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (6 samples, 0.48%)</title><rect x="82.0919%" y="325" width="0.4754%" height="15" fill="rgb(224,219,20)" fg:x="1036" fg:w="6"/><text x="82.3419%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (6 samples, 0.48%)</title><rect x="82.0919%" y="309" width="0.4754%" height="15" fill="rgb(222,156,15)" fg:x="1036" fg:w="6"/><text x="82.3419%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="82.4881%" y="293" width="0.0792%" height="15" fill="rgb(231,97,17)" fg:x="1041" fg:w="1"/><text x="82.7381%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="82.7258%" y="277" width="0.1585%" height="15" fill="rgb(218,70,48)" fg:x="1044" fg:w="2"/><text x="82.9758%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="82.7258%" y="261" width="0.1585%" height="15" fill="rgb(212,196,52)" fg:x="1044" fg:w="2"/><text x="82.9758%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="82.7258%" y="245" width="0.1585%" height="15" fill="rgb(243,203,18)" fg:x="1044" fg:w="2"/><text x="82.9758%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (3 samples, 0.24%)</title><rect x="82.7258%" y="293" width="0.2377%" height="15" fill="rgb(252,125,41)" fg:x="1044" fg:w="3"/><text x="82.9758%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="82.8843%" y="277" width="0.0792%" height="15" fill="rgb(223,180,33)" fg:x="1046" fg:w="1"/><text x="83.1343%" y="287.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="82.8843%" y="261" width="0.0792%" height="15" fill="rgb(254,159,46)" fg:x="1046" fg:w="1"/><text x="83.1343%" y="271.50"></text></g><g><title>regex::regex::string::Regex::new (98 samples, 7.77%)</title><rect x="75.2773%" y="373" width="7.7655%" height="15" fill="rgb(254,38,10)" fg:x="950" fg:w="98"/><text x="75.5273%" y="383.50">regex::rege..</text></g><g><title>regex::builders::Builder::build_one_string (98 samples, 7.77%)</title><rect x="75.2773%" y="357" width="7.7655%" height="15" fill="rgb(208,217,32)" fg:x="950" fg:w="98"/><text x="75.5273%" y="367.50">regex::buil..</text></g><g><title>regex_automata::meta::regex::Builder::build (98 samples, 7.77%)</title><rect x="75.2773%" y="341" width="7.7655%" height="15" fill="rgb(221,120,13)" fg:x="950" fg:w="98"/><text x="75.5273%" y="351.50">regex_autom..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (6 samples, 0.48%)</title><rect x="82.5674%" y="325" width="0.4754%" height="15" fill="rgb(246,54,52)" fg:x="1042" fg:w="6"/><text x="82.8174%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (6 samples, 0.48%)</title><rect x="82.5674%" y="309" width="0.4754%" height="15" fill="rgb(242,34,25)" fg:x="1042" fg:w="6"/><text x="82.8174%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="82.9635%" y="293" width="0.0792%" height="15" fill="rgb(247,209,9)" fg:x="1047" fg:w="1"/><text x="83.2135%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_class_unicode (1 samples, 0.08%)</title><rect x="82.9635%" y="277" width="0.0792%" height="15" fill="rgb(228,71,26)" fg:x="1047" fg:w="1"/><text x="83.2135%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.2805%" y="293" width="0.0792%" height="15" fill="rgb(222,145,49)" fg:x="1051" fg:w="1"/><text x="83.5305%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.2805%" y="277" width="0.0792%" height="15" fill="rgb(218,121,17)" fg:x="1051" fg:w="1"/><text x="83.5305%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.08%)</title><rect x="83.3597%" y="293" width="0.0792%" height="15" fill="rgb(244,50,7)" fg:x="1052" fg:w="1"/><text x="83.6097%" y="303.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.08%)</title><rect x="83.3597%" y="277" width="0.0792%" height="15" fill="rgb(246,229,37)" fg:x="1052" fg:w="1"/><text x="83.6097%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.08%)</title><rect x="83.3597%" y="261" width="0.0792%" height="15" fill="rgb(225,18,5)" fg:x="1052" fg:w="1"/><text x="83.6097%" y="271.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (6 samples, 0.48%)</title><rect x="83.0428%" y="309" width="0.4754%" height="15" fill="rgb(213,204,8)" fg:x="1048" fg:w="6"/><text x="83.2928%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="83.4390%" y="293" width="0.0792%" height="15" fill="rgb(238,103,6)" fg:x="1053" fg:w="1"/><text x="83.6890%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (7 samples, 0.55%)</title><rect x="83.0428%" y="325" width="0.5547%" height="15" fill="rgb(222,25,35)" fg:x="1048" fg:w="7"/><text x="83.2928%" y="335.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="83.5182%" y="309" width="0.0792%" height="15" fill="rgb(213,203,35)" fg:x="1054" fg:w="1"/><text x="83.7682%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.5182%" y="293" width="0.0792%" height="15" fill="rgb(221,79,53)" fg:x="1054" fg:w="1"/><text x="83.7682%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="83.5182%" y="277" width="0.0792%" height="15" fill="rgb(243,200,35)" fg:x="1054" fg:w="1"/><text x="83.7682%" y="287.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="83.5182%" y="261" width="0.0792%" height="15" fill="rgb(248,60,25)" fg:x="1054" fg:w="1"/><text x="83.7682%" y="271.50"></text></g><g><title>indefinite::helper::Helper::get_first_word (111 samples, 8.80%)</title><rect x="74.8811%" y="389" width="8.7956%" height="15" fill="rgb(227,53,46)" fg:x="945" fg:w="111"/><text x="75.1311%" y="399.50">indefinite::..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (8 samples, 0.63%)</title><rect x="83.0428%" y="373" width="0.6339%" height="15" fill="rgb(216,120,32)" fg:x="1048" fg:w="8"/><text x="83.2928%" y="383.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (8 samples, 0.63%)</title><rect x="83.0428%" y="357" width="0.6339%" height="15" fill="rgb(220,134,1)" fg:x="1048" fg:w="8"/><text x="83.2928%" y="367.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (8 samples, 0.63%)</title><rect x="83.0428%" y="341" width="0.6339%" height="15" fill="rgb(237,168,5)" fg:x="1048" fg:w="8"/><text x="83.2928%" y="351.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="83.5975%" y="325" width="0.0792%" height="15" fill="rgb(231,100,33)" fg:x="1055" fg:w="1"/><text x="83.8475%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="83.5975%" y="309" width="0.0792%" height="15" fill="rgb(236,177,47)" fg:x="1055" fg:w="1"/><text x="83.8475%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="83.5975%" y="293" width="0.0792%" height="15" fill="rgb(235,7,49)" fg:x="1055" fg:w="1"/><text x="83.8475%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.16%)</title><rect x="83.7559%" y="325" width="0.1585%" height="15" fill="rgb(232,119,22)" fg:x="1057" fg:w="2"/><text x="84.0059%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="83.7559%" y="309" width="0.1585%" height="15" fill="rgb(254,73,53)" fg:x="1057" fg:w="2"/><text x="84.0059%" y="319.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (4 samples, 0.32%)</title><rect x="83.6767%" y="341" width="0.3170%" height="15" fill="rgb(251,35,20)" fg:x="1056" fg:w="4"/><text x="83.9267%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::strategy::Core&gt; (1 samples, 0.08%)</title><rect x="83.9144%" y="325" width="0.0792%" height="15" fill="rgb(241,119,20)" fg:x="1059" fg:w="1"/><text x="84.1644%" y="335.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="83.9144%" y="309" width="0.0792%" height="15" fill="rgb(207,102,14)" fg:x="1059" fg:w="1"/><text x="84.1644%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex::regex::string::Regex&gt; (5 samples, 0.40%)</title><rect x="83.6767%" y="373" width="0.3962%" height="15" fill="rgb(248,201,50)" fg:x="1056" fg:w="5"/><text x="83.9267%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::util::pool::Pool&lt;regex_automata::meta::regex::Cache,alloc::boxed::Box&lt;dyn core::ops::function::Fn&lt;()&gt;+Output = regex_automata::meta::regex::Cache+core::marker::Send+core::panic::unwind_safe::RefUnwindSafe+core::panic::unwind_safe::UnwindSafe+core::marker::Sync&gt;&gt;&gt; (5 samples, 0.40%)</title><rect x="83.6767%" y="357" width="0.3962%" height="15" fill="rgb(222,185,44)" fg:x="1056" fg:w="5"/><text x="83.9267%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::meta::regex::Cache&gt; (1 samples, 0.08%)</title><rect x="83.9937%" y="341" width="0.0792%" height="15" fill="rgb(218,107,18)" fg:x="1060" fg:w="1"/><text x="84.2437%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.08%)</title><rect x="83.9937%" y="325" width="0.0792%" height="15" fill="rgb(237,177,39)" fg:x="1060" fg:w="1"/><text x="84.2437%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="83.9937%" y="309" width="0.0792%" height="15" fill="rgb(246,69,6)" fg:x="1060" fg:w="1"/><text x="84.2437%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.32%)</title><rect x="84.6276%" y="277" width="0.3170%" height="15" fill="rgb(234,208,37)" fg:x="1068" fg:w="4"/><text x="84.8776%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.32%)</title><rect x="84.6276%" y="261" width="0.3170%" height="15" fill="rgb(225,4,6)" fg:x="1068" fg:w="4"/><text x="84.8776%" y="271.50"></text></g><g><title>realloc (4 samples, 0.32%)</title><rect x="84.6276%" y="245" width="0.3170%" height="15" fill="rgb(233,45,0)" fg:x="1068" fg:w="4"/><text x="84.8776%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (13 samples, 1.03%)</title><rect x="84.2314%" y="293" width="1.0301%" height="15" fill="rgb(226,136,5)" fg:x="1063" fg:w="13"/><text x="84.4814%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (4 samples, 0.32%)</title><rect x="84.9445%" y="277" width="0.3170%" height="15" fill="rgb(211,91,47)" fg:x="1072" fg:w="4"/><text x="85.1945%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (15 samples, 1.19%)</title><rect x="84.1521%" y="309" width="1.1886%" height="15" fill="rgb(242,88,51)" fg:x="1062" fg:w="15"/><text x="84.4021%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="85.2615%" y="293" width="0.0792%" height="15" fill="rgb(230,91,28)" fg:x="1076" fg:w="1"/><text x="85.5115%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.2615%" y="277" width="0.0792%" height="15" fill="rgb(254,186,29)" fg:x="1076" fg:w="1"/><text x="85.5115%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.2615%" y="261" width="0.0792%" height="15" fill="rgb(238,6,4)" fg:x="1076" fg:w="1"/><text x="85.5115%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.2615%" y="245" width="0.0792%" height="15" fill="rgb(221,151,16)" fg:x="1076" fg:w="1"/><text x="85.5115%" y="255.50"></text></g><g><title>regex::regex::string::Regex::is_match_at (17 samples, 1.35%)</title><rect x="84.0729%" y="373" width="1.3471%" height="15" fill="rgb(251,143,52)" fg:x="1061" fg:w="17"/><text x="84.3229%" y="383.50"></text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (17 samples, 1.35%)</title><rect x="84.0729%" y="357" width="1.3471%" height="15" fill="rgb(206,90,15)" fg:x="1061" fg:w="17"/><text x="84.3229%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (16 samples, 1.27%)</title><rect x="84.1521%" y="341" width="1.2678%" height="15" fill="rgb(218,35,8)" fg:x="1062" fg:w="16"/><text x="84.4021%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (16 samples, 1.27%)</title><rect x="84.1521%" y="325" width="1.2678%" height="15" fill="rgb(239,215,6)" fg:x="1062" fg:w="16"/><text x="84.4021%" y="335.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::PikeVM::create_cache (1 samples, 0.08%)</title><rect x="85.3407%" y="309" width="0.0792%" height="15" fill="rgb(245,116,39)" fg:x="1077" fg:w="1"/><text x="85.5907%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::pikevm::ActiveStates::reset (1 samples, 0.08%)</title><rect x="85.3407%" y="293" width="0.0792%" height="15" fill="rgb(242,65,28)" fg:x="1077" fg:w="1"/><text x="85.5907%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.3407%" y="277" width="0.0792%" height="15" fill="rgb(252,132,53)" fg:x="1077" fg:w="1"/><text x="85.5907%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.3407%" y="261" width="0.0792%" height="15" fill="rgb(224,159,50)" fg:x="1077" fg:w="1"/><text x="85.5907%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="85.3407%" y="245" width="0.0792%" height="15" fill="rgb(224,93,4)" fg:x="1077" fg:w="1"/><text x="85.5907%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.4200%" y="325" width="0.0792%" height="15" fill="rgb(208,81,34)" fg:x="1078" fg:w="1"/><text x="85.6700%" y="335.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="85.4200%" y="309" width="0.0792%" height="15" fill="rgb(233,92,54)" fg:x="1078" fg:w="1"/><text x="85.6700%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::hir::HirKind&gt; (1 samples, 0.08%)</title><rect x="85.4200%" y="293" width="0.0792%" height="15" fill="rgb(237,21,14)" fg:x="1078" fg:w="1"/><text x="85.6700%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::Ast&gt; (2 samples, 0.16%)</title><rect x="85.4992%" y="325" width="0.1585%" height="15" fill="rgb(249,128,51)" fg:x="1079" fg:w="2"/><text x="85.7492%" y="335.50"></text></g><g><title>&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4992%" y="309" width="0.1585%" height="15" fill="rgb(223,129,24)" fg:x="1079" fg:w="2"/><text x="85.7492%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_syntax::ast::ClassSet&gt; (2 samples, 0.16%)</title><rect x="85.4992%" y="293" width="0.1585%" height="15" fill="rgb(231,168,25)" fg:x="1079" fg:w="2"/><text x="85.7492%" y="303.50"></text></g><g><title>&lt;regex_syntax::ast::ClassSet as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="85.4992%" y="277" width="0.1585%" height="15" fill="rgb(224,39,20)" fg:x="1079" fg:w="2"/><text x="85.7492%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.08%)</title><rect x="85.5784%" y="261" width="0.0792%" height="15" fill="rgb(225,152,53)" fg:x="1080" fg:w="1"/><text x="85.8284%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="85.5784%" y="245" width="0.0792%" height="15" fill="rgb(252,17,24)" fg:x="1080" fg:w="1"/><text x="85.8284%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="85.5784%" y="229" width="0.0792%" height="15" fill="rgb(250,114,30)" fg:x="1080" fg:w="1"/><text x="85.8284%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="85.5784%" y="213" width="0.0792%" height="15" fill="rgb(229,5,4)" fg:x="1080" fg:w="1"/><text x="85.8284%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="85.8954%" y="293" width="0.0792%" height="15" fill="rgb(225,176,49)" fg:x="1084" fg:w="1"/><text x="86.1454%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (10 samples, 0.79%)</title><rect x="85.8954%" y="309" width="0.7924%" height="15" fill="rgb(224,221,49)" fg:x="1084" fg:w="10"/><text x="86.1454%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::cell::RefCell&lt;regex_automata::nfa::thompson::compiler::Utf8State&gt;&gt; (9 samples, 0.71%)</title><rect x="85.9746%" y="293" width="0.7132%" height="15" fill="rgb(253,169,27)" fg:x="1085" fg:w="9"/><text x="86.2246%" y="303.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="86.5293%" y="277" width="0.1585%" height="15" fill="rgb(211,206,16)" fg:x="1092" fg:w="2"/><text x="86.7793%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (8 samples, 0.63%)</title><rect x="86.6878%" y="309" width="0.6339%" height="15" fill="rgb(244,87,35)" fg:x="1094" fg:w="8"/><text x="86.9378%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (7 samples, 0.55%)</title><rect x="86.7670%" y="293" width="0.5547%" height="15" fill="rgb(246,28,10)" fg:x="1095" fg:w="7"/><text x="87.0170%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="87.2425%" y="277" width="0.0792%" height="15" fill="rgb(229,12,44)" fg:x="1101" fg:w="1"/><text x="87.4925%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.2425%" y="261" width="0.0792%" height="15" fill="rgb(210,145,37)" fg:x="1101" fg:w="1"/><text x="87.4925%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.2425%" y="245" width="0.0792%" height="15" fill="rgb(227,112,52)" fg:x="1101" fg:w="1"/><text x="87.4925%" y="255.50"></text></g><g><title>__libc_free (2 samples, 0.16%)</title><rect x="87.3217%" y="277" width="0.1585%" height="15" fill="rgb(238,155,34)" fg:x="1102" fg:w="2"/><text x="87.5717%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::compile_transition (2 samples, 0.16%)</title><rect x="87.4802%" y="277" width="0.1585%" height="15" fill="rgb(239,226,36)" fg:x="1104" fg:w="2"/><text x="87.7302%" y="287.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::add_dfa_state_for_nfa_state (2 samples, 0.16%)</title><rect x="87.4802%" y="261" width="0.1585%" height="15" fill="rgb(230,16,23)" fg:x="1104" fg:w="2"/><text x="87.7302%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="87.5594%" y="245" width="0.0792%" height="15" fill="rgb(236,171,36)" fg:x="1105" fg:w="1"/><text x="87.8094%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="87.5594%" y="229" width="0.0792%" height="15" fill="rgb(221,22,14)" fg:x="1105" fg:w="1"/><text x="87.8094%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="87.5594%" y="213" width="0.0792%" height="15" fill="rgb(242,43,11)" fg:x="1105" fg:w="1"/><text x="87.8094%" y="223.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="87.6387%" y="245" width="0.0792%" height="15" fill="rgb(232,69,23)" fg:x="1106" fg:w="1"/><text x="87.8887%" y="255.50"></text></g><g><title>regex_automata::dfa::onepass::Builder::build_from_nfa (8 samples, 0.63%)</title><rect x="87.3217%" y="293" width="0.6339%" height="15" fill="rgb(216,180,54)" fg:x="1102" fg:w="8"/><text x="87.5717%" y="303.50"></text></g><g><title>regex_automata::dfa::onepass::InternalBuilder::shuffle_states (4 samples, 0.32%)</title><rect x="87.6387%" y="277" width="0.3170%" height="15" fill="rgb(216,5,24)" fg:x="1106" fg:w="4"/><text x="87.8887%" y="287.50"></text></g><g><title>regex_automata::dfa::remapper::Remapper::remap (4 samples, 0.32%)</title><rect x="87.6387%" y="261" width="0.3170%" height="15" fill="rgb(225,89,9)" fg:x="1106" fg:w="4"/><text x="87.8887%" y="271.50"></text></g><g><title>regex_automata::dfa::remapper::onepass::&lt;impl regex_automata::dfa::remapper::Remappable for regex_automata::dfa::onepass::DFA&gt;::remap (3 samples, 0.24%)</title><rect x="87.7179%" y="245" width="0.2377%" height="15" fill="rgb(243,75,33)" fg:x="1107" fg:w="3"/><text x="87.9679%" y="255.50"></text></g><g><title>regex_automata::meta::wrappers::OnePass::new (9 samples, 0.71%)</title><rect x="87.3217%" y="309" width="0.7132%" height="15" fill="rgb(247,141,45)" fg:x="1102" fg:w="9"/><text x="87.5717%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::new (1 samples, 0.08%)</title><rect x="87.9556%" y="293" width="0.0792%" height="15" fill="rgb(232,177,36)" fg:x="1110" fg:w="1"/><text x="88.2056%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::new (1 samples, 0.08%)</title><rect x="87.9556%" y="277" width="0.0792%" height="15" fill="rgb(219,125,36)" fg:x="1110" fg:w="1"/><text x="88.2056%" y="287.50"></text></g><g><title>regex_automata::nfa::thompson::range_trie::RangeTrie::add_empty (1 samples, 0.08%)</title><rect x="87.9556%" y="261" width="0.0792%" height="15" fill="rgb(227,94,9)" fg:x="1110" fg:w="1"/><text x="88.2056%" y="271.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (1 samples, 0.08%)</title><rect x="88.1141%" y="229" width="0.0792%" height="15" fill="rgb(240,34,52)" fg:x="1112" fg:w="1"/><text x="88.3641%" y="239.50"></text></g><g><title>&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.24%)</title><rect x="88.5103%" y="197" width="0.2377%" height="15" fill="rgb(216,45,12)" fg:x="1117" fg:w="3"/><text x="88.7603%" y="207.50"></text></g><g><title>__libc_free (3 samples, 0.24%)</title><rect x="88.7480%" y="197" width="0.2377%" height="15" fill="rgb(246,21,19)" fg:x="1120" fg:w="3"/><text x="88.9980%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::add (1 samples, 0.08%)</title><rect x="88.9857%" y="197" width="0.0792%" height="15" fill="rgb(213,98,42)" fg:x="1123" fg:w="1"/><text x="89.2357%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::patch (1 samples, 0.08%)</title><rect x="89.0650%" y="197" width="0.0792%" height="15" fill="rgb(250,136,47)" fg:x="1124" fg:w="1"/><text x="89.3150%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.24%)</title><rect x="89.3027%" y="165" width="0.2377%" height="15" fill="rgb(251,124,27)" fg:x="1127" fg:w="3"/><text x="89.5527%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="89.3819%" y="149" width="0.1585%" height="15" fill="rgb(229,180,14)" fg:x="1128" fg:w="2"/><text x="89.6319%" y="159.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="89.3819%" y="133" width="0.1585%" height="15" fill="rgb(245,216,25)" fg:x="1128" fg:w="2"/><text x="89.6319%" y="143.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::add (9 samples, 0.71%)</title><rect x="89.1442%" y="197" width="0.7132%" height="15" fill="rgb(251,43,5)" fg:x="1125" fg:w="9"/><text x="89.3942%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (8 samples, 0.63%)</title><rect x="89.2235%" y="181" width="0.6339%" height="15" fill="rgb(250,128,24)" fg:x="1126" fg:w="8"/><text x="89.4735%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (4 samples, 0.32%)</title><rect x="89.5404%" y="165" width="0.3170%" height="15" fill="rgb(217,117,27)" fg:x="1130" fg:w="4"/><text x="89.7904%" y="175.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="89.7781%" y="149" width="0.0792%" height="15" fill="rgb(245,147,4)" fg:x="1133" fg:w="1"/><text x="90.0281%" y="159.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::finish (1 samples, 0.08%)</title><rect x="89.8574%" y="197" width="0.0792%" height="15" fill="rgb(242,201,35)" fg:x="1134" fg:w="1"/><text x="90.1074%" y="207.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile_from (1 samples, 0.08%)</title><rect x="89.8574%" y="181" width="0.0792%" height="15" fill="rgb(218,181,1)" fg:x="1134" fg:w="1"/><text x="90.1074%" y="191.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::compile (1 samples, 0.08%)</title><rect x="89.8574%" y="165" width="0.0792%" height="15" fill="rgb(222,6,29)" fg:x="1134" fg:w="1"/><text x="90.1074%" y="175.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Utf8Compiler::new (43 samples, 3.41%)</title><rect x="89.9366%" y="197" width="3.4073%" height="15" fill="rgb(208,186,3)" fg:x="1135" fg:w="43"/><text x="90.1866%" y="207.50">reg..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8BoundedMap::clear (42 samples, 3.33%)</title><rect x="90.0158%" y="181" width="3.3281%" height="15" fill="rgb(216,36,26)" fg:x="1136" fg:w="42"/><text x="90.2658%" y="191.50">reg..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (42 samples, 3.33%)</title><rect x="90.0158%" y="165" width="3.3281%" height="15" fill="rgb(248,201,23)" fg:x="1136" fg:w="42"/><text x="90.2658%" y="175.50">all..</text></g><g><title>regex_automata::nfa::thompson::map::Utf8SuffixMap::clear (3 samples, 0.24%)</title><rect x="93.3439%" y="197" width="0.2377%" height="15" fill="rgb(251,170,31)" fg:x="1178" fg:w="3"/><text x="93.5939%" y="207.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="93.5024%" y="181" width="0.0792%" height="15" fill="rgb(207,110,25)" fg:x="1180" fg:w="1"/><text x="93.7524%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 6.10%)</title><rect x="88.0349%" y="293" width="6.1014%" height="15" fill="rgb(250,54,15)" fg:x="1111" fg:w="77"/><text x="88.2849%" y="303.50">&lt;core::i..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (77 samples, 6.10%)</title><rect x="88.0349%" y="277" width="6.1014%" height="15" fill="rgb(227,68,33)" fg:x="1111" fg:w="77"/><text x="88.2849%" y="287.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (77 samples, 6.10%)</title><rect x="88.0349%" y="261" width="6.1014%" height="15" fill="rgb(238,34,41)" fg:x="1111" fg:w="77"/><text x="88.2849%" y="271.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_cap (76 samples, 6.02%)</title><rect x="88.1141%" y="245" width="6.0222%" height="15" fill="rgb(220,11,15)" fg:x="1112" fg:w="76"/><text x="88.3641%" y="255.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c_at_least (75 samples, 5.94%)</title><rect x="88.1933%" y="229" width="5.9429%" height="15" fill="rgb(246,111,35)" fg:x="1113" fg:w="75"/><text x="88.4433%" y="239.50">regex_au..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::c (75 samples, 5.94%)</title><rect x="88.1933%" y="213" width="5.9429%" height="15" fill="rgb(209,88,53)" fg:x="1113" fg:w="75"/><text x="88.4433%" y="223.50">regex_au..</text></g><g><title>regex_syntax::utf8::Utf8Sequences::new (7 samples, 0.55%)</title><rect x="93.5816%" y="197" width="0.5547%" height="15" fill="rgb(231,185,47)" fg:x="1181" fg:w="7"/><text x="93.8316%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.32%)</title><rect x="93.8193%" y="181" width="0.3170%" height="15" fill="rgb(233,154,1)" fg:x="1184" fg:w="4"/><text x="94.0693%" y="191.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.24%)</title><rect x="93.8986%" y="165" width="0.2377%" height="15" fill="rgb(225,15,46)" fg:x="1185" fg:w="3"/><text x="94.1486%" y="175.50"></text></g><g><title>__libc_malloc (2 samples, 0.16%)</title><rect x="93.9778%" y="149" width="0.1585%" height="15" fill="rgb(211,135,41)" fg:x="1186" fg:w="2"/><text x="94.2278%" y="159.50"></text></g><g><title>__rdl_realloc (1 samples, 0.08%)</title><rect x="94.4532%" y="229" width="0.0792%" height="15" fill="rgb(208,54,0)" fg:x="1192" fg:w="1"/><text x="94.7032%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.08%)</title><rect x="94.4532%" y="213" width="0.0792%" height="15" fill="rgb(244,136,14)" fg:x="1192" fg:w="1"/><text x="94.7032%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::add (5 samples, 0.40%)</title><rect x="94.2155%" y="277" width="0.3962%" height="15" fill="rgb(241,56,14)" fg:x="1189" fg:w="5"/><text x="94.4655%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.16%)</title><rect x="94.4532%" y="261" width="0.1585%" height="15" fill="rgb(205,80,24)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="94.4532%" y="245" width="0.1585%" height="15" fill="rgb(220,57,4)" fg:x="1192" fg:w="2"/><text x="94.7032%" y="255.50"></text></g><g><title>std::alloc::default_alloc_error_hook (1 samples, 0.08%)</title><rect x="94.5325%" y="229" width="0.0792%" height="15" fill="rgb(226,193,50)" fg:x="1193" fg:w="1"/><text x="94.7825%" y="239.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="94.5325%" y="213" width="0.0792%" height="15" fill="rgb(231,168,22)" fg:x="1193" fg:w="1"/><text x="94.7825%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (9 samples, 0.71%)</title><rect x="94.1363%" y="293" width="0.7132%" height="15" fill="rgb(254,215,14)" fg:x="1188" fg:w="9"/><text x="94.3863%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (3 samples, 0.24%)</title><rect x="94.6117%" y="277" width="0.2377%" height="15" fill="rgb(211,115,16)" fg:x="1194" fg:w="3"/><text x="94.8617%" y="287.50"></text></g><g><title>regex_automata::meta::strategy::new (117 samples, 9.27%)</title><rect x="85.6577%" y="325" width="9.2710%" height="15" fill="rgb(236,210,16)" fg:x="1081" fg:w="117"/><text x="85.9077%" y="335.50">regex_automat..</text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (87 samples, 6.89%)</title><rect x="88.0349%" y="309" width="6.8938%" height="15" fill="rgb(221,94,12)" fg:x="1111" fg:w="87"/><text x="88.2849%" y="319.50">regex_aut..</text></g><g><title>regex_automata::nfa::thompson::builder::Builder::clear (1 samples, 0.08%)</title><rect x="94.8494%" y="293" width="0.0792%" height="15" fill="rgb(235,218,49)" fg:x="1197" fg:w="1"/><text x="95.0994%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_class (1 samples, 0.08%)</title><rect x="95.0079%" y="277" width="0.0792%" height="15" fill="rgb(217,114,14)" fg:x="1199" fg:w="1"/><text x="95.2579%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (3 samples, 0.24%)</title><rect x="94.9287%" y="293" width="0.2377%" height="15" fill="rgb(216,145,22)" fg:x="1198" fg:w="3"/><text x="95.1787%" y="303.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="95.0872%" y="277" width="0.0792%" height="15" fill="rgb(217,112,39)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="95.0872%" y="261" width="0.0792%" height="15" fill="rgb(225,85,32)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="95.0872%" y="245" width="0.0792%" height="15" fill="rgb(245,209,47)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.0872%" y="229" width="0.0792%" height="15" fill="rgb(218,220,15)" fg:x="1200" fg:w="1"/><text x="95.3372%" y="239.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="94.9287%" y="325" width="0.3170%" height="15" fill="rgb(222,202,31)" fg:x="1198" fg:w="4"/><text x="95.1787%" y="335.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="94.9287%" y="309" width="0.3170%" height="15" fill="rgb(243,203,4)" fg:x="1198" fg:w="4"/><text x="95.1787%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (1 samples, 0.08%)</title><rect x="95.1664%" y="293" width="0.0792%" height="15" fill="rgb(237,92,17)" fg:x="1201" fg:w="1"/><text x="95.4164%" y="303.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.2456%" y="277" width="0.0792%" height="15" fill="rgb(231,119,7)" fg:x="1202" fg:w="1"/><text x="95.4956%" y="287.50"></text></g><g><title>core::slice::sort::merge_sort (1 samples, 0.08%)</title><rect x="95.2456%" y="261" width="0.0792%" height="15" fill="rgb(237,82,41)" fg:x="1202" fg:w="1"/><text x="95.4956%" y="271.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="95.2456%" y="245" width="0.0792%" height="15" fill="rgb(226,81,48)" fg:x="1202" fg:w="1"/><text x="95.4956%" y="255.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::union (1 samples, 0.08%)</title><rect x="95.3249%" y="277" width="0.0792%" height="15" fill="rgb(234,70,51)" fg:x="1203" fg:w="1"/><text x="95.5749%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,alloc::vec::into_iter::IntoIter&lt;T&gt;&gt;&gt;::from_iter (1 samples, 0.08%)</title><rect x="95.4041%" y="245" width="0.0792%" height="15" fill="rgb(251,86,4)" fg:x="1204" fg:w="1"/><text x="95.6541%" y="255.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (4 samples, 0.32%)</title><rect x="95.2456%" y="293" width="0.3170%" height="15" fill="rgb(244,144,28)" fg:x="1202" fg:w="4"/><text x="95.4956%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::TranslatorI::hir_perl_unicode_class (2 samples, 0.16%)</title><rect x="95.4041%" y="277" width="0.1585%" height="15" fill="rgb(232,161,39)" fg:x="1204" fg:w="2"/><text x="95.6541%" y="287.50"></text></g><g><title>regex_syntax::unicode::perl_digit (2 samples, 0.16%)</title><rect x="95.4041%" y="261" width="0.1585%" height="15" fill="rgb(247,34,51)" fg:x="1204" fg:w="2"/><text x="95.6541%" y="271.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="95.4834%" y="245" width="0.0792%" height="15" fill="rgb(225,132,2)" fg:x="1205" fg:w="1"/><text x="95.7334%" y="255.50"></text></g><g><title>regex_syntax::hir::Hir::concat (1 samples, 0.08%)</title><rect x="95.5626%" y="277" width="0.0792%" height="15" fill="rgb(209,159,44)" fg:x="1206" fg:w="1"/><text x="95.8126%" y="287.50"></text></g><g><title>regex_syntax::hir::Properties::repetition (1 samples, 0.08%)</title><rect x="95.6418%" y="277" width="0.0792%" height="15" fill="rgb(251,214,1)" fg:x="1207" fg:w="1"/><text x="95.8918%" y="287.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="95.6418%" y="261" width="0.0792%" height="15" fill="rgb(247,84,47)" fg:x="1207" fg:w="1"/><text x="95.8918%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="95.6418%" y="245" width="0.0792%" height="15" fill="rgb(240,111,43)" fg:x="1207" fg:w="1"/><text x="95.8918%" y="255.50"></text></g><g><title>indefinite::rules::number::Number::check (153 samples, 12.12%)</title><rect x="83.6767%" y="389" width="12.1236%" height="15" fill="rgb(215,214,35)" fg:x="1056" fg:w="153"/><text x="83.9267%" y="399.50">indefinite::rules:..</text></g><g><title>regex::regex::string::Regex::new (131 samples, 10.38%)</title><rect x="85.4200%" y="373" width="10.3803%" height="15" fill="rgb(248,207,23)" fg:x="1078" fg:w="131"/><text x="85.6700%" y="383.50">regex::regex::s..</text></g><g><title>regex::builders::Builder::build_one_string (131 samples, 10.38%)</title><rect x="85.4200%" y="357" width="10.3803%" height="15" fill="rgb(214,186,4)" fg:x="1078" fg:w="131"/><text x="85.6700%" y="367.50">regex::builders..</text></g><g><title>regex_automata::meta::regex::Builder::build (131 samples, 10.38%)</title><rect x="85.4200%" y="341" width="10.3803%" height="15" fill="rgb(220,133,22)" fg:x="1078" fg:w="131"/><text x="85.6700%" y="351.50">regex_automata:..</text></g><g><title>regex_syntax::hir::translate::Translator::translate (7 samples, 0.55%)</title><rect x="95.2456%" y="325" width="0.5547%" height="15" fill="rgb(239,134,19)" fg:x="1202" fg:w="7"/><text x="95.4956%" y="335.50"></text></g><g><title>regex_syntax::ast::visitor::visit (7 samples, 0.55%)</title><rect x="95.2456%" y="309" width="0.5547%" height="15" fill="rgb(250,140,9)" fg:x="1202" fg:w="7"/><text x="95.4956%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (3 samples, 0.24%)</title><rect x="95.5626%" y="293" width="0.2377%" height="15" fill="rgb(225,59,14)" fg:x="1206" fg:w="3"/><text x="95.8126%" y="303.50"></text></g><g><title>regex_syntax::hir::translate::HirFrame::unwrap_expr (1 samples, 0.08%)</title><rect x="95.7211%" y="277" width="0.0792%" height="15" fill="rgb(214,152,51)" fg:x="1208" fg:w="1"/><text x="95.9711%" y="287.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::to_lowercase (2 samples, 0.16%)</title><rect x="95.8003%" y="373" width="0.1585%" height="15" fill="rgb(251,227,43)" fg:x="1209" fg:w="2"/><text x="96.0503%" y="383.50"></text></g><g><title>alloc::str::convert_while_ascii (1 samples, 0.08%)</title><rect x="95.8796%" y="357" width="0.0792%" height="15" fill="rgb(241,96,17)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.08%)</title><rect x="95.8796%" y="341" width="0.0792%" height="15" fill="rgb(234,198,43)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.8796%" y="325" width="0.0792%" height="15" fill="rgb(220,108,29)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="95.8796%" y="309" width="0.0792%" height="15" fill="rgb(226,163,33)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="95.8796%" y="293" width="0.0792%" height="15" fill="rgb(205,194,45)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="95.8796%" y="277" width="0.0792%" height="15" fill="rgb(206,143,44)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="95.8796%" y="261" width="0.0792%" height="15" fill="rgb(236,136,36)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="271.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="95.8796%" y="245" width="0.0792%" height="15" fill="rgb(249,172,42)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="95.8796%" y="229" width="0.0792%" height="15" fill="rgb(216,139,23)" fg:x="1210" fg:w="1"/><text x="96.1296%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.08%)</title><rect x="95.9588%" y="309" width="0.0792%" height="15" fill="rgb(207,166,20)" fg:x="1211" fg:w="1"/><text x="96.2088%" y="319.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_next_state (2 samples, 0.16%)</title><rect x="95.9588%" y="325" width="0.1585%" height="15" fill="rgb(210,209,22)" fg:x="1211" fg:w="2"/><text x="96.2088%" y="335.50"></text></g><g><title>regex_automata::util::determinize::next (1 samples, 0.08%)</title><rect x="96.0380%" y="309" width="0.0792%" height="15" fill="rgb(232,118,20)" fg:x="1212" fg:w="1"/><text x="96.2880%" y="319.50"></text></g><g><title>regex_automata::util::determinize::state::StateBuilderMatches::add_match_pattern_id (1 samples, 0.08%)</title><rect x="96.0380%" y="293" width="0.0792%" height="15" fill="rgb(238,113,42)" fg:x="1212" fg:w="1"/><text x="96.2880%" y="303.50"></text></g><g><title>&lt;regex_automata::meta::strategy::Core as regex_automata::meta::strategy::Strategy&gt;::search_half (3 samples, 0.24%)</title><rect x="95.9588%" y="357" width="0.2377%" height="15" fill="rgb(231,42,5)" fg:x="1211" fg:w="3"/><text x="96.2088%" y="367.50"></text></g><g><title>regex_automata::hybrid::search::find_fwd (3 samples, 0.24%)</title><rect x="95.9588%" y="341" width="0.2377%" height="15" fill="rgb(243,166,24)" fg:x="1211" fg:w="3"/><text x="96.2088%" y="351.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::cache_start_group (1 samples, 0.08%)</title><rect x="96.1173%" y="325" width="0.0792%" height="15" fill="rgb(237,226,12)" fg:x="1213" fg:w="1"/><text x="96.3673%" y="335.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.1965%" y="277" width="0.0792%" height="15" fill="rgb(229,133,24)" fg:x="1214" fg:w="1"/><text x="96.4465%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1965%" y="309" width="0.1585%" height="15" fill="rgb(238,33,43)" fg:x="1214" fg:w="2"/><text x="96.4465%" y="319.50"></text></g><g><title>&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (2 samples, 0.16%)</title><rect x="96.1965%" y="293" width="0.1585%" height="15" fill="rgb(227,59,38)" fg:x="1214" fg:w="2"/><text x="96.4465%" y="303.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.2758%" y="277" width="0.0792%" height="15" fill="rgb(230,97,0)" fg:x="1215" fg:w="1"/><text x="96.5258%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="96.3550%" y="309" width="0.0792%" height="15" fill="rgb(250,173,50)" fg:x="1216" fg:w="1"/><text x="96.6050%" y="319.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.4342%" y="293" width="0.0792%" height="15" fill="rgb(240,15,50)" fg:x="1217" fg:w="1"/><text x="96.6842%" y="303.50"></text></g><g><title>regex_automata::meta::wrappers::BoundedBacktracker::new (1 samples, 0.08%)</title><rect x="96.5135%" y="293" width="0.0792%" height="15" fill="rgb(221,93,22)" fg:x="1218" fg:w="1"/><text x="96.7635%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;regex_automata::nfa::thompson::compiler::Compiler&gt; (1 samples, 0.08%)</title><rect x="96.5135%" y="277" width="0.0792%" height="15" fill="rgb(245,180,53)" fg:x="1218" fg:w="1"/><text x="96.7635%" y="287.50"></text></g><g><title>regex_automata::meta::wrappers::Hybrid::new (3 samples, 0.24%)</title><rect x="96.5927%" y="293" width="0.2377%" height="15" fill="rgb(231,88,51)" fg:x="1219" fg:w="3"/><text x="96.8427%" y="303.50"></text></g><g><title>regex_automata::hybrid::dfa::Builder::build_from_nfa (2 samples, 0.16%)</title><rect x="96.6719%" y="277" width="0.1585%" height="15" fill="rgb(240,58,21)" fg:x="1220" fg:w="2"/><text x="96.9219%" y="287.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="96.7512%" y="261" width="0.0792%" height="15" fill="rgb(237,21,10)" fg:x="1221" fg:w="1"/><text x="97.0012%" y="271.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="96.7512%" y="245" width="0.0792%" height="15" fill="rgb(218,43,11)" fg:x="1221" fg:w="1"/><text x="97.0012%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="96.8304%" y="261" width="0.0792%" height="15" fill="rgb(218,221,29)" fg:x="1222" fg:w="1"/><text x="97.0804%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="96.8304%" y="245" width="0.0792%" height="15" fill="rgb(214,118,42)" fg:x="1222" fg:w="1"/><text x="97.0804%" y="255.50"></text></g><g><title>__rdl_alloc (1 samples, 0.08%)</title><rect x="96.8304%" y="229" width="0.0792%" height="15" fill="rgb(251,200,26)" fg:x="1222" fg:w="1"/><text x="97.0804%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.08%)</title><rect x="96.8304%" y="213" width="0.0792%" height="15" fill="rgb(237,101,39)" fg:x="1222" fg:w="1"/><text x="97.0804%" y="223.50"></text></g><g><title>regex_automata::nfa::thompson::nfa::Inner::into_nfa (4 samples, 0.32%)</title><rect x="96.9097%" y="261" width="0.3170%" height="15" fill="rgb(251,117,11)" fg:x="1223" fg:w="4"/><text x="97.1597%" y="271.50"></text></g><g><title>regex_automata::meta::strategy::new (11 samples, 0.87%)</title><rect x="96.4342%" y="309" width="0.8716%" height="15" fill="rgb(216,223,23)" fg:x="1217" fg:w="11"/><text x="96.6842%" y="319.50"></text></g><g><title>regex_automata::nfa::thompson::compiler::Compiler::compile (6 samples, 0.48%)</title><rect x="96.8304%" y="293" width="0.4754%" height="15" fill="rgb(251,54,12)" fg:x="1222" fg:w="6"/><text x="97.0804%" y="303.50"></text></g><g><title>regex_automata::nfa::thompson::builder::Builder::build (6 samples, 0.48%)</title><rect x="96.8304%" y="277" width="0.4754%" height="15" fill="rgb(254,176,54)" fg:x="1222" fg:w="6"/><text x="97.0804%" y="287.50"></text></g><g><title>regex_automata::util::captures::GroupInfo::new (1 samples, 0.08%)</title><rect x="97.2266%" y="261" width="0.0792%" height="15" fill="rgb(210,32,8)" fg:x="1227" fg:w="1"/><text x="97.4766%" y="271.50"></text></g><g><title>regex_automata::util::captures::GroupInfoInner::add_first_group (1 samples, 0.08%)</title><rect x="97.2266%" y="245" width="0.0792%" height="15" fill="rgb(235,52,38)" fg:x="1227" fg:w="1"/><text x="97.4766%" y="255.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.2266%" y="229" width="0.0792%" height="15" fill="rgb(231,4,44)" fg:x="1227" fg:w="1"/><text x="97.4766%" y="239.50"></text></g><g><title>regex_syntax::ast::ClassSetUnion::push (1 samples, 0.08%)</title><rect x="97.3059%" y="261" width="0.0792%" height="15" fill="rgb(249,2,32)" fg:x="1228" fg:w="1"/><text x="97.5559%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3059%" y="245" width="0.0792%" height="15" fill="rgb(224,65,26)" fg:x="1228" fg:w="1"/><text x="97.5559%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3059%" y="229" width="0.0792%" height="15" fill="rgb(250,73,40)" fg:x="1228" fg:w="1"/><text x="97.5559%" y="239.50"></text></g><g><title>realloc (1 samples, 0.08%)</title><rect x="97.3059%" y="213" width="0.0792%" height="15" fill="rgb(253,177,16)" fg:x="1228" fg:w="1"/><text x="97.5559%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_set_class (2 samples, 0.16%)</title><rect x="97.3059%" y="277" width="0.1585%" height="15" fill="rgb(217,32,34)" fg:x="1228" fg:w="2"/><text x="97.5559%" y="287.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::push_class_open (1 samples, 0.08%)</title><rect x="97.3851%" y="261" width="0.0792%" height="15" fill="rgb(212,7,10)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.08%)</title><rect x="97.3851%" y="245" width="0.0792%" height="15" fill="rgb(245,89,8)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.08%)</title><rect x="97.3851%" y="229" width="0.0792%" height="15" fill="rgb(237,16,53)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="239.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="97.3851%" y="213" width="0.0792%" height="15" fill="rgb(250,204,30)" fg:x="1229" fg:w="1"/><text x="97.6351%" y="223.50"></text></g><g><title>regex_syntax::ast::parse::Parser::parse (4 samples, 0.32%)</title><rect x="97.3059%" y="309" width="0.3170%" height="15" fill="rgb(208,77,27)" fg:x="1228" fg:w="4"/><text x="97.5559%" y="319.50"></text></g><g><title>regex_syntax::ast::parse::ParserI&lt;P&gt;::parse_with_comments (4 samples, 0.32%)</title><rect x="97.3059%" y="293" width="0.3170%" height="15" fill="rgb(250,204,28)" fg:x="1228" fg:w="4"/><text x="97.5559%" y="303.50"></text></g><g><title>regex_syntax::ast::visitor::visit (2 samples, 0.16%)</title><rect x="97.4643%" y="277" width="0.1585%" height="15" fill="rgb(244,63,21)" fg:x="1230" fg:w="2"/><text x="97.7143%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::finish (1 samples, 0.08%)</title><rect x="97.7021%" y="277" width="0.0792%" height="15" fill="rgb(236,85,44)" fg:x="1233" fg:w="1"/><text x="97.9521%" y="287.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_class_set_item_post (1 samples, 0.08%)</title><rect x="97.7813%" y="277" width="0.0792%" height="15" fill="rgb(215,98,4)" fg:x="1234" fg:w="1"/><text x="98.0313%" y="287.50"></text></g><g><title>regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.08%)</title><rect x="97.7813%" y="261" width="0.0792%" height="15" fill="rgb(235,38,11)" fg:x="1234" fg:w="1"/><text x="98.0313%" y="271.50"></text></g><g><title>core::slice::sort::insertion_sort_shift_left (1 samples, 0.08%)</title><rect x="97.7813%" y="245" width="0.0792%" height="15" fill="rgb(254,186,25)" fg:x="1234" fg:w="1"/><text x="98.0313%" y="255.50"></text></g><g><title>regex::regex::string::Regex::new (22 samples, 1.74%)</title><rect x="96.1965%" y="357" width="1.7433%" height="15" fill="rgb(225,55,31)" fg:x="1214" fg:w="22"/><text x="96.4465%" y="367.50"></text></g><g><title>regex::builders::Builder::build_one_string (22 samples, 1.74%)</title><rect x="96.1965%" y="341" width="1.7433%" height="15" fill="rgb(211,15,21)" fg:x="1214" fg:w="22"/><text x="96.4465%" y="351.50"></text></g><g><title>regex_automata::meta::regex::Builder::build (22 samples, 1.74%)</title><rect x="96.1965%" y="325" width="1.7433%" height="15" fill="rgb(215,187,41)" fg:x="1214" fg:w="22"/><text x="96.4465%" y="335.50"></text></g><g><title>regex_syntax::hir::translate::Translator::translate (4 samples, 0.32%)</title><rect x="97.6228%" y="309" width="0.3170%" height="15" fill="rgb(248,69,32)" fg:x="1232" fg:w="4"/><text x="97.8728%" y="319.50"></text></g><g><title>regex_syntax::ast::visitor::visit (4 samples, 0.32%)</title><rect x="97.6228%" y="293" width="0.3170%" height="15" fill="rgb(252,102,52)" fg:x="1232" fg:w="4"/><text x="97.8728%" y="303.50"></text></g><g><title>&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (1 samples, 0.08%)</title><rect x="97.8605%" y="277" width="0.0792%" height="15" fill="rgb(253,140,32)" fg:x="1235" fg:w="1"/><text x="98.1105%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.16%)</title><rect x="98.5737%" y="277" width="0.1585%" height="15" fill="rgb(216,56,42)" fg:x="1244" fg:w="2"/><text x="98.8237%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="98.5737%" y="261" width="0.1585%" height="15" fill="rgb(216,184,14)" fg:x="1244" fg:w="2"/><text x="98.8237%" y="271.50"></text></g><g><title>realloc (2 samples, 0.16%)</title><rect x="98.5737%" y="245" width="0.1585%" height="15" fill="rgb(237,187,27)" fg:x="1244" fg:w="2"/><text x="98.8237%" y="255.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::set_transition (1 samples, 0.08%)</title><rect x="98.7322%" y="277" width="0.0792%" height="15" fill="rgb(219,65,3)" fg:x="1246" fg:w="1"/><text x="98.9822%" y="287.50"></text></g><g><title>regex_automata::hybrid::dfa::Lazy::init_cache (10 samples, 0.79%)</title><rect x="98.0983%" y="293" width="0.7924%" height="15" fill="rgb(245,83,25)" fg:x="1238" fg:w="10"/><text x="98.3483%" y="303.50"></text></g><g><title>regex_automata::util::determinize::state::State::dead (1 samples, 0.08%)</title><rect x="98.8114%" y="277" width="0.0792%" height="15" fill="rgb(214,205,45)" fg:x="1247" fg:w="1"/><text x="99.0614%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.08%)</title><rect x="98.8114%" y="261" width="0.0792%" height="15" fill="rgb(241,20,18)" fg:x="1247" fg:w="1"/><text x="99.0614%" y="271.50"></text></g><g><title>indefinite::helper::Helper::starts_with_vowel (38 samples, 3.01%)</title><rect x="95.9588%" y="373" width="3.0111%" height="15" fill="rgb(232,163,23)" fg:x="1211" fg:w="38"/><text x="96.2088%" y="383.50">ind..</text></g><g><title>regex_automata::util::pool::inner::Pool&lt;T,F&gt;::get_slow (13 samples, 1.03%)</title><rect x="97.9398%" y="357" width="1.0301%" height="15" fill="rgb(214,5,46)" fg:x="1236" fg:w="13"/><text x="98.1898%" y="367.50"></text></g><g><title>regex_automata::meta::regex::Builder::build_many_from_hir::{{closure}} (13 samples, 1.03%)</title><rect x="97.9398%" y="341" width="1.0301%" height="15" fill="rgb(229,78,17)" fg:x="1236" fg:w="13"/><text x="98.1898%" y="351.50"></text></g><g><title>&lt;regex_automata::meta::strategy::ReverseAnchored as regex_automata::meta::strategy::Strategy&gt;::create_cache (13 samples, 1.03%)</title><rect x="97.9398%" y="325" width="1.0301%" height="15" fill="rgb(248,89,10)" fg:x="1236" fg:w="13"/><text x="98.1898%" y="335.50"></text></g><g><title>regex_automata::hybrid::dfa::Cache::new (12 samples, 0.95%)</title><rect x="98.0190%" y="309" width="0.9509%" height="15" fill="rgb(248,54,15)" fg:x="1237" fg:w="12"/><text x="98.2690%" y="319.50"></text></g><g><title>regex_automata::util::sparse_set::SparseSets::new (1 samples, 0.08%)</title><rect x="98.8906%" y="293" width="0.0792%" height="15" fill="rgb(223,116,6)" fg:x="1248" fg:w="1"/><text x="99.1406%" y="303.50"></text></g><g><title>&lt;&amp;kernel::model::entry::Entry as plugins_core::looking::model::Observe&lt;replies::ObservedEntity&gt;&gt;::observe (315 samples, 24.96%)</title><rect x="74.0887%" y="469" width="24.9604%" height="15" fill="rgb(205,125,38)" fg:x="935" fg:w="315"/><text x="74.3387%" y="479.50">&lt;&amp;kernel::model::entry::Entry as plugins..</text></g><g><title>plugins_core::looking::model::qualify_name (306 samples, 24.25%)</title><rect x="74.8019%" y="453" width="24.2472%" height="15" fill="rgb(251,78,38)" fg:x="944" fg:w="306"/><text x="75.0519%" y="463.50">plugins_core::looking::model::qualify_n..</text></g><g><title>indefinite::indefinite (306 samples, 24.25%)</title><rect x="74.8019%" y="437" width="24.2472%" height="15" fill="rgb(253,78,28)" fg:x="944" fg:w="306"/><text x="75.0519%" y="447.50">indefinite::indefinite</text></g><g><title>indefinite::methods::indefinite (306 samples, 24.25%)</title><rect x="74.8019%" y="421" width="24.2472%" height="15" fill="rgb(209,120,3)" fg:x="944" fg:w="306"/><text x="75.0519%" y="431.50">indefinite::methods::indefinite</text></g><g><title>indefinite::methods::apply_rules (305 samples, 24.17%)</title><rect x="74.8811%" y="405" width="24.1680%" height="15" fill="rgb(238,229,9)" fg:x="945" fg:w="305"/><text x="75.1311%" y="415.50">indefinite::methods::apply_rules</text></g><g><title>indefinite::rules::other::Other::run (41 samples, 3.25%)</title><rect x="95.8003%" y="389" width="3.2488%" height="15" fill="rgb(253,159,18)" fg:x="1209" fg:w="41"/><text x="96.0503%" y="399.50">ind..</text></g><g><title>indefinite::irregular::Irregular::check (1 samples, 0.08%)</title><rect x="98.9699%" y="373" width="0.0792%" height="15" fill="rgb(244,42,34)" fg:x="1249" fg:w="1"/><text x="99.2199%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2076%" y="293" width="0.0792%" height="15" fill="rgb(224,8,7)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.08%)</title><rect x="99.2076%" y="277" width="0.0792%" height="15" fill="rgb(210,201,45)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.08%)</title><rect x="99.2076%" y="261" width="0.0792%" height="15" fill="rgb(252,185,21)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="99.2076%" y="245" width="0.0792%" height="15" fill="rgb(223,131,1)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="99.2076%" y="229" width="0.0792%" height="15" fill="rgb(245,141,16)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.08%)</title><rect x="99.2076%" y="213" width="0.0792%" height="15" fill="rgb(229,55,45)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="223.50"></text></g><g><title>__libc_malloc (1 samples, 0.08%)</title><rect x="99.2076%" y="197" width="0.0792%" height="15" fill="rgb(208,92,15)" fg:x="1252" fg:w="1"/><text x="99.4576%" y="207.50"></text></g><g><title>&lt;kernel::model::scopes::ScopeValue as core::clone::Clone&gt;::clone (4 samples, 0.32%)</title><rect x="99.0491%" y="437" width="0.3170%" height="15" fill="rgb(234,185,47)" fg:x="1250" fg:w="4"/><text x="99.2991%" y="447.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.32%)</title><rect x="99.0491%" y="421" width="0.3170%" height="15" fill="rgb(253,104,50)" fg:x="1250" fg:w="4"/><text x="99.2991%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.2076%" y="405" width="0.1585%" height="15" fill="rgb(205,70,7)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.16%)</title><rect x="99.2076%" y="389" width="0.1585%" height="15" fill="rgb(240,178,43)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.2076%" y="373" width="0.1585%" height="15" fill="rgb(214,112,2)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="99.2076%" y="357" width="0.1585%" height="15" fill="rgb(206,46,17)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.16%)</title><rect x="99.2076%" y="341" width="0.1585%" height="15" fill="rgb(225,220,16)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="351.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.16%)</title><rect x="99.2076%" y="325" width="0.1585%" height="15" fill="rgb(238,65,40)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="335.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.16%)</title><rect x="99.2076%" y="309" width="0.1585%" height="15" fill="rgb(230,151,21)" fg:x="1252" fg:w="2"/><text x="99.4576%" y="319.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.08%)</title><rect x="99.2868%" y="293" width="0.0792%" height="15" fill="rgb(218,58,49)" fg:x="1253" fg:w="1"/><text x="99.5368%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="99.2868%" y="277" width="0.0792%" height="15" fill="rgb(219,179,14)" fg:x="1253" fg:w="1"/><text x="99.5368%" y="287.50"></text></g><g><title>__libc_free (1 samples, 0.08%)</title><rect x="99.4453%" y="245" width="0.0792%" height="15" fill="rgb(223,72,1)" fg:x="1255" fg:w="1"/><text x="99.6953%" y="255.50"></text></g><g><title>&lt;kernel::model::entity::Entity as kernel::model::props::CoreProps&gt;::gid (2 samples, 0.16%)</title><rect x="99.4453%" y="325" width="0.1585%" height="15" fill="rgb(238,126,10)" fg:x="1255" fg:w="2"/><text x="99.6953%" y="335.50"></text></g><g><title>kernel::model::props::load_props (2 samples, 0.16%)</title><rect x="99.4453%" y="309" width="0.1585%" height="15" fill="rgb(224,206,38)" fg:x="1255" fg:w="2"/><text x="99.6953%" y="319.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (2 samples, 0.16%)</title><rect x="99.4453%" y="293" width="0.1585%" height="15" fill="rgb(212,201,54)" fg:x="1255" fg:w="2"/><text x="99.6953%" y="303.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Properties&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.4453%" y="277" width="0.1585%" height="15" fill="rgb(218,154,48)" fg:x="1255" fg:w="2"/><text x="99.6953%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.4453%" y="261" width="0.1585%" height="15" fill="rgb(232,93,24)" fg:x="1255" fg:w="2"/><text x="99.6953%" y="271.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Props&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5246%" y="245" width="0.0792%" height="15" fill="rgb(245,30,21)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5246%" y="229" width="0.0792%" height="15" fill="rgb(242,148,29)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="239.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (1 samples, 0.08%)</title><rect x="99.5246%" y="213" width="0.0792%" height="15" fill="rgb(244,153,54)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5246%" y="197" width="0.0792%" height="15" fill="rgb(252,87,22)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="207.50"></text></g><g><title>kernel::model::props::_::&lt;impl serde::de::Deserialize for kernel::model::props::Property&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.5246%" y="181" width="0.0792%" height="15" fill="rgb(210,51,29)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="191.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.5246%" y="165" width="0.0792%" height="15" fill="rgb(242,136,47)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="175.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.5246%" y="149" width="0.0792%" height="15" fill="rgb(238,68,4)" fg:x="1256" fg:w="1"/><text x="99.7746%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6830%" y="197" width="0.0792%" height="15" fill="rgb(242,161,30)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="207.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6830%" y="181" width="0.0792%" height="15" fill="rgb(218,58,44)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="191.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6830%" y="165" width="0.0792%" height="15" fill="rgb(252,125,32)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="175.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6830%" y="149" width="0.0792%" height="15" fill="rgb(219,178,0)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6830%" y="133" width="0.0792%" height="15" fill="rgb(213,152,7)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6830%" y="117" width="0.0792%" height="15" fill="rgb(249,109,34)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="127.50"></text></g><g><title>&lt;serde::de::value::MapDeserializer&lt;I,E&gt; as serde::de::MapAccess&gt;::next_entry_seed (1 samples, 0.08%)</title><rect x="99.6830%" y="101" width="0.0792%" height="15" fill="rgb(232,96,21)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="111.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6830%" y="85" width="0.0792%" height="15" fill="rgb(228,27,39)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="95.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6830%" y="69" width="0.0792%" height="15" fill="rgb(211,182,52)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="79.50"></text></g><g><title>&lt;serde::__private::de::content::ContentRefDeserializer&lt;E&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.08%)</title><rect x="99.6830%" y="53" width="0.0792%" height="15" fill="rgb(234,178,38)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="63.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.6830%" y="37" width="0.0792%" height="15" fill="rgb(221,111,3)" fg:x="1258" fg:w="1"/><text x="99.9330%" y="47.50"></text></g><g><title>kernel::model::deserialize_entity_from_value (3 samples, 0.24%)</title><rect x="99.6038%" y="309" width="0.2377%" height="15" fill="rgb(228,175,21)" fg:x="1257" fg:w="3"/><text x="99.8538%" y="319.50"></text></g><g><title>kernel::model::deserialize_entity_from_value_with_session (3 samples, 0.24%)</title><rect x="99.6038%" y="293" width="0.2377%" height="15" fill="rgb(228,174,43)" fg:x="1257" fg:w="3"/><text x="99.8538%" y="303.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (3 samples, 0.24%)</title><rect x="99.6038%" y="277" width="0.2377%" height="15" fill="rgb(211,191,0)" fg:x="1257" fg:w="3"/><text x="99.8538%" y="287.50"></text></g><g><title>serde_json::value::de::visit_object (3 samples, 0.24%)</title><rect x="99.6038%" y="261" width="0.2377%" height="15" fill="rgb(253,117,3)" fg:x="1257" fg:w="3"/><text x="99.8538%" y="271.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_map (2 samples, 0.16%)</title><rect x="99.6830%" y="245" width="0.1585%" height="15" fill="rgb(241,127,19)" fg:x="1258" fg:w="2"/><text x="99.9330%" y="255.50"></text></g><g><title>serde_json::value::de::visit_object (2 samples, 0.16%)</title><rect x="99.6830%" y="229" width="0.1585%" height="15" fill="rgb(218,103,12)" fg:x="1258" fg:w="2"/><text x="99.9330%" y="239.50"></text></g><g><title>kernel::model::scopes::_::&lt;impl serde::de::Deserialize for kernel::model::scopes::ScopeValue&gt;::deserialize (2 samples, 0.16%)</title><rect x="99.6830%" y="213" width="0.1585%" height="15" fill="rgb(236,214,43)" fg:x="1258" fg:w="2"/><text x="99.9330%" y="223.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7623%" y="197" width="0.0792%" height="15" fill="rgb(244,144,19)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="207.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7623%" y="181" width="0.0792%" height="15" fill="rgb(246,188,10)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="191.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.08%)</title><rect x="99.7623%" y="165" width="0.0792%" height="15" fill="rgb(212,193,33)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="175.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.7623%" y="149" width="0.0792%" height="15" fill="rgb(241,51,29)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="159.50"></text></g><g><title>&lt;serde::__private::de::content::ContentVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.7623%" y="133" width="0.0792%" height="15" fill="rgb(211,58,19)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="143.50"></text></g><g><title>&lt;serde_json::value::de::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.08%)</title><rect x="99.7623%" y="117" width="0.0792%" height="15" fill="rgb(229,111,26)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="127.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.08%)</title><rect x="99.7623%" y="101" width="0.0792%" height="15" fill="rgb(213,115,40)" fg:x="1259" fg:w="1"/><text x="100.0123%" y="111.50"></text></g><g><title>&lt;plugins_core::carrying::model::Containing as kernel::model::scopes::Needs&lt;alloc::rc::Rc&lt;dyn kernel::session::ActiveSession&gt;&gt;&gt;::supply (7 samples, 0.55%)</title><rect x="99.3661%" y="437" width="0.5547%" height="15" fill="rgb(209,56,44)" fg:x="1254" fg:w="7"/><text x="99.6161%" y="447.50"></text></g><g><title>core::iter::adapters::try_process (7 samples, 0.55%)</title><rect x="99.3661%" y="421" width="0.5547%" height="15" fill="rgb(230,108,32)" fg:x="1254" fg:w="7"/><text x="99.6161%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.55%)</title><rect x="99.3661%" y="405" width="0.5547%" height="15" fill="rgb(216,165,31)" fg:x="1254" fg:w="7"/><text x="99.6161%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.55%)</title><rect x="99.3661%" y="389" width="0.5547%" height="15" fill="rgb(218,122,21)" fg:x="1254" fg:w="7"/><text x="99.6161%" y="399.50"></text></g><g><title>&lt;engine::session::Session as kernel::session::ActiveSession&gt;::ensure_entity (7 samples, 0.55%)</title><rect x="99.3661%" y="373" width="0.5547%" height="15" fill="rgb(223,224,47)" fg:x="1254" fg:w="7"/><text x="99.6161%" y="383.50"></text></g><g><title>&lt;engine::session::Session as kernel::model::LoadsEntities&gt;::load_entity (6 samples, 0.48%)</title><rect x="99.4453%" y="357" width="0.4754%" height="15" fill="rgb(238,102,44)" fg:x="1255" fg:w="6"/><text x="99.6953%" y="367.50"></text></g><g><title>engine::internal::Entities::add_persisted (6 samples, 0.48%)</title><rect x="99.4453%" y="341" width="0.4754%" height="15" fill="rgb(236,46,40)" fg:x="1255" fg:w="6"/><text x="99.6953%" y="351.50"></text></g><g><title>kernel::model::deserialize_entity (4 samples, 0.32%)</title><rect x="99.6038%" y="325" width="0.3170%" height="15" fill="rgb(247,202,50)" fg:x="1257" fg:w="4"/><text x="99.8538%" y="335.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.08%)</title><rect x="99.8415%" y="309" width="0.0792%" height="15" fill="rgb(209,99,20)" fg:x="1260" fg:w="1"/><text x="100.0915%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8415%" y="293" width="0.0792%" height="15" fill="rgb(252,27,34)" fg:x="1260" fg:w="1"/><text x="100.0915%" y="303.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8415%" y="277" width="0.0792%" height="15" fill="rgb(215,206,23)" fg:x="1260" fg:w="1"/><text x="100.0915%" y="287.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.08%)</title><rect x="99.8415%" y="261" width="0.0792%" height="15" fill="rgb(212,135,36)" fg:x="1260" fg:w="1"/><text x="100.0915%" y="271.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.08%)</title><rect x="99.8415%" y="245" width="0.0792%" height="15" fill="rgb(240,189,1)" fg:x="1260" fg:w="1"/><text x="100.0915%" y="255.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.08%)</title><rect x="99.8415%" y="229" width="0.0792%" height="15" fill="rgb(242,56,20)" fg:x="1260" fg:w="1"/><text x="100.0915%" y="239.50"></text></g><g><title>all (1,262 samples, 100%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(247,132,33)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1119.50"></text></g><g><title>simple-6bd4aef2 (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1093" width="100.0000%" height="15" fill="rgb(208,149,11)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1103.50">simple-6bd4aef2</text></g><g><title>_start (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1077" width="100.0000%" height="15" fill="rgb(211,33,11)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1087.50">_start</text></g><g><title>__libc_start_main (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(221,29,38)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1071.50">__libc_start_main</text></g><g><title>main (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1045" width="100.0000%" height="15" fill="rgb(206,182,49)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1055.50">main</text></g><g><title>std::rt::lang_start_internal (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1029" width="100.0000%" height="15" fill="rgb(216,140,1)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1039.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,262 samples, 100.00%)</title><rect x="0.0000%" y="1013" width="100.0000%" height="15" fill="rgb(232,57,40)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1023.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,262 samples, 100.00%)</title><rect x="0.0000%" y="997" width="100.0000%" height="15" fill="rgb(224,186,18)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="1007.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,262 samples, 100.00%)</title><rect x="0.0000%" y="981" width="100.0000%" height="15" fill="rgb(215,121,11)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="991.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,262 samples, 100.00%)</title><rect x="0.0000%" y="965" width="100.0000%" height="15" fill="rgb(245,147,10)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="975.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,262 samples, 100.00%)</title><rect x="0.0000%" y="949" width="100.0000%" height="15" fill="rgb(238,153,13)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="959.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,262 samples, 100.00%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(233,108,0)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="943.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,262 samples, 100.00%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(212,157,17)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="927.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,262 samples, 100.00%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(225,213,38)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="911.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (1,262 samples, 100.00%)</title><rect x="0.0000%" y="885" width="100.0000%" height="15" fill="rgb(248,16,11)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="895.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,262 samples, 100.00%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(241,33,4)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="879.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>simple::main (1,262 samples, 100.00%)</title><rect x="0.0000%" y="853" width="100.0000%" height="15" fill="rgb(222,26,43)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="863.50">simple::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,262 samples, 100.00%)</title><rect x="0.0000%" y="837" width="100.0000%" height="15" fill="rgb(243,29,36)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="847.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::profile (1,262 samples, 100.00%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(241,9,27)" fg:x="0" fg:w="1262"/><text x="0.2500%" y="831.50">criterion::routine::Routine::profile</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::warm_up (437 samples, 34.63%)</title><rect x="65.3724%" y="805" width="34.6276%" height="15" fill="rgb(205,117,26)" fg:x="825" fg:w="437"/><text x="65.6224%" y="815.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routi..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (437 samples, 34.63%)</title><rect x="65.3724%" y="789" width="34.6276%" height="15" fill="rgb(209,80,39)" fg:x="825" fg:w="437"/><text x="65.6224%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>tests::evaluate_text_in_new_domain (437 samples, 34.63%)</title><rect x="65.3724%" y="773" width="34.6276%" height="15" fill="rgb(239,155,6)" fg:x="825" fg:w="437"/><text x="65.6224%" y="783.50">tests::evaluate_text_in_new_domain</text></g><g><title>engine::session::Session::evaluate_and_perform (339 samples, 26.86%)</title><rect x="73.1379%" y="757" width="26.8621%" height="15" fill="rgb(212,104,12)" fg:x="923" fg:w="339"/><text x="73.3879%" y="767.50">engine::session::Session::evaluate_and_perf..</text></g><g><title>engine::perform::StandardPerformer::evaluate_and_perform (339 samples, 26.86%)</title><rect x="73.1379%" y="741" width="26.8621%" height="15" fill="rgb(234,204,3)" fg:x="923" fg:w="339"/><text x="73.3879%" y="751.50">engine::perform::StandardPerformer::evaluat..</text></g><g><title>&lt;kernel::plugins::SessionPlugins as kernel::plugins::Evaluator&gt;::evaluate (339 samples, 26.86%)</title><rect x="73.1379%" y="725" width="26.8621%" height="15" fill="rgb(251,218,7)" fg:x="923" fg:w="339"/><text x="73.3879%" y="735.50">&lt;kernel::plugins::SessionPlugins as kernel:..</text></g><g><title>core::iter::adapters::try_process (339 samples, 26.86%)</title><rect x="73.1379%" y="709" width="26.8621%" height="15" fill="rgb(221,81,32)" fg:x="923" fg:w="339"/><text x="73.3879%" y="719.50">core::iter::adapters::try_process</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (339 samples, 26.86%)</title><rect x="73.1379%" y="693" width="26.8621%" height="15" fill="rgb(214,152,26)" fg:x="923" fg:w="339"/><text x="73.3879%" y="703.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fro..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (339 samples, 26.86%)</title><rect x="73.1379%" y="677" width="26.8621%" height="15" fill="rgb(223,22,3)" fg:x="923" fg:w="339"/><text x="73.3879%" y="687.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as cor..</text></g><g><title>&lt;plugins_core::looking::LookingPlugin as kernel::plugins::Evaluator&gt;::evaluate (338 samples, 26.78%)</title><rect x="73.2171%" y="661" width="26.7829%" height="15" fill="rgb(207,174,7)" fg:x="924" fg:w="338"/><text x="73.4671%" y="671.50">&lt;plugins_core::looking::LookingPlugin as ke..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (338 samples, 26.78%)</title><rect x="73.2171%" y="645" width="26.7829%" height="15" fill="rgb(224,19,52)" fg:x="924" fg:w="338"/><text x="73.4671%" y="655.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>&lt;engine::perform::StandardPerformer as kernel::actions::Performer&gt;::perform (338 samples, 26.78%)</title><rect x="73.2171%" y="629" width="26.7829%" height="15" fill="rgb(228,24,14)" fg:x="924" fg:w="338"/><text x="73.4671%" y="639.50">&lt;engine::perform::StandardPerformer as kern..</text></g><g><title>kernel::plugins::mw::apply_middleware (329 samples, 26.07%)</title><rect x="73.9303%" y="613" width="26.0697%" height="15" fill="rgb(230,153,43)" fg:x="933" fg:w="329"/><text x="74.1803%" y="623.50">kernel::plugins::mw::apply_middleware</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (329 samples, 26.07%)</title><rect x="73.9303%" y="597" width="26.0697%" height="15" fill="rgb(231,106,12)" fg:x="933" fg:w="329"/><text x="74.1803%" y="607.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>&lt;plugins_dynlib::DynamicMiddleware as kernel::plugins::mw::Middleware&gt;::handle (329 samples, 26.07%)</title><rect x="73.9303%" y="581" width="26.0697%" height="15" fill="rgb(215,92,2)" fg:x="933" fg:w="329"/><text x="74.1803%" y="591.50">&lt;plugins_dynlib::DynamicMiddleware as kern..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (329 samples, 26.07%)</title><rect x="73.9303%" y="565" width="26.0697%" height="15" fill="rgb(249,143,25)" fg:x="933" fg:w="329"/><text x="74.1803%" y="575.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (329 samples, 26.07%)</title><rect x="73.9303%" y="549" width="26.0697%" height="15" fill="rgb(252,7,35)" fg:x="933" fg:w="329"/><text x="74.1803%" y="559.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>kernel::plugins::mw::MiddlewareNext::handle (329 samples, 26.07%)</title><rect x="73.9303%" y="533" width="26.0697%" height="15" fill="rgb(216,69,40)" fg:x="933" fg:w="329"/><text x="74.1803%" y="543.50">kernel::plugins::mw::MiddlewareNext::handle</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (329 samples, 26.07%)</title><rect x="73.9303%" y="517" width="26.0697%" height="15" fill="rgb(240,36,33)" fg:x="933" fg:w="329"/><text x="74.1803%" y="527.50">core::ops::function::FnOnce::call_once{{vt..</text></g><g><title>&lt;plugins_core::looking::actions::LookAction as kernel::actions::Action&gt;::perform (329 samples, 26.07%)</title><rect x="73.9303%" y="501" width="26.0697%" height="15" fill="rgb(231,128,14)" fg:x="933" fg:w="329"/><text x="74.1803%" y="511.50">&lt;plugins_core::looking::actions::LookActio..</text></g><g><title>plugins_core::looking::model::new_area_observation (329 samples, 26.07%)</title><rect x="73.9303%" y="485" width="26.0697%" height="15" fill="rgb(245,143,14)" fg:x="933" fg:w="329"/><text x="74.1803%" y="495.50">plugins_core::looking::model::new_area_obs..</text></g><g><title>kernel::model::entry::Entry::scope (12 samples, 0.95%)</title><rect x="99.0491%" y="469" width="0.9509%" height="15" fill="rgb(222,130,28)" fg:x="1250" fg:w="12"/><text x="99.2991%" y="479.50"></text></g><g><title>kernel::model::scopes::Scopes::load_scope (12 samples, 0.95%)</title><rect x="99.0491%" y="453" width="0.9509%" height="15" fill="rgb(212,10,48)" fg:x="1250" fg:w="12"/><text x="99.2991%" y="463.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9208%" y="437" width="0.0792%" height="15" fill="rgb(254,118,45)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="447.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9208%" y="421" width="0.0792%" height="15" fill="rgb(228,6,45)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="431.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_seq (1 samples, 0.08%)</title><rect x="99.9208%" y="405" width="0.0792%" height="15" fill="rgb(241,18,35)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="415.50"></text></g><g><title>serde_json::value::de::visit_array (1 samples, 0.08%)</title><rect x="99.9208%" y="389" width="0.0792%" height="15" fill="rgb(227,214,53)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.08%)</title><rect x="99.9208%" y="373" width="0.0792%" height="15" fill="rgb(224,107,51)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="383.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserializer for serde_json::value::Value&gt;::deserialize_struct (1 samples, 0.08%)</title><rect x="99.9208%" y="357" width="0.0792%" height="15" fill="rgb(248,60,28)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="367.50"></text></g><g><title>serde_json::value::de::visit_object (1 samples, 0.08%)</title><rect x="99.9208%" y="341" width="0.0792%" height="15" fill="rgb(249,101,23)" fg:x="1261" fg:w="1"/><text x="100.1708%" y="351.50"></text></g></svg></svg>